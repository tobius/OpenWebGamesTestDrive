var Module;
if (typeof Module === "undefined") Module = {};
if (!Module.expectedDataFileDownloads) {
 Module.expectedDataFileDownloads = 0;
 Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
((function() {
 var loadPackage = (function(metadata) {
  var PACKAGE_PATH;
  if (typeof window === "object") {
   PACKAGE_PATH = window["encodeURIComponent"](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/");
  } else if (typeof location !== "undefined") {
   PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/");
  } else {
   throw "using preloaded data can only be done on a web page or in a web worker";
  }
  var PACKAGE_NAME = "bin\bkCubes\bkCubes.data";
  var REMOTE_PACKAGE_BASE = "10kCubes.data";
  if (typeof Module["locateFilePackage"] === "function" && !Module["locateFile"]) {
   Module["locateFile"] = Module["locateFilePackage"];
   Module.printErr("warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)");
  }
  var REMOTE_PACKAGE_NAME = typeof Module["locateFile"] === "function" ? Module["locateFile"](REMOTE_PACKAGE_BASE) : (Module["filePackagePrefixURL"] || "") + REMOTE_PACKAGE_BASE;
  var REMOTE_PACKAGE_SIZE = 158044;
  var PACKAGE_UUID = "791c5f9c-c1d7-4a99-8fdf-aa2f1997ad3b";
  function fetchRemotePackage(packageName, packageSize, callback, errback) {
   var xhr = new XMLHttpRequest;
   xhr.open("GET", packageName, true);
   xhr.responseType = "arraybuffer";
   xhr.onprogress = (function(event) {
    var url = packageName;
    var size = packageSize;
    if (event.total) size = event.total;
    if (event.loaded) {
     if (!xhr.addedTotal) {
      xhr.addedTotal = true;
      if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
      Module.dataFileDownloads[url] = {
       loaded: event.loaded,
       total: size
      };
     } else {
      Module.dataFileDownloads[url].loaded = event.loaded;
     }
     var total = 0;
     var loaded = 0;
     var num = 0;
     for (var download in Module.dataFileDownloads) {
      var data = Module.dataFileDownloads[download];
      total += data.total;
      loaded += data.loaded;
      num++;
     }
     total = Math.ceil(total * Module.expectedDataFileDownloads / num);
     if (Module["setStatus"]) Module["setStatus"]("Downloading data... (" + loaded + "/" + total + ")");
    } else if (!Module.dataFileDownloads) {
     if (Module["setStatus"]) Module["setStatus"]("Downloading data...");
    }
   });
   xhr.onload = (function(event) {
    var packageData = xhr.response;
    callback(packageData);
   });
   xhr.send(null);
  }
  function handleError(error) {
   console.error("package error:", error);
  }
  var fetched = null, fetchedCallback = null;
  fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, (function(data) {
   if (fetchedCallback) {
    fetchedCallback(data);
    fetchedCallback = null;
   } else {
    fetched = data;
   }
  }), handleError);
  function runWithFS() {
   function assert(check, msg) {
    if (!check) throw msg + (new Error).stack;
   }
   function DataRequest(start, end, crunched, audio) {
    this.start = start;
    this.end = end;
    this.crunched = crunched;
    this.audio = audio;
   }
   DataRequest.prototype = {
    requests: {},
    open: (function(mode, name) {
     this.name = name;
     this.requests[name] = this;
     Module["addRunDependency"]("fp " + this.name);
    }),
    send: (function() {}),
    onload: (function() {
     var byteArray = this.byteArray.subarray(this.start, this.end);
     this.finish(byteArray);
    }),
    finish: (function(byteArray) {
     var that = this;
     Module["FS_createPreloadedFile"](this.name, null, byteArray, true, true, (function() {
      Module["removeRunDependency"]("fp " + that.name);
     }), (function() {
      if (that.audio) {
       Module["removeRunDependency"]("fp " + that.name);
      } else {
       Module.printErr("Preloading file " + that.name + " failed");
      }
     }), false, true);
     this.requests[this.name] = null;
    })
   };
   (new DataRequest(0, 157080, 0, 0)).open("GET", "/georgia.ttf");
   (new DataRequest(157080, 157630, 0, 0)).open("GET", "/UnlitNoTransformVColTex.fx");
   (new DataRequest(157630, 157859, 0, 0)).open("GET", "/UnlitNoTransformVColTex_ps.glsl");
   (new DataRequest(157859, 158044, 0, 0)).open("GET", "/UnlitNoTransformVColTex_vs.glsl");
   function processPackageData(arrayBuffer) {
    Module.finishedDataFileDownloads++;
    assert(arrayBuffer, "Loading data file failed.");
    var byteArray = new Uint8Array(arrayBuffer);
    var curr;
    DataRequest.prototype.byteArray = byteArray;
    DataRequest.prototype.requests["/georgia.ttf"].onload();
    DataRequest.prototype.requests["/UnlitNoTransformVColTex.fx"].onload();
    DataRequest.prototype.requests["/UnlitNoTransformVColTex_ps.glsl"].onload();
    DataRequest.prototype.requests["/UnlitNoTransformVColTex_vs.glsl"].onload();
    Module["removeRunDependency"]("datafile_bin\bkCubes\bkCubes.data");
   }
   Module["addRunDependency"]("datafile_bin\bkCubes\bkCubes.data");
   if (!Module.preloadResults) Module.preloadResults = {};
   Module.preloadResults[PACKAGE_NAME] = {
    fromCache: false
   };
   if (fetched) {
    processPackageData(fetched);
    fetched = null;
   } else {
    fetchedCallback = processPackageData;
   }
  }
  if (Module["calledRun"]) {
   runWithFS();
  } else {
   if (!Module["preRun"]) Module["preRun"] = [];
   Module["preRun"].push(runWithFS);
  }
 });
 loadPackage();
}))();
if (typeof window === "object") {
 Module["arguments"] = window.location.search.substr(1).trim().split("&");
 if (!Module["arguments"][0]) Module["arguments"] = [];
}
var Module;
if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
 if (!Module["print"]) Module["print"] = function print(x) {
  process["stdout"].write(x + "\n");
 };
 if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
  process["stderr"].write(x + "\n");
 };
 var nodeFS = require("fs");
 var nodePath = require("path");
 Module["read"] = function read(filename, binary) {
  filename = nodePath["normalize"](filename);
  var ret = nodeFS["readFileSync"](filename);
  if (!ret && filename != nodePath["resolve"](filename)) {
   filename = path.join(__dirname, "..", "src", filename);
   ret = nodeFS["readFileSync"](filename);
  }
  if (ret && !binary) ret = ret.toString();
  return ret;
 };
 Module["readBinary"] = function readBinary(filename) {
  return Module["read"](filename, true);
 };
 Module["load"] = function load(f) {
  globalEval(read(f));
 };
 if (!Module["thisProgram"]) {
  if (process["argv"].length > 1) {
   Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
  } else {
   Module["thisProgram"] = "unknown-program";
  }
 }
 Module["arguments"] = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", (function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 }));
 Module["inspect"] = (function() {
  return "[Emscripten Module object]";
 });
} else if (ENVIRONMENT_IS_SHELL) {
 if (!Module["print"]) Module["print"] = print;
 if (typeof printErr != "undefined") Module["printErr"] = printErr;
 if (typeof read != "undefined") {
  Module["read"] = read;
 } else {
  Module["read"] = function read() {
   throw "no read() available (jsc?)";
  };
 }
 Module["readBinary"] = function readBinary(f) {
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  var data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 Module["read"] = function read(url) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, false);
  xhr.send(null);
  return xhr.responseText;
 };
 if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof console !== "undefined") {
  if (!Module["print"]) Module["print"] = function print(x) {
   console.log(x);
  };
  if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
   console.log(x);
  };
 } else {
  var TRY_USE_DUMP = false;
  if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
   dump(x);
  }) : (function(x) {});
 }
 if (ENVIRONMENT_IS_WORKER) {
  Module["load"] = importScripts;
 }
 if (typeof Module["setWindowTitle"] === "undefined") {
  Module["setWindowTitle"] = (function(title) {
   document.title = title;
  });
 }
} else {
 throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
 eval.call(null, x);
}
if (!Module["load"] && Module["read"]) {
 Module["load"] = function load(f) {
  globalEval(Module["read"](f));
 };
}
if (!Module["print"]) {
 Module["print"] = (function() {});
}
if (!Module["printErr"]) {
 Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
 Module["arguments"] = [];
}
if (!Module["thisProgram"]) {
 Module["thisProgram"] = "./this.program";
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
var Runtime = {
 setTempRet0: (function(value) {
  tempRet0 = value;
 }),
 getTempRet0: (function() {
  return tempRet0;
 }),
 stackSave: (function() {
  return STACKTOP;
 }),
 stackRestore: (function(stackTop) {
  STACKTOP = stackTop;
 }),
 getNativeTypeSize: (function(type) {
  switch (type) {
  case "i1":
  case "i8":
   return 1;
  case "i16":
   return 2;
  case "i32":
   return 4;
  case "i64":
   return 8;
  case "float":
   return 4;
  case "double":
   return 8;
  default:
   {
    if (type[type.length - 1] === "*") {
     return Runtime.QUANTUM_SIZE;
    } else if (type[0] === "i") {
     var bits = parseInt(type.substr(1));
     assert(bits % 8 === 0);
     return bits / 8;
    } else {
     return 0;
    }
   }
  }
 }),
 getNativeFieldSize: (function(type) {
  return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
 }),
 STACK_ALIGN: 16,
 prepVararg: (function(ptr, type) {
  if (type === "double" || type === "i64") {
   if (ptr & 7) {
    assert((ptr & 7) === 4);
    ptr += 4;
   }
  } else {
   assert((ptr & 3) === 0);
  }
  return ptr;
 }),
 getAlignSize: (function(type, size, vararg) {
  if (!vararg && (type == "i64" || type == "double")) return 8;
  if (!type) return Math.min(size, 8);
  return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
 }),
 dynCall: (function(sig, ptr, args) {
  if (args && args.length) {
   if (!args.splice) args = Array.prototype.slice.call(args);
   args.splice(0, 0, ptr);
   return Module["dynCall_" + sig].apply(null, args);
  } else {
   return Module["dynCall_" + sig].call(null, ptr);
  }
 }),
 functionPointers: [],
 addFunction: (function(func) {
  for (var i = 0; i < Runtime.functionPointers.length; i++) {
   if (!Runtime.functionPointers[i]) {
    Runtime.functionPointers[i] = func;
    return 2 * (1 + i);
   }
  }
  throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
 }),
 removeFunction: (function(index) {
  Runtime.functionPointers[(index - 2) / 2] = null;
 }),
 warnOnce: (function(text) {
  if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
  if (!Runtime.warnOnce.shown[text]) {
   Runtime.warnOnce.shown[text] = 1;
   Module.printErr(text);
  }
 }),
 funcWrappers: {},
 getFuncWrapper: (function(func, sig) {
  assert(sig);
  if (!Runtime.funcWrappers[sig]) {
   Runtime.funcWrappers[sig] = {};
  }
  var sigCache = Runtime.funcWrappers[sig];
  if (!sigCache[func]) {
   sigCache[func] = function dynCall_wrapper() {
    return Runtime.dynCall(sig, func, arguments);
   };
  }
  return sigCache[func];
 }),
 getCompilerSetting: (function(name) {
  throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
 }),
 stackAlloc: (function(size) {
  var ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 15 & -16;
  return ret;
 }),
 staticAlloc: (function(size) {
  var ret = STATICTOP;
  STATICTOP = STATICTOP + size | 0;
  STATICTOP = STATICTOP + 15 & -16;
  return ret;
 }),
 dynamicAlloc: (function(size) {
  var ret = DYNAMICTOP;
  DYNAMICTOP = DYNAMICTOP + size | 0;
  DYNAMICTOP = DYNAMICTOP + 15 & -16;
  if (DYNAMICTOP >= TOTAL_MEMORY) {
   var success = enlargeMemory();
   if (!success) {
    DYNAMICTOP = ret;
    return 0;
   }
  }
  return ret;
 }),
 alignMemory: (function(size, quantum) {
  var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
  return ret;
 }),
 makeBigInt: (function(low, high, unsigned) {
  var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
  return ret;
 }),
 GLOBAL_BASE: 8,
 QUANTUM_SIZE: 4,
 __dummy__: 0
};
Module["Runtime"] = Runtime;
var __THREW__ = 0;
var ABORT = false;
var EXITSTATUS = 0;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
var globalScope = this;
function getCFunc(ident) {
 var func = Module["_" + ident];
 if (!func) {
  try {
   func = eval("_" + ident);
  } catch (e) {}
 }
 assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
 return func;
}
var cwrap, ccall;
((function() {
 var JSfuncs = {
  "stackSave": (function() {
   Runtime.stackSave();
  }),
  "stackRestore": (function() {
   Runtime.stackRestore();
  }),
  "arrayToC": (function(arr) {
   var ret = Runtime.stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }),
  "stringToC": (function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    ret = Runtime.stackAlloc((str.length << 2) + 1);
    writeStringToMemory(str, ret);
   }
   return ret;
  })
 };
 var toC = {
  "string": JSfuncs["stringToC"],
  "array": JSfuncs["arrayToC"]
 };
 ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
   for (var i = 0; i < args.length; i++) {
    var converter = toC[argTypes[i]];
    if (converter) {
     if (stack === 0) stack = Runtime.stackSave();
     cArgs[i] = converter(args[i]);
    } else {
     cArgs[i] = args[i];
    }
   }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === "string") ret = Pointer_stringify(ret);
  if (stack !== 0) {
   if (opts && opts.async) {
    EmterpreterAsync.asyncFinalizers.push((function() {
     Runtime.stackRestore(stack);
    }));
    return;
   }
   Runtime.stackRestore(stack);
  }
  return ret;
 };
 var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
 function parseJSFunc(jsfunc) {
  var parsed = jsfunc.toString().match(sourceRegex).slice(1);
  return {
   arguments: parsed[0],
   body: parsed[1],
   returnValue: parsed[2]
  };
 }
 var JSsource = {};
 for (var fun in JSfuncs) {
  if (JSfuncs.hasOwnProperty(fun)) {
   JSsource[fun] = parseJSFunc(JSfuncs[fun]);
  }
 }
 cwrap = function cwrap(ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  var numericArgs = argTypes.every((function(type) {
   return type === "number";
  }));
  var numericRet = returnType !== "string";
  if (numericRet && numericArgs) {
   return cfunc;
  }
  var argNames = argTypes.map((function(x, i) {
   return "$" + i;
  }));
  var funcstr = "(function(" + argNames.join(",") + ") {";
  var nargs = argTypes.length;
  if (!numericArgs) {
   funcstr += "var stack = " + JSsource["stackSave"].body + ";";
   for (var i = 0; i < nargs; i++) {
    var arg = argNames[i], type = argTypes[i];
    if (type === "number") continue;
    var convertCode = JSsource[type + "ToC"];
    funcstr += "var " + convertCode.arguments + " = " + arg + ";";
    funcstr += convertCode.body + ";";
    funcstr += arg + "=" + convertCode.returnValue + ";";
   }
  }
  var cfuncname = parseJSFunc((function() {
   return cfunc;
  })).returnValue;
  funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
  if (!numericRet) {
   var strgfy = parseJSFunc((function() {
    return Pointer_stringify;
   })).returnValue;
   funcstr += "ret = " + strgfy + "(ret);";
  }
  if (!numericArgs) {
   funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
  }
  funcstr += "return ret})";
  return eval(funcstr);
 };
}))();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];
 case "i8":
  return HEAP8[ptr >> 0];
 case "i16":
  return HEAP16[ptr >> 1];
 case "i32":
  return HEAP32[ptr >> 2];
 case "i64":
  return HEAP32[ptr >> 2];
 case "float":
  return HEAPF32[ptr >> 2];
 case "double":
  return HEAPF64[ptr >> 3];
 default:
  abort("invalid type for setValue: " + type);
 }
 return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;
function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var ptr = ret, stop;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (; ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  if (typeof curr === "function") {
   curr = Runtime.getFunctionIndex(curr);
  }
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = Runtime.getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}
Module["allocate"] = allocate;
function getMemory(size) {
 if (!staticSealed) return Runtime.staticAlloc(size);
 if (typeof _sbrk !== "undefined" && !_sbrk.called || !runtimeInitialized) return Runtime.dynamicAlloc(size);
 return _malloc(size);
}
Module["getMemory"] = getMemory;
function Pointer_stringify(ptr, length) {
 if (length === 0 || !ptr) return "";
 var hasUtf = 0;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  hasUtf |= t;
  if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (hasUtf < 128) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 return Module["UTF8ToString"](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;
function AsciiToString(ptr) {
 var str = "";
 while (1) {
  var ch = HEAP8[ptr++ >> 0];
  if (!ch) return str;
  str += String.fromCharCode(ch);
 }
}
Module["AsciiToString"] = AsciiToString;
function stringToAscii(str, outPtr) {
 return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;
function UTF8ArrayToString(u8Array, idx) {
 var u0, u1, u2, u3, u4, u5;
 var str = "";
 while (1) {
  u0 = u8Array[idx++];
  if (!u0) return str;
  if (!(u0 & 128)) {
   str += String.fromCharCode(u0);
   continue;
  }
  u1 = u8Array[idx++] & 63;
  if ((u0 & 224) == 192) {
   str += String.fromCharCode((u0 & 31) << 6 | u1);
   continue;
  }
  u2 = u8Array[idx++] & 63;
  if ((u0 & 240) == 224) {
   u0 = (u0 & 15) << 12 | u1 << 6 | u2;
  } else {
   u3 = u8Array[idx++] & 63;
   if ((u0 & 248) == 240) {
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
   } else {
    u4 = u8Array[idx++] & 63;
    if ((u0 & 252) == 248) {
     u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
    } else {
     u5 = u8Array[idx++] & 63;
     u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
    }
   }
  }
  if (u0 < 65536) {
   str += String.fromCharCode(u0);
  } else {
   var ch = u0 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  }
 }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;
function UTF8ToString(ptr) {
 return UTF8ArrayToString(HEAPU8, ptr);
}
Module["UTF8ToString"] = UTF8ToString;
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 2097151) {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 67108863) {
   if (outIdx + 4 >= endIdx) break;
   outU8Array[outIdx++] = 248 | u >> 24;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 5 >= endIdx) break;
   outU8Array[outIdx++] = 252 | u >> 30;
   outU8Array[outIdx++] = 128 | u >> 24 & 63;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;
function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;
function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   ++len;
  } else if (u <= 2047) {
   len += 2;
  } else if (u <= 65535) {
   len += 3;
  } else if (u <= 2097151) {
   len += 4;
  } else if (u <= 67108863) {
   len += 5;
  } else {
   len += 6;
  }
 }
 return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;
function UTF16ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var codeUnit = HEAP16[ptr + i * 2 >> 1];
  if (codeUnit == 0) return str;
  ++i;
  str += String.fromCharCode(codeUnit);
 }
}
Module["UTF16ToString"] = UTF16ToString;
function stringToUTF16(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 2) return 0;
 maxBytesToWrite -= 2;
 var startPtr = outPtr;
 var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
 for (var i = 0; i < numCharsToWrite; ++i) {
  var codeUnit = str.charCodeAt(i);
  HEAP16[outPtr >> 1] = codeUnit;
  outPtr += 2;
 }
 HEAP16[outPtr >> 1] = 0;
 return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;
function lengthBytesUTF16(str) {
 return str.length * 2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;
function UTF32ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var utf32 = HEAP32[ptr + i * 4 >> 2];
  if (utf32 == 0) return str;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
}
Module["UTF32ToString"] = UTF32ToString;
function stringToUTF32(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 4) return 0;
 var startPtr = outPtr;
 var endPtr = startPtr + maxBytesToWrite - 4;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++i);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  HEAP32[outPtr >> 2] = codeUnit;
  outPtr += 4;
  if (outPtr + 4 > endPtr) break;
 }
 HEAP32[outPtr >> 2] = 0;
 return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;
function lengthBytesUTF32(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
  len += 4;
 }
 return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;
function demangle(func) {
 var hasLibcxxabi = !!Module["___cxa_demangle"];
 if (hasLibcxxabi) {
  try {
   var buf = _malloc(func.length);
   writeStringToMemory(func.substr(1), buf);
   var status = _malloc(4);
   var ret = Module["___cxa_demangle"](buf, 0, 0, status);
   if (getValue(status, "i32") === 0 && ret) {
    return Pointer_stringify(ret);
   }
  } catch (e) {} finally {
   if (buf) _free(buf);
   if (status) _free(status);
   if (ret) _free(ret);
  }
 }
 var i = 3;
 var basicTypes = {
  "v": "void",
  "b": "bool",
  "c": "char",
  "s": "short",
  "i": "int",
  "l": "long",
  "f": "float",
  "d": "double",
  "w": "wchar_t",
  "a": "signed char",
  "h": "unsigned char",
  "t": "unsigned short",
  "j": "unsigned int",
  "m": "unsigned long",
  "x": "long long",
  "y": "unsigned long long",
  "z": "..."
 };
 var subs = [];
 var first = true;
 function dump(x) {
  if (x) Module.print(x);
  Module.print(func);
  var pre = "";
  for (var a = 0; a < i; a++) pre += " ";
  Module.print(pre + "^");
 }
 function parseNested() {
  i++;
  if (func[i] === "K") i++;
  var parts = [];
  while (func[i] !== "E") {
   if (func[i] === "S") {
    i++;
    var next = func.indexOf("_", i);
    var num = func.substring(i, next) || 0;
    parts.push(subs[num] || "?");
    i = next + 1;
    continue;
   }
   if (func[i] === "C") {
    parts.push(parts[parts.length - 1]);
    i += 2;
    continue;
   }
   var size = parseInt(func.substr(i));
   var pre = size.toString().length;
   if (!size || !pre) {
    i--;
    break;
   }
   var curr = func.substr(i + pre, size);
   parts.push(curr);
   subs.push(curr);
   i += pre + size;
  }
  i++;
  return parts;
 }
 function parse(rawList, limit, allowVoid) {
  limit = limit || Infinity;
  var ret = "", list = [];
  function flushList() {
   return "(" + list.join(", ") + ")";
  }
  var name;
  if (func[i] === "N") {
   name = parseNested().join("::");
   limit--;
   if (limit === 0) return rawList ? [ name ] : name;
  } else {
   if (func[i] === "K" || first && func[i] === "L") i++;
   var size = parseInt(func.substr(i));
   if (size) {
    var pre = size.toString().length;
    name = func.substr(i + pre, size);
    i += pre + size;
   }
  }
  first = false;
  if (func[i] === "I") {
   i++;
   var iList = parse(true);
   var iRet = parse(true, 1, true);
   ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">";
  } else {
   ret = name;
  }
  paramLoop : while (i < func.length && limit-- > 0) {
   var c = func[i++];
   if (c in basicTypes) {
    list.push(basicTypes[c]);
   } else {
    switch (c) {
    case "P":
     list.push(parse(true, 1, true)[0] + "*");
     break;
    case "R":
     list.push(parse(true, 1, true)[0] + "&");
     break;
    case "L":
     {
      i++;
      var end = func.indexOf("E", i);
      var size = end - i;
      list.push(func.substr(i, size));
      i += size + 2;
      break;
     }
    case "A":
     {
      var size = parseInt(func.substr(i));
      i += size.toString().length;
      if (func[i] !== "_") throw "?";
      i++;
      list.push(parse(true, 1, true)[0] + " [" + size + "]");
      break;
     }
    case "E":
     break paramLoop;
    default:
     ret += "?" + c;
     break paramLoop;
    }
   }
  }
  if (!allowVoid && list.length === 1 && list[0] === "void") list = [];
  if (rawList) {
   if (ret) {
    list.push(ret + "?");
   }
   return list;
  } else {
   return ret + flushList();
  }
 }
 var parsed = func;
 try {
  if (func == "Object._main" || func == "_main") {
   return "main()";
  }
  if (typeof func === "number") func = Pointer_stringify(func);
  if (func[0] !== "_") return func;
  if (func[1] !== "_") return func;
  if (func[2] !== "Z") return func;
  switch (func[3]) {
  case "n":
   return "operator new()";
  case "d":
   return "operator delete()";
  }
  parsed = parse();
 } catch (e) {
  parsed += "?";
 }
 if (parsed.indexOf("?") >= 0 && !hasLibcxxabi) {
  Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
 }
 return parsed;
}
function demangleAll(text) {
 return text.replace(/__Z[\w\d_]+/g, (function(x) {
  var y = demangle(x);
  return x === y ? x : x + " [" + y + "]";
 }));
}
function jsStackTrace() {
 var err = new Error;
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}
function stackTrace() {
 return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
 if (x % 4096 > 0) {
  x += 4096 - x % 4096;
 }
 return x;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function enlargeMemory() {
 abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.");
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 67108861;
var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
 if (totalMemory < 16 * 1024 * 1024) {
  totalMemory *= 2;
 } else {
  totalMemory += 16 * 1024 * 1024;
 }
}
if (totalMemory !== TOTAL_MEMORY) {
 Module.printErr("increasing TOTAL_MEMORY to " + totalMemory + " to be compliant with the asm.js spec (and given that TOTAL_STACK=" + TOTAL_STACK + ")");
 TOTAL_MEMORY = totalMemory;
}
assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
Module["HEAP"] = HEAP;
Module["buffer"] = buffer;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Runtime.dynCall("v", func);
   } else {
    Runtime.dynCall("vi", func, [ callback.arg ]);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;
function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;
function addOnPreMain(cb) {
 __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;
function addOnExit(cb) {
 __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;
function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function writeStringToMemory(string, buffer, dontAddNull) {
 var array = intArrayFromString(string, dontAddNull);
 var i = 0;
 while (i < array.length) {
  var chr = array[i];
  HEAP8[buffer + i >> 0] = chr;
  i = i + 1;
 }
}
Module["writeStringToMemory"] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
 for (var i = 0; i < array.length; i++) {
  HEAP8[buffer++ >> 0] = array[i];
 }
}
Module["writeArrayToMemory"] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;
function unSign(value, bits, ignore) {
 if (value >= 0) {
  return value;
 }
 return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
 if (value <= 0) {
  return value;
 }
 var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
 if (value >= half && (bits <= 32 || value > half)) {
  value = -2 * half + value;
 }
 return value;
}
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};
Math.imul = Math["imul"];
if (!Math["fround"]) Math["fround"] = (function(x) {
 return x;
});
Math.fround = Math["fround"];
if (!Math["clz32"]) Math["clz32"] = (function(x) {
 x = x >>> 0;
 for (var i = 0; i < 32; i++) {
  if (x & 1 << 31 - i) return i;
 }
 return 32;
});
Math.clz32 = Math["clz32"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
 return id;
}
function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}
Module["removeRunDependency"] = removeRunDependency;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
var ASM_CONSTS = [ (function($0, $1) {
 {
  postBenchmarkResults($0, $1);
 }
}) ];
function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1) | 0;
}
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 391696;
__ATINIT__.push({
 func: (function() {
  __GLOBAL__sub_I_File_cpp();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_MathFunc_cpp();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_Clock_cpp();
 })
});
memoryInitializer = "10kCubes.html.mem";
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}
function copyTempDouble(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
 HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
 HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
 HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
 HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}
var GL = {
 counter: 1,
 lastError: 0,
 buffers: [],
 mappedBuffers: {},
 programs: [],
 framebuffers: [],
 renderbuffers: [],
 textures: [],
 uniforms: [],
 shaders: [],
 vaos: [],
 contexts: [],
 currentContext: null,
 byteSizeByTypeRoot: 5120,
 byteSizeByType: [ 1, 1, 2, 2, 4, 4, 4, 2, 3, 4, 8 ],
 programInfos: {},
 stringCache: {},
 packAlignment: 4,
 unpackAlignment: 4,
 init: (function() {
  GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
  for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
   GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i + 1);
  }
 }),
 recordError: function recordError(errorCode) {
  if (!GL.lastError) {
   GL.lastError = errorCode;
  }
 },
 getNewId: (function(table) {
  var ret = GL.counter++;
  for (var i = table.length; i < ret; i++) {
   table[i] = null;
  }
  return ret;
 }),
 MINI_TEMP_BUFFER_SIZE: 16,
 miniTempBuffer: null,
 miniTempBufferViews: [ 0 ],
 getSource: (function(shader, count, string, length) {
  var source = "";
  for (var i = 0; i < count; ++i) {
   var frag;
   if (length) {
    var len = HEAP32[length + i * 4 >> 2];
    if (len < 0) {
     frag = Pointer_stringify(HEAP32[string + i * 4 >> 2]);
    } else {
     frag = Pointer_stringify(HEAP32[string + i * 4 >> 2], len);
    }
   } else {
    frag = Pointer_stringify(HEAP32[string + i * 4 >> 2]);
   }
   source += frag;
  }
  return source;
 }),
 computeImageSize: (function(width, height, sizePerPixel, alignment) {
  function roundedToNextMultipleOf(x, y) {
   return Math.floor((x + y - 1) / y) * y;
  }
  var plainRowSize = width * sizePerPixel;
  var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
  return height <= 0 ? 0 : (height - 1) * alignedRowSize + plainRowSize;
 }),
 get: (function(name_, p, type) {
  if (!p) {
   GL.recordError(1281);
   return;
  }
  var ret = undefined;
  switch (name_) {
  case 36346:
   ret = 1;
   break;
  case 36344:
   if (type !== "Integer") {
    GL.recordError(1280);
   }
   return;
  case 36345:
   ret = 0;
   break;
  case 34466:
   var formats = GLctx.getParameter(34467);
   ret = formats.length;
   break;
  case 35738:
   ret = 5121;
   break;
  case 35739:
   ret = 6408;
   break;
  }
  if (ret === undefined) {
   var result = GLctx.getParameter(name_);
   switch (typeof result) {
   case "number":
    ret = result;
    break;
   case "boolean":
    ret = result ? 1 : 0;
    break;
   case "string":
    GL.recordError(1280);
    return;
   case "object":
    if (result === null) {
     switch (name_) {
     case 34964:
     case 35725:
     case 34965:
     case 36006:
     case 36007:
     case 32873:
     case 34068:
      {
       ret = 0;
       break;
      }
     default:
      {
       GL.recordError(1280);
       return;
      }
     }
    } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
     for (var i = 0; i < result.length; ++i) {
      switch (type) {
      case "Integer":
       HEAP32[p + i * 4 >> 2] = result[i];
       break;
      case "Float":
       HEAPF32[p + i * 4 >> 2] = result[i];
       break;
      case "Boolean":
       HEAP8[p + i >> 0] = result[i] ? 1 : 0;
       break;
      default:
       throw "internal glGet error, bad type: " + type;
      }
     }
     return;
    } else if (result instanceof WebGLBuffer || result instanceof WebGLProgram || result instanceof WebGLFramebuffer || result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
     ret = result.name | 0;
    } else {
     GL.recordError(1280);
     return;
    }
    break;
   default:
    GL.recordError(1280);
    return;
   }
  }
  switch (type) {
  case "Integer":
   HEAP32[p >> 2] = ret;
   break;
  case "Float":
   HEAPF32[p >> 2] = ret;
   break;
  case "Boolean":
   HEAP8[p >> 0] = ret ? 1 : 0;
   break;
  default:
   throw "internal glGet error, bad type: " + type;
  }
 }),
 getTexPixelData: (function(type, format, width, height, pixels, internalFormat) {
  var sizePerPixel;
  var numChannels;
  switch (format) {
  case 6406:
  case 6409:
  case 6402:
  case 6403:
   numChannels = 1;
   break;
  case 6410:
  case 33319:
   numChannels = 2;
   break;
  case 6407:
   numChannels = 3;
   break;
  case 6408:
   numChannels = 4;
   break;
  default:
   GL.recordError(1280);
   return {
    pixels: null,
    internalFormat: 0
   };
  }
  switch (type) {
  case 5121:
   sizePerPixel = numChannels * 1;
   break;
  case 5123:
  case 36193:
   sizePerPixel = numChannels * 2;
   break;
  case 5125:
  case 5126:
   sizePerPixel = numChannels * 4;
   break;
  case 34042:
   sizePerPixel = 4;
   break;
  case 33635:
  case 32819:
  case 32820:
   sizePerPixel = 2;
   break;
  default:
   GL.recordError(1280);
   return {
    pixels: null,
    internalFormat: 0
   };
  }
  var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
  if (type == 5121) {
   pixels = HEAPU8.subarray(pixels, pixels + bytes);
  } else if (type == 5126) {
   pixels = HEAPF32.subarray(pixels >> 2, pixels + bytes >> 2);
  } else if (type == 5125 || type == 34042) {
   pixels = HEAPU32.subarray(pixels >> 2, pixels + bytes >> 2);
  } else {
   pixels = HEAPU16.subarray(pixels >> 1, pixels + bytes >> 1);
  }
  return {
   pixels: pixels,
   internalFormat: internalFormat
  };
 }),
 validateBufferTarget: (function(target) {
  switch (target) {
  case 34962:
  case 34963:
  case 36662:
  case 36663:
  case 35051:
  case 35052:
  case 35882:
  case 35982:
  case 35345:
   return true;
  default:
   return false;
  }
 }),
 createContext: (function(canvas, webGLContextAttributes) {
  if (typeof webGLContextAttributes.majorVersion === "undefined" && typeof webGLContextAttributes.minorVersion === "undefined") {
   webGLContextAttributes.majorVersion = 1;
   webGLContextAttributes.minorVersion = 0;
  }
  var ctx;
  var errorInfo = "?";
  function onContextCreationError(event) {
   errorInfo = event.statusMessage || errorInfo;
  }
  try {
   canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
   try {
    if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
     ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
    } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
     ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
    } else {
     throw "Unsupported WebGL context version " + majorVersion + "." + minorVersion + "!";
    }
   } finally {
    canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
   }
   if (!ctx) throw ":(";
  } catch (e) {
   Module.print("Could not create canvas: " + [ errorInfo, e, JSON.stringify(webGLContextAttributes) ]);
   return 0;
  }
  if (!ctx) return 0;
  return GL.registerContext(ctx, webGLContextAttributes);
 }),
 registerContext: (function(ctx, webGLContextAttributes) {
  var handle = GL.getNewId(GL.contexts);
  var context = {
   handle: handle,
   version: webGLContextAttributes.majorVersion,
   GLctx: ctx
  };
  if (ctx.canvas) ctx.canvas.GLctxObject = context;
  GL.contexts[handle] = context;
  if (typeof webGLContextAttributes["enableExtensionsByDefault"] === "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
   GL.initExtensions(context);
  }
  return handle;
 }),
 makeContextCurrent: (function(contextHandle) {
  var context = GL.contexts[contextHandle];
  if (!context) return false;
  GLctx = Module.ctx = context.GLctx;
  GL.currentContext = context;
  return true;
 }),
 getContext: (function(contextHandle) {
  return GL.contexts[contextHandle];
 }),
 deleteContext: (function(contextHandle) {
  if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
  if (typeof JSEvents === "object") JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
  if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
  GL.contexts[contextHandle] = null;
 }),
 initExtensions: (function(context) {
  if (!context) context = GL.currentContext;
  if (context.initExtensionsDone) return;
  context.initExtensionsDone = true;
  var GLctx = context.GLctx;
  context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  context.compressionExt = GLctx.getExtension("WEBGL_compressed_texture_s3tc");
  context.anisotropicExt = GLctx.getExtension("EXT_texture_filter_anisotropic");
  context.floatExt = GLctx.getExtension("OES_texture_float");
  context.instancedArraysExt = GLctx.getExtension("ANGLE_instanced_arrays");
  context.vaoExt = GLctx.getExtension("OES_vertex_array_object");
  if (context.version === 2) {
   context.drawBuffersExt = (function(n, bufs) {
    GLctx["drawBuffers"](n, bufs);
   });
  } else {
   var ext = GLctx.getExtension("WEBGL_draw_buffers");
   if (ext) {
    context.drawBuffersExt = (function(n, bufs) {
     ext.drawBuffersWEBGL(n, bufs);
    });
   }
  }
  var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays", "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources", "EXT_shader_texture_lod" ];
  function shouldEnableAutomatically(extension) {
   var ret = false;
   automaticallyEnabledExtensions.forEach((function(include) {
    if (ext.indexOf(include) != -1) {
     ret = true;
    }
   }));
   return ret;
  }
  var exts = GLctx.getSupportedExtensions();
  if (exts && exts.length > 0) {
   GLctx.getSupportedExtensions().forEach((function(ext) {
    if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
     GLctx.getExtension(ext);
    }
   }));
  }
 }),
 populateUniformTable: (function(program) {
  var p = GL.programs[program];
  GL.programInfos[program] = {
   uniforms: {},
   maxUniformLength: 0,
   maxAttributeLength: -1
  };
  var ptable = GL.programInfos[program];
  var utable = ptable.uniforms;
  var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
  for (var i = 0; i < numUniforms; ++i) {
   var u = GLctx.getActiveUniform(p, i);
   var name = u.name;
   ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);
   if (name.indexOf("]", name.length - 1) !== -1) {
    var ls = name.lastIndexOf("[");
    name = name.slice(0, ls);
   }
   var loc = GLctx.getUniformLocation(p, name);
   var id = GL.getNewId(GL.uniforms);
   utable[name] = [ u.size, id ];
   GL.uniforms[id] = loc;
   for (var j = 1; j < u.size; ++j) {
    var n = name + "[" + j + "]";
    loc = GLctx.getUniformLocation(p, n);
    id = GL.getNewId(GL.uniforms);
    GL.uniforms[id] = loc;
   }
  }
 })
};
function _glClearColor(x0, x1, x2, x3) {
 GLctx.clearColor(x0, x1, x2, x3);
}
var _UItoD = true;
function _eglWaitClient() {
 EGL.setErrorCode(12288);
 return 1;
}
var EGL = {
 errorCode: 12288,
 defaultDisplayInitialized: false,
 currentContext: 0,
 currentReadSurface: 0,
 currentDrawSurface: 0,
 stringCache: {},
 setErrorCode: (function(code) {
  EGL.errorCode = code;
 }),
 chooseConfig: (function(display, attribList, config, config_size, numConfigs) {
  if (display != 62e3) {
   EGL.setErrorCode(12296);
   return 0;
  }
  if ((!config || !config_size) && !numConfigs) {
   EGL.setErrorCode(12300);
   return 0;
  }
  if (numConfigs) {
   HEAP32[numConfigs >> 2] = 1;
  }
  if (config && config_size > 0) {
   HEAP32[config >> 2] = 62002;
  }
  EGL.setErrorCode(12288);
  return 1;
 })
};
function _eglTerminate(display) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 EGL.currentContext = 0;
 EGL.currentReadSurface = 0;
 EGL.currentDrawSurface = 0;
 EGL.defaultDisplayInitialized = false;
 EGL.setErrorCode(12288);
 return 1;
}
function _emscripten_run_script_string(ptr) {
 var s = eval(Pointer_stringify(ptr)) + "";
 var me = _emscripten_run_script_string;
 if (!me.bufferSize || me.bufferSize < s.length + 1) {
  if (me.bufferSize) _free(me.buffer);
  me.bufferSize = s.length + 1;
  me.buffer = _malloc(me.bufferSize);
 }
 writeStringToMemory(s, me.buffer);
 return me.buffer;
}
function _glLinkProgram(program) {
 GLctx.linkProgram(GL.programs[program]);
 GL.programInfos[program] = null;
 GL.populateUniformTable(program);
}
function _glBindTexture(target, texture) {
 GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
}
var _emscripten_check_longjmp = true;
var _DtoILow = true;
function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
 GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer]);
}
function _glGetString(name_) {
 if (GL.stringCache[name_]) return GL.stringCache[name_];
 var ret;
 switch (name_) {
 case 7936:
 case 7937:
 case 7938:
  ret = allocate(intArrayFromString(GLctx.getParameter(name_)), "i8", ALLOC_NORMAL);
  break;
 case 7939:
  var exts = GLctx.getSupportedExtensions();
  var gl_exts = [];
  for (var i in exts) {
   gl_exts.push(exts[i]);
   gl_exts.push("GL_" + exts[i]);
  }
  ret = allocate(intArrayFromString(gl_exts.join(" ")), "i8", ALLOC_NORMAL);
  break;
 case 35724:
  ret = allocate(intArrayFromString("OpenGL ES GLSL 1.00 (WebGL)"), "i8", ALLOC_NORMAL);
  break;
 default:
  GL.recordError(1280);
  return 0;
 }
 GL.stringCache[name_] = ret;
 return ret;
}
var _floorf = Math_floor;
function _realloc() {
 throw "bad";
}
Module["_realloc"] = _realloc;
Module["_saveSetjmp"] = _saveSetjmp;
function _emscripten_get_now() {
 if (!_emscripten_get_now.actual) {
  if (ENVIRONMENT_IS_NODE) {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    var t = process["hrtime"]();
    return t[0] * 1e3 + t[1] / 1e6;
   };
  } else if (typeof dateNow !== "undefined") {
   _emscripten_get_now.actual = dateNow;
  } else if (typeof self === "object" && self["performance"] && typeof self["performance"]["now"] === "function") {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    return self["performance"]["now"]();
   };
  } else if (typeof performance === "object" && typeof performance["now"] === "function") {
   _emscripten_get_now.actual = function _emscripten_get_now_actual() {
    return performance["now"]();
   };
  } else {
   _emscripten_get_now.actual = Date.now;
  }
 }
 return _emscripten_get_now.actual();
}
var JSEvents = {
 keyEvent: 0,
 mouseEvent: 0,
 wheelEvent: 0,
 uiEvent: 0,
 focusEvent: 0,
 deviceOrientationEvent: 0,
 deviceMotionEvent: 0,
 fullscreenChangeEvent: 0,
 pointerlockChangeEvent: 0,
 visibilityChangeEvent: 0,
 touchEvent: 0,
 previousFullscreenElement: null,
 previousScreenX: null,
 previousScreenY: null,
 removeEventListenersRegistered: false,
 registerRemoveEventListeners: (function() {
  if (!JSEvents.removeEventListenersRegistered) {
   __ATEXIT__.push((function() {
    for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
     JSEvents._removeHandler(i);
    }
   }));
   JSEvents.removeEventListenersRegistered = true;
  }
 }),
 findEventTarget: (function(target) {
  if (target) {
   if (typeof target == "number") {
    target = Pointer_stringify(target);
   }
   if (target == "#window") return window; else if (target == "#document") return document; else if (target == "#screen") return window.screen; else if (target == "#canvas") return Module["canvas"];
   if (typeof target == "string") return document.getElementById(target); else return target;
  } else {
   return window;
  }
 }),
 deferredCalls: [],
 deferCall: (function(targetFunction, precedence, argsList) {
  function arraysHaveEqualContent(arrA, arrB) {
   if (arrA.length != arrB.length) return false;
   for (var i in arrA) {
    if (arrA[i] != arrB[i]) return false;
   }
   return true;
  }
  for (var i in JSEvents.deferredCalls) {
   var call = JSEvents.deferredCalls[i];
   if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
    return;
   }
  }
  JSEvents.deferredCalls.push({
   targetFunction: targetFunction,
   precedence: precedence,
   argsList: argsList
  });
  JSEvents.deferredCalls.sort((function(x, y) {
   return x.precedence < y.precedence;
  }));
 }),
 removeDeferredCalls: (function(targetFunction) {
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
    JSEvents.deferredCalls.splice(i, 1);
    --i;
   }
  }
 }),
 canPerformEventHandlerRequests: (function() {
  return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
 }),
 runDeferredCalls: (function() {
  if (!JSEvents.canPerformEventHandlerRequests()) {
   return;
  }
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   var call = JSEvents.deferredCalls[i];
   JSEvents.deferredCalls.splice(i, 1);
   --i;
   call.targetFunction.apply(this, call.argsList);
  }
 }),
 inEventHandler: 0,
 currentEventHandler: null,
 eventHandlers: [],
 isInternetExplorer: (function() {
  return navigator.userAgent.indexOf("MSIE") !== -1 || navigator.appVersion.indexOf("Trident/") > 0;
 }),
 removeAllHandlersOnTarget: (function(target, eventTypeString) {
  for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
   if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
    JSEvents._removeHandler(i--);
   }
  }
 }),
 _removeHandler: (function(i) {
  var h = JSEvents.eventHandlers[i];
  h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
  JSEvents.eventHandlers.splice(i, 1);
 }),
 registerOrRemoveHandler: (function(eventHandler) {
  var jsEventHandler = function jsEventHandler(event) {
   ++JSEvents.inEventHandler;
   JSEvents.currentEventHandler = eventHandler;
   JSEvents.runDeferredCalls();
   eventHandler.handlerFunc(event);
   JSEvents.runDeferredCalls();
   --JSEvents.inEventHandler;
  };
  if (eventHandler.callbackfunc) {
   eventHandler.eventListenerFunc = jsEventHandler;
   var programmaticallyInjectingInputStream = location.search.indexOf("playback") != -1;
   if (!programmaticallyInjectingInputStream || eventHandler.eventTypeString.indexOf("mouse") == -1 && eventHandler.eventTypeString.indexOf("key") == -1 && eventHandler.eventTypeString.indexOf("blur") == -1 && eventHandler.eventTypeString.indexOf("focus") == -1) {
    eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
   }
   JSEvents.eventHandlers.push(eventHandler);
   JSEvents.registerRemoveEventListeners();
  } else {
   for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
    if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
     JSEvents._removeHandler(i--);
    }
   }
  }
 }),
 registerKeyEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.keyEvent) {
   JSEvents.keyEvent = _malloc(164);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0);
   writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32);
   HEAP32[JSEvents.keyEvent + 64 >> 2] = e.location;
   HEAP32[JSEvents.keyEvent + 68 >> 2] = e.ctrlKey;
   HEAP32[JSEvents.keyEvent + 72 >> 2] = e.shiftKey;
   HEAP32[JSEvents.keyEvent + 76 >> 2] = e.altKey;
   HEAP32[JSEvents.keyEvent + 80 >> 2] = e.metaKey;
   HEAP32[JSEvents.keyEvent + 84 >> 2] = e.repeat;
   writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88);
   writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120);
   HEAP32[JSEvents.keyEvent + 152 >> 2] = e.charCode;
   HEAP32[JSEvents.keyEvent + 156 >> 2] = e.keyCode;
   HEAP32[JSEvents.keyEvent + 160 >> 2] = e.which;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.keyEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 getBoundingClientRectOrZeros: (function(target) {
  return target.getBoundingClientRect ? target.getBoundingClientRect() : {
   left: 0,
   top: 0
  };
 }),
 fillMouseEventData: (function(eventStruct, e, target) {
  HEAPF64[eventStruct >> 3] = JSEvents.tick();
  HEAP32[eventStruct + 8 >> 2] = e.screenX;
  HEAP32[eventStruct + 12 >> 2] = e.screenY;
  HEAP32[eventStruct + 16 >> 2] = e.clientX;
  HEAP32[eventStruct + 20 >> 2] = e.clientY;
  HEAP32[eventStruct + 24 >> 2] = e.ctrlKey;
  HEAP32[eventStruct + 28 >> 2] = e.shiftKey;
  HEAP32[eventStruct + 32 >> 2] = e.altKey;
  HEAP32[eventStruct + 36 >> 2] = e.metaKey;
  HEAP16[eventStruct + 40 >> 1] = e.button;
  HEAP16[eventStruct + 42 >> 1] = e.buttons;
  HEAP32[eventStruct + 44 >> 2] = e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || e.screenX - JSEvents.previousScreenX;
  HEAP32[eventStruct + 48 >> 2] = e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || e.screenY - JSEvents.previousScreenY;
  if (Module["canvas"]) {
   var rect = Module["canvas"].getBoundingClientRect();
   HEAP32[eventStruct + 60 >> 2] = e.clientX - rect.left;
   HEAP32[eventStruct + 64 >> 2] = e.clientY - rect.top;
  } else {
   HEAP32[eventStruct + 60 >> 2] = 0;
   HEAP32[eventStruct + 64 >> 2] = 0;
  }
  if (target) {
   var rect = JSEvents.getBoundingClientRectOrZeros(target);
   HEAP32[eventStruct + 52 >> 2] = e.clientX - rect.left;
   HEAP32[eventStruct + 56 >> 2] = e.clientY - rect.top;
  } else {
   HEAP32[eventStruct + 52 >> 2] = 0;
   HEAP32[eventStruct + 56 >> 2] = 0;
  }
  JSEvents.previousScreenX = e.screenX;
  JSEvents.previousScreenY = e.screenY;
 }),
 registerMouseEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.mouseEvent) {
   JSEvents.mouseEvent = _malloc(72);
  }
  target = JSEvents.findEventTarget(target);
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.mouseEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  if (JSEvents.isInternetExplorer() && eventTypeString == "mousedown") eventHandler.allowsDeferredCalls = false;
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerWheelEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.wheelEvent) {
   JSEvents.wheelEvent = _malloc(104);
  }
  target = JSEvents.findEventTarget(target);
  var wheelHandlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
   HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["deltaX"];
   HEAPF64[JSEvents.wheelEvent + 80 >> 3] = e["deltaY"];
   HEAPF64[JSEvents.wheelEvent + 88 >> 3] = e["deltaZ"];
   HEAP32[JSEvents.wheelEvent + 96 >> 2] = e["deltaMode"];
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.wheelEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var mouseWheelHandlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
   HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["wheelDeltaX"];
   HEAPF64[JSEvents.wheelEvent + 80 >> 3] = -e["wheelDeltaY"];
   HEAPF64[JSEvents.wheelEvent + 88 >> 3] = 0;
   HEAP32[JSEvents.wheelEvent + 96 >> 2] = 0;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.wheelEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: eventTypeString == "wheel" ? wheelHandlerFunc : mouseWheelHandlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 pageScrollPos: (function() {
  if (window.pageXOffset > 0 || window.pageYOffset > 0) {
   return [ window.pageXOffset, window.pageYOffset ];
  }
  if (typeof document.documentElement.scrollLeft !== "undefined" || typeof document.documentElement.scrollTop !== "undefined") {
   return [ document.documentElement.scrollLeft, document.documentElement.scrollTop ];
  }
  return [ document.body.scrollLeft | 0, document.body.scrollTop | 0 ];
 }),
 registerUiEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.uiEvent) {
   JSEvents.uiEvent = _malloc(36);
  }
  if (eventTypeString == "scroll" && !target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   if (e.target != target) {
    return;
   }
   var scrollPos = JSEvents.pageScrollPos();
   HEAP32[JSEvents.uiEvent >> 2] = e.detail;
   HEAP32[JSEvents.uiEvent + 4 >> 2] = document.body.clientWidth;
   HEAP32[JSEvents.uiEvent + 8 >> 2] = document.body.clientHeight;
   HEAP32[JSEvents.uiEvent + 12 >> 2] = window.innerWidth;
   HEAP32[JSEvents.uiEvent + 16 >> 2] = window.innerHeight;
   HEAP32[JSEvents.uiEvent + 20 >> 2] = window.outerWidth;
   HEAP32[JSEvents.uiEvent + 24 >> 2] = window.outerHeight;
   HEAP32[JSEvents.uiEvent + 28 >> 2] = scrollPos[0];
   HEAP32[JSEvents.uiEvent + 32 >> 2] = scrollPos[1];
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.uiEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 getNodeNameForTarget: (function(target) {
  if (!target) return "";
  if (target == window) return "#window";
  if (target == window.screen) return "#screen";
  return target && target.nodeName ? target.nodeName : "";
 }),
 registerFocusEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.focusEvent) {
   JSEvents.focusEvent = _malloc(256);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var nodeName = JSEvents.getNodeNameForTarget(e.target);
   var id = e.target.id ? e.target.id : "";
   writeStringToMemory(nodeName, JSEvents.focusEvent + 0);
   writeStringToMemory(id, JSEvents.focusEvent + 128);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.focusEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 tick: (function() {
  if (window["performance"] && window["performance"]["now"]) return window["performance"]["now"](); else return Date.now();
 }),
 registerDeviceOrientationEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.deviceOrientationEvent) {
   JSEvents.deviceOrientationEvent = _malloc(40);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   HEAPF64[JSEvents.deviceOrientationEvent >> 3] = JSEvents.tick();
   HEAPF64[JSEvents.deviceOrientationEvent + 8 >> 3] = e.alpha;
   HEAPF64[JSEvents.deviceOrientationEvent + 16 >> 3] = e.beta;
   HEAPF64[JSEvents.deviceOrientationEvent + 24 >> 3] = e.gamma;
   HEAP32[JSEvents.deviceOrientationEvent + 32 >> 2] = e.absolute;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.deviceOrientationEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerDeviceMotionEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.deviceMotionEvent) {
   JSEvents.deviceMotionEvent = _malloc(80);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   HEAPF64[JSEvents.deviceOrientationEvent >> 3] = JSEvents.tick();
   HEAPF64[JSEvents.deviceMotionEvent + 8 >> 3] = e.acceleration.x;
   HEAPF64[JSEvents.deviceMotionEvent + 16 >> 3] = e.acceleration.y;
   HEAPF64[JSEvents.deviceMotionEvent + 24 >> 3] = e.acceleration.z;
   HEAPF64[JSEvents.deviceMotionEvent + 32 >> 3] = e.accelerationIncludingGravity.x;
   HEAPF64[JSEvents.deviceMotionEvent + 40 >> 3] = e.accelerationIncludingGravity.y;
   HEAPF64[JSEvents.deviceMotionEvent + 48 >> 3] = e.accelerationIncludingGravity.z;
   HEAPF64[JSEvents.deviceMotionEvent + 56 >> 3] = e.rotationRate.alpha;
   HEAPF64[JSEvents.deviceMotionEvent + 64 >> 3] = e.rotationRate.beta;
   HEAPF64[JSEvents.deviceMotionEvent + 72 >> 3] = e.rotationRate.gamma;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.deviceMotionEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 screenOrientation: (function() {
  if (!window.screen) return undefined;
  return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
 }),
 fillOrientationChangeEventData: (function(eventStruct, e) {
  var orientations = [ "portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary" ];
  var orientations2 = [ "portrait", "portrait", "landscape", "landscape" ];
  var orientationString = JSEvents.screenOrientation();
  var orientation = orientations.indexOf(orientationString);
  if (orientation == -1) {
   orientation = orientations2.indexOf(orientationString);
  }
  HEAP32[eventStruct >> 2] = 1 << orientation;
  HEAP32[eventStruct + 4 >> 2] = window.orientation;
 }),
 registerOrientationChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.orientationChangeEvent) {
   JSEvents.orientationChangeEvent = _malloc(8);
  }
  if (!target) {
   target = window.screen;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.orientationChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
   eventTypeString = "mozorientationchange";
  }
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 fullscreenEnabled: (function() {
  return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
 }),
 fillFullscreenChangeEventData: (function(eventStruct, e) {
  var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  var isFullscreen = !!fullscreenElement;
  HEAP32[eventStruct >> 2] = isFullscreen;
  HEAP32[eventStruct + 4 >> 2] = JSEvents.fullscreenEnabled();
  var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
  var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
  var id = reportedElement && reportedElement.id ? reportedElement.id : "";
  writeStringToMemory(nodeName, eventStruct + 8);
  writeStringToMemory(id, eventStruct + 136);
  HEAP32[eventStruct + 264 >> 2] = reportedElement ? reportedElement.clientWidth : 0;
  HEAP32[eventStruct + 268 >> 2] = reportedElement ? reportedElement.clientHeight : 0;
  HEAP32[eventStruct + 272 >> 2] = screen.width;
  HEAP32[eventStruct + 276 >> 2] = screen.height;
  if (isFullscreen) {
   JSEvents.previousFullscreenElement = fullscreenElement;
  }
 }),
 registerFullscreenChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.fullscreenChangeEvent) {
   JSEvents.fullscreenChangeEvent = _malloc(280);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.fullscreenChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 resizeCanvasForFullscreen: (function(target, strategy) {
  var restoreOldStyle = __registerRestoreOldStyle(target);
  var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
  var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
  var rect = target.getBoundingClientRect();
  var windowedCssWidth = rect.right - rect.left;
  var windowedCssHeight = rect.bottom - rect.top;
  var windowedRttWidth = target.width;
  var windowedRttHeight = target.height;
  if (strategy.scaleMode == 3) {
   __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
   cssWidth = windowedCssWidth;
   cssHeight = windowedCssHeight;
  } else if (strategy.scaleMode == 2) {
   if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
    var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
    __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
    cssHeight = desiredCssHeight;
   } else {
    var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
    __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
    cssWidth = desiredCssWidth;
   }
  }
  if (!target.style.backgroundColor) target.style.backgroundColor = "black";
  if (!document.body.style.backgroundColor) document.body.style.backgroundColor = "black";
  target.style.width = cssWidth + "px";
  target.style.height = cssHeight + "px";
  if (strategy.filteringMode == 1) {
   target.style.imageRendering = "optimizeSpeed";
   target.style.imageRendering = "-moz-crisp-edges";
   target.style.imageRendering = "-o-crisp-edges";
   target.style.imageRendering = "-webkit-optimize-contrast";
   target.style.imageRendering = "optimize-contrast";
   target.style.imageRendering = "crisp-edges";
   target.style.imageRendering = "pixelated";
  }
  var dpiScale = strategy.canvasResolutionScaleMode == 2 ? window.devicePixelRatio : 1;
  if (strategy.canvasResolutionScaleMode != 0) {
   target.width = cssWidth * dpiScale;
   target.height = cssHeight * dpiScale;
   if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
  }
  return restoreOldStyle;
 }),
 requestFullscreen: (function(target, strategy) {
  if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
   JSEvents.resizeCanvasForFullscreen(target, strategy);
  }
  if (target.requestFullscreen) {
   target.requestFullscreen();
  } else if (target.msRequestFullscreen) {
   target.msRequestFullscreen();
  } else if (target.mozRequestFullScreen) {
   target.mozRequestFullScreen();
  } else if (target.mozRequestFullscreen) {
   target.mozRequestFullscreen();
  } else if (target.webkitRequestFullscreen) {
   target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
  } else {
   if (typeof JSEvents.fullscreenEnabled() === "undefined") {
    return -1;
   } else {
    return -3;
   }
  }
  if (strategy.canvasResizedCallback) {
   Runtime.dynCall("iiii", strategy.canvasResizedCallback, [ 37, 0, strategy.canvasResizedCallbackUserData ]);
  }
  return 0;
 }),
 fillPointerlockChangeEventData: (function(eventStruct, e) {
  var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
  var isPointerlocked = !!pointerLockElement;
  HEAP32[eventStruct >> 2] = isPointerlocked;
  var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
  var id = pointerLockElement && pointerLockElement.id ? pointerLockElement.id : "";
  writeStringToMemory(nodeName, eventStruct + 4);
  writeStringToMemory(id, eventStruct + 132);
 }),
 registerPointerlockChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.pointerlockChangeEvent) {
   JSEvents.pointerlockChangeEvent = _malloc(260);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.pointerlockChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 requestPointerLock: (function(target) {
  if (target.requestPointerLock) {
   target.requestPointerLock();
  } else if (target.mozRequestPointerLock) {
   target.mozRequestPointerLock();
  } else if (target.webkitRequestPointerLock) {
   target.webkitRequestPointerLock();
  } else if (target.msRequestPointerLock) {
   target.msRequestPointerLock();
  } else {
   if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
    return -3;
   } else {
    return -1;
   }
  }
  return 0;
 }),
 fillVisibilityChangeEventData: (function(eventStruct, e) {
  var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
  var visibilityState = visibilityStates.indexOf(document.visibilityState);
  HEAP32[eventStruct >> 2] = document.hidden;
  HEAP32[eventStruct + 4 >> 2] = visibilityState;
 }),
 registerVisibilityChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.visibilityChangeEvent) {
   JSEvents.visibilityChangeEvent = _malloc(8);
  }
  if (!target) {
   target = document;
  } else {
   target = JSEvents.findEventTarget(target);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.visibilityChangeEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerTouchEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.touchEvent) {
   JSEvents.touchEvent = _malloc(1684);
  }
  target = JSEvents.findEventTarget(target);
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var touches = {};
   for (var i = 0; i < e.touches.length; ++i) {
    var touch = e.touches[i];
    touches[touch.identifier] = touch;
   }
   for (var i = 0; i < e.changedTouches.length; ++i) {
    var touch = e.changedTouches[i];
    touches[touch.identifier] = touch;
    touch.changed = true;
   }
   for (var i = 0; i < e.targetTouches.length; ++i) {
    var touch = e.targetTouches[i];
    touches[touch.identifier].onTarget = true;
   }
   var ptr = JSEvents.touchEvent;
   HEAP32[ptr + 4 >> 2] = e.ctrlKey;
   HEAP32[ptr + 8 >> 2] = e.shiftKey;
   HEAP32[ptr + 12 >> 2] = e.altKey;
   HEAP32[ptr + 16 >> 2] = e.metaKey;
   ptr += 20;
   var canvasRect = Module["canvas"] ? Module["canvas"].getBoundingClientRect() : undefined;
   var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
   var numTouches = 0;
   for (var i in touches) {
    var t = touches[i];
    HEAP32[ptr >> 2] = t.identifier;
    HEAP32[ptr + 4 >> 2] = t.screenX;
    HEAP32[ptr + 8 >> 2] = t.screenY;
    HEAP32[ptr + 12 >> 2] = t.clientX;
    HEAP32[ptr + 16 >> 2] = t.clientY;
    HEAP32[ptr + 20 >> 2] = t.pageX;
    HEAP32[ptr + 24 >> 2] = t.pageY;
    HEAP32[ptr + 28 >> 2] = t.changed;
    HEAP32[ptr + 32 >> 2] = t.onTarget;
    if (canvasRect) {
     HEAP32[ptr + 44 >> 2] = t.clientX - canvasRect.left;
     HEAP32[ptr + 48 >> 2] = t.clientY - canvasRect.top;
    } else {
     HEAP32[ptr + 44 >> 2] = 0;
     HEAP32[ptr + 48 >> 2] = 0;
    }
    HEAP32[ptr + 36 >> 2] = t.clientX - targetRect.left;
    HEAP32[ptr + 40 >> 2] = t.clientY - targetRect.top;
    ptr += 52;
    if (++numTouches >= 32) {
     break;
    }
   }
   HEAP32[JSEvents.touchEvent >> 2] = numTouches;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.touchEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: target,
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 fillGamepadEventData: (function(eventStruct, e) {
  HEAPF64[eventStruct >> 3] = e.timestamp;
  for (var i = 0; i < e.axes.length; ++i) {
   HEAPF64[eventStruct + i * 8 + 16 >> 3] = e.axes[i];
  }
  for (var i = 0; i < e.buttons.length; ++i) {
   if (typeof e.buttons[i] === "object") {
    HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i].value;
   } else {
    HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i];
   }
  }
  for (var i = 0; i < e.buttons.length; ++i) {
   if (typeof e.buttons[i] === "object") {
    HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i].pressed;
   } else {
    HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i] == 1;
   }
  }
  HEAP32[eventStruct + 1296 >> 2] = e.connected;
  HEAP32[eventStruct + 1300 >> 2] = e.index;
  HEAP32[eventStruct + 8 >> 2] = e.axes.length;
  HEAP32[eventStruct + 12 >> 2] = e.buttons.length;
  writeStringToMemory(e.id, eventStruct + 1304);
  writeStringToMemory(e.mapping, eventStruct + 1368);
 }),
 registerGamepadEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.gamepadEvent) {
   JSEvents.gamepadEvent = _malloc(1432);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.gamepadEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: true,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerBeforeUnloadEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var confirmationMessage = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, 0, userData ]);
   if (confirmationMessage) {
    confirmationMessage = Pointer_stringify(confirmationMessage);
   }
   if (confirmationMessage) {
    e.preventDefault();
    e.returnValue = confirmationMessage;
    return confirmationMessage;
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 battery: (function() {
  return navigator.battery || navigator.mozBattery || navigator.webkitBattery;
 }),
 fillBatteryEventData: (function(eventStruct, e) {
  HEAPF64[eventStruct >> 3] = e.chargingTime;
  HEAPF64[eventStruct + 8 >> 3] = e.dischargingTime;
  HEAPF64[eventStruct + 16 >> 3] = e.level;
  HEAP32[eventStruct + 24 >> 2] = e.charging;
 }),
 registerBatteryEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!JSEvents.batteryEvent) {
   JSEvents.batteryEvent = _malloc(32);
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, JSEvents.batteryEvent, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 }),
 registerWebGlEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
  if (!target) {
   target = Module["canvas"];
  }
  var handlerFunc = (function(event) {
   var e = event || window.event;
   var shouldCancel = Runtime.dynCall("iiii", callbackfunc, [ eventTypeId, 0, userData ]);
   if (shouldCancel) {
    e.preventDefault();
   }
  });
  var eventHandler = {
   target: JSEvents.findEventTarget(target),
   allowsDeferredCalls: false,
   eventTypeString: eventTypeString,
   callbackfunc: callbackfunc,
   handlerFunc: handlerFunc,
   useCapture: useCapture
  };
  JSEvents.registerOrRemoveHandler(eventHandler);
 })
};
function _emscripten_set_mouseup_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup");
 return 0;
}
var GLUT = {
 initTime: null,
 idleFunc: null,
 displayFunc: null,
 keyboardFunc: null,
 keyboardUpFunc: null,
 specialFunc: null,
 specialUpFunc: null,
 reshapeFunc: null,
 motionFunc: null,
 passiveMotionFunc: null,
 mouseFunc: null,
 buttons: 0,
 modifiers: 0,
 initWindowWidth: 256,
 initWindowHeight: 256,
 initDisplayMode: 18,
 windowX: 0,
 windowY: 0,
 windowWidth: 0,
 windowHeight: 0,
 requestedAnimationFrame: false,
 saveModifiers: (function(event) {
  GLUT.modifiers = 0;
  if (event["shiftKey"]) GLUT.modifiers += 1;
  if (event["ctrlKey"]) GLUT.modifiers += 2;
  if (event["altKey"]) GLUT.modifiers += 4;
 }),
 onMousemove: (function(event) {
  var lastX = Browser.mouseX;
  var lastY = Browser.mouseY;
  Browser.calculateMouseEvent(event);
  var newX = Browser.mouseX;
  var newY = Browser.mouseY;
  if (newX == lastX && newY == lastY) return;
  if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("vii", GLUT.passiveMotionFunc, [ lastX, lastY ]);
  } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("vii", GLUT.motionFunc, [ lastX, lastY ]);
  }
 }),
 getSpecialKey: (function(keycode) {
  var key = null;
  switch (keycode) {
  case 8:
   key = 120;
   break;
  case 46:
   key = 111;
   break;
  case 112:
   key = 1;
   break;
  case 113:
   key = 2;
   break;
  case 114:
   key = 3;
   break;
  case 115:
   key = 4;
   break;
  case 116:
   key = 5;
   break;
  case 117:
   key = 6;
   break;
  case 118:
   key = 7;
   break;
  case 119:
   key = 8;
   break;
  case 120:
   key = 9;
   break;
  case 121:
   key = 10;
   break;
  case 122:
   key = 11;
   break;
  case 123:
   key = 12;
   break;
  case 37:
   key = 100;
   break;
  case 38:
   key = 101;
   break;
  case 39:
   key = 102;
   break;
  case 40:
   key = 103;
   break;
  case 33:
   key = 104;
   break;
  case 34:
   key = 105;
   break;
  case 36:
   key = 106;
   break;
  case 35:
   key = 107;
   break;
  case 45:
   key = 108;
   break;
  case 16:
  case 5:
   key = 112;
   break;
  case 6:
   key = 113;
   break;
  case 17:
  case 3:
   key = 114;
   break;
  case 4:
   key = 115;
   break;
  case 18:
  case 2:
   key = 116;
   break;
  case 1:
   key = 117;
   break;
  }
  return key;
 }),
 getASCIIKey: (function(event) {
  if (event["ctrlKey"] || event["altKey"] || event["metaKey"]) return null;
  var keycode = event["keyCode"];
  if (48 <= keycode && keycode <= 57) return keycode;
  if (65 <= keycode && keycode <= 90) return event["shiftKey"] ? keycode : keycode + 32;
  if (96 <= keycode && keycode <= 105) return keycode - 48;
  if (106 <= keycode && keycode <= 111) return keycode - 106 + 42;
  switch (keycode) {
  case 9:
  case 13:
  case 27:
  case 32:
  case 61:
   return keycode;
  }
  var s = event["shiftKey"];
  switch (keycode) {
  case 186:
   return s ? 58 : 59;
  case 187:
   return s ? 43 : 61;
  case 188:
   return s ? 60 : 44;
  case 189:
   return s ? 95 : 45;
  case 190:
   return s ? 62 : 46;
  case 191:
   return s ? 63 : 47;
  case 219:
   return s ? 123 : 91;
  case 220:
   return s ? 124 : 47;
  case 221:
   return s ? 125 : 93;
  case 222:
   return s ? 34 : 39;
  }
  return null;
 }),
 onKeydown: (function(event) {
  if (GLUT.specialFunc || GLUT.keyboardFunc) {
   var key = GLUT.getSpecialKey(event["keyCode"]);
   if (key !== null) {
    if (GLUT.specialFunc) {
     event.preventDefault();
     GLUT.saveModifiers(event);
     Runtime.dynCall("viii", GLUT.specialFunc, [ key, Browser.mouseX, Browser.mouseY ]);
    }
   } else {
    key = GLUT.getASCIIKey(event);
    if (key !== null && GLUT.keyboardFunc) {
     event.preventDefault();
     GLUT.saveModifiers(event);
     Runtime.dynCall("viii", GLUT.keyboardFunc, [ key, Browser.mouseX, Browser.mouseY ]);
    }
   }
  }
 }),
 onKeyup: (function(event) {
  if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
   var key = GLUT.getSpecialKey(event["keyCode"]);
   if (key !== null) {
    if (GLUT.specialUpFunc) {
     event.preventDefault();
     GLUT.saveModifiers(event);
     Runtime.dynCall("viii", GLUT.specialUpFunc, [ key, Browser.mouseX, Browser.mouseY ]);
    }
   } else {
    key = GLUT.getASCIIKey(event);
    if (key !== null && GLUT.keyboardUpFunc) {
     event.preventDefault();
     GLUT.saveModifiers(event);
     Runtime.dynCall("viii", GLUT.keyboardUpFunc, [ key, Browser.mouseX, Browser.mouseY ]);
    }
   }
  }
 }),
 onMouseButtonDown: (function(event) {
  Browser.calculateMouseEvent(event);
  GLUT.buttons |= 1 << event["button"];
  if (event.target == Module["canvas"] && GLUT.mouseFunc) {
   try {
    event.target.setCapture();
   } catch (e) {}
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("viiii", GLUT.mouseFunc, [ event["button"], 0, Browser.mouseX, Browser.mouseY ]);
  }
 }),
 onMouseButtonUp: (function(event) {
  Browser.calculateMouseEvent(event);
  GLUT.buttons &= ~(1 << event["button"]);
  if (GLUT.mouseFunc) {
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("viiii", GLUT.mouseFunc, [ event["button"], 1, Browser.mouseX, Browser.mouseY ]);
  }
 }),
 onMouseWheel: (function(event) {
  Browser.calculateMouseEvent(event);
  var e = window.event || event;
  var delta = -Browser.getMouseWheelDelta(event);
  delta = delta == 0 ? 0 : delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1);
  var button = 3;
  if (delta < 0) {
   button = 4;
  }
  if (GLUT.mouseFunc) {
   event.preventDefault();
   GLUT.saveModifiers(event);
   Runtime.dynCall("viiii", GLUT.mouseFunc, [ button, 0, Browser.mouseX, Browser.mouseY ]);
  }
 }),
 onFullScreenEventChange: (function(event) {
  var width;
  var height;
  if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
   width = screen["width"];
   height = screen["height"];
  } else {
   width = GLUT.windowWidth;
   height = GLUT.windowHeight;
   document.removeEventListener("fullscreenchange", GLUT.onFullScreenEventChange, true);
   document.removeEventListener("mozfullscreenchange", GLUT.onFullScreenEventChange, true);
   document.removeEventListener("webkitfullscreenchange", GLUT.onFullScreenEventChange, true);
  }
  Browser.setCanvasSize(width, height);
  if (GLUT.reshapeFunc) {
   Runtime.dynCall("vii", GLUT.reshapeFunc, [ width, height ]);
  }
  _glutPostRedisplay();
 }),
 requestFullScreen: (function() {
  var RFS = Module["canvas"]["requestFullscreen"] || Module["canvas"]["requestFullScreen"] || Module["canvas"]["mozRequestFullScreen"] || Module["canvas"]["webkitRequestFullScreen"] || (function() {});
  RFS.apply(Module["canvas"], []);
 }),
 cancelFullScreen: (function() {
  var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || (function() {});
  CFS.apply(document, []);
 })
};
function _glutInitDisplayMode(mode) {
 GLUT.initDisplayMode = mode;
}
var ERRNO_CODES = {
 EPERM: 1,
 ENOENT: 2,
 ESRCH: 3,
 EINTR: 4,
 EIO: 5,
 ENXIO: 6,
 E2BIG: 7,
 ENOEXEC: 8,
 EBADF: 9,
 ECHILD: 10,
 EAGAIN: 11,
 EWOULDBLOCK: 11,
 ENOMEM: 12,
 EACCES: 13,
 EFAULT: 14,
 ENOTBLK: 15,
 EBUSY: 16,
 EEXIST: 17,
 EXDEV: 18,
 ENODEV: 19,
 ENOTDIR: 20,
 EISDIR: 21,
 EINVAL: 22,
 ENFILE: 23,
 EMFILE: 24,
 ENOTTY: 25,
 ETXTBSY: 26,
 EFBIG: 27,
 ENOSPC: 28,
 ESPIPE: 29,
 EROFS: 30,
 EMLINK: 31,
 EPIPE: 32,
 EDOM: 33,
 ERANGE: 34,
 ENOMSG: 42,
 EIDRM: 43,
 ECHRNG: 44,
 EL2NSYNC: 45,
 EL3HLT: 46,
 EL3RST: 47,
 ELNRNG: 48,
 EUNATCH: 49,
 ENOCSI: 50,
 EL2HLT: 51,
 EDEADLK: 35,
 ENOLCK: 37,
 EBADE: 52,
 EBADR: 53,
 EXFULL: 54,
 ENOANO: 55,
 EBADRQC: 56,
 EBADSLT: 57,
 EDEADLOCK: 35,
 EBFONT: 59,
 ENOSTR: 60,
 ENODATA: 61,
 ETIME: 62,
 ENOSR: 63,
 ENONET: 64,
 ENOPKG: 65,
 EREMOTE: 66,
 ENOLINK: 67,
 EADV: 68,
 ESRMNT: 69,
 ECOMM: 70,
 EPROTO: 71,
 EMULTIHOP: 72,
 EDOTDOT: 73,
 EBADMSG: 74,
 ENOTUNIQ: 76,
 EBADFD: 77,
 EREMCHG: 78,
 ELIBACC: 79,
 ELIBBAD: 80,
 ELIBSCN: 81,
 ELIBMAX: 82,
 ELIBEXEC: 83,
 ENOSYS: 38,
 ENOTEMPTY: 39,
 ENAMETOOLONG: 36,
 ELOOP: 40,
 EOPNOTSUPP: 95,
 EPFNOSUPPORT: 96,
 ECONNRESET: 104,
 ENOBUFS: 105,
 EAFNOSUPPORT: 97,
 EPROTOTYPE: 91,
 ENOTSOCK: 88,
 ENOPROTOOPT: 92,
 ESHUTDOWN: 108,
 ECONNREFUSED: 111,
 EADDRINUSE: 98,
 ECONNABORTED: 103,
 ENETUNREACH: 101,
 ENETDOWN: 100,
 ETIMEDOUT: 110,
 EHOSTDOWN: 112,
 EHOSTUNREACH: 113,
 EINPROGRESS: 115,
 EALREADY: 114,
 EDESTADDRREQ: 89,
 EMSGSIZE: 90,
 EPROTONOSUPPORT: 93,
 ESOCKTNOSUPPORT: 94,
 EADDRNOTAVAIL: 99,
 ENETRESET: 102,
 EISCONN: 106,
 ENOTCONN: 107,
 ETOOMANYREFS: 109,
 EUSERS: 87,
 EDQUOT: 122,
 ESTALE: 116,
 ENOTSUP: 95,
 ENOMEDIUM: 123,
 EILSEQ: 84,
 EOVERFLOW: 75,
 ECANCELED: 125,
 ENOTRECOVERABLE: 131,
 EOWNERDEAD: 130,
 ESTRPIPE: 86
};
var ERRNO_MESSAGES = {
 0: "Success",
 1: "Not super-user",
 2: "No such file or directory",
 3: "No such process",
 4: "Interrupted system call",
 5: "I/O error",
 6: "No such device or address",
 7: "Arg list too long",
 8: "Exec format error",
 9: "Bad file number",
 10: "No children",
 11: "No more processes",
 12: "Not enough core",
 13: "Permission denied",
 14: "Bad address",
 15: "Block device required",
 16: "Mount device busy",
 17: "File exists",
 18: "Cross-device link",
 19: "No such device",
 20: "Not a directory",
 21: "Is a directory",
 22: "Invalid argument",
 23: "Too many open files in system",
 24: "Too many open files",
 25: "Not a typewriter",
 26: "Text file busy",
 27: "File too large",
 28: "No space left on device",
 29: "Illegal seek",
 30: "Read only file system",
 31: "Too many links",
 32: "Broken pipe",
 33: "Math arg out of domain of func",
 34: "Math result not representable",
 35: "File locking deadlock error",
 36: "File or path name too long",
 37: "No record locks available",
 38: "Function not implemented",
 39: "Directory not empty",
 40: "Too many symbolic links",
 42: "No message of desired type",
 43: "Identifier removed",
 44: "Channel number out of range",
 45: "Level 2 not synchronized",
 46: "Level 3 halted",
 47: "Level 3 reset",
 48: "Link number out of range",
 49: "Protocol driver not attached",
 50: "No CSI structure available",
 51: "Level 2 halted",
 52: "Invalid exchange",
 53: "Invalid request descriptor",
 54: "Exchange full",
 55: "No anode",
 56: "Invalid request code",
 57: "Invalid slot",
 59: "Bad font file fmt",
 60: "Device not a stream",
 61: "No data (for no delay io)",
 62: "Timer expired",
 63: "Out of streams resources",
 64: "Machine is not on the network",
 65: "Package not installed",
 66: "The object is remote",
 67: "The link has been severed",
 68: "Advertise error",
 69: "Srmount error",
 70: "Communication error on send",
 71: "Protocol error",
 72: "Multihop attempted",
 73: "Cross mount point (not really error)",
 74: "Trying to read unreadable message",
 75: "Value too large for defined data type",
 76: "Given log. name not unique",
 77: "f.d. invalid for this operation",
 78: "Remote address changed",
 79: "Can   access a needed shared lib",
 80: "Accessing a corrupted shared lib",
 81: ".lib section in a.out corrupted",
 82: "Attempting to link in too many libs",
 83: "Attempting to exec a shared library",
 84: "Illegal byte sequence",
 86: "Streams pipe error",
 87: "Too many users",
 88: "Socket operation on non-socket",
 89: "Destination address required",
 90: "Message too long",
 91: "Protocol wrong type for socket",
 92: "Protocol not available",
 93: "Unknown protocol",
 94: "Socket type not supported",
 95: "Not supported",
 96: "Protocol family not supported",
 97: "Address family not supported by protocol family",
 98: "Address already in use",
 99: "Address not available",
 100: "Network interface is not configured",
 101: "Network is unreachable",
 102: "Connection reset by network",
 103: "Connection aborted",
 104: "Connection reset by peer",
 105: "No buffer space available",
 106: "Socket is already connected",
 107: "Socket is not connected",
 108: "Can't send after socket shutdown",
 109: "Too many references",
 110: "Connection timed out",
 111: "Connection refused",
 112: "Host is down",
 113: "Host is unreachable",
 114: "Socket already connected",
 115: "Connection already in progress",
 116: "Stale file handle",
 122: "Quota exceeded",
 123: "No medium (in tape drive)",
 125: "Operation canceled",
 130: "Previous owner died",
 131: "State not recoverable"
};
function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}
var TTY = {
 ttys: [],
 init: (function() {}),
 shutdown: (function() {}),
 register: (function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 }),
 stream_ops: {
  open: (function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   stream.tty = tty;
   stream.seekable = false;
  }),
  close: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  flush: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  read: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  }),
  write: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   for (var i = 0; i < length; i++) {
    try {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  })
 },
 default_tty_ops: {
  get_char: (function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     var BUFSIZE = 256;
     var buf = new Buffer(BUFSIZE);
     var bytesRead = 0;
     var fd = process.stdin.fd;
     var usingDevice = false;
     try {
      fd = fs.openSync("/dev/stdin", "r");
      usingDevice = true;
     } catch (e) {}
     bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
     if (usingDevice) {
      fs.closeSync(fd);
     }
     if (bytesRead > 0) {
      result = buf.slice(0, bytesRead).toString("utf-8");
     } else {
      result = null;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  }),
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["print"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    Module["print"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 },
 default_tty1_ops: {
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["printErr"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    Module["printErr"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 }
};
var MEMFS = {
 ops_table: null,
 mount: (function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap,
      msync: MEMFS.stream_ops.msync
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 getFileDataAsRegularArray: (function(node) {
  if (node.contents && node.contents.subarray) {
   var arr = [];
   for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
   return arr;
  }
  return node.contents;
 }),
 getFileDataAsTypedArray: (function(node) {
  if (!node.contents) return new Uint8Array;
  if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 }),
 expandFileStorage: (function(node, newCapacity) {
  if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
   node.contents = MEMFS.getFileDataAsRegularArray(node);
   node.usedBytes = node.contents.length;
  }
  if (!node.contents || node.contents.subarray) {
   var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
   if (prevCapacity >= newCapacity) return;
   var CAPACITY_DOUBLING_MAX = 1024 * 1024;
   newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
   if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
   var oldContents = node.contents;
   node.contents = new Uint8Array(newCapacity);
   if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
   return;
  }
  if (!node.contents && newCapacity > 0) node.contents = [];
  while (node.contents.length < newCapacity) node.contents.push(0);
 }),
 resizeFileStorage: (function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
   return;
  }
  if (!node.contents || node.contents.subarray) {
   var oldContents = node.contents;
   node.contents = new Uint8Array(new ArrayBuffer(newSize));
   if (oldContents) {
    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   }
   node.usedBytes = newSize;
   return;
  }
  if (!node.contents) node.contents = [];
  if (node.contents.length > newSize) node.contents.length = newSize; else while (node.contents.length < newSize) node.contents.push(0);
  node.usedBytes = newSize;
 }),
 node_ops: {
  getattr: (function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  }),
  lookup: (function(parent, name) {
   throw FS.genericErrors[ERRNO_CODES.ENOENT];
  }),
  mknod: (function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  }),
  rename: (function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   old_node.parent = new_dir;
  }),
  unlink: (function(parent, name) {
   delete parent.contents[name];
  }),
  rmdir: (function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
   }
   delete parent.contents[name];
  }),
  readdir: (function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  }),
  symlink: (function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  }),
  readlink: (function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return node.link;
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  }),
  write: (function(stream, buffer, offset, length, position, canOwn) {
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); else {
    for (var i = 0; i < length; i++) {
     node.contents[position + i] = buffer[offset + i];
    }
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  }),
  allocate: (function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  }),
  mmap: (function(stream, buffer, offset, length, position, prot, flags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < stream.node.usedBytes) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    ptr = _malloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
    }
    buffer.set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  }),
  msync: (function(stream, buffer, offset, length, mmapFlags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   if (mmapFlags & 2) {
    return 0;
   }
   var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
   return 0;
  })
 }
};
var IDBFS = {
 dbs: {},
 indexedDB: (function() {
  if (typeof indexedDB !== "undefined") return indexedDB;
  var ret = null;
  if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  assert(ret, "IDBFS used, but indexedDB not supported");
  return ret;
 }),
 DB_VERSION: 21,
 DB_STORE_NAME: "FILE_DATA",
 mount: (function(mount) {
  return MEMFS.mount.apply(null, arguments);
 }),
 syncfs: (function(mount, populate, callback) {
  IDBFS.getLocalSet(mount, (function(err, local) {
   if (err) return callback(err);
   IDBFS.getRemoteSet(mount, (function(err, remote) {
    if (err) return callback(err);
    var src = populate ? remote : local;
    var dst = populate ? local : remote;
    IDBFS.reconcile(src, dst, callback);
   }));
  }));
 }),
 getDB: (function(name, callback) {
  var db = IDBFS.dbs[name];
  if (db) {
   return callback(null, db);
  }
  var req;
  try {
   req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
  } catch (e) {
   return callback(e);
  }
  req.onupgradeneeded = (function(e) {
   var db = e.target.result;
   var transaction = e.target.transaction;
   var fileStore;
   if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
    fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
   } else {
    fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
   }
   if (!fileStore.indexNames.contains("timestamp")) {
    fileStore.createIndex("timestamp", "timestamp", {
     unique: false
    });
   }
  });
  req.onsuccess = (function() {
   db = req.result;
   IDBFS.dbs[name] = db;
   callback(null, db);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 getLocalSet: (function(mount, callback) {
  var entries = {};
  function isRealDir(p) {
   return p !== "." && p !== "..";
  }
  function toAbsolute(root) {
   return (function(p) {
    return PATH.join2(root, p);
   });
  }
  var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  while (check.length) {
   var path = check.pop();
   var stat;
   try {
    stat = FS.stat(path);
   } catch (e) {
    return callback(e);
   }
   if (FS.isDir(stat.mode)) {
    check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
   }
   entries[path] = {
    timestamp: stat.mtime
   };
  }
  return callback(null, {
   type: "local",
   entries: entries
  });
 }),
 getRemoteSet: (function(mount, callback) {
  var entries = {};
  IDBFS.getDB(mount.mountpoint, (function(err, db) {
   if (err) return callback(err);
   var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readonly");
   transaction.onerror = (function(e) {
    callback(this.error);
    e.preventDefault();
   });
   var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
   var index = store.index("timestamp");
   index.openKeyCursor().onsuccess = (function(event) {
    var cursor = event.target.result;
    if (!cursor) {
     return callback(null, {
      type: "remote",
      db: db,
      entries: entries
     });
    }
    entries[cursor.primaryKey] = {
     timestamp: cursor.key
    };
    cursor.continue();
   });
  }));
 }),
 loadLocalEntry: (function(path, callback) {
  var stat, node;
  try {
   var lookup = FS.lookupPath(path);
   node = lookup.node;
   stat = FS.stat(path);
  } catch (e) {
   return callback(e);
  }
  if (FS.isDir(stat.mode)) {
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode
   });
  } else if (FS.isFile(stat.mode)) {
   node.contents = MEMFS.getFileDataAsTypedArray(node);
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode,
    contents: node.contents
   });
  } else {
   return callback(new Error("node type not supported"));
  }
 }),
 storeLocalEntry: (function(path, entry, callback) {
  try {
   if (FS.isDir(entry.mode)) {
    FS.mkdir(path, entry.mode);
   } else if (FS.isFile(entry.mode)) {
    FS.writeFile(path, entry.contents, {
     encoding: "binary",
     canOwn: true
    });
   } else {
    return callback(new Error("node type not supported"));
   }
   FS.chmod(path, entry.mode);
   FS.utime(path, entry.timestamp, entry.timestamp);
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 removeLocalEntry: (function(path, callback) {
  try {
   var lookup = FS.lookupPath(path);
   var stat = FS.stat(path);
   if (FS.isDir(stat.mode)) {
    FS.rmdir(path);
   } else if (FS.isFile(stat.mode)) {
    FS.unlink(path);
   }
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 loadRemoteEntry: (function(store, path, callback) {
  var req = store.get(path);
  req.onsuccess = (function(event) {
   callback(null, event.target.result);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 storeRemoteEntry: (function(store, path, entry, callback) {
  var req = store.put(entry, path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 removeRemoteEntry: (function(store, path, callback) {
  var req = store.delete(path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 reconcile: (function(src, dst, callback) {
  var total = 0;
  var create = [];
  Object.keys(src.entries).forEach((function(key) {
   var e = src.entries[key];
   var e2 = dst.entries[key];
   if (!e2 || e.timestamp > e2.timestamp) {
    create.push(key);
    total++;
   }
  }));
  var remove = [];
  Object.keys(dst.entries).forEach((function(key) {
   var e = dst.entries[key];
   var e2 = src.entries[key];
   if (!e2) {
    remove.push(key);
    total++;
   }
  }));
  if (!total) {
   return callback(null);
  }
  var errored = false;
  var completed = 0;
  var db = src.type === "remote" ? src.db : dst.db;
  var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readwrite");
  var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= total) {
    return callback(null);
   }
  }
  transaction.onerror = (function(e) {
   done(this.error);
   e.preventDefault();
  });
  create.sort().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.loadRemoteEntry(store, path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeLocalEntry(path, entry, done);
    }));
   } else {
    IDBFS.loadLocalEntry(path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeRemoteEntry(store, path, entry, done);
    }));
   }
  }));
  remove.sort().reverse().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.removeLocalEntry(path, done);
   } else {
    IDBFS.removeRemoteEntry(store, path, done);
   }
  }));
 })
};
var NODEFS = {
 isWindows: false,
 staticInit: (function() {
  NODEFS.isWindows = !!process.platform.match(/^win/);
 }),
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_NODE);
  return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = FS.createNode(parent, name, mode);
  node.node_ops = NODEFS.node_ops;
  node.stream_ops = NODEFS.stream_ops;
  return node;
 }),
 getMode: (function(path) {
  var stat;
  try {
   stat = fs.lstatSync(path);
   if (NODEFS.isWindows) {
    stat.mode = stat.mode | (stat.mode & 146) >> 1;
   }
  } catch (e) {
   if (!e.code) throw e;
   throw new FS.ErrnoError(ERRNO_CODES[e.code]);
  }
  return stat.mode;
 }),
 realPath: (function(node) {
  var parts = [];
  while (node.parent !== node) {
   parts.push(node.name);
   node = node.parent;
  }
  parts.push(node.mount.opts.root);
  parts.reverse();
  return PATH.join.apply(null, parts);
 }),
 flagsToPermissionStringMap: {
  0: "r",
  1: "r+",
  2: "r+",
  64: "r",
  65: "r+",
  66: "r+",
  129: "rx+",
  193: "rx+",
  514: "w+",
  577: "w",
  578: "w+",
  705: "wx",
  706: "wx+",
  1024: "a",
  1025: "a",
  1026: "a+",
  1089: "a",
  1090: "a+",
  1153: "ax",
  1154: "ax+",
  1217: "ax",
  1218: "ax+",
  4096: "rs",
  4098: "rs+"
 },
 flagsToPermissionString: (function(flags) {
  if (flags in NODEFS.flagsToPermissionStringMap) {
   return NODEFS.flagsToPermissionStringMap[flags];
  } else {
   return flags;
  }
 }),
 node_ops: {
  getattr: (function(node) {
   var path = NODEFS.realPath(node);
   var stat;
   try {
    stat = fs.lstatSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (NODEFS.isWindows && !stat.blksize) {
    stat.blksize = 4096;
   }
   if (NODEFS.isWindows && !stat.blocks) {
    stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
   }
   return {
    dev: stat.dev,
    ino: stat.ino,
    mode: stat.mode,
    nlink: stat.nlink,
    uid: stat.uid,
    gid: stat.gid,
    rdev: stat.rdev,
    size: stat.size,
    atime: stat.atime,
    mtime: stat.mtime,
    ctime: stat.ctime,
    blksize: stat.blksize,
    blocks: stat.blocks
   };
  }),
  setattr: (function(node, attr) {
   var path = NODEFS.realPath(node);
   try {
    if (attr.mode !== undefined) {
     fs.chmodSync(path, attr.mode);
     node.mode = attr.mode;
    }
    if (attr.timestamp !== undefined) {
     var date = new Date(attr.timestamp);
     fs.utimesSync(path, date, date);
    }
    if (attr.size !== undefined) {
     fs.truncateSync(path, attr.size);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  lookup: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   var mode = NODEFS.getMode(path);
   return NODEFS.createNode(parent, name, mode);
  }),
  mknod: (function(parent, name, mode, dev) {
   var node = NODEFS.createNode(parent, name, mode, dev);
   var path = NODEFS.realPath(node);
   try {
    if (FS.isDir(node.mode)) {
     fs.mkdirSync(path, node.mode);
    } else {
     fs.writeFileSync(path, "", {
      mode: node.mode
     });
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return node;
  }),
  rename: (function(oldNode, newDir, newName) {
   var oldPath = NODEFS.realPath(oldNode);
   var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
   try {
    fs.renameSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  unlink: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.unlinkSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  rmdir: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.rmdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readdir: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    return fs.readdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  symlink: (function(parent, newName, oldPath) {
   var newPath = PATH.join2(NODEFS.realPath(parent), newName);
   try {
    fs.symlinkSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readlink: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    path = fs.readlinkSync(path);
    path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
    return path;
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  })
 },
 stream_ops: {
  open: (function(stream) {
   var path = NODEFS.realPath(stream.node);
   try {
    if (FS.isFile(stream.node.mode)) {
     stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  close: (function(stream) {
   try {
    if (FS.isFile(stream.node.mode) && stream.nfd) {
     fs.closeSync(stream.nfd);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  read: (function(stream, buffer, offset, length, position) {
   if (length === 0) return 0;
   var nbuffer = new Buffer(length);
   var res;
   try {
    res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (res > 0) {
    for (var i = 0; i < res; i++) {
     buffer[offset + i] = nbuffer[i];
    }
   }
   return res;
  }),
  write: (function(stream, buffer, offset, length, position) {
   var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
   var res;
   try {
    res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return res;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     try {
      var stat = fs.fstatSync(stream.nfd);
      position += stat.size;
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
     }
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var WORKERFS = {
 DIR_MODE: 16895,
 FILE_MODE: 33279,
 reader: null,
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_WORKER);
  if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync;
  var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
  var createdParents = {};
  function ensureParent(path) {
   var parts = path.split("/");
   var parent = root;
   for (var i = 0; i < parts.length - 1; i++) {
    var curr = parts.slice(0, i + 1).join("/");
    if (!createdParents[curr]) {
     createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
    }
    parent = createdParents[curr];
   }
   return parent;
  }
  function base(path) {
   var parts = path.split("/");
   return parts[parts.length - 1];
  }
  Array.prototype.forEach.call(mount.opts["files"] || [], (function(file) {
   WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
  }));
  (mount.opts["blobs"] || []).forEach((function(obj) {
   WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
  }));
  (mount.opts["packages"] || []).forEach((function(pack) {
   pack["metadata"].files.forEach((function(file) {
    var name = file.filename.substr(1);
    WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end));
   }));
  }));
  return root;
 }),
 createNode: (function(parent, name, mode, dev, contents, mtime) {
  var node = FS.createNode(parent, name, mode);
  node.mode = mode;
  node.node_ops = WORKERFS.node_ops;
  node.stream_ops = WORKERFS.stream_ops;
  node.timestamp = (mtime || new Date).getTime();
  assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
  if (mode === WORKERFS.FILE_MODE) {
   node.size = contents.size;
   node.contents = contents;
  } else {
   node.size = 4096;
   node.contents = {};
  }
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 node_ops: {
  getattr: (function(node) {
   return {
    dev: 1,
    ino: undefined,
    mode: node.mode,
    nlink: 1,
    uid: 0,
    gid: 0,
    rdev: undefined,
    size: node.size,
    atime: new Date(node.timestamp),
    mtime: new Date(node.timestamp),
    ctime: new Date(node.timestamp),
    blksize: 4096,
    blocks: Math.ceil(node.size / 4096)
   };
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
  }),
  lookup: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }),
  mknod: (function(parent, name, mode, dev) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rename: (function(oldNode, newDir, newName) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  unlink: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rmdir: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readdir: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  symlink: (function(parent, newName, oldPath) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readlink: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   if (position >= stream.node.size) return 0;
   var chunk = stream.node.contents.slice(position, position + length);
   var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
   buffer.set(new Uint8Array(ab), offset);
   return chunk.size;
  }),
  write: (function(stream, buffer, offset, length, position) {
   throw new FS.ErrnoError(ERRNO_CODES.EIO);
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.size;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var _stdin = allocate(1, "i32*", ALLOC_STATIC);
var _stdout = allocate(1, "i32*", ALLOC_STATIC);
var _stderr = allocate(1, "i32*", ALLOC_STATIC);
var FS = {
 root: null,
 mounts: [],
 devices: [ null ],
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 tracking: {
  openFlags: {
   READ: 1,
   WRITE: 2
  }
 },
 ErrnoError: null,
 genericErrors: {},
 filesystems: null,
 handleFSError: (function(e) {
  if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
  return ___setErrNo(e.errno);
 }),
 lookupPath: (function(path, opts) {
  path = PATH.resolve(FS.cwd(), path);
  opts = opts || {};
  if (!path) return {
   path: "",
   node: null
  };
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
  }
  var parts = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 }),
 getPath: (function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 }),
 hashName: (function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 }),
 hashAddNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 }),
 hashRemoveNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 }),
 lookupNode: (function(parent, name) {
  var err = FS.mayLookup(parent);
  if (err) {
   throw new FS.ErrnoError(err, parent);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 }),
 createNode: (function(parent, name, mode, rdev) {
  if (!FS.FSNode) {
   FS.FSNode = (function(parent, name, mode, rdev) {
    if (!parent) {
     parent = this;
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
   });
   FS.FSNode.prototype = {};
   var readMode = 292 | 73;
   var writeMode = 146;
   Object.defineProperties(FS.FSNode.prototype, {
    read: {
     get: (function() {
      return (this.mode & readMode) === readMode;
     }),
     set: (function(val) {
      val ? this.mode |= readMode : this.mode &= ~readMode;
     })
    },
    write: {
     get: (function() {
      return (this.mode & writeMode) === writeMode;
     }),
     set: (function(val) {
      val ? this.mode |= writeMode : this.mode &= ~writeMode;
     })
    },
    isFolder: {
     get: (function() {
      return FS.isDir(this.mode);
     })
    },
    isDevice: {
     get: (function() {
      return FS.isChrdev(this.mode);
     })
    }
   });
  }
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 }),
 destroyNode: (function(node) {
  FS.hashRemoveNode(node);
 }),
 isRoot: (function(node) {
  return node === node.parent;
 }),
 isMountpoint: (function(node) {
  return !!node.mounted;
 }),
 isFile: (function(mode) {
  return (mode & 61440) === 32768;
 }),
 isDir: (function(mode) {
  return (mode & 61440) === 16384;
 }),
 isLink: (function(mode) {
  return (mode & 61440) === 40960;
 }),
 isChrdev: (function(mode) {
  return (mode & 61440) === 8192;
 }),
 isBlkdev: (function(mode) {
  return (mode & 61440) === 24576;
 }),
 isFIFO: (function(mode) {
  return (mode & 61440) === 4096;
 }),
 isSocket: (function(mode) {
  return (mode & 49152) === 49152;
 }),
 flagModes: {
  "r": 0,
  "rs": 1052672,
  "r+": 2,
  "w": 577,
  "wx": 705,
  "xw": 705,
  "w+": 578,
  "wx+": 706,
  "xw+": 706,
  "a": 1089,
  "ax": 1217,
  "xa": 1217,
  "a+": 1090,
  "ax+": 1218,
  "xa+": 1218
 },
 modeStringToFlags: (function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 }),
 flagsToPermissionString: (function(flag) {
  var perms = [ "r", "w", "rw" ][flag & 3];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 }),
 nodePermissions: (function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
   return ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 mayLookup: (function(dir) {
  var err = FS.nodePermissions(dir, "x");
  if (err) return err;
  if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
  return 0;
 }),
 mayCreate: (function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return ERRNO_CODES.EEXIST;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 }),
 mayDelete: (function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var err = FS.nodePermissions(dir, "wx");
  if (err) {
   return err;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return ERRNO_CODES.ENOTDIR;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return ERRNO_CODES.EBUSY;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return 0;
 }),
 mayOpen: (function(node, flags) {
  if (!node) {
   return ERRNO_CODES.ENOENT;
  }
  if (FS.isLink(node.mode)) {
   return ERRNO_CODES.ELOOP;
  } else if (FS.isDir(node.mode)) {
   if ((flags & 2097155) !== 0 || flags & 512) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 }),
 MAX_OPEN_FDS: 4096,
 nextfd: (function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
 }),
 getStream: (function(fd) {
  return FS.streams[fd];
 }),
 createStream: (function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = (function() {});
   FS.FSStream.prototype = {};
   Object.defineProperties(FS.FSStream.prototype, {
    object: {
     get: (function() {
      return this.node;
     }),
     set: (function(val) {
      this.node = val;
     })
    },
    isRead: {
     get: (function() {
      return (this.flags & 2097155) !== 1;
     })
    },
    isWrite: {
     get: (function() {
      return (this.flags & 2097155) !== 0;
     })
    },
    isAppend: {
     get: (function() {
      return this.flags & 1024;
     })
    }
   });
  }
  var newStream = new FS.FSStream;
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 }),
 closeStream: (function(fd) {
  FS.streams[fd] = null;
 }),
 chrdev_stream_ops: {
  open: (function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  }),
  llseek: (function() {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  })
 },
 major: (function(dev) {
  return dev >> 8;
 }),
 minor: (function(dev) {
  return dev & 255;
 }),
 makedev: (function(ma, mi) {
  return ma << 8 | mi;
 }),
 registerDevice: (function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 }),
 getDevice: (function(dev) {
  return FS.devices[dev];
 }),
 getMounts: (function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 }),
 syncfs: (function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= mounts.length) {
    callback(null);
   }
  }
  mounts.forEach((function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  }));
 }),
 mount: (function(type, opts, mountpoint) {
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 }),
 unmount: (function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach((function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.indexOf(current.mount) !== -1) {
     FS.destroyNode(current);
    }
    current = next;
   }
  }));
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  assert(idx !== -1);
  node.mount.mounts.splice(idx, 1);
 }),
 lookup: (function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 }),
 mknod: (function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  if (!name || name === "." || name === "..") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.mayCreate(parent, name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 }),
 create: (function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 }),
 mkdir: (function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  return FS.mknod(path, mode, 0);
 }),
 mkdev: (function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 }),
 symlink: (function(oldpath, newpath) {
  if (!PATH.resolve(oldpath)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  if (!parent) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  var newname = PATH.basename(newpath);
  var err = FS.mayCreate(parent, newname);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 }),
 rename: (function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  try {
   lookup = FS.lookupPath(old_path, {
    parent: true
   });
   old_dir = lookup.node;
   lookup = FS.lookupPath(new_path, {
    parent: true
   });
   new_dir = lookup.node;
  } catch (e) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  relative = PATH.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var err = FS.mayDelete(old_dir, old_name, isdir);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (new_dir !== old_dir) {
   err = FS.nodePermissions(old_dir, "w");
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  try {
   if (FS.trackingDelegate["willMovePath"]) {
    FS.trackingDelegate["willMovePath"](old_path, new_path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  try {
   if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
  } catch (e) {
   console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
 }),
 rmdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, true);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  return node.node_ops.readdir(node);
 }),
 unlink: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, false);
  if (err) {
   if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readlink: (function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
 }),
 stat: (function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return node.node_ops.getattr(node);
 }),
 lstat: (function(path) {
  return FS.stat(path, true);
 }),
 chmod: (function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 }),
 lchmod: (function(path, mode) {
  FS.chmod(path, mode, true);
 }),
 fchmod: (function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chmod(stream.node, mode);
 }),
 chown: (function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 }),
 lchown: (function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 }),
 fchown: (function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chown(stream.node, uid, gid);
 }),
 truncate: (function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.nodePermissions(node, "w");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 }),
 ftruncate: (function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  FS.truncate(stream.node, len);
 }),
 utime: (function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 }),
 open: (function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  var created = false;
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
    }
   } else {
    node = FS.mknod(path, mode, 0);
    created = true;
   }
  }
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  if (flags & 65536 && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  if (!created) {
   var err = FS.mayOpen(node, flags);
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  flags &= ~(128 | 512);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   flags: flags,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    Module["printErr"]("read file: " + path);
   }
  }
  try {
   if (FS.trackingDelegate["onOpenFile"]) {
    var trackingFlags = 0;
    if ((flags & 2097155) !== 1) {
     trackingFlags |= FS.tracking.openFlags.READ;
    }
    if ((flags & 2097155) !== 0) {
     trackingFlags |= FS.tracking.openFlags.WRITE;
    }
    FS.trackingDelegate["onOpenFile"](path, trackingFlags);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
  }
  return stream;
 }),
 close: (function(stream) {
  if (stream.getdents) stream.getdents = null;
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
 }),
 llseek: (function(stream, offset, whence) {
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  stream.position = stream.stream_ops.llseek(stream, offset, whence);
  stream.ungotten = [];
  return stream.position;
 }),
 read: (function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  return bytesRead;
 }),
 write: (function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if (stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  try {
   if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
  } catch (e) {
   console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
  }
  return bytesWritten;
 }),
 allocate: (function(stream, offset, length) {
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
  }
  stream.stream_ops.allocate(stream, offset, length);
 }),
 mmap: (function(stream, buffer, offset, length, position, prot, flags) {
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EACCES);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
 }),
 msync: (function(stream, buffer, offset, length, mmapFlags) {
  if (!stream || !stream.stream_ops.msync) {
   return 0;
  }
  return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
 }),
 munmap: (function(stream) {
  return 0;
 }),
 ioctl: (function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 }),
 readFile: (function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "r";
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = UTF8ArrayToString(buf, 0);
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 }),
 writeFile: (function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "w";
  opts.encoding = opts.encoding || "utf8";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var stream = FS.open(path, opts.flags, opts.mode);
  if (opts.encoding === "utf8") {
   var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
   var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
   FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
  } else if (opts.encoding === "binary") {
   FS.write(stream, data, 0, data.length, 0, opts.canOwn);
  }
  FS.close(stream);
 }),
 cwd: (function() {
  return FS.currentPath;
 }),
 chdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  var err = FS.nodePermissions(lookup.node, "x");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  FS.currentPath = lookup.path;
 }),
 createDefaultDirectories: (function() {
  FS.mkdir("/tmp");
  FS.mkdir("/home");
  FS.mkdir("/home/web_user");
 }),
 createDefaultDevices: (function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: (function() {
    return 0;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    return length;
   })
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device;
  if (typeof crypto !== "undefined") {
   var randomBuffer = new Uint8Array(1);
   random_device = (function() {
    crypto.getRandomValues(randomBuffer);
    return randomBuffer[0];
   });
  } else if (ENVIRONMENT_IS_NODE) {
   random_device = (function() {
    return require("crypto").randomBytes(1)[0];
   });
  } else {
   random_device = (function() {
    return Math.random() * 256 | 0;
   });
  }
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 }),
 createSpecialDirectories: (function() {
  FS.mkdir("/proc");
  FS.mkdir("/proc/self");
  FS.mkdir("/proc/self/fd");
  FS.mount({
   mount: (function() {
    var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
    node.node_ops = {
     lookup: (function(parent, name) {
      var fd = +name;
      var stream = FS.getStream(fd);
      if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
      var ret = {
       parent: null,
       mount: {
        mountpoint: "fake"
       },
       node_ops: {
        readlink: (function() {
         return stream.path;
        })
       }
      };
      ret.parent = ret;
      return ret;
     })
    };
    return node;
   })
  }, {}, "/proc/self/fd");
 }),
 createStandardStreams: (function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", "r");
  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
  var stdout = FS.open("/dev/stdout", "w");
  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
  var stderr = FS.open("/dev/stderr", "w");
  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
 }),
 ensureErrnoError: (function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno, node) {
   this.node = node;
   this.setErrno = (function(errno) {
    this.errno = errno;
    for (var key in ERRNO_CODES) {
     if (ERRNO_CODES[key] === errno) {
      this.code = key;
      break;
     }
    }
   });
   this.setErrno(errno);
   this.message = ERRNO_MESSAGES[errno];
  };
  FS.ErrnoError.prototype = new Error;
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ ERRNO_CODES.ENOENT ].forEach((function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  }));
 }),
 staticInit: (function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
  FS.createSpecialDirectories();
  FS.filesystems = {
   "MEMFS": MEMFS,
   "IDBFS": IDBFS,
   "NODEFS": NODEFS,
   "WORKERFS": WORKERFS
  };
 }),
 init: (function(input, output, error) {
  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 }),
 quit: (function() {
  FS.init.initialized = false;
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 }),
 getMode: (function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 }),
 joinPath: (function(parts, forceRelative) {
  var path = PATH.join.apply(null, parts);
  if (forceRelative && path[0] == "/") path = path.substr(1);
  return path;
 }),
 absolutePath: (function(relative, base) {
  return PATH.resolve(base, relative);
 }),
 standardizePath: (function(path) {
  return PATH.normalize(path);
 }),
 findObject: (function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   ___setErrNo(ret.error);
   return null;
  }
 }),
 analyzePath: (function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 }),
 createFolder: (function(parent, name, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.mkdir(path, mode);
 }),
 createPath: (function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 }),
 createFile: (function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 }),
 createDataFile: (function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, "w");
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 }),
 createDevice: (function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: (function(stream) {
    stream.seekable = false;
   }),
   close: (function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   }),
   read: (function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   })
  });
  return FS.mkdev(path, mode, dev);
 }),
 createLink: (function(parent, name, target, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  return FS.symlink(target, path);
 }),
 forceLoadFile: (function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  var success = true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (Module["read"]) {
   try {
    obj.contents = intArrayFromString(Module["read"](obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    success = false;
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
  if (!success) ___setErrNo(ERRNO_CODES.EIO);
  return success;
 }),
 createLazyFile: (function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = idx / this.chunkSize | 0;
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest;
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = (function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   });
   var lazyArray = this;
   lazyArray.setDataGetter((function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   }));
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array;
   Object.defineProperty(lazyArray, "length", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._length;
    })
   });
   Object.defineProperty(lazyArray, "chunkSize", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._chunkSize;
    })
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperty(node, "usedBytes", {
   get: (function() {
    return this.contents.length;
   })
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach((function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    if (!FS.forceLoadFile(node)) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    return fn.apply(null, arguments);
   };
  }));
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   if (!FS.forceLoadFile(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EIO);
   }
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   assert(size >= 0);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 }),
 createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
  Browser.init();
  var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency("cp " + fullname);
  function processData(byteArray) {
   function finish(byteArray) {
    if (preFinish) preFinish();
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency(dep);
   }
   var handled = false;
   Module["preloadPlugins"].forEach((function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, (function() {
      if (onerror) onerror();
      removeRunDependency(dep);
     }));
     handled = true;
    }
   }));
   if (!handled) finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
   Browser.asyncLoad(url, (function(byteArray) {
    processData(byteArray);
   }), onerror);
  } else {
   processData(url);
  }
 }),
 indexedDB: (function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 }),
 DB_NAME: (function() {
  return "EM_FS_" + window.location.pathname;
 }),
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   console.log("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 }),
 loadFilesFromDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 })
};
var PATH = {
 splitPath: (function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 }),
 normalizeArray: (function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (; up--; up) {
    parts.unshift("..");
   }
  }
  return parts;
 }),
 normalize: (function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 }),
 dirname: (function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 }),
 basename: (function(path) {
  if (path === "/") return "/";
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 }),
 extname: (function(path) {
  return PATH.splitPath(path)[3];
 }),
 join: (function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 }),
 join2: (function(l, r) {
  return PATH.normalize(l + "/" + r);
 }),
 resolve: (function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    return "";
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function(p) {
   return !!p;
  })), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 }),
 relative: (function(from, to) {
  from = PATH.resolve(from).substr(1);
  to = PATH.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (; start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (; end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 })
};
function _emscripten_set_main_loop_timing(mode, value) {
 var forceNoVsync = location.search.indexOf("novsync") != -1;
 if (forceNoVsync) mode = 2;
 Browser.mainLoop.timingMode = mode;
 Browser.mainLoop.timingValue = value;
 if (!Browser.mainLoop.func) {
  return 1;
 }
 if (mode == 0) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
   setTimeout(Browser.mainLoop.runner, value);
  };
  Browser.mainLoop.method = "timeout";
 } else if (mode == 1) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
   Browser.requestAnimationFrame(Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "rAF";
 } else if (mode == 2) {
  if (!window["setImmediate"]) {
   var setImmediates = [];
   var emscriptenMainLoopMessageId = "__emcc";
   function Browser_setImmediate_messageHandler(event) {
    if (event.source === window && event.data === emscriptenMainLoopMessageId) {
     event.stopPropagation();
     setImmediates.shift()();
    }
   }
   window.addEventListener("message", Browser_setImmediate_messageHandler, true);
   window["setImmediate"] = function Browser_emulated_setImmediate(func) {
    setImmediates.push(func);
    window.postMessage(emscriptenMainLoopMessageId, "*");
   };
  }
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
   window["setImmediate"](Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "immediate";
 }
 return 0;
}
function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
 Module["noExitRuntime"] = true;
 assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
 Browser.mainLoop.func = func;
 Browser.mainLoop.arg = arg;
 var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
 Browser.mainLoop.runner = function Browser_mainLoop_runner() {
  if (ABORT) return;
  if (Browser.mainLoop.queue.length > 0) {
   var start = Date.now();
   var blocker = Browser.mainLoop.queue.shift();
   blocker.func(blocker.arg);
   if (Browser.mainLoop.remainingBlockers) {
    var remaining = Browser.mainLoop.remainingBlockers;
    var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
    if (blocker.counted) {
     Browser.mainLoop.remainingBlockers = next;
    } else {
     next = next + .5;
     Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
    }
   }
   console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
   Browser.mainLoop.updateStatus();
   setTimeout(Browser.mainLoop.runner, 0);
   return;
  }
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
  if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
   Browser.mainLoop.scheduler();
   return;
  }
  if (Browser.mainLoop.method === "timeout" && Module.ctx) {
   Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
   Browser.mainLoop.method = "";
  }
  if (Module["referenceTestPreTick"]) Module["referenceTestPreTick"]();
  Browser.mainLoop.runIter((function() {
   if (typeof arg !== "undefined") {
    Runtime.dynCall("vi", func, [ arg ]);
   } else {
    Runtime.dynCall("v", func);
   }
  }));
  if (Module["referenceTestTick"]) Module["referenceTestTick"]();
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  Browser.mainLoop.scheduler();
 };
 if (!noSetTiming) {
  if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps); else _emscripten_set_main_loop_timing(1, 1);
  Browser.mainLoop.scheduler();
 }
 if (simulateInfiniteLoop) {
  throw "SimulateInfiniteLoop";
 }
}
var Browser = {
 mainLoop: {
  scheduler: null,
  method: "",
  currentlyRunningMainloop: 0,
  func: null,
  arg: 0,
  timingMode: 0,
  timingValue: 0,
  currentFrameNumber: 0,
  queue: [],
  pause: (function() {
   Browser.mainLoop.scheduler = null;
   Browser.mainLoop.currentlyRunningMainloop++;
  }),
  resume: (function() {
   Browser.mainLoop.currentlyRunningMainloop++;
   var timingMode = Browser.mainLoop.timingMode;
   var timingValue = Browser.mainLoop.timingValue;
   var func = Browser.mainLoop.func;
   Browser.mainLoop.func = null;
   _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
   _emscripten_set_main_loop_timing(timingMode, timingValue);
   Browser.mainLoop.scheduler();
  }),
  updateStatus: (function() {
   if (Module["setStatus"]) {
    var message = Module["statusMessage"] || "Please wait...";
    var remaining = Browser.mainLoop.remainingBlockers;
    var expected = Browser.mainLoop.expectedBlockers;
    if (remaining) {
     if (remaining < expected) {
      Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
     } else {
      Module["setStatus"](message);
     }
    } else {
     Module["setStatus"]("");
    }
   }
  }),
  runIter: (function(func) {
   if (ABORT) return;
   if (Module["preMainLoop"]) {
    var preRet = Module["preMainLoop"]();
    if (preRet === false) {
     return;
    }
   }
   try {
    func();
   } catch (e) {
    if (e instanceof ExitStatus) {
     return;
    } else {
     if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
     throw e;
    }
   }
   if (Module["postMainLoop"]) Module["postMainLoop"]();
  })
 },
 isFullScreen: false,
 pointerLock: false,
 moduleContextCreatedCallbacks: [],
 workers: [],
 init: (function() {
  if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  if (Browser.initted) return;
  Browser.initted = true;
  try {
   new Blob;
   Browser.hasBlobConstructor = true;
  } catch (e) {
   Browser.hasBlobConstructor = false;
   console.log("warning: no blob constructor, cannot create blobs with mimetypes");
  }
  Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
  Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
  if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
   console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
   Module.noImageDecoding = true;
  }
  var imagePlugin = {};
  imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
   return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
  };
  imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
   var b = null;
   if (Browser.hasBlobConstructor) {
    try {
     b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
     if (b.size !== byteArray.length) {
      b = new Blob([ (new Uint8Array(byteArray)).buffer ], {
       type: Browser.getMimetype(name)
      });
     }
    } catch (e) {
     Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
    }
   }
   if (!b) {
    var bb = new Browser.BlobBuilder;
    bb.append((new Uint8Array(byteArray)).buffer);
    b = bb.getBlob();
   }
   var url = Browser.URLObject.createObjectURL(b);
   var img = new Image;
   img.onload = function img_onload() {
    assert(img.complete, "Image " + name + " could not be decoded");
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    Module["preloadedImages"][name] = canvas;
    Browser.URLObject.revokeObjectURL(url);
    if (onload) onload(byteArray);
   };
   img.onerror = function img_onerror(event) {
    console.log("Image " + url + " could not be decoded");
    if (onerror) onerror();
   };
   img.src = url;
  };
  Module["preloadPlugins"].push(imagePlugin);
  var audioPlugin = {};
  audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
   return !Module.noAudioDecoding && name.substr(-4) in {
    ".ogg": 1,
    ".wav": 1,
    ".mp3": 1
   };
  };
  audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
   var done = false;
   function finish(audio) {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = audio;
    if (onload) onload(byteArray);
   }
   function fail() {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = new Audio;
    if (onerror) onerror();
   }
   if (Browser.hasBlobConstructor) {
    try {
     var b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
    } catch (e) {
     return fail();
    }
    var url = Browser.URLObject.createObjectURL(b);
    var audio = new Audio;
    audio.addEventListener("canplaythrough", (function() {
     finish(audio);
    }), false);
    audio.onerror = function audio_onerror(event) {
     if (done) return;
     console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
     function encode64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var PAD = "=";
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
       leftchar = leftchar << 8 | data[i];
       leftbits += 8;
       while (leftbits >= 6) {
        var curr = leftchar >> leftbits - 6 & 63;
        leftbits -= 6;
        ret += BASE[curr];
       }
      }
      if (leftbits == 2) {
       ret += BASE[(leftchar & 3) << 4];
       ret += PAD + PAD;
      } else if (leftbits == 4) {
       ret += BASE[(leftchar & 15) << 2];
       ret += PAD;
      }
      return ret;
     }
     audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
     finish(audio);
    };
    audio.src = url;
    Browser.safeSetTimeout((function() {
     finish(audio);
    }), 1e4);
   } else {
    return fail();
   }
  };
  Module["preloadPlugins"].push(audioPlugin);
  var canvas = Module["canvas"];
  function pointerLockChange() {
   Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas || document["msPointerLockElement"] === canvas;
  }
  if (canvas) {
   canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (function() {});
   canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (function() {});
   canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
   document.addEventListener("pointerlockchange", pointerLockChange, false);
   document.addEventListener("mozpointerlockchange", pointerLockChange, false);
   document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
   document.addEventListener("mspointerlockchange", pointerLockChange, false);
   if (Module["elementPointerLock"]) {
    canvas.addEventListener("click", (function(ev) {
     if (!Browser.pointerLock && canvas.requestPointerLock) {
      canvas.requestPointerLock();
      ev.preventDefault();
     }
    }), false);
   }
  }
 }),
 createContext: (function(canvas, useWebGL, setInModule, webGLContextAttributes) {
  if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
  var ctx;
  var contextHandle;
  if (useWebGL) {
   var contextAttributes = {
    antialias: false,
    alpha: false
   };
   if (webGLContextAttributes) {
    for (var attribute in webGLContextAttributes) {
     contextAttributes[attribute] = webGLContextAttributes[attribute];
    }
   }
   contextHandle = GL.createContext(canvas, contextAttributes);
   if (contextHandle) {
    ctx = GL.getContext(contextHandle).GLctx;
   }
   canvas.style.backgroundColor = "black";
  } else {
   ctx = canvas.getContext("2d");
  }
  if (!ctx) return null;
  if (setInModule) {
   if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
   Module.ctx = ctx;
   if (useWebGL) GL.makeContextCurrent(contextHandle);
   Module.useWebGL = useWebGL;
   Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
    callback();
   }));
   Browser.init();
  }
  return ctx;
 }),
 destroyContext: (function(canvas, useWebGL, setInModule) {}),
 fullScreenHandlersInstalled: false,
 lockPointer: undefined,
 resizeCanvas: undefined,
 requestFullScreen: (function(lockPointer, resizeCanvas, vrDevice) {
  Browser.lockPointer = lockPointer;
  Browser.resizeCanvas = resizeCanvas;
  Browser.vrDevice = vrDevice;
  if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
  if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
  if (typeof Browser.vrDevice === "undefined") Browser.vrDevice = null;
  var canvas = Module["canvas"];
  function fullScreenChange() {
   Browser.isFullScreen = false;
   var canvasContainer = canvas.parentNode;
   if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
    canvas.cancelFullScreen = document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || document["msExitFullscreen"] || document["exitFullscreen"] || (function() {});
    canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
    if (Browser.lockPointer) canvas.requestPointerLock();
    Browser.isFullScreen = true;
    if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
   } else {
    canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
    canvasContainer.parentNode.removeChild(canvasContainer);
    if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
   }
   if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullScreen);
   Browser.updateCanvasDimensions(canvas);
  }
  if (!Browser.fullScreenHandlersInstalled) {
   Browser.fullScreenHandlersInstalled = true;
   document.addEventListener("fullscreenchange", fullScreenChange, false);
   document.addEventListener("mozfullscreenchange", fullScreenChange, false);
   document.addEventListener("webkitfullscreenchange", fullScreenChange, false);
   document.addEventListener("MSFullscreenChange", fullScreenChange, false);
  }
  var canvasContainer = document.createElement("div");
  canvas.parentNode.insertBefore(canvasContainer, canvas);
  canvasContainer.appendChild(canvas);
  canvasContainer.requestFullScreen = canvasContainer["requestFullScreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullScreen"] ? (function() {
   canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  }) : null);
  if (vrDevice) {
   canvasContainer.requestFullScreen({
    vrDisplay: vrDevice
   });
  } else {
   canvasContainer.requestFullScreen();
  }
 }),
 nextRAF: 0,
 fakeRequestAnimationFrame: (function(func) {
  var now = Date.now();
  if (Browser.nextRAF === 0) {
   Browser.nextRAF = now + 1e3 / 60;
  } else {
   while (now + 2 >= Browser.nextRAF) {
    Browser.nextRAF += 1e3 / 60;
   }
  }
  var delay = Math.max(Browser.nextRAF - now, 0);
  setTimeout(func, delay);
 }),
 requestAnimationFrame: function requestAnimationFrame(func) {
  if (typeof window === "undefined") {
   Browser.fakeRequestAnimationFrame(func);
  } else {
   if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame;
   }
   window.requestAnimationFrame(func);
  }
 },
 safeCallback: (function(func) {
  return (function() {
   if (!ABORT) return func.apply(null, arguments);
  });
 }),
 allowAsyncCallbacks: true,
 queuedAsyncCallbacks: [],
 pauseAsyncCallbacks: (function() {
  Browser.allowAsyncCallbacks = false;
 }),
 resumeAsyncCallbacks: (function() {
  Browser.allowAsyncCallbacks = true;
  if (Browser.queuedAsyncCallbacks.length > 0) {
   var callbacks = Browser.queuedAsyncCallbacks;
   Browser.queuedAsyncCallbacks = [];
   callbacks.forEach((function(func) {
    func();
   }));
  }
 }),
 safeRequestAnimationFrame: (function(func) {
  return Browser.requestAnimationFrame((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }));
 }),
 safeSetTimeout: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setTimeout((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }), timeout);
 }),
 safeSetInterval: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setInterval((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   }
  }), timeout);
 }),
 getMimetype: (function(name) {
  return {
   "jpg": "image/jpeg",
   "jpeg": "image/jpeg",
   "png": "image/png",
   "bmp": "image/bmp",
   "ogg": "audio/ogg",
   "wav": "audio/wav",
   "mp3": "audio/mpeg"
  }[name.substr(name.lastIndexOf(".") + 1)];
 }),
 getUserMedia: (function(func) {
  if (!window.getUserMedia) {
   window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
  }
  window.getUserMedia(func);
 }),
 getMovementX: (function(event) {
  return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
 }),
 getMovementY: (function(event) {
  return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
 }),
 getMouseWheelDelta: (function(event) {
  var delta = 0;
  switch (event.type) {
  case "DOMMouseScroll":
   delta = event.detail;
   break;
  case "mousewheel":
   delta = event.wheelDelta;
   break;
  case "wheel":
   delta = event["deltaY"];
   break;
  default:
   throw "unrecognized mouse wheel event: " + event.type;
  }
  return delta;
 }),
 mouseX: 0,
 mouseY: 0,
 mouseMovementX: 0,
 mouseMovementY: 0,
 touches: {},
 lastTouches: {},
 calculateMouseEvent: (function(event) {
  if (Browser.pointerLock) {
   if (event.type != "mousemove" && "mozMovementX" in event) {
    Browser.mouseMovementX = Browser.mouseMovementY = 0;
   } else {
    Browser.mouseMovementX = Browser.getMovementX(event);
    Browser.mouseMovementY = Browser.getMovementY(event);
   }
   if (typeof SDL != "undefined") {
    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
   } else {
    Browser.mouseX += Browser.mouseMovementX;
    Browser.mouseY += Browser.mouseMovementY;
   }
  } else {
   var rect = Module["canvas"].getBoundingClientRect();
   var cw = Module["canvas"].width;
   var ch = Module["canvas"].height;
   var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
   var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
   if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
    var touch = event.touch;
    if (touch === undefined) {
     return;
    }
    var adjustedX = touch.pageX - (scrollX + rect.left);
    var adjustedY = touch.pageY - (scrollY + rect.top);
    adjustedX = adjustedX * (cw / rect.width);
    adjustedY = adjustedY * (ch / rect.height);
    var coords = {
     x: adjustedX,
     y: adjustedY
    };
    if (event.type === "touchstart") {
     Browser.lastTouches[touch.identifier] = coords;
     Browser.touches[touch.identifier] = coords;
    } else if (event.type === "touchend" || event.type === "touchmove") {
     var last = Browser.touches[touch.identifier];
     if (!last) last = coords;
     Browser.lastTouches[touch.identifier] = last;
     Browser.touches[touch.identifier] = coords;
    }
    return;
   }
   var x = event.pageX - (scrollX + rect.left);
   var y = event.pageY - (scrollY + rect.top);
   x = x * (cw / rect.width);
   y = y * (ch / rect.height);
   Browser.mouseMovementX = x - Browser.mouseX;
   Browser.mouseMovementY = y - Browser.mouseY;
   Browser.mouseX = x;
   Browser.mouseY = y;
  }
 }),
 xhrLoad: (function(url, onload, onerror) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
   } else {
    onerror();
   }
  };
  xhr.onerror = onerror;
  xhr.send(null);
 }),
 asyncLoad: (function(url, onload, onerror, noRunDep) {
  Browser.xhrLoad(url, (function(arrayBuffer) {
   assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
   onload(new Uint8Array(arrayBuffer));
   if (!noRunDep) removeRunDependency("al " + url);
  }), (function(event) {
   if (onerror) {
    onerror();
   } else {
    throw 'Loading data file "' + url + '" failed.';
   }
  }));
  if (!noRunDep) addRunDependency("al " + url);
 }),
 resizeListeners: [],
 updateResizeListeners: (function() {
  var canvas = Module["canvas"];
  Browser.resizeListeners.forEach((function(listener) {
   listener(canvas.width, canvas.height);
  }));
 }),
 setCanvasSize: (function(width, height, noUpdates) {
  var canvas = Module["canvas"];
  Browser.updateCanvasDimensions(canvas, width, height);
  if (!noUpdates) Browser.updateResizeListeners();
 }),
 windowedWidth: 0,
 windowedHeight: 0,
 setFullScreenCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags | 8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 setWindowedCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags & ~8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 updateCanvasDimensions: (function(canvas, wNative, hNative) {
  if (wNative && hNative) {
   canvas.widthNative = wNative;
   canvas.heightNative = hNative;
  } else {
   wNative = canvas.widthNative;
   hNative = canvas.heightNative;
  }
  var w = wNative;
  var h = hNative;
  if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
   if (w / h < Module["forcedAspectRatio"]) {
    w = Math.round(h * Module["forcedAspectRatio"]);
   } else {
    h = Math.round(w / Module["forcedAspectRatio"]);
   }
  }
  if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
   var factor = Math.min(screen.width / w, screen.height / h);
   w = Math.round(w * factor);
   h = Math.round(h * factor);
  }
  if (Browser.resizeCanvas) {
   if (canvas.width != w) canvas.width = w;
   if (canvas.height != h) canvas.height = h;
   if (typeof canvas.style != "undefined") {
    canvas.style.removeProperty("width");
    canvas.style.removeProperty("height");
   }
  } else {
   if (canvas.width != wNative) canvas.width = wNative;
   if (canvas.height != hNative) canvas.height = hNative;
   if (typeof canvas.style != "undefined") {
    if (w != wNative || h != hNative) {
     canvas.style.setProperty("width", w + "px", "important");
     canvas.style.setProperty("height", h + "px", "important");
    } else {
     canvas.style.removeProperty("width");
     canvas.style.removeProperty("height");
    }
   }
  }
 }),
 wgetRequests: {},
 nextWgetRequestHandle: 0,
 getNextWgetRequestHandle: (function() {
  var handle = Browser.nextWgetRequestHandle;
  Browser.nextWgetRequestHandle++;
  return handle;
 })
};
function _glutCreateWindow(name) {
 var contextAttributes = {
  antialias: (GLUT.initDisplayMode & 128) != 0,
  depth: (GLUT.initDisplayMode & 16) != 0,
  stencil: (GLUT.initDisplayMode & 32) != 0
 };
 Module.ctx = Browser.createContext(Module["canvas"], true, true, contextAttributes);
 return Module.ctx ? 1 : 0;
}
function _eglCreateContext(display, config, hmm, contextAttribs) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 var glesContextVersion = 1;
 for (;;) {
  var param = HEAP32[contextAttribs >> 2];
  if (param == 12440) {
   glesContextVersion = HEAP32[contextAttribs + 4 >> 2];
  } else if (param == 12344) {
   break;
  } else {
   EGL.setErrorCode(12292);
   return 0;
  }
  contextAttribs += 8;
 }
 if (glesContextVersion != 2) {
  EGL.setErrorCode(12293);
  return 0;
 }
 _glutInitDisplayMode(178);
 EGL.windowID = _glutCreateWindow();
 if (EGL.windowID != 0) {
  EGL.setErrorCode(12288);
  return 62004;
 } else {
  EGL.setErrorCode(12297);
  return 0;
 }
}
function __exit(status) {
 Module["exit"](status);
}
function _exit(status) {
 __exit(status);
}
function _glCompileShader(shader) {
 GLctx.compileShader(GL.shaders[shader]);
}
function _emscripten_cancel_main_loop() {
 Browser.mainLoop.pause();
 Browser.mainLoop.func = null;
}
function _glDeleteTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[textures + i * 4 >> 2];
  var texture = GL.textures[id];
  if (!texture) continue;
  GLctx.deleteTexture(texture);
  texture.name = 0;
  GL.textures[id] = null;
 }
}
function _eglBindAPI(api) {
 if (api == 12448) {
  EGL.setErrorCode(12288);
  return 1;
 } else {
  EGL.setErrorCode(12300);
  return 0;
 }
}
var PTHREAD_SPECIFIC = {};
function _pthread_setspecific(key, value) {
 if (!(key in PTHREAD_SPECIFIC)) {
  return ERRNO_CODES.EINVAL;
 }
 PTHREAD_SPECIFIC[key] = value;
 return 0;
}
function _pthread_cleanup_push(routine, arg) {
 __ATEXIT__.push((function() {
  Runtime.dynCall("vi", routine, [ arg ]);
 }));
 _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _glClearDepthf(x0) {
 GLctx.clearDepth(x0);
}
function _glClearStencil(x0) {
 GLctx.clearStencil(x0);
}
function _glGenFramebuffers(n, ids) {
 for (var i = 0; i < n; ++i) {
  var framebuffer = GLctx.createFramebuffer();
  if (!framebuffer) {
   GL.recordError(1282);
   while (i < n) HEAP32[ids + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.framebuffers);
  framebuffer.name = id;
  GL.framebuffers[id] = framebuffer;
  HEAP32[ids + i * 4 >> 2] = id;
 }
}
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
Module["_memcpy"] = _memcpy;
Module["_memmove"] = _memmove;
function _glGenTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var texture = GLctx.createTexture();
  if (!texture) {
   GL.recordError(1282);
   while (i < n) HEAP32[textures + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.textures);
  texture.name = id;
  GL.textures[id] = texture;
  HEAP32[textures + i * 4 >> 2] = id;
 }
}
var _emscripten_preinvoke = true;
function _glDepthFunc(x0) {
 GLctx.depthFunc(x0);
}
function _glDeleteShader(id) {
 if (!id) return;
 var shader = GL.shaders[id];
 if (!shader) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteShader(shader);
 GL.shaders[id] = null;
}
function _glCreateShader(shaderType) {
 var id = GL.getNewId(GL.shaders);
 GL.shaders[id] = GLctx.createShader(shaderType);
 return id;
}
function _glUniform1i(location, v0) {
 location = GL.uniforms[location];
 GLctx.uniform1i(location, v0);
}
function _glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
 program = GL.programs[program];
 var info = GLctx.getActiveAttrib(program, index);
 if (!info) return;
 var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
 if (bufSize > 0 && name) {
  writeStringToMemory(infoname, name);
  if (length) HEAP32[length >> 2] = infoname.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
 if (size) HEAP32[size >> 2] = info.size;
 if (type) HEAP32[type >> 2] = info.type;
}
function _glDeleteRenderbuffers(n, renderbuffers) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[renderbuffers + i * 4 >> 2];
  var renderbuffer = GL.renderbuffers[id];
  if (!renderbuffer) continue;
  GLctx.deleteRenderbuffer(renderbuffer);
  renderbuffer.name = 0;
  GL.renderbuffers[id] = null;
 }
}
function _glDisable(x0) {
 GLctx.disable(x0);
}
function _glBlendFuncSeparate(x0, x1, x2, x3) {
 GLctx.blendFuncSeparate(x0, x1, x2, x3);
}
Module["_memset"] = _memset;
var _BDtoILow = true;
function _glGetProgramiv(program, pname, p) {
 if (pname == 35716) {
  var log = GLctx.getProgramInfoLog(GL.programs[program]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else if (pname == 35719) {
  var ptable = GL.programInfos[program];
  if (ptable) {
   HEAP32[p >> 2] = ptable.maxUniformLength;
   return;
  } else if (program < GL.counter) {
   GL.recordError(1282);
  } else {
   GL.recordError(1281);
  }
 } else if (pname == 35722) {
  var ptable = GL.programInfos[program];
  if (ptable) {
   if (ptable.maxAttributeLength == -1) {
    var program = GL.programs[program];
    var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
    ptable.maxAttributeLength = 0;
    for (var i = 0; i < numAttribs; ++i) {
     var activeAttrib = GLctx.getActiveAttrib(program, i);
     ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length + 1);
    }
   }
   HEAP32[p >> 2] = ptable.maxAttributeLength;
   return;
  } else if (program < GL.counter) {
   GL.recordError(1282);
  } else {
   GL.recordError(1281);
  }
 } else {
  HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname);
 }
}
function _glColorMask(x0, x1, x2, x3) {
 GLctx.colorMask(x0, x1, x2, x3);
}
function _atexit(func, arg) {
 __ATEXIT__.unshift({
  func: func,
  arg: arg
 });
}
function _eglQueryString(display, name) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 EGL.setErrorCode(12288);
 if (EGL.stringCache[name]) return EGL.stringCache[name];
 var ret;
 switch (name) {
 case 12371:
  ret = allocate(intArrayFromString("Emscripten"), "i8", ALLOC_NORMAL);
  break;
 case 12372:
  ret = allocate(intArrayFromString("1.4 Emscripten EGL"), "i8", ALLOC_NORMAL);
  break;
 case 12373:
  ret = allocate(intArrayFromString(""), "i8", ALLOC_NORMAL);
  break;
 case 12429:
  ret = allocate(intArrayFromString("OpenGL_ES"), "i8", ALLOC_NORMAL);
  break;
 default:
  EGL.setErrorCode(12300);
  return 0;
 }
 EGL.stringCache[name] = ret;
 return ret;
}
function _glBlendEquation(x0) {
 GLctx.blendEquation(x0);
}
function _glGetUniformLocation(program, name) {
 name = Pointer_stringify(name);
 var arrayOffset = 0;
 if (name.indexOf("]", name.length - 1) !== -1) {
  var ls = name.lastIndexOf("[");
  var arrayIndex = name.slice(ls + 1, -1);
  if (arrayIndex.length > 0) {
   arrayOffset = parseInt(arrayIndex);
   if (arrayOffset < 0) {
    return -1;
   }
  }
  name = name.slice(0, ls);
 }
 var ptable = GL.programInfos[program];
 if (!ptable) {
  return -1;
 }
 var utable = ptable.uniforms;
 var uniformInfo = utable[name];
 if (uniformInfo && arrayOffset < uniformInfo[0]) {
  return uniformInfo[1] + arrayOffset;
 } else {
  return -1;
 }
}
function _glBindFramebuffer(target, framebuffer) {
 GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
}
function ___lock() {}
function _glCullFace(x0) {
 GLctx.cullFace(x0);
}
function _glUniform1f(location, v0) {
 location = GL.uniforms[location];
 GLctx.uniform1f(location, v0);
}
function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
 return 0;
}
function _eglGetError() {
 return EGL.errorCode;
}
function _glDeleteProgram(id) {
 if (!id) return;
 var program = GL.programs[id];
 if (!program) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteProgram(program);
 program.name = 0;
 GL.programs[id] = null;
 GL.programInfos[id] = null;
}
var _emscripten_get_longjmp_result = true;
function _glRenderbufferStorage(x0, x1, x2, x3) {
 GLctx.renderbufferStorage(x0, x1, x2, x3);
}
function _glAttachShader(program, shader) {
 GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
}
function _eglSwapInterval(display, interval) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (interval == 0) _emscripten_set_main_loop_timing(0, 0); else _emscripten_set_main_loop_timing(1, interval);
 EGL.setErrorCode(12288);
 return 1;
}
function _glCheckFramebufferStatus(x0) {
 return GLctx.checkFramebufferStatus(x0);
}
function _emscripten_set_keyup_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup");
 return 0;
}
function _browser_info() {
 idstr = "";
 if (typeof navigator !== "undefined") {
  if (navigator.vendor && navigator.vendor.length > 0) idstr += navigator.vendor + " ";
  if (navigator.platform && navigator.platform.length > 0) idstr += navigator.platform + " ";
  if (navigator.cpuClass && navigator.cpuClass.length > 0) idstr += navigator.cpuClass + " ";
  if (navigator.appName && navigator.appName.length > 0) idstr += navigator.appName + " ";
  if (navigator.userAgent && navigator.userAgent.length > 0) idstr += navigator.userAgent + " ";
  if (navigator.systemLanguage && navigator.systemLanguage.length > 0) idstr += navigator.systemLanguage + " "; else if (navigator.userLanguage && navigator.userLanguage.length > 0) idstr += navigator.userLanguage + " "; else if (navigator.language && navigator.language.length > 0) idstr += navigator.language + " ";
 } else {
  if (typeof module !== "undefined" && module.exports && typeof process !== "undefined" && typeof process.versions !== "undefined") {
   idstr = "Node.js " + process.versions.node + " v8 version " + process.versions.v8;
  } else if (typeof isAsmJSCompilationAvailable === "function" && isAsmJSCompilationAvailable.toString().indexOf("[native code]") > 0) {
   try {
    if (environment["SPIDERMONKEY"]) {
     system(environment["SPIDERMONKEY"] + ' --execute="build();help();">spidermonkey_version.txt');
     var version = read("spidermonkey_version.txt").split("\n").slice(0, 2);
     var asmJsEnabled = isAsmJSCompilationAvailable();
     var debugStr = typeof debug === "function" && debug.toString().indexOf("[native code]") > 0 ? "DEBUG" : "RELEASE";
     idstr = "SpiderMonkey " + version[1] + " " + debugStr + ", asm.js " + (asmJsEnabled ? "enabled, " : "disabled, ") + version[0];
    } else {
     idstr = "SpiderMonkey";
    }
   } catch (e) {
    idstr = "SpiderMonkey";
   }
  } else {
   idstr = "Unknown browser environment";
  }
 }
 return allocate(intArrayFromString(idstr.trim()), "i8", ALLOC_STACK);
}
function _glUniform3f(location, v0, v1, v2) {
 location = GL.uniforms[location];
 GLctx.uniform3f(location, v0, v1, v2);
}
function ___cxa_guard_acquire(variable) {
 if (!HEAP8[variable >> 0]) {
  HEAP8[variable >> 0] = 1;
  return 1;
 }
 return 0;
}
function _glBindAttribLocation(program, index, name) {
 name = Pointer_stringify(name);
 GLctx.bindAttribLocation(GL.programs[program], index, name);
}
function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
 var log = GLctx.getProgramInfoLog(GL.programs[program]);
 if (log === null) log = "(unknown error)";
 log = log.substr(0, maxLength - 1);
 if (maxLength > 0 && infoLog) {
  writeStringToMemory(log, infoLog);
  if (length) HEAP32[length >> 2] = log.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
}
function __ZSt18uncaught_exceptionv() {
 return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}
var EXCEPTIONS = {
 last: 0,
 caught: [],
 infos: {},
 deAdjust: (function(adjusted) {
  if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
  for (var ptr in EXCEPTIONS.infos) {
   var info = EXCEPTIONS.infos[ptr];
   if (info.adjusted === adjusted) {
    return ptr;
   }
  }
  return adjusted;
 }),
 addRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount++;
 }),
 decRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  assert(info.refcount > 0);
  info.refcount--;
  if (info.refcount === 0) {
   if (info.destructor) {
    Runtime.dynCall("vi", info.destructor, [ ptr ]);
   }
   delete EXCEPTIONS.infos[ptr];
   ___cxa_free_exception(ptr);
  }
 }),
 clearRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount = 0;
 })
};
function ___cxa_begin_catch(ptr) {
 __ZSt18uncaught_exceptionv.uncaught_exception--;
 EXCEPTIONS.caught.push(ptr);
 EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
 return ptr;
}
function _eglInitialize(display, majorVersion, minorVersion) {
 if (display == 62e3) {
  if (majorVersion) {
   HEAP32[majorVersion >> 2] = 1;
  }
  if (minorVersion) {
   HEAP32[minorVersion >> 2] = 4;
  }
  EGL.defaultDisplayInitialized = true;
  EGL.setErrorCode(12288);
  return 1;
 } else {
  EGL.setErrorCode(12296);
  return 0;
 }
}
var SYSCALLS = {
 DEFAULT_POLLMASK: 5,
 mappings: {},
 umask: 511,
 calculateAt: (function(dirfd, path) {
  if (path[0] !== "/") {
   var dir;
   if (dirfd === -100) {
    dir = FS.cwd();
   } else {
    var dirstream = FS.getStream(dirfd);
    if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    dir = dirstream.path;
   }
   path = PATH.join2(dir, path);
  }
  return path;
 }),
 doStat: (function(func, path, buf) {
  try {
   var stat = func(path);
  } catch (e) {
   if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
    return -ERRNO_CODES.ENOTDIR;
   }
   throw e;
  }
  HEAP32[buf >> 2] = stat.dev;
  HEAP32[buf + 4 >> 2] = 0;
  HEAP32[buf + 8 >> 2] = stat.ino;
  HEAP32[buf + 12 >> 2] = stat.mode;
  HEAP32[buf + 16 >> 2] = stat.nlink;
  HEAP32[buf + 20 >> 2] = stat.uid;
  HEAP32[buf + 24 >> 2] = stat.gid;
  HEAP32[buf + 28 >> 2] = stat.rdev;
  HEAP32[buf + 32 >> 2] = 0;
  HEAP32[buf + 36 >> 2] = stat.size;
  HEAP32[buf + 40 >> 2] = 4096;
  HEAP32[buf + 44 >> 2] = stat.blocks;
  HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;
  HEAP32[buf + 52 >> 2] = 0;
  HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;
  HEAP32[buf + 60 >> 2] = 0;
  HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;
  HEAP32[buf + 68 >> 2] = 0;
  HEAP32[buf + 72 >> 2] = stat.ino;
  return 0;
 }),
 doMsync: (function(addr, stream, len, flags) {
  var buffer = new Uint8Array(HEAPU8.buffer, addr, len);
  FS.msync(stream, buffer, 0, len, flags);
 }),
 doMkdir: (function(path, mode) {
  path = PATH.normalize(path);
  if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
  FS.mkdir(path, mode, 0);
  return 0;
 }),
 doMknod: (function(path, mode, dev) {
  switch (mode & 61440) {
  case 32768:
  case 8192:
  case 24576:
  case 4096:
  case 49152:
   break;
  default:
   return -ERRNO_CODES.EINVAL;
  }
  FS.mknod(path, mode, dev);
  return 0;
 }),
 doReadlink: (function(path, buf, bufsize) {
  if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
  var ret = FS.readlink(path);
  ret = ret.slice(0, Math.max(0, bufsize));
  writeStringToMemory(ret, buf, true);
  return ret.length;
 }),
 doAccess: (function(path, amode) {
  if (amode & ~7) {
   return -ERRNO_CODES.EINVAL;
  }
  var node;
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  node = lookup.node;
  var perms = "";
  if (amode & 4) perms += "r";
  if (amode & 2) perms += "w";
  if (amode & 1) perms += "x";
  if (perms && FS.nodePermissions(node, perms)) {
   return -ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 doDup: (function(path, flags, suggestFD) {
  var suggest = FS.getStream(suggestFD);
  if (suggest) FS.close(suggest);
  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
 }),
 doReadv: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.read(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
   if (curr < len) break;
  }
  return ret;
 }),
 doWritev: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.write(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
  }
  return ret;
 }),
 varargs: 0,
 get: (function(varargs) {
  SYSCALLS.varargs += 4;
  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
  return ret;
 }),
 getStr: (function() {
  var ret = Pointer_stringify(SYSCALLS.get());
  return ret;
 }),
 getStreamFromFD: (function() {
  var stream = FS.getStream(SYSCALLS.get());
  if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return stream;
 }),
 getSocketFromFD: (function() {
  var socket = SOCKFS.getSocket(SYSCALLS.get());
  if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return socket;
 }),
 getSocketAddress: (function(allowNull) {
  var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
  if (allowNull && addrp === 0) return null;
  var info = __read_sockaddr(addrp, addrlen);
  if (info.errno) throw new FS.ErrnoError(info.errno);
  info.addr = DNS.lookup_addr(info.addr) || info.addr;
  return info;
 }),
 get64: (function() {
  var low = SYSCALLS.get(), high = SYSCALLS.get();
  if (low >= 0) assert(high === 0); else assert(high === -1);
  return low;
 }),
 getZero: (function() {
  assert(SYSCALLS.get() === 0);
 })
};
function ___syscall5(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
  var stream = FS.open(pathname, flags, mode);
  return stream.fd;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall6(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD();
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _glGetActiveUniform(program, index, bufSize, length, size, type, name) {
 program = GL.programs[program];
 var info = GLctx.getActiveUniform(program, index);
 if (!info) return;
 var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
 if (bufSize > 0 && name) {
  writeStringToMemory(infoname, name);
  if (length) HEAP32[length >> 2] = infoname.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
 if (size) HEAP32[size >> 2] = info.size;
 if (type) HEAP32[type >> 2] = info.type;
}
function _glBufferSubData(target, offset, size, data) {
 GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size));
}
function _eglGetConfigs(display, configs, config_size, numConfigs) {
 return EGL.chooseConfig(display, 0, configs, config_size, numConfigs);
}
function _glGetShaderiv(shader, pname, p) {
 if (pname == 35716) {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  if (log === null) log = "(unknown error)";
  HEAP32[p >> 2] = log.length + 1;
 } else {
  HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
 }
}
function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) {
 return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
}
function _eglWaitNative(nativeEngineId) {
 EGL.setErrorCode(12288);
 return 1;
}
function ___syscall146(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doWritev(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _eglQuerySurface(display, surface, attribute, value) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (surface != 62006) {
  EGL.setErrorCode(12301);
  return 0;
 }
 if (!value) {
  EGL.setErrorCode(12300);
  return 0;
 }
 EGL.setErrorCode(12288);
 switch (attribute) {
 case 12328:
  HEAP32[value >> 2] = 62002;
  return 1;
 case 12376:
  return 1;
 case 12375:
  HEAP32[value >> 2] = Module.canvas.width;
  return 1;
 case 12374:
  HEAP32[value >> 2] = Module.canvas.height;
  return 1;
 case 12432:
  HEAP32[value >> 2] = -1;
  return 1;
 case 12433:
  HEAP32[value >> 2] = -1;
  return 1;
 case 12434:
  HEAP32[value >> 2] = -1;
  return 1;
 case 12422:
  HEAP32[value >> 2] = 12420;
  return 1;
 case 12441:
  HEAP32[value >> 2] = 12442;
  return 1;
 case 12435:
  HEAP32[value >> 2] = 12437;
  return 1;
 case 12416:
 case 12417:
 case 12418:
 case 12419:
  return 1;
 default:
  EGL.setErrorCode(12292);
  return 0;
 }
}
function ___syscall145(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doReadv(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___cxa_atexit() {
 return _atexit.apply(null, arguments);
}
function _glGenRenderbuffers(n, renderbuffers) {
 for (var i = 0; i < n; i++) {
  var renderbuffer = GLctx.createRenderbuffer();
  if (!renderbuffer) {
   GL.recordError(1282);
   while (i < n) HEAP32[renderbuffers + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.renderbuffers);
  renderbuffer.name = id;
  GL.renderbuffers[id] = renderbuffer;
  HEAP32[renderbuffers + i * 4 >> 2] = id;
 }
}
Module["_i64Subtract"] = _i64Subtract;
Module["_i64Add"] = _i64Add;
function ___resumeException(ptr) {
 if (!EXCEPTIONS.last) {
  EXCEPTIONS.last = ptr;
 }
 EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function ___cxa_find_matching_catch() {
 var thrown = EXCEPTIONS.last;
 if (!thrown) {
  return (asm["setTempRet0"](0), 0) | 0;
 }
 var info = EXCEPTIONS.infos[thrown];
 var throwntype = info.type;
 if (!throwntype) {
  return (asm["setTempRet0"](0), thrown) | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 var pointer = Module["___cxa_is_pointer_type"](throwntype);
 if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
 HEAP32[___cxa_find_matching_catch.buffer >> 2] = thrown;
 thrown = ___cxa_find_matching_catch.buffer;
 for (var i = 0; i < typeArray.length; i++) {
  if (typeArray[i] && Module["___cxa_can_catch"](typeArray[i], throwntype, thrown)) {
   thrown = HEAP32[thrown >> 2];
   info.adjusted = thrown;
   return (asm["setTempRet0"](typeArray[i]), thrown) | 0;
  }
 }
 thrown = HEAP32[thrown >> 2];
 return (asm["setTempRet0"](throwntype), thrown) | 0;
}
function ___cxa_throw(ptr, type, destructor) {
 EXCEPTIONS.infos[ptr] = {
  ptr: ptr,
  adjusted: ptr,
  type: type,
  destructor: destructor,
  refcount: 0
 };
 EXCEPTIONS.last = ptr;
 if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
  __ZSt18uncaught_exceptionv.uncaught_exception = 1;
 } else {
  __ZSt18uncaught_exceptionv.uncaught_exception++;
 }
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function _glDepthMask(x0) {
 GLctx.depthMask(x0);
}
function _glUseProgram(program) {
 GLctx.useProgram(program ? GL.programs[program] : null);
}
function _glShaderSource(shader, count, string, length) {
 var source = GL.getSource(shader, count, string, length);
 GLctx.shaderSource(GL.shaders[shader], source);
}
function _glBindRenderbuffer(target, renderbuffer) {
 GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
}
function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
 if (data) {
  data = HEAPU8.subarray(data, data + imageSize);
 } else {
  data = null;
 }
 GLctx["compressedTexImage2D"](target, level, internalFormat, width, height, border, data);
}
function _glDeleteFramebuffers(n, framebuffers) {
 for (var i = 0; i < n; ++i) {
  var id = HEAP32[framebuffers + i * 4 >> 2];
  var framebuffer = GL.framebuffers[id];
  if (!framebuffer) continue;
  GLctx.deleteFramebuffer(framebuffer);
  framebuffer.name = 0;
  GL.framebuffers[id] = null;
 }
}
function _glDrawArrays(mode, first, count) {
 GLctx.drawArrays(mode, first, count);
}
function _glIsProgram(program) {
 var program = GL.programs[program];
 if (!program) return 0;
 return GLctx.isProgram(program);
}
function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
 if (pixels) {
  var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
  pixels = data.pixels;
 } else {
  pixels = null;
 }
 GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
var _sqrtf = Math_sqrt;
function ___assert_fail(condition, filename, line, func) {
 ABORT = true;
 throw "Assertion failed: " + Pointer_stringify(condition) + ", at: " + [ filename ? Pointer_stringify(filename) : "unknown filename", line, func ? Pointer_stringify(func) : "unknown function" ] + " at " + stackTrace();
}
var _emscripten_postinvoke = true;
var PTHREAD_SPECIFIC_NEXT_KEY = 1;
function _pthread_key_create(key, destructor) {
 if (key == 0) {
  return ERRNO_CODES.EINVAL;
 }
 HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
 PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
 PTHREAD_SPECIFIC_NEXT_KEY++;
 return 0;
}
function _glClear(x0) {
 GLctx.clear(x0);
}
var _emscripten_cleanup_setjmp = true;
function _glUniform2f(location, v0, v1) {
 location = GL.uniforms[location];
 GLctx.uniform2f(location, v0, v1);
}
function _glutDestroyWindow(name) {
 Module.ctx = Browser.destroyContext(Module["canvas"], true, true);
 return 1;
}
function _eglDestroyContext(display, context) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (context != 62004) {
  EGL.setErrorCode(12294);
  return 0;
 }
 EGL.setErrorCode(12288);
 return 1;
}
function _glActiveTexture(x0) {
 GLctx.activeTexture(x0);
}
function _glEnableVertexAttribArray(index) {
 GLctx.enableVertexAttribArray(index);
}
function _glBindBuffer(target, buffer) {
 var bufferObj = buffer ? GL.buffers[buffer] : null;
 GLctx.bindBuffer(target, bufferObj);
}
function _glUniform4f(location, v0, v1, v2, v3) {
 location = GL.uniforms[location];
 GLctx.uniform4f(location, v0, v1, v2, v3);
}
function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
 GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level);
}
function _glUniformMatrix2fv(location, count, transpose, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[3];
  for (var i = 0; i < 4; i++) {
   view[i] = HEAPF32[value + i * 4 >> 2];
  }
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
 }
 GLctx.uniformMatrix2fv(location, transpose, view);
}
Module["_bitshift64Lshr"] = _bitshift64Lshr;
function _eglCreateWindowSurface(display, config, win, attrib_list) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (config != 62002) {
  EGL.setErrorCode(12293);
  return 0;
 }
 EGL.setErrorCode(12288);
 return 62006;
}
var _emscripten_prep_setjmp = true;
function _glUniformMatrix3fv(location, count, transpose, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[8];
  for (var i = 0; i < 9; i++) {
   view[i] = HEAPF32[value + i * 4 >> 2];
  }
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2);
 }
 GLctx.uniformMatrix3fv(location, transpose, view);
}
function _glBufferData(target, size, data, usage) {
 switch (usage) {
 case 35041:
 case 35042:
  usage = 35040;
  break;
 case 35045:
 case 35046:
  usage = 35044;
  break;
 case 35049:
 case 35050:
  usage = 35048;
  break;
 }
 if (!data) {
  GLctx.bufferData(target, size, usage);
 } else {
  GLctx.bufferData(target, HEAPU8.subarray(data, data + size), usage);
 }
}
var _BDtoIHigh = true;
Module["_testSetjmp"] = _testSetjmp;
function _longjmp(env, value) {
 asm["setThrew"](env, value || 1);
 throw "longjmp";
}
function _emscripten_longjmp(env, value) {
 _longjmp(env, value);
}
function _pthread_cleanup_pop() {
 assert(_pthread_cleanup_push.level == __ATEXIT__.length, "cannot pop if something else added meanwhile!");
 __ATEXIT__.pop();
 _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _emscripten_set_click_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click");
 return 0;
}
var _emscripten_asm_const_double = true;
function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
 GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
}
function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
 var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
 if (log === null) log = "(unknown error)";
 log = log.substr(0, maxLength - 1);
 if (maxLength > 0 && infoLog) {
  writeStringToMemory(log, infoLog);
  if (length) HEAP32[length >> 2] = log.length;
 } else {
  if (length) HEAP32[length >> 2] = 0;
 }
}
function _emscripten_set_keydown_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown");
 return 0;
}
function _sbrk(bytes) {
 var self = _sbrk;
 if (!self.called) {
  DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
  self.called = true;
  assert(Runtime.dynamicAlloc);
  self.alloc = Runtime.dynamicAlloc;
  Runtime.dynamicAlloc = (function() {
   abort("cannot dynamically allocate, sbrk now has control");
  });
 }
 var ret = DYNAMICTOP;
 if (bytes != 0) {
  var success = self.alloc(bytes);
  if (!success) return -1 >>> 0;
 }
 return ret;
}
Module["_bitshift64Shl"] = _bitshift64Shl;
var _tanf = Math_tan;
var _BItoD = true;
function _glGetIntegerv(name_, p) {
 return GL.get(name_, p, "Integer");
}
function ___syscall54(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
  switch (op) {
  case 21505:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return 0;
   }
  case 21506:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return 0;
   }
  case 21519:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    var argp = SYSCALLS.get();
    HEAP32[argp >> 2] = 0;
    return 0;
   }
  case 21520:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return -ERRNO_CODES.EINVAL;
   }
  case 21531:
   {
    var argp = SYSCALLS.get();
    return FS.ioctl(stream, op, argp);
   }
  default:
   abort("bad ioctl syscall " + op);
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___cxa_guard_release() {}
function _glDisableVertexAttribArray(index) {
 GLctx.disableVertexAttribArray(index);
}
function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
 if (pixels) {
  var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
  pixels = data.pixels;
  internalFormat = data.internalFormat;
 } else {
  pixels = null;
 }
 GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
}
function _sysconf(name) {
 switch (name) {
 case 30:
  return PAGE_SIZE;
 case 85:
  return totalMemory / PAGE_SIZE;
 case 132:
 case 133:
 case 12:
 case 137:
 case 138:
 case 15:
 case 235:
 case 16:
 case 17:
 case 18:
 case 19:
 case 20:
 case 149:
 case 13:
 case 10:
 case 236:
 case 153:
 case 9:
 case 21:
 case 22:
 case 159:
 case 154:
 case 14:
 case 77:
 case 78:
 case 139:
 case 80:
 case 81:
 case 82:
 case 68:
 case 67:
 case 164:
 case 11:
 case 29:
 case 47:
 case 48:
 case 95:
 case 52:
 case 51:
 case 46:
  return 200809;
 case 79:
  return 0;
 case 27:
 case 246:
 case 127:
 case 128:
 case 23:
 case 24:
 case 160:
 case 161:
 case 181:
 case 182:
 case 242:
 case 183:
 case 184:
 case 243:
 case 244:
 case 245:
 case 165:
 case 178:
 case 179:
 case 49:
 case 50:
 case 168:
 case 169:
 case 175:
 case 170:
 case 171:
 case 172:
 case 97:
 case 76:
 case 32:
 case 173:
 case 35:
  return -1;
 case 176:
 case 177:
 case 7:
 case 155:
 case 8:
 case 157:
 case 125:
 case 126:
 case 92:
 case 93:
 case 129:
 case 130:
 case 131:
 case 94:
 case 91:
  return 1;
 case 74:
 case 60:
 case 69:
 case 70:
 case 4:
  return 1024;
 case 31:
 case 42:
 case 72:
  return 32;
 case 87:
 case 26:
 case 33:
  return 2147483647;
 case 34:
 case 1:
  return 47839;
 case 38:
 case 36:
  return 99;
 case 43:
 case 37:
  return 2048;
 case 0:
  return 2097152;
 case 3:
  return 65536;
 case 28:
  return 32768;
 case 44:
  return 32767;
 case 75:
  return 16384;
 case 39:
  return 1e3;
 case 89:
  return 700;
 case 71:
  return 256;
 case 40:
  return 255;
 case 2:
  return 100;
 case 180:
  return 64;
 case 25:
  return 20;
 case 5:
  return 16;
 case 6:
  return 6;
 case 73:
  return 4;
 case 84:
  {
   if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1;
   return 1;
  }
 }
 ___setErrNo(ERRNO_CODES.EINVAL);
 return -1;
}
function _glStencilMask(x0) {
 GLctx.stencilMask(x0);
}
function _eglMakeCurrent(display, draw, read, context) {
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (context != 0 && context != 62004) {
  EGL.setErrorCode(12294);
  return 0;
 }
 if (read != 0 && read != 62006 || draw != 0 && draw != 62006) {
  EGL.setErrorCode(12301);
  return 0;
 }
 EGL.currentContext = context;
 EGL.currentDrawSurface = draw;
 EGL.currentReadSurface = read;
 EGL.setErrorCode(12288);
 return 1;
}
var _DtoIHigh = true;
function _abort() {
 Module["abort"]();
}
function _glIsShader(shader) {
 var s = GL.shaders[shader];
 if (!s) return 0;
 return GLctx.isShader(s);
}
function _emscripten_set_wheel_callback(target, userData, useCapture, callbackfunc) {
 target = JSEvents.findEventTarget(target);
 if (typeof target.onwheel !== "undefined") {
  JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel");
  return 0;
 } else if (typeof target.onmousewheel !== "undefined") {
  JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel");
  return 0;
 } else {
  return -1;
 }
}
function _pthread_once(ptr, func) {
 if (!_pthread_once.seen) _pthread_once.seen = {};
 if (ptr in _pthread_once.seen) return;
 Runtime.dynCall("v", func);
 _pthread_once.seen[ptr] = 1;
}
function ___unlock() {}
function _pthread_getspecific(key) {
 return PTHREAD_SPECIFIC[key] || 0;
}
function _glEnable(x0) {
 GLctx.enable(x0);
}
var _atanf = Math_atan;
var _fabs = Math_abs;
function _glBlendEquationSeparate(x0, x1) {
 GLctx.blendEquationSeparate(x0, x1);
}
function _glGenBuffers(n, buffers) {
 for (var i = 0; i < n; i++) {
  var buffer = GLctx.createBuffer();
  if (!buffer) {
   GL.recordError(1282);
   while (i < n) HEAP32[buffers + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.buffers);
  buffer.name = id;
  GL.buffers[id] = buffer;
  HEAP32[buffers + i * 4 >> 2] = id;
 }
}
function _glGetAttribLocation(program, name) {
 program = GL.programs[program];
 name = Pointer_stringify(name);
 return GLctx.getAttribLocation(program, name);
}
function _malloc(bytes) {
 var ptr = Runtime.dynamicAlloc(bytes + 8);
 return ptr + 8 & 4294967288;
}
Module["_malloc"] = _malloc;
function ___cxa_allocate_exception(size) {
 return _malloc(size);
}
var _sin = Math_sin;
function _glBlendFunc(x0, x1) {
 GLctx.blendFunc(x0, x1);
}
function _glCreateProgram() {
 var id = GL.getNewId(GL.programs);
 var program = GLctx.createProgram();
 program.name = id;
 GL.programs[id] = program;
 return id;
}
function _glViewport(x0, x1, x2, x3) {
 GLctx.viewport(x0, x1, x2, x3);
}
function _emscripten_set_mousedown_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown");
 return 0;
}
function _glPolygonOffset(x0, x1) {
 GLctx.polygonOffset(x0, x1);
}
function ___syscall140(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
  var offset = offset_low;
  assert(offset_high === 0);
  FS.llseek(stream, offset, whence);
  HEAP32[result >> 2] = stream.position;
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _glUniformMatrix4fv(location, count, transpose, value) {
 location = GL.uniforms[location];
 var view;
 if (count === 1) {
  view = GL.miniTempBufferViews[15];
  for (var i = 0; i < 16; i++) {
   view[i] = HEAPF32[value + i * 4 >> 2];
  }
 } else {
  view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2);
 }
 GLctx.uniformMatrix4fv(location, transpose, view);
}
var _emscripten_setjmp = true;
function _glTexParameteri(x0, x1, x2) {
 GLctx.texParameteri(x0, x1, x2);
}
function _glFrontFace(x0) {
 GLctx.frontFace(x0);
}
function _glDeleteBuffers(n, buffers) {
 for (var i = 0; i < n; i++) {
  var id = HEAP32[buffers + i * 4 >> 2];
  var buffer = GL.buffers[id];
  if (!buffer) continue;
  GLctx.deleteBuffer(buffer);
  buffer.name = 0;
  GL.buffers[id] = null;
  if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
  if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
 }
}
function _eglGetDisplay(nativeDisplayType) {
 EGL.setErrorCode(12288);
 return 62e3;
}
function _emscripten_set_canvas_size(width, height) {
 Browser.setCanvasSize(width, height);
}
var _atan2 = Math_atan2;
function _glGetBooleanv(name_, p) {
 return GL.get(name_, p, "Boolean");
}
function _time(ptr) {
 var ret = Date.now() / 1e3 | 0;
 if (ptr) {
  HEAP32[ptr >> 2] = ret;
 }
 return ret;
}
function _glValidateProgram(program) {
 GLctx.validateProgram(GL.programs[program]);
}
function _pthread_self() {
 return 0;
}
function _emscripten_set_dblclick_callback(target, userData, useCapture, callbackfunc) {
 JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 7, "dblclick");
 return 0;
}
function ___syscall221(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
  switch (cmd) {
  case 0:
   {
    var arg = SYSCALLS.get();
    if (arg < 0) {
     return -ERRNO_CODES.EINVAL;
    }
    var newStream;
    newStream = FS.open(stream.path, stream.flags, 0, arg);
    return newStream.fd;
   }
  case 1:
  case 2:
   return 0;
  case 3:
   return stream.flags;
  case 4:
   {
    var arg = SYSCALLS.get();
    stream.flags |= arg;
    return 0;
   }
  case 12:
  case 12:
   {
    var arg = SYSCALLS.get();
    var offset = 0;
    HEAP16[arg + offset >> 1] = 2;
    return 0;
   }
  case 13:
  case 14:
  case 13:
  case 14:
   return 0;
  case 16:
  case 8:
   return -ERRNO_CODES.EINVAL;
  case 9:
   ___setErrNo(ERRNO_CODES.EINVAL);
   return -1;
  default:
   {
    return -ERRNO_CODES.EINVAL;
   }
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
var ___dso_handle = allocate(1, "i32*", ALLOC_STATIC);
var GLctx;
GL.init();
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
 Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
 Browser.requestAnimationFrame(func);
};
Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
 Browser.setCanvasSize(width, height, noUpdates);
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
 Browser.mainLoop.pause();
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
 Browser.mainLoop.resume();
};
Module["getUserMedia"] = function Module_getUserMedia() {
 Browser.getUserMedia();
};
Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
 return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
};
FS.staticInit();
__ATINIT__.unshift((function() {
 if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
}));
__ATMAIN__.push((function() {
 FS.ignorePermissions = false;
}));
__ATEXIT__.push((function() {
 FS.quit();
}));
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift((function() {
 TTY.init();
}));
__ATEXIT__.push((function() {
 TTY.shutdown();
}));
if (ENVIRONMENT_IS_NODE) {
 var fs = require("fs");
 var NODEJS_PATH = require("path");
 NODEFS.staticInit();
}
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var cttz_i8 = allocate([ 8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0 ], "i8", ALLOC_DYNAMIC);
function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 try {
  return Module["dynCall_iiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiii(index, a1, a2, a3) {
 try {
  return Module["dynCall_iiii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiii(index, a1, a2, a3, a4, a5) {
 try {
  Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vi(index, a1) {
 try {
  Module["dynCall_vi"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 try {
  return Module["dynCall_iiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vii(index, a1, a2) {
 try {
  Module["dynCall_vii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_iiiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_ii(index, a1) {
 try {
  return Module["dynCall_ii"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viii(index, a1, a2, a3) {
 try {
  Module["dynCall_viii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_v(index) {
 try {
  Module["dynCall_v"](index);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiii(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iii(index, a1, a2) {
 try {
  return Module["dynCall_iii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiii(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
Module.asmGlobalArg = {
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "NaN": NaN,
 "Infinity": Infinity
};
Module.asmLibraryArg = {
 "abort": abort,
 "assert": assert,
 "invoke_iiiiiiii": invoke_iiiiiiii,
 "invoke_iiii": invoke_iiii,
 "invoke_viiiii": invoke_viiiii,
 "invoke_vi": invoke_vi,
 "invoke_iiiiiiiiii": invoke_iiiiiiiiii,
 "invoke_vii": invoke_vii,
 "invoke_iiiiiii": invoke_iiiiiii,
 "invoke_ii": invoke_ii,
 "invoke_viii": invoke_viii,
 "invoke_v": invoke_v,
 "invoke_iiiii": invoke_iiiii,
 "invoke_viiiiii": invoke_viiiiii,
 "invoke_iii": invoke_iii,
 "invoke_iiiiii": invoke_iiiiii,
 "invoke_viiii": invoke_viiii,
 "_glClearStencil": _glClearStencil,
 "_glUseProgram": _glUseProgram,
 "_glUniformMatrix3fv": _glUniformMatrix3fv,
 "_glUniformMatrix2fv": _glUniformMatrix2fv,
 "_glGetActiveUniform": _glGetActiveUniform,
 "_glUniformMatrix4fv": _glUniformMatrix4fv,
 "___cxa_guard_acquire": ___cxa_guard_acquire,
 "_glGenRenderbuffers": _glGenRenderbuffers,
 "___assert_fail": ___assert_fail,
 "_glDeleteProgram": _glDeleteProgram,
 "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv,
 "_glBlendEquation": _glBlendEquation,
 "_longjmp": _longjmp,
 "_glBindBuffer": _glBindBuffer,
 "_glGetShaderInfoLog": _glGetShaderInfoLog,
 "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
 "_sbrk": _sbrk,
 "_glBlendFunc": _glBlendFunc,
 "_glGetAttribLocation": _glGetAttribLocation,
 "_glDisableVertexAttribArray": _glDisableVertexAttribArray,
 "___cxa_begin_catch": ___cxa_begin_catch,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "_eglBindAPI": _eglBindAPI,
 "_glPolygonOffset": _glPolygonOffset,
 "_glIsShader": _glIsShader,
 "_sysconf": _sysconf,
 "_eglCreateContext": _eglCreateContext,
 "_tanf": _tanf,
 "_fabs": _fabs,
 "_glUniform4f": _glUniform4f,
 "_glUniform3f": _glUniform3f,
 "_glGenBuffers": _glGenBuffers,
 "_glShaderSource": _glShaderSource,
 "_glFramebufferRenderbuffer": _glFramebufferRenderbuffer,
 "___cxa_atexit": ___cxa_atexit,
 "_pthread_cleanup_push": _pthread_cleanup_push,
 "_glGetBooleanv": _glGetBooleanv,
 "_glutCreateWindow": _glutCreateWindow,
 "___syscall140": ___syscall140,
 "___syscall145": ___syscall145,
 "_glValidateProgram": _glValidateProgram,
 "_pthread_cleanup_pop": _pthread_cleanup_pop,
 "_emscripten_set_click_callback": _emscripten_set_click_callback,
 "_emscripten_run_script_string": _emscripten_run_script_string,
 "_emscripten_set_keyup_callback": _emscripten_set_keyup_callback,
 "_atan2": _atan2,
 "_glGetProgramInfoLog": _glGetProgramInfoLog,
 "___cxa_find_matching_catch": ___cxa_find_matching_catch,
 "_glBindRenderbuffer": _glBindRenderbuffer,
 "_glDepthMask": _glDepthMask,
 "_glutInitDisplayMode": _glutInitDisplayMode,
 "_glViewport": _glViewport,
 "___setErrNo": ___setErrNo,
 "_glDeleteTextures": _glDeleteTextures,
 "_glDepthFunc": _glDepthFunc,
 "_emscripten_set_mousedown_callback": _emscripten_set_mousedown_callback,
 "_emscripten_set_canvas_size": _emscripten_set_canvas_size,
 "___resumeException": ___resumeException,
 "_atanf": _atanf,
 "_glBlendFuncSeparate": _glBlendFuncSeparate,
 "_pthread_once": _pthread_once,
 "_glGenTextures": _glGenTextures,
 "_glGetIntegerv": _glGetIntegerv,
 "_glGetString": _glGetString,
 "_emscripten_set_mouseup_callback": _emscripten_set_mouseup_callback,
 "_eglWaitClient": _eglWaitClient,
 "_emscripten_get_now": _emscripten_get_now,
 "_glAttachShader": _glAttachShader,
 "_glCreateProgram": _glCreateProgram,
 "___lock": ___lock,
 "___syscall6": ___syscall6,
 "___syscall5": ___syscall5,
 "_time": _time,
 "_glBindFramebuffer": _glBindFramebuffer,
 "___syscall146": ___syscall146,
 "_glGenFramebuffers": _glGenFramebuffers,
 "_eglWaitNative": _eglWaitNative,
 "_exit": _exit,
 "_emscripten_set_dblclick_callback": _emscripten_set_dblclick_callback,
 "_emscripten_asm_const_2": _emscripten_asm_const_2,
 "_eglCreateWindowSurface": _eglCreateWindowSurface,
 "_eglGetDisplay": _eglGetDisplay,
 "_glIsProgram": _glIsProgram,
 "_glCullFace": _glCullFace,
 "_glDeleteFramebuffers": _glDeleteFramebuffers,
 "_eglChooseConfig": _eglChooseConfig,
 "_glDeleteShader": _glDeleteShader,
 "_glCheckFramebufferStatus": _glCheckFramebufferStatus,
 "___cxa_allocate_exception": ___cxa_allocate_exception,
 "_glVertexAttribPointer": _glVertexAttribPointer,
 "___syscall221": ___syscall221,
 "_glCompressedTexImage2D": _glCompressedTexImage2D,
 "_glClearDepthf": _glClearDepthf,
 "_glClearColor": _glClearColor,
 "_glBindTexture": _glBindTexture,
 "_glUniform1f": _glUniform1f,
 "_eglSwapInterval": _eglSwapInterval,
 "_glUniform1i": _glUniform1i,
 "_glutDestroyWindow": _glutDestroyWindow,
 "_pthread_getspecific": _pthread_getspecific,
 "_glDrawArrays": _glDrawArrays,
 "_glCreateShader": _glCreateShader,
 "_glGetActiveAttrib": _glGetActiveAttrib,
 "_floorf": _floorf,
 "_sqrtf": _sqrtf,
 "_glActiveTexture": _glActiveTexture,
 "_glFrontFace": _glFrontFace,
 "_eglMakeCurrent": _eglMakeCurrent,
 "_glCompileShader": _glCompileShader,
 "_eglQuerySurface": _eglQuerySurface,
 "_glEnableVertexAttribArray": _glEnableVertexAttribArray,
 "_abort": _abort,
 "_glDeleteBuffers": _glDeleteBuffers,
 "_glBufferData": _glBufferData,
 "_glTexImage2D": _glTexImage2D,
 "_eglGetError": _eglGetError,
 "_sin": _sin,
 "_glGetProgramiv": _glGetProgramiv,
 "_eglQueryString": _eglQueryString,
 "_pthread_key_create": _pthread_key_create,
 "_emscripten_set_keydown_callback": _emscripten_set_keydown_callback,
 "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback,
 "_glDeleteRenderbuffers": _glDeleteRenderbuffers,
 "_eglInitialize": _eglInitialize,
 "_glLinkProgram": _glLinkProgram,
 "_glGetShaderiv": _glGetShaderiv,
 "_eglTerminate": _eglTerminate,
 "_browser_info": _browser_info,
 "_glGetUniformLocation": _glGetUniformLocation,
 "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop,
 "_glClear": _glClear,
 "_glRenderbufferStorage": _glRenderbufferStorage,
 "__exit": __exit,
 "_glBindAttribLocation": _glBindAttribLocation,
 "_pthread_self": _pthread_self,
 "_glEnable": _glEnable,
 "_emscripten_set_wheel_callback": _emscripten_set_wheel_callback,
 "___syscall54": ___syscall54,
 "___unlock": ___unlock,
 "_glFramebufferTexture2D": _glFramebufferTexture2D,
 "_eglDestroyContext": _eglDestroyContext,
 "_emscripten_set_main_loop": _emscripten_set_main_loop,
 "_glUniform2f": _glUniform2f,
 "___cxa_guard_release": ___cxa_guard_release,
 "_eglGetConfigs": _eglGetConfigs,
 "_pthread_setspecific": _pthread_setspecific,
 "_glBufferSubData": _glBufferSubData,
 "___cxa_throw": ___cxa_throw,
 "_glColorMask": _glColorMask,
 "_glDisable": _glDisable,
 "_glTexParameteri": _glTexParameteri,
 "_emscripten_longjmp": _emscripten_longjmp,
 "_atexit": _atexit,
 "_glStencilMask": _glStencilMask,
 "_glBlendEquationSeparate": _glBlendEquationSeparate,
 "_glTexSubImage2D": _glTexSubImage2D,
 "STACKTOP": STACKTOP,
 "STACK_MAX": STACK_MAX,
 "tempDoublePtr": tempDoublePtr,
 "ABORT": ABORT,
 "cttz_i8": cttz_i8,
 "___dso_handle": ___dso_handle
};
// EMSCRIPTEN_START_ASM

var asm = (function(global,env,buffer) {

  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glClearStencil=env._glClearStencil;
  var _glUseProgram=env._glUseProgram;
  var _glUniformMatrix3fv=env._glUniformMatrix3fv;
  var _glUniformMatrix2fv=env._glUniformMatrix2fv;
  var _glGetActiveUniform=env._glGetActiveUniform;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _glGenRenderbuffers=env._glGenRenderbuffers;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glBlendEquation=env._glBlendEquation;
  var _longjmp=env._longjmp;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glBlendFunc=env._glBlendFunc;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _eglBindAPI=env._eglBindAPI;
  var _glPolygonOffset=env._glPolygonOffset;
  var _glIsShader=env._glIsShader;
  var _sysconf=env._sysconf;
  var _eglCreateContext=env._eglCreateContext;
  var _tanf=env._tanf;
  var _fabs=env._fabs;
  var _glUniform4f=env._glUniform4f;
  var _glUniform3f=env._glUniform3f;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _glFramebufferRenderbuffer=env._glFramebufferRenderbuffer;
  var ___cxa_atexit=env.___cxa_atexit;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _glGetBooleanv=env._glGetBooleanv;
  var _glutCreateWindow=env._glutCreateWindow;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var _glValidateProgram=env._glValidateProgram;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _emscripten_set_click_callback=env._emscripten_set_click_callback;
  var _emscripten_run_script_string=env._emscripten_run_script_string;
  var _emscripten_set_keyup_callback=env._emscripten_set_keyup_callback;
  var _atan2=env._atan2;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _glBindRenderbuffer=env._glBindRenderbuffer;
  var _glDepthMask=env._glDepthMask;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var _glViewport=env._glViewport;
  var ___setErrNo=env.___setErrNo;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _emscripten_set_mousedown_callback=env._emscripten_set_mousedown_callback;
  var _emscripten_set_canvas_size=env._emscripten_set_canvas_size;
  var ___resumeException=env.___resumeException;
  var _atanf=env._atanf;
  var _glBlendFuncSeparate=env._glBlendFuncSeparate;
  var _pthread_once=env._pthread_once;
  var _glGenTextures=env._glGenTextures;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glGetString=env._glGetString;
  var _emscripten_set_mouseup_callback=env._emscripten_set_mouseup_callback;
  var _eglWaitClient=env._eglWaitClient;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var ___syscall146=env.___syscall146;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _eglWaitNative=env._eglWaitNative;
  var _exit=env._exit;
  var _emscripten_set_dblclick_callback=env._emscripten_set_dblclick_callback;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _eglCreateWindowSurface=env._eglCreateWindowSurface;
  var _eglGetDisplay=env._eglGetDisplay;
  var _glIsProgram=env._glIsProgram;
  var _glCullFace=env._glCullFace;
  var _glDeleteFramebuffers=env._glDeleteFramebuffers;
  var _eglChooseConfig=env._eglChooseConfig;
  var _glDeleteShader=env._glDeleteShader;
  var _glCheckFramebufferStatus=env._glCheckFramebufferStatus;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var ___syscall221=env.___syscall221;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _glClearDepthf=env._glClearDepthf;
  var _glClearColor=env._glClearColor;
  var _glBindTexture=env._glBindTexture;
  var _glUniform1f=env._glUniform1f;
  var _eglSwapInterval=env._eglSwapInterval;
  var _glUniform1i=env._glUniform1i;
  var _glutDestroyWindow=env._glutDestroyWindow;
  var _pthread_getspecific=env._pthread_getspecific;
  var _glDrawArrays=env._glDrawArrays;
  var _glCreateShader=env._glCreateShader;
  var _glGetActiveAttrib=env._glGetActiveAttrib;
  var _floorf=env._floorf;
  var _sqrtf=env._sqrtf;
  var _glActiveTexture=env._glActiveTexture;
  var _glFrontFace=env._glFrontFace;
  var _eglMakeCurrent=env._eglMakeCurrent;
  var _glCompileShader=env._glCompileShader;
  var _eglQuerySurface=env._eglQuerySurface;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _eglGetError=env._eglGetError;
  var _sin=env._sin;
  var _glGetProgramiv=env._glGetProgramiv;
  var _eglQueryString=env._eglQueryString;
  var _pthread_key_create=env._pthread_key_create;
  var _emscripten_set_keydown_callback=env._emscripten_set_keydown_callback;
  var _emscripten_set_mousemove_callback=env._emscripten_set_mousemove_callback;
  var _glDeleteRenderbuffers=env._glDeleteRenderbuffers;
  var _eglInitialize=env._eglInitialize;
  var _glLinkProgram=env._glLinkProgram;
  var _glGetShaderiv=env._glGetShaderiv;
  var _eglTerminate=env._eglTerminate;
  var _browser_info=env._browser_info;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var _glClear=env._glClear;
  var _glRenderbufferStorage=env._glRenderbufferStorage;
  var __exit=env.__exit;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _pthread_self=env._pthread_self;
  var _glEnable=env._glEnable;
  var _emscripten_set_wheel_callback=env._emscripten_set_wheel_callback;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var _eglDestroyContext=env._eglDestroyContext;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _glUniform2f=env._glUniform2f;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _eglGetConfigs=env._eglGetConfigs;
  var _pthread_setspecific=env._pthread_setspecific;
  var _glBufferSubData=env._glBufferSubData;
  var ___cxa_throw=env.___cxa_throw;
  var _glColorMask=env._glColorMask;
  var _glDisable=env._glDisable;
  var _glTexParameteri=env._glTexParameteri;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _atexit=env._atexit;
  var _glStencilMask=env._glStencilMask;
  var _glBlendEquationSeparate=env._glBlendEquationSeparate;
  var _glTexSubImage2D=env._glTexSubImage2D;
  var tempFloat = Math_fround(0);
  const f0 = Math_fround(0);

// EMSCRIPTEN_START_FUNCS

function _TT_RunIns(i23) {
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i23 + 256 >> 2] = 0;
 i15 = (HEAP16[i23 + 216 >> 1] | 0) == (HEAP16[i23 + 218 >> 1] | 0);
 HEAP32[i23 + 592 >> 2] = i15 ? 150 : 149;
 HEAP32[i23 + 596 >> 2] = i15 ? 10 : 9;
 HEAP32[i23 + 600 >> 2] = i15 ? 12 : 11;
 _Compute_Funcs(i23);
 switch (HEAP32[i23 + 312 >> 2] & 255 | 0) {
 case 5:
  {
   HEAP32[i23 + 568 >> 2] = 49;
   i15 = i23 + 568 | 0;
   break;
  }
 case 1:
  {
   HEAP32[i23 + 568 >> 2] = 50;
   i15 = i23 + 568 | 0;
   break;
  }
 case 4:
  {
   HEAP32[i23 + 568 >> 2] = 51;
   i15 = i23 + 568 | 0;
   break;
  }
 case 3:
  {
   HEAP32[i23 + 568 >> 2] = 52;
   i15 = i23 + 568 | 0;
   break;
  }
 case 0:
  {
   HEAP32[i23 + 568 >> 2] = 53;
   i15 = i23 + 568 | 0;
   break;
  }
 case 2:
  {
   HEAP32[i23 + 568 >> 2] = 54;
   i15 = i23 + 568 | 0;
   break;
  }
 case 6:
  {
   HEAP32[i23 + 568 >> 2] = 55;
   i15 = i23 + 568 | 0;
   break;
  }
 case 7:
  {
   HEAP32[i23 + 568 >> 2] = 56;
   i15 = i23 + 568 | 0;
   break;
  }
 default:
  i15 = i23 + 568 | 0;
 }
 i4 = HEAP32[i23 + 360 >> 2] | 0;
 i14 = 0;
 L12 : while (1) {
  i12 = HEAP32[i23 + 356 >> 2] | 0;
  i7 = HEAP8[i12 + i4 >> 0] | 0;
  HEAP8[i23 + 368 >> 0] = i7;
  i2 = HEAP8[322531 + (i7 & 255) >> 0] | 0;
  HEAP32[i23 + 372 >> 2] = i2;
  if ((i7 & 254 | 0) == 64) {
   i3 = i4 + 1 | 0;
   i1 = HEAP32[i23 + 364 >> 2] | 0;
   if ((i3 | 0) >= (i1 | 0)) {
    i11 = 797;
    break;
   }
   i2 = 2 - (Math_imul(HEAPU8[i12 + i3 >> 0] | 0, i2) | 0) | 0;
   HEAP32[i23 + 372 >> 2] = i2;
  } else i1 = HEAP32[i23 + 364 >> 2] | 0;
  if ((i2 + i4 | 0) > (i1 | 0)) {
   i11 = 797;
   break;
  }
  i5 = HEAP8[322787 + (i7 & 255) >> 0] | 0;
  i1 = (HEAP32[i23 + 16 >> 2] | 0) - ((i5 & 255) >>> 4) | 0;
  HEAP32[i23 + 28 >> 2] = i1;
  if ((i1 | 0) < 0) {
   if (HEAP8[i23 + 561 >> 0] | 0) {
    i11 = 21;
    break;
   }
   if ((i5 & 255) > 15) {
    i1 = HEAP32[i23 + 24 >> 2] | 0;
    i3 = 0;
    i4 = 0;
    do {
     HEAP32[i1 + (i3 << 2) >> 2] = 0;
     i4 = i4 + 1 << 16 >> 16;
     i3 = i4 & 65535;
    } while (i3 >>> 0 < (i5 & 255) >>> 4 >>> 0);
   }
   HEAP32[i23 + 28 >> 2] = 0;
   i1 = 0;
  }
  i9 = (i5 & 15) + i1 | 0;
  HEAP32[i23 + 32 >> 2] = i9;
  i4 = HEAP32[i23 + 20 >> 2] | 0;
  if (i9 >>> 0 > i4 >>> 0) {
   i11 = 25;
   break;
  }
  HEAP8[i23 + 376 >> 0] = 1;
  HEAP32[i23 + 12 >> 2] = 0;
  i8 = HEAP32[i23 + 24 >> 2] | 0;
  i10 = i8 + (i1 << 2) | 0;
  L30 : do switch (i7 & 255 | 0) {
  case 79:
   {
    i11 = 446;
    break L12;
   }
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
  case 0:
   {
    if ((i7 & 255) < 4) {
     HEAP16[i23 + 294 >> 1] = (i7 & 255) << 14 & 16384;
     HEAP16[i23 + 296 >> 1] = (i7 & 255) << 14 & 16384 ^ 16384;
     HEAP16[i23 + 290 >> 1] = (i7 & 255) << 14 & 16384;
     HEAP16[i23 + 292 >> 1] = (i7 & 255) << 14 & 16384 ^ 16384;
    }
    if (!(i7 & 2)) {
     HEAP16[i23 + 298 >> 1] = (i7 & 255) << 14 & 16384;
     HEAP16[i23 + 300 >> 1] = (i7 & 255) << 14 & 16384 ^ 16384;
    }
    _Compute_Funcs(i23);
    i11 = 774;
    break;
   }
  case 7:
  case 6:
   {
    i2 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    if ((HEAPU16[i23 + 116 >> 1] | 0) > (i2 & 65535) ? (HEAPU16[i23 + 80 >> 1] | 0) > (i1 & 65535) : 0) {
     i12 = HEAP32[i23 + 88 >> 2] | 0;
     i13 = HEAP32[i23 + 124 >> 2] | 0;
     i8 = HEAP32[i12 + ((i1 & 65535) << 3) >> 2] | 0;
     i10 = HEAP32[i13 + ((i2 & 65535) << 3) >> 2] | 0;
     i12 = HEAP32[i12 + ((i1 & 65535) << 3) + 4 >> 2] | 0;
     i13 = HEAP32[i13 + ((i2 & 65535) << 3) + 4 >> 2] | 0;
     i11 = (i8 | 0) == (i10 | 0) & (i12 | 0) == (i13 | 0) ? 16384 : i8 - i10 | 0;
     i10 = (i7 & 1) == 0 | (i8 | 0) == (i10 | 0) & (i12 | 0) == (i13 | 0);
     _Normalize(i10 ? i11 : 0 - (i12 - i13) | 0, i10 ? i12 - i13 | 0 : i11, i23 + 294 | 0);
     i11 = HEAPU16[i23 + 294 >> 1] | HEAPU16[i23 + 294 + 2 >> 1] << 16;
     HEAP16[i23 + 290 >> 1] = i11;
     HEAP16[i23 + 290 + 2 >> 1] = i11 >>> 16;
     _Compute_Funcs(i23);
     i11 = 774;
     break L30;
    }
    if (!(HEAP8[i23 + 561 >> 0] | 0)) i11 = 774; else {
     i11 = 35;
     break L12;
    }
    break;
   }
  case 9:
  case 8:
   {
    i2 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    if ((HEAPU16[i23 + 116 >> 1] | 0) > (i2 & 65535) ? (HEAPU16[i23 + 80 >> 1] | 0) > (i1 & 65535) : 0) {
     i12 = HEAP32[i23 + 88 >> 2] | 0;
     i13 = HEAP32[i23 + 124 >> 2] | 0;
     i8 = HEAP32[i12 + ((i1 & 65535) << 3) >> 2] | 0;
     i10 = HEAP32[i13 + ((i2 & 65535) << 3) >> 2] | 0;
     i12 = HEAP32[i12 + ((i1 & 65535) << 3) + 4 >> 2] | 0;
     i13 = HEAP32[i13 + ((i2 & 65535) << 3) + 4 >> 2] | 0;
     i11 = (i8 | 0) == (i10 | 0) & (i12 | 0) == (i13 | 0) ? 16384 : i8 - i10 | 0;
     i10 = (i7 & 1) == 0 | (i8 | 0) == (i10 | 0) & (i12 | 0) == (i13 | 0);
     _Normalize(i10 ? i11 : 0 - (i12 - i13) | 0, i10 ? i12 - i13 | 0 : i11, i23 + 298 | 0);
     _Compute_Funcs(i23);
     i11 = 774;
     break L30;
    }
    if (!(HEAP8[i23 + 561 >> 0] | 0)) i11 = 774; else {
     i11 = 40;
     break L12;
    }
    break;
   }
  case 10:
   {
    _Normalize(HEAP32[i10 >> 2] << 16 >> 16, HEAP32[i8 + (i1 + 1 << 2) >> 2] << 16 >> 16, i23 + 294 | 0);
    i11 = HEAPU16[i23 + 294 >> 1] | HEAPU16[i23 + 294 + 2 >> 1] << 16;
    HEAP16[i23 + 290 >> 1] = i11;
    HEAP16[i23 + 290 + 2 >> 1] = i11 >>> 16;
    _Compute_Funcs(i23);
    i11 = 774;
    break;
   }
  case 11:
   {
    _Normalize(HEAP32[i10 >> 2] << 16 >> 16, HEAP32[i8 + (i1 + 1 << 2) >> 2] << 16 >> 16, i23 + 298 | 0);
    _Compute_Funcs(i23);
    i11 = 774;
    break;
   }
  case 12:
   {
    HEAP32[i10 >> 2] = HEAP16[i23 + 294 >> 1];
    HEAP32[i8 + (i1 + 1 << 2) >> 2] = HEAP16[i23 + 296 >> 1];
    i11 = 774;
    break;
   }
  case 13:
   {
    HEAP32[i10 >> 2] = HEAP16[i23 + 298 >> 1];
    HEAP32[i8 + (i1 + 1 << 2) >> 2] = HEAP16[i23 + 300 >> 1];
    i11 = 774;
    break;
   }
  case 14:
   {
    i11 = HEAPU16[i23 + 294 >> 1] | HEAPU16[i23 + 294 + 2 >> 1] << 16;
    HEAP16[i23 + 298 >> 1] = i11;
    HEAP16[i23 + 298 + 2 >> 1] = i11 >>> 16;
    _Compute_Funcs(i23);
    i11 = 774;
    break;
   }
  case 15:
   {
    i10 = HEAP32[i10 >> 2] | 0;
    i11 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    i12 = HEAP32[i8 + (i1 + 2 << 2) >> 2] | 0;
    i13 = HEAP32[i8 + (i1 + 3 << 2) >> 2] & 65535;
    i2 = HEAPU16[i23 + 44 >> 1] | 0;
    if ((((i13 >>> 0 < i2 >>> 0 ? (i21 = HEAP32[i8 + (i1 + 4 << 2) >> 2] & 65535, i21 >>> 0 < i2 >>> 0) : 0) ? (i22 = HEAPU16[i23 + 80 >> 1] | 0, (i11 & 65535) >>> 0 < i22 >>> 0) : 0) ? (i12 & 65535) >>> 0 < i22 >>> 0 : 0) ? (i10 & 65535) >>> 0 < (HEAPU16[i23 + 116 >> 1] | 0) >>> 0 : 0) {
     i4 = HEAP32[i23 + 52 >> 2] | 0;
     i1 = HEAP32[i4 + (i13 << 3) >> 2] | 0;
     i2 = (HEAP32[i4 + (i21 << 3) >> 2] | 0) - i1 | 0;
     i3 = HEAP32[i4 + (i21 << 3) + 4 >> 2] | 0;
     i4 = HEAP32[i4 + (i13 << 3) + 4 >> 2] | 0;
     i8 = HEAP32[i23 + 88 >> 2] | 0;
     i5 = HEAP32[i8 + ((i11 & 65535) << 3) >> 2] | 0;
     i6 = (HEAP32[i8 + ((i12 & 65535) << 3) >> 2] | 0) - i5 | 0;
     i7 = HEAP32[i8 + ((i11 & 65535) << 3) + 4 >> 2] | 0;
     i8 = (HEAP32[i8 + ((i12 & 65535) << 3) + 4 >> 2] | 0) - i7 | 0;
     i9 = (HEAP32[i23 + 132 >> 2] | 0) + (i10 & 65535) | 0;
     HEAP8[i9 >> 0] = HEAPU8[i9 >> 0] | 24;
     i9 = _FT_MulDiv(i6, i4 - i3 | 0, 64) | 0;
     i9 = (_FT_MulDiv(i8, i2, 64) | 0) + i9 | 0;
     if ((((i9 | 0) < 0 ? 0 - i9 | 0 : i9) | 0) > 63) {
      i12 = _FT_MulDiv(i1 - i5 | 0, i4 - i3 | 0, 64) | 0;
      i12 = (_FT_MulDiv(i4 - i7 | 0, i2, 64) | 0) + i12 | 0;
      i7 = _FT_MulDiv(i12, i6, i9) | 0;
      i12 = _FT_MulDiv(i12, i8, i9) | 0;
      i8 = HEAP32[i23 + 88 >> 2] | 0;
      i13 = HEAP32[i23 + 124 >> 2] | 0;
      HEAP32[i13 + ((i10 & 65535) << 3) >> 2] = (HEAP32[i8 + ((i11 & 65535) << 3) >> 2] | 0) + i7;
      HEAP32[i13 + ((i10 & 65535) << 3) + 4 >> 2] = (HEAP32[i8 + ((i11 & 65535) << 3) + 4 >> 2] | 0) + i12;
      i11 = 774;
      break L30;
     } else {
      i6 = HEAP32[i23 + 88 >> 2] | 0;
      i7 = HEAP32[i23 + 52 >> 2] | 0;
      i8 = HEAP32[i23 + 124 >> 2] | 0;
      HEAP32[i8 + ((i10 & 65535) << 3) >> 2] = ((HEAP32[i6 + ((i12 & 65535) << 3) >> 2] | 0) + (HEAP32[i6 + ((i11 & 65535) << 3) >> 2] | 0) + (HEAP32[i7 + (i13 << 3) >> 2] | 0) + (HEAP32[i7 + (i21 << 3) >> 2] | 0) | 0) / 4 | 0;
      HEAP32[i8 + ((i10 & 65535) << 3) + 4 >> 2] = ((HEAP32[i6 + ((i12 & 65535) << 3) + 4 >> 2] | 0) + (HEAP32[i6 + ((i11 & 65535) << 3) + 4 >> 2] | 0) + (HEAP32[i7 + (i13 << 3) + 4 >> 2] | 0) + (HEAP32[i7 + (i21 << 3) + 4 >> 2] | 0) | 0) / 4 | 0;
      i11 = 774;
      break L30;
     }
    }
    if (!(HEAP8[i23 + 561 >> 0] | 0)) i11 = 774; else {
     i11 = 53;
     break L12;
    }
    break;
   }
  case 16:
   {
    HEAP16[i23 + 284 >> 1] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 17:
   {
    HEAP16[i23 + 286 >> 1] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 18:
   {
    HEAP16[i23 + 288 >> 1] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 19:
   {
    switch (HEAP32[i10 >> 2] | 0) {
    case 0:
     {
      i1 = i23 + 36 | 0;
      i2 = i23 + 180 | 0;
      i3 = i1 + 36 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      break;
     }
    case 1:
     {
      i1 = i23 + 36 | 0;
      i2 = i23 + 144 | 0;
      i3 = i1 + 36 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      break;
     }
    default:
     if (!(HEAP8[i23 + 561 >> 0] | 0)) {
      i11 = 774;
      break L30;
     } else {
      i11 = 64;
      break L12;
     }
    }
    HEAP16[i23 + 344 >> 1] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 20:
   {
    switch (HEAP32[i10 >> 2] | 0) {
    case 0:
     {
      i1 = i23 + 72 | 0;
      i2 = i23 + 180 | 0;
      i3 = i1 + 36 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      break;
     }
    case 1:
     {
      i1 = i23 + 72 | 0;
      i2 = i23 + 144 | 0;
      i3 = i1 + 36 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      break;
     }
    default:
     if (!(HEAP8[i23 + 561 >> 0] | 0)) {
      i11 = 774;
      break L30;
     } else {
      i11 = 70;
      break L12;
     }
    }
    HEAP16[i23 + 346 >> 1] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 21:
   {
    switch (HEAP32[i10 >> 2] | 0) {
    case 0:
     {
      i1 = i23 + 108 | 0;
      i2 = i23 + 180 | 0;
      i3 = i1 + 36 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      break;
     }
    case 1:
     {
      i1 = i23 + 108 | 0;
      i2 = i23 + 144 | 0;
      i3 = i1 + 36 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      break;
     }
    default:
     if (!(HEAP8[i23 + 561 >> 0] | 0)) {
      i11 = 774;
      break L30;
     } else {
      i11 = 76;
      break L12;
     }
    }
    HEAP16[i23 + 348 >> 1] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 22:
   {
    switch (HEAP32[i10 >> 2] | 0) {
    case 0:
     {
      i1 = i23 + 36 | 0;
      i2 = i23 + 180 | 0;
      i3 = i1 + 36 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      break;
     }
    case 1:
     {
      i1 = i23 + 36 | 0;
      i2 = i23 + 144 | 0;
      i3 = i1 + 36 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      break;
     }
    default:
     if (!(HEAP8[i23 + 561 >> 0] | 0)) {
      i11 = 774;
      break L30;
     } else {
      i11 = 82;
      break L12;
     }
    }
    i1 = i23 + 72 | 0;
    i2 = i23 + 36 | 0;
    i3 = i1 + 36 | 0;
    do {
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
    } while ((i1 | 0) < (i3 | 0));
    i1 = i23 + 108 | 0;
    i2 = i23 + 36 | 0;
    i3 = i1 + 36 | 0;
    do {
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
    } while ((i1 | 0) < (i3 | 0));
    i11 = HEAP32[i10 >> 2] & 65535;
    HEAP16[i23 + 344 >> 1] = i11;
    HEAP16[i23 + 346 >> 1] = i11;
    HEAP16[i23 + 348 >> 1] = i11;
    i11 = 774;
    break;
   }
  case 23:
   {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i1 | 0) < 0) {
     i11 = 85;
     break L12;
    }
    HEAP32[i23 + 304 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 24:
   {
    HEAP32[i23 + 312 >> 2] = 1;
    HEAP32[i15 >> 2] = 50;
    i11 = 774;
    break;
   }
  case 25:
   {
    HEAP32[i23 + 312 >> 2] = 0;
    HEAP32[i15 >> 2] = 53;
    i11 = 774;
    break;
   }
  case 26:
   {
    HEAP32[i23 + 308 >> 2] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 27:
   {
    i4 = HEAP32[i23 + 364 >> 2] | 0;
    i1 = HEAP32[i23 + 360 >> 2] | 0;
    i9 = 1;
    while (1) {
     L211 : while (1) {
      i1 = i2 + i1 | 0;
      HEAP32[i23 + 360 >> 2] = i1;
      if ((i1 | 0) >= (i4 | 0)) {
       i11 = 97;
       break L12;
      }
      i3 = HEAP8[i12 + i1 >> 0] | 0;
      HEAP8[i23 + 368 >> 0] = i3;
      i2 = HEAP8[322531 + (i3 & 255) >> 0] | 0;
      HEAP32[i23 + 372 >> 2] = i2;
      if ((i3 & 254 | 0) == 64) {
       if ((i1 + 1 | 0) >= (i4 | 0)) {
        i11 = 97;
        break L12;
       }
       i2 = 2 - (Math_imul(HEAPU8[i12 + (i1 + 1) >> 0] | 0, i2) | 0) | 0;
       HEAP32[i23 + 372 >> 2] = i2;
      }
      if ((i2 + i1 | 0) > (i4 | 0)) {
       i11 = 97;
       break L12;
      }
      switch (i3 & 255 | 0) {
      case 88:
       {
        i11 = 99;
        break L211;
       }
      case 89:
       {
        i11 = 100;
        break L211;
       }
      default:
       {}
      }
     }
     if ((i11 | 0) == 99) i3 = i9 + 1 | 0; else if ((i11 | 0) == 100) i3 = i9 + -1 | 0;
     if (!i3) {
      i11 = 774;
      break;
     } else i9 = i3;
    }
    break;
   }
  case 28:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if (!(i2 | i1)) HEAP32[i23 + 12 >> 2] = 132;
    i1 = (HEAP32[i23 + 360 >> 2] | 0) + i2 | 0;
    HEAP32[i23 + 360 >> 2] = i1;
    if ((i1 | 0) >= 0) {
     i13 = HEAP32[i23 + 428 >> 2] | 0;
     if ((i13 | 0) > 0 ? (i1 | 0) > (HEAP32[(HEAP32[i23 + 436 >> 2] | 0) + ((i13 + -1 | 0) * 20 | 0) + 16 >> 2] | 0) : 0) i11 = 107;
    } else i11 = 107;
    if ((i11 | 0) == 107) HEAP32[i23 + 12 >> 2] = 132;
    HEAP8[i23 + 376 >> 0] = 0;
    i11 = 774;
    break;
   }
  case 29:
   {
    HEAP32[i23 + 320 >> 2] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 30:
   {
    HEAP32[i23 + 324 >> 2] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 31:
   {
    HEAP32[i23 + 328 >> 2] = _FT_MulFix(HEAP32[i10 >> 2] | 0, HEAP32[i23 + 260 >> 2] | 0) | 0;
    i11 = 774;
    break;
   }
  case 32:
   {
    HEAP32[i8 + (i1 + 1 << 2) >> 2] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 127:
  case 126:
  case 89:
  case 33:
   {
    i11 = 790;
    break;
   }
  case 34:
   {
    HEAP32[i23 + 32 >> 2] = 0;
    i11 = 774;
    break;
   }
  case 35:
   {
    i13 = HEAP32[i10 >> 2] | 0;
    i11 = i8 + (i1 + 1 << 2) | 0;
    HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i11 >> 2] = i13;
    i11 = 774;
    break;
   }
  case 36:
   {
    HEAP32[i10 >> 2] = HEAP32[i23 + 16 >> 2];
    i11 = 774;
    break;
   }
  case 37:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if (!((i2 | 0) < 1 | (i1 | 0) < (i2 | 0))) {
     HEAP32[i10 >> 2] = HEAP32[i8 + (i1 - i2 << 2) >> 2];
     i11 = 774;
     break L30;
    }
    if (HEAP8[i23 + 561 >> 0] | 0) HEAP32[i23 + 12 >> 2] = 134;
    HEAP32[i10 >> 2] = 0;
    i11 = 774;
    break;
   }
  case 38:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if ((i2 | 0) < 1 | (i1 | 0) < (i2 | 0)) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 123;
     break L12;
    } else {
     i13 = i1 - i2 | 0;
     i11 = HEAP32[i8 + (i13 << 2) >> 2] | 0;
     _memmove(i8 + (i13 << 2) | 0, i8 + (i13 + 1 << 2) | 0, (i2 << 2) + -4 | 0) | 0;
     HEAP32[(HEAP32[i23 + 24 >> 2] | 0) + ((HEAP32[i23 + 28 >> 2] | 0) + -1 << 2) >> 2] = i11;
     i11 = 774;
     break L30;
    }
   }
  case 39:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    i1 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    if ((i2 & 65535) >>> 0 < (HEAPU16[i23 + 80 >> 1] | 0) >>> 0 ? (i1 & 65535) >>> 0 < (HEAPU16[i23 + 44 >> 1] | 0) >>> 0 : 0) {
     i13 = HEAP32[i23 + 52 >> 2] | 0;
     i11 = HEAP32[i23 + 88 >> 2] | 0;
     i11 = (FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, (HEAP32[i13 + ((i1 & 65535) << 3) >> 2] | 0) - (HEAP32[i11 + ((i2 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i13 + ((i1 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i11 + ((i2 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0) / 2 | 0;
     FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 72 | 0, i2 & 65535, i11);
     FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 36 | 0, i1 & 65535, 0 - i11 | 0);
     i11 = 774;
     break L30;
    }
    if (!(HEAP8[i23 + 561 >> 0] | 0)) i11 = 774; else {
     i11 = 128;
     break L12;
    }
    break;
   }
  case 40:
   {
    i1 = HEAP32[i23 + 416 >> 2] | 0;
    i3 = HEAP32[i23 + 408 >> 2] | 0;
    L257 : do if ((i3 | 0) > 0) {
     i2 = i1;
     while (1) {
      if (i7 << 24 >> 24 == (HEAP32[i2 + 12 >> 2] & 255) << 24 >> 24 ? (HEAP8[i2 + 16 >> 0] | 0) != 0 : 0) break;
      i2 = i2 + 20 | 0;
      if (i2 >>> 0 >= (i1 + (i3 * 20 | 0) | 0) >>> 0) break L257;
     }
     i1 = HEAP32[i23 + 428 >> 2] | 0;
     if ((i1 | 0) >= (HEAP32[i23 + 432 >> 2] | 0)) {
      i11 = 134;
      break L12;
     }
     i13 = HEAP32[i23 + 436 >> 2] | 0;
     HEAP32[i23 + 428 >> 2] = i1 + 1;
     HEAP32[i13 + (i1 * 20 | 0) >> 2] = HEAP32[i23 + 352 >> 2];
     HEAP32[i13 + (i1 * 20 | 0) + 4 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + 1;
     HEAP32[i13 + (i1 * 20 | 0) + 8 >> 2] = 1;
     i4 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i13 + (i1 * 20 | 0) + 12 >> 2] = i4;
     HEAP32[i13 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i2 + 8 >> 2];
     i1 = HEAP32[i2 >> 2] | 0;
     do if ((i1 + -1 | 0) >>> 0 <= 2) {
      i2 = HEAP32[i23 + 444 + (i1 + -1 << 3) >> 2] | 0;
      if (!i2) {
       HEAP32[i23 + 12 >> 2] = 138;
       break;
      }
      i3 = HEAP32[i23 + 444 + (i1 + -1 << 3) + 4 >> 2] | 0;
      if (i3 >>> 0 < i4 >>> 0) {
       HEAP32[i23 + 12 >> 2] = 131;
       break;
      } else {
       HEAP32[i23 + 356 >> 2] = i2;
       HEAP32[i23 + 364 >> 2] = i3;
       HEAP32[i23 + 360 >> 2] = i4;
       HEAP32[i23 + 352 >> 2] = i1;
       break;
      }
     } else HEAP32[i23 + 12 >> 2] = 132; while (0);
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
     break L30;
    } while (0);
    HEAP32[i23 + 12 >> 2] = 128;
    i2 = i3;
    i11 = 776;
    break;
   }
  case 41:
   {
    i2 = HEAP32[i10 >> 2] & 65535;
    if (i2 >>> 0 >= (HEAPU16[i23 + 44 >> 1] | 0) >>> 0) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 147;
     break L12;
    }
    i1 = (HEAP16[i23 + 298 >> 1] | 0) == 0 ? -1 : -9;
    if (HEAP16[i23 + 300 >> 1] | 0) i1 = i1 & 239;
    i11 = (HEAP32[i23 + 60 >> 2] | 0) + i2 | 0;
    HEAP8[i11 >> 0] = HEAP8[i11 >> 0] & i1;
    i11 = 774;
    break;
   }
  case 42:
   {
    i2 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    i1 = (HEAP32[i23 + 420 >> 2] | 0) + 1 | 0;
    if (i2 >>> 0 >= i1 >>> 0) {
     i11 = 170;
     break L12;
    }
    i3 = HEAP32[i23 + 404 >> 2] | 0;
    i4 = HEAP32[i23 + 396 >> 2] | 0;
    if ((i1 | 0) == (i4 | 0) ? (HEAP32[i3 + (i2 * 20 | 0) + 12 >> 2] | 0) == (i2 | 0) : 0) i2 = i3 + (i2 * 20 | 0) | 0; else {
     L289 : do if ((i4 | 0) > 0) {
      i1 = i3;
      do {
       if ((HEAP32[i1 + 12 >> 2] | 0) == (i2 | 0)) break L289;
       i1 = i1 + 20 | 0;
      } while (i1 >>> 0 < (i3 + (i4 * 20 | 0) | 0) >>> 0);
     } else i1 = i3; while (0);
     if ((i1 | 0) == (i3 + (i4 * 20 | 0) | 0)) {
      i11 = 170;
      break L12;
     } else i2 = i1;
    }
    if (!(HEAP8[i2 + 16 >> 0] | 0)) {
     i11 = 170;
     break L12;
    }
    i1 = HEAP32[i23 + 428 >> 2] | 0;
    if ((i1 | 0) >= (HEAP32[i23 + 432 >> 2] | 0)) {
     i11 = 160;
     break L12;
    }
    if ((HEAP32[i10 >> 2] | 0) > 0) {
     i13 = HEAP32[i23 + 436 >> 2] | 0;
     HEAP32[i13 + (i1 * 20 | 0) >> 2] = HEAP32[i23 + 352 >> 2];
     HEAP32[i13 + (i1 * 20 | 0) + 4 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + 1;
     HEAP32[i13 + (i1 * 20 | 0) + 8 >> 2] = HEAP32[i10 >> 2];
     i4 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i13 + (i1 * 20 | 0) + 12 >> 2] = i4;
     HEAP32[i13 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i23 + 428 >> 2] = i1 + 1;
     i1 = HEAP32[i2 >> 2] | 0;
     do if ((i1 + -1 | 0) >>> 0 <= 2) {
      i2 = HEAP32[i23 + 444 + (i1 + -1 << 3) >> 2] | 0;
      if (!i2) {
       HEAP32[i23 + 12 >> 2] = 138;
       break;
      }
      i3 = HEAP32[i23 + 444 + (i1 + -1 << 3) + 4 >> 2] | 0;
      if (i3 >>> 0 < i4 >>> 0) {
       HEAP32[i23 + 12 >> 2] = 131;
       break;
      } else {
       HEAP32[i23 + 356 >> 2] = i2;
       HEAP32[i23 + 364 >> 2] = i3;
       HEAP32[i23 + 360 >> 2] = i4;
       HEAP32[i23 + 352 >> 2] = i1;
       break;
      }
     } else HEAP32[i23 + 12 >> 2] = 132; while (0);
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
    } else i11 = 774;
    break;
   }
  case 43:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    i1 = (HEAP32[i23 + 420 >> 2] | 0) + 1 | 0;
    if (i1 >>> 0 <= i2 >>> 0) {
     i11 = 189;
     break L12;
    }
    i3 = HEAP32[i23 + 404 >> 2] | 0;
    i4 = HEAP32[i23 + 396 >> 2] | 0;
    if ((i1 | 0) == (i4 | 0) ? (HEAP32[i3 + (i2 * 20 | 0) + 12 >> 2] | 0) == (i2 | 0) : 0) i2 = i3 + (i2 * 20 | 0) | 0; else {
     L314 : do if ((i4 | 0) > 0) {
      i1 = i3;
      do {
       if ((HEAP32[i1 + 12 >> 2] | 0) == (i2 | 0)) break L314;
       i1 = i1 + 20 | 0;
      } while (i1 >>> 0 < (i3 + (i4 * 20 | 0) | 0) >>> 0);
     } else i1 = i3; while (0);
     if ((i1 | 0) == (i3 + (i4 * 20 | 0) | 0)) {
      i11 = 189;
      break L12;
     } else i2 = i1;
    }
    if (!(HEAP8[i2 + 16 >> 0] | 0)) {
     i11 = 189;
     break L12;
    }
    i1 = HEAP32[i23 + 428 >> 2] | 0;
    if ((i1 | 0) >= (HEAP32[i23 + 432 >> 2] | 0)) {
     i11 = 180;
     break L12;
    }
    i13 = HEAP32[i23 + 436 >> 2] | 0;
    HEAP32[i13 + (i1 * 20 | 0) >> 2] = HEAP32[i23 + 352 >> 2];
    HEAP32[i13 + (i1 * 20 | 0) + 4 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + 1;
    HEAP32[i13 + (i1 * 20 | 0) + 8 >> 2] = 1;
    i4 = HEAP32[i2 + 4 >> 2] | 0;
    HEAP32[i13 + (i1 * 20 | 0) + 12 >> 2] = i4;
    HEAP32[i13 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i23 + 428 >> 2] = i1 + 1;
    i1 = HEAP32[i2 >> 2] | 0;
    do if ((i1 + -1 | 0) >>> 0 <= 2) {
     i2 = HEAP32[i23 + 444 + (i1 + -1 << 3) >> 2] | 0;
     if (!i2) {
      HEAP32[i23 + 12 >> 2] = 138;
      break;
     }
     i3 = HEAP32[i23 + 444 + (i1 + -1 << 3) + 4 >> 2] | 0;
     if (i3 >>> 0 < i4 >>> 0) {
      HEAP32[i23 + 12 >> 2] = 131;
      break;
     } else {
      HEAP32[i23 + 356 >> 2] = i2;
      HEAP32[i23 + 364 >> 2] = i3;
      HEAP32[i23 + 360 >> 2] = i4;
      HEAP32[i23 + 352 >> 2] = i1;
      break;
     }
    } else HEAP32[i23 + 12 >> 2] = 132; while (0);
    HEAP8[i23 + 376 >> 0] = 0;
    i11 = 774;
    break;
   }
  case 44:
   {
    i5 = HEAP32[i10 >> 2] | 0;
    i3 = HEAP32[i23 + 404 >> 2] | 0;
    i4 = HEAP32[i23 + 396 >> 2] | 0;
    L333 : do if ((i4 | 0) > 0) {
     i1 = i3;
     while (1) {
      if ((HEAP32[i1 + 12 >> 2] | 0) == (i5 | 0)) {
       i9 = i1;
       break L333;
      }
      i1 = i1 + 20 | 0;
      if (i1 >>> 0 >= (i3 + (i4 * 20 | 0) | 0) >>> 0) {
       i9 = i1;
       break;
      }
     }
    } else i9 = i3; while (0);
    if ((i9 | 0) == (i3 + (i4 * 20 | 0) | 0)) {
     if (i4 >>> 0 >= (HEAP32[i23 + 400 >> 2] | 0) >>> 0) {
      i11 = 195;
      break L12;
     }
     HEAP32[i23 + 396 >> 2] = i4 + 1;
    }
    if (i5 >>> 0 > 65535) {
     i11 = 198;
     break L12;
    }
    HEAP32[i9 >> 2] = HEAP32[i23 + 352 >> 2];
    HEAP32[i9 + 12 >> 2] = i5 & 65535;
    i1 = HEAP32[i23 + 360 >> 2] | 0;
    HEAP32[i9 + 4 >> 2] = i1 + 1;
    HEAP8[i9 + 16 >> 0] = 1;
    if ((HEAP32[i23 + 420 >> 2] | 0) >>> 0 < i5 >>> 0) HEAP32[i23 + 420 >> 2] = i5 & 65535;
    i4 = HEAP32[i23 + 364 >> 2] | 0;
    L346 : while (1) {
     i1 = i2 + i1 | 0;
     HEAP32[i23 + 360 >> 2] = i1;
     if ((i1 | 0) >= (i4 | 0)) {
      i11 = 207;
      break L12;
     }
     i3 = HEAP8[i12 + i1 >> 0] | 0;
     HEAP8[i23 + 368 >> 0] = i3;
     i2 = HEAP8[322531 + (i3 & 255) >> 0] | 0;
     HEAP32[i23 + 372 >> 2] = i2;
     if ((i3 & 254 | 0) == 64) {
      if ((i1 + 1 | 0) >= (i4 | 0)) {
       i11 = 207;
       break L12;
      }
      i2 = 2 - (Math_imul(HEAPU8[i12 + (i1 + 1) >> 0] | 0, i2) | 0) | 0;
      HEAP32[i23 + 372 >> 2] = i2;
     }
     if ((i2 + i1 | 0) > (i4 | 0)) {
      i11 = 207;
      break L12;
     }
     switch (i3 & 255 | 0) {
     case 44:
     case 137:
      {
       i11 = 209;
       break L12;
      }
     case 45:
      break L346;
     default:
      {}
     }
    }
    HEAP32[i9 + 8 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 45:
   {
    i1 = HEAP32[i23 + 428 >> 2] | 0;
    if ((i1 | 0) < 1) {
     i11 = 212;
     break L12;
    }
    HEAP32[i23 + 428 >> 2] = i1 + -1;
    i2 = HEAP32[i23 + 436 >> 2] | 0;
    i13 = HEAP32[i2 + ((i1 + -1 | 0) * 20 | 0) + 8 >> 2] | 0;
    HEAP32[i2 + ((i1 + -1 | 0) * 20 | 0) + 8 >> 2] = i13 + -1;
    HEAP8[i23 + 376 >> 0] = 0;
    if ((i13 | 0) > 1) {
     HEAP32[i23 + 428 >> 2] = i1;
     HEAP32[i23 + 360 >> 2] = HEAP32[i2 + ((i1 + -1 | 0) * 20 | 0) + 12 >> 2];
     i11 = 774;
     break L30;
    }
    i4 = HEAP32[i2 + ((i1 + -1 | 0) * 20 | 0) >> 2] | 0;
    i1 = HEAP32[i2 + ((i1 + -1 | 0) * 20 | 0) + 4 >> 2] | 0;
    if ((i4 + -1 | 0) >>> 0 > 2) {
     i11 = 216;
     break L12;
    }
    i2 = HEAP32[i23 + 444 + (i4 + -1 << 3) >> 2] | 0;
    if (!i2) {
     i11 = 218;
     break L12;
    }
    i3 = HEAP32[i23 + 444 + (i4 + -1 << 3) + 4 >> 2] | 0;
    if (i3 >>> 0 < i1 >>> 0) {
     i11 = 220;
     break L12;
    }
    HEAP32[i23 + 356 >> 2] = i2;
    HEAP32[i23 + 364 >> 2] = i3;
    HEAP32[i23 + 360 >> 2] = i1;
    HEAP32[i23 + 352 >> 2] = i4;
    i11 = 774;
    break;
   }
  case 47:
  case 46:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if ((i2 & 65535) >>> 0 >= (HEAPU16[i23 + 44 >> 1] | 0) >>> 0) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 224;
     break L12;
    }
    if (!(i7 & 1)) i1 = 0; else {
     i1 = HEAP32[i23 + 52 >> 2] | 0;
     i1 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, HEAP32[i1 + ((i2 & 65535) << 3) >> 2] | 0, HEAP32[i1 + ((i2 & 65535) << 3) + 4 >> 2] | 0) | 0;
     i1 = (FUNCTION_TABLE_iiii[HEAP32[i15 >> 2] & 127](i23, i1, HEAP32[i23 + 264 >> 2] | 0) | 0) - i1 | 0;
    }
    FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 36 | 0, i2 & 65535, i1);
    HEAP16[i23 + 284 >> 1] = i2;
    HEAP16[i23 + 286 >> 1] = i2;
    i11 = 774;
    break;
   }
  case 49:
  case 48:
   {
    L371 : do if (HEAP16[i23 + 154 >> 1] | 0) {
     if (!(i7 & 1)) {
      i1 = (HEAP32[i23 + 156 >> 2] | 0) + 4 | 0;
      HEAP32[i24 + 8 >> 2] = i1;
      i2 = (HEAP32[i23 + 160 >> 2] | 0) + 4 | 0;
      HEAP32[i24 + 8 + 4 >> 2] = i2;
      HEAP32[i24 + 8 + 8 >> 2] = (HEAP32[i23 + 164 >> 2] | 0) + 4;
      i10 = 16;
     } else {
      i1 = HEAP32[i23 + 156 >> 2] | 0;
      HEAP32[i24 + 8 >> 2] = i1;
      i2 = HEAP32[i23 + 160 >> 2] | 0;
      HEAP32[i24 + 8 + 4 >> 2] = i2;
      HEAP32[i24 + 8 + 8 >> 2] = HEAP32[i23 + 164 >> 2];
      i10 = 8;
     }
     i5 = HEAP16[i23 + 152 >> 1] | 0;
     HEAP32[i24 + 8 + 12 >> 2] = i5 & 65535;
     i3 = 0;
     i4 = 0;
     while (1) {
      i13 = (HEAPU16[(HEAP32[i23 + 172 >> 2] | 0) + (i3 << 16 >> 16 << 1) >> 1] | 0) - (HEAPU16[i23 + 176 >> 1] | 0) | 0;
      i8 = i5 & 65535;
      i8 = i13 >>> 0 < i8 >>> 0 ? i13 : i8 + -1 | 0;
      L379 : do if (i4 >>> 0 <= i8 >>> 0) {
       i6 = HEAP32[i23 + 168 >> 2] | 0;
       i5 = i4;
       while (1) {
        if ((HEAP8[i6 + i5 >> 0] & i10) << 24 >> 24) break;
        i5 = i5 + 1 | 0;
        if (i5 >>> 0 > i8 >>> 0) {
         i4 = i5;
         break L379;
        }
       }
       i6 = i5;
       L385 : while (1) {
        i7 = i6;
        while (1) {
         i9 = i7 + 1 | 0;
         if (i9 >>> 0 > i8 >>> 0) break L385;
         if (!((HEAP8[(HEAP32[i23 + 168 >> 2] | 0) + i9 >> 0] & i10) << 24 >> 24)) i7 = i9; else break;
        }
        __iup_worker_interpolate(i24 + 8 | 0, i6 + 1 | 0, i7, i6, i9);
        i6 = i9;
       }
       if ((i6 | 0) != (i5 | 0)) {
        __iup_worker_interpolate(i24 + 8 | 0, i6 + 1 & 65535, i8, i6, i5);
        if (!i5) {
         i4 = i9;
         break;
        }
        __iup_worker_interpolate(i24 + 8 | 0, i4, i5 + -1 | 0, i6, i5);
        i4 = i9;
        break;
       }
       i6 = HEAP32[i2 + (i5 << 3) >> 2] | 0;
       i7 = HEAP32[i1 + (i5 << 3) >> 2] | 0;
       if ((i6 | 0) != (i7 | 0)) {
        if (i4 >>> 0 < i5 >>> 0) do {
         i13 = i2 + (i4 << 3) | 0;
         HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (i6 - i7);
         i4 = i4 + 1 | 0;
        } while ((i4 | 0) != (i5 | 0));
        if ((i5 + 1 | 0) >>> 0 <= i8 >>> 0) {
         i4 = i5 + 1 | 0;
         do {
          i13 = i2 + (i4 << 3) | 0;
          HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + (i6 - i7);
          i4 = i4 + 1 | 0;
         } while (i4 >>> 0 <= i8 >>> 0);
         i4 = i9;
        } else i4 = i9;
       } else i4 = i9;
      } while (0);
      i3 = i3 + 1 << 16 >> 16;
      if (i3 << 16 >> 16 >= (HEAP16[i23 + 154 >> 1] | 0)) break L371;
      i5 = HEAP16[i23 + 152 >> 1] | 0;
     }
    } while (0);
    i11 = 774;
    break;
   }
  case 51:
  case 50:
   {
    L407 : do if ((HEAP32[i23 + 16 >> 2] | 0) < (HEAP32[i23 + 304 >> 2] | 0)) if (!(HEAP8[i23 + 561 >> 0] | 0)) i11 = 267; else {
     HEAP32[i23 + 12 >> 2] = 134;
     i11 = 267;
    } else if (!((_Compute_Point_Displacement(i23, i24 + 4 | 0, i24, i24 + 8 | 0, i24 + 44 | 0) | 0) << 24 >> 24)) if ((HEAP32[i23 + 304 >> 2] | 0) > 0) {
     i1 = HEAP32[i24 >> 2] | 0;
     i2 = HEAP32[i24 + 4 >> 2] | 0;
     while (1) {
      i3 = (HEAP32[i23 + 28 >> 2] | 0) + -1 | 0;
      HEAP32[i23 + 28 >> 2] = i3;
      i3 = HEAP32[(HEAP32[i23 + 24 >> 2] | 0) + (i3 << 2) >> 2] & 65535;
      if (i3 >>> 0 < (HEAPU16[i23 + 116 >> 1] | 0) >>> 0) {
       if (HEAP16[i23 + 298 >> 1] | 0) {
        i13 = (HEAP32[i23 + 124 >> 2] | 0) + (i3 << 3) | 0;
        HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i2;
        i13 = (HEAP32[i23 + 132 >> 2] | 0) + i3 | 0;
        HEAP8[i13 >> 0] = HEAPU8[i13 >> 0] | 8;
       }
       if (HEAP16[i23 + 300 >> 1] | 0) {
        i13 = (HEAP32[i23 + 124 >> 2] | 0) + (i3 << 3) + 4 | 0;
        HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i1;
        i13 = (HEAP32[i23 + 132 >> 2] | 0) + i3 | 0;
        HEAP8[i13 >> 0] = HEAPU8[i13 >> 0] | 16;
       }
      } else if (HEAP8[i23 + 561 >> 0] | 0) break;
      i13 = HEAP32[i23 + 304 >> 2] | 0;
      HEAP32[i23 + 304 >> 2] = i13 + -1;
      if ((i13 | 0) <= 1) {
       i11 = 267;
       break L407;
      }
     }
     HEAP32[i23 + 12 >> 2] = 134;
    } else i11 = 267; while (0);
    if ((i11 | 0) == 267) {
     HEAP32[i23 + 304 >> 2] = 1;
     HEAP32[i23 + 32 >> 2] = HEAP32[i23 + 28 >> 2];
    }
    i11 = 774;
    break;
   }
  case 53:
  case 52:
   {
    if (!(HEAP16[i23 + 348 >> 1] | 0)) i2 = 1; else i2 = HEAP16[i23 + 118 >> 1] | 0;
    i1 = HEAP32[i10 >> 2] << 16 >> 16;
    if (i1 >>> 0 < i2 << 16 >> 16 >>> 0) {
     if (!((_Compute_Point_Displacement(i23, i24 + 4 | 0, i24, i24 + 8 | 0, i24 + 44 | 0) | 0) << 24 >> 24)) {
      if (!i1) i2 = 0; else i2 = (HEAPU16[(HEAP32[i23 + 136 >> 2] | 0) + (i1 + -1 << 1) >> 1] | 0) + 1 - (HEAPU16[i23 + 140 >> 1] | 0) & 65535;
      if (!(HEAP16[i23 + 348 >> 1] | 0)) i7 = HEAP16[i23 + 116 >> 1] | 0; else i7 = (HEAPU16[(HEAP32[i23 + 136 >> 2] | 0) + (i1 << 1) >> 1] | 0) + 1 - (HEAPU16[i23 + 140 >> 1] | 0) & 65535;
      if ((i2 & 65535) < (i7 & 65535)) {
       i3 = HEAP32[i24 + 8 + 16 >> 2] | 0;
       i4 = HEAP32[i24 >> 2] | 0;
       i5 = HEAP32[i24 + 4 >> 2] | 0;
       i6 = HEAPU16[i24 + 44 >> 1] | 0;
       i2 = i2 & 65535;
       do {
        i1 = HEAP32[i23 + 124 >> 2] | 0;
        if (!((i6 | 0) == (i2 | 0) & (i3 | 0) == (i1 | 0))) {
         if (HEAP16[i23 + 298 >> 1] | 0) {
          i13 = i1 + (i2 << 3) | 0;
          HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i5;
          i13 = (HEAP32[i23 + 132 >> 2] | 0) + i2 | 0;
          HEAP8[i13 >> 0] = HEAPU8[i13 >> 0] | 8;
         }
         if (HEAP16[i23 + 300 >> 1] | 0) {
          i13 = (HEAP32[i23 + 124 >> 2] | 0) + (i2 << 3) + 4 | 0;
          HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i4;
          i13 = (HEAP32[i23 + 132 >> 2] | 0) + i2 | 0;
          HEAP8[i13 >> 0] = HEAPU8[i13 >> 0] | 16;
         }
        }
        i2 = i2 + 1 | 0;
       } while ((i2 & 65535) << 16 >> 16 != i7 << 16 >> 16);
      }
     }
    } else if (HEAP8[i23 + 561 >> 0] | 0) HEAP32[i23 + 12 >> 2] = 134;
    i11 = 774;
    break;
   }
  case 55:
  case 54:
   {
    L455 : do if ((HEAP32[i10 >> 2] | 0) >>> 0 > 1) {
     if (HEAP8[i23 + 561 >> 0] | 0) HEAP32[i23 + 12 >> 2] = 134;
    } else if (!((_Compute_Point_Displacement(i23, i24 + 4 | 0, i24, i24 + 8 | 0, i24 + 44 | 0) | 0) << 24 >> 24)) {
     switch (HEAP16[i23 + 348 >> 1] | 0) {
     case 0:
      {
       i7 = HEAP16[i23 + 116 >> 1] | 0;
       break;
      }
     case 1:
      {
       i1 = HEAP16[i23 + 118 >> 1] | 0;
       if (i1 << 16 >> 16 <= 0) break L455;
       i7 = (HEAPU16[(HEAP32[i23 + 136 >> 2] | 0) + ((i1 << 16 >> 16) + -1 << 1) >> 1] | 0) + 1 & 65535;
       break;
      }
     default:
      break L455;
     }
     if (i7 << 16 >> 16) {
      i3 = HEAP32[i24 + 8 + 16 >> 2] | 0;
      i4 = HEAP32[i23 + 124 >> 2] | 0;
      i5 = HEAP32[i24 >> 2] | 0;
      i6 = HEAP32[i24 + 4 >> 2] | 0;
      if ((i3 | 0) != (i4 | 0)) {
       i1 = (HEAP16[i23 + 298 >> 1] | 0) == 0;
       i2 = (HEAP16[i23 + 300 >> 1] | 0) == 0;
       i3 = 0;
       while (1) {
        if (!i1) {
         i13 = i4 + (i3 << 3) | 0;
         HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i6;
        }
        if (!i2) {
         i13 = i4 + (i3 << 3) + 4 | 0;
         HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i5;
        }
        i3 = i3 + 1 | 0;
        if ((i3 & 65535) << 16 >> 16 == i7 << 16 >> 16) break L455;
       }
      }
      i1 = HEAPU16[i24 + 44 >> 1] | 0;
      i2 = 0;
      do {
       if ((i1 | 0) != (i2 | 0)) {
        if (HEAP16[i23 + 298 >> 1] | 0) {
         i13 = i3 + (i2 << 3) | 0;
         HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i6;
        }
        if (HEAP16[i23 + 300 >> 1] | 0) {
         i13 = i3 + (i2 << 3) + 4 | 0;
         HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i5;
        }
       }
       i2 = i2 + 1 | 0;
      } while ((i2 & 65535) << 16 >> 16 != i7 << 16 >> 16);
     }
    } while (0);
    i11 = 774;
    break;
   }
  case 56:
   {
    i2 = HEAP32[i23 + 304 >> 2] | 0;
    L488 : do if ((HEAP32[i23 + 16 >> 2] | 0) < (i2 + 1 | 0)) {
     if (HEAP8[i23 + 561 >> 0] | 0) HEAP32[i23 + 12 >> 2] = 134;
    } else {
     i12 = HEAP32[i10 >> 2] | 0;
     i10 = HEAP16[i23 + 298 >> 1] | 0;
     i3 = (i12 | 0) < 0 ? 0 - i12 | 0 : i12;
     i4 = i10 << 16 >> 16 < 0 ? 0 - (i10 << 16 >> 16) | 0 : i10 << 16 >> 16;
     i11 = Math_imul(i3 >>> 16, i4) | 0;
     i4 = (i11 << 16 | 8192) + (Math_imul(i3 & 65535, i4) | 0) | 0;
     i4 = (i10 << 16 >> 16 ^ i12 | 0) > -1 ? (i4 >>> 0 < (i11 << 16 | 8192) >>> 0 & 1) + (i11 >>> 16) << 18 | i4 >>> 14 : 0 - ((i4 >>> 0 < (i11 << 16 | 8192) >>> 0 & 1) + (i11 >>> 16) << 18 | i4 >>> 14) | 0;
     i11 = HEAP16[i23 + 300 >> 1] | 0;
     i10 = i11 << 16 >> 16 < 0 ? 0 - (i11 << 16 >> 16) | 0 : i11 << 16 >> 16;
     i13 = Math_imul(i10, i3 >>> 16) | 0;
     i3 = (i13 << 16 | 8192) + (Math_imul(i10, i3 & 65535) | 0) | 0;
     i3 = (i11 << 16 >> 16 ^ i12 | 0) > -1 ? (i3 >>> 0 < (i13 << 16 | 8192) >>> 0 & 1) + (i13 >>> 16) << 18 | i3 >>> 14 : 0 - ((i3 >>> 0 < (i13 << 16 | 8192) >>> 0 & 1) + (i13 >>> 16) << 18 | i3 >>> 14) | 0;
     if ((i2 | 0) > 0) {
      i2 = i8;
      while (1) {
       i1 = i1 + -1 | 0;
       HEAP32[i23 + 28 >> 2] = i1;
       i1 = HEAP32[i2 + (i1 << 2) >> 2] & 65535;
       if (i1 >>> 0 < (HEAPU16[i23 + 116 >> 1] | 0) >>> 0) {
        if (HEAP16[i23 + 298 >> 1] | 0) {
         i13 = (HEAP32[i23 + 124 >> 2] | 0) + (i1 << 3) | 0;
         HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i4;
         i13 = (HEAP32[i23 + 132 >> 2] | 0) + i1 | 0;
         HEAP8[i13 >> 0] = HEAPU8[i13 >> 0] | 8;
        }
        if (HEAP16[i23 + 300 >> 1] | 0) {
         i13 = (HEAP32[i23 + 124 >> 2] | 0) + (i1 << 3) + 4 | 0;
         HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i3;
         i13 = (HEAP32[i23 + 132 >> 2] | 0) + i1 | 0;
         HEAP8[i13 >> 0] = HEAPU8[i13 >> 0] | 16;
        }
       } else if (HEAP8[i23 + 561 >> 0] | 0) {
        i11 = 319;
        break L12;
       }
       i13 = HEAP32[i23 + 304 >> 2] | 0;
       HEAP32[i23 + 304 >> 2] = i13 + -1;
       i1 = HEAP32[i23 + 28 >> 2] | 0;
       if ((i13 | 0) <= 1) break L488;
       i2 = HEAP32[i23 + 24 >> 2] | 0;
      }
     }
    } while (0);
    HEAP32[i23 + 304 >> 2] = 1;
    HEAP32[i23 + 32 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 57:
   {
    i1 = HEAP32[i23 + 304 >> 2] | 0;
    do if ((HEAP32[i23 + 16 >> 2] | 0) < (i1 | 0)) {
     if (HEAP8[i23 + 561 >> 0] | 0) HEAP32[i23 + 12 >> 2] = 134;
    } else {
     if ((HEAP16[i23 + 344 >> 1] | 0) != 0 ? (HEAP16[i23 + 346 >> 1] | 0) != 0 : 0) i10 = (HEAP16[i23 + 348 >> 1] | 0) == 0; else i10 = 1;
     i8 = HEAP16[i23 + 286 >> 1] | 0;
     if ((i8 & 65535) >= (HEAPU16[i23 + 44 >> 1] | 0)) {
      if (!(HEAP8[i23 + 561 >> 0] | 0)) break;
      HEAP32[i23 + 12 >> 2] = 134;
      break;
     }
     i7 = HEAP32[(i10 ? i23 + 48 | 0 : i23 + 56 | 0) >> 2] | 0;
     i11 = HEAP32[i23 + 52 >> 2] | 0;
     i2 = HEAP16[i23 + 288 >> 1] | 0;
     if ((i2 & 65535) < (HEAPU16[i23 + 80 >> 1] | 0)) {
      do if (!i10) {
       i1 = HEAP32[i23 + 220 >> 2] | 0;
       if ((i1 | 0) == (HEAP32[i23 + 224 >> 2] | 0)) {
        i13 = HEAP32[i23 + 92 >> 2] | 0;
        i2 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, (HEAP32[i13 + ((i2 & 65535) << 3) >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i13 + ((i2 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
        break;
       } else {
        i13 = _FT_MulFix((HEAP32[(HEAP32[i23 + 92 >> 2] | 0) + ((i2 & 65535) << 3) >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) >> 2] | 0) | 0, i1) | 0;
        i2 = _FT_MulFix((HEAP32[(HEAP32[i23 + 92 >> 2] | 0) + (HEAPU16[i23 + 288 >> 1] << 3) + 4 >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) + 4 >> 2] | 0) | 0, HEAP32[i23 + 224 >> 2] | 0) | 0;
        i2 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, i13, i2) | 0;
        break;
       }
      } else {
       i13 = HEAP32[i23 + 84 >> 2] | 0;
       i2 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, (HEAP32[i13 + ((i2 & 65535) << 3) >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i13 + ((i2 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
      } while (0);
      i6 = HEAPU16[i23 + 288 >> 1] | 0;
      i1 = HEAP32[i23 + 88 >> 2] | 0;
      i6 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, (HEAP32[i1 + (i6 << 3) >> 2] | 0) - (HEAP32[i11 + ((i8 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i1 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i11 + ((i8 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
      i1 = HEAP32[i23 + 304 >> 2] | 0;
     } else {
      i6 = 0;
      i2 = 0;
     }
     if ((i1 | 0) > 0) {
      i5 = (i2 | 0) == 0;
      do {
       i9 = (HEAP32[i23 + 28 >> 2] | 0) + -1 | 0;
       HEAP32[i23 + 28 >> 2] = i9;
       i9 = HEAP32[(HEAP32[i23 + 24 >> 2] | 0) + (i9 << 2) >> 2] | 0;
       if (i9 >>> 0 >= (HEAPU16[i23 + 116 >> 1] | 0) >>> 0) if (!(HEAP8[i23 + 561 >> 0] | 0)) i3 = i1; else {
        i11 = 347;
        break L12;
       } else {
        do if (!i10) {
         i1 = HEAP32[i23 + 220 >> 2] | 0;
         if ((i1 | 0) == (HEAP32[i23 + 224 >> 2] | 0)) {
          i3 = HEAP32[i23 + 128 >> 2] | 0;
          i3 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, (HEAP32[i3 + (i9 << 3) >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i3 + (i9 << 3) + 4 >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
          break;
         } else {
          i13 = _FT_MulFix((HEAP32[(HEAP32[i23 + 128 >> 2] | 0) + (i9 << 3) >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) >> 2] | 0) | 0, i1) | 0;
          i3 = _FT_MulFix((HEAP32[(HEAP32[i23 + 128 >> 2] | 0) + (i9 << 3) + 4 >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) + 4 >> 2] | 0) | 0, HEAP32[i23 + 224 >> 2] | 0) | 0;
          i3 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, i13, i3) | 0;
          break;
         }
        } else {
         i3 = HEAP32[i23 + 120 >> 2] | 0;
         i3 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, (HEAP32[i3 + (i9 << 3) >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i3 + (i9 << 3) + 4 >> 2] | 0) - (HEAP32[i7 + ((i8 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
        } while (0);
        i4 = HEAP32[i23 + 124 >> 2] | 0;
        i4 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, (HEAP32[i4 + (i9 << 3) >> 2] | 0) - (HEAP32[i11 + ((i8 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i4 + (i9 << 3) + 4 >> 2] | 0) - (HEAP32[i11 + ((i8 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
        i1 = (i3 | 0) == 0;
        if (i5 | i1) i1 = i1 ? 0 : i4; else i1 = _FT_MulDiv(i3, i6, i2) | 0;
        FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 108 | 0, i9 & 65535, i1 - i4 | 0);
        i3 = HEAP32[i23 + 304 >> 2] | 0;
       }
       i1 = i3 + -1 | 0;
       HEAP32[i23 + 304 >> 2] = i1;
      } while ((i3 | 0) > 1);
     }
    } while (0);
    HEAP32[i23 + 304 >> 2] = 1;
    HEAP32[i23 + 32 >> 2] = HEAP32[i23 + 28 >> 2];
    i11 = 774;
    break;
   }
  case 59:
  case 58:
   {
    i3 = HEAP32[i10 >> 2] | 0;
    if ((i3 & 65535) >>> 0 < (HEAPU16[i23 + 80 >> 1] | 0) >>> 0 ? (i16 = HEAP16[i23 + 284 >> 1] | 0, (i16 & 65535) < (HEAPU16[i23 + 44 >> 1] | 0)) : 0) {
     if (!(HEAP16[i23 + 346 >> 1] | 0)) {
      i2 = (HEAP32[i23 + 48 >> 2] | 0) + ((i16 & 65535) << 3) | 0;
      i13 = HEAP32[i2 + 4 >> 2] | 0;
      i12 = (HEAP32[i23 + 84 >> 2] | 0) + ((i3 & 65535) << 3) | 0;
      HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
      HEAP32[i12 + 4 >> 2] = i13;
      i1 = i8 + (i1 + 1 << 2) | 0;
      FUNCTION_TABLE_viiii[HEAP32[i23 + 588 >> 2] & 15](i23, i23 + 72 | 0, i3 & 65535, HEAP32[i1 >> 2] | 0);
      i12 = (HEAP32[i23 + 84 >> 2] | 0) + ((i3 & 65535) << 3) | 0;
      i13 = HEAP32[i12 + 4 >> 2] | 0;
      i2 = (HEAP32[i23 + 88 >> 2] | 0) + ((i3 & 65535) << 3) | 0;
      HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
      HEAP32[i2 + 4 >> 2] = i13;
      i2 = HEAP16[i23 + 284 >> 1] | 0;
     } else {
      i1 = i8 + (i1 + 1 << 2) | 0;
      i2 = i16;
     }
     i11 = HEAP32[i23 + 88 >> 2] | 0;
     i12 = HEAP32[i23 + 52 >> 2] | 0;
     i13 = i2 & 65535;
     i13 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, (HEAP32[i11 + ((i3 & 65535) << 3) >> 2] | 0) - (HEAP32[i12 + (i13 << 3) >> 2] | 0) | 0, (HEAP32[i11 + ((i3 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i12 + (i13 << 3) + 4 >> 2] | 0) | 0) | 0;
     FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 72 | 0, i3 & 65535, (HEAP32[i1 >> 2] | 0) - i13 | 0);
     HEAP16[i23 + 286 >> 1] = HEAP16[i23 + 284 >> 1] | 0;
     HEAP16[i23 + 288 >> 1] = i3;
     if (!(HEAP8[i23 + 368 >> 0] & 1)) {
      i11 = 774;
      break L30;
     }
     HEAP16[i23 + 284 >> 1] = i3;
     i11 = 774;
     break L30;
    }
    if (!(HEAP8[i23 + 561 >> 0] | 0)) i11 = 774; else {
     i11 = 361;
     break L12;
    }
    break;
   }
  case 60:
   {
    i2 = HEAP32[i23 + 304 >> 2] | 0;
    L556 : do if ((HEAP32[i23 + 16 >> 2] | 0) >= (i2 | 0) ? (HEAPU16[i23 + 284 >> 1] | 0) < (HEAPU16[i23 + 44 >> 1] | 0) : 0) {
     if ((i2 | 0) > 0) {
      i3 = i8;
      while (1) {
       i1 = i1 + -1 | 0;
       HEAP32[i23 + 28 >> 2] = i1;
       i1 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
       if ((i1 & 65535) >>> 0 >= (HEAPU16[i23 + 80 >> 1] | 0) >>> 0) {
        if (HEAP8[i23 + 561 >> 0] | 0) {
         i11 = 374;
         break L12;
        }
       } else {
        i12 = HEAP32[i23 + 88 >> 2] | 0;
        i13 = HEAP32[i23 + 52 >> 2] | 0;
        i2 = HEAPU16[i23 + 284 >> 1] | 0;
        i2 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, (HEAP32[i12 + ((i1 & 65535) << 3) >> 2] | 0) - (HEAP32[i13 + (i2 << 3) >> 2] | 0) | 0, (HEAP32[i12 + ((i1 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i13 + (i2 << 3) + 4 >> 2] | 0) | 0) | 0;
        FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 72 | 0, i1 & 65535, 0 - i2 | 0);
        i2 = HEAP32[i23 + 304 >> 2] | 0;
       }
       i4 = i2 + -1 | 0;
       HEAP32[i23 + 304 >> 2] = i4;
       i1 = HEAP32[i23 + 28 >> 2] | 0;
       if ((i2 | 0) <= 1) break L556;
       i3 = HEAP32[i23 + 24 >> 2] | 0;
       i2 = i4;
      }
     }
    } else i11 = 369; while (0);
    if ((i11 | 0) == 369) if (HEAP8[i23 + 561 >> 0] | 0) HEAP32[i23 + 12 >> 2] = 134;
    HEAP32[i23 + 304 >> 2] = 1;
    HEAP32[i23 + 32 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 61:
   {
    HEAP32[i23 + 312 >> 2] = 2;
    HEAP32[i15 >> 2] = 54;
    i11 = 774;
    break;
   }
  case 63:
  case 62:
   {
    i3 = HEAP32[i10 >> 2] | 0;
    i1 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    if ((i3 & 65535) >>> 0 < (HEAPU16[i23 + 44 >> 1] | 0) >>> 0 ? (HEAP32[i23 + 380 >> 2] | 0) >>> 0 > i1 >>> 0 : 0) {
     i1 = FUNCTION_TABLE_iii[HEAP32[i23 + 592 >> 2] & 255](i23, i1) | 0;
     if (!(HEAP16[i23 + 344 >> 1] | 0)) {
      i13 = HEAP16[i23 + 298 >> 1] | 0;
      i12 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
      i8 = i13 << 16 >> 16 < 0 ? 0 - (i13 << 16 >> 16) | 0 : i13 << 16 >> 16;
      i7 = Math_imul(i8, i12 >>> 16) | 0;
      i8 = (i7 << 16 | 8192) + (Math_imul(i8, i12 & 65535) | 0) | 0;
      i10 = HEAP32[i23 + 48 >> 2] | 0;
      HEAP32[i10 + ((i3 & 65535) << 3) >> 2] = (i13 << 16 >> 16 ^ i1 | 0) > -1 ? (i8 >>> 0 < (i7 << 16 | 8192) >>> 0 & 1) + (i7 >>> 16) << 18 | i8 >>> 14 : 0 - ((i8 >>> 0 < (i7 << 16 | 8192) >>> 0 & 1) + (i7 >>> 16) << 18 | i8 >>> 14) | 0;
      i8 = HEAP16[i23 + 300 >> 1] | 0;
      i7 = i8 << 16 >> 16 < 0 ? 0 - (i8 << 16 >> 16) | 0 : i8 << 16 >> 16;
      i13 = Math_imul(i7, i12 >>> 16) | 0;
      i12 = (i13 << 16 | 8192) + (Math_imul(i7, i12 & 65535) | 0) | 0;
      HEAP32[i10 + ((i3 & 65535) << 3) + 4 >> 2] = (i8 << 16 >> 16 ^ i1 | 0) > -1 ? (i12 >>> 0 < (i13 << 16 | 8192) >>> 0 & 1) + (i13 >>> 16) << 18 | i12 >>> 14 : 0 - ((i12 >>> 0 < (i13 << 16 | 8192) >>> 0 & 1) + (i13 >>> 16) << 18 | i12 >>> 14) | 0;
      i12 = HEAP32[i10 + ((i3 & 65535) << 3) + 4 >> 2] | 0;
      i13 = (HEAP32[i23 + 52 >> 2] | 0) + ((i3 & 65535) << 3) | 0;
      HEAP32[i13 >> 2] = HEAP32[i10 + ((i3 & 65535) << 3) >> 2];
      HEAP32[i13 + 4 >> 2] = i12;
     }
     i2 = HEAP32[i23 + 52 >> 2] | 0;
     i2 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, HEAP32[i2 + ((i3 & 65535) << 3) >> 2] | 0, HEAP32[i2 + ((i3 & 65535) << 3) + 4 >> 2] | 0) | 0;
     if (HEAP8[i23 + 368 >> 0] & 1) i1 = FUNCTION_TABLE_iiii[HEAP32[i15 >> 2] & 127](i23, (((i1 - i2 | 0) < 0 ? 0 - (i1 - i2) | 0 : i1 - i2 | 0) | 0) > (HEAP32[i23 + 320 >> 2] | 0) ? i2 : i1, HEAP32[i23 + 264 >> 2] | 0) | 0;
     FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 36 | 0, i3 & 65535, i1 - i2 | 0);
    } else i11 = 382;
    if ((i11 | 0) == 382 ? (0, (HEAP8[i23 + 561 >> 0] | 0) != 0) : 0) HEAP32[i23 + 12 >> 2] = 134;
    HEAP16[i23 + 284 >> 1] = i3;
    HEAP16[i23 + 286 >> 1] = i3;
    i11 = 774;
    break;
   }
  case 64:
   {
    i2 = HEAP32[i23 + 360 >> 2] | 0;
    i3 = HEAP8[i12 + (i2 + 1) >> 0] | 0;
    if ((i3 & 255) >>> 0 >= (i4 + 1 - (HEAP32[i23 + 16 >> 2] | 0) | 0) >>> 0) {
     i11 = 393;
     break L12;
    }
    if (i3 << 24 >> 24 != 0 ? (i17 = i1 + -1 | 0, HEAP32[i10 >> 2] = HEAPU8[i12 + (i2 + 2) >> 0], (i3 & 255) >= 2) : 0) {
     i1 = 2;
     i2 = 2;
     do {
      HEAP32[i8 + (i17 + i1 << 2) >> 2] = HEAPU8[i12 + ((HEAP32[i23 + 360 >> 2] | 0) + 1 + i1) >> 0];
      i2 = i2 + 1 << 16 >> 16;
      i1 = i2 & 65535;
     } while (i1 >>> 0 <= (i3 & 255) >>> 0);
    }
    HEAP32[i23 + 32 >> 2] = i9 + (i3 & 255);
    i11 = 774;
    break;
   }
  case 65:
   {
    i2 = HEAP32[i23 + 360 >> 2] | 0;
    i5 = HEAP8[i12 + (i2 + 1) >> 0] | 0;
    if ((i5 & 255) >>> 0 >= (i4 + 1 - (HEAP32[i23 + 16 >> 2] | 0) | 0) >>> 0) {
     i11 = 397;
     break L12;
    }
    HEAP32[i23 + 360 >> 2] = i2 + 2;
    L594 : do if (i5 << 24 >> 24) {
     i3 = i2 + 2 | 0;
     i4 = 0;
     i2 = 0;
     while (1) {
      HEAP32[i23 + 360 >> 2] = i3 + 2;
      HEAP32[i8 + (i4 + i1 << 2) >> 2] = (HEAPU8[i12 + i3 >> 0] << 8 | HEAPU8[i12 + (i3 + 1) >> 0]) << 16 >> 16;
      i2 = i2 + 1 << 16 >> 16;
      if ((i2 & 65535) >>> 0 >= (i5 & 255) >>> 0) break L594;
      i3 = HEAP32[i23 + 360 >> 2] | 0;
      i4 = i2 & 65535;
     }
    } while (0);
    HEAP8[i23 + 376 >> 0] = 0;
    HEAP32[i23 + 32 >> 2] = i9 + (i5 & 255);
    i11 = 774;
    break;
   }
  case 66:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if (i2 >>> 0 >= (HEAPU16[i23 + 468 >> 1] | 0) >>> 0) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 405;
     break L12;
    } else {
     HEAP32[(HEAP32[i23 + 472 >> 2] | 0) + (i2 << 2) >> 2] = HEAP32[i8 + (i1 + 1 << 2) >> 2];
     i11 = 774;
     break L30;
    }
   }
  case 67:
   {
    i1 = HEAP32[i10 >> 2] | 0;
    if (i1 >>> 0 < (HEAPU16[i23 + 468 >> 1] | 0) >>> 0) {
     HEAP32[i10 >> 2] = HEAP32[(HEAP32[i23 + 472 >> 2] | 0) + (i1 << 2) >> 2];
     i11 = 774;
     break L30;
    }
    if (HEAP8[i23 + 561 >> 0] | 0) {
     i11 = 405;
     break L12;
    }
    HEAP32[i10 >> 2] = 0;
    i11 = 774;
    break;
   }
  case 68:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if (i2 >>> 0 >= (HEAP32[i23 + 380 >> 2] | 0) >>> 0) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 405;
     break L12;
    } else {
     FUNCTION_TABLE_viii[HEAP32[i23 + 596 >> 2] & 31](i23, i2, HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0);
     i11 = 774;
     break L30;
    }
   }
  case 69:
   {
    i1 = HEAP32[i10 >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[i23 + 380 >> 2] | 0) >>> 0) {
     HEAP32[i10 >> 2] = FUNCTION_TABLE_iii[HEAP32[i23 + 592 >> 2] & 255](i23, i1) | 0;
     i11 = 774;
     break L30;
    }
    if (HEAP8[i23 + 561 >> 0] | 0) {
     i11 = 405;
     break L12;
    }
    HEAP32[i10 >> 2] = 0;
    i11 = 774;
    break;
   }
  case 71:
  case 70:
   {
    i1 = HEAP32[i10 >> 2] | 0;
    do if (i1 >>> 0 < (HEAPU16[i23 + 116 >> 1] | 0) >>> 0) if (!(i7 & 1)) {
     i13 = HEAP32[i23 + 124 >> 2] | 0;
     i1 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, HEAP32[i13 + (i1 << 3) >> 2] | 0, HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0) | 0;
     break;
    } else {
     i13 = HEAP32[i23 + 120 >> 2] | 0;
     i1 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, HEAP32[i13 + (i1 << 3) >> 2] | 0, HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0) | 0;
     break;
    } else if (!(HEAP8[i23 + 561 >> 0] | 0)) i1 = 0; else {
     HEAP32[i23 + 12 >> 2] = 134;
     i1 = 0;
    } while (0);
    HEAP32[i10 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 72:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if ((i2 & 65535) >>> 0 >= (HEAPU16[i23 + 116 >> 1] | 0) >>> 0) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 426;
     break L12;
    }
    i13 = HEAP32[i23 + 124 >> 2] | 0;
    i13 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, HEAP32[i13 + ((i2 & 65535) << 3) >> 2] | 0, HEAP32[i13 + ((i2 & 65535) << 3) + 4 >> 2] | 0) | 0;
    FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 108 | 0, i2 & 65535, (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) - i13 | 0);
    if (!(HEAP16[i23 + 348 >> 1] | 0)) {
     i12 = (HEAP32[i23 + 124 >> 2] | 0) + ((i2 & 65535) << 3) | 0;
     i13 = HEAP32[i12 + 4 >> 2] | 0;
     i11 = (HEAP32[i23 + 120 >> 2] | 0) + ((i2 & 65535) << 3) | 0;
     HEAP32[i11 >> 2] = HEAP32[i12 >> 2];
     HEAP32[i11 + 4 >> 2] = i13;
     i11 = 774;
    } else i11 = 774;
    break;
   }
  case 74:
  case 73:
   {
    i6 = HEAP32[i10 >> 2] & 65535;
    do if (i6 >>> 0 < (HEAPU16[i23 + 44 >> 1] | 0) >>> 0 ? (i18 = HEAP32[i8 + (i1 + 1 << 2) >> 2] & 65535, i18 >>> 0 < (HEAPU16[i23 + 80 >> 1] | 0) >>> 0) : 0) {
     if (i7 & 1) {
      i13 = HEAP32[i23 + 52 >> 2] | 0;
      i1 = HEAP32[i23 + 88 >> 2] | 0;
      i1 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, (HEAP32[i13 + (i6 << 3) >> 2] | 0) - (HEAP32[i1 + (i18 << 3) >> 2] | 0) | 0, (HEAP32[i13 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i1 + (i18 << 3) + 4 >> 2] | 0) | 0) | 0;
      break;
     }
     if ((HEAP16[i23 + 344 >> 1] | 0) != 0 ? (HEAP16[i23 + 346 >> 1] | 0) != 0 : 0) {
      i1 = HEAP32[i23 + 56 >> 2] | 0;
      i2 = HEAP32[i23 + 92 >> 2] | 0;
      i3 = HEAP32[i23 + 220 >> 2] | 0;
      i4 = HEAP32[i1 + (i6 << 3) >> 2] | 0;
      i5 = HEAP32[i2 + (i18 << 3) >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i23 + 224 >> 2] | 0)) {
       i1 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, i4 - i5 | 0, (HEAP32[i1 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i2 + (i18 << 3) + 4 >> 2] | 0) | 0) | 0;
       i1 = _FT_MulFix(i1, HEAP32[i23 + 220 >> 2] | 0) | 0;
       break;
      } else {
       i13 = _FT_MulFix(i4 - i5 | 0, i3) | 0;
       i1 = _FT_MulFix((HEAP32[i1 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i2 + (i18 << 3) + 4 >> 2] | 0) | 0, HEAP32[i23 + 224 >> 2] | 0) | 0;
       i1 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, i13, i1) | 0;
       break;
      }
     }
     i13 = HEAP32[i23 + 48 >> 2] | 0;
     i1 = HEAP32[i23 + 84 >> 2] | 0;
     i1 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, (HEAP32[i13 + (i6 << 3) >> 2] | 0) - (HEAP32[i1 + (i18 << 3) >> 2] | 0) | 0, (HEAP32[i13 + (i6 << 3) + 4 >> 2] | 0) - (HEAP32[i1 + (i18 << 3) + 4 >> 2] | 0) | 0) | 0;
    } else i11 = 431; while (0);
    if ((i11 | 0) == 431) if (!(HEAP8[i23 + 561 >> 0] | 0)) i1 = 0; else {
     HEAP32[i23 + 12 >> 2] = 134;
     i1 = 0;
    }
    HEAP32[i10 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 75:
   {
    HEAP32[i10 >> 2] = _Current_Ppem(i23) | 0;
    i11 = 774;
    break;
   }
  case 76:
   {
    HEAP32[i10 >> 2] = _Current_Ppem(i23) | 0;
    i11 = 774;
    break;
   }
  case 77:
   {
    HEAP8[i23 + 316 >> 0] = 1;
    i11 = 774;
    break;
   }
  case 78:
   {
    HEAP8[i23 + 316 >> 0] = 0;
    i11 = 774;
    break;
   }
  case 80:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) < (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) & 1;
    i11 = 774;
    break;
   }
  case 81:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) <= (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) & 1;
    i11 = 774;
    break;
   }
  case 82:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) > (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) & 1;
    i11 = 774;
    break;
   }
  case 83:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) >= (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) & 1;
    i11 = 774;
    break;
   }
  case 84:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) == (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) & 1;
    i11 = 774;
    break;
   }
  case 85:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) != (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) & 1;
    i11 = 774;
    break;
   }
  case 86:
   {
    HEAP32[i10 >> 2] = ((FUNCTION_TABLE_iiii[HEAP32[i15 >> 2] & 127](i23, HEAP32[i10 >> 2] | 0, 0) | 0) & 127 | 0) == 64 & 1;
    i11 = 774;
    break;
   }
  case 87:
   {
    HEAP32[i10 >> 2] = ((FUNCTION_TABLE_iiii[HEAP32[i15 >> 2] & 127](i23, HEAP32[i10 >> 2] | 0, 0) | 0) & 127 | 0) == 0 & 1;
    i11 = 774;
    break;
   }
  case 88:
   {
    if (!(HEAP32[i10 >> 2] | 0)) {
     i9 = HEAP32[i23 + 364 >> 2] | 0;
     i1 = i2 + (HEAP32[i23 + 360 >> 2] | 0) | 0;
     HEAP32[i23 + 360 >> 2] = i1;
     if ((i1 | 0) < (i9 | 0)) {
      i6 = 1;
      i2 = 1;
     } else {
      i11 = 462;
      break L12;
     }
     while (1) {
      L665 : while (1) {
       i5 = HEAP8[i12 + i1 >> 0] | 0;
       HEAP8[i23 + 368 >> 0] = i5;
       i3 = HEAP8[322531 + (i5 & 255) >> 0] | 0;
       HEAP32[i23 + 372 >> 2] = i3;
       if ((i5 & 254 | 0) == 64) {
        i4 = i1 + 1 | 0;
        if ((i4 | 0) >= (i9 | 0)) {
         i11 = 462;
         break L12;
        }
        i3 = 2 - (Math_imul(HEAPU8[i12 + i4 >> 0] | 0, i3) | 0) | 0;
        HEAP32[i23 + 372 >> 2] = i3;
       }
       i1 = i3 + i1 | 0;
       if ((i1 | 0) > (i9 | 0)) {
        i11 = 462;
        break L12;
       }
       switch (i5 & 255 | 0) {
       case 88:
        {
         i11 = 465;
         break L665;
        }
       case 89:
        {
         i11 = 468;
         break L665;
        }
       case 27:
        {
         if (i6) {
          i11 = 774;
          break L30;
         }
         break;
        }
       default:
        {}
       }
       HEAP32[i23 + 360 >> 2] = i1;
       if ((i1 | 0) >= (i9 | 0)) {
        i11 = 462;
        break L12;
       }
      }
      if ((i11 | 0) == 465) i2 = i2 + 1 | 0; else if ((i11 | 0) == 468) {
       i2 = i2 + -1 | 0;
       if (!i2) {
        i11 = 774;
        break L30;
       }
      }
      HEAP32[i23 + 360 >> 2] = i1;
      if ((i1 | 0) < (i9 | 0)) i6 = (i2 | 0) == 1; else {
       i11 = 462;
       break L12;
      }
     }
    } else i11 = 774;
    break;
   }
  case 90:
   {
    if (!(HEAP32[i10 >> 2] | 0)) i1 = 0; else i1 = (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) != 0;
    HEAP32[i10 >> 2] = i1 & 1;
    i11 = 774;
    break;
   }
  case 91:
   {
    if (!(HEAP32[i10 >> 2] | 0)) i1 = (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0) != 0; else i1 = 1;
    HEAP32[i10 >> 2] = i1 & 1;
    i11 = 774;
    break;
   }
  case 92:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) == 0 & 1;
    i11 = 774;
    break;
   }
  case 93:
   {
    _Ins_DELTAP(i23, HEAP32[i10 >> 2] | 0);
    i11 = 774;
    break;
   }
  case 94:
   {
    HEAP16[i23 + 332 >> 1] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 95:
   {
    HEAP16[i23 + 334 >> 1] = HEAP32[i10 >> 2];
    i11 = 774;
    break;
   }
  case 96:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0);
    i11 = 774;
    break;
   }
  case 97:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - (HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0);
    i11 = 774;
    break;
   }
  case 98:
   {
    i1 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    if (!i1) {
     i11 = 482;
     break L12;
    }
    HEAP32[i10 >> 2] = _FT_MulDiv_No_Round(HEAP32[i10 >> 2] | 0, 64, i1) | 0;
    i11 = 774;
    break;
   }
  case 99:
   {
    HEAP32[i10 >> 2] = _FT_MulDiv(HEAP32[i10 >> 2] | 0, HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0, 64) | 0;
    i11 = 774;
    break;
   }
  case 100:
   {
    i11 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = (i11 | 0) < 0 ? 0 - i11 | 0 : i11;
    i11 = 774;
    break;
   }
  case 101:
   {
    HEAP32[i10 >> 2] = 0 - (HEAP32[i10 >> 2] | 0);
    i11 = 774;
    break;
   }
  case 102:
   {
    HEAP32[i10 >> 2] = HEAP32[i10 >> 2] & -64;
    i11 = 774;
    break;
   }
  case 103:
   {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 63 & -64;
    i11 = 774;
    break;
   }
  case 107:
  case 106:
  case 105:
  case 104:
   {
    HEAP32[i10 >> 2] = FUNCTION_TABLE_iiii[HEAP32[i15 >> 2] & 127](i23, HEAP32[i10 >> 2] | 0, HEAP32[i23 + 264 + ((i7 & 255) + -104 << 2) >> 2] | 0) | 0;
    i11 = 774;
    break;
   }
  case 111:
  case 110:
  case 109:
  case 108:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    i1 = HEAP32[i23 + 264 + ((i7 & 255) + -108 << 2) >> 2] | 0;
    if ((i2 | 0) > -1) i1 = (i2 | 0) != 0 & (i1 + i2 | 0) < 0 ? 0 : i1 + i2 | 0; else i1 = (i2 - i1 | 0) > 0 ? 0 : i2 - i1 | 0;
    HEAP32[i10 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 112:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    if (i2 >>> 0 >= (HEAP32[i23 + 380 >> 2] | 0) >>> 0) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 405;
     break L12;
    } else {
     i11 = _FT_MulFix(HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0, HEAP32[i23 + 260 >> 2] | 0) | 0;
     HEAP32[(HEAP32[i23 + 384 >> 2] | 0) + (i2 << 2) >> 2] = i11;
     i11 = 774;
     break L30;
    }
   }
  case 114:
  case 113:
   {
    _Ins_DELTAP(i23, HEAP32[i10 >> 2] | 0);
    i11 = 774;
    break;
   }
  case 117:
  case 116:
  case 115:
   {
    i5 = HEAP32[i10 >> 2] | 0;
    L712 : do if (i5) {
     i4 = 1;
     while (1) {
      if ((i1 | 0) < 2) break;
      i2 = i1 + -2 | 0;
      HEAP32[i23 + 28 >> 2] = i2;
      i13 = HEAP32[i23 + 24 >> 2] | 0;
      i1 = HEAP32[i13 + (i1 + -1 << 2) >> 2] | 0;
      i2 = HEAP32[i13 + (i2 << 2) >> 2] | 0;
      if (i1 >>> 0 < (HEAP32[i23 + 380 >> 2] | 0) >>> 0) {
       switch (HEAPU8[i23 + 368 >> 0] | 0) {
       case 117:
        {
         i3 = i2 >>> 4 & 15 | 32;
         break;
        }
       case 116:
        {
         i3 = i2 >>> 4 & 15 | 16;
         break;
        }
       default:
        i3 = i2 >>> 4 & 15;
       }
       i13 = (HEAP16[i23 + 332 >> 1] | 0) + i3 | 0;
       if ((_Current_Ppem(i23) | 0) == (i13 | 0)) FUNCTION_TABLE_viii[HEAP32[i23 + 600 >> 2] & 31](i23, i1, ((((i2 & 15) + -8 | 0) > -1 ? (i2 & 15) + -7 | 0 : (i2 & 15) + -8 | 0) << 6 | 0) / (1 << HEAP16[i23 + 334 >> 1] | 0) | 0);
      } else if (HEAP8[i23 + 561 >> 0] | 0) {
       i11 = 505;
       break L12;
      }
      i4 = i4 + 1 | 0;
      i1 = HEAP32[i23 + 28 >> 2] | 0;
      if (i4 >>> 0 > i5 >>> 0) break L712;
     }
     if (HEAP8[i23 + 561 >> 0] | 0) HEAP32[i23 + 12 >> 2] = 129;
     HEAP32[i23 + 28 >> 2] = 0;
     i1 = 0;
    } while (0);
    HEAP32[i23 + 32 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 118:
   {
    i1 = HEAP32[i10 >> 2] | 0;
    switch (i1 & 192 | 0) {
    case 0:
     {
      HEAP32[i23 + 476 >> 2] = 8192;
      break;
     }
    case 64:
     {
      HEAP32[i23 + 476 >> 2] = 16384;
      break;
     }
    case 128:
     {
      HEAP32[i23 + 476 >> 2] = 32768;
      break;
     }
    case 192:
     {
      HEAP32[i23 + 476 >> 2] = 16384;
      break;
     }
    default:
     {}
    }
    switch (i1 & 48 | 0) {
    case 0:
     {
      HEAP32[i23 + 480 >> 2] = 0;
      break;
     }
    case 16:
     {
      HEAP32[i23 + 480 >> 2] = (HEAP32[i23 + 476 >> 2] | 0) / 4 | 0;
      break;
     }
    case 32:
     {
      HEAP32[i23 + 480 >> 2] = (HEAP32[i23 + 476 >> 2] | 0) / 2 | 0;
      break;
     }
    case 48:
     {
      HEAP32[i23 + 480 >> 2] = ((HEAP32[i23 + 476 >> 2] | 0) * 3 | 0) / 4 | 0;
      break;
     }
    default:
     {}
    }
    i2 = HEAP32[i23 + 476 >> 2] | 0;
    if (!(i1 & 15)) i1 = i2 + -1 | 0; else i1 = (Math_imul(i2, (i1 & 15) + -4 | 0) | 0) / 8 | 0;
    HEAP32[i23 + 476 >> 2] = (i2 | 0) / 256 | 0;
    HEAP32[i23 + 480 >> 2] = (HEAP32[i23 + 480 >> 2] | 0) / 256 | 0;
    HEAP32[i23 + 484 >> 2] = (i1 | 0) / 256 | 0;
    HEAP32[i23 + 312 >> 2] = 6;
    HEAP32[i15 >> 2] = 55;
    i11 = 774;
    break;
   }
  case 119:
   {
    i1 = HEAP32[i10 >> 2] | 0;
    switch (i1 & 192 | 0) {
    case 0:
     {
      HEAP32[i23 + 476 >> 2] = 5792;
      break;
     }
    case 64:
     {
      HEAP32[i23 + 476 >> 2] = 11585;
      break;
     }
    case 128:
     {
      HEAP32[i23 + 476 >> 2] = 23170;
      break;
     }
    case 192:
     {
      HEAP32[i23 + 476 >> 2] = 11585;
      break;
     }
    default:
     {}
    }
    switch (i1 & 48 | 0) {
    case 0:
     {
      HEAP32[i23 + 480 >> 2] = 0;
      break;
     }
    case 16:
     {
      HEAP32[i23 + 480 >> 2] = (HEAP32[i23 + 476 >> 2] | 0) / 4 | 0;
      break;
     }
    case 32:
     {
      HEAP32[i23 + 480 >> 2] = (HEAP32[i23 + 476 >> 2] | 0) / 2 | 0;
      break;
     }
    case 48:
     {
      HEAP32[i23 + 480 >> 2] = ((HEAP32[i23 + 476 >> 2] | 0) * 3 | 0) / 4 | 0;
      break;
     }
    default:
     {}
    }
    i2 = HEAP32[i23 + 476 >> 2] | 0;
    if (!(i1 & 15)) i1 = i2 + -1 | 0; else i1 = (Math_imul(i2, (i1 & 15) + -4 | 0) | 0) / 8 | 0;
    HEAP32[i23 + 476 >> 2] = (i2 | 0) / 256 | 0;
    HEAP32[i23 + 480 >> 2] = (HEAP32[i23 + 480 >> 2] | 0) / 256 | 0;
    HEAP32[i23 + 484 >> 2] = (i1 | 0) / 256 | 0;
    HEAP32[i23 + 312 >> 2] = 7;
    HEAP32[i15 >> 2] = 56;
    i11 = 774;
    break;
   }
  case 120:
   {
    if (!(HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0)) i11 = 774; else {
     i2 = HEAP32[i10 >> 2] | 0;
     if (!(i2 | i1)) HEAP32[i23 + 12 >> 2] = 132;
     i1 = (HEAP32[i23 + 360 >> 2] | 0) + i2 | 0;
     HEAP32[i23 + 360 >> 2] = i1;
     if ((i1 | 0) >= 0) {
      i13 = HEAP32[i23 + 428 >> 2] | 0;
      if ((i13 | 0) > 0 ? (i1 | 0) > (HEAP32[(HEAP32[i23 + 436 >> 2] | 0) + ((i13 + -1 | 0) * 20 | 0) + 16 >> 2] | 0) : 0) i11 = 547;
     } else i11 = 547;
     if ((i11 | 0) == 547) HEAP32[i23 + 12 >> 2] = 132;
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
    }
    break;
   }
  case 121:
   {
    if (!(HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0)) {
     i2 = HEAP32[i10 >> 2] | 0;
     if (!(i2 | i1)) HEAP32[i23 + 12 >> 2] = 132;
     i1 = (HEAP32[i23 + 360 >> 2] | 0) + i2 | 0;
     HEAP32[i23 + 360 >> 2] = i1;
     if ((i1 | 0) >= 0) {
      i13 = HEAP32[i23 + 428 >> 2] | 0;
      if ((i13 | 0) > 0 ? (i1 | 0) > (HEAP32[(HEAP32[i23 + 436 >> 2] | 0) + ((i13 + -1 | 0) * 20 | 0) + 16 >> 2] | 0) : 0) i11 = 555;
     } else i11 = 555;
     if ((i11 | 0) == 555) HEAP32[i23 + 12 >> 2] = 132;
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
    } else i11 = 774;
    break;
   }
  case 122:
   {
    HEAP32[i23 + 312 >> 2] = 5;
    HEAP32[i15 >> 2] = 49;
    i11 = 774;
    break;
   }
  case 123:
   {
    i1 = HEAP32[i23 + 416 >> 2] | 0;
    i3 = HEAP32[i23 + 408 >> 2] | 0;
    L788 : do if ((i3 | 0) > 0) {
     i2 = i1;
     while (1) {
      if (i7 << 24 >> 24 == (HEAP32[i2 + 12 >> 2] & 255) << 24 >> 24 ? (HEAP8[i2 + 16 >> 0] | 0) != 0 : 0) break;
      i2 = i2 + 20 | 0;
      if (i2 >>> 0 >= (i1 + (i3 * 20 | 0) | 0) >>> 0) break L788;
     }
     i1 = HEAP32[i23 + 428 >> 2] | 0;
     if ((i1 | 0) >= (HEAP32[i23 + 432 >> 2] | 0)) {
      i11 = 562;
      break L12;
     }
     i13 = HEAP32[i23 + 436 >> 2] | 0;
     HEAP32[i23 + 428 >> 2] = i1 + 1;
     HEAP32[i13 + (i1 * 20 | 0) >> 2] = HEAP32[i23 + 352 >> 2];
     HEAP32[i13 + (i1 * 20 | 0) + 4 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + 1;
     HEAP32[i13 + (i1 * 20 | 0) + 8 >> 2] = 1;
     i4 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i13 + (i1 * 20 | 0) + 12 >> 2] = i4;
     HEAP32[i13 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i2 + 8 >> 2];
     i1 = HEAP32[i2 >> 2] | 0;
     do if ((i1 + -1 | 0) >>> 0 <= 2) {
      i2 = HEAP32[i23 + 444 + (i1 + -1 << 3) >> 2] | 0;
      if (!i2) {
       HEAP32[i23 + 12 >> 2] = 138;
       break;
      }
      i3 = HEAP32[i23 + 444 + (i1 + -1 << 3) + 4 >> 2] | 0;
      if (i3 >>> 0 < i4 >>> 0) {
       HEAP32[i23 + 12 >> 2] = 131;
       break;
      } else {
       HEAP32[i23 + 356 >> 2] = i2;
       HEAP32[i23 + 364 >> 2] = i3;
       HEAP32[i23 + 360 >> 2] = i4;
       HEAP32[i23 + 352 >> 2] = i1;
       break;
      }
     } else HEAP32[i23 + 12 >> 2] = 132; while (0);
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
     break L30;
    } while (0);
    HEAP32[i23 + 12 >> 2] = 128;
    i2 = i3;
    i11 = 776;
    break;
   }
  case 124:
   {
    HEAP32[i23 + 312 >> 2] = 4;
    HEAP32[i15 >> 2] = 51;
    i11 = 774;
    break;
   }
  case 125:
   {
    HEAP32[i23 + 312 >> 2] = 3;
    HEAP32[i15 >> 2] = 52;
    i11 = 774;
    break;
   }
  case 128:
   {
    i2 = HEAP32[i23 + 304 >> 2] | 0;
    L810 : do if ((HEAP32[i23 + 16 >> 2] | 0) < (i2 | 0)) {
     if (HEAP8[i23 + 561 >> 0] | 0) HEAP32[i23 + 12 >> 2] = 129;
    } else if ((i2 | 0) > 0) {
     i3 = i8;
     while (1) {
      i1 = i1 + -1 | 0;
      HEAP32[i23 + 28 >> 2] = i1;
      i1 = HEAP32[i3 + (i1 << 2) >> 2] & 65535;
      if (i1 >>> 0 >= (HEAPU16[i23 + 152 >> 1] | 0) >>> 0) {
       if (HEAP8[i23 + 561 >> 0] | 0) {
        i11 = 581;
        break L12;
       }
      } else {
       i2 = (HEAP32[i23 + 168 >> 2] | 0) + i1 | 0;
       HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] ^ 1;
       i2 = HEAP32[i23 + 304 >> 2] | 0;
      }
      i4 = i2 + -1 | 0;
      HEAP32[i23 + 304 >> 2] = i4;
      i1 = HEAP32[i23 + 28 >> 2] | 0;
      if ((i2 | 0) <= 1) break L810;
      i3 = HEAP32[i23 + 24 >> 2] | 0;
      i2 = i4;
     }
    } while (0);
    HEAP32[i23 + 304 >> 2] = 1;
    HEAP32[i23 + 32 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 129:
   {
    i4 = HEAP32[i10 >> 2] | 0;
    i2 = HEAP32[i8 + (i1 + 1 << 2) >> 2] & 65535;
    i13 = HEAPU16[i23 + 152 >> 1] | 0;
    if (!(i2 >>> 0 < i13 >>> 0 & (i4 & 65535) >>> 0 < i13 >>> 0)) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 590;
     break L12;
    }
    if ((i4 & 65535) >>> 0 > i2 >>> 0) i11 = 774; else {
     i3 = i4 & 65535;
     i1 = i4 & 65535;
     do {
      i13 = (HEAP32[i23 + 168 >> 2] | 0) + i3 | 0;
      HEAP8[i13 >> 0] = HEAPU8[i13 >> 0] | 1;
      i1 = i1 + 1 << 16 >> 16;
      i3 = i1 & 65535;
     } while (i3 >>> 0 <= i2 >>> 0);
     i11 = 774;
    }
    break;
   }
  case 130:
   {
    i4 = HEAP32[i10 >> 2] | 0;
    i2 = HEAP32[i8 + (i1 + 1 << 2) >> 2] & 65535;
    i13 = HEAPU16[i23 + 152 >> 1] | 0;
    if (!(i2 >>> 0 < i13 >>> 0 & (i4 & 65535) >>> 0 < i13 >>> 0)) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 596;
     break L12;
    }
    if ((i4 & 65535) >>> 0 > i2 >>> 0) i11 = 774; else {
     i3 = i4 & 65535;
     i1 = i4 & 65535;
     do {
      i13 = (HEAP32[i23 + 168 >> 2] | 0) + i3 | 0;
      HEAP8[i13 >> 0] = HEAPU8[i13 >> 0] & 254;
      i1 = i1 + 1 << 16 >> 16;
      i3 = i1 & 65535;
     } while (i3 >>> 0 <= i2 >>> 0);
     i11 = 774;
    }
    break;
   }
  case 132:
  case 131:
   {
    i1 = HEAP32[i23 + 416 >> 2] | 0;
    i3 = HEAP32[i23 + 408 >> 2] | 0;
    L837 : do if ((i3 | 0) > 0) {
     i2 = i1;
     while (1) {
      if (i7 << 24 >> 24 == (HEAP32[i2 + 12 >> 2] & 255) << 24 >> 24 ? (HEAP8[i2 + 16 >> 0] | 0) != 0 : 0) break;
      i2 = i2 + 20 | 0;
      if (i2 >>> 0 >= (i1 + (i3 * 20 | 0) | 0) >>> 0) break L837;
     }
     i1 = HEAP32[i23 + 428 >> 2] | 0;
     if ((i1 | 0) >= (HEAP32[i23 + 432 >> 2] | 0)) {
      i11 = 602;
      break L12;
     }
     i13 = HEAP32[i23 + 436 >> 2] | 0;
     HEAP32[i23 + 428 >> 2] = i1 + 1;
     HEAP32[i13 + (i1 * 20 | 0) >> 2] = HEAP32[i23 + 352 >> 2];
     HEAP32[i13 + (i1 * 20 | 0) + 4 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + 1;
     HEAP32[i13 + (i1 * 20 | 0) + 8 >> 2] = 1;
     i4 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i13 + (i1 * 20 | 0) + 12 >> 2] = i4;
     HEAP32[i13 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i2 + 8 >> 2];
     i1 = HEAP32[i2 >> 2] | 0;
     do if ((i1 + -1 | 0) >>> 0 <= 2) {
      i2 = HEAP32[i23 + 444 + (i1 + -1 << 3) >> 2] | 0;
      if (!i2) {
       HEAP32[i23 + 12 >> 2] = 138;
       break;
      }
      i3 = HEAP32[i23 + 444 + (i1 + -1 << 3) + 4 >> 2] | 0;
      if (i3 >>> 0 < i4 >>> 0) {
       HEAP32[i23 + 12 >> 2] = 131;
       break;
      } else {
       HEAP32[i23 + 356 >> 2] = i2;
       HEAP32[i23 + 364 >> 2] = i3;
       HEAP32[i23 + 360 >> 2] = i4;
       HEAP32[i23 + 352 >> 2] = i1;
       break;
      }
     } else HEAP32[i23 + 12 >> 2] = 132; while (0);
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
     break L30;
    } while (0);
    HEAP32[i23 + 12 >> 2] = 128;
    i2 = i3;
    i11 = 776;
    break;
   }
  case 133:
   {
    i1 = HEAP32[i10 >> 2] | 0;
    switch (i1 & 255 | 0) {
    case 255:
     {
      HEAP8[i23 + 337 >> 0] = 1;
      i11 = 774;
      break L30;
     }
    case 0:
     {
      HEAP8[i23 + 337 >> 0] = 0;
      i11 = 774;
      break L30;
     }
    default:
     {
      if ((i1 & 256 | 0) != 0 ? (HEAPU16[i23 + 252 >> 1] | 0) >>> 0 <= (i1 & 255) >>> 0 : 0) HEAP8[i23 + 337 >> 0] = 1;
      if ((i1 & 512 | 0) != 0 ? (HEAP8[i23 + 281 >> 0] | 0) != 0 : 0) HEAP8[i23 + 337 >> 0] = 1;
      if ((i1 & 1024 | 0) != 0 ? (HEAP8[i23 + 282 >> 0] | 0) != 0 : 0) HEAP8[i23 + 337 >> 0] = 1;
      if ((i1 & 2048 | 0) != 0 ? (HEAPU16[i23 + 252 >> 1] | 0) >>> 0 > (i1 & 255) >>> 0 : 0) HEAP8[i23 + 337 >> 0] = 0;
      if ((i1 & 4096 | 0) != 0 ? (HEAP8[i23 + 281 >> 0] | 0) != 0 : 0) HEAP8[i23 + 337 >> 0] = 0;
      if (!(i1 & 8192)) {
       i11 = 774;
       break L30;
      }
      if (!(HEAP8[i23 + 282 >> 0] | 0)) {
       i11 = 774;
       break L30;
      }
      HEAP8[i23 + 337 >> 0] = 0;
      i11 = 774;
      break L30;
     }
    }
   }
  case 135:
  case 134:
   {
    i2 = HEAP32[i10 >> 2] & 65535;
    if (i2 >>> 0 < (HEAPU16[i23 + 80 >> 1] | 0) >>> 0 ? (i19 = HEAP32[i8 + (i1 + 1 << 2) >> 2] & 65535, i19 >>> 0 < (HEAPU16[i23 + 116 >> 1] | 0) >>> 0) : 0) {
     i11 = HEAP32[i23 + 84 >> 2] | 0;
     i10 = HEAP32[i23 + 120 >> 2] | 0;
     i8 = HEAP32[i11 + (i2 << 3) >> 2] | 0;
     i12 = HEAP32[i10 + (i19 << 3) >> 2] | 0;
     i11 = HEAP32[i11 + (i2 << 3) + 4 >> 2] | 0;
     i10 = HEAP32[i10 + (i19 << 3) + 4 >> 2] | 0;
     i13 = (i8 | 0) == (i12 | 0) & (i11 | 0) == (i10 | 0) ? 16384 : i8 - i12 | 0;
     i12 = (i7 & 1) != 0 & ((i8 | 0) == (i12 | 0) & (i11 | 0) == (i10 | 0) ^ 1);
     _Normalize(i12 ? 0 - (i11 - i10) | 0 : i13, i12 ? i13 : i11 - i10 | 0, i23 + 290 | 0);
     i10 = HEAP32[i23 + 88 >> 2] | 0;
     i11 = HEAP32[i23 + 124 >> 2] | 0;
     i13 = (HEAP32[i10 + (i2 << 3) >> 2] | 0) - (HEAP32[i11 + (i19 << 3) >> 2] | 0) | 0;
     i11 = (HEAP32[i10 + (i2 << 3) + 4 >> 2] | 0) - (HEAP32[i11 + (i19 << 3) + 4 >> 2] | 0) | 0;
     _Normalize(i12 ? 0 - i11 | 0 : i13, i12 ? i13 : i11, i23 + 294 | 0);
     _Compute_Funcs(i23);
     i11 = 774;
     break L30;
    }
    if (!(HEAP8[i23 + 561 >> 0] | 0)) i11 = 774; else {
     i11 = 637;
     break L12;
    }
    break;
   }
  case 136:
   {
    i2 = HEAP32[i10 >> 2] | 0;
    i1 = (i2 & 1 | 0) != 0 ? 35 : 0;
    if (i2 & 2) i1 = (HEAP8[i23 + 281 >> 0] | 0) == 0 ? i1 : i1 | 128;
    if (i2 & 4) i1 = (HEAP8[i23 + 282 >> 0] | 0) == 0 ? i1 : i1 | 256;
    if (i2 & 32) i1 = (HEAP8[i23 + 604 >> 0] | 0) == 0 ? i1 : i1 | 4096;
    HEAP32[i10 >> 2] = i1;
    i11 = 774;
    break;
   }
  case 137:
   {
    i5 = HEAP32[i23 + 416 >> 2] | 0;
    i6 = HEAP32[i23 + 408 >> 2] | 0;
    L899 : do if ((i6 | 0) > 0) {
     i3 = HEAP32[i10 >> 2] | 0;
     i1 = i5;
     while (1) {
      if ((HEAP32[i1 + 12 >> 2] | 0) == (i3 | 0)) {
       i4 = i1;
       break L899;
      }
      i1 = i1 + 20 | 0;
      if (i1 >>> 0 >= (i5 + (i6 * 20 | 0) | 0) >>> 0) {
       i4 = i1;
       break;
      }
     }
    } else i4 = i5; while (0);
    if ((i4 | 0) == (i5 + (i6 * 20 | 0) | 0)) {
     if (i6 >>> 0 >= (HEAP32[i23 + 412 >> 2] | 0) >>> 0) {
      i11 = 652;
      break L12;
     }
     HEAP32[i23 + 408 >> 2] = i6 + 1;
    }
    i1 = HEAP32[i10 >> 2] | 0;
    if (i1 >>> 0 > 255) {
     i11 = 655;
     break L12;
    }
    HEAP32[i4 + 12 >> 2] = i1 & 255;
    i3 = HEAP32[i23 + 360 >> 2] | 0;
    HEAP32[i4 + 4 >> 2] = i3 + 1;
    HEAP32[i4 >> 2] = HEAP32[i23 + 352 >> 2];
    HEAP8[i4 + 16 >> 0] = 1;
    i1 = HEAP32[i10 >> 2] | 0;
    if (i1 >>> 0 > (HEAP32[i23 + 424 >> 2] | 0) >>> 0) HEAP32[i23 + 424 >> 2] = i1 & 255;
    i4 = HEAP32[i23 + 364 >> 2] | 0;
    i1 = i3;
    while (1) {
     i1 = i2 + i1 | 0;
     HEAP32[i23 + 360 >> 2] = i1;
     if ((i1 | 0) >= (i4 | 0)) {
      i11 = 664;
      break L12;
     }
     i3 = HEAP8[i12 + i1 >> 0] | 0;
     HEAP8[i23 + 368 >> 0] = i3;
     i2 = HEAP8[322531 + (i3 & 255) >> 0] | 0;
     HEAP32[i23 + 372 >> 2] = i2;
     if ((i3 & 254 | 0) == 64) {
      if ((i1 + 1 | 0) >= (i4 | 0)) {
       i11 = 664;
       break L12;
      }
      i2 = 2 - (Math_imul(HEAPU8[i12 + (i1 + 1) >> 0] | 0, i2) | 0) | 0;
      HEAP32[i23 + 372 >> 2] = i2;
     }
     if ((i2 + i1 | 0) > (i4 | 0)) {
      i11 = 664;
      break L12;
     }
     switch (i3 & 255 | 0) {
     case 44:
     case 137:
      {
       i11 = 666;
       break L12;
      }
     case 45:
      {
       i11 = 774;
       break L30;
      }
     default:
      {}
     }
    }
   }
  case 138:
   {
    i7 = i8 + (i1 + 2 << 2) | 0;
    i12 = HEAP32[i7 >> 2] | 0;
    i13 = i8 + (i1 + 1 << 2) | 0;
    i11 = HEAP32[i13 >> 2] | 0;
    HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i13 >> 2] = i12;
    HEAP32[i10 >> 2] = i11;
    i11 = 774;
    break;
   }
  case 139:
   {
    i1 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    if ((i1 | 0) > (HEAP32[i10 >> 2] | 0)) {
     HEAP32[i10 >> 2] = i1;
     i11 = 774;
    } else i11 = 774;
    break;
   }
  case 140:
   {
    i1 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    if ((i1 | 0) < (HEAP32[i10 >> 2] | 0)) {
     HEAP32[i10 >> 2] = i1;
     i11 = 774;
    } else i11 = 774;
    break;
   }
  case 141:
   {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i1 | 0) > -1) {
     HEAP32[i23 + 340 >> 2] = i1;
     i11 = 774;
    } else i11 = 774;
    break;
   }
  case 142:
   {
    i1 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
    if ((i1 + -1 | 0) >>> 0 > 1) if (!(HEAP8[i23 + 561 >> 0] | 0)) {
     i11 = 774;
     break L30;
    } else {
     i11 = 676;
     break L12;
    } else {
     HEAP8[i23 + 336 >> 0] = HEAPU8[i23 + 336 >> 0] & (i1 ^ 255) | ((HEAP32[i10 >> 2] | 0) == 0 ? 0 : i1);
     i11 = 774;
     break L30;
    }
   }
  case 143:
   {
    i1 = HEAP32[i23 + 416 >> 2] | 0;
    i3 = HEAP32[i23 + 408 >> 2] | 0;
    L933 : do if ((i3 | 0) > 0) {
     i2 = i1;
     while (1) {
      if (i7 << 24 >> 24 == (HEAP32[i2 + 12 >> 2] & 255) << 24 >> 24 ? (HEAP8[i2 + 16 >> 0] | 0) != 0 : 0) break;
      i2 = i2 + 20 | 0;
      if (i2 >>> 0 >= (i1 + (i3 * 20 | 0) | 0) >>> 0) break L933;
     }
     i1 = HEAP32[i23 + 428 >> 2] | 0;
     if ((i1 | 0) >= (HEAP32[i23 + 432 >> 2] | 0)) {
      i11 = 682;
      break L12;
     }
     i13 = HEAP32[i23 + 436 >> 2] | 0;
     HEAP32[i23 + 428 >> 2] = i1 + 1;
     HEAP32[i13 + (i1 * 20 | 0) >> 2] = HEAP32[i23 + 352 >> 2];
     HEAP32[i13 + (i1 * 20 | 0) + 4 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + 1;
     HEAP32[i13 + (i1 * 20 | 0) + 8 >> 2] = 1;
     i4 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i13 + (i1 * 20 | 0) + 12 >> 2] = i4;
     HEAP32[i13 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i2 + 8 >> 2];
     i1 = HEAP32[i2 >> 2] | 0;
     do if ((i1 + -1 | 0) >>> 0 <= 2) {
      i2 = HEAP32[i23 + 444 + (i1 + -1 << 3) >> 2] | 0;
      if (!i2) {
       HEAP32[i23 + 12 >> 2] = 138;
       break;
      }
      i3 = HEAP32[i23 + 444 + (i1 + -1 << 3) + 4 >> 2] | 0;
      if (i3 >>> 0 < i4 >>> 0) {
       HEAP32[i23 + 12 >> 2] = 131;
       break;
      } else {
       HEAP32[i23 + 356 >> 2] = i2;
       HEAP32[i23 + 364 >> 2] = i3;
       HEAP32[i23 + 360 >> 2] = i4;
       HEAP32[i23 + 352 >> 2] = i1;
       break;
      }
     } else HEAP32[i23 + 12 >> 2] = 132; while (0);
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
     break L30;
    } while (0);
    HEAP32[i23 + 12 >> 2] = 128;
    i2 = i3;
    i11 = 776;
    break;
   }
  default:
   {
    if ((i7 & 255) > 223) {
     i9 = HEAP32[i10 >> 2] | 0;
     i1 = HEAP32[i8 + (i1 + 1 << 2) >> 2] | 0;
     if (((i9 & 65535) >>> 0 < (HEAPU16[i23 + 80 >> 1] | 0) >>> 0 ? (i1 + 1 | 0) >>> 0 < ((HEAP32[i23 + 380 >> 2] | 0) + 1 | 0) >>> 0 : 0) ? (HEAPU16[i23 + 284 >> 1] | 0) < (HEAPU16[i23 + 44 >> 1] | 0) : 0) {
      if (!(i1 + 1 | 0)) i2 = 0; else i2 = FUNCTION_TABLE_iii[HEAP32[i23 + 592 >> 2] & 255](i23, i1) | 0;
      i1 = HEAP32[i23 + 328 >> 2] | 0;
      i13 = i2 - i1 | 0;
      if ((((i13 | 0) < 0 ? 0 - i13 | 0 : i13) | 0) < (HEAP32[i23 + 324 >> 2] | 0)) i2 = (i2 | 0) > -1 ? i1 : 0 - i1 | 0;
      if (!(HEAP16[i23 + 346 >> 1] | 0)) {
       i12 = HEAPU16[i23 + 284 >> 1] | 0;
       i13 = HEAP32[i23 + 48 >> 2] | 0;
       i8 = HEAP16[i23 + 298 >> 1] | 0;
       i1 = 0 - i2 | 0;
       i10 = (i2 | 0) < 0 ? i1 : i2;
       i7 = i8 << 16 >> 16 < 0 ? 0 - (i8 << 16 >> 16) | 0 : i8 << 16 >> 16;
       i6 = Math_imul(i7, i10 >>> 16) | 0;
       i7 = (i6 << 16 | 8192) + (Math_imul(i7, i10 & 65535) | 0) | 0;
       i11 = HEAP32[i23 + 84 >> 2] | 0;
       HEAP32[i11 + ((i9 & 65535) << 3) >> 2] = ((i8 << 16 >> 16 ^ i2 | 0) > -1 ? (i7 >>> 0 < (i6 << 16 | 8192) >>> 0 & 1) + (i6 >>> 16) << 18 | i7 >>> 14 : 0 - ((i7 >>> 0 < (i6 << 16 | 8192) >>> 0 & 1) + (i6 >>> 16) << 18 | i7 >>> 14) | 0) + (HEAP32[i13 + (i12 << 3) >> 2] | 0);
       i7 = HEAP16[i23 + 300 >> 1] | 0;
       i6 = i7 << 16 >> 16 < 0 ? 0 - (i7 << 16 >> 16) | 0 : i7 << 16 >> 16;
       i8 = Math_imul(i6, i10 >>> 16) | 0;
       i10 = (i8 << 16 | 8192) + (Math_imul(i6, i10 & 65535) | 0) | 0;
       HEAP32[i11 + ((i9 & 65535) << 3) + 4 >> 2] = ((i7 << 16 >> 16 ^ i2 | 0) > -1 ? (i10 >>> 0 < (i8 << 16 | 8192) >>> 0 & 1) + (i8 >>> 16) << 18 | i10 >>> 14 : 0 - ((i10 >>> 0 < (i8 << 16 | 8192) >>> 0 & 1) + (i8 >>> 16) << 18 | i10 >>> 14) | 0) + (HEAP32[i13 + (i12 << 3) + 4 >> 2] | 0);
       i12 = HEAP32[i11 + ((i9 & 65535) << 3) + 4 >> 2] | 0;
       i13 = (HEAP32[i23 + 88 >> 2] | 0) + ((i9 & 65535) << 3) | 0;
       HEAP32[i13 >> 2] = HEAP32[i11 + ((i9 & 65535) << 3) >> 2];
       HEAP32[i13 + 4 >> 2] = i12;
      } else i1 = 0 - i2 | 0;
      i6 = HEAP32[i23 + 84 >> 2] | 0;
      i5 = HEAPU16[i23 + 284 >> 1] | 0;
      i13 = HEAP32[i23 + 48 >> 2] | 0;
      i5 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, (HEAP32[i6 + ((i9 & 65535) << 3) >> 2] | 0) - (HEAP32[i13 + (i5 << 3) >> 2] | 0) | 0, (HEAP32[i6 + ((i9 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i13 + (i5 << 3) + 4 >> 2] | 0) | 0) | 0;
      i13 = HEAP32[i23 + 88 >> 2] | 0;
      i6 = HEAPU16[i23 + 284 >> 1] | 0;
      i3 = HEAP32[i23 + 52 >> 2] | 0;
      i6 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, (HEAP32[i13 + ((i9 & 65535) << 3) >> 2] | 0) - (HEAP32[i3 + (i6 << 3) >> 2] | 0) | 0, (HEAP32[i13 + ((i9 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i3 + (i6 << 3) + 4 >> 2] | 0) | 0) | 0;
      i1 = (i5 ^ i2 | 0) < 0 & (HEAP8[i23 + 316 >> 0] | 0) != 0 ? i1 : i2;
      i3 = HEAP8[i23 + 368 >> 0] | 0;
      do if (!(i3 & 4)) {
       i4 = HEAP32[i23 + 264 + ((i3 & 3) << 2) >> 2] | 0;
       if ((i1 | 0) > -1) {
        i1 = (i2 | 0) != 0 & (i4 + i1 | 0) < 0 ? 0 : i4 + i1 | 0;
        break;
       } else {
        i1 = (i1 - i4 | 0) > 0 ? 0 : i1 - i4 | 0;
        break;
       }
      } else {
       if ((HEAP16[i23 + 344 >> 1] | 0) == (HEAP16[i23 + 346 >> 1] | 0)) i1 = (((i1 - i5 | 0) < 0 ? 0 - (i1 - i5) | 0 : i1 - i5 | 0) | 0) > (HEAP32[i23 + 320 >> 2] | 0) ? i5 : i1;
       i1 = FUNCTION_TABLE_iiii[HEAP32[i15 >> 2] & 127](i23, i1, HEAP32[i23 + 264 + ((i3 & 3) << 2) >> 2] | 0) | 0;
       i3 = HEAP8[i23 + 368 >> 0] | 0;
      } while (0);
      do if (i3 & 8) {
       i2 = HEAP32[i23 + 308 >> 2] | 0;
       if ((i5 | 0) > -1) {
        i1 = (i1 | 0) < (i2 | 0) ? i2 : i1;
        break;
       } else {
        i1 = (i1 | 0) > (0 - i2 | 0) ? 0 - i2 | 0 : i1;
        break;
       }
      } while (0);
      FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 72 | 0, i9 & 65535, i1 - i6 | 0);
      i1 = HEAP8[i23 + 368 >> 0] | 0;
     } else if (!(HEAP8[i23 + 561 >> 0] | 0)) i1 = i7; else {
      HEAP32[i23 + 12 >> 2] = 134;
      i1 = i7;
     }
     HEAP16[i23 + 286 >> 1] = HEAP16[i23 + 284 >> 1] | 0;
     if (i1 & 16) HEAP16[i23 + 284 >> 1] = i9;
     HEAP16[i23 + 288 >> 1] = i9;
     i11 = 774;
     break L30;
    }
    if ((i7 & 255) > 191) {
     i9 = HEAP32[i10 >> 2] | 0;
     if ((i9 & 65535) >>> 0 < (HEAPU16[i23 + 80 >> 1] | 0) >>> 0 ? (i20 = HEAP16[i23 + 284 >> 1] | 0, (i20 & 65535) < (HEAPU16[i23 + 44 >> 1] | 0)) : 0) {
      do if ((HEAP16[i23 + 344 >> 1] | 0) != 0 ? (HEAP16[i23 + 346 >> 1] | 0) != 0 : 0) {
       i1 = HEAP32[i23 + 92 >> 2] | 0;
       i2 = HEAP32[i23 + 56 >> 2] | 0;
       i3 = HEAP32[i23 + 220 >> 2] | 0;
       i4 = HEAP32[i1 + ((i9 & 65535) << 3) >> 2] | 0;
       i5 = HEAP32[i2 + ((i20 & 65535) << 3) >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i23 + 224 >> 2] | 0)) {
        i2 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, i4 - i5 | 0, (HEAP32[i1 + ((i9 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i2 + ((i20 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
        i2 = _FT_MulFix(i2, HEAP32[i23 + 220 >> 2] | 0) | 0;
        break;
       } else {
        i13 = _FT_MulFix(i4 - i5 | 0, i3) | 0;
        i2 = _FT_MulFix((HEAP32[i1 + ((i9 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i2 + ((i20 & 65535) << 3) + 4 >> 2] | 0) | 0, HEAP32[i23 + 224 >> 2] | 0) | 0;
        i2 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, i13, i2) | 0;
        break;
       }
      } else i11 = 728; while (0);
      if ((i11 | 0) == 728) {
       i13 = HEAP32[i23 + 84 >> 2] | 0;
       i2 = HEAP32[i23 + 48 >> 2] | 0;
       i2 = FUNCTION_TABLE_iiii[HEAP32[i23 + 576 >> 2] & 127](i23, (HEAP32[i13 + ((i9 & 65535) << 3) >> 2] | 0) - (HEAP32[i2 + ((i20 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i13 + ((i9 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i2 + ((i20 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
      }
      i1 = HEAP32[i23 + 328 >> 2] | 0;
      i13 = i2 - i1 | 0;
      if ((((i13 | 0) < 0 ? 0 - i13 | 0 : i13) | 0) < (HEAP32[i23 + 324 >> 2] | 0)) i3 = (i2 | 0) > -1 ? i1 : 0 - i1 | 0; else i3 = i2;
      i1 = HEAP8[i23 + 368 >> 0] | 0;
      do if (!(i1 & 4)) {
       i2 = HEAP32[i23 + 264 + ((i1 & 3) << 2) >> 2] | 0;
       if ((i3 | 0) > -1) {
        i13 = i2 + i3 | 0;
        i2 = i1;
        i1 = (i3 | 0) != 0 & (i13 | 0) < 0 ? 0 : i13;
        break;
       } else {
        i13 = i3 - i2 | 0;
        i2 = i1;
        i1 = (i13 | 0) > 0 ? 0 : i13;
        break;
       }
      } else {
       i1 = FUNCTION_TABLE_iiii[HEAP32[i15 >> 2] & 127](i23, i3, HEAP32[i23 + 264 + ((i1 & 3) << 2) >> 2] | 0) | 0;
       i2 = HEAP8[i23 + 368 >> 0] | 0;
      } while (0);
      do if (i2 & 8) {
       i2 = HEAP32[i23 + 308 >> 2] | 0;
       if ((i3 | 0) > -1) {
        i1 = (i1 | 0) < (i2 | 0) ? i2 : i1;
        break;
       } else {
        i1 = (i1 | 0) > (0 - i2 | 0) ? 0 - i2 | 0 : i1;
        break;
       }
      } while (0);
      i11 = HEAP32[i23 + 88 >> 2] | 0;
      i12 = HEAP32[i23 + 52 >> 2] | 0;
      i13 = HEAPU16[i23 + 284 >> 1] | 0;
      i13 = FUNCTION_TABLE_iiii[HEAP32[i23 + 572 >> 2] & 127](i23, (HEAP32[i11 + ((i9 & 65535) << 3) >> 2] | 0) - (HEAP32[i12 + (i13 << 3) >> 2] | 0) | 0, (HEAP32[i11 + ((i9 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i12 + (i13 << 3) + 4 >> 2] | 0) | 0) | 0;
      FUNCTION_TABLE_viiii[HEAP32[i23 + 584 >> 2] & 15](i23, i23 + 72 | 0, i9 & 65535, i1 - i13 | 0);
      i1 = HEAP8[i23 + 368 >> 0] | 0;
     } else if (!(HEAP8[i23 + 561 >> 0] | 0)) i1 = i7; else {
      HEAP32[i23 + 12 >> 2] = 134;
      i1 = i7;
     }
     HEAP16[i23 + 286 >> 1] = HEAP16[i23 + 284 >> 1] | 0;
     HEAP16[i23 + 288 >> 1] = i9;
     if (!(i1 & 16)) {
      i11 = 774;
      break L30;
     }
     HEAP16[i23 + 284 >> 1] = i9;
     i11 = 774;
     break L30;
    }
    if ((i7 & 255) > 183) {
     if (((i7 & 255) + 65353 & 65535) >>> 0 >= (i4 + 1 - (HEAP32[i23 + 16 >> 2] | 0) | 0) >>> 0) {
      i11 = 748;
      break L12;
     }
     i2 = (HEAP32[i23 + 360 >> 2] | 0) + 1 | 0;
     HEAP32[i23 + 360 >> 2] = i2;
     L111 : do if ((i7 & 255) + 65353 & 65535) {
      i4 = 0;
      i3 = 0;
      while (1) {
       HEAP32[i23 + 360 >> 2] = i2 + 2;
       HEAP32[i8 + (i4 + i1 << 2) >> 2] = (HEAPU8[i12 + i2 >> 0] << 8 | HEAPU8[i12 + (i2 + 1) >> 0]) << 16 >> 16;
       i3 = i3 + 1 << 16 >> 16;
       if ((i3 & 65535) >>> 0 >= ((i7 & 255) + 65353 & 65535) >>> 0) break L111;
       i2 = HEAP32[i23 + 360 >> 2] | 0;
       i4 = i3 & 65535;
      }
     } while (0);
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
     break L30;
    }
    if ((i7 & 255) > 175) {
     if (((i7 & 255) + 65361 & 65535) >>> 0 >= (i4 + 1 - (HEAP32[i23 + 16 >> 2] | 0) | 0) >>> 0) {
      i11 = 757;
      break L12;
     }
     if (!((i7 & 255) + 65361 & 65535)) {
      i11 = 774;
      break L30;
     }
     i1 = i1 + -1 | 0;
     i2 = 1;
     i3 = 1;
     while (1) {
      HEAP32[i8 + (i1 + i2 << 2) >> 2] = HEAPU8[i12 + ((HEAP32[i23 + 360 >> 2] | 0) + i2) >> 0];
      i3 = i3 + 1 << 16 >> 16;
      i2 = i3 & 65535;
      if (i2 >>> 0 > ((i7 & 255) + 65361 & 65535) >>> 0) {
       i11 = 774;
       break L30;
      }
     }
    }
    i1 = HEAP32[i23 + 416 >> 2] | 0;
    i3 = HEAP32[i23 + 408 >> 2] | 0;
    L124 : do if ((i3 | 0) > 0) {
     i2 = i1;
     while (1) {
      if (i7 << 24 >> 24 == (HEAP32[i2 + 12 >> 2] & 255) << 24 >> 24 ? (HEAP8[i2 + 16 >> 0] | 0) != 0 : 0) break;
      i2 = i2 + 20 | 0;
      if (i2 >>> 0 >= (i1 + (i3 * 20 | 0) | 0) >>> 0) break L124;
     }
     i1 = HEAP32[i23 + 428 >> 2] | 0;
     if ((i1 | 0) >= (HEAP32[i23 + 432 >> 2] | 0)) {
      i11 = 763;
      break L12;
     }
     i13 = HEAP32[i23 + 436 >> 2] | 0;
     HEAP32[i23 + 428 >> 2] = i1 + 1;
     HEAP32[i13 + (i1 * 20 | 0) >> 2] = HEAP32[i23 + 352 >> 2];
     HEAP32[i13 + (i1 * 20 | 0) + 4 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + 1;
     HEAP32[i13 + (i1 * 20 | 0) + 8 >> 2] = 1;
     i4 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i13 + (i1 * 20 | 0) + 12 >> 2] = i4;
     HEAP32[i13 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i2 + 8 >> 2];
     i1 = HEAP32[i2 >> 2] | 0;
     do if ((i1 + -1 | 0) >>> 0 <= 2) {
      i2 = HEAP32[i23 + 444 + (i1 + -1 << 3) >> 2] | 0;
      if (!i2) {
       HEAP32[i23 + 12 >> 2] = 138;
       break;
      }
      i3 = HEAP32[i23 + 444 + (i1 + -1 << 3) + 4 >> 2] | 0;
      if (i3 >>> 0 < i4 >>> 0) {
       HEAP32[i23 + 12 >> 2] = 131;
       break;
      } else {
       HEAP32[i23 + 356 >> 2] = i2;
       HEAP32[i23 + 364 >> 2] = i3;
       HEAP32[i23 + 360 >> 2] = i4;
       HEAP32[i23 + 352 >> 2] = i1;
       break;
      }
     } else HEAP32[i23 + 12 >> 2] = 132; while (0);
     HEAP8[i23 + 376 >> 0] = 0;
     i11 = 774;
     break L30;
    } while (0);
    HEAP32[i23 + 12 >> 2] = 128;
    i2 = i3;
    i11 = 776;
   }
  } while (0);
  L952 : do if ((i11 | 0) == 774) {
   i1 = HEAP32[i23 + 12 >> 2] | 0;
   switch (i1 | 0) {
   case 0:
    {
     i11 = 790;
     break L952;
    }
   case 128:
    break;
   default:
    {
     i11 = 798;
     break L12;
    }
   }
   i1 = HEAP32[i23 + 416 >> 2] | 0;
   i2 = HEAP32[i23 + 408 >> 2] | 0;
   i11 = 776;
  } while (0);
  if ((i11 | 0) == 776) {
   i11 = 0;
   i3 = i1 + (i2 * 20 | 0) | 0;
   if ((i2 | 0) <= 0) {
    i11 = 789;
    break;
   }
   while (1) {
    if ((HEAP8[i1 + 16 >> 0] | 0) != 0 ? (HEAP8[i23 + 368 >> 0] | 0) == (HEAP32[i1 + 12 >> 2] & 255) << 24 >> 24 : 0) break;
    i1 = i1 + 20 | 0;
    if (i1 >>> 0 >= i3 >>> 0) {
     i11 = 789;
     break L12;
    }
   }
   i2 = HEAP32[i23 + 428 >> 2] | 0;
   if ((i2 | 0) >= (HEAP32[i23 + 432 >> 2] | 0)) {
    i11 = 780;
    break;
   }
   i13 = HEAP32[i23 + 436 >> 2] | 0;
   HEAP32[i13 + (i2 * 20 | 0) >> 2] = HEAP32[i23 + 352 >> 2];
   HEAP32[i13 + (i2 * 20 | 0) + 4 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + 1;
   HEAP32[i13 + (i2 * 20 | 0) + 8 >> 2] = 1;
   i4 = HEAP32[i1 + 4 >> 2] | 0;
   HEAP32[i13 + (i2 * 20 | 0) + 12 >> 2] = i4;
   HEAP32[i13 + (i2 * 20 | 0) + 16 >> 2] = HEAP32[i1 + 8 >> 2];
   i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 + -1 | 0) >>> 0 > 2) {
    i11 = 782;
    break;
   }
   i2 = HEAP32[i23 + 444 + (i1 + -1 << 3) >> 2] | 0;
   if (!i2) {
    i11 = 784;
    break;
   }
   i3 = HEAP32[i23 + 444 + (i1 + -1 << 3) + 4 >> 2] | 0;
   if (i3 >>> 0 < i4 >>> 0) {
    i11 = 786;
    break;
   }
   HEAP32[i23 + 356 >> 2] = i2;
   HEAP32[i23 + 364 >> 2] = i3;
   HEAP32[i23 + 360 >> 2] = i4;
   HEAP32[i23 + 352 >> 2] = i1;
   i1 = i14;
  } else if ((i11 | 0) == 790) {
   i11 = 0;
   HEAP32[i23 + 16 >> 2] = HEAP32[i23 + 32 >> 2];
   if (HEAP8[i23 + 376 >> 0] | 0) HEAP32[i23 + 360 >> 2] = (HEAP32[i23 + 360 >> 2] | 0) + (HEAP32[i23 + 372 >> 2] | 0);
   if ((i14 | 0) > 999999) {
    i1 = 139;
    i11 = 801;
    break;
   } else i1 = i14 + 1 | 0;
  }
  i4 = HEAP32[i23 + 360 >> 2] | 0;
  if ((i4 | 0) >= (HEAP32[i23 + 364 >> 2] | 0)) {
   i11 = 794;
   break;
  }
  if (HEAP8[i23 + 488 >> 0] | 0) {
   i1 = 0;
   i11 = 801;
   break;
  } else i14 = i1;
 }
 switch (i11 | 0) {
 case 21:
  {
   HEAP32[i23 + 12 >> 2] = 129;
   i1 = 129;
   break;
  }
 case 25:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 35:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 40:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 53:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 64:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 70:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 76:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 82:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 85:
  {
   HEAP32[i23 + 12 >> 2] = 132;
   i1 = 132;
   break;
  }
 case 97:
  {
   HEAP32[i23 + 12 >> 2] = 131;
   i1 = 131;
   break;
  }
 case 123:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 128:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 134:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 147:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 160:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 170:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 180:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 189:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 195:
  {
   HEAP32[i23 + 12 >> 2] = 140;
   i1 = 140;
   break;
  }
 case 198:
  {
   HEAP32[i23 + 12 >> 2] = 140;
   i1 = 140;
   break;
  }
 case 207:
  {
   HEAP32[i23 + 12 >> 2] = 131;
   i1 = 131;
   break;
  }
 case 209:
  {
   HEAP32[i23 + 12 >> 2] = 137;
   i1 = 137;
   break;
  }
 case 212:
  {
   HEAP32[i23 + 12 >> 2] = 136;
   i1 = 136;
   break;
  }
 case 216:
  {
   HEAP32[i23 + 12 >> 2] = 132;
   i1 = 132;
   break;
  }
 case 218:
  {
   HEAP32[i23 + 12 >> 2] = 138;
   i1 = 138;
   break;
  }
 case 220:
  {
   HEAP32[i23 + 12 >> 2] = 131;
   i1 = 131;
   break;
  }
 case 224:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 319:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 347:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 361:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 374:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 393:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 397:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 405:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 426:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 446:
  {
   HEAP32[i23 + 12 >> 2] = 135;
   i1 = 135;
   break;
  }
 case 462:
  {
   HEAP32[i23 + 12 >> 2] = 131;
   i1 = 131;
   break;
  }
 case 482:
  {
   HEAP32[i23 + 12 >> 2] = 133;
   i1 = 133;
   break;
  }
 case 505:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 562:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 581:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 590:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 596:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 602:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 637:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 652:
  {
   HEAP32[i23 + 12 >> 2] = 141;
   i1 = 141;
   break;
  }
 case 655:
  {
   HEAP32[i23 + 12 >> 2] = 141;
   i1 = 141;
   break;
  }
 case 664:
  {
   HEAP32[i23 + 12 >> 2] = 131;
   i1 = 131;
   break;
  }
 case 666:
  {
   HEAP32[i23 + 12 >> 2] = 137;
   i1 = 137;
   break;
  }
 case 676:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 682:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 748:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 757:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 763:
  {
   HEAP32[i23 + 12 >> 2] = 130;
   i1 = 130;
   break;
  }
 case 780:
  {
   HEAP32[i23 + 12 >> 2] = 134;
   i1 = 134;
   break;
  }
 case 782:
  {
   HEAP32[i23 + 12 >> 2] = 132;
   i1 = 132;
   break;
  }
 case 784:
  {
   HEAP32[i23 + 12 >> 2] = 138;
   i1 = 138;
   break;
  }
 case 786:
  {
   HEAP32[i23 + 12 >> 2] = 131;
   i1 = 131;
   break;
  }
 case 789:
  {
   HEAP32[i23 + 12 >> 2] = 128;
   i1 = 128;
   break;
  }
 case 794:
  if ((HEAP32[i23 + 428 >> 2] | 0) > 0) {
   HEAP32[i23 + 12 >> 2] = 131;
   i1 = 131;
   break;
  } else {
   i23 = 0;
   STACKTOP = i24;
   return i23 | 0;
  }
 case 797:
  {
   HEAP32[i23 + 12 >> 2] = 131;
   i1 = 131;
   break;
  }
 case 798:
  {
   if (!i1) {
    i23 = 0;
    STACKTOP = i24;
    return i23 | 0;
   }
   break;
  }
 case 801:
  {
   STACKTOP = i24;
   return i1 | 0;
  }
 }
 if (HEAP8[i23 + 488 >> 0] | 0) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 HEAP8[(HEAP32[i23 + 4 >> 2] | 0) + 301 >> 0] = 0;
 i23 = i1;
 STACKTOP = i24;
 return i23 | 0;
}
function _cff_decoder_parse_charstrings(i43, i2, i3) {
 i43 = i43 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i44 = 0;
 i44 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i44 + 8 >> 2] = i43;
 HEAP32[i44 + 4 >> 2] = i2;
 i1 = HEAP32[(HEAP32[i43 + 76 >> 2] | 0) + 1368 >> 2] | 0;
 HEAP32[i43 + 756 >> 2] = 0;
 HEAP8[i43 + 752 >> 0] = 1;
 i42 = i44 + 4 ^ i44 + 8 ^ i44;
 HEAP32[i44 >> 2] = ((i42 >>> 10 ^ i42 ^ i42 >> 20) & 65535 | 0) == 0 ? 29572 : (i42 >>> 10 ^ i42 ^ i42 >> 20) & 65535;
 HEAP32[i43 + 276 >> 2] = i43 + 80;
 HEAP32[i43 + 676 >> 2] = i43 + 280;
 i42 = HEAP32[i43 + 68 >> 2] | 0;
 HEAP8[i43 + 64 >> 0] = 0;
 HEAP32[i43 + 280 >> 2] = i2;
 HEAP32[i43 + 284 >> 2] = i2 + i3;
 HEAP32[i43 + 288 >> 2] = i2;
 i4 = HEAP32[i43 + 24 >> 2] | 0;
 i5 = HEAP32[i43 + 28 >> 2] | 0;
 if (i42) {
  FUNCTION_TABLE_vi[HEAP32[i42 + 4 >> 2] & 127](HEAP32[i42 >> 2] | 0);
  i41 = i42;
 } else i41 = i42;
 i27 = (i1 | 0) == 2 ? 0 : 16;
 i9 = i2;
 i25 = i2 + i3 | 0;
 i26 = i43 + 280 | 0;
 L5 : while (1) {
  if (i9 >>> 0 >= i25 >>> 0) {
   i1 = 0;
   i22 = 440;
   break;
  }
  L7 : while (1) {
   i6 = i9 + 1 | 0;
   i3 = HEAP8[i9 >> 0] | 0;
   L9 : do if ((i3 & 255) > 31 | i3 << 24 >> 24 == 28) {
    do if (i3 << 24 >> 24 != 28) {
     if ((i3 & 255) < 247) {
      i1 = i6;
      i7 = 16;
      i6 = (i3 & 255) + -139 | 0;
      break;
     }
     if ((i3 & 255) < 251) {
      if (i6 >>> 0 >= i25 >>> 0) {
       i1 = 3;
       i22 = 440;
       break L5;
      }
      i1 = i9 + 2 | 0;
      i7 = 16;
      i6 = (HEAPU8[i6 >> 0] | ((i3 & 255) << 8) + -63232) + 108 | 0;
      break;
     }
     if (i3 << 24 >> 24 == -1) {
      i2 = i9 + 4 | 0;
      if (i2 >>> 0 >= i25 >>> 0) {
       i1 = 3;
       i22 = 440;
       break L5;
      }
      i1 = i9 + 5 | 0;
      i7 = i27;
      i6 = HEAPU8[i9 + 2 >> 0] << 16 | HEAPU8[i6 >> 0] << 24 | HEAPU8[i9 + 3 >> 0] << 8 | HEAPU8[i2 >> 0];
      break;
     } else {
      if (i6 >>> 0 >= i25 >>> 0) {
       i1 = 3;
       i22 = 440;
       break L5;
      }
      i1 = i9 + 2 | 0;
      i7 = 16;
      i6 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i6 >> 0] | 0) | 0;
      break;
     }
    } else {
     i2 = i9 + 2 | 0;
     if (i2 >>> 0 >= i25 >>> 0) {
      i1 = 3;
      i22 = 440;
      break L5;
     }
     i1 = i9 + 3 | 0;
     i7 = 16;
     i6 = (HEAPU8[i6 >> 0] << 8 | HEAPU8[i2 >> 0]) << 16 >> 16;
    } while (0);
    i2 = (HEAP32[i44 + 8 >> 2] | 0) + 276 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 - (i43 + 80) | 0) > 188) {
     i1 = 130;
     i22 = 440;
     break L5;
    }
    HEAP32[i2 >> 2] = i3 + 4;
    HEAP32[i3 >> 2] = i6 << i7;
   } else {
    i1 = HEAP32[i44 + 8 >> 2] | 0;
    i2 = HEAP32[i1 + 276 >> 2] | 0;
    switch (i3 & 255 | 0) {
    case 1:
     {
      i3 = i6;
      i9 = 19;
      i22 = 84;
      break L7;
     }
    case 3:
     {
      i22 = 24;
      break L7;
     }
    case 4:
     {
      i22 = 25;
      break L7;
     }
    case 5:
     {
      i22 = 26;
      break L7;
     }
    case 6:
     {
      i22 = 27;
      break L7;
     }
    case 7:
     {
      i22 = 28;
      break L7;
     }
    case 8:
     {
      i22 = 29;
      break L7;
     }
    case 9:
     {
      i22 = 30;
      break L7;
     }
    case 10:
     {
      i22 = 31;
      break L7;
     }
    case 11:
     {
      i22 = 32;
      break L7;
     }
    case 13:
     {
      i22 = 68;
      break L7;
     }
    case 14:
     {
      i22 = 69;
      break L7;
     }
    case 16:
     {
      i22 = 70;
      break L7;
     }
    case 18:
     {
      i22 = 71;
      break L7;
     }
    case 19:
     {
      i22 = 72;
      break L7;
     }
    case 20:
     {
      i22 = 73;
      break L7;
     }
    case 21:
     {
      i22 = 74;
      break L7;
     }
    case 22:
     {
      i22 = 75;
      break L7;
     }
    case 23:
     {
      i22 = 76;
      break L7;
     }
    case 24:
     {
      i22 = 77;
      break L7;
     }
    case 25:
     {
      i22 = 78;
      break L7;
     }
    case 26:
     {
      i22 = 79;
      break L7;
     }
    case 27:
     {
      i22 = 80;
      break L7;
     }
    case 29:
     {
      i22 = 81;
      break L7;
     }
    case 30:
     {
      i22 = 82;
      break L7;
     }
    case 31:
     {
      i22 = 83;
      break L7;
     }
    case 12:
     break;
    default:
     {
      i1 = i6;
      break L9;
     }
    }
    if (i6 >>> 0 >= i25 >>> 0) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    i3 = i9 + 2 | 0;
    switch (HEAPU8[i6 >> 0] | 0) {
    case 0:
     {
      i9 = 25;
      i22 = 84;
      break L7;
     }
    case 1:
     {
      i22 = 35;
      break L7;
     }
    case 2:
     {
      i22 = 36;
      break L7;
     }
    case 3:
     {
      i22 = 37;
      break L7;
     }
    case 4:
     {
      i22 = 38;
      break L7;
     }
    case 5:
     {
      i22 = 39;
      break L7;
     }
    case 6:
     {
      i22 = 40;
      break L7;
     }
    case 7:
     {
      i22 = 41;
      break L7;
     }
    case 8:
     {
      i22 = 42;
      break L7;
     }
    case 9:
     {
      i22 = 43;
      break L7;
     }
    case 10:
     {
      i22 = 44;
      break L7;
     }
    case 11:
     {
      i22 = 45;
      break L7;
     }
    case 12:
     {
      i22 = 46;
      break L7;
     }
    case 13:
     {
      i22 = 47;
      break L7;
     }
    case 14:
     {
      i22 = 48;
      break L7;
     }
    case 15:
     {
      i22 = 49;
      break L7;
     }
    case 16:
     {
      i22 = 50;
      break L7;
     }
    case 17:
     {
      i22 = 51;
      break L7;
     }
    case 18:
     {
      i22 = 52;
      break L7;
     }
    case 20:
     {
      i22 = 53;
      break L7;
     }
    case 21:
     {
      i22 = 54;
      break L7;
     }
    case 22:
     {
      i22 = 55;
      break L7;
     }
    case 23:
     {
      i22 = 56;
      break L7;
     }
    case 24:
     {
      i22 = 57;
      break L7;
     }
    case 26:
     {
      i22 = 58;
      break L7;
     }
    case 27:
     {
      i22 = 59;
      break L7;
     }
    case 28:
     {
      i22 = 60;
      break L7;
     }
    case 29:
     {
      i22 = 61;
      break L7;
     }
    case 30:
     {
      i22 = 62;
      break L7;
     }
    case 33:
     {
      i22 = 63;
      break L7;
     }
    case 34:
     {
      i22 = 64;
      break L7;
     }
    case 35:
     {
      i22 = 65;
      break L7;
     }
    case 36:
     {
      i22 = 66;
      break L7;
     }
    case 37:
     {
      i22 = 67;
      break L7;
     }
    default:
     i1 = i3;
    }
   } while (0);
   if (i1 >>> 0 < i25 >>> 0) i9 = i1; else {
    i1 = 0;
    i22 = 440;
    break L5;
   }
  }
  switch (i22 | 0) {
  case 24:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 20;
    break;
   }
  case 25:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 3;
    break;
   }
  case 26:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 4;
    break;
   }
  case 27:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 5;
    break;
   }
  case 28:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 6;
    break;
   }
  case 29:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 7;
    break;
   }
  case 30:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 53;
    break;
   }
  case 31:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 49;
    break;
   }
  case 32:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 51;
    break;
   }
  case 35:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 20;
    break;
   }
  case 36:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 19;
    break;
   }
  case 37:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 44;
    break;
   }
  case 38:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 45;
    break;
   }
  case 39:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 46;
    break;
   }
  case 40:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 56;
    break;
   }
  case 41:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 57;
    break;
   }
  case 42:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 42;
    break;
   }
  case 43:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 26;
    break;
   }
  case 44:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 27;
    break;
   }
  case 45:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 28;
    break;
   }
  case 46:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 29;
    break;
   }
  case 47:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 43;
    break;
   }
  case 48:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 30;
    break;
   }
  case 49:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 47;
    break;
   }
  case 50:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 54;
    break;
   }
  case 51:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 55;
    break;
   }
  case 52:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 35;
    break;
   }
  case 53:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 40;
    break;
   }
  case 54:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 41;
    break;
   }
  case 55:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 48;
    break;
   }
  case 56:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 31;
    break;
   }
  case 57:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 32;
    break;
   }
  case 58:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 33;
    break;
   }
  case 59:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 39;
    break;
   }
  case 60:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 36;
    break;
   }
  case 61:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 37;
    break;
   }
  case 62:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 38;
    break;
   }
  case 63:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 58;
    break;
   }
  case 64:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 15;
    break;
   }
  case 65:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 14;
    break;
   }
  case 66:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 16;
    break;
   }
  case 67:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = 17;
    break;
   }
  case 68:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 52;
    break;
   }
  case 69:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 18;
    break;
   }
  case 70:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 34;
    break;
   }
  case 71:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 21;
    break;
   }
  case 72:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 23;
    break;
   }
  case 73:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 24;
    break;
   }
  case 74:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 1;
    break;
   }
  case 75:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 2;
    break;
   }
  case 76:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 22;
    break;
   }
  case 77:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 10;
    break;
   }
  case 78:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 11;
    break;
   }
  case 79:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 13;
    break;
   }
  case 80:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 8;
    break;
   }
  case 81:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 50;
    break;
   }
  case 82:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 12;
    break;
   }
  case 83:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i6;
    i8 = 9;
    break;
   }
  case 84:
   {
    i22 = 0;
    i7 = i2 - (i1 + 80) | 0;
    i24 = i3;
    i8 = i9;
    break;
   }
  }
  i9 = i7 >> 2;
  i3 = HEAPU8[323380 + i8 >> 0] | 0;
  if (!(i3 & 128)) i10 = i9; else {
   i6 = i1 + 752 | 0;
   L96 : do if ((i7 | 0) > 0 ? (HEAP8[i6 >> 0] | 0) != 0 : 0) {
    switch (i8 | 0) {
    case 3:
    case 2:
     {
      i3 = i9 & 2;
      break;
     }
    case 24:
    case 23:
    case 1:
    case 22:
    case 21:
    case 20:
    case 19:
     {
      i3 = i9 & 1;
      break;
     }
    case 18:
     {
      i3 = (i9 & -5 | 0) == 1 & 1;
      break;
     }
    default:
     {
      i3 = i9;
      break L96;
     }
    }
    if (i3) {
     HEAP32[i1 + 744 >> 2] = (HEAP32[i43 + 80 >> 2] >> 16) + (HEAP32[i1 + 748 >> 2] | 0);
     if (HEAP8[i1 + 753 >> 0] | 0) {
      i1 = 0;
      i22 = 440;
      break L5;
     }
     i3 = i9 + -1 | 0;
    } else i3 = i9;
   } else i3 = i9; while (0);
   HEAP8[i6 >> 0] = 0;
   i10 = i3;
   i3 = 0;
  }
  i23 = i3 & 15;
  if ((i10 | 0) < (i23 | 0)) {
   i1 = 129;
   i22 = 440;
   break;
  }
  i9 = i2 + (0 - i23 << 2) | 0;
  i12 = i10 - i23 | 0;
  L109 : do switch (i8 | 0) {
  case 56:
   {
    i22 = 361;
    break L5;
   }
  case 18:
   {
    i22 = 362;
    break L5;
   }
  case 22:
  case 21:
  case 20:
  case 19:
   {
    if (i42) {
     FUNCTION_TABLE_viiii[HEAP32[i42 + 12 >> 2] & 15](HEAP32[i41 >> 2] | 0, ((i8 | 0) == 19 | (i8 | 0) == 21) & 1, (i12 | 0) / 2 | 0, i2 + (0 - (i23 + (i12 & -2)) << 2) | 0);
     i2 = (i12 | 0) / 2 | 0;
     i1 = HEAP32[i44 + 8 >> 2] | 0;
    } else i2 = (i12 | 0) / 2 | 0;
    i10 = i1 + 756 | 0;
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + i2;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 24:
  case 23:
   {
    if ((i12 | 0) > 0) {
     if (i42) {
      FUNCTION_TABLE_viiii[HEAP32[i42 + 12 >> 2] & 15](HEAP32[i41 >> 2] | 0, 0, (i12 | 0) / 2 | 0, i2 + (0 - (i23 + (i12 & -2)) << 2) | 0);
      i2 = (i12 | 0) / 2 | 0;
      i1 = HEAP32[i44 + 8 >> 2] | 0;
     } else i2 = (i12 | 0) / 2 | 0;
     i23 = i1 + 756 | 0;
     i1 = (HEAP32[i23 >> 2] | 0) + i2 | 0;
     HEAP32[i23 >> 2] = i1;
    } else i1 = HEAP32[i1 + 756 >> 2] | 0;
    if ((i24 + (i1 + 7 >> 3) | 0) >>> 0 >= i25 >>> 0) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    do if (i42) if ((i8 | 0) == 23) {
     FUNCTION_TABLE_viiii[HEAP32[i42 + 16 >> 2] & 15](HEAP32[i41 >> 2] | 0, HEAP16[(HEAP32[i43 + 20 >> 2] | 0) + 2 >> 1] | 0, i1, i24);
     break;
    } else {
     FUNCTION_TABLE_viii[HEAP32[i42 + 20 >> 2] & 31](HEAP32[i41 >> 2] | 0, i1, i24);
     break;
    } while (0);
    i10 = i43 + 80 | 0;
    i8 = i24 + ((HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 756 >> 2] | 0) + 7 >> 3) | 0;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 1:
   {
    i9 = HEAP32[i43 + 20 >> 2] | 0;
    do if (i9) {
     i7 = HEAP16[i9 >> 1] | 0;
     if (i7 << 16 >> 16 < 2) i8 = 0; else i8 = (HEAP16[(HEAP32[i9 + 12 >> 2] | 0) + ((i7 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
     i1 = HEAP16[i9 + 2 >> 1] | 0;
     if (((i1 << 16 >> 16 > 1 ? (i30 = HEAP32[i9 + 4 >> 2] | 0, i31 = (HEAP32[i9 + 8 >> 2] | 0) + ((i1 << 16 >> 16) + -1) | 0, (HEAP32[i30 + (i8 << 3) >> 2] | 0) == (HEAP32[i30 + ((i1 << 16 >> 16) + -1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i30 + (i8 << 3) + 4 >> 2] | 0) == (HEAP32[i30 + ((i1 << 16 >> 16) + -1 << 3) + 4 >> 2] | 0) : 0) ? (HEAP8[i31 >> 0] | 0) == 1 : 0) {
      HEAP16[i9 + 2 >> 1] = i1 + -1 << 16 >> 16;
      i1 = i1 + -1 << 16 >> 16;
     }
     if (i7 << 16 >> 16 > 0) {
      i6 = (i1 << 16 >> 16) + -1 | 0;
      if ((i8 | 0) == (i6 | 0)) {
       HEAP16[i9 >> 1] = i7 + -1 << 16 >> 16;
       HEAP16[i9 + 2 >> 1] = i1 + -1 << 16 >> 16;
       break;
      } else {
       HEAP16[(HEAP32[i9 + 12 >> 2] | 0) + ((i7 << 16 >> 16) + -1 << 1) >> 1] = i6;
       break;
      }
     }
    } while (0);
    HEAP8[i43 + 64 >> 0] = 0;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i4 = (HEAP32[i2 + (-2 - i23 << 2) >> 2] | 0) + i4 | 0;
    i1 = (HEAP32[i2 + (((i3 | -16) ^ 15) << 2) >> 2] | 0) + i5 | 0;
    i2 = i26;
    break;
   }
  case 3:
   {
    i7 = HEAP32[i43 + 20 >> 2] | 0;
    do if (i7) {
     i8 = HEAP16[i7 >> 1] | 0;
     if (i8 << 16 >> 16 < 2) i9 = 0; else i9 = (HEAP16[(HEAP32[i7 + 12 >> 2] | 0) + ((i8 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
     i1 = HEAP16[i7 + 2 >> 1] | 0;
     if (((i1 << 16 >> 16 > 1 ? (i32 = HEAP32[i7 + 4 >> 2] | 0, i33 = (HEAP32[i7 + 8 >> 2] | 0) + ((i1 << 16 >> 16) + -1) | 0, (HEAP32[i32 + (i9 << 3) >> 2] | 0) == (HEAP32[i32 + ((i1 << 16 >> 16) + -1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i32 + (i9 << 3) + 4 >> 2] | 0) == (HEAP32[i32 + ((i1 << 16 >> 16) + -1 << 3) + 4 >> 2] | 0) : 0) ? (HEAP8[i33 >> 0] | 0) == 1 : 0) {
      HEAP16[i7 + 2 >> 1] = i1 + -1 << 16 >> 16;
      i1 = i1 + -1 << 16 >> 16;
     }
     if (i8 << 16 >> 16 > 0) {
      i6 = (i1 << 16 >> 16) + -1 | 0;
      if ((i9 | 0) == (i6 | 0)) {
       HEAP16[i7 >> 1] = i8 + -1 << 16 >> 16;
       HEAP16[i7 + 2 >> 1] = i1 + -1 << 16 >> 16;
       break;
      } else {
       HEAP16[(HEAP32[i7 + 12 >> 2] | 0) + ((i8 << 16 >> 16) + -1 << 1) >> 1] = i6;
       break;
      }
     }
    } while (0);
    HEAP8[i43 + 64 >> 0] = 0;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i1 = (HEAP32[i2 + (((i3 | -16) ^ 15) << 2) >> 2] | 0) + i5 | 0;
    i2 = i26;
    break;
   }
  case 2:
   {
    i7 = HEAP32[i43 + 20 >> 2] | 0;
    do if (i7) {
     i9 = HEAP16[i7 >> 1] | 0;
     if (i9 << 16 >> 16 < 2) i8 = 0; else i8 = (HEAP16[(HEAP32[i7 + 12 >> 2] | 0) + ((i9 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
     i1 = HEAP16[i7 + 2 >> 1] | 0;
     if (((i1 << 16 >> 16 > 1 ? (i34 = HEAP32[i7 + 4 >> 2] | 0, i35 = (HEAP32[i7 + 8 >> 2] | 0) + ((i1 << 16 >> 16) + -1) | 0, (HEAP32[i34 + (i8 << 3) >> 2] | 0) == (HEAP32[i34 + ((i1 << 16 >> 16) + -1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i34 + (i8 << 3) + 4 >> 2] | 0) == (HEAP32[i34 + ((i1 << 16 >> 16) + -1 << 3) + 4 >> 2] | 0) : 0) ? (HEAP8[i35 >> 0] | 0) == 1 : 0) {
      HEAP16[i7 + 2 >> 1] = i1 + -1 << 16 >> 16;
      i1 = i1 + -1 << 16 >> 16;
     }
     if (i9 << 16 >> 16 > 0) {
      i6 = (i1 << 16 >> 16) + -1 | 0;
      if ((i8 | 0) == (i6 | 0)) {
       HEAP16[i7 >> 1] = i9 + -1 << 16 >> 16;
       HEAP16[i7 + 2 >> 1] = i1 + -1 << 16 >> 16;
       break;
      } else {
       HEAP16[(HEAP32[i7 + 12 >> 2] | 0) + ((i9 << 16 >> 16) + -1 << 1) >> 1] = i6;
       break;
      }
     }
    } while (0);
    HEAP8[i43 + 64 >> 0] = 0;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i4 = (HEAP32[i2 + (((i3 | -16) ^ 15) << 2) >> 2] | 0) + i4 | 0;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 4:
   {
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    if ((i12 + 1 | 0) >>> 0 < 3) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    i1 = HEAP32[i43 + 12 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + ((i12 | 0) / 2 | 0) + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (_FT_GlyphLoader_CheckPoints(i1, (i12 | 0) / 2 | 0, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    if ((i12 | 0) < 2) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    i2 = i2 + (0 - (i23 + (i12 & -2)) << 2) | 0;
    i1 = HEAP32[i44 + 8 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i1 + 276 >> 2] | 0) >>> 0) {
     i9 = i1;
     i6 = i2;
     i1 = i5;
     while (1) {
      i4 = (HEAP32[i6 >> 2] | 0) + i4 | 0;
      i1 = (HEAP32[i6 + 4 >> 2] | 0) + i1 | 0;
      i2 = HEAP32[i43 + 20 >> 2] | 0;
      if (!(HEAP8[i43 + 65 >> 0] | 0)) {
       i3 = i2 + 2 | 0;
       i2 = i9;
      } else {
       i22 = HEAP32[i2 + 4 >> 2] | 0;
       i23 = HEAP16[i2 + 2 >> 1] | 0;
       i3 = (HEAP32[i2 + 8 >> 2] | 0) + i23 | 0;
       HEAP32[i22 + (i23 << 3) >> 2] = i4 >> 16;
       HEAP32[i22 + (i23 << 3) + 4 >> 2] = i1 >> 16;
       HEAP8[i3 >> 0] = 1;
       i3 = i2 + 2 | 0;
       i2 = HEAP32[i44 + 8 >> 2] | 0;
      }
      HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
      i6 = i6 + 8 | 0;
      if (i6 >>> 0 >= (HEAP32[i2 + 276 >> 2] | 0) >>> 0) {
       i10 = i43 + 80 | 0;
       i8 = i24;
       i7 = i25;
       i2 = i26;
       break;
      } else i9 = i2;
     }
    } else {
     i10 = i43 + 80 | 0;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    }
    break;
   }
  case 6:
  case 5:
   {
    i2 = (i8 | 0) == 5 & 1;
    if ((i12 | 0) < 0) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    if ((i10 | 0) != (i23 | 0)) {
     if (_cff_builder_start_point(i43, i4, i5) | 0) {
      i1 = 0;
      i22 = 440;
      break L5;
     }
     i1 = HEAP32[i43 + 12 >> 2] | 0;
     if (((HEAP16[i1 + 22 >> 1] | 0) + i12 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (_FT_GlyphLoader_CheckPoints(i1, i12, 0) | 0) != 0 : 0) {
      i1 = 0;
      i22 = 440;
      break L5;
     }
     if ((i43 + 80 | 0) >>> 0 < (HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) >>> 0) {
      i3 = i43 + 80 | 0;
      i9 = i2;
      i1 = i5;
      while (1) {
       i23 = (i9 | 0) == 0;
       i2 = HEAP32[i3 >> 2] | 0;
       i1 = (i23 ? i2 : 0) + i1 | 0;
       i4 = (i23 ? 0 : i2) + i4 | 0;
       i2 = HEAP32[i43 + 12 >> 2] | 0;
       if (((HEAP16[i2 + 22 >> 1] | 0) + 1 + (HEAP16[i2 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i2 + 4 >> 2] | 0) >>> 0 ? (_FT_GlyphLoader_CheckPoints(i2, 1, 0) | 0) != 0 : 0) {
        i1 = 0;
        i22 = 440;
        break L5;
       }
       i2 = HEAP32[i43 + 20 >> 2] | 0;
       if (!(HEAP8[i43 + 65 >> 0] | 0)) i2 = i2 + 2 | 0; else {
        i21 = HEAP32[i2 + 4 >> 2] | 0;
        i22 = HEAP16[i2 + 2 >> 1] | 0;
        i23 = (HEAP32[i2 + 8 >> 2] | 0) + i22 | 0;
        HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
        HEAP32[i21 + (i22 << 3) + 4 >> 2] = i1 >> 16;
        HEAP8[i23 >> 0] = 1;
        i2 = i2 + 2 | 0;
       }
       HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
       i3 = i3 + 4 | 0;
       if (i3 >>> 0 >= (HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) >>> 0) {
        i10 = i43 + 80 | 0;
        i8 = i24;
        i7 = i25;
        i2 = i26;
        break;
       } else i9 = i9 ^ 1;
      }
     } else {
      i10 = i43 + 80 | 0;
      i8 = i24;
      i7 = i25;
      i1 = i5;
      i2 = i26;
     }
    } else {
     i10 = i9;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    }
    break;
   }
  case 7:
   {
    if ((i12 | 0) < 6) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    if (((i12 - ((i12 | 0) % 6 | 0) + 1 | 0) >>> 0 >= 3 ? (i36 = HEAP32[i43 + 12 >> 2] | 0, ((HEAP16[i36 + 22 >> 1] | 0) + ((i12 - ((i12 | 0) % 6 | 0) | 0) / 2 | 0) + (HEAP16[i36 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i36 + 4 >> 2] | 0) >>> 0) : 0) ? (_FT_GlyphLoader_CheckPoints(i36, (i12 - ((i12 | 0) % 6 | 0) | 0) / 2 | 0, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i1 = i2 + (0 - (i23 + (i12 - ((i12 | 0) % 6 | 0))) << 2) | 0;
    if (i1 >>> 0 < (HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) >>> 0) {
     i2 = i5;
     while (1) {
      i3 = (HEAP32[i1 >> 2] | 0) + i4 | 0;
      i4 = (HEAP32[i1 + 4 >> 2] | 0) + i2 | 0;
      i2 = HEAP32[i43 + 20 >> 2] | 0;
      if (!(HEAP8[i43 + 65 >> 0] | 0)) {
       i9 = i2;
       i5 = 0;
       i2 = i2 + 2 | 0;
      } else {
       i23 = HEAP32[i2 + 4 >> 2] | 0;
       i5 = HEAP16[i2 + 2 >> 1] | 0;
       i9 = (HEAP32[i2 + 8 >> 2] | 0) + i5 | 0;
       HEAP32[i23 + (i5 << 3) >> 2] = i3 >> 16;
       HEAP32[i23 + (i5 << 3) + 4 >> 2] = i4 >> 16;
       HEAP8[i9 >> 0] = 2;
       i9 = HEAP32[i43 + 20 >> 2] | 0;
       i5 = HEAP8[i43 + 65 >> 0] | 0;
       i2 = i2 + 2 | 0;
      }
      HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      i6 = (HEAP32[i1 + 8 >> 2] | 0) + i3 | 0;
      i7 = (HEAP32[i1 + 12 >> 2] | 0) + i4 | 0;
      if (!(i5 << 24 >> 24)) {
       i3 = i9;
       i5 = 0;
       i2 = i9 + 2 | 0;
      } else {
       i23 = HEAP32[i9 + 4 >> 2] | 0;
       i2 = i9 + 2 | 0;
       i5 = HEAP16[i2 >> 1] | 0;
       i3 = (HEAP32[i9 + 8 >> 2] | 0) + i5 | 0;
       HEAP32[i23 + (i5 << 3) >> 2] = i6 >> 16;
       HEAP32[i23 + (i5 << 3) + 4 >> 2] = i7 >> 16;
       HEAP8[i3 >> 0] = 2;
       i3 = HEAP32[i43 + 20 >> 2] | 0;
       i5 = HEAP8[i43 + 65 >> 0] | 0;
      }
      HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      i4 = (HEAP32[i1 + 16 >> 2] | 0) + i6 | 0;
      i9 = (HEAP32[i1 + 20 >> 2] | 0) + i7 | 0;
      if (!(i5 << 24 >> 24)) i2 = i3 + 2 | 0; else {
       i21 = HEAP32[i3 + 4 >> 2] | 0;
       i2 = i3 + 2 | 0;
       i22 = HEAP16[i2 >> 1] | 0;
       i23 = (HEAP32[i3 + 8 >> 2] | 0) + i22 | 0;
       HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
       HEAP32[i21 + (i22 << 3) + 4 >> 2] = i9 >> 16;
       HEAP8[i23 >> 0] = 1;
      }
      HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      i1 = i1 + 24 | 0;
      if (i1 >>> 0 >= (HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) >>> 0) {
       i10 = i43 + 80 | 0;
       i8 = i24;
       i7 = i25;
       i1 = i9;
       i2 = i26;
       break;
      } else i2 = i9;
     }
    } else {
     i10 = i43 + 80 | 0;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    }
    break;
   }
  case 13:
   {
    if ((i12 | 0) < 4) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i1 = i2 + (0 - ((i12 & -3) + i23) << 2) | 0;
    if (!(i12 & 1)) {
     i3 = i1;
     i2 = i12 & -3;
    } else {
     i3 = i2 + (1 - ((i12 & -3) + i23) << 2) | 0;
     i2 = (i12 & -3) + -1 | 0;
     i4 = (HEAP32[i1 >> 2] | 0) + i4 | 0;
    }
    i1 = ((i2 | 0) / 4 | 0) * 3 | 0;
    if (((i2 + 3 | 0) >>> 0 >= 7 ? (i37 = HEAP32[i43 + 12 >> 2] | 0, ((HEAP16[i37 + 22 >> 1] | 0) + i1 + (HEAP16[i37 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i37 + 4 >> 2] | 0) >>> 0) : 0) ? (_FT_GlyphLoader_CheckPoints(i37, i1, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    if (i3 >>> 0 < (HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) >>> 0) {
     i6 = i3;
     i1 = i5;
     do {
      i2 = (HEAP32[i6 >> 2] | 0) + i1 | 0;
      i1 = HEAP32[i43 + 20 >> 2] | 0;
      if (!(HEAP8[i43 + 65 >> 0] | 0)) {
       i9 = i1;
       i3 = 0;
       i1 = i1 + 2 | 0;
      } else {
       i23 = HEAP32[i1 + 4 >> 2] | 0;
       i3 = HEAP16[i1 + 2 >> 1] | 0;
       i9 = (HEAP32[i1 + 8 >> 2] | 0) + i3 | 0;
       HEAP32[i23 + (i3 << 3) >> 2] = i4 >> 16;
       HEAP32[i23 + (i3 << 3) + 4 >> 2] = i2 >> 16;
       HEAP8[i9 >> 0] = 2;
       i9 = HEAP32[i43 + 20 >> 2] | 0;
       i3 = HEAP8[i43 + 65 >> 0] | 0;
       i1 = i1 + 2 | 0;
      }
      HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
      i4 = (HEAP32[i6 + 4 >> 2] | 0) + i4 | 0;
      i5 = (HEAP32[i6 + 8 >> 2] | 0) + i2 | 0;
      if (!(i3 << 24 >> 24)) {
       i2 = i9;
       i3 = 0;
       i1 = i9 + 2 | 0;
      } else {
       i23 = HEAP32[i9 + 4 >> 2] | 0;
       i1 = i9 + 2 | 0;
       i3 = HEAP16[i1 >> 1] | 0;
       i2 = (HEAP32[i9 + 8 >> 2] | 0) + i3 | 0;
       HEAP32[i23 + (i3 << 3) >> 2] = i4 >> 16;
       HEAP32[i23 + (i3 << 3) + 4 >> 2] = i5 >> 16;
       HEAP8[i2 >> 0] = 2;
       i2 = HEAP32[i43 + 20 >> 2] | 0;
       i3 = HEAP8[i43 + 65 >> 0] | 0;
      }
      HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
      i1 = (HEAP32[i6 + 12 >> 2] | 0) + i5 | 0;
      if (!(i3 << 24 >> 24)) i2 = i2 + 2 | 0; else {
       i21 = HEAP32[i2 + 4 >> 2] | 0;
       i23 = i2 + 2 | 0;
       i22 = HEAP16[i23 >> 1] | 0;
       i2 = (HEAP32[i2 + 8 >> 2] | 0) + i22 | 0;
       HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
       HEAP32[i21 + (i22 << 3) + 4 >> 2] = i1 >> 16;
       HEAP8[i2 >> 0] = 1;
       i2 = i23;
      }
      HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      i6 = i6 + 16 | 0;
     } while (i6 >>> 0 < (HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) >>> 0);
     i10 = i43 + 80 | 0;
     i8 = i24;
     i7 = i25;
     i2 = i26;
    } else {
     i10 = i43 + 80 | 0;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    }
    break;
   }
  case 8:
   {
    if ((i12 | 0) < 4) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i1 = i2 + (0 - ((i12 & -3) + i23) << 2) | 0;
    if (!(i12 & 1)) {
     i6 = i1;
     i3 = i12 & -3;
     i1 = i5;
    } else {
     i6 = i2 + (1 - ((i12 & -3) + i23) << 2) | 0;
     i3 = (i12 & -3) + -1 | 0;
     i1 = (HEAP32[i1 >> 2] | 0) + i5 | 0;
    }
    i2 = ((i3 | 0) / 4 | 0) * 3 | 0;
    if (((i3 + 3 | 0) >>> 0 >= 7 ? (i38 = HEAP32[i43 + 12 >> 2] | 0, ((HEAP16[i38 + 22 >> 1] | 0) + i2 + (HEAP16[i38 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i38 + 4 >> 2] | 0) >>> 0) : 0) ? (_FT_GlyphLoader_CheckPoints(i38, i2, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    if (i6 >>> 0 < (HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) >>> 0) {
     do {
      i3 = (HEAP32[i6 >> 2] | 0) + i4 | 0;
      i2 = HEAP32[i43 + 20 >> 2] | 0;
      if (!(HEAP8[i43 + 65 >> 0] | 0)) {
       i9 = i2;
       i4 = 0;
       i2 = i2 + 2 | 0;
      } else {
       i23 = HEAP32[i2 + 4 >> 2] | 0;
       i4 = HEAP16[i2 + 2 >> 1] | 0;
       i9 = (HEAP32[i2 + 8 >> 2] | 0) + i4 | 0;
       HEAP32[i23 + (i4 << 3) >> 2] = i3 >> 16;
       HEAP32[i23 + (i4 << 3) + 4 >> 2] = i1 >> 16;
       HEAP8[i9 >> 0] = 2;
       i9 = HEAP32[i43 + 20 >> 2] | 0;
       i4 = HEAP8[i43 + 65 >> 0] | 0;
       i2 = i2 + 2 | 0;
      }
      HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      i7 = (HEAP32[i6 + 4 >> 2] | 0) + i3 | 0;
      i1 = (HEAP32[i6 + 8 >> 2] | 0) + i1 | 0;
      if (!(i4 << 24 >> 24)) {
       i3 = i9;
       i5 = 0;
       i2 = i9 + 2 | 0;
      } else {
       i23 = HEAP32[i9 + 4 >> 2] | 0;
       i2 = i9 + 2 | 0;
       i5 = HEAP16[i2 >> 1] | 0;
       i3 = (HEAP32[i9 + 8 >> 2] | 0) + i5 | 0;
       HEAP32[i23 + (i5 << 3) >> 2] = i7 >> 16;
       HEAP32[i23 + (i5 << 3) + 4 >> 2] = i1 >> 16;
       HEAP8[i3 >> 0] = 2;
       i3 = HEAP32[i43 + 20 >> 2] | 0;
       i5 = HEAP8[i43 + 65 >> 0] | 0;
      }
      HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      i4 = (HEAP32[i6 + 12 >> 2] | 0) + i7 | 0;
      if (!(i5 << 24 >> 24)) i2 = i3 + 2 | 0; else {
       i21 = HEAP32[i3 + 4 >> 2] | 0;
       i2 = i3 + 2 | 0;
       i22 = HEAP16[i2 >> 1] | 0;
       i23 = (HEAP32[i3 + 8 >> 2] | 0) + i22 | 0;
       HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
       HEAP32[i21 + (i22 << 3) + 4 >> 2] = i1 >> 16;
       HEAP8[i23 >> 0] = 1;
      }
      HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      i6 = i6 + 16 | 0;
     } while (i6 >>> 0 < (HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) >>> 0);
     i10 = i43 + 80 | 0;
     i8 = i24;
     i7 = i25;
     i2 = i26;
    } else {
     i10 = i43 + 80 | 0;
     i8 = i24;
     i7 = i25;
     i2 = i26;
    }
    break;
   }
  case 9:
  case 12:
   {
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    if ((i12 | 0) < 4) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    if (((i12 & -3) + 3 | 0) >>> 0 < 7) {
     i10 = i43 + 80 | 0;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    } else {
     i1 = HEAP32[i43 + 12 >> 2] | 0;
     if (((HEAP16[i1 + 22 >> 1] | 0) + (((i12 & -3 | 0) / 4 | 0) * 3 | 0) + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (_FT_GlyphLoader_CheckPoints(i1, ((i12 & -3 | 0) / 4 | 0) * 3 | 0, 0) | 0) != 0 : 0) {
      i1 = 129;
      i22 = 440;
      break L5;
     }
     i10 = i2 + (0 - (i23 + (i12 & -3)) << 2) | 0;
     i7 = i12 & -3;
     i6 = (i8 | 0) == 9 & 1;
     i1 = i5;
     while (1) {
      i7 = i7 + -4 | 0;
      i2 = HEAP32[i10 >> 2] | 0;
      if (!i6) {
       i2 = i2 + i1 | 0;
       i1 = HEAP32[i43 + 20 >> 2] | 0;
       if (!(HEAP8[i43 + 65 >> 0] | 0)) {
        i9 = i1;
        i5 = 0;
        i1 = i1 + 2 | 0;
       } else {
        i23 = HEAP32[i1 + 4 >> 2] | 0;
        i5 = HEAP16[i1 + 2 >> 1] | 0;
        i9 = (HEAP32[i1 + 8 >> 2] | 0) + i5 | 0;
        HEAP32[i23 + (i5 << 3) >> 2] = i4 >> 16;
        HEAP32[i23 + (i5 << 3) + 4 >> 2] = i2 >> 16;
        HEAP8[i9 >> 0] = 2;
        i9 = HEAP32[i43 + 20 >> 2] | 0;
        i5 = HEAP8[i43 + 65 >> 0] | 0;
        i1 = i1 + 2 | 0;
       }
       HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
       i3 = (HEAP32[i10 + 4 >> 2] | 0) + i4 | 0;
       i1 = (HEAP32[i10 + 8 >> 2] | 0) + i2 | 0;
       if (!(i5 << 24 >> 24)) i2 = i9 + 2 | 0; else {
        i21 = HEAP32[i9 + 4 >> 2] | 0;
        i2 = i9 + 2 | 0;
        i22 = HEAP16[i2 >> 1] | 0;
        i23 = (HEAP32[i9 + 8 >> 2] | 0) + i22 | 0;
        HEAP32[i21 + (i22 << 3) >> 2] = i3 >> 16;
        HEAP32[i21 + (i22 << 3) + 4 >> 2] = i1 >> 16;
        HEAP8[i23 >> 0] = 2;
       }
       HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
       i4 = (HEAP32[i10 + 12 >> 2] | 0) + i3 | 0;
       if ((i7 | 0) == 1) i1 = (HEAP32[i10 + 16 >> 2] | 0) + i1 | 0;
       i2 = HEAP32[i43 + 20 >> 2] | 0;
       if (!(HEAP8[i43 + 65 >> 0] | 0)) i2 = i2 + 2 | 0; else {
        i21 = HEAP32[i2 + 4 >> 2] | 0;
        i22 = HEAP16[i2 + 2 >> 1] | 0;
        i23 = (HEAP32[i2 + 8 >> 2] | 0) + i22 | 0;
        HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
        HEAP32[i21 + (i22 << 3) + 4 >> 2] = i1 >> 16;
        HEAP8[i23 >> 0] = 1;
        i2 = i2 + 2 | 0;
       }
       HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      } else {
       i3 = i2 + i4 | 0;
       i2 = HEAP32[i43 + 20 >> 2] | 0;
       if (!(HEAP8[i43 + 65 >> 0] | 0)) {
        i9 = i2;
        i5 = 0;
        i2 = i2 + 2 | 0;
       } else {
        i23 = HEAP32[i2 + 4 >> 2] | 0;
        i5 = HEAP16[i2 + 2 >> 1] | 0;
        i9 = (HEAP32[i2 + 8 >> 2] | 0) + i5 | 0;
        HEAP32[i23 + (i5 << 3) >> 2] = i3 >> 16;
        HEAP32[i23 + (i5 << 3) + 4 >> 2] = i1 >> 16;
        HEAP8[i9 >> 0] = 2;
        i9 = HEAP32[i43 + 20 >> 2] | 0;
        i5 = HEAP8[i43 + 65 >> 0] | 0;
        i2 = i2 + 2 | 0;
       }
       HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
       i4 = (HEAP32[i10 + 4 >> 2] | 0) + i3 | 0;
       i2 = (HEAP32[i10 + 8 >> 2] | 0) + i1 | 0;
       if (!(i5 << 24 >> 24)) i1 = i9 + 2 | 0; else {
        i21 = HEAP32[i9 + 4 >> 2] | 0;
        i1 = i9 + 2 | 0;
        i22 = HEAP16[i1 >> 1] | 0;
        i23 = (HEAP32[i9 + 8 >> 2] | 0) + i22 | 0;
        HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
        HEAP32[i21 + (i22 << 3) + 4 >> 2] = i2 >> 16;
        HEAP8[i23 >> 0] = 2;
       }
       HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
       i1 = (HEAP32[i10 + 12 >> 2] | 0) + i2 | 0;
       if ((i7 | 0) == 1) i4 = (HEAP32[i10 + 16 >> 2] | 0) + i4 | 0;
       i2 = HEAP32[i43 + 20 >> 2] | 0;
       if (!(HEAP8[i43 + 65 >> 0] | 0)) i2 = i2 + 2 | 0; else {
        i21 = HEAP32[i2 + 4 >> 2] | 0;
        i22 = HEAP16[i2 + 2 >> 1] | 0;
        i23 = (HEAP32[i2 + 8 >> 2] | 0) + i22 | 0;
        HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
        HEAP32[i21 + (i22 << 3) + 4 >> 2] = i1 >> 16;
        HEAP8[i23 >> 0] = 1;
        i2 = i2 + 2 | 0;
       }
       HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
      }
      if ((i7 | 0) <= 3) {
       i10 = i43 + 80 | 0;
       i8 = i24;
       i7 = i25;
       i2 = i26;
       break;
      } else {
       i10 = i10 + 16 | 0;
       i6 = i6 ^ 1;
      }
     }
    }
    break;
   }
  case 11:
   {
    if ((i12 | 0) < 8) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    i11 = ((i12 & -2) + -6 | 0) / 2 | 0;
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    if (((i11 + 3 | 0) != 0 ? (i28 = HEAP32[i43 + 12 >> 2] | 0, ((HEAP16[i28 + 22 >> 1] | 0) + (i11 + 3) + (HEAP16[i28 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i28 + 4 >> 2] | 0) >>> 0) : 0) ? (_FT_GlyphLoader_CheckPoints(i28, i11 + 3 | 0, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i8 = 0 - (i23 + (i12 & -2)) | 0;
    i7 = i2 + (i8 << 2) | 0;
    i4 = (HEAP32[i7 >> 2] | 0) + i4 | 0;
    i6 = (HEAP32[i2 + (1 - (i23 + (i12 & -2)) << 2) >> 2] | 0) + i5 | 0;
    i1 = HEAP32[i43 + 20 >> 2] | 0;
    i5 = HEAP8[i43 + 65 >> 0] | 0;
    if (((i12 & -2) + -6 | 0) > 1) {
     i9 = i3 & 15;
     i10 = (i11 << 1) + -4 - i9 - (i10 - i9 & -2) | 0;
     i9 = i5;
     i8 = i6;
     i6 = i5 << 24 >> 24 == 0;
     i5 = i11;
     while (1) {
      if (i6) {
       i3 = i1;
       i1 = i1 + 2 | 0;
      } else {
       i22 = HEAP32[i1 + 4 >> 2] | 0;
       i23 = i1 + 2 | 0;
       i9 = HEAP16[i23 >> 1] | 0;
       i3 = (HEAP32[i1 + 8 >> 2] | 0) + i9 | 0;
       HEAP32[i22 + (i9 << 3) >> 2] = i4 >> 16;
       HEAP32[i22 + (i9 << 3) + 4 >> 2] = i8 >> 16;
       HEAP8[i3 >> 0] = 1;
       i3 = HEAP32[i43 + 20 >> 2] | 0;
       i9 = HEAP8[i43 + 65 >> 0] | 0;
       i1 = i23;
      }
      HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
      i6 = i7;
      i7 = i7 + 8 | 0;
      i4 = (HEAP32[i7 >> 2] | 0) + i4 | 0;
      i8 = (HEAP32[i6 + 12 >> 2] | 0) + i8 | 0;
      i6 = i9 << 24 >> 24 == 0;
      if ((i5 | 0) <= 1) break; else {
       i1 = i3;
       i5 = i5 + -1 | 0;
      }
     }
     if (i6) {
      i1 = i3;
      i9 = i8;
      i3 = i10 + 4 | 0;
      i22 = 272;
     } else {
      i1 = i3;
      i9 = i8;
      i3 = i10 + 4 | 0;
      i22 = 273;
     }
    } else if (!(i5 << 24 >> 24)) {
     i9 = i6;
     i3 = i8;
     i22 = 272;
    } else {
     i9 = i6;
     i3 = i8;
     i22 = 273;
    }
    if ((i22 | 0) == 272) {
     i8 = i1;
     i5 = 0;
     i1 = i1 + 2 | 0;
     i7 = i3;
    } else if ((i22 | 0) == 273) {
     i23 = HEAP32[i1 + 4 >> 2] | 0;
     i7 = i1 + 2 | 0;
     i5 = HEAP16[i7 >> 1] | 0;
     i8 = (HEAP32[i1 + 8 >> 2] | 0) + i5 | 0;
     HEAP32[i23 + (i5 << 3) >> 2] = i4 >> 16;
     HEAP32[i23 + (i5 << 3) + 4 >> 2] = i9 >> 16;
     HEAP8[i8 >> 0] = 2;
     i8 = HEAP32[i43 + 20 >> 2] | 0;
     i5 = HEAP8[i43 + 65 >> 0] | 0;
     i1 = i7;
     i7 = i3;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (i7 + 2 << 2) >> 2] | 0) + i4 | 0;
    i6 = (HEAP32[i2 + (i7 + 3 << 2) >> 2] | 0) + i9 | 0;
    if (!(i5 << 24 >> 24)) {
     i3 = i8;
     i5 = 0;
     i1 = i8 + 2 | 0;
    } else {
     i23 = HEAP32[i8 + 4 >> 2] | 0;
     i1 = i8 + 2 | 0;
     i5 = HEAP16[i1 >> 1] | 0;
     i3 = (HEAP32[i8 + 8 >> 2] | 0) + i5 | 0;
     HEAP32[i23 + (i5 << 3) >> 2] = i4 >> 16;
     HEAP32[i23 + (i5 << 3) + 4 >> 2] = i6 >> 16;
     HEAP8[i3 >> 0] = 2;
     i3 = HEAP32[i43 + 20 >> 2] | 0;
     i5 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (i7 + 4 << 2) >> 2] | 0) + i4 | 0;
    i2 = (HEAP32[i2 + (i7 + 5 << 2) >> 2] | 0) + i6 | 0;
    if (!(i5 << 24 >> 24)) i1 = i3 + 2 | 0; else {
     i21 = HEAP32[i3 + 4 >> 2] | 0;
     i1 = i3 + 2 | 0;
     i22 = HEAP16[i1 >> 1] | 0;
     i23 = (HEAP32[i3 + 8 >> 2] | 0) + i22 | 0;
     HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
     HEAP32[i21 + (i22 << 3) + 4 >> 2] = i2 >> 16;
     HEAP8[i23 >> 0] = 1;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i1 = i2;
    i2 = i26;
    break;
   }
  case 10:
   {
    if ((i12 | 0) < 8) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i1 = (((i12 + -2 | 0) / 6 | 0) * 3 | 0) + 2 | 0;
    if (((i1 | 0) != 0 ? (i29 = HEAP32[i43 + 12 >> 2] | 0, ((HEAP16[i29 + 22 >> 1] | 0) + i1 + (HEAP16[i29 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i29 + 4 >> 2] | 0) >>> 0) : 0) ? (_FT_GlyphLoader_CheckPoints(i29, i1, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i8 = i2 + (-2 - i23 + (2 - i12) + ((i12 + -2 | 0) % 6 | 0) << 2) | 0;
    i1 = HEAP8[i43 + 65 >> 0] | 0;
    i9 = i1;
    i3 = HEAP32[i43 + 20 >> 2] | 0;
    i4 = (HEAP32[i8 >> 2] | 0) + i4 | 0;
    i6 = (HEAP32[i2 + (-2 - i23 + (2 - i12) + ((i12 + -2 | 0) % 6 | 0) + 1 << 2) >> 2] | 0) + i5 | 0;
    i1 = i1 << 24 >> 24 == 0;
    i7 = (i12 + -2 | 0) / 6 | 0;
    while (1) {
     if (i1) {
      i5 = i3;
      i2 = i9;
      i1 = i3 + 2 | 0;
     } else {
      i23 = HEAP32[i3 + 4 >> 2] | 0;
      i1 = i3 + 2 | 0;
      i2 = HEAP16[i1 >> 1] | 0;
      i5 = (HEAP32[i3 + 8 >> 2] | 0) + i2 | 0;
      HEAP32[i23 + (i2 << 3) >> 2] = i4 >> 16;
      HEAP32[i23 + (i2 << 3) + 4 >> 2] = i6 >> 16;
      HEAP8[i5 >> 0] = 2;
      i5 = HEAP32[i43 + 20 >> 2] | 0;
      i2 = HEAP8[i43 + 65 >> 0] | 0;
     }
     HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
     i3 = (HEAP32[i8 + 8 >> 2] | 0) + i4 | 0;
     i4 = (HEAP32[i8 + 12 >> 2] | 0) + i6 | 0;
     if (!(i2 << 24 >> 24)) {
      i6 = i5;
      i2 = 0;
      i1 = i5 + 2 | 0;
     } else {
      i23 = HEAP32[i5 + 4 >> 2] | 0;
      i1 = i5 + 2 | 0;
      i2 = HEAP16[i1 >> 1] | 0;
      i6 = (HEAP32[i5 + 8 >> 2] | 0) + i2 | 0;
      HEAP32[i23 + (i2 << 3) >> 2] = i3 >> 16;
      HEAP32[i23 + (i2 << 3) + 4 >> 2] = i4 >> 16;
      HEAP8[i6 >> 0] = 2;
      i6 = HEAP32[i43 + 20 >> 2] | 0;
      i2 = HEAP8[i43 + 65 >> 0] | 0;
     }
     HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
     i3 = (HEAP32[i8 + 16 >> 2] | 0) + i3 | 0;
     i5 = (HEAP32[i8 + 20 >> 2] | 0) + i4 | 0;
     if (!(i2 << 24 >> 24)) {
      i2 = i6;
      i9 = 0;
      i1 = i6 + 2 | 0;
     } else {
      i23 = HEAP32[i6 + 4 >> 2] | 0;
      i1 = i6 + 2 | 0;
      i9 = HEAP16[i1 >> 1] | 0;
      i2 = (HEAP32[i6 + 8 >> 2] | 0) + i9 | 0;
      HEAP32[i23 + (i9 << 3) >> 2] = i3 >> 16;
      HEAP32[i23 + (i9 << 3) + 4 >> 2] = i5 >> 16;
      HEAP8[i2 >> 0] = 1;
      i2 = HEAP32[i43 + 20 >> 2] | 0;
      i9 = HEAP8[i43 + 65 >> 0] | 0;
     }
     HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
     i6 = i8;
     i8 = i8 + 24 | 0;
     i4 = (HEAP32[i8 >> 2] | 0) + i3 | 0;
     i6 = (HEAP32[i6 + 28 >> 2] | 0) + i5 | 0;
     i1 = i9 << 24 >> 24 == 0;
     if ((i7 | 0) <= 1) break; else {
      i3 = i2;
      i7 = i7 + -1 | 0;
     }
    }
    if (i1) i1 = i2 + 2 | 0; else {
     i21 = HEAP32[i2 + 4 >> 2] | 0;
     i1 = i2 + 2 | 0;
     i22 = HEAP16[i1 >> 1] | 0;
     i23 = (HEAP32[i2 + 8 >> 2] | 0) + i22 | 0;
     HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
     HEAP32[i21 + (i22 << 3) + 4 >> 2] = i6 >> 16;
     HEAP8[i23 >> 0] = 1;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i1 = i6;
    i2 = i26;
    break;
   }
  case 16:
   {
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i1 = HEAP32[i43 + 12 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 6 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (_FT_GlyphLoader_CheckPoints(i1, 6, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i3 = (HEAP32[i9 >> 2] | 0) + i4 | 0;
    i4 = (HEAP32[i2 + (1 - i23 << 2) >> 2] | 0) + i5 | 0;
    i1 = HEAP32[i43 + 20 >> 2] | 0;
    if (!(HEAP8[i43 + 65 >> 0] | 0)) {
     i7 = i1;
     i9 = 0;
     i1 = i1 + 2 | 0;
    } else {
     i22 = HEAP32[i1 + 4 >> 2] | 0;
     i9 = HEAP16[i1 + 2 >> 1] | 0;
     i7 = (HEAP32[i1 + 8 >> 2] | 0) + i9 | 0;
     HEAP32[i22 + (i9 << 3) >> 2] = i3 >> 16;
     HEAP32[i22 + (i9 << 3) + 4 >> 2] = i4 >> 16;
     HEAP8[i7 >> 0] = 2;
     i7 = HEAP32[i43 + 20 >> 2] | 0;
     i9 = HEAP8[i43 + 65 >> 0] | 0;
     i1 = i1 + 2 | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i6 = (HEAP32[i2 + (2 - i23 << 2) >> 2] | 0) + i3 | 0;
    i8 = (HEAP32[i2 + (3 - i23 << 2) >> 2] | 0) + i4 | 0;
    if (!(i9 << 24 >> 24)) {
     i9 = i7;
     i3 = 0;
     i1 = i7 + 2 | 0;
    } else {
     i22 = HEAP32[i7 + 4 >> 2] | 0;
     i1 = i7 + 2 | 0;
     i3 = HEAP16[i1 >> 1] | 0;
     i9 = (HEAP32[i7 + 8 >> 2] | 0) + i3 | 0;
     HEAP32[i22 + (i3 << 3) >> 2] = i6 >> 16;
     HEAP32[i22 + (i3 << 3) + 4 >> 2] = i8 >> 16;
     HEAP8[i9 >> 0] = 2;
     i9 = HEAP32[i43 + 20 >> 2] | 0;
     i3 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (4 - i23 << 2) >> 2] | 0) + i6 | 0;
    if (!(i3 << 24 >> 24)) {
     i6 = i9;
     i3 = 0;
     i1 = i9 + 2 | 0;
    } else {
     i22 = HEAP32[i9 + 4 >> 2] | 0;
     i1 = i9 + 2 | 0;
     i3 = HEAP16[i1 >> 1] | 0;
     i6 = (HEAP32[i9 + 8 >> 2] | 0) + i3 | 0;
     HEAP32[i22 + (i3 << 3) >> 2] = i4 >> 16;
     HEAP32[i22 + (i3 << 3) + 4 >> 2] = i8 >> 16;
     HEAP8[i6 >> 0] = 1;
     i6 = HEAP32[i43 + 20 >> 2] | 0;
     i3 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (5 - i23 << 2) >> 2] | 0) + i4 | 0;
    if (!(i3 << 24 >> 24)) {
     i9 = i6;
     i3 = 0;
     i1 = i6 + 2 | 0;
    } else {
     i22 = HEAP32[i6 + 4 >> 2] | 0;
     i1 = i6 + 2 | 0;
     i3 = HEAP16[i1 >> 1] | 0;
     i9 = (HEAP32[i6 + 8 >> 2] | 0) + i3 | 0;
     HEAP32[i22 + (i3 << 3) >> 2] = i4 >> 16;
     HEAP32[i22 + (i3 << 3) + 4 >> 2] = i8 >> 16;
     HEAP8[i9 >> 0] = 2;
     i9 = HEAP32[i43 + 20 >> 2] | 0;
     i3 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (6 - i23 << 2) >> 2] | 0) + i4 | 0;
    if (!(i3 << 24 >> 24)) {
     i3 = i9;
     i6 = 0;
     i1 = i9 + 2 | 0;
    } else {
     i21 = (HEAP32[i2 + (7 - i23 << 2) >> 2] | 0) + i8 | 0;
     i22 = HEAP32[i9 + 4 >> 2] | 0;
     i1 = i9 + 2 | 0;
     i6 = HEAP16[i1 >> 1] | 0;
     i3 = (HEAP32[i9 + 8 >> 2] | 0) + i6 | 0;
     HEAP32[i22 + (i6 << 3) >> 2] = i4 >> 16;
     HEAP32[i22 + (i6 << 3) + 4 >> 2] = i21 >> 16;
     HEAP8[i3 >> 0] = 2;
     i3 = HEAP32[i43 + 20 >> 2] | 0;
     i6 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (8 - i23 << 2) >> 2] | 0) + i4 | 0;
    if (!(i6 << 24 >> 24)) i1 = i3 + 2 | 0; else {
     i21 = HEAP32[i3 + 4 >> 2] | 0;
     i1 = i3 + 2 | 0;
     i22 = HEAP16[i1 >> 1] | 0;
     i23 = (HEAP32[i3 + 8 >> 2] | 0) + i22 | 0;
     HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
     HEAP32[i21 + (i22 << 3) + 4 >> 2] = i5 >> 16;
     HEAP8[i23 >> 0] = 1;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 15:
   {
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i1 = HEAP32[i43 + 12 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 6 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (_FT_GlyphLoader_CheckPoints(i1, 6, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i3 = (HEAP32[i9 >> 2] | 0) + i4 | 0;
    i1 = HEAP32[i43 + 20 >> 2] | 0;
    if (!(HEAP8[i43 + 65 >> 0] | 0)) {
     i7 = i1;
     i4 = 0;
     i1 = i1 + 2 | 0;
    } else {
     i22 = HEAP32[i1 + 4 >> 2] | 0;
     i4 = HEAP16[i1 + 2 >> 1] | 0;
     i7 = (HEAP32[i1 + 8 >> 2] | 0) + i4 | 0;
     HEAP32[i22 + (i4 << 3) >> 2] = i3 >> 16;
     HEAP32[i22 + (i4 << 3) + 4 >> 2] = i5 >> 16;
     HEAP8[i7 >> 0] = 2;
     i7 = HEAP32[i43 + 20 >> 2] | 0;
     i4 = HEAP8[i43 + 65 >> 0] | 0;
     i1 = i1 + 2 | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i6 = (HEAP32[i2 + (1 - i23 << 2) >> 2] | 0) + i3 | 0;
    i8 = (HEAP32[i2 + (2 - i23 << 2) >> 2] | 0) + i5 | 0;
    if (!(i4 << 24 >> 24)) {
     i9 = i7;
     i3 = 0;
     i1 = i7 + 2 | 0;
    } else {
     i22 = HEAP32[i7 + 4 >> 2] | 0;
     i1 = i7 + 2 | 0;
     i3 = HEAP16[i1 >> 1] | 0;
     i9 = (HEAP32[i7 + 8 >> 2] | 0) + i3 | 0;
     HEAP32[i22 + (i3 << 3) >> 2] = i6 >> 16;
     HEAP32[i22 + (i3 << 3) + 4 >> 2] = i8 >> 16;
     HEAP8[i9 >> 0] = 2;
     i9 = HEAP32[i43 + 20 >> 2] | 0;
     i3 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (3 - i23 << 2) >> 2] | 0) + i6 | 0;
    if (!(i3 << 24 >> 24)) {
     i6 = i9;
     i3 = 0;
     i1 = i9 + 2 | 0;
    } else {
     i22 = HEAP32[i9 + 4 >> 2] | 0;
     i1 = i9 + 2 | 0;
     i3 = HEAP16[i1 >> 1] | 0;
     i6 = (HEAP32[i9 + 8 >> 2] | 0) + i3 | 0;
     HEAP32[i22 + (i3 << 3) >> 2] = i4 >> 16;
     HEAP32[i22 + (i3 << 3) + 4 >> 2] = i8 >> 16;
     HEAP8[i6 >> 0] = 1;
     i6 = HEAP32[i43 + 20 >> 2] | 0;
     i3 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (4 - i23 << 2) >> 2] | 0) + i4 | 0;
    if (!(i3 << 24 >> 24)) {
     i9 = i6;
     i3 = 0;
     i1 = i6 + 2 | 0;
    } else {
     i22 = HEAP32[i6 + 4 >> 2] | 0;
     i1 = i6 + 2 | 0;
     i3 = HEAP16[i1 >> 1] | 0;
     i9 = (HEAP32[i6 + 8 >> 2] | 0) + i3 | 0;
     HEAP32[i22 + (i3 << 3) >> 2] = i4 >> 16;
     HEAP32[i22 + (i3 << 3) + 4 >> 2] = i8 >> 16;
     HEAP8[i9 >> 0] = 2;
     i9 = HEAP32[i43 + 20 >> 2] | 0;
     i3 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (5 - i23 << 2) >> 2] | 0) + i4 | 0;
    if (!(i3 << 24 >> 24)) {
     i3 = i9;
     i6 = 0;
     i1 = i9 + 2 | 0;
    } else {
     i22 = HEAP32[i9 + 4 >> 2] | 0;
     i1 = i9 + 2 | 0;
     i6 = HEAP16[i1 >> 1] | 0;
     i3 = (HEAP32[i9 + 8 >> 2] | 0) + i6 | 0;
     HEAP32[i22 + (i6 << 3) >> 2] = i4 >> 16;
     HEAP32[i22 + (i6 << 3) + 4 >> 2] = i5 >> 16;
     HEAP8[i3 >> 0] = 2;
     i3 = HEAP32[i43 + 20 >> 2] | 0;
     i6 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i2 + (6 - i23 << 2) >> 2] | 0) + i4 | 0;
    if (!(i6 << 24 >> 24)) i1 = i3 + 2 | 0; else {
     i21 = HEAP32[i3 + 4 >> 2] | 0;
     i1 = i3 + 2 | 0;
     i22 = HEAP16[i1 >> 1] | 0;
     i23 = (HEAP32[i3 + 8 >> 2] | 0) + i22 | 0;
     HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
     HEAP32[i21 + (i22 << 3) + 4 >> 2] = i5 >> 16;
     HEAP8[i23 >> 0] = 1;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 17:
   {
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i1 = HEAP32[i43 + 12 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 6 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (_FT_GlyphLoader_CheckPoints(i1, 6, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i11 = HEAP32[i9 >> 2] | 0;
    i12 = HEAP32[i2 + (1 - i23 << 2) >> 2] | 0;
    i9 = i2 + (2 - i23 << 2) | 0;
    i6 = HEAP32[i9 >> 2] | 0;
    i1 = i2 + (2 - i23 + 1 << 2) | 0;
    i3 = HEAP32[i1 >> 2] | 0;
    i14 = i2 + (2 - i23 + 2 << 2) | 0;
    i15 = i2 + (2 - i23 + 3 << 2) | 0;
    i16 = i2 + (2 - i23 + 4 << 2) | 0;
    i17 = i2 + (2 - i23 + 5 << 2) | 0;
    i18 = i2 + (2 - i23 + 6 << 2) | 0;
    i20 = (HEAP32[i18 >> 2] | 0) + ((HEAP32[i16 >> 2] | 0) + ((HEAP32[i14 >> 2] | 0) + (i6 + i11))) | 0;
    i19 = i2 + (2 - i23 + 7 << 2) | 0;
    i21 = (HEAP32[i19 >> 2] | 0) + ((HEAP32[i17 >> 2] | 0) + ((HEAP32[i15 >> 2] | 0) + (i3 + i12))) | 0;
    i21 = (i21 | 0) < 0 ? 0 - i21 | 0 : i21;
    i11 = i11 + i4 | 0;
    i12 = i12 + i5 | 0;
    i7 = HEAP32[i43 + 20 >> 2] | 0;
    if (HEAP8[i43 + 65 >> 0] | 0) {
     i13 = HEAP32[i7 + 4 >> 2] | 0;
     i6 = HEAP16[i7 + 2 >> 1] | 0;
     i8 = (HEAP32[i7 + 8 >> 2] | 0) + i6 | 0;
     HEAP32[i13 + (i6 << 3) >> 2] = i11 >> 16;
     HEAP32[i13 + (i6 << 3) + 4 >> 2] = i12 >> 16;
     HEAP8[i8 >> 0] = 2;
     i8 = HEAP32[i9 >> 2] | 0;
     i6 = HEAP32[i1 >> 2] | 0;
     i9 = HEAP32[i43 + 20 >> 2] | 0;
     i13 = HEAP8[i43 + 65 >> 0] | 0;
     HEAP16[i7 + 2 >> 1] = (HEAP16[i7 + 2 >> 1] | 0) + 1 << 16 >> 16;
     if (!(i13 << 24 >> 24)) {
      i7 = i9;
      i9 = i6 + i12 | 0;
      i1 = i8 + i11 | 0;
      i22 = 442;
     } else {
      i3 = HEAP32[i9 + 4 >> 2] | 0;
      i10 = HEAP16[i9 + 2 >> 1] | 0;
      i13 = (HEAP32[i9 + 8 >> 2] | 0) + i10 | 0;
      HEAP32[i3 + (i10 << 3) >> 2] = i8 + i11 >> 16;
      HEAP32[i3 + (i10 << 3) + 4 >> 2] = i6 + i12 >> 16;
      HEAP8[i13 >> 0] = 2;
      i13 = HEAP32[i43 + 20 >> 2] | 0;
      i10 = HEAP8[i43 + 65 >> 0] | 0;
      i3 = i9 + 2 | 0;
      i1 = i8 + i11 | 0;
      i9 = i6 + i12 | 0;
     }
    } else {
     HEAP16[i7 + 2 >> 1] = (HEAP16[i7 + 2 >> 1] | 0) + 1 << 16 >> 16;
     i9 = i3 + i12 | 0;
     i1 = i6 + i11 | 0;
     i22 = 442;
    }
    if ((i22 | 0) == 442) {
     i13 = i7;
     i10 = 0;
     i3 = i7 + 2 | 0;
    }
    HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
    i6 = (HEAP32[i14 >> 2] | 0) + i1 | 0;
    i1 = (HEAP32[i15 >> 2] | 0) + i9 | 0;
    if (!(i10 << 24 >> 24)) {
     i7 = i13;
     i3 = 0;
     i9 = i13 + 2 | 0;
    } else {
     i22 = HEAP32[i13 + 4 >> 2] | 0;
     i9 = i13 + 2 | 0;
     i3 = HEAP16[i9 >> 1] | 0;
     i7 = (HEAP32[i13 + 8 >> 2] | 0) + i3 | 0;
     HEAP32[i22 + (i3 << 3) >> 2] = i6 >> 16;
     HEAP32[i22 + (i3 << 3) + 4 >> 2] = i1 >> 16;
     HEAP8[i7 >> 0] = 1;
     i7 = HEAP32[i43 + 20 >> 2] | 0;
     i3 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
    i6 = (HEAP32[i16 >> 2] | 0) + i6 | 0;
    i1 = (HEAP32[i17 >> 2] | 0) + i1 | 0;
    if (!(i3 << 24 >> 24)) {
     i8 = i7;
     i3 = 0;
     i9 = i7 + 2 | 0;
    } else {
     i22 = HEAP32[i7 + 4 >> 2] | 0;
     i9 = i7 + 2 | 0;
     i3 = HEAP16[i9 >> 1] | 0;
     i8 = (HEAP32[i7 + 8 >> 2] | 0) + i3 | 0;
     HEAP32[i22 + (i3 << 3) >> 2] = i6 >> 16;
     HEAP32[i22 + (i3 << 3) + 4 >> 2] = i1 >> 16;
     HEAP8[i8 >> 0] = 2;
     i8 = HEAP32[i43 + 20 >> 2] | 0;
     i3 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
    i7 = (HEAP32[i18 >> 2] | 0) + i6 | 0;
    i1 = (HEAP32[i19 >> 2] | 0) + i1 | 0;
    if (!(i3 << 24 >> 24)) {
     i3 = i8;
     i6 = 0;
     i9 = i8 + 2 | 0;
    } else {
     i22 = HEAP32[i8 + 4 >> 2] | 0;
     i9 = i8 + 2 | 0;
     i6 = HEAP16[i9 >> 1] | 0;
     i3 = (HEAP32[i8 + 8 >> 2] | 0) + i6 | 0;
     HEAP32[i22 + (i6 << 3) >> 2] = i7 >> 16;
     HEAP32[i22 + (i6 << 3) + 4 >> 2] = i1 >> 16;
     HEAP8[i3 >> 0] = 2;
     i3 = HEAP32[i43 + 20 >> 2] | 0;
     i6 = HEAP8[i43 + 65 >> 0] | 0;
    }
    HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
    i23 = HEAP32[i2 + (2 - i23 + 8 << 2) >> 2] | 0;
    i22 = (((i20 | 0) < 0 ? 0 - i20 | 0 : i20) | 0) > (i21 | 0);
    i9 = i22 ? i5 : i23 + i1 | 0;
    i4 = i22 ? i23 + i7 | 0 : i4;
    if (!(i6 << 24 >> 24)) i1 = i3 + 2 | 0; else {
     i21 = HEAP32[i3 + 4 >> 2] | 0;
     i1 = i3 + 2 | 0;
     i22 = HEAP16[i1 >> 1] | 0;
     i23 = (HEAP32[i3 + 8 >> 2] | 0) + i22 | 0;
     HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
     HEAP32[i21 + (i22 << 3) + 4 >> 2] = i9 >> 16;
     HEAP8[i23 >> 0] = 1;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i1 = i9;
    i2 = i26;
    break;
   }
  case 14:
   {
    if (_cff_builder_start_point(i43, i4, i5) | 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    }
    i1 = HEAP32[i43 + 12 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 6 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (_FT_GlyphLoader_CheckPoints(i1, 6, 0) | 0) != 0 : 0) {
     i1 = 0;
     i22 = 440;
     break L5;
    } else {
     i3 = 6;
     i1 = i5;
    }
    while (1) {
     i4 = (HEAP32[i9 >> 2] | 0) + i4 | 0;
     i1 = (HEAP32[i9 + 4 >> 2] | 0) + i1 | 0;
     i2 = HEAP32[i43 + 20 >> 2] | 0;
     if (!(HEAP8[i43 + 65 >> 0] | 0)) i2 = i2 + 2 | 0; else {
      i21 = HEAP32[i2 + 4 >> 2] | 0;
      i22 = HEAP16[i2 + 2 >> 1] | 0;
      i23 = (HEAP32[i2 + 8 >> 2] | 0) + i22 | 0;
      HEAP32[i21 + (i22 << 3) >> 2] = i4 >> 16;
      HEAP32[i21 + (i22 << 3) + 4 >> 2] = i1 >> 16;
      HEAP8[i23 >> 0] = (i3 | 0) == 4 | (i3 | 0) == 1 ? 1 : 2;
      i2 = i2 + 2 | 0;
     }
     HEAP16[i2 >> 1] = (HEAP16[i2 >> 1] | 0) + 1 << 16 >> 16;
     i3 = i3 + -1 | 0;
     if (!i3) {
      i10 = i43 + 80 | 0;
      i8 = i24;
      i7 = i25;
      i2 = i26;
      break;
     } else i9 = i9 + 8 | 0;
    }
    break;
   }
  case 26:
   {
    i1 = HEAP32[i9 >> 2] | 0;
    if ((i1 | 0) < 0) HEAP32[i9 >> 2] = 0 - i1;
    i10 = i2 + (1 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 27:
   {
    i10 = i2 + (1 - i23 << 2) | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i10 >> 2] | 0);
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 28:
   {
    i10 = i2 + (1 - i23 << 2) | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) - (HEAP32[i10 >> 2] | 0);
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 29:
   {
    i10 = i2 + (1 - i23 << 2) | 0;
    HEAP32[i9 >> 2] = _FT_DivFix(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 30:
   {
    HEAP32[i9 >> 2] = 0 - (HEAP32[i9 >> 2] | 0);
    i10 = i2 + (1 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 31:
   {
    i10 = HEAP32[i44 >> 2] | 0;
    HEAP32[i9 >> 2] = ((i10 | 0) > 32767 & 1) + i10;
    i10 = HEAP32[i44 >> 2] | 0;
    i10 = _FT_MulFix(i10, 65536 - i10 | 0) | 0;
    HEAP32[i44 >> 2] = (i10 | 0) == 0 ? i10 + 10355 | 0 : i10;
    i10 = i2 + (1 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 32:
   {
    i10 = i2 + (1 - i23 << 2) | 0;
    HEAP32[i9 >> 2] = _FT_MulFix(HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 33:
   {
    i3 = HEAP32[i9 >> 2] | 0;
    if ((i3 | 0) > 0) {
     i1 = i3 + 1 + (_FT_DivFix(i3, i3) | 0) >> 1;
     if ((i1 | 0) == (i3 | 0)) i1 = i3; else while (1) {
      i3 = i1 + 1 + (_FT_DivFix(HEAP32[i9 >> 2] | 0, i1) | 0) >> 1;
      if ((i3 | 0) == (i1 | 0)) break; else i1 = i3;
     }
    } else i1 = 0;
    HEAP32[i9 >> 2] = i1;
    i10 = i2 + (1 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 25:
  case 35:
   {
    i10 = i9;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 36:
   {
    i8 = HEAP32[i9 >> 2] | 0;
    i10 = i2 + (1 - i23 << 2) | 0;
    HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i10 >> 2] = i8;
    i10 = i2 + (2 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 37:
   {
    i1 = HEAP32[i9 >> 2] >> 16;
    if ((i1 | 0) < 0) i1 = 0; else i1 = (i1 | 0) > (i12 + -2 | 0) ? i12 + -2 | 0 : i1;
    HEAP32[i9 >> 2] = HEAP32[i2 + (~i1 - i23 << 2) >> 2];
    i10 = i2 + (1 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 38:
   {
    i8 = HEAP32[i9 >> 2] >> 16;
    i1 = HEAP32[i2 + (1 - i23 << 2) >> 2] >> 16;
    i8 = (i8 | 0) < 1 ? 1 : i8;
    i10 = i2 + (0 - (i8 + i23) << 2) | 0;
    if (i10 >>> 0 < (i43 + 80 | 0) >>> 0) {
     i1 = 129;
     i22 = 440;
     break L5;
    }
    if ((i1 | 0) <= -1) {
     i7 = i2 + (i8 + -1 - (i8 + i23) << 2) | 0;
     while (1) {
      i3 = HEAP32[i10 >> 2] | 0;
      if ((i8 | 0) > 1) {
       i6 = 0;
       do {
        i22 = i6;
        i6 = i6 + 1 | 0;
        HEAP32[i2 + (i22 - (i8 + i23) << 2) >> 2] = HEAP32[i2 + (i6 - (i8 + i23) << 2) >> 2];
       } while ((i6 | 0) < (i8 + -1 | 0));
      }
      HEAP32[i7 >> 2] = i3;
      if ((i1 | 0) < -1) i1 = i1 + 1 | 0; else {
       i10 = i9;
       i8 = i24;
       i7 = i25;
       i1 = i5;
       i2 = i26;
       break L109;
      }
     }
    }
    if ((i1 | 0) > 0) {
     i7 = i2 + (i8 + -1 - (i8 + i23) << 2) | 0;
     while (1) {
      i3 = HEAP32[i7 >> 2] | 0;
      if ((i8 + -2 | 0) > -1) {
       i6 = i8 + -2 | 0;
       while (1) {
        HEAP32[i2 + (1 - (i8 + i23) + i6 << 2) >> 2] = HEAP32[i2 + (i6 - (i8 + i23) << 2) >> 2];
        if ((i6 | 0) > 0) i6 = i6 + -1 | 0; else break;
       }
      }
      HEAP32[i10 >> 2] = i3;
      if ((i1 | 0) > 1) i1 = i1 + -1 | 0; else {
       i10 = i9;
       i8 = i24;
       i7 = i25;
       i1 = i5;
       i2 = i26;
       break;
      }
     }
    } else {
     i10 = i9;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    }
    break;
   }
  case 39:
   {
    HEAP32[i2 + (1 - i23 << 2) >> 2] = HEAP32[i9 >> 2];
    i10 = i2 + (2 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 40:
   {
    i2 = HEAP32[i2 + (1 - i23 << 2) >> 2] >> 16;
    if (i2 >>> 0 < 32) {
     HEAP32[i1 + 760 + (i2 << 2) >> 2] = HEAP32[i9 >> 2];
     i10 = i9;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    } else {
     i10 = i9;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    }
    break;
   }
  case 41:
   {
    i3 = HEAP32[i9 >> 2] >> 16;
    if (i3 >>> 0 < 32) i1 = HEAP32[i1 + 760 + (i3 << 2) >> 2] | 0; else i1 = 0;
    HEAP32[i9 >> 2] = i1;
    i10 = i2 + (1 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 51:
   {
    i2 = i1 + 676 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (i3 >>> 0 <= (i1 + 280 | 0) >>> 0) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    HEAP32[i2 >> 2] = i3 + -12;
    i2 = HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 676 >> 2] | 0;
    i10 = i9;
    i8 = HEAP32[i2 + 8 >> 2] | 0;
    i7 = HEAP32[i2 + 4 >> 2] | 0;
    i1 = i5;
    break;
   }
  case 50:
   {
    i2 = (HEAP32[i1 + 900 >> 2] | 0) + (HEAP32[i9 >> 2] >> 16) | 0;
    if (i2 >>> 0 >= (HEAP32[i1 + 892 >> 2] | 0) >>> 0) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    if ((i26 - (i1 + 280) | 0) > 372) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    HEAP32[i26 + 8 >> 2] = i24;
    i3 = i26 + 12 | 0;
    i1 = HEAP32[(HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 908 >> 2] | 0) + (i2 << 2) >> 2] | 0;
    HEAP32[i3 >> 2] = i1;
    i2 = HEAP32[(HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 908 >> 2] | 0) + (i2 + 1 << 2) >> 2] | 0;
    HEAP32[i26 + 16 >> 2] = i2;
    HEAP32[i26 + 20 >> 2] = i1;
    if ((i1 | 0) == 0 | (i2 | 0) == (i1 | 0)) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 676 >> 2] = i3;
    i10 = i9;
    i8 = i1;
    i7 = i2;
    i1 = i5;
    i2 = i3;
    break;
   }
  case 53:
   {
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 52:
   {
    HEAP32[i1 + 744 >> 2] = (HEAP32[i2 + (1 - i23 << 2) >> 2] >> 16) + (HEAP32[i1 + 748 >> 2] | 0);
    HEAP32[i1 + 32 >> 2] = HEAP32[i9 >> 2];
    HEAP32[i1 + 36 >> 2] = 0;
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i4 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i1 + 24 >> 2] | 0) | 0;
    i1 = HEAP32[i1 + 28 >> 2] | 0;
    i2 = i26;
    break;
   }
  case 57:
   {
    HEAP32[i1 + 744 >> 2] = (HEAP32[i2 + (2 - i23 << 2) >> 2] >> 16) + (HEAP32[i1 + 748 >> 2] | 0);
    HEAP32[i1 + 32 >> 2] = HEAP32[i9 >> 2];
    i2 = i2 + (1 - i23 << 2) | 0;
    HEAP32[i1 + 36 >> 2] = HEAP32[i2 >> 2];
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i4 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i1 + 24 >> 2] | 0) | 0;
    i1 = (HEAP32[i2 >> 2] | 0) + (HEAP32[i1 + 28 >> 2] | 0) | 0;
    i2 = i26;
    break;
   }
  case 58:
   {
    i10 = i43 + 80 | 0;
    i8 = i24;
    i7 = i25;
    i4 = (HEAP32[i9 >> 2] | 0) + (HEAP32[i1 + 24 >> 2] | 0) | 0;
    i1 = (HEAP32[i2 + (1 - i23 << 2) >> 2] | 0) + (HEAP32[i1 + 28 >> 2] | 0) | 0;
    i2 = i26;
    break;
   }
  case 54:
   {
    i1 = i2 + (-2 - i23 - (HEAP32[i2 + (-2 - i23 << 2) >> 2] >> 16) << 2) | 0;
    if (i1 >>> 0 < (i43 + 80 | 0) >>> 0) {
     i1 = 129;
     i22 = 440;
     break L5;
    } else {
     i10 = i1;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    }
    break;
   }
  case 55:
   {
    i10 = i2 + (1 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 44:
   {
    i1 = i2 + (1 - i23 << 2) | 0;
    if (!(HEAP32[i9 >> 2] | 0)) i2 = 0; else i2 = (HEAP32[i1 >> 2] | 0) != 0;
    HEAP32[i9 >> 2] = i2 ? 65536 : 0;
    i10 = i1;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 45:
   {
    i1 = i2 + (1 - i23 << 2) | 0;
    if (!(HEAP32[i9 >> 2] | 0)) i2 = (HEAP32[i1 >> 2] | 0) != 0; else i2 = 1;
    HEAP32[i9 >> 2] = i2 ? 65536 : 0;
    i10 = i1;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 47:
   {
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) == 0 ? 65536 : 0;
    i10 = i2 + (1 - i23 << 2) | 0;
    i8 = i24;
    i7 = i25;
    i1 = i5;
    i2 = i26;
    break;
   }
  case 48:
   {
    i1 = i2 + (1 - i23 << 2) | 0;
    if ((HEAP32[i2 + (2 - i23 << 2) >> 2] | 0) > (HEAP32[i2 + (3 - i23 << 2) >> 2] | 0)) {
     HEAP32[i9 >> 2] = HEAP32[i1 >> 2];
     i10 = i1;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    } else {
     i10 = i1;
     i8 = i24;
     i7 = i25;
     i1 = i5;
     i2 = i26;
    }
    break;
   }
  case 49:
   {
    i2 = (HEAP32[i1 + 896 >> 2] | 0) + (HEAP32[i9 >> 2] >> 16) | 0;
    if (i2 >>> 0 >= (HEAP32[i1 + 888 >> 2] | 0) >>> 0) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    if ((i26 - (i1 + 280) | 0) > 372) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    HEAP32[i26 + 8 >> 2] = i24;
    i3 = i26 + 12 | 0;
    i1 = HEAP32[(HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 904 >> 2] | 0) + (i2 << 2) >> 2] | 0;
    HEAP32[i3 >> 2] = i1;
    i2 = HEAP32[(HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 904 >> 2] | 0) + (i2 + 1 << 2) >> 2] | 0;
    HEAP32[i26 + 16 >> 2] = i2;
    HEAP32[i26 + 20 >> 2] = i1;
    if ((i1 | 0) == 0 | (i2 | 0) == (i1 | 0)) {
     i1 = 3;
     i22 = 440;
     break L5;
    }
    HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 676 >> 2] = i3;
    i10 = i9;
    i8 = i1;
    i7 = i2;
    i1 = i5;
    i2 = i3;
    break;
   }
  default:
   {
    i1 = 7;
    i22 = 440;
    break L5;
   }
  } while (0);
  HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] = i10;
  if (((HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 276 >> 2] | 0) - (i43 + 80) | 0) > 188) {
   i1 = 130;
   i22 = 440;
   break;
  } else {
   i9 = i8;
   i25 = i7;
   i5 = i1;
   i26 = i2;
  }
 }
 if ((i22 | 0) == 361) {
  i42 = _cff_operator_seac(i1, HEAP32[i9 >> 2] | 0, HEAP32[i2 + (1 - i23 << 2) >> 2] | 0, HEAP32[i2 + (2 - i23 << 2) >> 2] | 0, HEAP32[i2 + (3 - i23 << 2) >> 2] >> 16, HEAP32[i2 + (4 - i23 << 2) >> 2] >> 16) | 0;
  _FT_GlyphLoader_Add(HEAP32[i43 + 12 >> 2] | 0);
  i43 = i42;
  STACKTOP = i44;
  return i43 | 0;
 } else if ((i22 | 0) == 362) {
  if ((i12 | 0) > 3) {
   i42 = HEAP32[i1 + 744 >> 2] | 0;
   i43 = _cff_operator_seac(i1, 0, HEAP32[i2 + (-4 - i23 << 2) >> 2] | 0, HEAP32[i2 + (-3 - i23 << 2) >> 2] | 0, HEAP32[i2 + (-2 - i23 << 2) >> 2] >> 16, HEAP32[i2 + (((i3 | -16) ^ 15) << 2) >> 2] >> 16) | 0;
   HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 744 >> 2] = i42;
   STACKTOP = i44;
   return i43 | 0;
  }
  i3 = HEAP32[i43 + 20 >> 2] | 0;
  do if (i3) {
   i4 = HEAP16[i3 >> 1] | 0;
   if (i4 << 16 >> 16 < 2) i5 = 0; else i5 = (HEAP16[(HEAP32[i3 + 12 >> 2] | 0) + ((i4 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
   i1 = HEAP16[i3 + 2 >> 1] | 0;
   if (((i1 << 16 >> 16 > 1 ? (i39 = HEAP32[i3 + 4 >> 2] | 0, i40 = (HEAP32[i3 + 8 >> 2] | 0) + ((i1 << 16 >> 16) + -1) | 0, (HEAP32[i39 + (i5 << 3) >> 2] | 0) == (HEAP32[i39 + ((i1 << 16 >> 16) + -1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i39 + (i5 << 3) + 4 >> 2] | 0) == (HEAP32[i39 + ((i1 << 16 >> 16) + -1 << 3) + 4 >> 2] | 0) : 0) ? (HEAP8[i40 >> 0] | 0) == 1 : 0) {
    HEAP16[i3 + 2 >> 1] = i1 + -1 << 16 >> 16;
    i1 = i1 + -1 << 16 >> 16;
   }
   if (i4 << 16 >> 16 > 0) {
    i2 = (i1 << 16 >> 16) + -1 | 0;
    if ((i5 | 0) == (i2 | 0)) {
     HEAP16[i3 >> 1] = i4 + -1 << 16 >> 16;
     HEAP16[i3 + 2 >> 1] = i1 + -1 << 16 >> 16;
     break;
    } else {
     HEAP16[(HEAP32[i3 + 12 >> 2] | 0) + ((i4 << 16 >> 16) + -1 << 1) >> 1] = i2;
     break;
    }
   }
  } while (0);
  do if (i42) if (!(FUNCTION_TABLE_iii[HEAP32[i42 + 8 >> 2] & 255](HEAP32[i41 >> 2] | 0, HEAP16[i3 + 2 >> 1] | 0) | 0)) {
   FUNCTION_TABLE_iiiii[HEAP32[i42 + 24 >> 2] & 63](HEAP32[i41 >> 2] | 0, HEAP32[i43 + 20 >> 2] | 0, HEAP32[i43 + 72 >> 2] | 0, HEAP32[(HEAP32[i44 + 8 >> 2] | 0) + 920 >> 2] | 0) | 0;
   break;
  } else {
   i43 = 3;
   STACKTOP = i44;
   return i43 | 0;
  } while (0);
  _FT_GlyphLoader_Add(HEAP32[i43 + 12 >> 2] | 0);
  i43 = 0;
  STACKTOP = i44;
  return i43 | 0;
 } else if ((i22 | 0) == 440) {
  STACKTOP = i44;
  return i1 | 0;
 }
 return 0;
}

function __Z18ConvertPixelFormat13TextureFormatPKhS_Ph(i9, i22, i11, i23) {
 i9 = i9 | 0;
 i22 = i22 | 0;
 i11 = i11 | 0;
 i23 = i23 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 L1 : do if ((i9 | 0) >= 58) {
  L5 : do if ((i9 | 0) < 87) switch (i9 | 0) {
  case 59:
  case 58:
   {
    i12 = 3;
    break L1;
   }
  case 67:
   {
    i6 = 9;
    i4 = 9;
    i3 = 9;
    i1 = 0;
    i2 = 9;
    i12 = 52;
    break L1;
   }
  case 64:
  case 63:
  case 62:
  case 61:
  case 60:
  case 69:
  case 68:
   {
    i12 = 5;
    break L1;
   }
  case 66:
   {
    i1 = 0;
    i2 = 1;
    i12 = 25;
    break L1;
   }
  case 65:
   {
    i12 = 9;
    break L1;
   }
  case 86:
  case 85:
   {
    i12 = 6;
    break;
   }
  case 84:
  case 83:
  case 82:
  case 78:
  case 77:
  case 76:
  case 75:
  case 74:
  case 73:
  case 81:
  case 80:
  case 79:
  case 72:
  case 71:
  case 70:
   {
    i12 = 10;
    break;
   }
  default:
   {
    i12 = 11;
    break L1;
   }
  } else {
   L8 : do if ((i9 | 0) < 1048576) switch (i9 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 88:
   case 87:
    {
     i12 = 5;
     break L1;
    }
   case 89:
    {
     i12 = 4;
     break L1;
    }
   case 99:
   case 98:
   case 97:
   case 96:
   case 95:
   case 94:
    {
     i12 = 10;
     break L5;
    }
   case 115:
    break;
   default:
    {
     i12 = 11;
     break L1;
    }
   } else {
    if ((i9 | 0) < 4194324) switch (i9 | 0) {
    case 1048579:
     {
      i12 = 5;
      break L1;
     }
    case 1048576:
     {
      i12 = 10;
      break L5;
     }
    case 1048577:
    case 1048580:
     {
      i12 = 6;
      break L5;
     }
    case 1048583:
    case 1048578:
     break L8;
    case 1048581:
     break;
    default:
     {
      i12 = 11;
      break L1;
     }
    } else switch (i9 | 0) {
    case 4194354:
    case 4194337:
    case 4194324:
     {
      i12 = 5;
      break L1;
     }
    case 4194339:
     {
      i12 = 4;
      break L1;
     }
    case 4194356:
    case 4194334:
     break L8;
    case 4194333:
    case 4194331:
     break;
    default:
     {
      i12 = 11;
      break L1;
     }
    }
    i2 = 3;
    i12 = 12;
    break L1;
   } while (0);
   i2 = 4;
   i12 = 12;
   break L1;
  } while (0);
  if ((i12 | 0) == 6) {
   i2 = 5;
   i12 = 12;
   break;
  } else if ((i12 | 0) == 10) {
   i2 = 0;
   i12 = 12;
   break;
  }
 } else {
  switch (i9 | 0) {
  case 39:
  case 43:
  case 42:
  case 41:
  case 21:
  case 19:
  case 18:
  case 17:
  case 16:
  case 15:
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i2 = 32;
    i12 = 12;
    break L1;
   }
  case 57:
  case 56:
  case 54:
  case 53:
  case 38:
  case 37:
  case 36:
  case 35:
  case 34:
  case 33:
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i12 = 3;
    break L1;
   }
  case 26:
   {
    i4 = 11;
    i3 = 11;
    i1 = 0;
    i2 = 11;
    i12 = 40;
    break L1;
   }
  case 25:
  case 24:
  case 23:
   {
    i12 = 4;
    break L1;
   }
  case 52:
  case 51:
  case 50:
  case 49:
  case 48:
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
   {
    i12 = 5;
    break L1;
   }
  case 22:
  case 20:
  case 55:
  case 47:
  case 45:
  case 40:
   {
    i12 = 9;
    break L1;
   }
  case 46:
  case 44:
   break;
  default:
   {
    i12 = 11;
    break L1;
   }
  }
  i2 = 24;
  i12 = 12;
 } while (0);
 if ((i12 | 0) == 3) {
  i2 = 16;
  i12 = 12;
 } else if ((i12 | 0) == 4) {
  i2 = 10;
  i12 = 12;
 } else if ((i12 | 0) == 5) {
  i2 = 8;
  i12 = 12;
 } else if ((i12 | 0) == 9) {
  i2 = 0;
  i12 = 12;
 } else if ((i12 | 0) == 11) {
  i2 = 0;
  i12 = 12;
 }
 L25 : do if ((i12 | 0) == 12) {
  L27 : do if ((i9 | 0) >= 115) {
   if ((i9 | 0) >= 4194324) {
    switch (i9 | 0) {
    case 4194339:
     {
      i1 = 20;
      i12 = 20;
      break L27;
     }
    case 4194324:
     {
      i12 = 17;
      break L27;
     }
    case 4194334:
     {
      i12 = 14;
      break L27;
     }
    case 4194331:
    case 4194333:
     break;
    default:
     {
      i1 = 0;
      i12 = 18;
      break L27;
     }
    }
    i1 = 5;
    i12 = 18;
    break;
   }
   if ((i9 | 0) >= 1048578) switch (i9 | 0) {
   case 1048578:
    {
     i1 = 12;
     i12 = 23;
     break L27;
    }
   case 1048580:
    {
     i12 = 15;
     break L27;
    }
   default:
    {
     i1 = 0;
     i12 = 18;
     break L27;
    }
   }
   if ((i9 | 0) < 1048577) switch (i9 | 0) {
   case 115:
    {
     i12 = 14;
     break L27;
    }
   default:
    {
     i1 = 0;
     i12 = 18;
     break L27;
    }
   } else switch (i9 | 0) {
   case 1048577:
    {
     i12 = 16;
     break L27;
    }
   default:
    {
     i1 = 0;
     i12 = 18;
     break L27;
    }
   }
  } else switch (i9 | 0) {
  case 87:
  case 88:
  case 90:
  case 91:
  case 92:
  case 93:
   {
    i12 = 17;
    break;
   }
  case 85:
   {
    i12 = 16;
    break;
   }
  case 86:
   {
    i12 = 15;
    break;
   }
  case 69:
   {
    i12 = 14;
    break;
   }
  default:
   {
    i1 = 0;
    i12 = 18;
   }
  } while (0);
  if ((i12 | 0) == 14) {
   i1 = 8;
   i12 = 18;
  } else if ((i12 | 0) == 15) {
   i1 = 10;
   i12 = 18;
  } else if ((i12 | 0) == 16) {
   i1 = 11;
   i12 = 18;
  } else if ((i12 | 0) == 17) {
   i1 = 16;
   i12 = 18;
  }
  L45 : do if ((i12 | 0) == 18) {
   L47 : do if ((i9 | 0) < 57) {
    switch (i9 | 0) {
    case 18:
    case 17:
    case 16:
    case 15:
    case 8:
    case 7:
    case 6:
    case 5:
    case 4:
    case 3:
    case 2:
    case 1:
     {
      i3 = 32;
      i12 = 28;
      break L25;
     }
    case 26:
     {
      i4 = 11;
      i3 = 11;
      i12 = 40;
      break L25;
     }
    case 20:
    case 55:
    case 45:
    case 40:
    case 56:
    case 54:
    case 53:
    case 46:
    case 39:
    case 43:
    case 42:
    case 41:
    case 21:
     {
      i12 = 25;
      break L25;
     }
    case 25:
    case 24:
    case 23:
     {
      i12 = 20;
      break L45;
     }
    case 22:
    case 47:
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
    case 32:
    case 31:
    case 30:
    case 29:
    case 28:
    case 27:
    case 44:
    case 19:
     {
      i12 = 21;
      break L47;
     }
    case 38:
    case 37:
    case 36:
    case 35:
    case 34:
    case 33:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
     break;
    default:
     {
      i12 = 27;
      break L47;
     }
    }
    i3 = 16;
    i12 = 28;
    break L25;
   } else {
    L51 : do if ((i9 | 0) < 85) switch (i9 | 0) {
    case 65:
    case 66:
    case 64:
    case 63:
    case 62:
    case 61:
    case 60:
    case 59:
    case 58:
    case 57:
     {
      i12 = 25;
      break L25;
     }
    case 67:
     {
      i6 = 9;
      i4 = 9;
      i3 = 9;
      i12 = 52;
      break L25;
     }
    case 69:
    case 68:
     {
      i12 = 21;
      break L47;
     }
    case 84:
    case 83:
    case 82:
    case 78:
    case 77:
    case 76:
    case 75:
    case 74:
    case 73:
    case 81:
    case 80:
    case 79:
    case 72:
    case 71:
    case 70:
     break;
    default:
     {
      i12 = 27;
      break L47;
     }
    } else {
     L54 : do if ((i9 | 0) >= 99) {
      if ((i9 | 0) >= 1048581) {
       L59 : do if ((i9 | 0) < 4194333) if ((i9 | 0) < 4194324) switch (i9 | 0) {
       case 1048583:
        {
         i12 = 23;
         break L45;
        }
       case 1048581:
        break L59;
       default:
        {
         i12 = 27;
         break L47;
        }
       } else switch (i9 | 0) {
       case 4194324:
        {
         i12 = 21;
         break L47;
        }
       case 4194331:
        break L59;
       default:
        {
         i12 = 27;
         break L47;
        }
       } else switch (i9 | 0) {
       case 4194339:
        {
         i12 = 20;
         break L45;
        }
       case 4194334:
        {
         i12 = 23;
         break L45;
        }
       case 4194337:
        {
         i12 = 21;
         break L47;
        }
       case 4194333:
        break;
       default:
        {
         i12 = 27;
         break L47;
        }
       } while (0);
       i3 = 3;
       i12 = 28;
       break L25;
      }
      if ((i9 | 0) >= 1048577) switch (i9 | 0) {
      case 1048579:
       {
        i12 = 25;
        break L25;
       }
      case 1048578:
       {
        i12 = 23;
        break L45;
       }
      case 1048577:
      case 1048580:
       break L54;
      default:
       {
        i12 = 27;
        break L47;
       }
      }
      if ((i9 | 0) < 115) switch (i9 | 0) {
      case 99:
       break L51;
      default:
       {
        i12 = 27;
        break L47;
       }
      }
      if ((i9 | 0) < 1048576) switch (i9 | 0) {
      case 115:
       {
        i12 = 23;
        break L45;
       }
      default:
       {
        i12 = 27;
        break L47;
       }
      } else switch (i9 | 0) {
      case 1048576:
       break L51;
      default:
       {
        i12 = 27;
        break L47;
       }
      }
     } else switch (i9 | 0) {
     case 85:
      {
       i3 = 6;
       i12 = 34;
       break L25;
      }
     case 89:
      {
       i12 = 20;
       break L45;
      }
     case 93:
     case 92:
     case 91:
     case 90:
     case 88:
     case 87:
      {
       i12 = 21;
       break L47;
      }
     case 98:
     case 97:
     case 96:
     case 95:
     case 94:
      break L51;
     case 86:
      break;
     default:
      {
       i12 = 27;
       break L47;
      }
     } while (0);
     i3 = 5;
     i12 = 28;
     break L25;
    } while (0);
    i3 = 0;
    i12 = 28;
    break L25;
   } while (0);
   if ((i12 | 0) == 21) {
    i3 = 8;
    i12 = 28;
    break L25;
   } else if ((i12 | 0) == 27) {
    i3 = 0;
    i12 = 28;
    break L25;
   }
  } while (0);
  if ((i12 | 0) == 20) {
   i3 = 10;
   i12 = 28;
   break;
  } else if ((i12 | 0) == 23) {
   i3 = 4;
   i12 = 28;
   break;
  }
 } while (0);
 if ((i12 | 0) == 25) {
  i3 = 0;
  i12 = 28;
 }
 L86 : do if ((i12 | 0) == 28) {
  L88 : do if ((i9 | 0) >= 36) {
   if ((i9 | 0) < 89) {
    switch (i9 | 0) {
    case 67:
     {
      i6 = 9;
      i4 = 9;
      i12 = 52;
      break L86;
     }
    case 69:
     {
      i4 = 0;
      i12 = 41;
      break L86;
     }
    case 86:
    case 85:
     {
      i12 = 34;
      break L86;
     }
    case 38:
    case 37:
    case 36:
     {
      i12 = 30;
      break L88;
     }
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
    case 88:
    case 87:
    case 68:
     {
      i12 = 33;
      break L88;
     }
    case 47:
    case 44:
     break;
    default:
     {
      i12 = 37;
      break L88;
     }
    }
    i4 = 24;
    i12 = 38;
    break L86;
   }
   L95 : do if ((i9 | 0) < 1048580) {
    if ((i9 | 0) < 93) switch (i9 | 0) {
    case 92:
    case 91:
    case 90:
     {
      i12 = 33;
      break L88;
     }
    case 89:
     {
      i12 = 32;
      break L88;
     }
    default:
     {
      i12 = 37;
      break L88;
     }
    }
    if ((i9 | 0) < 1048577) switch (i9 | 0) {
    case 93:
     {
      i12 = 33;
      break L88;
     }
    case 115:
     {
      i12 = 35;
      break L95;
     }
    default:
     {
      i12 = 37;
      break L88;
     }
    } else switch (i9 | 0) {
    case 1048577:
     {
      i4 = 6;
      i12 = 42;
      break L86;
     }
    case 1048578:
     {
      i12 = 31;
      break L95;
     }
    default:
     {
      i12 = 37;
      break L88;
     }
    }
   } else {
    if ((i9 | 0) >= 4194331) {
     switch (i9 | 0) {
     case 4194339:
      {
       i12 = 32;
       break L88;
      }
     case 4194337:
      {
       i12 = 31;
       break L95;
      }
     case 4194334:
      {
       i12 = 35;
       break L95;
      }
     case 4194333:
     case 4194331:
      break;
     default:
      {
       i12 = 37;
       break L88;
      }
     }
     i4 = 2;
     i12 = 38;
     break L86;
    }
    if ((i9 | 0) < 1048583) switch (i9 | 0) {
    case 1048580:
     {
      i12 = 34;
      break L86;
     }
    case 1048581:
     {
      i4 = 3;
      i12 = 44;
      break L86;
     }
    default:
     {
      i12 = 37;
      break L88;
     }
    }
    if ((i9 | 0) < 4194324) switch (i9 | 0) {
    case 1048583:
     {
      i12 = 35;
      break L95;
     }
    default:
     {
      i12 = 37;
      break L88;
     }
    } else switch (i9 | 0) {
    case 4194324:
     {
      i12 = 31;
      break L95;
     }
    default:
     {
      i12 = 37;
      break L88;
     }
    }
   } while (0);
   if ((i12 | 0) == 31) {
    i4 = 8;
    i12 = 38;
    break L86;
   } else if ((i12 | 0) == 35) {
    i4 = 4;
    i12 = 38;
    break L86;
   }
  } else switch (i9 | 0) {
  case 22:
  case 19:
  case 18:
  case 17:
  case 16:
  case 15:
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i4 = 32;
    i12 = 38;
    break L86;
   }
  case 26:
   {
    i4 = 11;
    i12 = 40;
    break L86;
   }
  case 35:
  case 34:
  case 33:
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i12 = 30;
    break;
   }
  case 25:
  case 24:
  case 23:
   {
    i12 = 32;
    break;
   }
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
   {
    i12 = 33;
    break;
   }
  default:
   i12 = 37;
  } while (0);
  if ((i12 | 0) == 30) {
   i4 = 16;
   i12 = 38;
   break;
  } else if ((i12 | 0) == 32) {
   i4 = 10;
   i12 = 38;
   break;
  } else if ((i12 | 0) == 33) {
   i4 = 8;
   i12 = 38;
   break;
  } else if ((i12 | 0) == 37) {
   i4 = 0;
   i12 = 38;
   break;
  }
 } while (0);
 if ((i12 | 0) == 34) {
  i4 = 5;
  i12 = 38;
 }
 L124 : do if ((i12 | 0) == 38) {
  L126 : do if ((i9 | 0) < 57) {
   switch (i9 | 0) {
   case 8:
   case 7:
   case 6:
   case 5:
   case 4:
   case 3:
   case 2:
   case 1:
    {
     i6 = 32;
     i12 = 48;
     break L124;
    }
   case 25:
   case 24:
   case 23:
   case 26:
    {
     i12 = 40;
     break L124;
    }
   case 32:
   case 31:
   case 30:
   case 29:
   case 28:
   case 27:
    {
     i12 = 41;
     break L124;
    }
   case 20:
   case 55:
   case 45:
   case 40:
   case 56:
   case 54:
   case 53:
   case 46:
   case 39:
   case 43:
   case 42:
   case 41:
   case 21:
   case 18:
   case 17:
   case 16:
   case 15:
   case 38:
   case 37:
   case 36:
   case 35:
   case 34:
   case 33:
   case 22:
   case 47:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
   case 44:
   case 19:
    {
     i12 = 45;
     break L126;
    }
   case 14:
   case 13:
   case 12:
   case 11:
   case 10:
   case 9:
    break;
   default:
    {
     i12 = 47;
     break L126;
    }
   }
   i6 = 16;
   i12 = 48;
   break L124;
  } else {
   L130 : do if ((i9 | 0) < 85) switch (i9 | 0) {
   case 69:
   case 68:
    {
     i12 = 41;
     break L124;
    }
   case 67:
    {
     i6 = 9;
     i12 = 52;
     break L124;
    }
   case 65:
   case 66:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
   case 59:
   case 58:
   case 57:
    {
     i12 = 45;
     break L126;
    }
   case 84:
   case 83:
   case 82:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
   case 81:
   case 80:
   case 79:
   case 72:
   case 71:
   case 70:
    break;
   default:
    {
     i12 = 47;
     break L126;
    }
   } else {
    if ((i9 | 0) < 99) switch (i9 | 0) {
    case 89:
     {
      i12 = 40;
      break L124;
     }
    case 93:
    case 92:
    case 91:
    case 90:
    case 88:
    case 87:
     {
      i12 = 41;
      break L124;
     }
    case 86:
    case 85:
     {
      i12 = 42;
      break L124;
     }
    case 98:
    case 97:
    case 96:
    case 95:
    case 94:
     break L130;
    default:
     {
      i12 = 47;
      break L126;
     }
    }
    L136 : do if ((i9 | 0) < 1048581) {
     if ((i9 | 0) >= 1048577) switch (i9 | 0) {
     case 1048577:
     case 1048580:
      {
       i12 = 42;
       break L124;
      }
     case 1048579:
      {
       i12 = 45;
       break L126;
      }
     case 1048578:
      break L136;
     default:
      {
       i12 = 47;
       break L126;
      }
     }
     if ((i9 | 0) < 115) switch (i9 | 0) {
     case 99:
      break L130;
     default:
      {
       i12 = 47;
       break L126;
      }
     }
     if ((i9 | 0) < 1048576) switch (i9 | 0) {
     case 115:
      break L136;
     default:
      {
       i12 = 47;
       break L126;
      }
     } else switch (i9 | 0) {
     case 1048576:
      break L130;
     default:
      {
       i12 = 47;
       break L126;
      }
     }
    } else {
     if ((i9 | 0) >= 4194333) switch (i9 | 0) {
     case 4194339:
      {
       i12 = 40;
       break L124;
      }
     case 4194337:
      {
       i12 = 41;
       break L124;
      }
     case 4194333:
      {
       i12 = 44;
       break L124;
      }
     case 4194334:
      break L136;
     default:
      {
       i12 = 47;
       break L126;
      }
     }
     if ((i9 | 0) < 4194324) switch (i9 | 0) {
     case 1048581:
      {
       i12 = 44;
       break L124;
      }
     case 1048583:
      break L136;
     default:
      {
       i12 = 47;
       break L126;
      }
     } else switch (i9 | 0) {
     case 4194324:
      {
       i12 = 41;
       break L124;
      }
     case 4194331:
      {
       i12 = 44;
       break L124;
      }
     default:
      {
       i12 = 47;
       break L126;
      }
     }
    } while (0);
    i6 = 4;
    i12 = 48;
    break L124;
   } while (0);
   i6 = 0;
   i12 = 48;
   break L124;
  } while (0);
  if ((i12 | 0) == 45) {
   i6 = 0;
   i12 = 48;
   break;
  } else if ((i12 | 0) == 47) {
   i6 = 0;
   i12 = 48;
   break;
  }
 } while (0);
 if ((i12 | 0) == 40) {
  i6 = 10;
  i12 = 48;
 } else if ((i12 | 0) == 41) {
  i6 = 8;
  i12 = 48;
 } else if ((i12 | 0) == 42) {
  i6 = 5;
  i12 = 48;
 } else if ((i12 | 0) == 44) {
  i6 = 2;
  i12 = 48;
 }
 L164 : do if ((i12 | 0) == 48) {
  L166 : do if ((i9 | 0) < 30) switch (i9 | 0) {
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i5 = 64;
    i12 = 58;
    break L166;
   }
  case 25:
  case 24:
  case 23:
   {
    i12 = 51;
    break L166;
   }
  case 29:
  case 28:
  case 27:
   {
    i12 = 53;
    break L166;
   }
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i5 = 32;
    i12 = 58;
    break L166;
   }
  case 26:
   {
    i5 = 22;
    i12 = 64;
    break L164;
   }
  default:
   {
    i12 = 57;
    break L166;
   }
  } else {
   L172 : do if ((i9 | 0) >= 90) {
    if ((i9 | 0) < 1048577) switch (i9 | 0) {
    case 115:
    case 93:
    case 92:
    case 91:
    case 90:
     break L172;
    default:
     {
      i12 = 57;
      break L166;
     }
    }
    if ((i9 | 0) < 1048581) {
     switch (i9 | 0) {
     case 1048577:
      {
       i5 = 1;
       i12 = 63;
       break L166;
      }
     case 1048580:
      break L172;
     case 1048578:
      break;
     default:
      {
       i12 = 57;
       break L166;
      }
     }
     i5 = 4;
     i12 = 60;
     break L166;
    }
    if ((i9 | 0) < 1048583) {
     switch (i9 | 0) {
     case 1048581:
      break;
     default:
      {
       i12 = 57;
       break L166;
      }
     }
     i5 = 6;
     i12 = 64;
     break L164;
    }
    if ((i9 | 0) < 4194337) switch (i9 | 0) {
    case 1048583:
     {
      i5 = 8;
      i12 = 60;
      break L166;
     }
    default:
     {
      i12 = 57;
      break L166;
     }
    } else switch (i9 | 0) {
    case 4194337:
     {
      i12 = 53;
      break L166;
     }
    default:
     {
      i12 = 57;
      break L166;
     }
    }
   } else switch (i9 | 0) {
   case 69:
    {
     i5 = 24;
     i12 = 64;
     break L164;
    }
   case 67:
    {
     i12 = 52;
     break L164;
    }
   case 89:
    {
     i12 = 51;
     break L166;
    }
   case 68:
   case 32:
   case 31:
   case 30:
    {
     i12 = 53;
     break L166;
    }
   case 86:
   case 85:
   case 88:
   case 87:
    break;
   default:
    {
     i12 = 57;
     break L166;
    }
   } while (0);
   i5 = 0;
   i12 = 58;
  } while (0);
  if ((i12 | 0) == 51) {
   i5 = 20;
   i12 = 58;
  } else if ((i12 | 0) == 53) {
   i5 = 16;
   i12 = 58;
  } else if ((i12 | 0) == 57) {
   i5 = 0;
   i12 = 58;
  }
  L194 : do if ((i12 | 0) == 58) {
   L196 : do if ((i9 | 0) < 56) {
    switch (i9 | 0) {
    case 20:
    case 55:
    case 45:
    case 40:
    case 54:
    case 53:
    case 46:
    case 39:
    case 43:
    case 42:
    case 41:
    case 21:
    case 18:
    case 17:
    case 16:
    case 15:
    case 38:
    case 37:
    case 36:
    case 35:
    case 34:
    case 33:
    case 22:
    case 47:
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
    case 44:
    case 19:
    case 8:
    case 7:
    case 6:
    case 5:
    case 26:
     {
      i12 = 64;
      break L164;
     }
    case 4:
    case 3:
    case 2:
    case 1:
     {
      i20 = i6;
      i17 = i4;
      i21 = 32;
      i18 = i5;
      break L164;
     }
    case 25:
    case 24:
    case 23:
     {
      i12 = 61;
      break L196;
     }
    case 32:
    case 31:
    case 30:
    case 29:
    case 28:
    case 27:
     {
      i12 = 62;
      break L196;
     }
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
     break;
    default:
     {
      i12 = 66;
      break L196;
     }
    }
    i20 = i6;
    i17 = i4;
    i21 = 16;
    i18 = i5;
    break L164;
   } else {
    L200 : do if ((i9 | 0) >= 83) {
     if ((i9 | 0) < 97) switch (i9 | 0) {
     case 85:
     case 93:
     case 92:
     case 88:
      {
       i12 = 64;
       break L164;
      }
     case 86:
      {
       i12 = 63;
       break L194;
      }
     case 91:
     case 90:
     case 87:
      {
       i12 = 62;
       break L196;
      }
     case 89:
      {
       i12 = 61;
       break L196;
      }
     case 96:
     case 95:
     case 94:
     case 84:
     case 83:
      break L200;
     default:
      {
       i12 = 66;
       break L196;
      }
     }
     if ((i9 | 0) < 1048579) {
      if ((i9 | 0) < 115) switch (i9 | 0) {
      case 99:
      case 98:
      case 97:
       break L200;
      default:
       {
        i12 = 66;
        break L196;
       }
      }
      if ((i9 | 0) >= 1048577) switch (i9 | 0) {
      case 1048577:
       {
        i12 = 63;
        break L194;
       }
      case 1048578:
       {
        i12 = 60;
        break L194;
       }
      default:
       {
        i12 = 66;
        break L196;
       }
      }
      if ((i9 | 0) < 1048576) switch (i9 | 0) {
      case 115:
       {
        i12 = 60;
        break L194;
       }
      default:
       {
        i12 = 66;
        break L196;
       }
      } else switch (i9 | 0) {
      case 1048576:
       break L200;
      default:
       {
        i12 = 66;
        break L196;
       }
      }
     } else {
      if ((i9 | 0) < 1048583) switch (i9 | 0) {
      case 1048581:
      case 1048580:
       {
        i12 = 64;
        break L164;
       }
      case 1048579:
       {
        i12 = 62;
        break L196;
       }
      default:
       {
        i12 = 66;
        break L196;
       }
      }
      if ((i9 | 0) >= 4194339) switch (i9 | 0) {
      case 4194356:
       {
        i12 = 60;
        break L194;
       }
      case 4194339:
       {
        i12 = 61;
        break L196;
       }
      default:
       {
        i12 = 66;
        break L196;
       }
      }
      if ((i9 | 0) < 4194333) switch (i9 | 0) {
      case 1048583:
       {
        i12 = 60;
        break L194;
       }
      default:
       {
        i12 = 66;
        break L196;
       }
      } else switch (i9 | 0) {
      case 4194333:
       {
        i12 = 62;
        break L196;
       }
      default:
       {
        i12 = 66;
        break L196;
       }
      }
     }
    } else switch (i9 | 0) {
    case 66:
    case 64:
    case 63:
    case 62:
    case 61:
    case 60:
    case 59:
    case 58:
    case 57:
    case 56:
    case 67:
    case 69:
    case 68:
     {
      i12 = 64;
      break L164;
     }
    case 65:
     {
      i12 = 62;
      break L196;
     }
    case 82:
    case 78:
    case 77:
    case 76:
    case 75:
    case 74:
    case 73:
    case 81:
    case 80:
    case 79:
    case 72:
    case 71:
    case 70:
     break;
    default:
     {
      i12 = 66;
      break L196;
     }
    } while (0);
    i20 = i6;
    i17 = i4;
    i21 = 0;
    i18 = i5;
    break L164;
   } while (0);
   if ((i12 | 0) == 61) {
    i20 = i6;
    i17 = i4;
    i21 = 2;
    i18 = i5;
    break L164;
   } else if ((i12 | 0) == 62) {
    i20 = i6;
    i17 = i4;
    i21 = 8;
    i18 = i5;
    break L164;
   } else if ((i12 | 0) == 66) {
    i20 = i6;
    i17 = i4;
    i21 = 0;
    i18 = i5;
    break L164;
   }
  } while (0);
  if ((i12 | 0) == 60) {
   i20 = i6;
   i17 = i4;
   i21 = 4;
   i18 = i5;
   break;
  } else if ((i12 | 0) == 63) {
   i20 = i6;
   i17 = i4;
   i21 = 1;
   i18 = i5;
   break;
  }
 } while (0);
 if ((i12 | 0) == 52) {
  i5 = 18;
  i12 = 64;
 }
 if ((i12 | 0) == 64) {
  i20 = i6;
  i17 = i4;
  i21 = 0;
  i18 = i5;
 }
 L240 : do if ((i9 | 0) < 30) {
  switch (i9 | 0) {
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i19 = 96;
    break L240;
   }
  case 25:
  case 24:
  case 23:
   {
    i12 = 69;
    break L240;
   }
  case 29:
  case 28:
  case 27:
   {
    i12 = 70;
    break L240;
   }
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   break;
  default:
   {
    i12 = 76;
    break L240;
   }
  }
  i19 = 48;
 } else {
  L244 : do if ((i9 | 0) < 91) {
   switch (i9 | 0) {
   case 89:
    {
     i12 = 69;
     break L240;
    }
   case 90:
   case 87:
   case 32:
   case 31:
   case 30:
    {
     i12 = 70;
     break L240;
    }
   case 65:
    break L244;
   case 86:
    break;
   default:
    {
     i12 = 76;
     break L240;
    }
   }
   i19 = 15;
   break L240;
  } else {
   L248 : do if ((i9 | 0) < 1048579) if ((i9 | 0) < 1048577) switch (i9 | 0) {
   case 91:
    {
     i12 = 70;
     break L240;
    }
   case 115:
    break L248;
   default:
    {
     i12 = 76;
     break L240;
    }
   } else switch (i9 | 0) {
   case 1048578:
   case 1048577:
    break L244;
   default:
    {
     i12 = 76;
     break L240;
    }
   } else {
    L254 : do if ((i9 | 0) < 4194333) switch (i9 | 0) {
    case 1048583:
     break L248;
    case 1048579:
     break;
    default:
     {
      i12 = 76;
      break L240;
     }
    } else {
     switch (i9 | 0) {
     case 4194339:
      {
       i12 = 69;
       break L240;
      }
     case 4194333:
      break L254;
     case 4194356:
      break;
     default:
      {
       i12 = 76;
       break L240;
      }
     }
     i19 = 4;
     break L240;
    } while (0);
    i19 = 8;
    break L240;
   } while (0);
   i19 = 12;
   break L240;
  } while (0);
  i19 = 0;
 } while (0);
 if ((i12 | 0) == 69) i19 = 30; else if ((i12 | 0) == 70) i19 = 24; else if ((i12 | 0) == 76) i19 = 0;
 L266 : do if ((i11 | 0) >= 58) {
  L270 : do if ((i11 | 0) < 87) switch (i11 | 0) {
  case 59:
  case 58:
   {
    i12 = 79;
    break L266;
   }
  case 67:
   {
    i5 = 9;
    i9 = 9;
    i6 = 9;
    i4 = 0;
    i8 = 9;
    i12 = 128;
    break L266;
   }
  case 64:
  case 63:
  case 62:
  case 61:
  case 60:
  case 69:
  case 68:
   {
    i12 = 81;
    break L266;
   }
  case 66:
   {
    i4 = 0;
    i5 = 1;
    i12 = 101;
    break L266;
   }
  case 65:
   {
    i12 = 85;
    break L266;
   }
  case 86:
  case 85:
   {
    i12 = 82;
    break;
   }
  case 84:
  case 83:
  case 82:
  case 78:
  case 77:
  case 76:
  case 75:
  case 74:
  case 73:
  case 81:
  case 80:
  case 79:
  case 72:
  case 71:
  case 70:
   {
    i12 = 86;
    break;
   }
  default:
   {
    i12 = 87;
    break L266;
   }
  } else {
   L273 : do if ((i11 | 0) < 1048576) switch (i11 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 88:
   case 87:
    {
     i12 = 81;
     break L266;
    }
   case 89:
    {
     i12 = 80;
     break L266;
    }
   case 99:
   case 98:
   case 97:
   case 96:
   case 95:
   case 94:
    {
     i12 = 86;
     break L270;
    }
   case 115:
    break;
   default:
    {
     i12 = 87;
     break L266;
    }
   } else {
    if ((i11 | 0) < 4194324) switch (i11 | 0) {
    case 1048579:
     {
      i12 = 81;
      break L266;
     }
    case 1048576:
     {
      i12 = 86;
      break L270;
     }
    case 1048577:
    case 1048580:
     {
      i12 = 82;
      break L270;
     }
    case 1048583:
    case 1048578:
     break L273;
    case 1048581:
     break;
    default:
     {
      i12 = 87;
      break L266;
     }
    } else switch (i11 | 0) {
    case 4194354:
    case 4194337:
    case 4194324:
     {
      i12 = 81;
      break L266;
     }
    case 4194339:
     {
      i12 = 80;
      break L266;
     }
    case 4194356:
    case 4194334:
     break L273;
    case 4194333:
    case 4194331:
     break;
    default:
     {
      i12 = 87;
      break L266;
     }
    }
    i7 = 3;
    i12 = 88;
    break L266;
   } while (0);
   i7 = 4;
   i12 = 88;
   break L266;
  } while (0);
  if ((i12 | 0) == 82) {
   i7 = 5;
   i12 = 88;
   break;
  } else if ((i12 | 0) == 86) {
   i7 = 0;
   i12 = 88;
   break;
  }
 } else {
  switch (i11 | 0) {
  case 39:
  case 43:
  case 42:
  case 41:
  case 21:
  case 19:
  case 18:
  case 17:
  case 16:
  case 15:
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i7 = 32;
    i12 = 88;
    break L266;
   }
  case 57:
  case 56:
  case 54:
  case 53:
  case 38:
  case 37:
  case 36:
  case 35:
  case 34:
  case 33:
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i12 = 79;
    break L266;
   }
  case 26:
   {
    i9 = 11;
    i6 = 11;
    i4 = 0;
    i7 = 11;
    i12 = 116;
    break L266;
   }
  case 25:
  case 24:
  case 23:
   {
    i12 = 80;
    break L266;
   }
  case 52:
  case 51:
  case 50:
  case 49:
  case 48:
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
   {
    i12 = 81;
    break L266;
   }
  case 22:
  case 20:
  case 55:
  case 47:
  case 45:
  case 40:
   {
    i12 = 85;
    break L266;
   }
  case 46:
  case 44:
   break;
  default:
   {
    i12 = 87;
    break L266;
   }
  }
  i7 = 24;
  i12 = 88;
 } while (0);
 if ((i12 | 0) == 79) {
  i7 = 16;
  i12 = 88;
 } else if ((i12 | 0) == 80) {
  i7 = 10;
  i12 = 88;
 } else if ((i12 | 0) == 81) {
  i7 = 8;
  i12 = 88;
 } else if ((i12 | 0) == 85) {
  i7 = 0;
  i12 = 88;
 } else if ((i12 | 0) == 87) {
  i7 = 0;
  i12 = 88;
 }
 L290 : do if ((i12 | 0) == 88) {
  L292 : do if ((i11 | 0) >= 115) {
   if ((i11 | 0) >= 4194324) {
    switch (i11 | 0) {
    case 4194339:
     {
      i4 = 20;
      i12 = 96;
      break L292;
     }
    case 4194324:
     {
      i12 = 93;
      break L292;
     }
    case 4194334:
     {
      i12 = 90;
      break L292;
     }
    case 4194331:
    case 4194333:
     break;
    default:
     {
      i4 = 0;
      i12 = 94;
      break L292;
     }
    }
    i4 = 5;
    i12 = 94;
    break;
   }
   if ((i11 | 0) >= 1048578) switch (i11 | 0) {
   case 1048578:
    {
     i4 = 12;
     i12 = 99;
     break L292;
    }
   case 1048580:
    {
     i12 = 91;
     break L292;
    }
   default:
    {
     i4 = 0;
     i12 = 94;
     break L292;
    }
   }
   if ((i11 | 0) < 1048577) switch (i11 | 0) {
   case 115:
    {
     i12 = 90;
     break L292;
    }
   default:
    {
     i4 = 0;
     i12 = 94;
     break L292;
    }
   } else switch (i11 | 0) {
   case 1048577:
    {
     i12 = 92;
     break L292;
    }
   default:
    {
     i4 = 0;
     i12 = 94;
     break L292;
    }
   }
  } else switch (i11 | 0) {
  case 87:
  case 88:
  case 90:
  case 91:
  case 92:
  case 93:
   {
    i12 = 93;
    break;
   }
  case 85:
   {
    i12 = 92;
    break;
   }
  case 86:
   {
    i12 = 91;
    break;
   }
  case 69:
   {
    i12 = 90;
    break;
   }
  default:
   {
    i4 = 0;
    i12 = 94;
   }
  } while (0);
  if ((i12 | 0) == 90) {
   i4 = 8;
   i12 = 94;
  } else if ((i12 | 0) == 91) {
   i4 = 10;
   i12 = 94;
  } else if ((i12 | 0) == 92) {
   i4 = 11;
   i12 = 94;
  } else if ((i12 | 0) == 93) {
   i4 = 16;
   i12 = 94;
  }
  L310 : do if ((i12 | 0) == 94) {
   L312 : do if ((i11 | 0) < 57) {
    switch (i11 | 0) {
    case 18:
    case 17:
    case 16:
    case 15:
    case 8:
    case 7:
    case 6:
    case 5:
    case 4:
    case 3:
    case 2:
    case 1:
     {
      i6 = 32;
      i12 = 104;
      break L290;
     }
    case 26:
     {
      i9 = 11;
      i6 = 11;
      i12 = 116;
      break L290;
     }
    case 20:
    case 55:
    case 45:
    case 40:
    case 56:
    case 54:
    case 53:
    case 46:
    case 39:
    case 43:
    case 42:
    case 41:
    case 21:
     {
      i5 = i7;
      i12 = 101;
      break L290;
     }
    case 25:
    case 24:
    case 23:
     {
      i12 = 96;
      break L310;
     }
    case 22:
    case 47:
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
    case 32:
    case 31:
    case 30:
    case 29:
    case 28:
    case 27:
    case 44:
    case 19:
     {
      i12 = 97;
      break L312;
     }
    case 38:
    case 37:
    case 36:
    case 35:
    case 34:
    case 33:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
     break;
    default:
     {
      i12 = 103;
      break L312;
     }
    }
    i6 = 16;
    i12 = 104;
    break L290;
   } else {
    L316 : do if ((i11 | 0) < 85) switch (i11 | 0) {
    case 65:
    case 66:
    case 64:
    case 63:
    case 62:
    case 61:
    case 60:
    case 59:
    case 58:
    case 57:
     {
      i5 = i7;
      i12 = 101;
      break L290;
     }
    case 67:
     {
      i5 = 9;
      i9 = 9;
      i6 = 9;
      i8 = i7;
      i12 = 128;
      break L290;
     }
    case 69:
    case 68:
     {
      i12 = 97;
      break L312;
     }
    case 84:
    case 83:
    case 82:
    case 78:
    case 77:
    case 76:
    case 75:
    case 74:
    case 73:
    case 81:
    case 80:
    case 79:
    case 72:
    case 71:
    case 70:
     break;
    default:
     {
      i12 = 103;
      break L312;
     }
    } else {
     L319 : do if ((i11 | 0) >= 99) {
      if ((i11 | 0) >= 1048581) {
       L324 : do if ((i11 | 0) < 4194333) if ((i11 | 0) < 4194324) switch (i11 | 0) {
       case 1048583:
        {
         i12 = 99;
         break L310;
        }
       case 1048581:
        break L324;
       default:
        {
         i12 = 103;
         break L312;
        }
       } else switch (i11 | 0) {
       case 4194324:
        {
         i12 = 97;
         break L312;
        }
       case 4194331:
        break L324;
       default:
        {
         i12 = 103;
         break L312;
        }
       } else switch (i11 | 0) {
       case 4194339:
        {
         i12 = 96;
         break L310;
        }
       case 4194334:
        {
         i12 = 99;
         break L310;
        }
       case 4194337:
        {
         i12 = 97;
         break L312;
        }
       case 4194333:
        break;
       default:
        {
         i12 = 103;
         break L312;
        }
       } while (0);
       i6 = 3;
       i12 = 104;
       break L290;
      }
      if ((i11 | 0) >= 1048577) switch (i11 | 0) {
      case 1048579:
       {
        i5 = i7;
        i12 = 101;
        break L290;
       }
      case 1048578:
       {
        i12 = 99;
        break L310;
       }
      case 1048577:
      case 1048580:
       break L319;
      default:
       {
        i12 = 103;
        break L312;
       }
      }
      if ((i11 | 0) < 115) switch (i11 | 0) {
      case 99:
       break L316;
      default:
       {
        i12 = 103;
        break L312;
       }
      }
      if ((i11 | 0) < 1048576) switch (i11 | 0) {
      case 115:
       {
        i12 = 99;
        break L310;
       }
      default:
       {
        i12 = 103;
        break L312;
       }
      } else switch (i11 | 0) {
      case 1048576:
       break L316;
      default:
       {
        i12 = 103;
        break L312;
       }
      }
     } else switch (i11 | 0) {
     case 85:
      {
       i6 = 6;
       i5 = i7;
       i12 = 110;
       break L290;
      }
     case 89:
      {
       i12 = 96;
       break L310;
      }
     case 93:
     case 92:
     case 91:
     case 90:
     case 88:
     case 87:
      {
       i12 = 97;
       break L312;
      }
     case 98:
     case 97:
     case 96:
     case 95:
     case 94:
      break L316;
     case 86:
      break;
     default:
      {
       i12 = 103;
       break L312;
      }
     } while (0);
     i6 = 5;
     i12 = 104;
     break L290;
    } while (0);
    i6 = 0;
    i12 = 104;
    break L290;
   } while (0);
   if ((i12 | 0) == 97) {
    i6 = 8;
    i12 = 104;
    break L290;
   } else if ((i12 | 0) == 103) {
    i6 = 0;
    i12 = 104;
    break L290;
   }
  } while (0);
  if ((i12 | 0) == 96) {
   i6 = 10;
   i12 = 104;
   break;
  } else if ((i12 | 0) == 99) {
   i6 = 4;
   i12 = 104;
   break;
  }
 } while (0);
 if ((i12 | 0) == 101) {
  i6 = 0;
  i7 = i5;
  i12 = 104;
 }
 L351 : do if ((i12 | 0) == 104) {
  L353 : do if ((i11 | 0) >= 36) {
   if ((i11 | 0) < 89) {
    switch (i11 | 0) {
    case 67:
     {
      i5 = 9;
      i9 = 9;
      i8 = i7;
      i12 = 128;
      break L351;
     }
    case 69:
     {
      i9 = 0;
      i12 = 117;
      break L351;
     }
    case 86:
    case 85:
     {
      i5 = i7;
      i12 = 110;
      break L351;
     }
    case 38:
    case 37:
    case 36:
     {
      i12 = 106;
      break L353;
     }
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
    case 88:
    case 87:
    case 68:
     {
      i12 = 109;
      break L353;
     }
    case 47:
    case 44:
     break;
    default:
     {
      i12 = 113;
      break L353;
     }
    }
    i9 = 24;
    i12 = 114;
    break L351;
   }
   L360 : do if ((i11 | 0) < 1048580) {
    if ((i11 | 0) < 93) switch (i11 | 0) {
    case 92:
    case 91:
    case 90:
     {
      i12 = 109;
      break L353;
     }
    case 89:
     {
      i12 = 108;
      break L353;
     }
    default:
     {
      i12 = 113;
      break L353;
     }
    }
    if ((i11 | 0) < 1048577) switch (i11 | 0) {
    case 93:
     {
      i12 = 109;
      break L353;
     }
    case 115:
     {
      i12 = 111;
      break L360;
     }
    default:
     {
      i12 = 113;
      break L353;
     }
    } else switch (i11 | 0) {
    case 1048577:
     {
      i9 = 6;
      i12 = 118;
      break L351;
     }
    case 1048578:
     {
      i12 = 107;
      break L360;
     }
    default:
     {
      i12 = 113;
      break L353;
     }
    }
   } else {
    if ((i11 | 0) >= 4194331) {
     switch (i11 | 0) {
     case 4194339:
      {
       i12 = 108;
       break L353;
      }
     case 4194337:
      {
       i12 = 107;
       break L360;
      }
     case 4194334:
      {
       i12 = 111;
       break L360;
      }
     case 4194333:
     case 4194331:
      break;
     default:
      {
       i12 = 113;
       break L353;
      }
     }
     i9 = 2;
     i12 = 114;
     break L351;
    }
    if ((i11 | 0) < 1048583) switch (i11 | 0) {
    case 1048580:
     {
      i5 = i7;
      i12 = 110;
      break L351;
     }
    case 1048581:
     {
      i9 = 3;
      i12 = 120;
      break L351;
     }
    default:
     {
      i12 = 113;
      break L353;
     }
    }
    if ((i11 | 0) < 4194324) switch (i11 | 0) {
    case 1048583:
     {
      i12 = 111;
      break L360;
     }
    default:
     {
      i12 = 113;
      break L353;
     }
    } else switch (i11 | 0) {
    case 4194324:
     {
      i12 = 107;
      break L360;
     }
    default:
     {
      i12 = 113;
      break L353;
     }
    }
   } while (0);
   if ((i12 | 0) == 107) {
    i9 = 8;
    i12 = 114;
    break L351;
   } else if ((i12 | 0) == 111) {
    i9 = 4;
    i12 = 114;
    break L351;
   }
  } else switch (i11 | 0) {
  case 22:
  case 19:
  case 18:
  case 17:
  case 16:
  case 15:
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i9 = 32;
    i12 = 114;
    break L351;
   }
  case 26:
   {
    i9 = 11;
    i12 = 116;
    break L351;
   }
  case 35:
  case 34:
  case 33:
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i12 = 106;
    break;
   }
  case 25:
  case 24:
  case 23:
   {
    i12 = 108;
    break;
   }
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
   {
    i12 = 109;
    break;
   }
  default:
   i12 = 113;
  } while (0);
  if ((i12 | 0) == 106) {
   i9 = 16;
   i12 = 114;
   break;
  } else if ((i12 | 0) == 108) {
   i9 = 10;
   i12 = 114;
   break;
  } else if ((i12 | 0) == 109) {
   i9 = 8;
   i12 = 114;
   break;
  } else if ((i12 | 0) == 113) {
   i9 = 0;
   i12 = 114;
   break;
  }
 } while (0);
 if ((i12 | 0) == 110) {
  i9 = 5;
  i7 = i5;
  i12 = 114;
 }
 L389 : do if ((i12 | 0) == 114) {
  L391 : do if ((i11 | 0) < 57) {
   switch (i11 | 0) {
   case 8:
   case 7:
   case 6:
   case 5:
   case 4:
   case 3:
   case 2:
   case 1:
    {
     i5 = 32;
     i10 = i4;
     i8 = i7;
     i12 = 124;
     break L389;
    }
   case 25:
   case 24:
   case 23:
   case 26:
    {
     i12 = 116;
     break L389;
    }
   case 32:
   case 31:
   case 30:
   case 29:
   case 28:
   case 27:
    {
     i12 = 117;
     break L389;
    }
   case 20:
   case 55:
   case 45:
   case 40:
   case 56:
   case 54:
   case 53:
   case 46:
   case 39:
   case 43:
   case 42:
   case 41:
   case 21:
   case 18:
   case 17:
   case 16:
   case 15:
   case 38:
   case 37:
   case 36:
   case 35:
   case 34:
   case 33:
   case 22:
   case 47:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
   case 44:
   case 19:
    {
     i12 = 121;
     break L391;
    }
   case 14:
   case 13:
   case 12:
   case 11:
   case 10:
   case 9:
    break;
   default:
    {
     i12 = 123;
     break L391;
    }
   }
   i5 = 16;
   i10 = i4;
   i8 = i7;
   i12 = 124;
   break L389;
  } else {
   L395 : do if ((i11 | 0) < 85) switch (i11 | 0) {
   case 69:
   case 68:
    {
     i12 = 117;
     break L389;
    }
   case 67:
    {
     i5 = 9;
     i8 = i7;
     i12 = 128;
     break L389;
    }
   case 65:
   case 66:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
   case 59:
   case 58:
   case 57:
    {
     i12 = 121;
     break L391;
    }
   case 84:
   case 83:
   case 82:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
   case 81:
   case 80:
   case 79:
   case 72:
   case 71:
   case 70:
    break;
   default:
    {
     i12 = 123;
     break L391;
    }
   } else {
    if ((i11 | 0) < 99) switch (i11 | 0) {
    case 89:
     {
      i12 = 116;
      break L389;
     }
    case 93:
    case 92:
    case 91:
    case 90:
    case 88:
    case 87:
     {
      i12 = 117;
      break L389;
     }
    case 86:
    case 85:
     {
      i12 = 118;
      break L389;
     }
    case 98:
    case 97:
    case 96:
    case 95:
    case 94:
     break L395;
    default:
     {
      i12 = 123;
      break L391;
     }
    }
    L401 : do if ((i11 | 0) < 1048581) {
     if ((i11 | 0) >= 1048577) switch (i11 | 0) {
     case 1048577:
     case 1048580:
      {
       i12 = 118;
       break L389;
      }
     case 1048579:
      {
       i12 = 121;
       break L391;
      }
     case 1048578:
      break L401;
     default:
      {
       i12 = 123;
       break L391;
      }
     }
     if ((i11 | 0) < 115) switch (i11 | 0) {
     case 99:
      break L395;
     default:
      {
       i12 = 123;
       break L391;
      }
     }
     if ((i11 | 0) < 1048576) switch (i11 | 0) {
     case 115:
      break L401;
     default:
      {
       i12 = 123;
       break L391;
      }
     } else switch (i11 | 0) {
     case 1048576:
      break L395;
     default:
      {
       i12 = 123;
       break L391;
      }
     }
    } else {
     if ((i11 | 0) >= 4194333) switch (i11 | 0) {
     case 4194339:
      {
       i12 = 116;
       break L389;
      }
     case 4194337:
      {
       i12 = 117;
       break L389;
      }
     case 4194333:
      {
       i12 = 120;
       break L389;
      }
     case 4194334:
      break L401;
     default:
      {
       i12 = 123;
       break L391;
      }
     }
     if ((i11 | 0) < 4194324) switch (i11 | 0) {
     case 1048581:
      {
       i12 = 120;
       break L389;
      }
     case 1048583:
      break L401;
     default:
      {
       i12 = 123;
       break L391;
      }
     } else switch (i11 | 0) {
     case 4194324:
      {
       i12 = 117;
       break L389;
      }
     case 4194331:
      {
       i12 = 120;
       break L389;
      }
     default:
      {
       i12 = 123;
       break L391;
      }
     }
    } while (0);
    i5 = 4;
    i10 = i4;
    i8 = i7;
    i12 = 124;
    break L389;
   } while (0);
   i5 = 0;
   i10 = i4;
   i8 = i7;
   i12 = 124;
   break L389;
  } while (0);
  if ((i12 | 0) == 121) {
   i5 = 0;
   i10 = i4;
   i8 = i7;
   i12 = 124;
   break;
  } else if ((i12 | 0) == 123) {
   i5 = 0;
   i10 = i4;
   i8 = i7;
   i12 = 124;
   break;
  }
 } while (0);
 if ((i12 | 0) == 116) {
  i5 = 10;
  i10 = i4;
  i8 = i7;
  i12 = 124;
 } else if ((i12 | 0) == 117) {
  i5 = 8;
  i10 = i4;
  i8 = i7;
  i12 = 124;
 } else if ((i12 | 0) == 118) {
  i5 = 5;
  i10 = i4;
  i8 = i7;
  i12 = 124;
 } else if ((i12 | 0) == 120) {
  i5 = 2;
  i10 = i4;
  i8 = i7;
  i12 = 124;
 }
 L429 : do if ((i12 | 0) == 124) {
  L431 : do if ((i11 | 0) < 30) switch (i11 | 0) {
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i7 = 64;
    i12 = 134;
    break L431;
   }
  case 25:
  case 24:
  case 23:
   {
    i12 = 127;
    break L431;
   }
  case 29:
  case 28:
  case 27:
   {
    i12 = 129;
    break L431;
   }
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i7 = 32;
    i12 = 134;
    break L431;
   }
  case 26:
   {
    i7 = 22;
    i12 = 140;
    break L429;
   }
  default:
   {
    i12 = 133;
    break L431;
   }
  } else {
   L437 : do if ((i11 | 0) >= 90) {
    if ((i11 | 0) < 1048577) switch (i11 | 0) {
    case 115:
    case 93:
    case 92:
    case 91:
    case 90:
     break L437;
    default:
     {
      i12 = 133;
      break L431;
     }
    }
    if ((i11 | 0) < 1048581) {
     switch (i11 | 0) {
     case 1048577:
      {
       i7 = 1;
       i12 = 139;
       break L431;
      }
     case 1048580:
      break L437;
     case 1048578:
      break;
     default:
      {
       i12 = 133;
       break L431;
      }
     }
     i7 = 4;
     i12 = 136;
     break L431;
    }
    if ((i11 | 0) < 1048583) {
     switch (i11 | 0) {
     case 1048581:
      break;
     default:
      {
       i12 = 133;
       break L431;
      }
     }
     i7 = 6;
     i12 = 140;
     break L429;
    }
    if ((i11 | 0) < 4194337) switch (i11 | 0) {
    case 1048583:
     {
      i7 = 8;
      i12 = 136;
      break L431;
     }
    default:
     {
      i12 = 133;
      break L431;
     }
    } else switch (i11 | 0) {
    case 4194337:
     {
      i12 = 129;
      break L431;
     }
    default:
     {
      i12 = 133;
      break L431;
     }
    }
   } else switch (i11 | 0) {
   case 69:
    {
     i7 = 24;
     i12 = 140;
     break L429;
    }
   case 67:
    {
     i4 = i10;
     i12 = 128;
     break L429;
    }
   case 89:
    {
     i12 = 127;
     break L431;
    }
   case 68:
   case 32:
   case 31:
   case 30:
    {
     i12 = 129;
     break L431;
    }
   case 86:
   case 85:
   case 88:
   case 87:
    break;
   default:
    {
     i12 = 133;
     break L431;
    }
   } while (0);
   i7 = 0;
   i12 = 134;
  } while (0);
  if ((i12 | 0) == 127) {
   i7 = 20;
   i12 = 134;
  } else if ((i12 | 0) == 129) {
   i7 = 16;
   i12 = 134;
  } else if ((i12 | 0) == 133) {
   i7 = 0;
   i12 = 134;
  }
  L459 : do if ((i12 | 0) == 134) {
   L461 : do if ((i11 | 0) < 56) {
    switch (i11 | 0) {
    case 20:
    case 55:
    case 45:
    case 40:
    case 54:
    case 53:
    case 46:
    case 39:
    case 43:
    case 42:
    case 41:
    case 21:
    case 18:
    case 17:
    case 16:
    case 15:
    case 38:
    case 37:
    case 36:
    case 35:
    case 34:
    case 33:
    case 22:
    case 47:
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
    case 44:
    case 19:
    case 8:
    case 7:
    case 6:
    case 5:
    case 26:
     {
      i12 = 140;
      break L429;
     }
    case 4:
    case 3:
    case 2:
    case 1:
     {
      i4 = 32;
      i15 = i7;
      i14 = i9;
      i13 = i10;
      break L429;
     }
    case 25:
    case 24:
    case 23:
     {
      i12 = 137;
      break L461;
     }
    case 32:
    case 31:
    case 30:
    case 29:
    case 28:
    case 27:
     {
      i12 = 138;
      break L461;
     }
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
     break;
    default:
     {
      i12 = 142;
      break L461;
     }
    }
    i4 = 16;
    i15 = i7;
    i14 = i9;
    i13 = i10;
    break L429;
   } else {
    L465 : do if ((i11 | 0) >= 83) {
     if ((i11 | 0) < 97) switch (i11 | 0) {
     case 85:
     case 93:
     case 92:
     case 88:
      {
       i12 = 140;
       break L429;
      }
     case 86:
      {
       i12 = 139;
       break L459;
      }
     case 91:
     case 90:
     case 87:
      {
       i12 = 138;
       break L461;
      }
     case 89:
      {
       i12 = 137;
       break L461;
      }
     case 96:
     case 95:
     case 94:
     case 84:
     case 83:
      break L465;
     default:
      {
       i12 = 142;
       break L461;
      }
     }
     if ((i11 | 0) < 1048579) {
      if ((i11 | 0) < 115) switch (i11 | 0) {
      case 99:
      case 98:
      case 97:
       break L465;
      default:
       {
        i12 = 142;
        break L461;
       }
      }
      if ((i11 | 0) >= 1048577) switch (i11 | 0) {
      case 1048577:
       {
        i12 = 139;
        break L459;
       }
      case 1048578:
       {
        i12 = 136;
        break L459;
       }
      default:
       {
        i12 = 142;
        break L461;
       }
      }
      if ((i11 | 0) < 1048576) switch (i11 | 0) {
      case 115:
       {
        i12 = 136;
        break L459;
       }
      default:
       {
        i12 = 142;
        break L461;
       }
      } else switch (i11 | 0) {
      case 1048576:
       break L465;
      default:
       {
        i12 = 142;
        break L461;
       }
      }
     } else {
      if ((i11 | 0) < 1048583) switch (i11 | 0) {
      case 1048581:
      case 1048580:
       {
        i12 = 140;
        break L429;
       }
      case 1048579:
       {
        i12 = 138;
        break L461;
       }
      default:
       {
        i12 = 142;
        break L461;
       }
      }
      if ((i11 | 0) >= 4194339) switch (i11 | 0) {
      case 4194356:
       {
        i12 = 136;
        break L459;
       }
      case 4194339:
       {
        i12 = 137;
        break L461;
       }
      default:
       {
        i12 = 142;
        break L461;
       }
      }
      if ((i11 | 0) < 4194333) switch (i11 | 0) {
      case 1048583:
       {
        i12 = 136;
        break L459;
       }
      default:
       {
        i12 = 142;
        break L461;
       }
      } else switch (i11 | 0) {
      case 4194333:
       {
        i12 = 138;
        break L461;
       }
      default:
       {
        i12 = 142;
        break L461;
       }
      }
     }
    } else switch (i11 | 0) {
    case 66:
    case 64:
    case 63:
    case 62:
    case 61:
    case 60:
    case 59:
    case 58:
    case 57:
    case 56:
    case 67:
    case 69:
    case 68:
     {
      i12 = 140;
      break L429;
     }
    case 65:
     {
      i12 = 138;
      break L461;
     }
    case 82:
    case 78:
    case 77:
    case 76:
    case 75:
    case 74:
    case 73:
    case 81:
    case 80:
    case 79:
    case 72:
    case 71:
    case 70:
     break;
    default:
     {
      i12 = 142;
      break L461;
     }
    } while (0);
    i4 = 0;
    i15 = i7;
    i14 = i9;
    i13 = i10;
    break L429;
   } while (0);
   if ((i12 | 0) == 137) {
    i4 = 2;
    i15 = i7;
    i14 = i9;
    i13 = i10;
    break L429;
   } else if ((i12 | 0) == 138) {
    i4 = 8;
    i15 = i7;
    i14 = i9;
    i13 = i10;
    break L429;
   } else if ((i12 | 0) == 142) {
    i4 = 0;
    i15 = i7;
    i14 = i9;
    i13 = i10;
    break L429;
   }
  } while (0);
  if ((i12 | 0) == 136) {
   i4 = 4;
   i15 = i7;
   i14 = i9;
   i13 = i10;
   break;
  } else if ((i12 | 0) == 139) {
   i4 = 1;
   i15 = i7;
   i14 = i9;
   i13 = i10;
   break;
  }
 } while (0);
 if ((i12 | 0) == 128) {
  i7 = 18;
  i10 = i4;
  i12 = 140;
 }
 if ((i12 | 0) == 140) {
  i4 = 0;
  i15 = i7;
  i14 = i9;
  i13 = i10;
 }
 L505 : do if ((i11 | 0) < 30) {
  switch (i11 | 0) {
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i16 = 96;
    break L505;
   }
  case 25:
  case 24:
  case 23:
   {
    i12 = 145;
    break L505;
   }
  case 29:
  case 28:
  case 27:
   {
    i12 = 146;
    break L505;
   }
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   break;
  default:
   {
    i12 = 152;
    break L505;
   }
  }
  i16 = 48;
 } else {
  L509 : do if ((i11 | 0) < 91) {
   switch (i11 | 0) {
   case 89:
    {
     i12 = 145;
     break L505;
    }
   case 90:
   case 87:
   case 32:
   case 31:
   case 30:
    {
     i12 = 146;
     break L505;
    }
   case 65:
    break L509;
   case 86:
    break;
   default:
    {
     i12 = 152;
     break L505;
    }
   }
   i16 = 15;
   break L505;
  } else {
   L513 : do if ((i11 | 0) < 1048579) if ((i11 | 0) < 1048577) switch (i11 | 0) {
   case 91:
    {
     i12 = 146;
     break L505;
    }
   case 115:
    break L513;
   default:
    {
     i12 = 152;
     break L505;
    }
   } else switch (i11 | 0) {
   case 1048578:
   case 1048577:
    break L509;
   default:
    {
     i12 = 152;
     break L505;
    }
   } else {
    L519 : do if ((i11 | 0) < 4194333) switch (i11 | 0) {
    case 1048583:
     break L513;
    case 1048579:
     break;
    default:
     {
      i12 = 152;
      break L505;
     }
    } else {
     switch (i11 | 0) {
     case 4194339:
      {
       i12 = 145;
       break L505;
      }
     case 4194333:
      break L519;
     case 4194356:
      break;
     default:
      {
       i12 = 152;
       break L505;
      }
     }
     i16 = 4;
     break L505;
    } while (0);
    i16 = 8;
    break L505;
   } while (0);
   i16 = 12;
   break L505;
  } while (0);
  i16 = 0;
 } while (0);
 if ((i12 | 0) == 145) i16 = 30; else if ((i12 | 0) == 146) i16 = 24; else if ((i12 | 0) == 152) i16 = 0;
 if ((i2 | 0) > 0) {
  i11 = i1 & 7;
  i12 = i2;
  i7 = i22 + (i1 >> 3) | 0;
  i10 = 0;
  i9 = 0;
  while (1) {
   i1 = ((i12 | 0) < 8 ? i12 : 8) + i11 | 0;
   i9 = ((HEAPU8[i7 >> 0] | 0) & -1 << i11 & (i1 >>> 0 > 31 ? 255 : (1 << i1) + 255 | 0)) >>> i11 << i10 | i9;
   i1 = 8 - i11 | 0;
   i12 = i12 - i1 | 0;
   if ((i12 | 0) <= 0) break; else {
    i11 = 0;
    i7 = i7 + 1 | 0;
    i10 = i1 + i10 | 0;
   }
  }
  i1 = i8 >>> 0 > 31;
  i1 = ___muldi3(i9 | 0, 0, (i1 ? -1 : (1 << i8) + -1 | 0) | 0, (i1 ? 0 : 0) | 0) | 0;
  i12 = i2 + -1 | 0;
  i12 = _i64Add(i1 | 0, tempRet0 | 0, (i12 >>> 0 > 31 ? -1 : (1 << i12) + -1 | 0) | 0, (i12 >>> 0 > 31 ? 0 : 0) | 0) | 0;
  i1 = i2 >>> 0 > 31;
  i1 = ___udivdi3(i12 | 0, tempRet0 | 0, (i1 ? -1 : (1 << i2) + -1 | 0) | 0, (i1 ? 0 : 0) | 0) | 0;
 } else i1 = 0;
 if ((i8 | 0) > 0) {
  i9 = i13 & 7;
  i7 = i23 + (i13 >> 3) | 0;
  while (1) {
   i2 = (i8 | 0) < 8 ? i8 : 8;
   i13 = i2 + i9 | 0;
   i12 = 8 - i9 | 0;
   i2 = (i2 | 0) > (i12 | 0) ? i12 : i2;
   HEAP8[i7 >> 0] = ((i13 >>> 0 > 31 ? 255 : (1 << i13) + 255 | 0) & -1 << i9 ^ 255) & (HEAPU8[i7 >> 0] | 0) | ((i2 >>> 0 > 31 ? -1 : (1 << i2) + -1 | 0) & i1) << i9;
   i8 = i8 - i2 | 0;
   if ((i8 | 0) <= 0) break; else {
    i1 = i1 >>> i2;
    i9 = 0;
    i7 = i7 + 1 | 0;
   }
  }
 }
 if ((i3 | 0) > 0) {
  i9 = i17 & 7;
  i10 = i3;
  i7 = i22 + (i17 >> 3) | 0;
  i8 = 0;
  i1 = 0;
  while (1) {
   i2 = ((i10 | 0) < 8 ? i10 : 8) + i9 | 0;
   i1 = ((HEAPU8[i7 >> 0] | 0) & -1 << i9 & (i2 >>> 0 > 31 ? 255 : (1 << i2) + 255 | 0)) >>> i9 << i8 | i1;
   i2 = 8 - i9 | 0;
   i10 = i10 - i2 | 0;
   if ((i10 | 0) <= 0) break; else {
    i9 = 0;
    i7 = i7 + 1 | 0;
    i8 = i2 + i8 | 0;
   }
  }
  i17 = i6 >>> 0 > 31;
  i1 = ___muldi3(i1 | 0, 0, (i17 ? -1 : (1 << i6) + -1 | 0) | 0, (i17 ? 0 : 0) | 0) | 0;
  i17 = i3 + -1 | 0;
  i17 = _i64Add(i1 | 0, tempRet0 | 0, (i17 >>> 0 > 31 ? -1 : (1 << i17) + -1 | 0) | 0, (i17 >>> 0 > 31 ? 0 : 0) | 0) | 0;
  i1 = i3 >>> 0 > 31;
  i1 = ___udivdi3(i17 | 0, tempRet0 | 0, (i1 ? -1 : (1 << i3) + -1 | 0) | 0, (i1 ? 0 : 0) | 0) | 0;
 } else i1 = 0;
 if ((i6 | 0) > 0) {
  i7 = i14 & 7;
  i3 = i23 + (i14 >> 3) | 0;
  while (1) {
   i2 = (i6 | 0) < 8 ? i6 : 8;
   i17 = i2 + i7 | 0;
   i14 = 8 - i7 | 0;
   i2 = (i2 | 0) > (i14 | 0) ? i14 : i2;
   HEAP8[i3 >> 0] = ((i17 >>> 0 > 31 ? 255 : (1 << i17) + 255 | 0) & -1 << i7 ^ 255) & (HEAPU8[i3 >> 0] | 0) | ((i2 >>> 0 > 31 ? -1 : (1 << i2) + -1 | 0) & i1) << i7;
   i6 = i6 - i2 | 0;
   if ((i6 | 0) <= 0) break; else {
    i1 = i1 >>> i2;
    i7 = 0;
    i3 = i3 + 1 | 0;
   }
  }
 }
 if ((i20 | 0) > 0) {
  i7 = i18 & 7;
  i8 = i20;
  i3 = i22 + (i18 >> 3) | 0;
  i6 = 0;
  i1 = 0;
  while (1) {
   i2 = ((i8 | 0) < 8 ? i8 : 8) + i7 | 0;
   i1 = ((HEAPU8[i3 >> 0] | 0) & -1 << i7 & (i2 >>> 0 > 31 ? 255 : (1 << i2) + 255 | 0)) >>> i7 << i6 | i1;
   i2 = 8 - i7 | 0;
   i8 = i8 - i2 | 0;
   if ((i8 | 0) <= 0) break; else {
    i7 = 0;
    i3 = i3 + 1 | 0;
    i6 = i2 + i6 | 0;
   }
  }
  i18 = i5 >>> 0 > 31;
  i1 = ___muldi3(i1 | 0, 0, (i18 ? -1 : (1 << i5) + -1 | 0) | 0, (i18 ? 0 : 0) | 0) | 0;
  i18 = i20 + -1 | 0;
  i18 = _i64Add(i1 | 0, tempRet0 | 0, (i18 >>> 0 > 31 ? -1 : (1 << i18) + -1 | 0) | 0, (i18 >>> 0 > 31 ? 0 : 0) | 0) | 0;
  i1 = i20 >>> 0 > 31;
  i1 = ___udivdi3(i18 | 0, tempRet0 | 0, (i1 ? -1 : (1 << i20) + -1 | 0) | 0, (i1 ? 0 : 0) | 0) | 0;
 } else i1 = 0;
 if ((i5 | 0) > 0) {
  i6 = i15 & 7;
  i3 = i23 + (i15 >> 3) | 0;
  while (1) {
   i2 = (i5 | 0) < 8 ? i5 : 8;
   i20 = i2 + i6 | 0;
   i18 = 8 - i6 | 0;
   i2 = (i2 | 0) > (i18 | 0) ? i18 : i2;
   HEAP8[i3 >> 0] = ((i20 >>> 0 > 31 ? 255 : (1 << i20) + 255 | 0) & -1 << i6 ^ 255) & (HEAPU8[i3 >> 0] | 0) | ((i2 >>> 0 > 31 ? -1 : (1 << i2) + -1 | 0) & i1) << i6;
   i5 = i5 - i2 | 0;
   if ((i5 | 0) <= 0) break; else {
    i1 = i1 >>> i2;
    i6 = 0;
    i3 = i3 + 1 | 0;
   }
  }
 }
 if (!i21) i1 = i4 >>> 0 > 31 ? -1 : (1 << i4) + -1 | 0; else {
  i6 = i19 & 7;
  i7 = i21;
  i3 = i22 + (i19 >>> 3) | 0;
  i5 = 0;
  i1 = 0;
  while (1) {
   i2 = ((i7 | 0) < 8 ? i7 : 8) + i6 | 0;
   i1 = ((HEAPU8[i3 >> 0] | 0) & -1 << i6 & (i2 >>> 0 > 31 ? 255 : (1 << i2) + 255 | 0)) >>> i6 << i5 | i1;
   i2 = 8 - i6 | 0;
   i7 = i7 - i2 | 0;
   if ((i7 | 0) <= 0) break; else {
    i6 = 0;
    i3 = i3 + 1 | 0;
    i5 = i2 + i5 | 0;
   }
  }
  i22 = i4 >>> 0 > 31;
  i1 = ___muldi3(i1 | 0, 0, (i22 ? -1 : (1 << i4) + -1 | 0) | 0, (i22 ? 0 : 0) | 0) | 0;
  i22 = i21 + -1 | 0;
  i22 = _i64Add(i1 | 0, tempRet0 | 0, (i22 >>> 0 > 31 ? -1 : (1 << i22) + -1 | 0) | 0, (i22 >>> 0 > 31 ? 0 : 0) | 0) | 0;
  i1 = i21 >>> 0 > 31;
  i1 = ___udivdi3(i22 | 0, tempRet0 | 0, (i1 ? -1 : (1 << i21) + -1 | 0) | 0, (i1 ? 0 : 0) | 0) | 0;
 }
 if (!i4) return 1;
 i5 = i16 & 7;
 i3 = i23 + (i16 >>> 3) | 0;
 while (1) {
  i2 = (i4 | 0) < 8 ? i4 : 8;
  i23 = i2 + i5 | 0;
  i22 = 8 - i5 | 0;
  i2 = (i2 | 0) > (i22 | 0) ? i22 : i2;
  HEAP8[i3 >> 0] = ((i23 >>> 0 > 31 ? 255 : (1 << i23) + 255 | 0) & -1 << i5 ^ 255) & (HEAPU8[i3 >> 0] | 0) | ((i2 >>> 0 > 31 ? -1 : (1 << i2) + -1 | 0) & i1) << i5;
  i4 = i4 - i2 | 0;
  if ((i4 | 0) <= 0) break; else {
   i1 = i1 >>> i2;
   i5 = 0;
   i3 = i3 + 1 | 0;
  }
 }
 return 1;
}

function _ft_gzip_file_fill_output(i27) {
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i27 + 8268 >> 2] = i27 + 4168;
 HEAP32[i27 + 24 >> 2] = i27 + 4168;
 HEAP32[i27 + 28 >> 2] = 4096;
 L1 : while (1) {
  if (!(HEAP32[i27 + 16 >> 2] | 0)) {
   i3 = HEAP32[i27 >> 2] | 0;
   i1 = HEAP32[i3 + 20 >> 2] | 0;
   if (i1) {
    i1 = FUNCTION_TABLE_iiiii[i1 & 63](i3, HEAP32[i3 + 8 >> 2] | 0, i27 + 72 | 0, 4096) | 0;
    if (!i1) {
     i1 = 85;
     i17 = 272;
     break;
    } else i2 = i3 + 8 | 0;
   } else {
    i2 = HEAP32[i3 + 8 >> 2] | 0;
    i1 = (HEAP32[i3 + 4 >> 2] | 0) - i2 | 0;
    i1 = i1 >>> 0 > 4096 ? 4096 : i1;
    if (!i1) {
     i1 = 85;
     i17 = 272;
     break;
    }
    _memcpy(i27 + 72 | 0, (HEAP32[i3 >> 2] | 0) + i2 | 0, i1 | 0) | 0;
    i2 = i3 + 8 | 0;
   }
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i1;
   HEAP32[i27 + 12 >> 2] = i27 + 72;
   HEAP32[i27 + 16 >> 2] = i1;
  }
  i1 = HEAP32[i27 + 40 >> 2] | 0;
  if (!i1) {
   i1 = 85;
   i17 = 272;
   break;
  }
  if (!(HEAP32[i27 + 12 >> 2] | 0)) {
   i1 = 85;
   i17 = 272;
   break;
  } else i2 = -5;
  L12 : while (1) {
   i6 = i1 + 4 | 0;
   i5 = i1 + 16 | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   L14 : while (1) {
    L16 : do switch (i3 | 0) {
    case 6:
     {
      i17 = 40;
      break L1;
     }
    case 12:
     {
      i17 = 271;
      break L1;
     }
    case 2:
     {
      i3 = i1;
      i17 = 28;
      break L12;
     }
    case 3:
     {
      i3 = i1;
      i17 = 31;
      break L12;
     }
    case 4:
     {
      i3 = i1;
      i17 = 34;
      break L12;
     }
    case 5:
     {
      i3 = i1;
      i4 = i2;
      i17 = 37;
      break L12;
     }
    case 7:
     {
      i17 = 41;
      break L14;
     }
    case 8:
     {
      i3 = i2;
      i17 = 260;
      break L14;
     }
    case 9:
     {
      i17 = 15;
      break L14;
     }
    case 10:
     {
      i17 = 14;
      break L14;
     }
    case 11:
     {
      i17 = 13;
      break L14;
     }
    case 0:
     {
      i3 = HEAP32[i27 + 16 >> 2] | 0;
      if (!i3) {
       i1 = i2;
       i17 = 270;
       break L12;
      }
      HEAP32[i27 + 16 >> 2] = i3 + -1;
      HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
      i2 = HEAP32[i27 + 12 >> 2] | 0;
      HEAP32[i27 + 12 >> 2] = i2 + 1;
      i2 = HEAPU8[i2 >> 0] | 0;
      HEAP32[i6 >> 2] = i2;
      if ((i2 & 15 | 0) != 8) {
       HEAP32[i1 >> 2] = 13;
       HEAP32[i27 + 36 >> 2] = 326039;
       HEAP32[i6 >> 2] = 5;
       i3 = 13;
       i2 = 0;
       continue L14;
      }
      if (((i2 >>> 4) + 8 | 0) >>> 0 > (HEAP32[i5 >> 2] | 0) >>> 0) {
       HEAP32[i1 >> 2] = 13;
       HEAP32[i27 + 36 >> 2] = 326066;
       HEAP32[i6 >> 2] = 5;
       i3 = 13;
       i2 = 0;
       continue L14;
      } else {
       HEAP32[i1 >> 2] = 1;
       i2 = 0;
       break L16;
      }
     }
    case 1:
     break;
    default:
     {
      i1 = 85;
      i17 = 272;
      break L1;
     }
    } while (0);
    i4 = HEAP32[i27 + 16 >> 2] | 0;
    if (!i4) {
     i1 = i2;
     i17 = 270;
     break L12;
    }
    HEAP32[i27 + 16 >> 2] = i4 + -1;
    HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
    i2 = HEAP32[i27 + 12 >> 2] | 0;
    HEAP32[i27 + 12 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
    if (((HEAP32[i6 >> 2] << 8 | i2) >>> 0) % 31 | 0) {
     HEAP32[i1 >> 2] = 13;
     HEAP32[i27 + 36 >> 2] = 326086;
     HEAP32[i6 >> 2] = 5;
     i3 = 13;
     i2 = 0;
     continue;
    }
    if (i2 & 32) {
     i3 = i1;
     i17 = 27;
     break L12;
    }
    HEAP32[i1 >> 2] = 7;
    i3 = 7;
    i2 = 0;
   }
   do if ((i17 | 0) == 13) {
    i17 = 0;
    i3 = HEAP32[i27 + 16 >> 2] | 0;
   } else if ((i17 | 0) == 14) {
    i3 = HEAP32[i27 + 16 >> 2] | 0;
    i17 = 264;
   } else if ((i17 | 0) == 15) {
    i3 = HEAP32[i27 + 16 >> 2] | 0;
    i17 = 262;
   } else if ((i17 | 0) == 41) {
    i17 = 0;
    i18 = HEAP32[i1 + 20 >> 2] | 0;
    i8 = HEAP32[i18 + 52 >> 2] | 0;
    i1 = HEAP32[i18 + 48 >> 2] | 0;
    if (i8 >>> 0 < i1 >>> 0) {
     i16 = i18 + 44 | 0;
     i1 = i1 + ~i8 | 0;
    } else {
     i16 = i18 + 44 | 0;
     i1 = (HEAP32[i18 + 44 >> 2] | 0) - i8 | 0;
    }
    i7 = HEAP32[i18 + 32 >> 2] | 0;
    i4 = HEAP32[i18 + 28 >> 2] | 0;
    i6 = i1;
    i5 = HEAP32[i27 + 16 >> 2] | 0;
    i3 = HEAP32[i27 + 12 >> 2] | 0;
    i1 = i8;
    L37 : while (1) {
     switch (HEAP32[i18 >> 2] | 0) {
     case 7:
      {
       i17 = 243;
       break L37;
      }
     case 8:
      {
       i17 = 246;
       break L37;
      }
     case 9:
      {
       i6 = i7;
       i2 = i3;
       i17 = 247;
       break L37;
      }
     case 0:
      {
       if (i4 >>> 0 < 3) {
        i9 = i3;
        while (1) {
         if (!i5) {
          i5 = i7;
          i3 = i9;
          i17 = 52;
          break L37;
         }
         i5 = i5 + -1 | 0;
         i3 = i9 + 1 | 0;
         i7 = (HEAPU8[i9 >> 0] | 0) << i4 | i7;
         i4 = i4 + 8 | 0;
         if (i4 >>> 0 < 3) {
          i2 = 0;
          i9 = i3;
         } else {
          i2 = 0;
          i9 = i7;
          break;
         }
        }
       } else i9 = i7;
       HEAP32[i18 + 24 >> 2] = i9 & 1;
       switch (i9 >>> 1 & 3 | 0) {
       case 3:
        {
         i2 = i9;
         i17 = 59;
         break L37;
        }
       case 0:
        {
         i4 = i4 + -3 | 0;
         HEAP32[i18 >> 2] = 1;
         i14 = i1;
         i15 = i6;
         i7 = i9 >>> 3 >>> (i4 & 7);
         i4 = i4 - (i4 & 7) | 0;
         i1 = i14;
         i6 = i15;
         continue L37;
        }
       case 1:
        {
         i7 = FUNCTION_TABLE_iiii[HEAP32[i27 + 44 >> 2] & 127](HEAP32[i27 + 52 >> 2] | 0, 1, 28) | 0;
         if (!i7) {
          i2 = i9;
          i17 = 57;
          break L37;
         }
         HEAP32[i7 >> 2] = 0;
         HEAP8[i7 + 16 >> 0] = 9;
         HEAP8[i7 + 17 >> 0] = 5;
         HEAP32[i7 + 20 >> 2] = 275432;
         HEAP32[i7 + 24 >> 2] = 279528;
         HEAP32[i18 + 4 >> 2] = i7;
         HEAP32[i18 >> 2] = 6;
         i14 = i1;
         i15 = i6;
         i7 = i9 >>> 3;
         i4 = i4 + -3 | 0;
         i1 = i14;
         i6 = i15;
         continue L37;
        }
       case 2:
        {
         HEAP32[i18 >> 2] = 3;
         i14 = i1;
         i15 = i6;
         i7 = i9 >>> 3;
         i4 = i4 + -3 | 0;
         i1 = i14;
         i6 = i15;
         continue L37;
        }
       default:
        {
         i14 = i1;
         i15 = i6;
         i7 = i9;
         i1 = i14;
         i6 = i15;
         continue L37;
        }
       }
      }
     case 1:
      {
       if (i4 >>> 0 < 32) while (1) {
        if (!i5) {
         i5 = i7;
         i17 = 62;
         break L37;
        }
        i5 = i5 + -1 | 0;
        i8 = i3 + 1 | 0;
        i7 = (HEAPU8[i3 >> 0] | 0) << i4 | i7;
        i4 = i4 + 8 | 0;
        if (i4 >>> 0 < 32) {
         i2 = 0;
         i3 = i8;
        } else {
         i2 = 0;
         i9 = i7;
         i3 = i8;
         break;
        }
       } else i9 = i7;
       i7 = i9 >>> 16;
       if ((i7 ^ 65535 | 0) != (i9 & 65535 | 0)) {
        i2 = i9;
        i17 = 64;
        break L37;
       }
       HEAP32[i18 + 4 >> 2] = i7 ^ 65535;
       if ((i7 | 0) == 65535) i4 = (HEAP32[i18 + 24 >> 2] | 0) != 0 ? 7 : 0; else i4 = 2;
       HEAP32[i18 >> 2] = i4;
       i14 = i1;
       i15 = i6;
       i7 = 0;
       i4 = 0;
       i1 = i14;
       i6 = i15;
       continue L37;
      }
     case 2:
      {
       if (!i5) {
        i5 = i7;
        i17 = 69;
        break L37;
       }
       do if (!i6) {
        if ((i1 | 0) == (HEAP32[i16 >> 2] | 0) ? (i19 = HEAP32[i18 + 48 >> 2] | 0, i20 = HEAP32[i18 + 40 >> 2] | 0, (i19 | 0) != (i20 | 0)) : 0) {
         i1 = i20 >>> 0 < i19 >>> 0 ? i19 + -1 | 0 : i1;
         if ((i1 | 0) == (i20 | 0)) i1 = i20; else {
          i6 = i1 - i20 | 0;
          i1 = i20;
          break;
         }
        }
        HEAP32[i18 + 52 >> 2] = i1;
        i9 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
        i1 = HEAP32[i18 + 52 >> 2] | 0;
        i2 = HEAP32[i18 + 48 >> 2] | 0;
        if (i1 >>> 0 < i2 >>> 0) {
         i6 = i2 + ~i1 | 0;
         i8 = HEAP32[i16 >> 2] | 0;
        } else {
         i8 = HEAP32[i16 >> 2] | 0;
         i6 = i8 - i1 | 0;
        }
        if ((i1 | 0) == (i8 | 0) ? (i21 = HEAP32[i18 + 40 >> 2] | 0, (i2 | 0) != (i21 | 0)) : 0) {
         i6 = (i21 >>> 0 < i2 >>> 0 ? i2 + -1 | 0 : i1) - i21 | 0;
         i1 = i21;
        }
        if (!i6) {
         i17 = 81;
         break L37;
        }
       } while (0);
       i15 = HEAP32[i18 + 4 >> 2] | 0;
       i15 = i15 >>> 0 > i5 >>> 0 ? i5 : i15;
       i15 = i15 >>> 0 > i6 >>> 0 ? i6 : i15;
       _memcpy(i1 | 0, i3 | 0, i15 | 0) | 0;
       i3 = i3 + i15 | 0;
       i5 = i5 - i15 | 0;
       i1 = i1 + i15 | 0;
       i6 = i6 - i15 | 0;
       i14 = HEAP32[i18 + 4 >> 2] | 0;
       HEAP32[i18 + 4 >> 2] = i14 - i15;
       if ((i14 | 0) != (i15 | 0)) {
        i14 = i4;
        i15 = i7;
        i2 = 0;
        i4 = i14;
        i7 = i15;
        continue L37;
       }
       HEAP32[i18 >> 2] = (HEAP32[i18 + 24 >> 2] | 0) != 0 ? 7 : 0;
       i14 = i4;
       i15 = i7;
       i2 = 0;
       i4 = i14;
       i7 = i15;
       continue L37;
      }
     case 3:
      {
       if (i4 >>> 0 < 14) {
        i6 = i7;
        i9 = i3;
        while (1) {
         if (!i5) {
          i3 = i9;
          i17 = 86;
          break L37;
         }
         i5 = i5 + -1 | 0;
         i3 = i9 + 1 | 0;
         i6 = (HEAPU8[i9 >> 0] | 0) << i4 | i6;
         i4 = i4 + 8 | 0;
         if (i4 >>> 0 < 14) {
          i2 = 0;
          i9 = i3;
         } else {
          i2 = 0;
          break;
         }
        }
       } else i6 = i7;
       HEAP32[i18 + 4 >> 2] = i6 & 16383;
       i7 = i6 & 31;
       if (i7 >>> 0 > 29) {
        i17 = 89;
        break L37;
       }
       i8 = i6 >>> 5 & 31;
       if (i8 >>> 0 > 29) {
        i17 = 89;
        break L37;
       }
       i17 = FUNCTION_TABLE_iiii[HEAP32[i27 + 44 >> 2] & 127](HEAP32[i27 + 52 >> 2] | 0, i7 + 258 + i8 | 0, 4) | 0;
       HEAP32[i18 + 12 >> 2] = i17;
       if (!i17) {
        i17 = 91;
        break L37;
       }
       HEAP32[i18 + 8 >> 2] = 0;
       HEAP32[i18 >> 2] = 4;
       i8 = 0;
       i7 = i6 >>> 14;
       i4 = i4 + -14 | 0;
       i17 = 96;
       break;
      }
     case 4:
      {
       i6 = HEAP32[i18 + 8 >> 2] | 0;
       if (i6 >>> 0 < (((HEAP32[i18 + 4 >> 2] | 0) >>> 10) + 4 | 0) >>> 0) {
        i8 = i6;
        i17 = 96;
       } else {
        i9 = HEAP32[i18 + 12 >> 2] | 0;
        i17 = 95;
       }
       break;
      }
     case 5:
      {
       i6 = HEAP32[i18 + 8 >> 2] | 0;
       i17 = 112;
       break;
      }
     case 6:
      break;
     default:
      {
       i6 = i7;
       i2 = i3;
       i17 = 248;
       break L37;
      }
     }
     if ((i17 | 0) == 96) while (1) {
      if (i4 >>> 0 < 3) while (1) {
       if (!i5) {
        i5 = i7;
        i17 = 99;
        break L37;
       }
       i5 = i5 + -1 | 0;
       i9 = i3 + 1 | 0;
       i3 = (HEAPU8[i3 >> 0] | 0) << i4 | i7;
       i4 = i4 + 8 | 0;
       if (i4 >>> 0 < 3) {
        i2 = 0;
        i7 = i3;
        i3 = i9;
       } else {
        i2 = 0;
        i7 = i3;
        i3 = i9;
        break;
       }
      }
      HEAP32[i18 + 8 >> 2] = i8 + 1;
      i9 = HEAP32[i18 + 12 >> 2] | 0;
      HEAP32[i9 + (HEAP32[279784 + (i8 << 2) >> 2] << 2) >> 2] = i7 & 7;
      i7 = i7 >>> 3;
      i4 = i4 + -3 | 0;
      i6 = HEAP32[i18 + 8 >> 2] | 0;
      if (i6 >>> 0 < (((HEAP32[i18 + 4 >> 2] | 0) >>> 10) + 4 | 0) >>> 0) {
       i8 = i6;
       i17 = 96;
      } else {
       i17 = 95;
       break;
      }
     }
     if ((i17 | 0) == 95) {
      if (i6 >>> 0 < 19) do {
       HEAP32[i18 + 8 >> 2] = i6 + 1;
       HEAP32[i9 + (HEAP32[279784 + (i6 << 2) >> 2] << 2) >> 2] = 0;
       i6 = HEAP32[i18 + 8 >> 2] | 0;
      } while (i6 >>> 0 < 19);
      HEAP32[i18 + 16 >> 2] = 7;
      i6 = HEAP32[i18 + 36 >> 2] | 0;
      HEAP32[i28 + 16 >> 2] = 0;
      i8 = FUNCTION_TABLE_iiii[HEAP32[i27 + 44 >> 2] & 127](HEAP32[i27 + 52 >> 2] | 0, 19, 4) | 0;
      if (!i8) {
       i17 = 103;
       break;
      }
      i6 = _huft_build(i9, 19, 19, 0, 0, i18 + 20 | 0, i18 + 16 | 0, i6, i28 + 16 | 0, i8) | 0;
      switch (i6 | 0) {
      case -5:
       {
        i17 = 106;
        break L37;
       }
      case -3:
       {
        i2 = 326209;
        i17 = 107;
        break L37;
       }
      default:
       {}
      }
      if (!(HEAP32[i18 + 16 >> 2] | 0)) {
       i17 = 106;
       break;
      }
      FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, i8);
      switch (i6 | 0) {
      case -3:
       {
        i17 = 109;
        break L37;
       }
      case 0:
       break;
      default:
       {
        i17 = 110;
        break L37;
       }
      }
      HEAP32[i18 + 8 >> 2] = 0;
      HEAP32[i18 >> 2] = 5;
      i6 = 0;
      i17 = 112;
     }
     if ((i17 | 0) == 112) {
      i17 = 0;
      i9 = HEAP32[i18 + 4 >> 2] | 0;
      if (i6 >>> 0 < ((i9 & 31) + 258 + (i9 >>> 5 & 31) | 0) >>> 0) {
       i15 = i6;
       while (1) {
        i8 = HEAP32[i18 + 16 >> 2] | 0;
        if (i4 >>> 0 < i8 >>> 0) {
         i6 = i3;
         while (1) {
          if (!i5) {
           i5 = i7;
           i3 = i6;
           i17 = 117;
           break L37;
          }
          i5 = i5 + -1 | 0;
          i3 = i6 + 1 | 0;
          i7 = (HEAPU8[i6 >> 0] | 0) << i4 | i7;
          i4 = i4 + 8 | 0;
          if (i4 >>> 0 < i8 >>> 0) {
           i2 = 0;
           i6 = i3;
          } else {
           i2 = 0;
           break;
          }
         }
        }
        i14 = HEAP32[i18 + 20 >> 2] | 0;
        i8 = HEAP32[279860 + (i8 << 2) >> 2] & i7;
        i12 = HEAPU8[i14 + (i8 << 3) + 1 >> 0] | 0;
        i8 = HEAP32[i14 + (i8 << 3) + 4 >> 2] | 0;
        if (i8 >>> 0 < 16) {
         HEAP32[i18 + 8 >> 2] = i15 + 1;
         i6 = HEAP32[i18 + 12 >> 2] | 0;
         HEAP32[i6 + (i15 << 2) >> 2] = i8;
         i8 = i6;
         i6 = HEAP32[i18 + 8 >> 2] | 0;
         i7 = i7 >>> i12;
         i4 = i4 - i12 | 0;
        } else {
         i14 = (i8 | 0) == 18 ? 7 : i8 + -14 | 0;
         i13 = (i8 | 0) == 18 ? 11 : 3;
         if (i4 >>> 0 < (i14 + i12 | 0) >>> 0) while (1) {
          if (!i5) {
           i5 = i7;
           i17 = 123;
           break L37;
          }
          i5 = i5 + -1 | 0;
          i6 = i3 + 1 | 0;
          i7 = (HEAPU8[i3 >> 0] | 0) << i4 | i7;
          i4 = i4 + 8 | 0;
          if (i4 >>> 0 < (i14 + i12 | 0) >>> 0) {
           i2 = 0;
           i3 = i6;
          } else {
           i2 = 0;
           i3 = i6;
           break;
          }
         }
         i11 = i7 >>> i12;
         i10 = HEAP32[279860 + (i14 << 2) >> 2] & i11;
         i4 = i4 - i12 - i14 | 0;
         if ((i10 + i13 + i15 | 0) >>> 0 > ((i9 & 31) + 258 + (i9 >>> 5 & 31) | 0) >>> 0) {
          i2 = i11 >>> i14;
          i17 = 126;
          break L37;
         }
         if ((i15 | 0) == 0 & (i8 | 0) == 16) {
          i2 = i11 >>> i14;
          i17 = 126;
          break L37;
         }
         if ((i8 | 0) == 16) {
          i9 = HEAP32[i18 + 12 >> 2] | 0;
          i8 = i9;
          i9 = HEAP32[i9 + (i15 + -1 << 2) >> 2] | 0;
         } else {
          i8 = HEAP32[i18 + 12 >> 2] | 0;
          i9 = 0;
         }
         i6 = i15;
         i7 = i10 + i13 | 0;
         while (1) {
          HEAP32[i8 + (i6 << 2) >> 2] = i9;
          i7 = i7 + -1 | 0;
          if (!i7) break; else i6 = i6 + 1 | 0;
         }
         i6 = i13 + i15 + i10 | 0;
         HEAP32[i18 + 8 >> 2] = i6;
         i7 = i11 >>> i14;
        }
        i9 = HEAP32[i18 + 4 >> 2] | 0;
        if (i6 >>> 0 < ((i9 & 31) + 258 + (i9 >>> 5 & 31) | 0) >>> 0) i15 = i6; else {
         i12 = i8;
         break;
        }
       }
      } else i12 = HEAP32[i18 + 12 >> 2] | 0;
      HEAP32[i18 + 20 >> 2] = 0;
      HEAP32[i28 + 12 >> 2] = 9;
      HEAP32[i28 + 8 >> 2] = 6;
      i8 = i9 & 31;
      i6 = HEAP32[i18 + 36 >> 2] | 0;
      HEAP32[i28 + 16 >> 2] = 0;
      i10 = FUNCTION_TABLE_iiii[HEAP32[i27 + 44 >> 2] & 127](HEAP32[i27 + 52 >> 2] | 0, 288, 4) | 0;
      if (!i10) {
       i17 = 135;
       break;
      }
      L140 : do switch (_huft_build(i12, i8 + 257 | 0, 257, 279928, 280052, i28 + 4 | 0, i28 + 12 | 0, i6, i28 + 16 | 0, i10) | 0) {
      case 0:
       {
        i11 = HEAP32[i28 + 12 >> 2] | 0;
        if (!i11) i17 = 139; else {
         switch (_huft_build(i12 + (i8 + 257 << 2) | 0, (i9 >>> 5 & 31) + 1 | 0, 0, 280176, 280296, i28, i28 + 8 | 0, i6, i28 + 16 | 0, i10) | 0) {
         case 0:
          {
           i9 = HEAP32[i28 + 8 >> 2] | 0;
           if ((i8 | 0) != 0 & (i9 | 0) == 0) i17 = 145; else {
            FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, i10);
            i10 = i9;
            break L140;
           }
           break;
          }
         case -3:
          {
           HEAP32[i27 + 36 >> 2] = 326377;
           i6 = -3;
           break;
          }
         case -5:
          {
           HEAP32[i27 + 36 >> 2] = 326406;
           i6 = -3;
           break;
          }
         case -4:
          {
           i6 = -4;
           break;
          }
         default:
          i17 = 145;
         }
         if ((i17 | 0) == 145) {
          HEAP32[i27 + 36 >> 2] = 326431;
          i6 = -3;
         }
         FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, i10);
         i17 = 148;
        }
        break;
       }
      case -3:
       {
        HEAP32[i27 + 36 >> 2] = 326311;
        i6 = -3;
        i17 = 140;
        break;
       }
      case -4:
       {
        i6 = -4;
        i17 = 140;
        break;
       }
      default:
       i17 = 139;
      } while (0);
      if ((i17 | 0) == 139) {
       HEAP32[i27 + 36 >> 2] = 326346;
       i6 = -3;
       i17 = 140;
      }
      if ((i17 | 0) == 140) {
       FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, i10);
       i17 = 148;
      }
      if ((i17 | 0) == 148) {
       switch (i6 | 0) {
       case -3:
        {
         i17 = 150;
         break L37;
        }
       case 0:
        break;
       default:
        {
         i9 = -4;
         i17 = 151;
         break L37;
        }
       }
       i11 = HEAP32[i28 + 12 >> 2] | 0;
       i10 = HEAP32[i28 + 8 >> 2] | 0;
      }
      i6 = HEAP32[i28 + 4 >> 2] | 0;
      i8 = HEAP32[i28 >> 2] | 0;
      i9 = FUNCTION_TABLE_iiii[HEAP32[i27 + 44 >> 2] & 127](HEAP32[i27 + 52 >> 2] | 0, 1, 28) | 0;
      if (!i9) {
       i2 = i7;
       i17 = 154;
       break;
      }
      HEAP32[i9 >> 2] = 0;
      HEAP8[i9 + 16 >> 0] = i11;
      HEAP8[i9 + 17 >> 0] = i10;
      HEAP32[i9 + 20 >> 2] = i6;
      HEAP32[i9 + 24 >> 2] = i8;
      HEAP32[i18 + 4 >> 2] = i9;
      FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, HEAP32[i18 + 12 >> 2] | 0);
      HEAP32[i18 >> 2] = 6;
     }
     HEAP32[i18 + 32 >> 2] = i7;
     HEAP32[i18 + 28 >> 2] = i4;
     HEAP32[i27 + 16 >> 2] = i5;
     HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
     HEAP32[i27 + 12 >> 2] = i3;
     HEAP32[i18 + 52 >> 2] = i1;
     i13 = HEAP32[i18 + 4 >> 2] | 0;
     i6 = HEAP32[i18 + 48 >> 2] | 0;
     if (i1 >>> 0 < i6 >>> 0) i9 = i6 + ~i1 | 0; else i9 = (HEAP32[i16 >> 2] | 0) - i1 | 0;
     i6 = HEAP32[i13 >> 2] | 0;
     i12 = i9;
     L166 : while (1) {
      switch (i6 | 0) {
      case 7:
       {
        i9 = i4;
        i17 = 229;
        break L166;
       }
      case 8:
       {
        i17 = 232;
        break L166;
       }
      case 9:
       {
        i17 = 233;
        break L166;
       }
      case 0:
       {
        i6 = HEAPU8[i13 + 16 >> 0] | 0;
        HEAP32[i13 + 12 >> 2] = i6;
        HEAP32[i13 + 8 >> 2] = HEAP32[i13 + 20 >> 2];
        HEAP32[i13 >> 2] = 1;
        i17 = 164;
        break;
       }
      case 1:
       {
        i6 = HEAP32[i13 + 12 >> 2] | 0;
        i17 = 164;
        break;
       }
      case 2:
       {
        i6 = HEAP32[i13 + 8 >> 2] | 0;
        if (i4 >>> 0 < i6 >>> 0) while (1) {
         if (!i5) {
          i5 = i7;
          i17 = 180;
          break L166;
         }
         i5 = i5 + -1 | 0;
         i9 = i3 + 1 | 0;
         i7 = (HEAPU8[i3 >> 0] | 0) << i4 | i7;
         i4 = i4 + 8 | 0;
         if (i4 >>> 0 < i6 >>> 0) {
          i2 = 0;
          i3 = i9;
         } else {
          i2 = 0;
          i3 = i9;
          break;
         }
        }
        HEAP32[i13 + 4 >> 2] = (HEAP32[i13 + 4 >> 2] | 0) + (HEAP32[279860 + (i6 << 2) >> 2] & i7);
        i10 = HEAPU8[i13 + 17 >> 0] | 0;
        HEAP32[i13 + 12 >> 2] = i10;
        HEAP32[i13 + 8 >> 2] = HEAP32[i13 + 24 >> 2];
        HEAP32[i13 >> 2] = 3;
        i7 = i7 >>> i6;
        i4 = i4 - i6 | 0;
        i17 = 182;
        break;
       }
      case 3:
       {
        i10 = HEAP32[i13 + 12 >> 2] | 0;
        i17 = 182;
        break;
       }
      case 4:
       {
        i6 = HEAP32[i13 + 8 >> 2] | 0;
        if (i4 >>> 0 < i6 >>> 0) {
         i9 = i3;
         while (1) {
          if (!i5) {
           i5 = i7;
           i3 = i9;
           i17 = 194;
           break L166;
          }
          i5 = i5 + -1 | 0;
          i3 = i9 + 1 | 0;
          i7 = (HEAPU8[i9 >> 0] | 0) << i4 | i7;
          i4 = i4 + 8 | 0;
          if (i4 >>> 0 < i6 >>> 0) {
           i2 = 0;
           i9 = i3;
          } else {
           i2 = 0;
           break;
          }
         }
        }
        i9 = (HEAP32[i13 + 12 >> 2] | 0) + (HEAP32[279860 + (i6 << 2) >> 2] & i7) | 0;
        HEAP32[i13 + 12 >> 2] = i9;
        HEAP32[i13 >> 2] = 5;
        i7 = i7 >>> i6;
        i4 = i4 - i6 | 0;
        i17 = 196;
        break;
       }
      case 5:
       {
        i9 = HEAP32[i13 + 12 >> 2] | 0;
        i17 = 196;
        break;
       }
      case 6:
       {
        do if (!i12) {
         if ((i1 | 0) == (HEAP32[i16 >> 2] | 0) ? (i24 = HEAP32[i18 + 48 >> 2] | 0, i25 = HEAP32[i18 + 40 >> 2] | 0, (i24 | 0) != (i25 | 0)) : 0) {
          i1 = i25 >>> 0 < i24 >>> 0 ? i24 + -1 | 0 : i1;
          if ((i1 | 0) == (i25 | 0)) i1 = i25; else {
           i9 = i1 - i25 | 0;
           i1 = i25;
           break;
          }
         }
         HEAP32[i18 + 52 >> 2] = i1;
         i9 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
         i1 = HEAP32[i18 + 52 >> 2] | 0;
         i6 = HEAP32[i18 + 48 >> 2] | 0;
         if (i1 >>> 0 < i6 >>> 0) {
          i2 = i6 + ~i1 | 0;
          i8 = HEAP32[i16 >> 2] | 0;
         } else {
          i8 = HEAP32[i16 >> 2] | 0;
          i2 = i8 - i1 | 0;
         }
         if ((i1 | 0) == (i8 | 0) ? (i26 = HEAP32[i18 + 40 >> 2] | 0, (i6 | 0) != (i26 | 0)) : 0) {
          i2 = (i26 >>> 0 < i6 >>> 0 ? i6 + -1 | 0 : i1) - i26 | 0;
          i1 = i26;
         }
         if (!i2) {
          i17 = 227;
          break L166;
         } else i9 = i2;
        } else i9 = i12; while (0);
        HEAP8[i1 >> 0] = HEAP32[i13 + 8 >> 2];
        HEAP32[i13 >> 2] = 0;
        i2 = 0;
        i6 = 0;
        i12 = i9 + -1 | 0;
        i1 = i1 + 1 | 0;
        continue L166;
       }
      default:
       {
        i17 = 234;
        break L166;
       }
      }
      if ((i17 | 0) == 164) {
       if (i4 >>> 0 < i6 >>> 0) {
        i9 = i3;
        while (1) {
         if (!i5) {
          i5 = i7;
          i3 = i9;
          i17 = 167;
          break L166;
         }
         i5 = i5 + -1 | 0;
         i3 = i9 + 1 | 0;
         i7 = (HEAPU8[i9 >> 0] | 0) << i4 | i7;
         i4 = i4 + 8 | 0;
         if (i4 >>> 0 < i6 >>> 0) {
          i2 = 0;
          i9 = i3;
         } else {
          i2 = 0;
          break;
         }
        }
       }
       i8 = HEAP32[i13 + 8 >> 2] | 0;
       i6 = HEAP32[279860 + (i6 << 2) >> 2] & i7;
       i9 = HEAPU8[i8 + (i6 << 3) + 1 >> 0] | 0;
       i7 = i7 >>> i9;
       i4 = i4 - i9 | 0;
       i9 = HEAP8[i8 + (i6 << 3) >> 0] | 0;
       if (!(i9 << 24 >> 24)) {
        HEAP32[i13 + 8 >> 2] = HEAP32[i8 + (i6 << 3) + 4 >> 2];
        HEAP32[i13 >> 2] = 6;
        i15 = i1;
        i17 = i12;
        i6 = 6;
        i1 = i15;
        i12 = i17;
        continue;
       }
       if (i9 & 16) {
        HEAP32[i13 + 8 >> 2] = i9 & 15;
        HEAP32[i13 + 4 >> 2] = HEAP32[i8 + (i6 << 3) + 4 >> 2];
        HEAP32[i13 >> 2] = 2;
        i15 = i1;
        i17 = i12;
        i6 = 2;
        i1 = i15;
        i12 = i17;
        continue;
       }
       if (!(i9 & 64)) {
        HEAP32[i13 + 12 >> 2] = i9 & 255;
        HEAP32[i13 + 8 >> 2] = i8 + ((HEAP32[i8 + (i6 << 3) + 4 >> 2] | 0) + i6 << 3);
        i15 = i1;
        i17 = i12;
        i6 = 1;
        i1 = i15;
        i12 = i17;
        continue;
       }
       if (!(i9 & 32)) {
        i17 = 176;
        break;
       }
       HEAP32[i13 >> 2] = 7;
       i15 = i1;
       i17 = i12;
       i6 = 7;
       i1 = i15;
       i12 = i17;
       continue;
      } else if ((i17 | 0) == 182) {
       if (i4 >>> 0 < i10 >>> 0) while (1) {
        if (!i5) {
         i5 = i7;
         i17 = 185;
         break L166;
        }
        i5 = i5 + -1 | 0;
        i9 = i3 + 1 | 0;
        i7 = (HEAPU8[i3 >> 0] | 0) << i4 | i7;
        i4 = i4 + 8 | 0;
        if (i4 >>> 0 < i10 >>> 0) {
         i2 = 0;
         i3 = i9;
        } else {
         i2 = 0;
         i3 = i9;
         break;
        }
       }
       i8 = HEAP32[i13 + 8 >> 2] | 0;
       i6 = HEAP32[279860 + (i10 << 2) >> 2] & i7;
       i9 = HEAPU8[i8 + (i6 << 3) + 1 >> 0] | 0;
       i7 = i7 >>> i9;
       i4 = i4 - i9 | 0;
       i9 = HEAPU8[i8 + (i6 << 3) >> 0] | 0;
       if (i9 & 16) {
        HEAP32[i13 + 8 >> 2] = i9 & 15;
        HEAP32[i13 + 12 >> 2] = HEAP32[i8 + (i6 << 3) + 4 >> 2];
        HEAP32[i13 >> 2] = 4;
        i15 = i1;
        i17 = i12;
        i6 = 4;
        i1 = i15;
        i12 = i17;
        continue;
       }
       if (i9 & 64) {
        i17 = 190;
        break;
       }
       HEAP32[i13 + 12 >> 2] = i9;
       HEAP32[i13 + 8 >> 2] = i8 + ((HEAP32[i8 + (i6 << 3) + 4 >> 2] | 0) + i6 << 3);
       i15 = i1;
       i17 = i12;
       i6 = 3;
       i1 = i15;
       i12 = i17;
       continue;
      } else if ((i17 | 0) == 196) {
       i6 = i1 + (0 - i9) | 0;
       i9 = HEAP32[i18 + 40 >> 2] | 0;
       if (i6 >>> 0 < i9 >>> 0) {
        i8 = (HEAP32[i16 >> 2] | 0) - i9 | 0;
        do i6 = i6 + i8 | 0; while (i6 >>> 0 < i9 >>> 0);
       }
       if (!(HEAP32[i13 + 4 >> 2] | 0)) i9 = i12; else {
        i11 = i6;
        i9 = i12;
        while (1) {
         do if (!i9) {
          if ((i1 | 0) == (HEAP32[i16 >> 2] | 0) ? (i22 = HEAP32[i18 + 48 >> 2] | 0, i23 = HEAP32[i18 + 40 >> 2] | 0, (i22 | 0) != (i23 | 0)) : 0) {
           i1 = i23 >>> 0 < i22 >>> 0 ? i22 + -1 | 0 : i1;
           if ((i1 | 0) == (i23 | 0)) i1 = i23; else {
            i9 = i1 - i23 | 0;
            i2 = i23;
            break;
           }
          }
          HEAP32[i18 + 52 >> 2] = i1;
          i10 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
          i1 = HEAP32[i18 + 52 >> 2] | 0;
          i6 = HEAP32[i18 + 48 >> 2] | 0;
          if (i1 >>> 0 < i6 >>> 0) {
           i2 = i6 + ~i1 | 0;
           i9 = HEAP32[i16 >> 2] | 0;
          } else {
           i9 = HEAP32[i16 >> 2] | 0;
           i2 = i9 - i1 | 0;
          }
          do if ((i1 | 0) == (i9 | 0)) {
           i8 = HEAP32[i18 + 40 >> 2] | 0;
           if ((i6 | 0) == (i8 | 0)) {
            i9 = i2;
            break;
           }
           i9 = (i8 >>> 0 < i6 >>> 0 ? i6 + -1 | 0 : i1) - i8 | 0;
           i1 = i8;
          } else i9 = i2; while (0);
          if (!i9) {
           i17 = 211;
           break L166;
          } else i2 = i1;
         } else i2 = i1; while (0);
         i6 = i11 + 1 | 0;
         i1 = i2 + 1 | 0;
         HEAP8[i2 >> 0] = HEAP8[i11 >> 0] | 0;
         i9 = i9 + -1 | 0;
         if ((i6 | 0) == (HEAP32[i16 >> 2] | 0)) i6 = HEAP32[i18 + 40 >> 2] | 0;
         i17 = (HEAP32[i13 + 4 >> 2] | 0) + -1 | 0;
         HEAP32[i13 + 4 >> 2] = i17;
         if (!i17) {
          i2 = 0;
          break;
         } else {
          i2 = 0;
          i11 = i6;
         }
        }
       }
       HEAP32[i13 >> 2] = 0;
       i6 = 0;
       i12 = i9;
       continue;
      }
     }
     switch (i17 | 0) {
     case 167:
      {
       i17 = 0;
       HEAP32[i18 + 32 >> 2] = i5;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = 0;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
       break;
      }
     case 176:
      {
       i17 = 0;
       HEAP32[i13 >> 2] = 9;
       HEAP32[i27 + 36 >> 2] = 326464;
       HEAP32[i18 + 32 >> 2] = i7;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = i5;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, -3) | 0;
       break;
      }
     case 180:
      {
       i17 = 0;
       HEAP32[i18 + 32 >> 2] = i5;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = 0;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
       break;
      }
     case 185:
      {
       i17 = 0;
       HEAP32[i18 + 32 >> 2] = i5;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = 0;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
       break;
      }
     case 190:
      {
       i17 = 0;
       HEAP32[i13 >> 2] = 9;
       HEAP32[i27 + 36 >> 2] = 326492;
       HEAP32[i18 + 32 >> 2] = i7;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = i5;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, -3) | 0;
       break;
      }
     case 194:
      {
       i17 = 0;
       HEAP32[i18 + 32 >> 2] = i5;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = 0;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
       break;
      }
     case 211:
      {
       i17 = 0;
       HEAP32[i18 + 32 >> 2] = i7;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = i5;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, i10) | 0;
       break;
      }
     case 227:
      {
       i17 = 0;
       HEAP32[i18 + 32 >> 2] = i7;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = i5;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, i9) | 0;
       break;
      }
     case 229:
      {
       i17 = 0;
       i4 = i9 >>> 0 > 7 ? i9 + -8 | 0 : i9;
       i3 = i9 >>> 0 > 7 ? i3 + -1 | 0 : i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i2 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
       i1 = HEAP32[i18 + 52 >> 2] | 0;
       if ((HEAP32[i18 + 48 >> 2] | 0) == (i1 | 0)) {
        HEAP32[i13 >> 2] = 8;
        i5 = i5 + (i9 >>> 0 > 7 & 1) | 0;
        i17 = 232;
        break;
       } else {
        HEAP32[i18 + 32 >> 2] = i7;
        HEAP32[i18 + 28 >> 2] = i4;
        HEAP32[i27 + 16 >> 2] = i5 + (i9 >>> 0 > 7 & 1);
        HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
        HEAP32[i27 + 12 >> 2] = i3;
        HEAP32[i18 + 52 >> 2] = i1;
        i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
        break;
       }
      }
     case 233:
      {
       i17 = 0;
       HEAP32[i18 + 32 >> 2] = i7;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = i5;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, -3) | 0;
       break;
      }
     case 234:
      {
       i17 = 0;
       HEAP32[i18 + 32 >> 2] = i7;
       HEAP32[i18 + 28 >> 2] = i4;
       HEAP32[i27 + 16 >> 2] = i5;
       HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
       HEAP32[i27 + 12 >> 2] = i3;
       HEAP32[i18 + 52 >> 2] = i1;
       i1 = _inflate_flush(i18, i27 + 12 | 0, -2) | 0;
       break;
      }
     }
     if ((i17 | 0) == 232) {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i7;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, 1) | 0;
     }
     if ((i1 | 0) != 1) {
      i17 = 236;
      break;
     }
     FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, HEAP32[i18 + 4 >> 2] | 0);
     i3 = HEAP32[i27 + 12 >> 2] | 0;
     i5 = HEAP32[i27 + 16 >> 2] | 0;
     i7 = HEAP32[i18 + 32 >> 2] | 0;
     i4 = HEAP32[i18 + 28 >> 2] | 0;
     i1 = HEAP32[i18 + 52 >> 2] | 0;
     i2 = HEAP32[i18 + 48 >> 2] | 0;
     if (i1 >>> 0 < i2 >>> 0) i6 = i2 + ~i1 | 0; else i6 = (HEAP32[i16 >> 2] | 0) - i1 | 0;
     if (HEAP32[i18 + 24 >> 2] | 0) {
      i17 = 242;
      break;
     }
     HEAP32[i18 >> 2] = 0;
     i2 = 0;
    }
    switch (i17 | 0) {
    case 52:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i5;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = 0;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
      break;
     }
    case 57:
     {
      i17 = 0;
      HEAP32[i18 + 4 >> 2] = 0;
      HEAP32[i18 + 32 >> 2] = i2;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -4) | 0;
      break;
     }
    case 59:
     {
      i17 = 0;
      HEAP32[i18 >> 2] = 9;
      HEAP32[i27 + 36 >> 2] = 326125;
      HEAP32[i18 + 32 >> 2] = i2 >>> 3;
      HEAP32[i18 + 28 >> 2] = i4 + -3;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -3) | 0;
      break;
     }
    case 62:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i5;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = 0;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
      break;
     }
    case 64:
     {
      i17 = 0;
      HEAP32[i18 >> 2] = 9;
      HEAP32[i27 + 36 >> 2] = 326144;
      HEAP32[i18 + 32 >> 2] = i2;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -3) | 0;
      break;
     }
    case 69:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i5;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = 0;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
      break;
     }
    case 81:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i7;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i9) | 0;
      break;
     }
    case 86:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i6;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = 0;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
      break;
     }
    case 89:
     {
      i17 = 0;
      HEAP32[i18 >> 2] = 9;
      HEAP32[i27 + 36 >> 2] = 326173;
      HEAP32[i18 + 32 >> 2] = i6;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -3) | 0;
      break;
     }
    case 91:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i6;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -4) | 0;
      break;
     }
    case 99:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i5;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = 0;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
      break;
     }
    case 103:
     {
      i6 = -4;
      i17 = 110;
      break;
     }
    case 106:
     {
      i2 = 326249;
      i17 = 107;
      break;
     }
    case 117:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i5;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = 0;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
      break;
     }
    case 123:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i5;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = 0;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
      break;
     }
    case 126:
     {
      i17 = 0;
      FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, HEAP32[i18 + 12 >> 2] | 0);
      HEAP32[i18 >> 2] = 9;
      HEAP32[i27 + 36 >> 2] = 326285;
      HEAP32[i18 + 32 >> 2] = i2;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -3) | 0;
      break;
     }
    case 135:
     {
      i9 = -4;
      i17 = 151;
      break;
     }
    case 150:
     {
      FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, HEAP32[i18 + 12 >> 2] | 0);
      HEAP32[i18 >> 2] = 9;
      i9 = -3;
      i17 = 151;
      break;
     }
    case 154:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i2;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -4) | 0;
      break;
     }
    case 236:
     {
      i17 = 0;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i1) | 0;
      break;
     }
    case 242:
     {
      HEAP32[i18 >> 2] = 7;
      i2 = 0;
      i17 = 243;
      break;
     }
    case 247:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i6;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i2 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i2;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -3) | 0;
      break;
     }
    case 248:
     {
      i17 = 0;
      HEAP32[i18 + 32 >> 2] = i6;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i2 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i2;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, -2) | 0;
      break;
     }
    }
    do if ((i17 | 0) == 107) {
     HEAP32[i27 + 36 >> 2] = i2;
     FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, i8);
     i17 = 109;
    } else if ((i17 | 0) == 151) {
     i17 = 0;
     HEAP32[i18 + 32 >> 2] = i7;
     HEAP32[i18 + 28 >> 2] = i4;
     HEAP32[i27 + 16 >> 2] = i5;
     HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
     HEAP32[i27 + 12 >> 2] = i3;
     HEAP32[i18 + 52 >> 2] = i1;
     i1 = _inflate_flush(i18, i27 + 12 | 0, i9) | 0;
    } else if ((i17 | 0) == 243) {
     i17 = 0;
     HEAP32[i18 + 52 >> 2] = i1;
     i2 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
     i1 = HEAP32[i18 + 52 >> 2] | 0;
     if ((HEAP32[i18 + 48 >> 2] | 0) == (i1 | 0)) {
      HEAP32[i18 >> 2] = 8;
      i17 = 246;
      break;
     } else {
      HEAP32[i18 + 32 >> 2] = i7;
      HEAP32[i18 + 28 >> 2] = i4;
      HEAP32[i27 + 16 >> 2] = i5;
      HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
      HEAP32[i27 + 12 >> 2] = i3;
      HEAP32[i18 + 52 >> 2] = i1;
      i1 = _inflate_flush(i18, i27 + 12 | 0, i2) | 0;
      break;
     }
    } while (0);
    if ((i17 | 0) == 109) {
     FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, HEAP32[i18 + 12 >> 2] | 0);
     HEAP32[i18 >> 2] = 9;
     i6 = -3;
     i17 = 110;
    } else if ((i17 | 0) == 246) {
     i17 = 0;
     HEAP32[i18 + 32 >> 2] = i7;
     HEAP32[i18 + 28 >> 2] = i4;
     HEAP32[i27 + 16 >> 2] = i5;
     HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
     HEAP32[i27 + 12 >> 2] = i3;
     HEAP32[i18 + 52 >> 2] = i1;
     i1 = _inflate_flush(i18, i27 + 12 | 0, 1) | 0;
    }
    if ((i17 | 0) == 110) {
     i17 = 0;
     HEAP32[i18 + 32 >> 2] = i7;
     HEAP32[i18 + 28 >> 2] = i4;
     HEAP32[i27 + 16 >> 2] = i5;
     HEAP32[i27 + 20 >> 2] = i3 - (HEAP32[i27 + 12 >> 2] | 0) + (HEAP32[i27 + 20 >> 2] | 0);
     HEAP32[i27 + 12 >> 2] = i3;
     HEAP32[i18 + 52 >> 2] = i1;
     i1 = _inflate_flush(i18, i27 + 12 | 0, i6) | 0;
    }
    switch (i1 | 0) {
    case 0:
     break L12;
    case -3:
     {
      i1 = HEAP32[i27 + 40 >> 2] | 0;
      HEAP32[i1 >> 2] = 13;
      HEAP32[i1 + 4 >> 2] = 0;
      i2 = -3;
      continue L12;
     }
    case 1:
     break;
    default:
     {
      i17 = 270;
      break L12;
     }
    }
    i1 = HEAP32[i27 + 40 >> 2] | 0;
    i2 = HEAP32[i1 + 20 >> 2] | 0;
    HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 60 >> 2];
    i1 = HEAP32[i2 >> 2] | 0;
    if ((i1 & -2 | 0) == 4) {
     FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0);
     i1 = HEAP32[i2 >> 2] | 0;
    }
    if ((i1 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i27 + 48 >> 2] & 31](HEAP32[i27 + 52 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0);
    HEAP32[i2 >> 2] = 0;
    HEAP32[i2 + 28 >> 2] = 0;
    HEAP32[i2 + 32 >> 2] = 0;
    i1 = HEAP32[i2 + 40 >> 2] | 0;
    HEAP32[i2 + 52 >> 2] = i1;
    HEAP32[i2 + 48 >> 2] = i1;
    i1 = HEAP32[i2 + 56 >> 2] | 0;
    if (i1) {
     i18 = FUNCTION_TABLE_iiii[i1 & 127](0, 0, 0) | 0;
     HEAP32[i2 + 60 >> 2] = i18;
     HEAP32[i27 + 60 >> 2] = i18;
    }
    i1 = HEAP32[i27 + 40 >> 2] | 0;
    if (!(HEAP32[i1 + 12 >> 2] | 0)) {
     HEAP32[i1 >> 2] = 8;
     i3 = 0;
     i17 = 260;
     break;
    } else {
     HEAP32[i1 >> 2] = 12;
     i2 = 0;
     continue L12;
    }
   } while (0);
   if ((i17 | 0) == 260) {
    i2 = HEAP32[i27 + 16 >> 2] | 0;
    if (!i2) {
     i1 = i3;
     i17 = 270;
     break;
    }
    HEAP32[i27 + 16 >> 2] = i2 + -1;
    HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
    i3 = HEAP32[i27 + 12 >> 2] | 0;
    HEAP32[i27 + 12 >> 2] = i3 + 1;
    HEAP32[i1 + 8 >> 2] = (HEAPU8[i3 >> 0] | 0) << 24;
    HEAP32[i1 >> 2] = 9;
    i3 = i2 + -1 | 0;
    i2 = 0;
    i17 = 262;
   }
   if ((i17 | 0) == 262) {
    if (!i3) {
     i1 = i2;
     i17 = 270;
     break;
    }
    i3 = i3 + -1 | 0;
    HEAP32[i27 + 16 >> 2] = i3;
    HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
    i17 = HEAP32[i27 + 12 >> 2] | 0;
    HEAP32[i27 + 12 >> 2] = i17 + 1;
    i2 = i1 + 8 | 0;
    HEAP32[i2 >> 2] = ((HEAPU8[i17 >> 0] | 0) << 16) + (HEAP32[i2 >> 2] | 0);
    HEAP32[i1 >> 2] = 10;
    i2 = 0;
    i17 = 264;
   }
   if ((i17 | 0) == 264) {
    if (!i3) {
     i1 = i2;
     i17 = 270;
     break;
    }
    i3 = i3 + -1 | 0;
    HEAP32[i27 + 16 >> 2] = i3;
    HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
    i18 = HEAP32[i27 + 12 >> 2] | 0;
    HEAP32[i27 + 12 >> 2] = i18 + 1;
    i2 = i1 + 8 | 0;
    HEAP32[i2 >> 2] = ((HEAPU8[i18 >> 0] | 0) << 8) + (HEAP32[i2 >> 2] | 0);
    HEAP32[i1 >> 2] = 11;
    i2 = 0;
   }
   if (!i3) {
    i1 = i2;
    i17 = 270;
    break;
   }
   HEAP32[i27 + 16 >> 2] = i3 + -1;
   HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
   i18 = HEAP32[i27 + 12 >> 2] | 0;
   HEAP32[i27 + 12 >> 2] = i18 + 1;
   i2 = i1 + 8 | 0;
   i18 = (HEAP32[i2 >> 2] | 0) + (HEAPU8[i18 >> 0] | 0) | 0;
   HEAP32[i2 >> 2] = i18;
   i2 = i1 + 4 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i18 | 0)) {
    i17 = 269;
    break L1;
   }
   HEAP32[i1 >> 2] = 13;
   HEAP32[i27 + 36 >> 2] = 326514;
   HEAP32[i2 >> 2] = 5;
   i2 = 0;
  }
  if ((i17 | 0) == 27) {
   HEAP32[i3 >> 2] = 2;
   i4 = i4 + -1 | 0;
   i2 = 0;
   i17 = 29;
  } else if ((i17 | 0) == 28) {
   i4 = HEAP32[i27 + 16 >> 2] | 0;
   i17 = 29;
  } else if ((i17 | 0) == 31) {
   i4 = HEAP32[i27 + 16 >> 2] | 0;
   i17 = 32;
  } else if ((i17 | 0) == 34) {
   i4 = HEAP32[i27 + 16 >> 2] | 0;
   i17 = 35;
  } else if ((i17 | 0) == 37) {
   i2 = HEAP32[i27 + 16 >> 2] | 0;
   i17 = 38;
  }
  if ((i17 | 0) == 29) if (!i4) {
   i1 = i2;
   i17 = 270;
  } else {
   i4 = i4 + -1 | 0;
   HEAP32[i27 + 16 >> 2] = i4;
   HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
   i2 = HEAP32[i27 + 12 >> 2] | 0;
   HEAP32[i27 + 12 >> 2] = i2 + 1;
   HEAP32[i1 + 8 >> 2] = (HEAPU8[i2 >> 0] | 0) << 24;
   HEAP32[i3 >> 2] = 3;
   i2 = 0;
   i17 = 32;
  }
  if ((i17 | 0) == 32) if (!i4) {
   i1 = i2;
   i17 = 270;
  } else {
   i4 = i4 + -1 | 0;
   HEAP32[i27 + 16 >> 2] = i4;
   HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
   i17 = HEAP32[i27 + 12 >> 2] | 0;
   HEAP32[i27 + 12 >> 2] = i17 + 1;
   i2 = i1 + 8 | 0;
   HEAP32[i2 >> 2] = ((HEAPU8[i17 >> 0] | 0) << 16) + (HEAP32[i2 >> 2] | 0);
   HEAP32[i3 >> 2] = 4;
   i2 = 0;
   i17 = 35;
  }
  if ((i17 | 0) == 35) if (!i4) {
   i1 = i2;
   i17 = 270;
  } else {
   i2 = i4 + -1 | 0;
   HEAP32[i27 + 16 >> 2] = i2;
   HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
   i17 = HEAP32[i27 + 12 >> 2] | 0;
   HEAP32[i27 + 12 >> 2] = i17 + 1;
   i4 = i1 + 8 | 0;
   HEAP32[i4 >> 2] = ((HEAPU8[i17 >> 0] | 0) << 8) + (HEAP32[i4 >> 2] | 0);
   HEAP32[i3 >> 2] = 5;
   i4 = 0;
   i17 = 38;
  }
  if ((i17 | 0) == 38) if (!i2) {
   i1 = i4;
   i17 = 270;
  } else {
   i17 = 39;
   break;
  }
  if ((i17 | 0) == 270) switch (i1 | 0) {
  case 1:
   {
    i17 = 271;
    break L1;
   }
  case 0:
   break;
  default:
   {
    i1 = 85;
    i17 = 272;
    break L1;
   }
  }
  if (!(HEAP32[i27 + 28 >> 2] | 0)) {
   i1 = 0;
   i17 = 272;
   break;
  }
 }
 if ((i17 | 0) == 39) {
  HEAP32[i27 + 16 >> 2] = i2 + -1;
  HEAP32[i27 + 20 >> 2] = (HEAP32[i27 + 20 >> 2] | 0) + 1;
  i26 = HEAP32[i27 + 12 >> 2] | 0;
  HEAP32[i27 + 12 >> 2] = i26 + 1;
  i26 = (HEAP32[i1 + 8 >> 2] | 0) + (HEAPU8[i26 >> 0] | 0) | 0;
  HEAP32[i1 + 8 >> 2] = i26;
  HEAP32[i27 + 60 >> 2] = i26;
  HEAP32[i3 >> 2] = 6;
  i27 = 85;
  STACKTOP = i28;
  return i27 | 0;
 } else if ((i17 | 0) == 40) {
  HEAP32[i1 >> 2] = 13;
  HEAP32[i27 + 36 >> 2] = 326109;
  HEAP32[i6 >> 2] = 0;
  i27 = 85;
  STACKTOP = i28;
  return i27 | 0;
 } else if ((i17 | 0) == 269) {
  HEAP32[i1 >> 2] = 12;
  i26 = HEAP32[i27 + 24 >> 2] | 0;
  i25 = i27 + 8272 | 0;
  HEAP32[i25 >> 2] = i26;
  i27 = HEAP32[i27 + 8268 >> 2] | 0;
  i27 = (i26 | 0) == (i27 | 0);
  i27 = i27 ? 85 : 0;
  STACKTOP = i28;
  return i27 | 0;
 } else if ((i17 | 0) == 271) {
  i26 = HEAP32[i27 + 24 >> 2] | 0;
  i25 = i27 + 8272 | 0;
  HEAP32[i25 >> 2] = i26;
  i27 = HEAP32[i27 + 8268 >> 2] | 0;
  i27 = (i26 | 0) == (i27 | 0);
  i27 = i27 ? 85 : 0;
  STACKTOP = i28;
  return i27 | 0;
 } else if ((i17 | 0) == 272) {
  STACKTOP = i28;
  return i1 | 0;
 }
 return 0;
}

function _afm_parser_parse(i71) {
 i71 = i71 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i72 = 0, i73 = 0, i74 = 0;
 i74 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i50 = HEAP32[i71 >> 2] | 0;
 i51 = HEAP32[i71 + 8 >> 2] | 0;
 if (!i51) {
  i73 = 6;
  STACKTOP = i74;
  return i73 | 0;
 }
 i14 = HEAP32[i71 + 4 >> 2] | 0;
 i4 = HEAP32[i14 + 12 >> 2] | 0;
 L4 : do if ((i4 | 0) > 1) i9 = HEAP32[i14 + 8 >> 2] | 0; else {
  i1 = HEAP32[i14 >> 2] | 0;
  i5 = HEAP32[i14 + 8 >> 2] | 0;
  L7 : do if ((i4 | 0) <= 0) {
   L9 : do if (i1 >>> 0 < i5 >>> 0) {
    L10 : while (1) {
     i4 = i1;
     i1 = i1 + 1 | 0;
     HEAP32[i14 >> 2] = i1;
     switch (HEAPU8[i4 >> 0] | 0) {
     case 26:
      break L9;
     case 10:
     case 13:
      {
       i73 = 8;
       break L10;
      }
     case 59:
      {
       i9 = i1;
       i73 = 9;
       break L10;
      }
     case 9:
     case 32:
      break;
     default:
      break L7;
     }
     if (i1 >>> 0 >= i5 >>> 0) break L9;
    }
    if ((i73 | 0) == 8) {
     HEAP32[i14 + 12 >> 2] = 2;
     i9 = i5;
     break L4;
    } else if ((i73 | 0) == 9) {
     HEAP32[i14 + 12 >> 2] = 1;
     i1 = i9;
     break L7;
    }
   } while (0);
   HEAP32[i14 + 12 >> 2] = 3;
   i9 = i5;
   break L4;
  } while (0);
  L17 : while (1) {
   if (i1 >>> 0 >= i5 >>> 0) {
    i1 = 3;
    break;
   }
   i4 = i1;
   i1 = i1 + 1 | 0;
   HEAP32[i14 >> 2] = i1;
   i4 = HEAP8[i4 >> 0] | 0;
   switch (i4 & 255 | 0) {
   case 10:
   case 13:
    {
     i1 = 2;
     break L17;
    }
   default:
    {}
   }
   if (i4 << 24 >> 24 == 26) {
    i1 = 3;
    break;
   }
  }
  HEAP32[i14 + 12 >> 2] = i1;
  i9 = i5;
 } while (0);
 HEAP32[i14 + 12 >> 2] = 0;
 i1 = HEAP32[i14 >> 2] | 0;
 L23 : do if (i1 >>> 0 < i9 >>> 0) {
  L24 : while (1) {
   i4 = i1 + 1 | 0;
   HEAP32[i14 >> 2] = i4;
   switch (HEAPU8[i1 >> 0] | 0) {
   case 26:
    break L23;
   case 59:
    {
     i73 = 19;
     break L24;
    }
   case 9:
   case 32:
    if (i4 >>> 0 < i9 >>> 0) {
     i1 = i4;
     continue L24;
    } else break L23;
   case 10:
   case 13:
    {
     HEAP32[i14 + 12 >> 2] = 2;
     i1 = i4;
     break;
    }
   default:
    {
     L27 : while (1) {
      if (i4 >>> 0 >= i9 >>> 0) {
       i12 = i4;
       i73 = 25;
       break;
      }
      i11 = i4 + 1 | 0;
      HEAP32[i14 >> 2] = i11;
      switch (HEAPU8[i4 >> 0] | 0) {
      case 26:
       {
        i12 = i11;
        i73 = 25;
        break L27;
       }
      case 9:
      case 32:
       {
        i10 = 0;
        i13 = i11;
        break L27;
       }
      case 10:
      case 13:
       {
        i73 = 23;
        break L27;
       }
      case 59:
       {
        i73 = 24;
        break L27;
       }
      default:
       i4 = i11;
      }
     }
     if ((i73 | 0) == 23) {
      i73 = 0;
      HEAP32[i14 + 12 >> 2] = 2;
      i10 = 2;
      i13 = i11;
     } else if ((i73 | 0) == 24) {
      i73 = 0;
      HEAP32[i14 + 12 >> 2] = 1;
      i10 = 1;
      i13 = i11;
     } else if ((i73 | 0) == 25) {
      i73 = 0;
      HEAP32[i14 + 12 >> 2] = 3;
      i10 = 3;
      i13 = i12;
     }
     if (i1) {
      i7 = i1;
      i8 = i13;
      i3 = i10;
      i73 = 29;
      break L24;
     }
     if ((i10 | 0) == 2) i1 = i13; else {
      i43 = 2;
      i73 = 275;
      break L24;
     }
    }
   }
   HEAP32[i14 + 12 >> 2] = 0;
   if (i1 >>> 0 >= i9 >>> 0) break L23;
  }
  if ((i73 | 0) == 19) {
   HEAP32[i14 + 12 >> 2] = 1;
   i73 = 2;
   STACKTOP = i74;
   return i73 | 0;
  } else if ((i73 | 0) == 29) {
   if ((i8 + ~i7 | 0) != 16) {
    i73 = 2;
    STACKTOP = i74;
    return i73 | 0;
   }
   if (_strncmp(i7, 326541, 16) | 0) {
    i73 = 2;
    STACKTOP = i74;
    return i73 | 0;
   }
   i9 = 160;
   L50 : while (1) {
    i10 = i14 + 12 | 0;
    L52 : do if ((i3 | 0) > 1) i4 = HEAP32[i14 + 8 >> 2] | 0; else {
     i1 = HEAP32[i14 >> 2] | 0;
     i4 = HEAP32[i14 + 8 >> 2] | 0;
     L55 : do if ((i3 | 0) <= 0) {
      L57 : do if (i1 >>> 0 < i4 >>> 0) {
       L58 : while (1) {
        i13 = i1;
        i1 = i1 + 1 | 0;
        HEAP32[i14 >> 2] = i1;
        switch (HEAPU8[i13 >> 0] | 0) {
        case 26:
         break L57;
        case 10:
        case 13:
         {
          i73 = 38;
          break L58;
         }
        case 59:
         {
          i16 = i1;
          i73 = 39;
          break L58;
         }
        case 9:
        case 32:
         break;
        default:
         break L55;
        }
        if (i1 >>> 0 >= i4 >>> 0) break L57;
       }
       if ((i73 | 0) == 38) {
        i73 = 0;
        HEAP32[i10 >> 2] = 2;
        break L52;
       } else if ((i73 | 0) == 39) {
        i73 = 0;
        HEAP32[i10 >> 2] = 1;
        i1 = i16;
        break L55;
       }
      } while (0);
      HEAP32[i10 >> 2] = 3;
      break L52;
     } while (0);
     L65 : while (1) {
      if (i1 >>> 0 >= i4 >>> 0) {
       i1 = 3;
       break;
      }
      i3 = i1;
      i1 = i1 + 1 | 0;
      HEAP32[i14 >> 2] = i1;
      i3 = HEAP8[i3 >> 0] | 0;
      switch (i3 & 255 | 0) {
      case 10:
      case 13:
       {
        i1 = 2;
        break L65;
       }
      default:
       {}
      }
      if (i3 << 24 >> 24 == 26) {
       i1 = 3;
       break;
      }
     }
     HEAP32[i10 >> 2] = i1;
    } while (0);
    HEAP32[i10 >> 2] = 0;
    i1 = HEAP32[i14 >> 2] | 0;
    if (i1 >>> 0 >= i4 >>> 0) {
     i32 = i10;
     i37 = i9;
     i73 = 50;
     break;
    }
    L71 : while (1) {
     i3 = i1 + 1 | 0;
     HEAP32[i14 >> 2] = i3;
     switch (HEAPU8[i1 >> 0] | 0) {
     case 59:
      {
       i34 = i9;
       i73 = 49;
       break L50;
      }
     case 26:
      {
       i32 = i10;
       i37 = i9;
       i73 = 50;
       break L50;
      }
     case 9:
     case 32:
      if (i3 >>> 0 < i4 >>> 0) {
       i1 = i3;
       continue L71;
      } else {
       i32 = i10;
       i37 = i9;
       i73 = 50;
       break L50;
      }
     case 10:
     case 13:
      {
       HEAP32[i10 >> 2] = 2;
       i1 = i3;
       break;
      }
     default:
      {
       L74 : while (1) {
        if (i3 >>> 0 >= i4 >>> 0) {
         i24 = i3;
         i73 = 55;
         break;
        }
        i33 = i3 + 1 | 0;
        HEAP32[i14 >> 2] = i33;
        switch (HEAPU8[i3 >> 0] | 0) {
        case 26:
         {
          i24 = i33;
          i73 = 55;
          break L74;
         }
        case 9:
        case 32:
         {
          i20 = 0;
          i25 = i33;
          break L74;
         }
        case 10:
        case 13:
         {
          i73 = 53;
          break L74;
         }
        case 59:
         {
          i73 = 54;
          break L74;
         }
        default:
         i3 = i33;
        }
       }
       if ((i73 | 0) == 53) {
        i73 = 0;
        HEAP32[i10 >> 2] = 2;
        i20 = 2;
        i25 = i33;
       } else if ((i73 | 0) == 54) {
        i73 = 0;
        HEAP32[i10 >> 2] = 1;
        i20 = 1;
        i25 = i33;
       } else if ((i73 | 0) == 55) {
        i73 = 0;
        HEAP32[i10 >> 2] = 3;
        i20 = 3;
        i25 = i24;
       }
       if (i1) {
        i5 = i25;
        i2 = i20;
        break L71;
       }
       if ((i20 | 0) == 2) i1 = i25; else {
        i68 = i9;
        break L50;
       }
      }
     }
     HEAP32[i10 >> 2] = 0;
     if (i1 >>> 0 >= i4 >>> 0) {
      i32 = i10;
      i37 = i9;
      i73 = 50;
      break L50;
     }
    }
    i7 = HEAP8[i1 >> 0] | 0;
    i3 = 0;
    L87 : while (1) {
     i4 = HEAP32[280780 + (i3 << 2) >> 2] | 0;
     L89 : do if ((HEAP8[i4 >> 0] | 0) == i7 << 24 >> 24) while (1) {
      if (!(_strncmp(i4, i1, i5 + ~i1 | 0) | 0)) {
       i38 = i3;
       i73 = 65;
       break L87;
      }
      i3 = i3 + 1 | 0;
      if ((i3 | 0) >= 74) break L89;
      i4 = HEAP32[280780 + (i3 << 2) >> 2] | 0;
      if ((HEAP8[i4 >> 0] | 0) != i7 << 24 >> 24) {
       i15 = i9;
       break L87;
      }
     } while (0);
     i3 = i3 + 1 | 0;
     if ((i3 | 0) >= 74) {
      i15 = i9;
      break;
     }
    }
    L95 : do if ((i73 | 0) == 65) {
     i73 = 0;
     switch (i38 | 0) {
     case 49:
      {
       i6 = i14;
       i73 = 143;
       break L50;
      }
     case 20:
      {
       i43 = 0;
       i73 = 275;
       break L50;
      }
     case 40:
      {
       HEAP32[i74 + 72 >> 2] = 3;
       if ((_afm_parser_read_vals(i71, i74 + 72 | 0, 1) | 0) != 1) {
        i36 = i9;
        i73 = 68;
        break L50;
       }
       switch (HEAP32[i74 + 72 + 4 >> 2] | 0) {
       case 0:
       case 2:
        {
         i15 = i9;
         break L95;
        }
       default:
        {
         i68 = 7;
         break L50;
        }
       }
      }
     case 30:
      {
       HEAP32[i74 + 40 >> 2] = 4;
       if ((_afm_parser_read_vals(i71, i74 + 40 | 0, 1) | 0) != 1) {
        i68 = i9;
        break L50;
       }
       HEAP8[i51 >> 0] = HEAP8[i74 + 40 + 4 >> 0] | 0;
       i15 = i9;
       break L95;
      }
     case 26:
      {
       HEAP32[i74 + 40 >> 2] = 2;
       HEAP32[i74 + 40 + 8 >> 2] = 2;
       HEAP32[i74 + 40 + 16 >> 2] = 2;
       HEAP32[i74 + 40 + 24 >> 2] = 2;
       if ((_afm_parser_read_vals(i71, i74 + 40 | 0, 4) | 0) != 4) {
        i68 = i9;
        break L50;
       }
       HEAP32[i51 + 4 >> 2] = HEAP32[i74 + 40 + 4 >> 2];
       HEAP32[i51 + 8 >> 2] = HEAP32[i74 + 40 + 12 >> 2];
       HEAP32[i51 + 12 >> 2] = HEAP32[i74 + 40 + 20 >> 2];
       HEAP32[i51 + 16 >> 2] = HEAP32[i74 + 40 + 28 >> 2];
       i15 = i9;
       break L95;
      }
     case 0:
      {
       HEAP32[i74 + 40 >> 2] = 2;
       if ((_afm_parser_read_vals(i71, i74 + 40 | 0, 1) | 0) != 1) {
        i68 = i9;
        break L50;
       }
       HEAP32[i51 + 20 >> 2] = HEAP32[i74 + 40 + 4 >> 2];
       i15 = i9;
       break L95;
      }
     case 14:
      {
       HEAP32[i74 + 40 >> 2] = 2;
       if ((_afm_parser_read_vals(i71, i74 + 40 | 0, 1) | 0) != 1) {
        i68 = i9;
        break L50;
       }
       HEAP32[i51 + 24 >> 2] = HEAP32[i74 + 40 + 4 >> 2];
       i15 = i9;
       break L95;
      }
     case 45:
      {
       HEAP32[i74 + 72 >> 2] = 3;
       if ((_afm_parser_read_vals(i71, i74 + 72 | 0, 1) | 0) != 1) {
        i35 = i9;
        i73 = 79;
        break L50;
       }
       i3 = HEAP32[i74 + 72 + 4 >> 2] | 0;
       i39 = HEAP32[i71 + 4 >> 2] | 0;
       i1 = HEAP32[i39 + 12 >> 2] | 0;
       if (i3) while (1) {
        i3 = i3 + -1 | 0;
        L113 : do if ((i1 | 0) > 1) {
         i4 = HEAP32[i39 >> 2] | 0;
         i5 = HEAP32[i39 + 8 >> 2] | 0;
        } else {
         i4 = HEAP32[i39 >> 2] | 0;
         i7 = HEAP32[i39 + 8 >> 2] | 0;
         L116 : do if ((i1 | 0) <= 0) {
          L118 : do if (i4 >>> 0 < i7 >>> 0) {
           i1 = i4;
           L119 : while (1) {
            i4 = i1 + 1 | 0;
            HEAP32[i39 >> 2] = i4;
            switch (HEAPU8[i1 >> 0] | 0) {
            case 26:
             {
              i26 = i4;
              break L118;
             }
            case 10:
            case 13:
             {
              i73 = 88;
              break L119;
             }
            case 59:
             {
              i73 = 89;
              break L119;
             }
            case 9:
            case 32:
             break;
            default:
             break L116;
            }
            if (i4 >>> 0 < i7 >>> 0) i1 = i4; else {
             i26 = i4;
             break L118;
            }
           }
           if ((i73 | 0) == 88) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 2;
            i5 = i7;
            break L113;
           } else if ((i73 | 0) == 89) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 1;
            break L116;
           }
          } else i26 = i4; while (0);
          HEAP32[i39 + 12 >> 2] = 3;
          i4 = i26;
          i5 = i7;
          break L113;
         } while (0);
         L126 : while (1) {
          if (i4 >>> 0 >= i7 >>> 0) {
           i1 = 3;
           break;
          }
          i5 = i4 + 1 | 0;
          HEAP32[i39 >> 2] = i5;
          i1 = HEAP8[i4 >> 0] | 0;
          switch (i1 & 255 | 0) {
          case 10:
          case 13:
           {
            i4 = i5;
            i1 = 2;
            break L126;
           }
          default:
           {}
          }
          if (i1 << 24 >> 24 == 26) {
           i4 = i5;
           i1 = 3;
           break;
          } else i4 = i5;
         }
         HEAP32[i39 + 12 >> 2] = i1;
         i5 = i7;
        } while (0);
        HEAP32[i39 + 12 >> 2] = 0;
        if (i4 >>> 0 >= i5 >>> 0) {
         i17 = i39 + 12 | 0;
         i73 = 100;
         break L50;
        }
        L132 : while (1) {
         i1 = i4 + 1 | 0;
         HEAP32[i39 >> 2] = i1;
         switch (HEAPU8[i4 >> 0] | 0) {
         case 59:
          {
           i73 = 99;
           break L50;
          }
         case 26:
          {
           i17 = i39 + 12 | 0;
           i73 = 100;
           break L50;
          }
         case 9:
         case 32:
          if (i1 >>> 0 < i5 >>> 0) {
           i4 = i1;
           continue L132;
          } else {
           i17 = i39 + 12 | 0;
           i73 = 100;
           break L50;
          }
         case 10:
         case 13:
          {
           HEAP32[i39 + 12 >> 2] = 2;
           break;
          }
         default:
          {
           L135 : while (1) {
            if (i1 >>> 0 >= i5 >>> 0) {
             i27 = i1;
             i73 = 105;
             break;
            }
            i22 = i1 + 1 | 0;
            HEAP32[i39 >> 2] = i22;
            switch (HEAPU8[i1 >> 0] | 0) {
            case 26:
             {
              i27 = i22;
              i73 = 105;
              break L135;
             }
            case 9:
            case 32:
             {
              i21 = 0;
              i28 = i22;
              break L135;
             }
            case 10:
            case 13:
             {
              i73 = 103;
              break L135;
             }
            case 59:
             {
              i73 = 104;
              break L135;
             }
            default:
             i1 = i22;
            }
           }
           if ((i73 | 0) == 103) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 2;
            i21 = 2;
            i28 = i22;
           } else if ((i73 | 0) == 104) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 1;
            i21 = 1;
            i28 = i22;
           } else if ((i73 | 0) == 105) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 3;
            i21 = 3;
            i28 = i27;
           }
           if (i4) {
            i1 = i21;
            break L132;
           }
           if ((i21 | 0) == 2) i1 = i28; else {
            i43 = 160;
            i73 = 275;
            break L50;
           }
          }
         }
         HEAP32[i39 + 12 >> 2] = 0;
         if (i1 >>> 0 < i5 >>> 0) i4 = i1; else {
          i17 = i39 + 12 | 0;
          i73 = 100;
          break L50;
         }
        }
        if (!i3) break;
       }
       L148 : while (1) {
        L150 : do if ((i1 | 0) > 1) {
         i3 = HEAP32[i39 >> 2] | 0;
         i4 = HEAP32[i39 + 8 >> 2] | 0;
        } else {
         i3 = HEAP32[i39 >> 2] | 0;
         i5 = HEAP32[i39 + 8 >> 2] | 0;
         L153 : do if ((i1 | 0) <= 0) {
          L155 : do if (i3 >>> 0 < i5 >>> 0) {
           i1 = i3;
           L156 : while (1) {
            i3 = i1 + 1 | 0;
            HEAP32[i39 >> 2] = i3;
            switch (HEAPU8[i1 >> 0] | 0) {
            case 26:
             {
              i29 = i3;
              break L155;
             }
            case 10:
            case 13:
             {
              i73 = 115;
              break L156;
             }
            case 59:
             {
              i73 = 116;
              break L156;
             }
            case 9:
            case 32:
             break;
            default:
             break L153;
            }
            if (i3 >>> 0 < i5 >>> 0) i1 = i3; else {
             i29 = i3;
             break L155;
            }
           }
           if ((i73 | 0) == 115) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 2;
            i4 = i5;
            break L150;
           } else if ((i73 | 0) == 116) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 1;
            break L153;
           }
          } else i29 = i3; while (0);
          HEAP32[i39 + 12 >> 2] = 3;
          i3 = i29;
          i4 = i5;
          break L150;
         } while (0);
         L163 : while (1) {
          if (i3 >>> 0 >= i5 >>> 0) {
           i1 = 3;
           break;
          }
          i4 = i3 + 1 | 0;
          HEAP32[i39 >> 2] = i4;
          i1 = HEAP8[i3 >> 0] | 0;
          switch (i1 & 255 | 0) {
          case 10:
          case 13:
           {
            i3 = i4;
            i1 = 2;
            break L163;
           }
          default:
           {}
          }
          if (i1 << 24 >> 24 == 26) {
           i3 = i4;
           i1 = 3;
           break;
          } else i3 = i4;
         }
         HEAP32[i39 + 12 >> 2] = i1;
         i4 = i5;
        } while (0);
        HEAP32[i39 + 12 >> 2] = 0;
        if (i3 >>> 0 >= i4 >>> 0) {
         i18 = i39 + 12 | 0;
         i73 = 127;
         break L50;
        }
        L169 : while (1) {
         i1 = i3 + 1 | 0;
         HEAP32[i39 >> 2] = i1;
         switch (HEAPU8[i3 >> 0] | 0) {
         case 59:
          {
           i73 = 126;
           break L50;
          }
         case 26:
          {
           i18 = i39 + 12 | 0;
           i73 = 127;
           break L50;
          }
         case 9:
         case 32:
          if (i1 >>> 0 < i4 >>> 0) {
           i3 = i1;
           continue L169;
          } else {
           i18 = i39 + 12 | 0;
           i73 = 127;
           break L50;
          }
         case 10:
         case 13:
          {
           HEAP32[i39 + 12 >> 2] = 2;
           break;
          }
         default:
          {
           L172 : while (1) {
            if (i1 >>> 0 >= i4 >>> 0) {
             i30 = i1;
             i73 = 132;
             break;
            }
            i23 = i1 + 1 | 0;
            HEAP32[i39 >> 2] = i23;
            switch (HEAPU8[i1 >> 0] | 0) {
            case 26:
             {
              i30 = i23;
              i73 = 132;
              break L172;
             }
            case 9:
            case 32:
             {
              i19 = 0;
              i31 = i23;
              break L172;
             }
            case 10:
            case 13:
             {
              i73 = 130;
              break L172;
             }
            case 59:
             {
              i73 = 131;
              break L172;
             }
            default:
             i1 = i23;
            }
           }
           if ((i73 | 0) == 130) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 2;
            i19 = 2;
            i31 = i23;
           } else if ((i73 | 0) == 131) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 1;
            i19 = 1;
            i31 = i23;
           } else if ((i73 | 0) == 132) {
            i73 = 0;
            HEAP32[i39 + 12 >> 2] = 3;
            i19 = 3;
            i31 = i30;
           }
           if (i3) {
            i5 = i3;
            i7 = i31;
            i1 = i19;
            break L169;
           }
           if ((i19 | 0) == 2) i1 = i31; else {
            i43 = 160;
            i73 = 275;
            break L50;
           }
          }
         }
         HEAP32[i39 + 12 >> 2] = 0;
         if (i1 >>> 0 < i4 >>> 0) i3 = i1; else {
          i18 = i39 + 12 | 0;
          i73 = 127;
          break L50;
         }
        }
        i8 = HEAP8[i5 >> 0] | 0;
        i3 = 0;
        L185 : while (1) {
         i4 = HEAP32[280780 + (i3 << 2) >> 2] | 0;
         L187 : do if ((HEAP8[i4 >> 0] | 0) == i8 << 24 >> 24) while (1) {
          if (!(_strncmp(i4, i5, i7 + ~i5 | 0) | 0)) break L185;
          i3 = i3 + 1 | 0;
          if ((i3 | 0) >= 74) break L187;
          i4 = HEAP32[280780 + (i3 << 2) >> 2] | 0;
          if ((HEAP8[i4 >> 0] | 0) != i8 << 24 >> 24) continue L148;
         } while (0);
         i3 = i3 + 1 | 0;
         if ((i3 | 0) >= 74) continue L148;
        }
        switch (i3 | 0) {
        case 17:
        case 20:
         {
          i15 = 0;
          break L95;
         }
        default:
         {}
        }
       }
      }
     default:
      {
       i15 = i9;
       break L95;
      }
     }
    } while (0);
    i14 = HEAP32[i71 + 4 >> 2] | 0;
    i3 = HEAP32[i14 + 12 >> 2] | 0;
    i9 = i15;
   }
   L195 : switch (i73 | 0) {
   case 49:
    {
     HEAP32[i10 >> 2] = 1;
     i68 = i34;
     break;
    }
   case 50:
    {
     HEAP32[i32 >> 2] = 3;
     i68 = i37;
     break;
    }
   case 68:
    {
     i68 = i36;
     break;
    }
   case 79:
    {
     i68 = i35;
     break;
    }
   case 99:
    {
     HEAP32[i39 + 12 >> 2] = 1;
     i73 = 160;
     STACKTOP = i74;
     return i73 | 0;
    }
   case 100:
    {
     HEAP32[i17 >> 2] = 3;
     i73 = 160;
     STACKTOP = i74;
     return i73 | 0;
    }
   case 126:
    {
     HEAP32[i39 + 12 >> 2] = 1;
     i73 = 160;
     STACKTOP = i74;
     return i73 | 0;
    }
   case 127:
    {
     HEAP32[i18 >> 2] = 3;
     i73 = 160;
     STACKTOP = i74;
     return i73 | 0;
    }
   case 143:
    {
     L197 : while (1) {
      i10 = i6 + 12 | 0;
      L199 : do if ((i2 | 0) > 1) {
       i4 = i6;
       i1 = HEAP32[i6 >> 2] | 0;
       i3 = HEAP32[i6 + 8 >> 2] | 0;
      } else {
       i1 = HEAP32[i6 >> 2] | 0;
       i3 = HEAP32[i6 + 8 >> 2] | 0;
       L202 : do if ((i2 | 0) <= 0) {
        L204 : do if (i1 >>> 0 < i3 >>> 0) {
         i2 = i1;
         L205 : while (1) {
          i1 = i2 + 1 | 0;
          HEAP32[i6 >> 2] = i1;
          switch (HEAPU8[i2 >> 0] | 0) {
          case 26:
           {
            i59 = i1;
            break L204;
           }
          case 10:
          case 13:
           {
            i73 = 150;
            break L205;
           }
          case 59:
           {
            i73 = 151;
            break L205;
           }
          case 9:
          case 32:
           break;
          default:
           break L202;
          }
          if (i1 >>> 0 < i3 >>> 0) i2 = i1; else {
           i59 = i1;
           break L204;
          }
         }
         if ((i73 | 0) == 150) {
          i73 = 0;
          HEAP32[i10 >> 2] = 2;
          i4 = i6;
          break L199;
         } else if ((i73 | 0) == 151) {
          i73 = 0;
          HEAP32[i10 >> 2] = 1;
          break L202;
         }
        } else i59 = i1; while (0);
        HEAP32[i10 >> 2] = 3;
        i4 = i6;
        i1 = i59;
        break L199;
       } while (0);
       L212 : while (1) {
        if (i1 >>> 0 >= i3 >>> 0) {
         i2 = 3;
         break;
        }
        i2 = i1 + 1 | 0;
        HEAP32[i6 >> 2] = i2;
        i1 = HEAP8[i1 >> 0] | 0;
        switch (i1 & 255 | 0) {
        case 10:
        case 13:
         {
          i1 = i2;
          i2 = 2;
          break L212;
         }
        default:
         {}
        }
        if (i1 << 24 >> 24 == 26) {
         i1 = i2;
         i2 = 3;
         break;
        } else i1 = i2;
       }
       HEAP32[i10 >> 2] = i2;
       i4 = i6;
      } while (0);
      HEAP32[i10 >> 2] = 0;
      if (i1 >>> 0 >= i3 >>> 0) {
       i52 = i10;
       i73 = 162;
       break;
      }
      L218 : while (1) {
       i2 = i1 + 1 | 0;
       HEAP32[i4 >> 2] = i2;
       switch (HEAPU8[i1 >> 0] | 0) {
       case 59:
        {
         i73 = 161;
         break L197;
        }
       case 26:
        {
         i52 = i10;
         i73 = 162;
         break L197;
        }
       case 9:
       case 32:
        if (i2 >>> 0 < i3 >>> 0) {
         i1 = i2;
         continue L218;
        } else {
         i52 = i10;
         i73 = 162;
         break L197;
        }
       case 10:
       case 13:
        {
         HEAP32[i10 >> 2] = 2;
         i1 = i2;
         break;
        }
       default:
        {
         L221 : while (1) {
          if (i2 >>> 0 >= i3 >>> 0) {
           i60 = i2;
           i73 = 167;
           break;
          }
          i53 = i2 + 1 | 0;
          HEAP32[i4 >> 2] = i53;
          switch (HEAPU8[i2 >> 0] | 0) {
          case 26:
           {
            i60 = i53;
            i73 = 167;
            break L221;
           }
          case 9:
          case 32:
           {
            i47 = 0;
            i61 = i53;
            break L221;
           }
          case 10:
          case 13:
           {
            i73 = 165;
            break L221;
           }
          case 59:
           {
            i73 = 166;
            break L221;
           }
          default:
           i2 = i53;
          }
         }
         if ((i73 | 0) == 165) {
          i73 = 0;
          HEAP32[i10 >> 2] = 2;
          i47 = 2;
          i61 = i53;
         } else if ((i73 | 0) == 166) {
          i73 = 0;
          HEAP32[i10 >> 2] = 1;
          i47 = 1;
          i61 = i53;
         } else if ((i73 | 0) == 167) {
          i73 = 0;
          HEAP32[i10 >> 2] = 3;
          i47 = 3;
          i61 = i60;
         }
         if (i1) {
          i4 = i61;
          break L218;
         }
         if ((i47 | 0) == 2) i1 = i61; else {
          i68 = 160;
          break L195;
         }
        }
       }
       HEAP32[i10 >> 2] = 0;
       if (i1 >>> 0 >= i3 >>> 0) {
        i52 = i10;
        i73 = 162;
        break L197;
       }
      }
      i5 = HEAP8[i1 >> 0] | 0;
      i2 = 0;
      L234 : while (1) {
       i3 = HEAP32[280780 + (i2 << 2) >> 2] | 0;
       L236 : do if ((HEAP8[i3 >> 0] | 0) == i5 << 24 >> 24) while (1) {
        if (!(_strncmp(i3, i1, i4 + ~i1 | 0) | 0)) {
         i69 = i2;
         i73 = 177;
         break L234;
        }
        i2 = i2 + 1 | 0;
        if ((i2 | 0) >= 74) break L236;
        i3 = HEAP32[280780 + (i2 << 2) >> 2] | 0;
        if ((HEAP8[i3 >> 0] | 0) != i5 << 24 >> 24) {
         i40 = i6;
         break L234;
        }
       } while (0);
       i2 = i2 + 1 | 0;
       if ((i2 | 0) >= 74) {
        i40 = i6;
        break;
       }
      }
      L242 : do if ((i73 | 0) == 177) {
       i73 = 0;
       switch (i69 | 0) {
       case 20:
       case 21:
        {
         i43 = 0;
         i73 = 275;
         break L197;
        }
       case 53:
        {
         i8 = HEAP32[i71 + 8 >> 2] | 0;
         HEAP32[i74 + 72 >> 2] = 3;
         if ((_afm_parser_read_vals(i71, i74 + 72 | 0, 1) | 0) != 1) {
          i73 = 179;
          break L197;
         }
         i1 = HEAP32[i74 + 72 + 4 >> 2] | 0;
         HEAP32[i8 + 32 >> 2] = i1;
         if ((i1 | 0) != 0 ? (HEAP32[i8 + 28 >> 2] = _ft_mem_realloc(HEAP32[i71 >> 2] | 0, 20, 0, i1, 0, i74 + 32 | 0) | 0, i54 = HEAP32[i74 + 32 >> 2] | 0, (i54 | 0) != 0) : 0) {
          i45 = i54;
          i73 = 223;
          break L197;
         } else i7 = i8 + 28 | 0;
         i1 = -1;
         L251 : while (1) {
          i72 = HEAP32[i71 + 4 >> 2] | 0;
          i2 = HEAP32[i72 + 12 >> 2] | 0;
          L253 : do if ((i2 | 0) > 1) {
           i5 = i72;
           i3 = HEAP32[i72 >> 2] | 0;
           i4 = HEAP32[i72 + 8 >> 2] | 0;
          } else {
           i3 = HEAP32[i72 >> 2] | 0;
           i6 = HEAP32[i72 + 8 >> 2] | 0;
           L256 : do if ((i2 | 0) <= 0) {
            L258 : do if (i3 >>> 0 < i6 >>> 0) {
             i2 = i3;
             L259 : while (1) {
              i3 = i2 + 1 | 0;
              HEAP32[i72 >> 2] = i3;
              switch (HEAPU8[i2 >> 0] | 0) {
              case 26:
               {
                i62 = i3;
                break L258;
               }
              case 10:
              case 13:
               {
                i73 = 190;
                break L259;
               }
              case 59:
               {
                i73 = 191;
                break L259;
               }
              case 9:
              case 32:
               break;
              default:
               break L256;
              }
              if (i3 >>> 0 < i6 >>> 0) i2 = i3; else {
               i62 = i3;
               break L258;
              }
             }
             if ((i73 | 0) == 190) {
              i73 = 0;
              HEAP32[i72 + 12 >> 2] = 2;
              i5 = i72;
              i4 = i6;
              break L253;
             } else if ((i73 | 0) == 191) {
              i73 = 0;
              HEAP32[i72 + 12 >> 2] = 1;
              break L256;
             }
            } else i62 = i3; while (0);
            HEAP32[i72 + 12 >> 2] = 3;
            i5 = i72;
            i3 = i62;
            i4 = i6;
            break L253;
           } while (0);
           L266 : while (1) {
            if (i3 >>> 0 >= i6 >>> 0) {
             i2 = 3;
             break;
            }
            i4 = i3 + 1 | 0;
            HEAP32[i72 >> 2] = i4;
            i2 = HEAP8[i3 >> 0] | 0;
            switch (i2 & 255 | 0) {
            case 10:
            case 13:
             {
              i3 = i4;
              i2 = 2;
              break L266;
             }
            default:
             {}
            }
            if (i2 << 24 >> 24 == 26) {
             i3 = i4;
             i2 = 3;
             break;
            } else i3 = i4;
           }
           HEAP32[i72 + 12 >> 2] = i2;
           i5 = i72;
           i4 = i6;
          } while (0);
          HEAP32[i72 + 12 >> 2] = 0;
          if (i3 >>> 0 >= i4 >>> 0) {
           i55 = i72 + 12 | 0;
           i73 = 202;
           break L197;
          }
          L272 : while (1) {
           i2 = i3 + 1 | 0;
           HEAP32[i5 >> 2] = i2;
           switch (HEAPU8[i3 >> 0] | 0) {
           case 59:
            {
             i73 = 201;
             break L197;
            }
           case 26:
            {
             i55 = i72 + 12 | 0;
             i73 = 202;
             break L197;
            }
           case 9:
           case 32:
            if (i2 >>> 0 < i4 >>> 0) {
             i3 = i2;
             continue L272;
            } else {
             i55 = i72 + 12 | 0;
             i73 = 202;
             break L197;
            }
           case 10:
           case 13:
            {
             HEAP32[i72 + 12 >> 2] = 2;
             i3 = i2;
             break;
            }
           default:
            {
             L275 : while (1) {
              if (i2 >>> 0 >= i4 >>> 0) {
               i63 = i2;
               i73 = 207;
               break;
              }
              i56 = i2 + 1 | 0;
              HEAP32[i5 >> 2] = i56;
              switch (HEAPU8[i2 >> 0] | 0) {
              case 26:
               {
                i63 = i56;
                i73 = 207;
                break L275;
               }
              case 9:
              case 32:
               {
                i49 = 0;
                i64 = i56;
                break L275;
               }
              case 10:
              case 13:
               {
                i73 = 205;
                break L275;
               }
              case 59:
               {
                i73 = 206;
                break L275;
               }
              default:
               i2 = i56;
              }
             }
             if ((i73 | 0) == 205) {
              i73 = 0;
              HEAP32[i72 + 12 >> 2] = 2;
              i49 = 2;
              i64 = i56;
             } else if ((i73 | 0) == 206) {
              i73 = 0;
              HEAP32[i72 + 12 >> 2] = 1;
              i49 = 1;
              i64 = i56;
             } else if ((i73 | 0) == 207) {
              i73 = 0;
              HEAP32[i72 + 12 >> 2] = 3;
              i49 = 3;
              i64 = i63;
             }
             if (i3) {
              i5 = i64;
              break L272;
             }
             if ((i49 | 0) == 2) i3 = i64; else {
              i45 = 160;
              i73 = 223;
              break L197;
             }
            }
           }
           HEAP32[i72 + 12 >> 2] = 0;
           if (i3 >>> 0 >= i4 >>> 0) {
            i55 = i72 + 12 | 0;
            i73 = 202;
            break L197;
           }
          }
          i6 = HEAP8[i3 >> 0] | 0;
          i2 = 0;
          L288 : while (1) {
           i4 = HEAP32[280780 + (i2 << 2) >> 2] | 0;
           L290 : do if ((HEAP8[i4 >> 0] | 0) == i6 << 24 >> 24) while (1) {
            if (!(_strncmp(i4, i3, i5 + ~i3 | 0) | 0)) {
             i70 = i2;
             i73 = 217;
             break L288;
            }
            i2 = i2 + 1 | 0;
            if ((i2 | 0) >= 74) break L290;
            i4 = HEAP32[280780 + (i2 << 2) >> 2] | 0;
            if ((HEAP8[i4 >> 0] | 0) != i6 << 24 >> 24) {
             i42 = i1;
             break L288;
            }
           } while (0);
           i2 = i2 + 1 | 0;
           if ((i2 | 0) >= 74) {
            i42 = i1;
            break;
           }
          }
          if ((i73 | 0) == 217) {
           i73 = 0;
           switch (i70 | 0) {
           case 20:
           case 21:
           case 23:
            break L251;
           case 56:
            break;
           default:
            {
             i73 = 222;
             break L197;
            }
           }
           i1 = i1 + 1 | 0;
           if ((i1 | 0) >= (HEAP32[i8 + 32 >> 2] | 0)) {
            i73 = 222;
            break L197;
           }
           i2 = HEAP32[i7 >> 2] | 0;
           HEAP32[i74 + 72 >> 2] = 3;
           HEAP32[i74 + 72 + 8 >> 2] = 2;
           HEAP32[i74 + 72 + 16 >> 2] = 2;
           HEAP32[i74 + 72 + 24 >> 2] = 2;
           HEAP32[i74 + 72 + 32 >> 2] = 2;
           if ((_afm_parser_read_vals(i71, i74 + 72 | 0, 5) | 0) != 5) {
            i73 = 222;
            break L197;
           }
           HEAP32[i2 + (i1 * 20 | 0) >> 2] = HEAP32[i74 + 72 + 4 >> 2];
           HEAP32[i2 + (i1 * 20 | 0) + 4 >> 2] = HEAP32[i74 + 72 + 12 >> 2];
           HEAP32[i2 + (i1 * 20 | 0) + 8 >> 2] = HEAP32[i74 + 72 + 20 >> 2];
           HEAP32[i2 + (i1 * 20 | 0) + 12 >> 2] = HEAP32[i74 + 72 + 28 >> 2];
           HEAP32[i2 + (i1 * 20 | 0) + 16 >> 2] = HEAP32[i74 + 72 + 36 >> 2];
           i42 = i1;
          }
          i1 = i42;
         }
         HEAP32[i8 + 32 >> 2] = i1 + 1;
         i40 = i72;
         break L242;
        }
       case 51:
       case 50:
        break;
       default:
        {
         i68 = 160;
         break L195;
        }
       }
       i9 = HEAP32[i71 + 8 >> 2] | 0;
       HEAP32[i74 + 72 >> 2] = 3;
       if ((_afm_parser_read_vals(i71, i74 + 72 | 0, 1) | 0) != 1) {
        i73 = 227;
        break L197;
       }
       i1 = HEAP32[i74 + 72 + 4 >> 2] | 0;
       HEAP32[i9 + 40 >> 2] = i1;
       if ((i1 | 0) != 0 ? (HEAP32[i9 + 36 >> 2] = _ft_mem_realloc(HEAP32[i71 >> 2] | 0, 16, 0, i1, 0, i74 + 32 | 0) | 0, i57 = HEAP32[i74 + 32 >> 2] | 0, (i57 | 0) != 0) : 0) {
        i44 = i57;
        i73 = 272;
        break L197;
       } else i8 = i9 + 36 | 0;
       i1 = 0;
       L309 : while (1) {
        i41 = HEAP32[i71 + 4 >> 2] | 0;
        i2 = HEAP32[i41 + 12 >> 2] | 0;
        L311 : while (1) {
         L313 : do if ((i2 | 0) > 1) {
          i3 = HEAP32[i41 >> 2] | 0;
          i4 = HEAP32[i41 + 8 >> 2] | 0;
         } else {
          i3 = HEAP32[i41 >> 2] | 0;
          i5 = HEAP32[i41 + 8 >> 2] | 0;
          L316 : do if ((i2 | 0) <= 0) {
           L318 : do if (i3 >>> 0 < i5 >>> 0) {
            i2 = i3;
            L319 : while (1) {
             i3 = i2 + 1 | 0;
             HEAP32[i41 >> 2] = i3;
             switch (HEAPU8[i2 >> 0] | 0) {
             case 26:
              {
               i65 = i3;
               break L318;
              }
             case 10:
             case 13:
              {
               i73 = 238;
               break L319;
              }
             case 59:
              {
               i73 = 239;
               break L319;
              }
             case 9:
             case 32:
              break;
             default:
              break L316;
             }
             if (i3 >>> 0 < i5 >>> 0) i2 = i3; else {
              i65 = i3;
              break L318;
             }
            }
            if ((i73 | 0) == 238) {
             i73 = 0;
             HEAP32[i41 + 12 >> 2] = 2;
             i4 = i5;
             break L313;
            } else if ((i73 | 0) == 239) {
             i73 = 0;
             HEAP32[i41 + 12 >> 2] = 1;
             break L316;
            }
           } else i65 = i3; while (0);
           HEAP32[i41 + 12 >> 2] = 3;
           i3 = i65;
           i4 = i5;
           break L313;
          } while (0);
          L326 : while (1) {
           if (i3 >>> 0 >= i5 >>> 0) {
            i2 = 3;
            break;
           }
           i4 = i3 + 1 | 0;
           HEAP32[i41 >> 2] = i4;
           i2 = HEAP8[i3 >> 0] | 0;
           switch (i2 & 255 | 0) {
           case 10:
           case 13:
            {
             i3 = i4;
             i2 = 2;
             break L326;
            }
           default:
            {}
           }
           if (i2 << 24 >> 24 == 26) {
            i3 = i4;
            i2 = 3;
            break;
           } else i3 = i4;
          }
          HEAP32[i41 + 12 >> 2] = i2;
          i4 = i5;
         } while (0);
         HEAP32[i41 + 12 >> 2] = 0;
         if (i3 >>> 0 >= i4 >>> 0) {
          i46 = i41 + 12 | 0;
          i73 = 250;
          break L197;
         }
         L332 : while (1) {
          i2 = i3 + 1 | 0;
          HEAP32[i41 >> 2] = i2;
          switch (HEAPU8[i3 >> 0] | 0) {
          case 59:
           {
            i73 = 249;
            break L197;
           }
          case 26:
           {
            i46 = i41 + 12 | 0;
            i73 = 250;
            break L197;
           }
          case 9:
          case 32:
           if (i2 >>> 0 < i4 >>> 0) {
            i3 = i2;
            continue L332;
           } else {
            i46 = i41 + 12 | 0;
            i73 = 250;
            break L197;
           }
          case 10:
          case 13:
           {
            HEAP32[i41 + 12 >> 2] = 2;
            break;
           }
          default:
           {
            L335 : while (1) {
             if (i2 >>> 0 >= i4 >>> 0) {
              i66 = i2;
              i73 = 255;
              break;
             }
             i58 = i2 + 1 | 0;
             HEAP32[i41 >> 2] = i58;
             switch (HEAPU8[i2 >> 0] | 0) {
             case 26:
              {
               i66 = i58;
               i73 = 255;
               break L335;
              }
             case 9:
             case 32:
              {
               i48 = 0;
               i67 = i58;
               break L335;
              }
             case 10:
             case 13:
              {
               i73 = 253;
               break L335;
              }
             case 59:
              {
               i73 = 254;
               break L335;
              }
             default:
              i2 = i58;
             }
            }
            if ((i73 | 0) == 253) {
             i73 = 0;
             HEAP32[i41 + 12 >> 2] = 2;
             i48 = 2;
             i67 = i58;
            } else if ((i73 | 0) == 254) {
             i73 = 0;
             HEAP32[i41 + 12 >> 2] = 1;
             i48 = 1;
             i67 = i58;
            } else if ((i73 | 0) == 255) {
             i73 = 0;
             HEAP32[i41 + 12 >> 2] = 3;
             i48 = 3;
             i67 = i66;
            }
            if (i3) {
             i6 = i67;
             i2 = i48;
             break L332;
            }
            if ((i48 | 0) == 2) i2 = i67; else {
             i44 = 160;
             i73 = 272;
             break L197;
            }
           }
          }
          HEAP32[i41 + 12 >> 2] = 0;
          if (i2 >>> 0 < i4 >>> 0) i3 = i2; else {
           i46 = i41 + 12 | 0;
           i73 = 250;
           break L197;
          }
         }
         i7 = HEAP8[i3 >> 0] | 0;
         i4 = 0;
         while (1) {
          i5 = HEAP32[280780 + (i4 << 2) >> 2] | 0;
          L350 : do if ((HEAP8[i5 >> 0] | 0) == i7 << 24 >> 24) while (1) {
           if (!(_strncmp(i5, i3, i6 + ~i3 | 0) | 0)) break L311;
           i4 = i4 + 1 | 0;
           if ((i4 | 0) >= 74) break L350;
           i5 = HEAP32[280780 + (i4 << 2) >> 2] | 0;
           if ((HEAP8[i5 >> 0] | 0) != i7 << 24 >> 24) continue L311;
          } while (0);
          i4 = i4 + 1 | 0;
          if ((i4 | 0) >= 74) continue L311;
         }
        }
        switch (i4 | 0) {
        case 20:
        case 21:
        case 22:
         break L309;
        case 37:
        case 36:
        case 34:
         break;
        default:
         {
          i44 = 160;
          i73 = 272;
          break L197;
         }
        }
        if ((i1 | 0) >= (HEAP32[i9 + 40 >> 2] | 0)) {
         i44 = 160;
         i73 = 272;
         break L197;
        }
        i5 = HEAP32[i8 >> 2] | 0;
        HEAP32[i74 >> 2] = 5;
        HEAP32[i74 + 8 >> 2] = 5;
        HEAP32[i74 + 16 >> 2] = 3;
        HEAP32[i74 + 24 >> 2] = 3;
        i3 = _afm_parser_read_vals(i71, i74, 4) | 0;
        if ((i3 | 0) < 3) {
         i44 = 160;
         i73 = 272;
         break L197;
        }
        HEAP32[i5 + (i1 << 4) >> 2] = HEAP32[i74 + 4 >> 2];
        HEAP32[i5 + (i1 << 4) + 4 >> 2] = HEAP32[i74 + 12 >> 2];
        i2 = HEAP32[i74 + 20 >> 2] | 0;
        if ((i4 | 0) == 37) {
         i3 = i2;
         i2 = 0;
        } else i3 = (i4 | 0) == 34 & (i3 | 0) == 4 ? HEAP32[i74 + 28 >> 2] | 0 : 0;
        HEAP32[i5 + (i1 << 4) + 8 >> 2] = i2;
        HEAP32[i5 + (i1 << 4) + 12 >> 2] = i3;
        i1 = i1 + 1 | 0;
       }
       HEAP32[i9 + 40 >> 2] = i1;
       _qsort(HEAP32[i8 >> 2] | 0, i1, 16, 159);
       i40 = HEAP32[i71 + 4 >> 2] | 0;
      } while (0);
      i2 = HEAP32[i40 + 12 >> 2] | 0;
      i6 = i40;
     }
     switch (i73 | 0) {
     case 161:
      {
       HEAP32[i10 >> 2] = 1;
       i68 = 160;
       break L195;
      }
     case 162:
      {
       HEAP32[i52 >> 2] = 3;
       i68 = 160;
       break L195;
      }
     case 179:
      {
       i45 = 160;
       i73 = 223;
       break;
      }
     case 201:
      {
       HEAP32[i72 + 12 >> 2] = 1;
       i45 = 160;
       i73 = 223;
       break;
      }
     case 202:
      {
       HEAP32[i55 >> 2] = 3;
       i45 = 160;
       i73 = 223;
       break;
      }
     case 222:
      {
       i45 = 160;
       i73 = 223;
       break;
      }
     case 227:
      {
       i44 = 160;
       i73 = 272;
       break;
      }
     case 249:
      {
       HEAP32[i41 + 12 >> 2] = 1;
       i44 = 160;
       i73 = 272;
       break;
      }
     case 250:
      {
       HEAP32[i46 >> 2] = 3;
       i44 = 160;
       i73 = 272;
       break;
      }
     case 275:
      {
       STACKTOP = i74;
       return i43 | 0;
      }
     }
     if ((i73 | 0) == 223) {
      i68 = i45;
      break;
     } else if ((i73 | 0) == 272) {
      i68 = i44;
      break;
     }
     break;
    }
   case 275:
    {
     STACKTOP = i74;
     return i43 | 0;
    }
   }
   _ft_mem_free(i50, HEAP32[i51 + 28 >> 2] | 0);
   HEAP32[i51 + 28 >> 2] = 0;
   HEAP32[i51 + 32 >> 2] = 0;
   _ft_mem_free(i50, HEAP32[i51 + 36 >> 2] | 0);
   HEAP32[i51 + 36 >> 2] = 0;
   HEAP32[i51 + 40 >> 2] = 0;
   HEAP8[i51 >> 0] = 0;
   i73 = i68;
   STACKTOP = i74;
   return i73 | 0;
  } else if ((i73 | 0) == 275) {
   STACKTOP = i74;
   return i43 | 0;
  }
 } while (0);
 HEAP32[i14 + 12 >> 2] = 3;
 i73 = 2;
 STACKTOP = i74;
 return i73 | 0;
}
function _t1_decoder_parse_charstrings(i33, i2, i3) {
 i33 = i33 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i38 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i38 + 8 >> 2] = i33;
 HEAP32[i38 + 4 >> 2] = i2;
 i32 = i38 + 4 ^ i38 + 8 ^ i38;
 HEAP32[i38 >> 2] = ((i32 >>> 10 ^ i32 ^ i32 >> 20) & 65535 | 0) == 0 ? 29572 : (i32 >>> 10 ^ i32 ^ i32 >> 20) & 65535;
 HEAP32[i33 + 1136 >> 2] = i33 + 112;
 HEAP32[i33 + 1344 >> 2] = i33 + 1140;
 HEAP32[i33 + 64 >> 2] = 0;
 i32 = HEAP32[i33 + 72 >> 2] | 0;
 i9 = HEAP32[i33 + 1488 >> 2] | 0;
 if ((i9 | 0) != 0 ? (i1 = HEAP32[i33 + 1492 >> 2] | 0, (i1 | 0) != 0) : 0) {
  _memset(i9 | 0, 0, i1 << 2 | 0) | 0;
  i9 = HEAP32[i38 + 4 >> 2] | 0;
  i1 = i9;
 } else {
  i1 = i2;
  i9 = i2;
 }
 HEAP32[i33 + 1144 >> 2] = i1;
 i2 = i9 + i3 | 0;
 HEAP32[i33 + 1148 >> 2] = i2;
 i9 = i1;
 HEAP32[i33 + 1140 >> 2] = i9;
 i1 = HEAP32[i33 + 24 >> 2] | 0;
 i3 = HEAP32[i33 + 28 >> 2] | 0;
 if (i32) FUNCTION_TABLE_vi[HEAP32[i32 + 4 >> 2] & 127](HEAP32[i32 >> 2] | 0);
 if (i9 >>> 0 >= i2 >>> 0) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 i5 = 0;
 i6 = 0;
 i20 = i1;
 i4 = 0;
 i13 = i1;
 i14 = i3;
 i19 = i33 + 1140 | 0;
 L11 : while (1) {
  i10 = i5;
  i3 = i6;
  i1 = i4;
  while (1) {
   while (1) {
    i15 = HEAP32[i38 + 8 >> 2] | 0;
    i17 = HEAP32[i15 + 1136 >> 2] | 0;
    i5 = i9 + 1 | 0;
    i4 = HEAP8[i9 >> 0] | 0;
    L17 : do switch (i4 & 255 | 0) {
    case 1:
     {
      i9 = i5;
      i7 = i3;
      i8 = 16;
      i4 = 0;
      break;
     }
    case 3:
     {
      i9 = i5;
      i7 = i3;
      i8 = 18;
      i4 = 0;
      break;
     }
    case 4:
     {
      i9 = i5;
      i7 = i3;
      i8 = 14;
      i4 = 0;
      break;
     }
    case 5:
     {
      i9 = i5;
      i7 = i3;
      i8 = 9;
      i4 = 0;
      break;
     }
    case 6:
     {
      i9 = i5;
      i7 = i3;
      i8 = 6;
      i4 = 0;
      break;
     }
    case 7:
     {
      i9 = i5;
      i7 = i3;
      i8 = 13;
      i4 = 0;
      break;
     }
    case 8:
     {
      i9 = i5;
      i7 = i3;
      i8 = 11;
      i4 = 0;
      break;
     }
    case 9:
     {
      i9 = i5;
      i7 = i3;
      i8 = 5;
      i4 = 0;
      break;
     }
    case 10:
     {
      i9 = i5;
      i7 = i3;
      i8 = 22;
      i4 = 0;
      break;
     }
    case 11:
     {
      i9 = i5;
      i7 = i3;
      i8 = 24;
      i4 = 0;
      break;
     }
    case 13:
     {
      i9 = i5;
      i7 = i3;
      i8 = 2;
      i4 = 0;
      break;
     }
    case 14:
     {
      i9 = i5;
      i7 = i3;
      i8 = 1;
      i4 = 0;
      break;
     }
    case 15:
     {
      i9 = i5;
      i7 = i3;
      i8 = 26;
      i4 = 0;
      break;
     }
    case 21:
     {
      i9 = i5;
      i7 = i3;
      i8 = 10;
      i4 = 0;
      break;
     }
    case 22:
     {
      i9 = i5;
      i7 = i3;
      i8 = 7;
      i4 = 0;
      break;
     }
    case 30:
     {
      i9 = i5;
      i7 = i3;
      i8 = 12;
      i4 = 0;
      break;
     }
    case 31:
     {
      i9 = i5;
      i7 = i3;
      i8 = 8;
      i4 = 0;
      break;
     }
    case 12:
     {
      if (i5 >>> 0 > i2 >>> 0) {
       i1 = 160;
       i21 = 256;
       break L11;
      }
      i9 = i9 + 2 | 0;
      switch (HEAPU8[i5 >> 0] | 0) {
      case 0:
       {
        i7 = i3;
        i8 = 15;
        i4 = 0;
        break L17;
       }
      case 1:
       {
        i7 = i3;
        i8 = 19;
        i4 = 0;
        break L17;
       }
      case 2:
       {
        i7 = i3;
        i8 = 17;
        i4 = 0;
        break L17;
       }
      case 6:
       {
        i7 = i3;
        i8 = 3;
        i4 = 0;
        break L17;
       }
      case 7:
       {
        i7 = i3;
        i8 = 4;
        i4 = 0;
        break L17;
       }
      case 12:
       {
        i7 = i3;
        i8 = 20;
        i4 = 0;
        break L17;
       }
      case 16:
       {
        i7 = i3;
        i8 = 21;
        i4 = 0;
        break L17;
       }
      case 17:
       {
        i7 = i3;
        i8 = 23;
        i4 = 0;
        break L17;
       }
      case 33:
       {
        i7 = i3;
        i8 = 25;
        i4 = 0;
        break L17;
       }
      default:
       {
        i1 = 160;
        i21 = 256;
        break L11;
       }
      }
     }
    case 255:
     {
      i4 = i9 + 5 | 0;
      if (i4 >>> 0 > i2 >>> 0) {
       i1 = 160;
       i21 = 256;
       break L11;
      }
      i5 = HEAPU8[i9 + 2 >> 0] << 16 | HEAPU8[i5 >> 0] << 24 | HEAPU8[i9 + 3 >> 0] << 8 | HEAPU8[i9 + 4 >> 0];
      i6 = i3 << 24 >> 24 != 0;
      if ((i5 + 32e3 | 0) >>> 0 > 64e3) {
       i9 = i4;
       i7 = i6 ? i3 : 1;
       i8 = 0;
       i4 = i5;
       break L17;
      } else {
       i9 = i4;
       i7 = i3;
       i8 = 0;
       i4 = i6 ? i5 : i5 << 16;
       break L17;
      }
     }
    default:
     {
      if ((i4 & 255) <= 31) {
       i1 = 160;
       i21 = 256;
       break L11;
      }
      do if ((i4 & 255) >= 247) {
       i9 = i9 + 2 | 0;
       if (i9 >>> 0 > i2 >>> 0) {
        i1 = 160;
        i21 = 256;
        break L11;
       }
       if ((i4 & 255) < 251) {
        i4 = (HEAPU8[i5 >> 0] | ((i4 & 255) << 8) + -63232) + 108 | 0;
        break;
       } else {
        i4 = -108 - (HEAPU8[i5 >> 0] | ((i4 & 255) << 8) + -64256) | 0;
        break;
       }
      } else {
       i9 = i5;
       i4 = (i4 & 255) + -139 | 0;
      } while (0);
      i7 = i3;
      i8 = 0;
      i4 = i3 << 24 >> 24 == 0 ? i4 << 16 : i4;
     }
    } while (0);
    L61 : do if ((i1 | 0) > 0) {
     switch (i8 | 0) {
     case 23:
     case 0:
     case 24:
     case 22:
      break L61;
     default:
      {}
     }
     i1 = 0;
    } while (0);
    i18 = (i8 | 0) == 0;
    i3 = (i8 | 0) == 20 | (i18 | i7 << 24 >> 24 == 0) ? i7 : 0;
    if (!i18) {
     i18 = i3;
     i3 = i8;
     i12 = i1;
     break;
    }
    if ((i17 - (i15 + 112) | 0) > 1020) {
     i1 = 160;
     i21 = 256;
     break L11;
    }
    HEAP32[i17 >> 2] = i4;
    HEAP32[i15 + 1136 >> 2] = i17 + 4;
    if (i9 >>> 0 >= i2 >>> 0) {
     i1 = 0;
     i21 = 256;
     break L11;
    }
   }
   if ((i3 | 0) != 21) break;
   if ((i17 - (i15 + 112) | 0) < 8) {
    i1 = 161;
    i21 = 256;
    break L11;
   }
   i11 = HEAP32[i17 + -4 >> 2] >> 16;
   i5 = HEAP32[i17 + -8 >> 2] >> 16;
   if ((i5 | 0) > (i17 + -8 - (i15 + 112) >> 2 | 0)) {
    i1 = 161;
    i21 = 256;
    break L11;
   }
   i12 = i17 + (-2 - i5 << 2) | 0;
   do switch (i11 | 0) {
   case 0:
    {
     if ((i5 | 0) != 3) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     if (!(HEAP32[i15 + 1400 >> 2] | 0)) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     if ((HEAP32[i15 + 1404 >> 2] | 0) != 7) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i12 >> 2] = i13;
     HEAP32[i17 + (-2 - i5 + 1 << 2) >> 2] = i14;
     i3 = 2;
     i1 = i12;
     i4 = 0;
     break;
    }
   case 1:
    {
     if (i5) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i15 + 1400 >> 2] = 1;
     HEAP32[i15 + 1404 >> 2] = 0;
     i1 = _t1_builder_start_point(i33, i13, i14) | 0;
     if (i1) {
      i21 = 256;
      break L11;
     }
     i1 = HEAP32[i33 + 12 >> 2] | 0;
     if (((HEAP16[i1 + 22 >> 1] | 0) + 6 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i22 = _FT_GlyphLoader_CheckPoints(i1, 6, 0) | 0, (i22 | 0) != 0) : 0) {
      i1 = i22;
      i21 = 256;
      break L11;
     } else {
      i3 = 0;
      i1 = i12;
      i4 = 0;
     }
     break;
    }
   case 2:
    {
     if (i5) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     if (!(HEAP32[i15 + 1400 >> 2] | 0)) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     i3 = HEAP32[i15 + 1404 >> 2] | 0;
     HEAP32[i15 + 1404 >> 2] = i3 + 1;
     if ((i3 + -1 | 0) >>> 0 < 6) {
      i1 = HEAP32[i33 + 20 >> 2] | 0;
      if (!(HEAP8[i33 + 68 >> 0] | 0)) i1 = i1 + 2 | 0; else {
       i15 = HEAP32[i1 + 4 >> 2] | 0;
       i16 = HEAP16[i1 + 2 >> 1] | 0;
       i17 = (HEAP32[i1 + 8 >> 2] | 0) + i16 | 0;
       HEAP32[i15 + (i16 << 3) >> 2] = (_FT_RoundFix(i13) | 0) >> 16;
       HEAP32[i15 + (i16 << 3) + 4 >> 2] = (_FT_RoundFix(i14) | 0) >> 16;
       HEAP8[i17 >> 0] = (i3 | 0) == 3 | (i3 | 0) == 6 ? 1 : 2;
       i1 = i1 + 2 | 0;
      }
      HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
      i3 = 0;
      i1 = i12;
      i4 = 0;
     } else {
      i3 = 0;
      i1 = i12;
      i4 = 0;
     }
     break;
    }
   case 3:
    {
     if ((i5 | 0) != 1) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     if (i32) {
      FUNCTION_TABLE_vii[HEAP32[i32 + 20 >> 2] & 31](HEAP32[i32 >> 2] | 0, HEAP16[(HEAP32[i33 + 20 >> 2] | 0) + 2 >> 1] | 0);
      i3 = 1;
      i1 = i12;
      i4 = 0;
     } else {
      i3 = 1;
      i1 = i12;
      i4 = 0;
     }
     break;
    }
   case 13:
   case 12:
    {
     i3 = 0;
     i1 = i15 + 112 | 0;
     i4 = 0;
     break;
    }
   case 18:
   case 17:
   case 16:
   case 15:
   case 14:
    {
     i10 = HEAP32[i15 + 1464 >> 2] | 0;
     if (!i10) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i5 | 0) != (Math_imul(i1, i11 + -13 + ((i11 | 0) == 18 & 1) | 0) | 0)) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     if (!(i11 + -13 + ((i11 | 0) == 18 & 1) | 0)) {
      i3 = 0;
      i1 = i12;
      i4 = 0;
     } else {
      i4 = i17 + (i11 + -13 + ((i11 | 0) == 18 & 1) + (-2 - i5) << 2) | 0;
      i7 = 0;
      i8 = i12;
      while (1) {
       i3 = HEAP32[i8 >> 2] | 0;
       if (i1 >>> 0 > 1) {
        i6 = 1;
        while (1) {
         i5 = i4 + 4 | 0;
         i3 = (_FT_MulFix(HEAP32[i4 >> 2] | 0, HEAP32[(HEAP32[i10 + 136 >> 2] | 0) + (i6 << 2) >> 2] | 0) | 0) + i3 | 0;
         i6 = i6 + 1 | 0;
         i1 = HEAP32[i10 >> 2] | 0;
         if (i6 >>> 0 >= i1 >>> 0) {
          i4 = i5;
          break;
         } else i4 = i5;
        }
       }
       HEAP32[i8 >> 2] = i3;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) == (i11 + -13 + ((i11 | 0) == 18 & 1) | 0)) {
        i3 = i11 + -13 + ((i11 | 0) == 18 & 1) | 0;
        i1 = i12;
        i4 = 0;
        break;
       } else i8 = i8 + 4 | 0;
      }
     }
     break;
    }
   case 19:
    {
     i4 = HEAP32[i15 + 1464 >> 2] | 0;
     if ((i5 | 0) != 1 | (i4 | 0) == 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     i1 = HEAP32[i12 >> 2] >> 16;
     if ((i1 | 0) < 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     i3 = HEAP32[i4 >> 2] | 0;
     if ((i3 + i1 | 0) >>> 0 > (HEAP32[i15 + 1492 >> 2] | 0) >>> 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     _memcpy((HEAP32[i15 + 1488 >> 2] | 0) + (i1 << 2) | 0, HEAP32[i4 + 136 >> 2] | 0, i3 << 2 | 0) | 0;
     i3 = 0;
     i1 = i12;
     i4 = 0;
     break;
    }
   case 20:
    {
     if ((i5 | 0) != 2) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i17 + (-2 - i5 + 1 << 2) >> 2] | 0);
     i3 = 1;
     i1 = i12;
     i4 = 0;
     break;
    }
   case 21:
    {
     if ((i5 | 0) != 2) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) - (HEAP32[i17 + (-2 - i5 + 1 << 2) >> 2] | 0);
     i3 = 1;
     i1 = i12;
     i4 = 0;
     break;
    }
   case 22:
    {
     if ((i5 | 0) != 2) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i12 >> 2] = _FT_MulFix(HEAP32[i12 >> 2] | 0, HEAP32[i17 + (-2 - i5 + 1 << 2) >> 2] | 0) | 0;
     i3 = 1;
     i1 = i12;
     i4 = 0;
     break;
    }
   case 23:
    {
     if ((i5 | 0) != 2) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     i1 = HEAP32[i17 + (-2 - i5 + 1 << 2) >> 2] | 0;
     if (!i1) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i12 >> 2] = _FT_DivFix(HEAP32[i12 >> 2] | 0, i1) | 0;
     i3 = 1;
     i1 = i12;
     i4 = 0;
     break;
    }
   case 24:
    {
     if ((i5 | 0) != 2 | (HEAP32[i15 + 1464 >> 2] | 0) == 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     i1 = HEAP32[i17 + (-2 - i5 + 1 << 2) >> 2] >> 16;
     if ((i1 | 0) < 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     if (i1 >>> 0 >= (HEAP32[i15 + 1492 >> 2] | 0) >>> 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[(HEAP32[i15 + 1488 >> 2] | 0) + (i1 << 2) >> 2] = HEAP32[i12 >> 2];
     i3 = 0;
     i1 = i12;
     i4 = 0;
     break;
    }
   case 25:
    {
     if ((i5 | 0) != 1 | (HEAP32[i15 + 1464 >> 2] | 0) == 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     i1 = HEAP32[i12 >> 2] >> 16;
     if ((i1 | 0) < 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     if (i1 >>> 0 >= (HEAP32[i15 + 1492 >> 2] | 0) >>> 0) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i12 >> 2] = HEAP32[(HEAP32[i15 + 1488 >> 2] | 0) + (i1 << 2) >> 2];
     i3 = 1;
     i1 = i12;
     i4 = 0;
     break;
    }
   case 27:
    {
     if ((i5 | 0) != 4) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     if ((HEAP32[i17 + (-2 - i5 + 2 << 2) >> 2] | 0) > (HEAP32[i17 + (-2 - i5 + 3 << 2) >> 2] | 0)) {
      HEAP32[i12 >> 2] = HEAP32[i17 + (-2 - i5 + 1 << 2) >> 2];
      i3 = 1;
      i1 = i12;
      i4 = 0;
     } else {
      i3 = 1;
      i1 = i12;
      i4 = 0;
     }
     break;
    }
   case 28:
    {
     if (i5) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     i3 = HEAP32[i38 >> 2] | 0;
     HEAP32[i12 >> 2] = ((i3 | 0) > 32767 & 1) + i3;
     i3 = HEAP32[i38 >> 2] | 0;
     i3 = _FT_MulFix(i3, 65536 - i3 | 0) | 0;
     HEAP32[i38 >> 2] = (i3 | 0) == 0 ? i3 + 10355 | 0 : i3;
     i3 = 1;
     i1 = i12;
     i4 = 0;
     break;
    }
   default:
    if ((i5 | i11 | 0) > -1) {
     i3 = 0;
     i1 = i12;
     i4 = i5;
    } else {
     i1 = 160;
     i21 = 256;
     break L11;
    }
   } while (0);
   HEAP32[(HEAP32[i38 + 8 >> 2] | 0) + 1136 >> 2] = i1 + (i3 << 2);
   if (i9 >>> 0 < i2 >>> 0) {
    i10 = i3;
    i3 = i18;
    i1 = i4;
   } else {
    i1 = 0;
    i21 = 256;
    break L11;
   }
  }
  i16 = HEAP32[281076 + (i3 << 2) >> 2] | 0;
  if ((i17 - (i15 + 112) >> 2 | 0) < (i16 | 0)) {
   i1 = 161;
   i21 = 256;
   break;
  }
  L131 : do switch (i3 | 0) {
  case 1:
   {
    i21 = 114;
    break L11;
   }
  case 3:
   {
    i21 = 131;
    break L11;
   }
  case 2:
   {
    HEAP32[i33 + 64 >> 2] = 1;
    HEAP32[i33 + 32 >> 2] = (HEAP32[i33 + 32 >> 2] | 0) + (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0);
    HEAP32[i33 + 40 >> 2] = HEAP32[i17 + (1 - i16 << 2) >> 2];
    HEAP32[i33 + 44 >> 2] = 0;
    i1 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + (HEAP32[i33 + 24 >> 2] | 0) | 0;
    if (!(HEAP8[i33 + 70 >> 0] | 0)) {
     i5 = i10;
     i6 = i18;
     i11 = i1;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i1;
     i3 = HEAP32[i33 + 28 >> 2] | 0;
     i1 = i19;
    } else {
     i1 = 0;
     i21 = 256;
     break L11;
    }
    break;
   }
  case 4:
   {
    HEAP32[i33 + 64 >> 2] = 1;
    HEAP32[i33 + 32 >> 2] = (HEAP32[i33 + 32 >> 2] | 0) + (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0);
    HEAP32[i33 + 36 >> 2] = (HEAP32[i33 + 36 >> 2] | 0) + (HEAP32[i17 + (1 - i16 << 2) >> 2] | 0);
    HEAP32[i33 + 40 >> 2] = HEAP32[i17 + (2 - i16 << 2) >> 2];
    HEAP32[i33 + 44 >> 2] = HEAP32[i17 + (3 - i16 << 2) >> 2];
    if (!(HEAP8[i33 + 70 >> 0] | 0)) {
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + (HEAP32[i33 + 24 >> 2] | 0) | 0;
     i3 = (HEAP32[i17 + (1 - i16 << 2) >> 2] | 0) + (HEAP32[i33 + 28 >> 2] | 0) | 0;
     i1 = i19;
    } else {
     i1 = 0;
     i21 = 256;
     break L11;
    }
    break;
   }
  case 5:
   {
    do if ((HEAP32[i33 + 64 >> 2] & -2 | 0) == 2 ? (i23 = HEAP32[i33 + 20 >> 2] | 0, (i23 | 0) != 0) : 0) {
     i4 = HEAP16[i23 >> 1] | 0;
     if (i4 << 16 >> 16 < 2) i5 = 0; else i5 = (HEAP16[(HEAP32[i23 + 12 >> 2] | 0) + ((i4 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
     i1 = HEAP16[i23 + 2 >> 1] | 0;
     if (((i1 << 16 >> 16 > 1 ? (i24 = HEAP32[i23 + 4 >> 2] | 0, i25 = (HEAP32[i23 + 8 >> 2] | 0) + ((i1 << 16 >> 16) + -1) | 0, (HEAP32[i24 + (i5 << 3) >> 2] | 0) == (HEAP32[i24 + ((i1 << 16 >> 16) + -1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i24 + (i5 << 3) + 4 >> 2] | 0) == (HEAP32[i24 + ((i1 << 16 >> 16) + -1 << 3) + 4 >> 2] | 0) : 0) ? (HEAP8[i25 >> 0] | 0) == 1 : 0) {
      HEAP16[i23 + 2 >> 1] = i1 + -1 << 16 >> 16;
      i1 = i1 + -1 << 16 >> 16;
     }
     if (i4 << 16 >> 16 > 0) {
      i3 = (i1 << 16 >> 16) + -1 | 0;
      if ((i5 | 0) == (i3 | 0)) {
       HEAP16[i23 >> 1] = i4 + -1 << 16 >> 16;
       HEAP16[i23 + 2 >> 1] = i1 + -1 << 16 >> 16;
       break;
      } else {
       HEAP16[(HEAP32[i23 + 12 >> 2] | 0) + ((i4 << 16 >> 16) + -1 << 1) >> 1] = i3;
       break;
      }
     }
    } while (0);
    HEAP32[i33 + 64 >> 2] = 1;
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (0 - i16 << 2) | 0;
    i4 = i12;
    i7 = i13;
    i3 = i14;
    i1 = i19;
    break;
   }
  case 6:
   {
    i1 = _t1_builder_start_point(i33, i13, i14) | 0;
    if (i1) {
     i21 = 256;
     break L11;
    }
    i7 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i13 | 0;
    i3 = i14;
    i21 = 191;
    break;
   }
  case 7:
   {
    i1 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i13 | 0;
    if (!(HEAP32[i15 + 1400 >> 2] | 0)) {
     if (!(HEAP32[i33 + 64 >> 2] | 0)) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i33 + 64 >> 2] = 2;
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i1;
     i3 = i14;
     i1 = i19;
    } else {
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i1;
     i3 = i14;
     i1 = i19;
    }
    break;
   }
  case 8:
   {
    i1 = _t1_builder_start_point(i33, i13, i14) | 0;
    if (i1) {
     i21 = 256;
     break L11;
    }
    i1 = HEAP32[i33 + 12 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 3 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i26 = _FT_GlyphLoader_CheckPoints(i1, 3, 0) | 0, (i26 | 0) != 0) : 0) {
     i1 = i26;
     i21 = 256;
     break L11;
    }
    i4 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i13 | 0;
    i1 = HEAP32[i33 + 20 >> 2] | 0;
    if (!(HEAP8[i33 + 68 >> 0] | 0)) {
     i3 = i1 + 2 | 0;
     i5 = 0;
    } else {
     i15 = HEAP32[i1 + 4 >> 2] | 0;
     i5 = HEAP16[i1 + 2 >> 1] | 0;
     i3 = (HEAP32[i1 + 8 >> 2] | 0) + i5 | 0;
     HEAP32[i15 + (i5 << 3) >> 2] = (_FT_RoundFix(i4) | 0) >> 16;
     HEAP32[i15 + (i5 << 3) + 4 >> 2] = (_FT_RoundFix(i14) | 0) >> 16;
     HEAP8[i3 >> 0] = 2;
     i3 = i1 + 2 | 0;
     i5 = HEAP8[i33 + 68 >> 0] | 0;
     i1 = HEAP32[i33 + 20 >> 2] | 0;
    }
    HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
    i7 = (HEAP32[i17 + (1 - i16 << 2) >> 2] | 0) + i4 | 0;
    i4 = (HEAP32[i17 + (2 - i16 << 2) >> 2] | 0) + i14 | 0;
    if (!(i5 << 24 >> 24)) {
     i3 = i1 + 2 | 0;
     i5 = 0;
    } else {
     i14 = HEAP32[i1 + 4 >> 2] | 0;
     i3 = i1 + 2 | 0;
     i15 = HEAP16[i3 >> 1] | 0;
     i5 = (HEAP32[i1 + 8 >> 2] | 0) + i15 | 0;
     HEAP32[i14 + (i15 << 3) >> 2] = (_FT_RoundFix(i7) | 0) >> 16;
     HEAP32[i14 + (i15 << 3) + 4 >> 2] = (_FT_RoundFix(i4) | 0) >> 16;
     HEAP8[i5 >> 0] = 2;
     i5 = HEAP8[i33 + 68 >> 0] | 0;
     i1 = HEAP32[i33 + 20 >> 2] | 0;
    }
    HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
    i3 = (HEAP32[i17 + (3 - i16 << 2) >> 2] | 0) + i4 | 0;
    if (!(i5 << 24 >> 24)) i1 = i1 + 2 | 0; else {
     i13 = HEAP32[i1 + 4 >> 2] | 0;
     i15 = i1 + 2 | 0;
     i14 = HEAP16[i15 >> 1] | 0;
     i1 = (HEAP32[i1 + 8 >> 2] | 0) + i14 | 0;
     HEAP32[i13 + (i14 << 3) >> 2] = (_FT_RoundFix(i7) | 0) >> 16;
     HEAP32[i13 + (i14 << 3) + 4 >> 2] = (_FT_RoundFix(i3) | 0) >> 16;
     HEAP8[i1 >> 0] = 1;
     i1 = i15;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (0 - i16 << 2) | 0;
    i4 = i12;
    i1 = i19;
    break;
   }
  case 9:
   {
    i1 = _t1_builder_start_point(i33, i13, i14) | 0;
    if (i1) {
     i21 = 256;
     break L11;
    }
    i7 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i13 | 0;
    i3 = (HEAP32[i17 + (1 - i16 << 2) >> 2] | 0) + i14 | 0;
    i21 = 191;
    break;
   }
  case 10:
   {
    i1 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i13 | 0;
    i3 = (HEAP32[i17 + (1 - i16 << 2) >> 2] | 0) + i14 | 0;
    if (!(HEAP32[i15 + 1400 >> 2] | 0)) {
     if (!(HEAP32[i33 + 64 >> 2] | 0)) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i33 + 64 >> 2] = 2;
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i1;
     i1 = i19;
    } else {
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i1;
     i1 = i19;
    }
    break;
   }
  case 11:
   {
    i1 = _t1_builder_start_point(i33, i13, i14) | 0;
    if (i1) {
     i21 = 256;
     break L11;
    }
    i1 = HEAP32[i33 + 12 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 3 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i28 = _FT_GlyphLoader_CheckPoints(i1, 3, 0) | 0, (i28 | 0) != 0) : 0) {
     i1 = i28;
     i21 = 256;
     break L11;
    }
    i4 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i13 | 0;
    i5 = (HEAP32[i17 + (1 - i16 << 2) >> 2] | 0) + i14 | 0;
    i1 = HEAP32[i33 + 20 >> 2] | 0;
    if (!(HEAP8[i33 + 68 >> 0] | 0)) {
     i3 = i1 + 2 | 0;
     i6 = 0;
    } else {
     i15 = HEAP32[i1 + 4 >> 2] | 0;
     i6 = HEAP16[i1 + 2 >> 1] | 0;
     i3 = (HEAP32[i1 + 8 >> 2] | 0) + i6 | 0;
     HEAP32[i15 + (i6 << 3) >> 2] = (_FT_RoundFix(i4) | 0) >> 16;
     HEAP32[i15 + (i6 << 3) + 4 >> 2] = (_FT_RoundFix(i5) | 0) >> 16;
     HEAP8[i3 >> 0] = 2;
     i3 = i1 + 2 | 0;
     i6 = HEAP8[i33 + 68 >> 0] | 0;
     i1 = HEAP32[i33 + 20 >> 2] | 0;
    }
    HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
    i4 = (HEAP32[i17 + (2 - i16 << 2) >> 2] | 0) + i4 | 0;
    i5 = (HEAP32[i17 + (3 - i16 << 2) >> 2] | 0) + i5 | 0;
    if (!(i6 << 24 >> 24)) {
     i3 = i1 + 2 | 0;
     i6 = 0;
    } else {
     i14 = HEAP32[i1 + 4 >> 2] | 0;
     i3 = i1 + 2 | 0;
     i15 = HEAP16[i3 >> 1] | 0;
     i6 = (HEAP32[i1 + 8 >> 2] | 0) + i15 | 0;
     HEAP32[i14 + (i15 << 3) >> 2] = (_FT_RoundFix(i4) | 0) >> 16;
     HEAP32[i14 + (i15 << 3) + 4 >> 2] = (_FT_RoundFix(i5) | 0) >> 16;
     HEAP8[i6 >> 0] = 2;
     i6 = HEAP8[i33 + 68 >> 0] | 0;
     i1 = HEAP32[i33 + 20 >> 2] | 0;
    }
    HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
    i7 = (HEAP32[i17 + (4 - i16 << 2) >> 2] | 0) + i4 | 0;
    i3 = (HEAP32[i17 + (5 - i16 << 2) >> 2] | 0) + i5 | 0;
    if (!(i6 << 24 >> 24)) i1 = i1 + 2 | 0; else {
     i13 = HEAP32[i1 + 4 >> 2] | 0;
     i15 = i1 + 2 | 0;
     i14 = HEAP16[i15 >> 1] | 0;
     i1 = (HEAP32[i1 + 8 >> 2] | 0) + i14 | 0;
     HEAP32[i13 + (i14 << 3) >> 2] = (_FT_RoundFix(i7) | 0) >> 16;
     HEAP32[i13 + (i14 << 3) + 4 >> 2] = (_FT_RoundFix(i3) | 0) >> 16;
     HEAP8[i1 >> 0] = 1;
     i1 = i15;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (0 - i16 << 2) | 0;
    i4 = i12;
    i1 = i19;
    break;
   }
  case 12:
   {
    i1 = _t1_builder_start_point(i33, i13, i14) | 0;
    if (i1) {
     i21 = 256;
     break L11;
    }
    i1 = HEAP32[i33 + 12 >> 2] | 0;
    if (((HEAP16[i1 + 22 >> 1] | 0) + 3 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i29 = _FT_GlyphLoader_CheckPoints(i1, 3, 0) | 0, (i29 | 0) != 0) : 0) {
     i1 = i29;
     i21 = 256;
     break L11;
    }
    i4 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i14 | 0;
    i1 = HEAP32[i33 + 20 >> 2] | 0;
    if (!(HEAP8[i33 + 68 >> 0] | 0)) {
     i3 = i1 + 2 | 0;
     i6 = 0;
    } else {
     i15 = HEAP32[i1 + 4 >> 2] | 0;
     i6 = HEAP16[i1 + 2 >> 1] | 0;
     i3 = (HEAP32[i1 + 8 >> 2] | 0) + i6 | 0;
     HEAP32[i15 + (i6 << 3) >> 2] = (_FT_RoundFix(i13) | 0) >> 16;
     HEAP32[i15 + (i6 << 3) + 4 >> 2] = (_FT_RoundFix(i4) | 0) >> 16;
     HEAP8[i3 >> 0] = 2;
     i3 = i1 + 2 | 0;
     i6 = HEAP8[i33 + 68 >> 0] | 0;
     i1 = HEAP32[i33 + 20 >> 2] | 0;
    }
    HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
    i5 = (HEAP32[i17 + (1 - i16 << 2) >> 2] | 0) + i13 | 0;
    i8 = (HEAP32[i17 + (2 - i16 << 2) >> 2] | 0) + i4 | 0;
    if (!(i6 << 24 >> 24)) {
     i3 = i1 + 2 | 0;
     i4 = 0;
    } else {
     i14 = HEAP32[i1 + 4 >> 2] | 0;
     i3 = i1 + 2 | 0;
     i15 = HEAP16[i3 >> 1] | 0;
     i4 = (HEAP32[i1 + 8 >> 2] | 0) + i15 | 0;
     HEAP32[i14 + (i15 << 3) >> 2] = (_FT_RoundFix(i5) | 0) >> 16;
     HEAP32[i14 + (i15 << 3) + 4 >> 2] = (_FT_RoundFix(i8) | 0) >> 16;
     HEAP8[i4 >> 0] = 2;
     i4 = HEAP8[i33 + 68 >> 0] | 0;
     i1 = HEAP32[i33 + 20 >> 2] | 0;
    }
    HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
    i3 = (HEAP32[i17 + (3 - i16 << 2) >> 2] | 0) + i5 | 0;
    if (!(i4 << 24 >> 24)) i1 = i1 + 2 | 0; else {
     i13 = HEAP32[i1 + 4 >> 2] | 0;
     i15 = i1 + 2 | 0;
     i14 = HEAP16[i15 >> 1] | 0;
     i1 = (HEAP32[i1 + 8 >> 2] | 0) + i14 | 0;
     HEAP32[i13 + (i14 << 3) >> 2] = (_FT_RoundFix(i3) | 0) >> 16;
     HEAP32[i13 + (i14 << 3) + 4 >> 2] = (_FT_RoundFix(i8) | 0) >> 16;
     HEAP8[i1 >> 0] = 1;
     i1 = i15;
    }
    HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (0 - i16 << 2) | 0;
    i4 = i12;
    i7 = i3;
    i3 = i8;
    i1 = i19;
    break;
   }
  case 13:
   {
    i1 = _t1_builder_start_point(i33, i13, i14) | 0;
    if (i1) {
     i21 = 256;
     break L11;
    }
    i7 = i13;
    i3 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i14 | 0;
    i21 = 191;
    break;
   }
  case 14:
   {
    i3 = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i14 | 0;
    if (!(HEAP32[i15 + 1400 >> 2] | 0)) {
     if (!(HEAP32[i33 + 64 >> 2] | 0)) {
      i1 = 160;
      i21 = 256;
      break L11;
     }
     HEAP32[i33 + 64 >> 2] = 2;
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i1 = i19;
    } else {
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i1 = i19;
    }
    break;
   }
  case 20:
   {
    HEAP32[i17 + (0 - i16 << 2) >> 2] = _FT_DivFix(HEAP32[i17 + (0 - i16 << 2) >> 2] | 0, HEAP32[i17 + (1 - i16 << 2) >> 2] | 0) | 0;
    i5 = i10;
    i6 = 0;
    i11 = i20;
    i10 = i17 + (1 - i16 << 2) | 0;
    i4 = i12;
    i7 = i13;
    i3 = i14;
    i1 = i19;
    break;
   }
  case 22:
   {
    i4 = HEAP32[i17 + (0 - i16 << 2) >> 2] >> 16;
    if ((i4 | 0) < 0) {
     i1 = 160;
     i21 = 256;
     break L11;
    }
    if ((i4 | 0) >= (HEAP32[i15 + 1364 >> 2] | 0)) {
     i1 = 160;
     i21 = 256;
     break L11;
    }
    if ((i19 - (i15 + 1140) | 0) > 180) {
     i1 = 160;
     i21 = 256;
     break L11;
    }
    HEAP32[i19 >> 2] = i9;
    i8 = i19 + 12 | 0;
    i9 = HEAP32[(HEAP32[(HEAP32[i38 + 8 >> 2] | 0) + 1368 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i1 = i19 + 16 | 0;
    HEAP32[i1 >> 2] = i9;
    i2 = HEAP32[i38 + 8 >> 2] | 0;
    i3 = HEAP32[i2 + 1372 >> 2] | 0;
    if (!i3) {
     i2 = HEAP32[i2 + 1360 >> 2] | 0;
     i9 = i9 + ((i2 | 0) < 0 ? 0 : i2) | 0;
     HEAP32[i1 >> 2] = i9;
     i2 = HEAP32[(HEAP32[(HEAP32[i38 + 8 >> 2] | 0) + 1368 >> 2] | 0) + (i4 + 1 << 2) >> 2] | 0;
     HEAP32[i19 + 20 >> 2] = i2;
    } else {
     i2 = i9 + (HEAP32[i3 + (i4 << 2) >> 2] | 0) | 0;
     HEAP32[i19 + 20 >> 2] = i2;
    }
    HEAP32[i8 >> 2] = i9;
    if (!i9) {
     i1 = 160;
     i21 = 256;
     break L11;
    }
    HEAP32[(HEAP32[i38 + 8 >> 2] | 0) + 1344 >> 2] = i8;
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (0 - i16 << 2) | 0;
    i4 = i12;
    i7 = i13;
    i3 = i14;
    i1 = i8;
    break;
   }
  case 23:
   {
    if ((i10 | 0) > 0) {
     i5 = i10 + -1 | 0;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
     break L131;
    }
    if (!i12) {
     i1 = 160;
     i21 = 256;
     break L11;
    }
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (1 - i16 << 2) | 0;
    i4 = i12 + -1 | 0;
    i7 = i13;
    i3 = i14;
    i1 = i19;
    break;
   }
  case 24:
   {
    if (i19 >>> 0 <= (i15 + 1140 | 0) >>> 0) {
     i1 = 160;
     i21 = 256;
     break L11;
    }
    i1 = i19 + -12 | 0;
    i9 = HEAP32[i1 >> 2] | 0;
    i2 = HEAP32[i19 + -4 >> 2] | 0;
    HEAP32[i15 + 1344 >> 2] = i1;
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (0 - i16 << 2) | 0;
    i4 = i12;
    i7 = i13;
    i3 = i14;
    break;
   }
  case 26:
  case 15:
   {
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (0 - i16 << 2) | 0;
    i4 = i12;
    i7 = i13;
    i3 = i14;
    i1 = i19;
    break;
   }
  case 16:
   {
    if (i32) {
     FUNCTION_TABLE_viii[HEAP32[i32 + 12 >> 2] & 31](HEAP32[i32 >> 2] | 0, 1, i17 + (0 - i16 << 2) | 0);
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
    } else {
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
    }
    break;
   }
  case 17:
   {
    if (i32) {
     FUNCTION_TABLE_viii[HEAP32[i32 + 16 >> 2] & 31](HEAP32[i32 >> 2] | 0, 1, i17 + (0 - i16 << 2) | 0);
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
    } else {
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
    }
    break;
   }
  case 18:
   {
    if (i32) {
     HEAP32[i17 + (0 - i16 << 2) >> 2] = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i20;
     FUNCTION_TABLE_viii[HEAP32[i32 + 12 >> 2] & 31](HEAP32[i32 >> 2] | 0, 0, i17 + (0 - i16 << 2) | 0);
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
    } else {
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
    }
    break;
   }
  case 19:
   {
    if (i32) {
     HEAP32[i17 + (0 - i16 << 2) >> 2] = (HEAP32[i17 + (0 - i16 << 2) >> 2] | 0) + i20;
     HEAP32[i17 + (2 - i16 << 2) >> 2] = (HEAP32[i17 + (2 - i16 << 2) >> 2] | 0) + i20;
     HEAP32[i17 + (4 - i16 << 2) >> 2] = (HEAP32[i17 + (4 - i16 << 2) >> 2] | 0) + i20;
     FUNCTION_TABLE_viii[HEAP32[i32 + 16 >> 2] & 31](HEAP32[i32 >> 2] | 0, 0, i17 + (0 - i16 << 2) | 0);
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
    } else {
     i5 = i10;
     i6 = i18;
     i11 = i20;
     i10 = i17 + (0 - i16 << 2) | 0;
     i4 = i12;
     i7 = i13;
     i3 = i14;
     i1 = i19;
    }
    break;
   }
  case 25:
   {
    i7 = HEAP32[i17 + (0 - i16 << 2) >> 2] | 0;
    i3 = HEAP32[i17 + (1 - i16 << 2) >> 2] | 0;
    HEAP32[i15 + 1400 >> 2] = 0;
    i5 = i10;
    i6 = i18;
    i11 = i20;
    i10 = i17 + (0 - i16 << 2) | 0;
    i4 = i12;
    i1 = i19;
    break;
   }
  default:
   {
    i1 = 160;
    i21 = 256;
    break L11;
   }
  } while (0);
  if ((i21 | 0) == 191) {
   i21 = 0;
   i1 = HEAP32[i33 + 12 >> 2] | 0;
   if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i27 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0, (i27 | 0) != 0) : 0) {
    i1 = i27;
    i21 = 256;
    break;
   }
   i1 = HEAP32[i33 + 20 >> 2] | 0;
   if (!(HEAP8[i33 + 68 >> 0] | 0)) i1 = i1 + 2 | 0; else {
    i13 = HEAP32[i1 + 4 >> 2] | 0;
    i14 = HEAP16[i1 + 2 >> 1] | 0;
    i15 = (HEAP32[i1 + 8 >> 2] | 0) + i14 | 0;
    HEAP32[i13 + (i14 << 3) >> 2] = (_FT_RoundFix(i7) | 0) >> 16;
    HEAP32[i13 + (i14 << 3) + 4 >> 2] = (_FT_RoundFix(i3) | 0) >> 16;
    HEAP8[i15 >> 0] = 1;
    i1 = i1 + 2 | 0;
   }
   HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
   i5 = i10;
   i6 = i18;
   i11 = i20;
   i10 = i17 + (0 - i16 << 2) | 0;
   i4 = i12;
   i1 = i19;
  }
  HEAP32[(HEAP32[i38 + 8 >> 2] | 0) + 1136 >> 2] = i10;
  if (i9 >>> 0 < i2 >>> 0) {
   i20 = i11;
   i13 = i7;
   i14 = i3;
   i19 = i1;
  } else {
   i1 = 0;
   i21 = 256;
   break;
  }
 }
 if ((i21 | 0) == 114) {
  i3 = HEAP32[i33 + 20 >> 2] | 0;
  do if (i3) {
   i4 = HEAP16[i3 >> 1] | 0;
   if (i4 << 16 >> 16 < 2) i5 = 0; else i5 = (HEAP16[(HEAP32[i3 + 12 >> 2] | 0) + ((i4 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
   i1 = HEAP16[i3 + 2 >> 1] | 0;
   if (((i1 << 16 >> 16 > 1 ? (i30 = HEAP32[i3 + 4 >> 2] | 0, i31 = (HEAP32[i3 + 8 >> 2] | 0) + ((i1 << 16 >> 16) + -1) | 0, (HEAP32[i30 + (i5 << 3) >> 2] | 0) == (HEAP32[i30 + ((i1 << 16 >> 16) + -1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i30 + (i5 << 3) + 4 >> 2] | 0) == (HEAP32[i30 + ((i1 << 16 >> 16) + -1 << 3) + 4 >> 2] | 0) : 0) ? (HEAP8[i31 >> 0] | 0) == 1 : 0) {
    HEAP16[i3 + 2 >> 1] = i1 + -1 << 16 >> 16;
    i1 = i1 + -1 << 16 >> 16;
   }
   if (i4 << 16 >> 16 > 0) {
    i2 = (i1 << 16 >> 16) + -1 | 0;
    if ((i5 | 0) == (i2 | 0)) {
     HEAP16[i3 >> 1] = i4 + -1 << 16 >> 16;
     HEAP16[i3 + 2 >> 1] = i1 + -1 << 16 >> 16;
     break;
    } else {
     HEAP16[(HEAP32[i3 + 12 >> 2] | 0) + ((i4 << 16 >> 16) + -1 << 1) >> 1] = i2;
     break;
    }
   }
  } while (0);
  do if (i32) if (!(FUNCTION_TABLE_iii[HEAP32[i32 + 8 >> 2] & 255](HEAP32[i32 >> 2] | 0, HEAP16[i3 + 2 >> 1] | 0) | 0)) {
   FUNCTION_TABLE_iiiii[HEAP32[i32 + 24 >> 2] & 63](HEAP32[i32 >> 2] | 0, HEAP32[i33 + 20 >> 2] | 0, HEAP32[i33 + 76 >> 2] | 0, HEAP32[(HEAP32[i38 + 8 >> 2] | 0) + 1468 >> 2] | 0) | 0;
   break;
  } else {
   i37 = 160;
   STACKTOP = i38;
   return i37 | 0;
  } while (0);
  _FT_GlyphLoader_Add(HEAP32[i33 + 12 >> 2] | 0);
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 } else if ((i21 | 0) == 131) {
  i13 = HEAP32[i17 + (0 - i16 << 2) >> 2] | 0;
  i14 = HEAP32[i17 + (2 - i16 << 2) >> 2] | 0;
  i4 = HEAP32[i17 + (3 - i16 << 2) >> 2] >> 16;
  i9 = HEAP32[i17 + (4 - i16 << 2) >> 2] >> 16;
  if (HEAP8[i15 + 1496 >> 0] | 0) {
   i37 = 160;
   STACKTOP = i38;
   return i37 | 0;
  }
  i12 = (HEAP32[i15 + 32 >> 2] | 0) + (HEAP32[i17 + (1 - i16 << 2) >> 2] | 0) | 0;
  i1 = (HEAP32[(HEAP32[(HEAP32[i15 + 4 >> 2] | 0) + 128 >> 2] | 0) + 52 >> 2] | 0) == 0;
  L284 : do if (!(HEAP32[i15 + 1356 >> 2] | 0)) if (i1) {
   i37 = 160;
   STACKTOP = i38;
   return i37 | 0;
  } else {
   i10 = i15;
   i11 = i9;
  } else if (i1) {
   i1 = HEAP32[i15 + 1348 >> 2] | 0;
   L289 : do if (i4 >>> 0 <= 255 ? (i34 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](HEAPU16[(HEAP32[i1 + 24 >> 2] | 0) + (i4 << 1) >> 1] | 0) | 0, i35 = HEAP32[i15 + 1352 >> 2] | 0, (i35 | 0) != 0) : 0) {
    i1 = HEAP32[i15 + 1356 >> 2] | 0;
    i4 = 0;
    while (1) {
     i2 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
     if (((i2 | 0) != 0 ? (HEAP8[i2 >> 0] | 0) == (HEAP8[i34 >> 0] | 0) : 0) ? (_strcmp(i2, i34) | 0) == 0 : 0) break L289;
     i4 = i4 + 1 | 0;
     if (i4 >>> 0 >= i35 >>> 0) {
      i4 = -1;
      break;
     }
    }
   } else i4 = -1; while (0);
   i1 = HEAP32[i15 + 1348 >> 2] | 0;
   if (i9 >>> 0 <= 255 ? (i36 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](HEAPU16[(HEAP32[i1 + 24 >> 2] | 0) + (i9 << 1) >> 1] | 0) | 0, i37 = HEAP32[i15 + 1352 >> 2] | 0, (i37 | 0) != 0) : 0) {
    i1 = HEAP32[i15 + 1356 >> 2] | 0;
    i3 = 0;
    while (1) {
     i2 = HEAP32[i1 + (i3 << 2) >> 2] | 0;
     if (((i2 | 0) != 0 ? (HEAP8[i2 >> 0] | 0) == (HEAP8[i36 >> 0] | 0) : 0) ? (_strcmp(i2, i36) | 0) == 0 : 0) {
      i10 = i15;
      i11 = i3;
      break L284;
     }
     i3 = i3 + 1 | 0;
     if (i3 >>> 0 >= i37 >>> 0) {
      i10 = i15;
      i11 = -1;
      break;
     }
    }
   } else {
    i10 = i15;
    i11 = -1;
   }
  } else {
   i10 = i15;
   i11 = i9;
  } while (0);
  if ((i4 | i11 | 0) < 0) {
   i37 = 160;
   STACKTOP = i38;
   return i37 | 0;
  }
  if (HEAP8[i10 + 69 >> 0] | 0) {
   i1 = HEAP32[i10 + 8 >> 2] | 0;
   i2 = HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0;
   i3 = _FT_GlyphLoader_CheckSubGlyphs(i2, 2) | 0;
   if (i3) {
    i37 = i3;
    STACKTOP = i38;
    return i37 | 0;
   }
   i37 = HEAP32[i2 + 88 >> 2] | 0;
   HEAP32[i37 >> 2] = i4;
   HEAP16[i37 + 4 >> 1] = 514;
   HEAP32[i37 + 8 >> 2] = 0;
   HEAP32[i37 + 12 >> 2] = 0;
   HEAP32[i37 + 32 >> 2] = i11;
   HEAP16[i37 + 36 >> 1] = 2;
   HEAP32[i37 + 40 >> 2] = (_FT_RoundFix(i12 - i13 | 0) | 0) >> 16;
   HEAP32[i37 + 44 >> 2] = (_FT_RoundFix(i14) | 0) >> 16;
   HEAP32[i1 + 128 >> 2] = 2;
   HEAP32[i1 + 132 >> 2] = HEAP32[i2 + 52 >> 2];
   HEAP32[i1 + 72 >> 2] = 1668246896;
   HEAP32[i2 + 84 >> 2] = 2;
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
  _FT_GlyphLoader_Prepare(HEAP32[i10 + 12 >> 2] | 0);
  HEAP8[i15 + 1496 >> 0] = 1;
  i9 = i10 + 1472 | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 255](i10, i4) | 0;
  HEAP8[i15 + 1496 >> 0] = 0;
  if (i1) {
   i37 = i1;
   STACKTOP = i38;
   return i37 | 0;
  }
  i3 = HEAP32[i15 + 32 >> 2] | 0;
  i4 = HEAP32[i15 + 32 + 4 >> 2] | 0;
  i5 = i10 + 40 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = HEAP32[i5 + 4 >> 2] | 0;
  HEAP32[i15 + 32 >> 2] = 0;
  HEAP32[i10 + 36 >> 2] = 0;
  i8 = i10 + 24 | 0;
  HEAP32[i8 >> 2] = i12 - i13;
  i2 = i10 + 28 | 0;
  HEAP32[i2 >> 2] = i14;
  HEAP8[i15 + 1496 >> 0] = 1;
  i1 = FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 255](i10, i11) | 0;
  HEAP8[i15 + 1496 >> 0] = 0;
  if (i1) {
   i37 = i1;
   STACKTOP = i38;
   return i37 | 0;
  }
  HEAP32[i15 + 32 >> 2] = i3;
  HEAP32[i15 + 32 + 4 >> 2] = i4;
  HEAP32[i5 >> 2] = i6;
  HEAP32[i5 + 4 >> 2] = i7;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 } else if ((i21 | 0) == 256) {
  STACKTOP = i38;
  return i1 | 0;
 }
 return 0;
}

function _cff_face_init(i12, i22, i17, i2, i3) {
 i12 = i12 | 0;
 i22 = i22 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i4 = HEAP32[(HEAP32[i22 + 96 >> 2] | 0) + 4 >> 2] | 0;
 i1 = _FT_Get_Module_Interface(i4, 325800) | 0;
 L1 : do if (i1) {
  i13 = _ft_module_get_service(HEAP32[i22 + 96 >> 2] | 0, 327387) | 0;
  i14 = _FT_Get_Module_Interface(i4, 325984) | 0;
  i21 = _FT_Stream_Seek(i12, 0) | 0;
  HEAP32[i23 + 80 >> 2] = i21;
  if (!i21) {
   i21 = FUNCTION_TABLE_iiiiii[HEAP32[i1 + 4 >> 2] & 63](i12, i22, i17, i2, i3) | 0;
   HEAP32[i23 + 80 >> 2] = i21;
   if (!i21) {
    if ((HEAP32[i22 + 148 >> 2] | 0) != 1330926671) {
     HEAP32[i23 + 80 >> 2] = 2;
     break;
    }
    if ((i17 | 0) < 0) {
     i22 = 0;
     STACKTOP = i23;
     return i22 | 0;
    }
    if ((i17 | 0) > 0) {
     HEAP32[i23 + 80 >> 2] = 6;
     break;
    }
    i21 = FUNCTION_TABLE_iiiii[HEAP32[i22 + 508 >> 2] & 63](i22, 1751474532, i12, 0) | 0;
    HEAP32[i23 + 80 >> 2] = i21;
    if (!i21) {
     i21 = FUNCTION_TABLE_iiiiii[HEAP32[i1 + 8 >> 2] & 63](i12, i22, 0, i2, i3) | 0;
     HEAP32[i23 + 80 >> 2] = i21;
     if (!i21) i1 = 0; else break;
    } else {
     i21 = FUNCTION_TABLE_iii[HEAP32[i1 + 40 >> 2] & 255](i22, i12) | 0;
     HEAP32[i23 + 80 >> 2] = i21;
     if (!i21) i1 = 1; else break;
    }
    i21 = FUNCTION_TABLE_iiiii[HEAP32[i22 + 508 >> 2] & 63](i22, 1128678944, i12, 0) | 0;
    HEAP32[i23 + 80 >> 2] = i21;
    if (!i21) {
     i15 = i1;
     i20 = 1;
    } else break;
   } else {
    i21 = _FT_Stream_Seek(i12, 0) | 0;
    HEAP32[i23 + 80 >> 2] = i21;
    if (i21) break;
    HEAP32[i23 + 80 >> 2] = 0;
    i15 = 1;
    i20 = 0;
   }
   i19 = HEAP32[i22 + 100 >> 2] | 0;
   i21 = _ft_mem_alloc(i19, 2972, i23 + 80 | 0) | 0;
   if (!(HEAP32[i23 + 80 >> 2] | 0)) {
    HEAP32[i22 + 692 >> 2] = i21;
    i2 = HEAP32[i12 + 28 >> 2] | 0;
    _memset(i21 | 0, 0, 2972) | 0;
    HEAP32[i23 + 32 >> 2] = 0;
    HEAP32[i23 + 32 + 4 >> 2] = 0;
    HEAP32[i23 + 32 + 8 >> 2] = 0;
    HEAP32[i23 + 32 + 12 >> 2] = 0;
    HEAP32[i23 + 32 + 16 >> 2] = 0;
    HEAP32[i23 + 32 + 20 >> 2] = 0;
    HEAP32[i23 + 32 + 24 >> 2] = 0;
    HEAP32[i23 + 32 + 28 >> 2] = 0;
    HEAP32[i21 >> 2] = i12;
    HEAP32[i21 + 4 >> 2] = i2;
    i10 = _FT_Stream_Pos(i12) | 0;
    i8 = _FT_Stream_ReadFields(i12, 283136, i21) | 0;
    HEAP32[i23 + 64 >> 2] = i8;
    L24 : do if (!i8) {
     if (((HEAP8[i21 + 16 >> 0] | 0) == 1 ? (i9 = HEAP8[i21 + 18 >> 0] | 0, (i9 & 255) >= 4) : 0) ? (HEAPU8[i21 + 19 >> 0] | 0) <= 4 : 0) {
      i8 = _FT_Stream_Skip(i12, (i9 & 255) + -4 | 0) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      i8 = _cff_index_init(i21 + 20 | 0, i12, 0) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      i8 = _cff_index_init(i21 + 1208 | 0, i12, 0) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      i8 = _cff_index_init(i23 + 32 | 0, i12, 1) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      i8 = _cff_index_init(i21 + 84 | 0, i12, 1) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      i8 = _cff_index_get_pointers(i23 + 32 | 0, i21 + 1316 | 0, i21 + 1320 | 0) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      HEAP32[i21 + 1312 >> 2] = HEAP32[i23 + 32 + 8 >> 2];
      i8 = HEAP32[i21 + 28 >> 2] | 0;
      HEAP32[i21 + 8 >> 2] = i8;
      if ((i8 | 0) <= (i17 | 0)) HEAP32[i23 + 64 >> 2] = 6;
      if ((i17 | 0) < 0) break;
      i8 = _cff_subfont_load(i21 + 1324 | 0, i21 + 1208 | 0, i17, i12, i10, i4) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      i8 = _FT_Stream_Seek(i12, (HEAP32[i21 + 1436 >> 2] | 0) + i10 | 0) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      i8 = _cff_index_init(i21 + 1176 | 0, i12, 0) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      if ((HEAP32[i21 + 1456 >> 2] | 0) != 65535) {
       i8 = _FT_Stream_Seek(i12, (HEAP32[i21 + 1488 >> 2] | 0) + i10 | 0) | 0;
       HEAP32[i23 + 64 >> 2] = i8;
       if (i8) break;
       i8 = _cff_index_init(i23, i12, 0) | 0;
       HEAP32[i23 + 64 >> 2] = i8;
       if (i8) break;
       i1 = HEAP32[i23 + 8 >> 2] | 0;
       L48 : do if (i1 >>> 0 > 256) i1 = 0; else {
        HEAP32[i21 + 1896 >> 2] = i1;
        i3 = _ft_mem_realloc(i2, 572, 0, i1, 0, i23 + 64 | 0) | 0;
        i1 = HEAP32[i23 + 64 >> 2] | 0;
        if (i1) break;
        i1 = HEAP32[i23 + 8 >> 2] | 0;
        if (i1) {
         i2 = 0;
         do {
          HEAP32[i21 + 1900 + (i2 << 2) >> 2] = i3 + (i2 * 572 | 0);
          i2 = i2 + 1 | 0;
         } while ((i2 | 0) != (i1 | 0));
         i2 = 0;
         do {
          i1 = _cff_subfont_load(HEAP32[i21 + 1900 + (i2 << 2) >> 2] | 0, i23, i2, i12, i10, i4) | 0;
          HEAP32[i23 + 64 >> 2] = i1;
          i2 = i2 + 1 | 0;
          if (i1) break L48;
         } while (i2 >>> 0 < (HEAP32[i23 + 8 >> 2] | 0) >>> 0);
        }
        i1 = HEAP32[i21 + 1184 >> 2] | 0;
        i2 = _FT_Stream_Seek(i12, (HEAP32[i21 + 1492 >> 2] | 0) + i10 | 0) | 0;
        HEAP32[i23 + 92 >> 2] = i2;
        L58 : do if (!i2) {
         i2 = _FT_Stream_ReadChar(i12, i23 + 92 | 0) | 0;
         i3 = HEAP32[i23 + 92 >> 2] | 0;
         if (i3) {
          i1 = i3;
          break;
         }
         HEAP8[i21 + 2924 >> 0] = i2;
         HEAP32[i21 + 2944 >> 2] = 0;
         switch (i2 & 255 | 0) {
         case 0:
          {
           HEAP32[i21 + 2936 >> 2] = i1;
           break;
          }
         case 3:
          {
           i2 = _FT_Stream_ReadUShort(i12, i23 + 92 | 0) | 0;
           i1 = HEAP32[i23 + 92 >> 2] | 0;
           if (i1) break L58;
           HEAP32[i21 + 2936 >> 2] = ((i2 & 65535) * 3 | 0) + 2;
           i1 = ((i2 & 65535) * 3 | 0) + 2 | 0;
           break;
          }
         default:
          {
           HEAP32[i23 + 92 >> 2] = 3;
           i1 = 3;
           break L58;
          }
         }
         i1 = _FT_Stream_ExtractFrame(i12, i1, i21 + 2932 | 0) | 0;
         HEAP32[i23 + 92 >> 2] = i1;
        } else i1 = i2; while (0);
        HEAP32[i23 + 64 >> 2] = i1;
       } while (0);
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2) {
        i1 = HEAP32[i2 + 28 >> 2] | 0;
        if (HEAP32[i23 + 28 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i23 + 28 | 0);
        _ft_mem_free(i1, HEAP32[i23 + 24 >> 2] | 0);
        HEAP32[i23 >> 2] = 0;
        HEAP32[i23 + 4 >> 2] = 0;
        HEAP32[i23 + 8 >> 2] = 0;
        HEAP32[i23 + 12 >> 2] = 0;
        HEAP32[i23 + 16 >> 2] = 0;
        HEAP32[i23 + 20 >> 2] = 0;
        HEAP32[i23 + 24 >> 2] = 0;
        HEAP32[i23 + 28 >> 2] = 0;
        i1 = HEAP32[i23 + 64 >> 2] | 0;
       }
       if (i1) break;
      } else HEAP32[i21 + 1896 >> 2] = 0;
      if (!(HEAP32[i21 + 1436 >> 2] | 0)) {
       HEAP32[i23 + 64 >> 2] = 3;
       break;
      }
      HEAP32[i21 + 12 >> 2] = HEAP32[i21 + 1184 >> 2];
      i8 = _cff_index_get_pointers(i21 + 84 | 0, i21 + 1308 | 0, 0) | 0;
      HEAP32[i23 + 64 >> 2] = i8;
      if (i8) break;
      i7 = HEAP32[i21 + 12 >> 2] | 0;
      L80 : do if (i7) {
       i6 = (HEAP32[i21 + 1456 >> 2] | 0) == 65535;
       i1 = HEAP32[i21 + 1428 >> 2] | 0;
       i8 = HEAP32[i12 + 28 >> 2] | 0;
       HEAP32[i23 + 88 >> 2] = 0;
       L82 : do if (i1 >>> 0 > 2) {
        HEAP32[i21 + 1156 >> 2] = i1 + i10;
        i18 = _FT_Stream_Seek(i12, i1 + i10 | 0) | 0;
        HEAP32[i23 + 88 >> 2] = i18;
        if (i18) {
         i11 = i21 + 1156 | 0;
         i18 = 110;
         break;
        }
        HEAP32[i21 + 1152 >> 2] = (_FT_Stream_ReadChar(i12, i23 + 88 | 0) | 0) & 255;
        if (HEAP32[i23 + 88 >> 2] | 0) {
         i11 = i21 + 1156 | 0;
         i18 = 110;
         break;
        }
        i1 = _ft_mem_realloc(i8, 2, 0, i7, 0, i23 + 88 | 0) | 0;
        HEAP32[i21 + 1160 >> 2] = i1;
        if (HEAP32[i23 + 88 >> 2] | 0) {
         i11 = i21 + 1156 | 0;
         i18 = 110;
         break;
        }
        HEAP16[i1 >> 1] = 0;
        switch (HEAP32[i21 + 1152 >> 2] | 0) {
        case 0:
         {
          i18 = _FT_Stream_EnterFrame(i12, (i7 << 1) + -2 | 0) | 0;
          HEAP32[i23 + 88 >> 2] = i18;
          if (i18) {
           i11 = i21 + 1156 | 0;
           i18 = 110;
           break L82;
          }
          if (i7 >>> 0 > 1) {
           i1 = 1;
           do {
            i18 = _FT_Stream_GetUShort(i12) | 0;
            HEAP16[(HEAP32[i21 + 1160 >> 2] | 0) + (i1 << 1) >> 1] = i18;
            i1 = i1 + 1 | 0;
           } while ((i1 | 0) != (i7 | 0));
          }
          _FT_Stream_ExitFrame(i12);
          i18 = 96;
          break L82;
         }
        case 2:
        case 1:
         {
          if (i7 >>> 0 > 1) i1 = 1; else {
           i18 = 96;
           break L82;
          }
          while (1) {
           i9 = _FT_Stream_ReadUShort(i12, i23 + 88 | 0) | 0;
           if (HEAP32[i23 + 88 >> 2] | 0) {
            i11 = i21 + 1156 | 0;
            i18 = 110;
            break L82;
           }
           if ((HEAP32[i21 + 1152 >> 2] | 0) == 2) {
            i2 = (_FT_Stream_ReadUShort(i12, i23 + 88 | 0) | 0) & 65535;
            if (HEAP32[i23 + 88 >> 2] | 0) {
             i11 = i21 + 1156 | 0;
             i18 = 110;
             break L82;
            }
           } else {
            i2 = (_FT_Stream_ReadChar(i12, i23 + 88 | 0) | 0) & 255;
            if (HEAP32[i23 + 88 >> 2] | 0) {
             i11 = i21 + 1156 | 0;
             i18 = 110;
             break L82;
            }
           }
           if (i1 >>> 0 < i7 >>> 0) {
            i5 = HEAP32[i21 + 1160 >> 2] | 0;
            i3 = i1 - i7 | 0;
            i4 = ~((i9 & 65535) >>> 0 > (i2 ^ 65535) >>> 0 ? i9 & 65535 ^ 65535 : i2);
            i4 = i3 >>> 0 > i4 >>> 0 ? i3 : i4;
            i2 = 0;
            i3 = i1;
            while (1) {
             HEAP16[i5 + (i3 << 1) >> 1] = i9;
             i2 = i2 + 1 | 0;
             if ((i2 | 0) == (0 - i4 | 0)) break; else {
              i9 = i9 + 1 << 16 >> 16;
              i3 = i3 + 1 | 0;
             }
            }
            i1 = i1 - i4 | 0;
           }
           if (i1 >>> 0 >= i7 >>> 0) {
            i18 = 96;
            break;
           }
          }
          break;
         }
        default:
         {
          HEAP32[i23 + 88 >> 2] = 3;
          i11 = i21 + 1156 | 0;
          i18 = 110;
          break L82;
         }
        }
       } else {
        HEAP32[i21 + 1156 >> 2] = i1;
        switch (i1 | 0) {
        case 0:
         {
          if (i7 >>> 0 > 229) {
           HEAP32[i23 + 88 >> 2] = 3;
           i11 = i21 + 1156 | 0;
           i18 = 110;
           break L82;
          }
          i1 = _ft_mem_realloc(i8, 2, 0, i7, 0, i23 + 88 | 0) | 0;
          HEAP32[i21 + 1160 >> 2] = i1;
          if (HEAP32[i23 + 88 >> 2] | 0) {
           i11 = i21 + 1156 | 0;
           i18 = 110;
           break L82;
          }
          _memcpy(i1 | 0, 283160, i7 << 1 | 0) | 0;
          i18 = 96;
          break L82;
         }
        case 1:
         {
          if (i7 >>> 0 > 166) {
           HEAP32[i23 + 88 >> 2] = 3;
           i11 = i21 + 1156 | 0;
           i18 = 110;
           break L82;
          }
          i1 = _ft_mem_realloc(i8, 2, 0, i7, 0, i23 + 88 | 0) | 0;
          HEAP32[i21 + 1160 >> 2] = i1;
          if (HEAP32[i23 + 88 >> 2] | 0) {
           i11 = i21 + 1156 | 0;
           i18 = 110;
           break L82;
          }
          _memcpy(i1 | 0, 283618, i7 << 1 | 0) | 0;
          i18 = 96;
          break L82;
         }
        case 2:
         {
          if (i7 >>> 0 > 87) {
           HEAP32[i23 + 88 >> 2] = 3;
           i11 = i21 + 1156 | 0;
           i18 = 110;
           break L82;
          }
          i1 = _ft_mem_realloc(i8, 2, 0, i7, 0, i23 + 88 | 0) | 0;
          HEAP32[i21 + 1160 >> 2] = i1;
          if (HEAP32[i23 + 88 >> 2] | 0) {
           i11 = i21 + 1156 | 0;
           i18 = 110;
           break L82;
          }
          _memcpy(i1 | 0, 283950, i7 << 1 | 0) | 0;
          i18 = 96;
          break L82;
         }
        default:
         {
          HEAP32[i23 + 88 >> 2] = 3;
          i11 = i21 + 1156 | 0;
          i18 = 110;
          break L82;
         }
        }
       } while (0);
       do if ((i18 | 0) == 96) {
        if (i15 << 24 >> 24 == 0 | i6) i1 = HEAP32[i23 + 88 >> 2] | 0; else {
         HEAP32[i23 + 92 >> 2] = 0;
         do if (!(HEAP32[i21 + 1168 >> 2] | 0)) {
          i1 = HEAP32[i21 + 1160 >> 2] | 0;
          i2 = 0;
          i9 = 0;
          do {
           i6 = HEAP16[i1 + (i2 << 1) >> 1] | 0;
           i9 = (i6 & 65535) > (i9 & 65535) ? i6 : i9;
           i2 = i2 + 1 | 0;
          } while ((i2 | 0) != (i7 | 0));
          i3 = _ft_mem_realloc(i8, 2, 0, (i9 & 65535) + 1 | 0, 0, i23 + 92 | 0) | 0;
          HEAP32[i21 + 1164 >> 2] = i3;
          i1 = HEAP32[i23 + 92 >> 2] | 0;
          if (i1) break;
          if ((i7 + -1 | 0) > -1) {
           i1 = HEAP32[i21 + 1160 >> 2] | 0;
           i2 = i7 + -1 | 0;
           do {
            HEAP16[i3 + (HEAPU16[i1 + (i2 << 1) >> 1] << 1) >> 1] = i2;
            i2 = i2 + -1 | 0;
           } while ((i2 | 0) > -1);
          }
          HEAP32[i21 + 1168 >> 2] = i9 & 65535;
          HEAP32[i21 + 1172 >> 2] = i7;
          i1 = 0;
         } else i1 = 0; while (0);
         HEAP32[i23 + 88 >> 2] = i1;
        }
        if (!i1) {
         HEAP32[i23 + 64 >> 2] = 0;
         break;
        } else {
         i11 = i21 + 1156 | 0;
         i18 = 110;
         break;
        }
       } while (0);
       if ((i18 | 0) == 110 ? (_ft_mem_free(i8, HEAP32[i21 + 1160 >> 2] | 0), HEAP32[i21 + 1160 >> 2] = 0, _ft_mem_free(i8, HEAP32[i21 + 1164 >> 2] | 0), HEAP32[i21 + 1164 >> 2] = 0, HEAP32[i21 + 1152 >> 2] = 0, HEAP32[i11 >> 2] = 0, HEAP32[i21 + 1160 >> 2] = 0, i11 = HEAP32[i23 + 88 >> 2] | 0, HEAP32[i23 + 64 >> 2] = i11, (i11 | 0) != 0) : 0) break L24;
       if ((HEAP32[i21 + 1456 >> 2] | 0) != 65535) break;
       i7 = HEAP32[i21 + 12 >> 2] | 0;
       i1 = HEAP32[i21 + 1432 >> 2] | 0;
       HEAP32[i23 + 88 >> 2] = 0;
       L152 : do if (!(HEAP32[i21 + 1160 >> 2] | 0)) {
        HEAP32[i23 + 88 >> 2] = 3;
        i1 = 3;
       } else {
        i2 = 0;
        do {
         HEAP16[i21 + 128 + (i2 << 1) >> 1] = 0;
         HEAP16[i21 + 640 + (i2 << 1) >> 1] = 0;
         i2 = i2 + 1 | 0;
        } while ((i2 | 0) != 256);
        do if (i1 >>> 0 > 1) {
         HEAP32[i21 + 120 >> 2] = i1 + i10;
         i1 = _FT_Stream_Seek(i12, i1 + i10 | 0) | 0;
         HEAP32[i23 + 88 >> 2] = i1;
         if (i1) break L152;
         HEAP32[i21 + 116 >> 2] = (_FT_Stream_ReadChar(i12, i23 + 88 | 0) | 0) & 255;
         i1 = HEAP32[i23 + 88 >> 2] | 0;
         if (i1) break L152;
         i6 = _FT_Stream_ReadChar(i12, i23 + 88 | 0) | 0;
         i1 = HEAP32[i23 + 88 >> 2] | 0;
         if (i1) break L152;
         L162 : do switch (HEAP32[i21 + 116 >> 2] & 127 | 0) {
         case 0:
          {
           HEAP32[i21 + 124 >> 2] = (i6 & 255) + 1;
           i1 = _FT_Stream_EnterFrame(i12, i6 & 255) | 0;
           HEAP32[i23 + 88 >> 2] = i1;
           if (i1) break L152;
           if (i6 << 24 >> 24) {
            i2 = 1;
            i3 = HEAP32[i12 + 32 >> 2] | 0;
            while (1) {
             i1 = HEAPU8[i3 >> 0] | 0;
             if (i2 >>> 0 < i7 >>> 0) {
              HEAP16[i21 + 640 + (i1 << 1) >> 1] = i2;
              HEAP16[i21 + 128 + (i1 << 1) >> 1] = HEAP16[(HEAP32[i21 + 1160 >> 2] | 0) + (i2 << 1) >> 1] | 0;
             }
             i2 = i2 + 1 | 0;
             if (i2 >>> 0 > (i6 & 255) >>> 0) break; else i3 = i3 + 1 | 0;
            }
           }
           _FT_Stream_ExitFrame(i12);
           break;
          }
         case 1:
          {
           HEAP32[i21 + 124 >> 2] = 0;
           if (!(i6 << 24 >> 24)) break L162; else {
            i4 = 1;
            i5 = 0;
           }
           do {
            i9 = (_FT_Stream_ReadChar(i12, i23 + 88 | 0) | 0) & 255;
            i1 = HEAP32[i23 + 88 >> 2] | 0;
            if (i1) break L152;
            i3 = _FT_Stream_ReadChar(i12, i23 + 88 | 0) | 0;
            i1 = HEAP32[i23 + 88 >> 2] | 0;
            if (i1) break L152;
            if (((i3 & 255) + 1 | 0) >>> 0 > (HEAP32[i21 + 124 >> 2] | 0) >>> 0) HEAP32[i21 + 124 >> 2] = (i3 & 255) + 1;
            i2 = i4;
            i4 = (i3 & 255) + 1 + i4 | 0;
            if (i2 >>> 0 < i4 >>> 0) {
             i1 = i2;
             while (1) {
              if (i1 >>> 0 < i7 >>> 0 & i9 >>> 0 < 256) {
               HEAP16[i21 + 640 + (i9 << 1) >> 1] = i1;
               HEAP16[i21 + 128 + (i9 << 1) >> 1] = HEAP16[(HEAP32[i21 + 1160 >> 2] | 0) + (i1 << 1) >> 1] | 0;
              }
              i1 = i1 + 1 | 0;
              if ((i1 | 0) == (i2 + 1 + (i3 & 255) | 0)) break; else i9 = i9 + 1 | 0;
             }
            }
            i5 = i5 + 1 | 0;
           } while (i5 >>> 0 < (i6 & 255) >>> 0);
           if ((HEAP32[i21 + 124 >> 2] | 0) >>> 0 <= 256) break L162;
           HEAP32[i21 + 124 >> 2] = 256;
           break;
          }
         default:
          {
           HEAP32[i23 + 88 >> 2] = 3;
           i1 = 3;
           break L152;
          }
         } while (0);
         if (!(HEAP32[i21 + 116 >> 2] & 128)) {
          i12 = HEAP32[i23 + 88 >> 2] | 0;
          HEAP32[i23 + 64 >> 2] = i12;
          if (!i12) break L80; else break L24;
         }
         i5 = _FT_Stream_ReadChar(i12, i23 + 88 | 0) | 0;
         i1 = HEAP32[i23 + 88 >> 2] | 0;
         if (i1) break L152;
         if (!(i5 << 24 >> 24)) break;
         i4 = 0;
         do {
          i3 = (_FT_Stream_ReadChar(i12, i23 + 88 | 0) | 0) & 255;
          i1 = HEAP32[i23 + 88 >> 2] | 0;
          if (i1) break L152;
          i9 = _FT_Stream_ReadUShort(i12, i23 + 88 | 0) | 0;
          i1 = HEAP32[i23 + 88 >> 2] | 0;
          if (i1) break L152;
          HEAP16[i21 + 128 + (i3 << 1) >> 1] = i9;
          L202 : do if (i7) {
           i2 = HEAP32[i21 + 1160 >> 2] | 0;
           i1 = 0;
           while (1) {
            if ((HEAP16[i2 + (i1 << 1) >> 1] | 0) == i9 << 16 >> 16) break;
            i1 = i1 + 1 | 0;
            if (i1 >>> 0 >= i7 >>> 0) break L202;
           }
           HEAP16[i21 + 640 + (i3 << 1) >> 1] = i1;
          } while (0);
          i4 = i4 + 1 | 0;
         } while (i4 >>> 0 < (i5 & 255) >>> 0);
        } else {
         switch (i1 | 0) {
         case 0:
          {
           _memcpy(i21 + 128 | 0, 282624, 512) | 0;
           break;
          }
         case 1:
          {
           _memcpy(i21 + 128 | 0, 284124, 512) | 0;
           break;
          }
         default:
          {
           HEAP32[i23 + 88 >> 2] = 3;
           i1 = 3;
           break L152;
          }
         }
         HEAP32[i21 + 124 >> 2] = 0;
         i9 = HEAP32[i12 + 28 >> 2] | 0;
         HEAP32[i23 + 92 >> 2] = 0;
         i1 = HEAP32[i21 + 1168 >> 2] | 0;
         if (!i1) {
          if (!i7) i1 = 0; else {
           i2 = HEAP32[i21 + 1160 >> 2] | 0;
           i3 = 0;
           i1 = 0;
           do {
            i12 = HEAP16[i2 + (i3 << 1) >> 1] | 0;
            i1 = (i12 & 65535) > (i1 & 65535) ? i12 : i1;
            i3 = i3 + 1 | 0;
           } while ((i3 | 0) != (i7 | 0));
          }
          i4 = i1 & 65535;
          i3 = _ft_mem_realloc(i9, 2, 0, i4 + 1 | 0, 0, i23 + 92 | 0) | 0;
          HEAP32[i21 + 1164 >> 2] = i3;
          i1 = HEAP32[i23 + 92 >> 2] | 0;
          if (i1) {
           HEAP32[i23 + 88 >> 2] = i1;
           break L152;
          }
          if ((i7 + -1 | 0) > -1) {
           i1 = HEAP32[i21 + 1160 >> 2] | 0;
           i2 = i7 + -1 | 0;
           do {
            HEAP16[i3 + (HEAPU16[i1 + (i2 << 1) >> 1] << 1) >> 1] = i2;
            i2 = i2 + -1 | 0;
           } while ((i2 | 0) > -1);
          }
          HEAP32[i21 + 1168 >> 2] = i4;
          HEAP32[i21 + 1172 >> 2] = i7;
          i9 = i21 + 1164 | 0;
         } else {
          i9 = i21 + 1164 | 0;
          i4 = i1;
         }
         HEAP32[i23 + 88 >> 2] = 0;
         i1 = 0;
         do {
          i3 = i21 + 128 + (i1 << 1) | 0;
          i2 = HEAP16[i3 >> 1] | 0;
          do if (!(i2 << 16 >> 16)) i18 = 172; else {
           if (i4 >>> 0 < (i2 & 65535) >>> 0) {
            i18 = 172;
            break;
           }
           i2 = HEAP16[(HEAP32[i9 >> 2] | 0) + ((i2 & 65535) << 1) >> 1] | 0;
           if (!(i2 << 16 >> 16)) {
            i18 = 172;
            break;
           }
           HEAP16[i21 + 640 + (i1 << 1) >> 1] = i2;
           i1 = i1 + 1 | 0;
           HEAP32[i21 + 124 >> 2] = i1;
          } while (0);
          if ((i18 | 0) == 172) {
           i18 = 0;
           HEAP16[i21 + 640 + (i1 << 1) >> 1] = 0;
           HEAP16[i3 >> 1] = 0;
           i1 = i1 + 1 | 0;
          }
         } while ((i1 | 0) != 256);
        } while (0);
        HEAP32[i23 + 64 >> 2] = 0;
        break L80;
       } while (0);
       HEAP32[i23 + 64 >> 2] = i1;
       break L24;
      } while (0);
      i1 = HEAP32[(HEAP32[i21 + 20 >> 2] | 0) + 28 >> 2] | 0;
      i12 = _cff_index_access_element(i21 + 20 | 0, i17, i23 + 92 | 0, i23 + 88 | 0) | 0;
      HEAP32[i23 + 84 >> 2] = i12;
      do if (!i12) {
       i2 = HEAP32[i23 + 88 >> 2] | 0;
       i1 = _ft_mem_alloc(i1, i2 + 1 | 0, i23 + 84 | 0) | 0;
       if (!(HEAP32[i23 + 84 >> 2] | 0)) {
        _memcpy(i1 | 0, HEAP32[i23 + 92 >> 2] | 0, i2 | 0) | 0;
        HEAP8[i1 + i2 >> 0] = 0;
       }
       if (HEAP32[i21 + 48 >> 2] | 0) break;
       _FT_Stream_ReleaseFrame(HEAP32[i21 + 20 >> 2] | 0, i23 + 92 | 0);
      } else i1 = 0; while (0);
      HEAP32[i21 + 1304 >> 2] = i1;
      break;
     }
     HEAP32[i23 + 64 >> 2] = 2;
    } while (0);
    i1 = HEAP32[i23 + 32 >> 2] | 0;
    if (i1) {
     i2 = HEAP32[i1 + 28 >> 2] | 0;
     if (HEAP32[i23 + 32 + 28 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i23 + 32 + 28 | 0);
     _ft_mem_free(i2, HEAP32[i23 + 32 + 24 >> 2] | 0);
     HEAP32[i23 + 32 >> 2] = 0;
     HEAP32[i23 + 32 + 4 >> 2] = 0;
     HEAP32[i23 + 32 + 8 >> 2] = 0;
     HEAP32[i23 + 32 + 12 >> 2] = 0;
     HEAP32[i23 + 32 + 16 >> 2] = 0;
     HEAP32[i23 + 32 + 20 >> 2] = 0;
     HEAP32[i23 + 32 + 24 >> 2] = 0;
     HEAP32[i23 + 32 + 28 >> 2] = 0;
    }
    i12 = HEAP32[i23 + 64 >> 2] | 0;
    HEAP32[i23 + 80 >> 2] = i12;
    if (!i12) {
     HEAP32[i21 + 2952 >> 2] = i14;
     HEAP32[i21 + 2956 >> 2] = i13;
     HEAP32[i22 + 4 >> 2] = i17;
     HEAP32[i22 + 16 >> 2] = HEAP32[i21 + 12 >> 2];
     if (!((i13 | 0) != 0 ? 1 : (HEAP32[i21 + 1456 >> 2] | 0) != 65535)) {
      HEAP32[i23 + 80 >> 2] = 11;
      break;
     }
     if (!(HEAP8[i21 + 1388 >> 0] | 0)) {
      if (!(i15 << 24 >> 24)) i1 = HEAPU16[i22 + 68 >> 1] | 0; else i1 = 1e3;
      HEAP32[i21 + 1392 >> 2] = i1;
      i9 = i21 + 1392 | 0;
     } else i9 = i21 + 1392 | 0;
     i1 = HEAP32[i21 + 1384 >> 2] | 0;
     i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
     if ((i1 | 0) == 65536) {
      i1 = i21 + 1400 | 0;
      i2 = i21 + 1396 | 0;
      i3 = HEAP32[i21 + 1400 >> 2] | 0;
     } else {
      HEAP32[i9 >> 2] = _FT_DivFix(HEAP32[i9 >> 2] | 0, i1) | 0;
      HEAP32[i21 + 1372 >> 2] = _FT_DivFix(HEAP32[i21 + 1372 >> 2] | 0, i1) | 0;
      HEAP32[i21 + 1380 >> 2] = _FT_DivFix(HEAP32[i21 + 1380 >> 2] | 0, i1) | 0;
      HEAP32[i21 + 1376 >> 2] = _FT_DivFix(HEAP32[i21 + 1376 >> 2] | 0, i1) | 0;
      HEAP32[i21 + 1384 >> 2] = _FT_DivFix(HEAP32[i21 + 1384 >> 2] | 0, i1) | 0;
      HEAP32[i21 + 1396 >> 2] = _FT_DivFix(HEAP32[i21 + 1396 >> 2] | 0, i1) | 0;
      i3 = _FT_DivFix(HEAP32[i21 + 1400 >> 2] | 0, i1) | 0;
      HEAP32[i21 + 1400 >> 2] = i3;
      i1 = i21 + 1400 | 0;
      i2 = i21 + 1396 | 0;
     }
     HEAP32[i2 >> 2] = HEAP32[i2 >> 2] >> 16;
     HEAP32[i1 >> 2] = i3 >> 16;
     i1 = HEAP32[i21 + 1896 >> 2] | 0;
     if (i1) do {
      i1 = i1 + -1 | 0;
      i5 = HEAP32[i21 + 1900 + (i1 << 2) >> 2] | 0;
      do if (!(HEAP8[i5 + 64 >> 0] | 0)) {
       HEAP32[i5 + 48 >> 2] = HEAP32[i21 + 1372 >> 2];
       HEAP32[i5 + 48 + 4 >> 2] = HEAP32[i21 + 1372 + 4 >> 2];
       HEAP32[i5 + 48 + 8 >> 2] = HEAP32[i21 + 1372 + 8 >> 2];
       HEAP32[i5 + 48 + 12 >> 2] = HEAP32[i21 + 1372 + 12 >> 2];
       i2 = HEAP32[i21 + 1396 + 4 >> 2] | 0;
       HEAP32[i5 + 72 >> 2] = HEAP32[i21 + 1396 >> 2];
       HEAP32[i5 + 72 + 4 >> 2] = i2;
       HEAP32[i5 + 68 >> 2] = HEAP32[i9 >> 2];
       i2 = i5 + 68 | 0;
      } else {
       if (!(HEAP8[i21 + 1388 >> 0] | 0)) {
        i2 = i5 + 68 | 0;
        break;
       }
       i2 = HEAP32[i9 >> 2] | 0;
       if (i2 >>> 0 > 1 ? (i16 = HEAP32[i5 + 68 >> 2] | 0, i16 >>> 0 > 1) : 0) i2 = i2 >>> 0 < i16 >>> 0 ? i2 : i16; else i2 = 1;
       _FT_Matrix_Multiply_Scaled(i21 + 1372 | 0, i5 + 48 | 0, i2);
       _FT_Vector_Transform_Scaled(i5 + 72 | 0, i21 + 1372 | 0, i2);
       HEAP32[i5 + 68 >> 2] = _FT_MulDiv(HEAP32[i5 + 68 >> 2] | 0, HEAP32[i9 >> 2] | 0, i2) | 0;
       i2 = i5 + 68 | 0;
      } while (0);
      i3 = HEAP32[i5 + 60 >> 2] | 0;
      i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
      if ((i3 | 0) == 65536) {
       i3 = i5 + 72 | 0;
       i4 = i5 + 76 | 0;
       i2 = HEAP32[i5 + 76 >> 2] | 0;
      } else {
       HEAP32[i2 >> 2] = _FT_DivFix(HEAP32[i2 >> 2] | 0, i3) | 0;
       HEAP32[i5 + 48 >> 2] = _FT_DivFix(HEAP32[i5 + 48 >> 2] | 0, i3) | 0;
       HEAP32[i5 + 56 >> 2] = _FT_DivFix(HEAP32[i5 + 56 >> 2] | 0, i3) | 0;
       HEAP32[i5 + 52 >> 2] = _FT_DivFix(HEAP32[i5 + 52 >> 2] | 0, i3) | 0;
       HEAP32[i5 + 60 >> 2] = _FT_DivFix(HEAP32[i5 + 60 >> 2] | 0, i3) | 0;
       HEAP32[i5 + 72 >> 2] = _FT_DivFix(HEAP32[i5 + 72 >> 2] | 0, i3) | 0;
       i2 = _FT_DivFix(HEAP32[i5 + 76 >> 2] | 0, i3) | 0;
       HEAP32[i5 + 76 >> 2] = i2;
       i3 = i5 + 72 | 0;
       i4 = i5 + 76 | 0;
      }
      HEAP32[i3 >> 2] = HEAP32[i3 >> 2] >> 16;
      HEAP32[i4 >> 2] = i2 >> 16;
     } while ((i1 | 0) != 0);
     i12 = i15 << 24 >> 24 == 0;
     if (!i12) {
      HEAP32[i22 >> 2] = HEAP32[i21 + 8 >> 2];
      if ((HEAP32[i21 + 1456 >> 2] | 0) == 65535) i1 = HEAP32[i21 + 1184 >> 2] | 0; else i1 = (HEAP32[i21 + 1168 >> 2] | 0) + 1 | 0;
      HEAP32[i22 + 16 >> 2] = i1;
      HEAP32[i22 + 52 >> 2] = HEAP32[i21 + 1408 >> 2] >> 16;
      i16 = HEAP32[i21 + 1412 >> 2] >> 16;
      HEAP32[i22 + 56 >> 2] = i16;
      HEAP32[i22 + 60 >> 2] = (HEAP32[i21 + 1416 >> 2] | 0) + 65535 >> 16;
      i15 = (HEAP32[i21 + 1420 >> 2] | 0) + 65535 >> 16;
      HEAP32[i22 + 64 >> 2] = i15;
      i1 = HEAP32[i9 >> 2] | 0;
      HEAP16[i22 + 68 >> 1] = i1;
      HEAP16[i22 + 70 >> 1] = i15;
      HEAP16[i22 + 72 >> 1] = i16;
      HEAP16[i22 + 74 >> 1] = (((((i1 & 65535) * 12 | 0) >>> 0) / 10 | 0) << 16 >> 16 | 0) < (i15 - i16 | 0) ? i15 - i16 | 0 : (((i1 & 65535) * 12 | 0) >>> 0) / 10 | 0;
      HEAP16[i22 + 80 >> 1] = (HEAP32[i21 + 1356 >> 2] | 0) >>> 16;
      HEAP16[i22 + 82 >> 1] = (HEAP32[i21 + 1360 >> 2] | 0) >>> 16;
      i1 = HEAP32[(HEAP32[i21 + 20 >> 2] | 0) + 28 >> 2] | 0;
      i17 = _cff_index_access_element(i21 + 20 | 0, i17, i23 + 92 | 0, i23 + 88 | 0) | 0;
      HEAP32[i23 + 84 >> 2] = i17;
      if (!i17) {
       i2 = HEAP32[i23 + 88 >> 2] | 0;
       i1 = _ft_mem_alloc(i1, i2 + 1 | 0, i23 + 84 | 0) | 0;
       if (!(HEAP32[i23 + 84 >> 2] | 0)) {
        _memcpy(i1 | 0, HEAP32[i23 + 92 >> 2] | 0, i2 | 0) | 0;
        HEAP8[i1 + i2 >> 0] = 0;
       }
       if (!(HEAP32[i21 + 48 >> 2] | 0)) {
        _FT_Stream_ReleaseFrame(HEAP32[i21 + 20 >> 2] | 0, i23 + 92 | 0);
        i2 = i1;
       } else i2 = i1;
      } else i2 = 0;
      HEAP32[i22 + 20 >> 2] = i2;
      L307 : do if (!i2) {
       i1 = HEAP32[i21 + 1496 >> 2] | 0;
       if ((i1 | 0) == 65535) i18 = 269; else {
        if (i1 >>> 0 > 390) {
         if ((HEAP32[i21 + 1312 >> 2] | 0) >>> 0 <= (i1 + -391 | 0) >>> 0) {
          i18 = 269;
          break;
         }
         i1 = HEAP32[(HEAP32[i21 + 1316 >> 2] | 0) + (i1 + -391 << 2) >> 2] | 0;
        } else {
         i2 = HEAP32[i21 + 2956 >> 2] | 0;
         if (!i2) {
          i18 = 269;
          break;
         }
         i1 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](i1) | 0;
        }
        if (!i1) {
         i18 = 269;
         break;
        }
        HEAP32[i22 + 20 >> 2] = _ft_mem_strdup(i19, i1, i23 + 92 | 0) | 0;
        i18 = 269;
       }
      } else {
       i1 = HEAP32[i21 + 1336 >> 2] | 0;
       do if ((i1 | 0) != 65535) if (i1 >>> 0 > 390) {
        if ((HEAP32[i21 + 1312 >> 2] | 0) >>> 0 <= (i1 + -391 | 0) >>> 0) {
         i1 = 0;
         break;
        }
        i1 = HEAP32[(HEAP32[i21 + 1316 >> 2] | 0) + (i1 + -391 << 2) >> 2] | 0;
        break;
       } else {
        i3 = HEAP32[i21 + 2956 >> 2] | 0;
        if (!i3) {
         i1 = 0;
         break;
        }
        i1 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i1) | 0;
        i2 = HEAP32[i22 + 20 >> 2] | 0;
        break;
       } else i1 = 0; while (0);
       i3 = (_strlen(i2) | 0) + 1 | 0;
       i5 = i2 + 6 | 0;
       i6 = i2 + 1 | 0;
       i7 = i2 + 2 | 0;
       i8 = i2 + 3 | 0;
       i9 = i2 + 4 | 0;
       i10 = i2 + 5 | 0;
       L326 : do if ((i3 | 0) > 6) {
        i11 = 1;
        do {
         if ((HEAP8[i5 >> 0] | 0) != 43) break L326;
         i11 = ((HEAP8[i10 >> 0] | 0) + -65 & 255) < 26 & (((HEAP8[i9 >> 0] | 0) + -65 & 255) < 26 & (((HEAP8[i8 >> 0] | 0) + -65 & 255) < 26 & (((HEAP8[i7 >> 0] | 0) + -65 & 255) < 26 & (((HEAP8[i2 >> 0] | 0) + -65 & 255) < 26 ? ((HEAP8[i6 >> 0] | 0) + -65 & 255) < 26 : 0)))) ? i11 : 0;
         if (!(i11 << 24 >> 24)) break L326;
         if ((i3 | 0) > 7) {
          i4 = 7;
          do {
           HEAP8[i2 + (i4 + -7) >> 0] = HEAP8[i2 + i4 >> 0] | 0;
           i4 = i4 + 1 | 0;
          } while ((i4 | 0) != (i3 | 0));
         }
         i3 = i3 + -7 | 0;
        } while ((i3 | 0) > 6);
       } while (0);
       i4 = HEAP32[i21 + 1340 >> 2] | 0;
       if ((i4 | 0) < 65535) switch (i4 | 0) {
       case 0:
        break;
       default:
        i18 = 236;
       } else switch (i4 | 0) {
       case 65535:
        {
         i3 = 0;
         i18 = 241;
         break;
        }
       default:
        i18 = 236;
       }
       do if ((i18 | 0) == 236) if (i4 >>> 0 > 390) {
        if ((HEAP32[i21 + 1312 >> 2] | 0) >>> 0 <= (i4 + -391 | 0) >>> 0) {
         i3 = 0;
         i18 = 241;
         break;
        }
        i3 = HEAP32[(HEAP32[i21 + 1316 >> 2] | 0) + (i4 + -391 << 2) >> 2] | 0;
        i18 = 241;
        break;
       } else {
        i3 = HEAP32[i21 + 2956 >> 2] | 0;
        if (!i3) {
         i3 = 0;
         i18 = 241;
         break;
        }
        i3 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i4) | 0;
        i18 = 241;
        break;
       } while (0);
       if ((i18 | 0) == 241) i2 = (i3 | 0) == 0 ? i2 : i3;
       if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
        i18 = 269;
        break;
       }
       i3 = HEAP8[i1 >> 0] | 0;
       if (!(i3 << 24 >> 24)) {
        i18 = 269;
        break;
       }
       L350 : while (1) {
        i5 = i3 << 24 >> 24 == 0;
        L352 : while (1) {
         i4 = HEAP8[i2 >> 0] | 0;
         if (i3 << 24 >> 24 == i4 << 24 >> 24) {
          i18 = 246;
          break;
         }
         switch (i3 << 24 >> 24) {
         case 45:
         case 32:
          break L352;
         default:
          {}
         }
         switch (i4 << 24 >> 24) {
         case 0:
          break L350;
         case 45:
         case 32:
          break;
         default:
          {
           i18 = 269;
           break L307;
          }
         }
         if (i5) {
          i18 = 269;
          break L307;
         } else i2 = i2 + 1 | 0;
        }
        if ((i18 | 0) == 246) {
         i18 = 0;
         i2 = i2 + 1 | 0;
        }
        i1 = i1 + 1 | 0;
        i3 = HEAP8[i1 >> 0] | 0;
        if (!(i3 << 24 >> 24)) {
         i18 = 269;
         break L307;
        }
       }
       i4 = _ft_mem_strdup(i19, i1, i23 + 92 | 0) | 0;
       i5 = HEAP32[i22 + 20 >> 2] | 0;
       i1 = _strlen(i5) | 0;
       i2 = _strlen(i4) | 0;
       L361 : do if ((i1 | 0) > (i2 | 0)) {
        if ((i2 | 0) >= 1) {
         i3 = 1;
         do {
          if ((HEAP8[i5 + (i1 - i3) >> 0] | 0) != (HEAP8[i4 + (i2 - i3) >> 0] | 0)) break L361;
          i3 = i3 + 1 | 0;
         } while ((i2 | 0) >= (i3 | 0));
        }
        if ((i1 - i2 | 0) > 1) i1 = i1 - i2 | 0; else {
         i18 = 267;
         break;
        }
        L368 : while (1) {
         i2 = i1;
         i1 = i1 + -1 | 0;
         switch (HEAP8[i5 + i1 >> 0] | 0) {
         case 43:
         case 95:
         case 32:
         case 45:
          break;
         default:
          break L368;
         }
         if ((i1 | 0) <= 1) {
          i18 = 267;
          break L361;
         }
        }
        HEAP8[i5 + i2 >> 0] = 0;
        i18 = 267;
       } else i18 = 267; while (0);
       if ((i18 | 0) == 267 ? (i4 | 0) == 0 : 0) {
        i18 = 269;
        break;
       }
       HEAP32[i22 + 24 >> 2] = i4;
      } while (0);
      if ((i18 | 0) == 269) HEAP32[i22 + 24 >> 2] = _ft_mem_strdup(i19, 324290, i23 + 92 | 0) | 0;
      i1 = i20 << 24 >> 24 == 0 ? 2065 : 2073;
      HEAP32[i22 + 8 >> 2] = (HEAP8[i21 + 1348 >> 0] | 0) == 0 ? i1 : i1 | 4;
      i1 = (HEAP32[i21 + 1352 >> 2] | 0) != 0 & 1;
      i2 = HEAP32[i21 + 1344 >> 2] | 0;
      do if ((i2 | 0) != 65535) {
       if (i2 >>> 0 > 390) {
        if ((HEAP32[i21 + 1312 >> 2] | 0) >>> 0 <= (i2 + -391 | 0) >>> 0) break;
        i2 = HEAP32[(HEAP32[i21 + 1316 >> 2] | 0) + (i2 + -391 << 2) >> 2] | 0;
       } else {
        i3 = HEAP32[i21 + 2956 >> 2] | 0;
        if (!i3) break;
        i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
       }
       if (!i2) break;
       if ((_strcmp(i2, 324256) | 0) != 0 ? (_strcmp(i2, 323534) | 0) != 0 : 0) break;
       i1 = i1 | 2;
      } while (0);
      do if (!(i1 & 2)) {
       i2 = HEAP32[i22 + 24 >> 2] | 0;
       if (!i2) break;
       if ((_strncmp(i2, 324256, 4) | 0) != 0 ? (_strncmp(i2, 323534, 5) | 0) != 0 : 0) break;
       i1 = i1 | 2;
      } while (0);
      HEAP32[i22 + 12 >> 2] = i1;
     }
     i1 = (HEAP32[i21 + 1456 >> 2] | 0) == 65535;
     if (!i1) {
      if (!(i12 | i1)) HEAP32[i22 + 8 >> 2] = HEAP32[i22 + 8 >> 2] | 4096;
     } else HEAP32[i22 + 8 >> 2] = HEAP32[i22 + 8 >> 2] | 512;
     i4 = HEAP32[i22 + 36 >> 2] | 0;
     L404 : do if (!i4) {
      i1 = 1;
      i18 = 296;
     } else {
      i3 = HEAP32[i22 + 40 >> 2] | 0;
      i1 = 0;
      while (1) {
       i2 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
       switch (HEAP16[i2 + 8 >> 1] | 0) {
       case 0:
        break L404;
       case 3:
        {
         if ((HEAP16[i2 + 10 >> 1] | 0) == 1) break L404;
         break;
        }
       default:
        {}
       }
       i2 = i1 + 1 | 0;
       if (i2 >>> 0 < i4 >>> 0) i1 = i2; else break;
      }
      i1 = i1 + 2 | 0;
      i18 = 296;
     } while (0);
     if ((i18 | 0) == 296) {
      if (i12) {
       if (i1 >>> 0 > 15) break;
      } else if (i1 >>> 0 > 15 ? 1 : (HEAP32[i21 + 1456 >> 2] | 0) != 65535) break;
      HEAP32[i23 + 68 >> 2] = i22;
      HEAP16[i23 + 68 + 8 >> 1] = 3;
      HEAP16[i23 + 68 + 10 >> 1] = 1;
      HEAP32[i23 + 68 + 4 >> 2] = 1970170211;
      i20 = _FT_CMap_New(265748, 0, i23 + 68 | 0, 0) | 0;
      HEAP32[i23 + 80 >> 2] = i20;
      switch (i20 | 0) {
      case 0:
      case 163:
       break;
      default:
       break L1;
      }
      HEAP32[i23 + 80 >> 2] = 0;
      if ((HEAP32[i22 + 92 >> 2] | 0) == 0 ? (i4 | 0) != (HEAP32[i22 + 36 >> 2] | 0) : 0) {
       HEAP32[i22 + 92 >> 2] = HEAP32[(HEAP32[i22 + 40 >> 2] | 0) + (i4 << 2) >> 2];
       i1 = i4;
      } else i1 = i4;
     }
     if (i1 >>> 0 <= 15 ? (HEAP32[i21 + 124 >> 2] | 0) != 0 : 0) {
      HEAP32[i23 + 68 >> 2] = i22;
      HEAP16[i23 + 68 + 8 >> 1] = 7;
      i1 = HEAP32[i21 + 120 >> 2] | 0;
      do if (i1) if ((i1 | 0) == 1) {
       HEAP16[i23 + 68 + 10 >> 1] = 1;
       HEAP32[i23 + 68 + 4 >> 2] = 1094992453;
       break;
      } else {
       HEAP16[i23 + 68 + 10 >> 1] = 2;
       HEAP32[i23 + 68 + 4 >> 2] = 1094992451;
       break;
      } else {
       HEAP16[i23 + 68 + 10 >> 1] = 0;
       HEAP32[i23 + 68 + 4 >> 2] = 1094995778;
      } while (0);
      HEAP32[i23 + 80 >> 2] = _FT_CMap_New(265708, 0, i23 + 68 | 0, 0) | 0;
     }
    }
   }
  }
 } else HEAP32[i23 + 80 >> 2] = 11; while (0);
 i22 = HEAP32[i23 + 80 >> 2] | 0;
 STACKTOP = i23;
 return i22 | 0;
}

function _pcf_load_font(i12, i18) {
 i12 = i12 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i19 + 16 >> 2] = 0;
 i17 = HEAP32[i18 + 100 >> 2] | 0;
 i15 = _FT_Stream_Seek(i12, 0) | 0;
 HEAP32[i19 + 20 >> 2] = i15;
 L1 : do if ((i15 | 0) == 0 ? (i15 = _FT_Stream_ReadFields(i12, 285104, i18 + 184 | 0) | 0, HEAP32[i19 + 20 >> 2] = i15, (i15 | 0) == 0) : 0) if ((HEAP32[i18 + 184 >> 2] | 0) == 1885562369 ? (i1 = HEAP32[i18 + 188 >> 2] | 0, (i1 + -1 | 0) >>> 0 <= 134217726) : 0) {
  i1 = _ft_mem_realloc(i17, 16, 0, i1, 0, i19 + 20 | 0) | 0;
  HEAP32[i18 + 192 >> 2] = i1;
  if (!(HEAP32[i19 + 20 >> 2] | 0)) {
   do if (!(HEAP32[i18 + 188 >> 2] | 0)) {
    i2 = 0;
    i16 = 10;
   } else {
    i3 = 0;
    while (1) {
     i15 = _FT_Stream_ReadFields(i12, 285120, i1) | 0;
     HEAP32[i19 + 20 >> 2] = i15;
     if (i15) break;
     i3 = i3 + 1 | 0;
     i2 = HEAP32[i18 + 188 >> 2] | 0;
     if (i3 >>> 0 >= i2 >>> 0) {
      i16 = 9;
      break;
     } else i1 = i1 + 16 | 0;
    }
    if ((i16 | 0) == 9) {
     i1 = HEAP32[i18 + 192 >> 2] | 0;
     if ((i2 | 0) == 1) {
      i2 = 1;
      i16 = 21;
      break;
     } else {
      i16 = 10;
      break;
     }
    }
    _ft_mem_free(i17, HEAP32[i18 + 192 >> 2] | 0);
    HEAP32[i18 + 192 >> 2] = 0;
    i15 = HEAP32[i19 + 20 >> 2] | 0;
    HEAP32[i19 + 16 >> 2] = i15;
    if (i15) break L1;
    i2 = HEAP32[i18 + 188 >> 2] | 0;
    i1 = 0;
   } while (0);
   if ((i16 | 0) == 10) {
    i10 = i1 + 12 | 0;
    i9 = 0;
    do {
     i8 = ~i9;
     i9 = i9 + 1 | 0;
     if ((i2 | 0) == (i9 | 0)) break;
     i5 = HEAP32[i10 >> 2] | 0;
     i3 = 0;
     i7 = 0;
     while (1) {
      i6 = i7;
      i7 = i7 + 1 | 0;
      i2 = i1 + (i7 << 4) + 12 | 0;
      i4 = HEAP32[i2 >> 2] | 0;
      if (i5 >>> 0 > i4 >>> 0) {
       i4 = i1 + (i7 << 4) | 0;
       i3 = i1 + (i6 << 4) | 0;
       HEAP32[i19 >> 2] = HEAP32[i3 >> 2];
       HEAP32[i19 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
       HEAP32[i19 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
       HEAP32[i19 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
       HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
       HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
       HEAP32[i4 >> 2] = HEAP32[i19 >> 2];
       HEAP32[i4 + 4 >> 2] = HEAP32[i19 + 4 >> 2];
       HEAP32[i4 + 8 >> 2] = HEAP32[i19 + 8 >> 2];
       HEAP32[i4 + 12 >> 2] = HEAP32[i19 + 12 >> 2];
       i4 = HEAP32[i2 >> 2] | 0;
       i3 = 1;
      }
      i2 = HEAP32[i1 + (i6 << 4) + 8 >> 2] | 0;
      if (i4 >>> 0 < i2 >>> 0) {
       i1 = 9;
       i16 = 19;
       break L1;
      }
      if ((HEAP32[i1 + (i6 << 4) + 12 >> 2] | 0) >>> 0 > (i4 - i2 | 0) >>> 0) {
       i1 = 9;
       i16 = 19;
       break L1;
      }
      i2 = HEAP32[i18 + 188 >> 2] | 0;
      if (i7 >>> 0 >= (i2 + i8 | 0) >>> 0) break; else i5 = i4;
     }
    } while (i9 >>> 0 < (i2 + -1 | 0) >>> 0 & (i3 | 0) != 0);
    i1 = HEAP32[i18 + 192 >> 2] | 0;
    i16 = 21;
   }
   if ((i16 | 0) == 21) HEAP32[i19 + 16 >> 2] = 0;
   i8 = HEAP32[i18 + 100 >> 2] | 0;
   L32 : do if (i2) {
    i3 = 0;
    while (1) {
     if ((HEAP32[i1 + (i3 << 4) >> 2] | 0) == 1) break;
     i3 = i3 + 1 | 0;
     if (i3 >>> 0 >= i2 >>> 0) {
      i1 = 3;
      i16 = 29;
      break L32;
     }
    }
    i2 = HEAP32[i12 + 8 >> 2] | 0;
    i4 = HEAP32[i1 + (i3 << 4) + 12 >> 2] | 0;
    if (i4 >>> 0 >= i2 >>> 0 ? (_FT_Stream_Skip(i12, i4 - i2 | 0) | 0) == 0 : 0) {
     i4 = HEAP32[i1 + (i3 << 4) + 8 >> 2] | 0;
     HEAP32[i19 + 20 >> 2] = 0;
     i3 = _FT_Stream_ReadULongLE(i12, i19 + 20 | 0) | 0;
     if (i3 >>> 0 < 256 & (HEAP32[i19 + 20 >> 2] | 0) == 0) {
      if (!(i3 & 4)) i9 = _FT_Stream_ReadULongLE(i12, i19 + 20 | 0) | 0; else i9 = _FT_Stream_ReadULong(i12, i19 + 20 | 0) | 0;
      if (!(HEAP32[i19 + 20 >> 2] | 0)) {
       if (i9 >>> 0 > ((i4 >>> 0) / 9 | 0) >>> 0) {
        HEAP32[i19 + 20 >> 2] = 8;
        i2 = 0;
        i1 = 0;
        break;
       }
       HEAP32[i18 + 280 >> 2] = i9;
       i2 = _ft_mem_realloc(i8, 12, 0, i9, 0, i19 + 20 | 0) | 0;
       if (!(HEAP32[i19 + 20 >> 2] | 0)) {
        i7 = (i9 | 0) == 0;
        do if (!i7) {
         if (!(i3 & 4)) {
          i1 = 0;
          do {
           i15 = _FT_Stream_ReadFields(i12, 285144, i2 + (i1 * 12 | 0) | 0) | 0;
           HEAP32[i19 + 20 >> 2] = i15;
           if (i15) {
            i1 = 0;
            break L32;
           }
           i1 = i1 + 1 | 0;
          } while (i1 >>> 0 < i9 >>> 0);
         } else {
          i1 = 0;
          do {
           i15 = _FT_Stream_ReadFields(i12, 285164, i2 + (i1 * 12 | 0) | 0) | 0;
           HEAP32[i19 + 20 >> 2] = i15;
           if (i15) {
            i1 = 0;
            break L32;
           }
           i1 = i1 + 1 | 0;
          } while (i1 >>> 0 < i9 >>> 0);
         }
         i1 = i9 & 3;
         if (i1) {
          i15 = _FT_Stream_Skip(i12, 4 - i1 | 0) | 0;
          HEAP32[i19 + 20 >> 2] = i15;
          if (!i15) break;
          HEAP32[i19 + 20 >> 2] = 83;
          i1 = 0;
          break L32;
         }
        } while (0);
        if (!(i3 & 4)) i6 = _FT_Stream_ReadULongLE(i12, i19 + 20 | 0) | 0; else i6 = _FT_Stream_ReadULong(i12, i19 + 20 | 0) | 0;
        if (!(HEAP32[i19 + 20 >> 2] | 0)) {
         if (i6 >>> 0 > (i4 + (Math_imul(i9, -9) | 0) | 0) >>> 0) {
          HEAP32[i19 + 20 >> 2] = 8;
          i1 = 0;
          break;
         }
         i1 = _ft_mem_realloc(i8, 1, 0, i6 + 1 | 0, 0, i19 + 20 | 0) | 0;
         if (HEAP32[i19 + 20 >> 2] | 0) break;
         i15 = _FT_Stream_Read(i12, i1, i6) | 0;
         HEAP32[i19 + 20 >> 2] = i15;
         if (i15) break;
         i5 = _ft_mem_realloc(i8, 12, 0, i9, 0, i19 + 20 | 0) | 0;
         if (HEAP32[i19 + 20 >> 2] | 0) break;
         HEAP32[i18 + 284 >> 2] = i5;
         L73 : do if (!i7) {
          i4 = 0;
          while (1) {
           i3 = HEAP32[i2 + (i4 * 12 | 0) >> 2] | 0;
           if ((i3 | 0) < 0 | i3 >>> 0 > i6 >>> 0) {
            i16 = 58;
            break;
           }
           HEAP32[i5 + (i4 * 12 | 0) >> 2] = _ft_mem_strdup(i8, i1 + i3 | 0, i19 + 20 | 0) | 0;
           if (HEAP32[i19 + 20 >> 2] | 0) break L32;
           i15 = HEAP8[i2 + (i4 * 12 | 0) + 4 >> 0] | 0;
           HEAP8[i5 + (i4 * 12 | 0) + 4 >> 0] = i15;
           i3 = HEAP32[i2 + (i4 * 12 | 0) + 8 >> 2] | 0;
           if (i15 << 24 >> 24) {
            if ((i3 | 0) < 0 | i3 >>> 0 > i6 >>> 0) {
             i16 = 62;
             break;
            }
            HEAP32[i5 + (i4 * 12 | 0) + 8 >> 2] = _ft_mem_strdup(i8, i1 + i3 | 0, i19 + 20 | 0) | 0;
            if (HEAP32[i19 + 20 >> 2] | 0) break L32;
           } else HEAP32[i5 + (i4 * 12 | 0) + 8 >> 2] = i3;
           i4 = i4 + 1 | 0;
           if (i4 >>> 0 >= i9 >>> 0) break L73;
          }
          if ((i16 | 0) == 58) {
           HEAP32[i19 + 20 >> 2] = 9;
           break L32;
          } else if ((i16 | 0) == 62) {
           HEAP32[i19 + 20 >> 2] = 9;
           break L32;
          }
         } while (0);
         HEAP32[i19 + 20 >> 2] = 0;
        } else i1 = 0;
       } else i1 = 0;
      } else {
       i2 = 0;
       i1 = 0;
      }
     } else {
      i2 = 0;
      i1 = 0;
     }
    } else {
     i1 = 83;
     i16 = 29;
    }
   } else {
    i1 = 3;
    i16 = 29;
   } while (0);
   if ((i16 | 0) == 29) {
    HEAP32[i19 + 20 >> 2] = i1;
    i2 = 0;
    i1 = 0;
   }
   _ft_mem_free(i8, i2);
   _ft_mem_free(i8, i1);
   i15 = HEAP32[i19 + 20 >> 2] | 0;
   HEAP32[i19 + 16 >> 2] = i15;
   if (!i15) {
    i3 = HEAP32[i18 + 192 >> 2] | 0;
    i1 = HEAP32[i18 + 188 >> 2] | 0;
    L91 : do if (!i1) i16 = 71; else {
     i2 = 0;
     while (1) {
      if ((HEAP32[i3 + (i2 << 4) >> 2] | 0) == 256) {
       i11 = 1;
       break L91;
      }
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= i1 >>> 0) {
       i16 = 71;
       break;
      }
     }
    } while (0);
    if ((i16 | 0) == 71) {
     i15 = _pcf_get_accel(i12, i18, 2) | 0;
     HEAP32[i19 + 16 >> 2] = i15;
     if (i15) break;
     i1 = HEAP32[i18 + 188 >> 2] | 0;
     i3 = HEAP32[i18 + 192 >> 2] | 0;
     i11 = 0;
    }
    HEAP32[i19 >> 2] = 0;
    i9 = HEAP32[i18 + 100 >> 2] | 0;
    L99 : do if (i1) {
     i2 = 0;
     while (1) {
      if ((HEAP32[i3 + (i2 << 4) >> 2] | 0) == 4) break;
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= i1 >>> 0) {
       i1 = 3;
       i16 = 78;
       break L99;
      }
     }
     i1 = HEAP32[i12 + 8 >> 2] | 0;
     i4 = HEAP32[i3 + (i2 << 4) + 12 >> 2] | 0;
     if (i4 >>> 0 >= i1 >>> 0 ? (_FT_Stream_Skip(i12, i4 - i1 | 0) | 0) == 0 : 0) {
      i2 = HEAP32[i3 + (i2 << 4) + 8 >> 2] | 0;
      HEAP32[i19 >> 2] = 0;
      i3 = _FT_Stream_ReadULongLE(i12, i19) | 0;
      i1 = HEAP32[i19 >> 2] | 0;
      if (!i1) {
       switch (i3 & -256 | 0) {
       case 256:
       case 0:
        break;
       default:
        {
         i1 = 3;
         break L99;
        }
       }
       do if (i3 >>> 0 < 256) if (i3 & 4) {
        i5 = _FT_Stream_ReadULong(i12, i19) | 0;
        break;
       } else {
        i5 = _FT_Stream_ReadULongLE(i12, i19) | 0;
        break;
       } else if (i3 & 4) {
        i5 = (_FT_Stream_ReadUShort(i12, i19) | 0) & 65535;
        break;
       } else {
        i5 = (_FT_Stream_ReadUShortLE(i12, i19) | 0) & 65535;
        break;
       } while (0);
       if (!(HEAP32[i19 >> 2] | 0)) {
        HEAP32[i18 + 288 >> 2] = i5;
        if (i5) {
         if (i3 >>> 0 < 256) {
          if (i5 >>> 0 > ((i2 >>> 0) / 12 | 0) >>> 0) {
           i1 = 8;
           break;
          }
         } else if (i5 >>> 0 > ((i2 >>> 0) / 5 | 0) >>> 0) {
          i1 = 8;
          break;
         }
         i4 = _ft_mem_realloc(i9, 16, 0, i5, 0, i19) | 0;
         HEAP32[i18 + 292 >> 2] = i4;
         if (!(HEAP32[i19 >> 2] | 0)) {
          i2 = (i3 & 4 | 0) != 0 ? 285184 : 285216;
          L125 : do if (i3 >>> 0 < 256) {
           i1 = 0;
           while (1) {
            i16 = _FT_Stream_ReadFields(i12, i2, i4 + (i1 << 4) | 0) | 0;
            HEAP32[i19 >> 2] = i16;
            HEAP32[i4 + (i1 << 4) + 12 >> 2] = 0;
            i1 = i1 + 1 | 0;
            if (i16) {
             i16 = 103;
             break L125;
            }
            if (i1 >>> 0 >= i5 >>> 0) {
             i16 = 102;
             break;
            }
           }
          } else {
           i2 = 0;
           while (1) {
            i1 = _FT_Stream_ReadFields(i12, 285248, i19 + 20 | 0) | 0;
            if (!i1) {
             HEAP16[i4 + (i2 << 4) >> 1] = (HEAPU8[i19 + 20 >> 0] | 0) + 65408;
             HEAP16[i4 + (i2 << 4) + 2 >> 1] = (HEAPU8[i19 + 20 + 1 >> 0] | 0) + 65408;
             HEAP16[i4 + (i2 << 4) + 4 >> 1] = (HEAPU8[i19 + 20 + 2 >> 0] | 0) + 65408;
             HEAP16[i4 + (i2 << 4) + 6 >> 1] = (HEAPU8[i19 + 20 + 3 >> 0] | 0) + 65408;
             HEAP16[i4 + (i2 << 4) + 8 >> 1] = (HEAPU8[i19 + 20 + 4 >> 0] | 0) + 65408;
             HEAP16[i4 + (i2 << 4) + 10 >> 1] = 0;
             i1 = 0;
            }
            HEAP32[i19 >> 2] = i1;
            HEAP32[i4 + (i2 << 4) + 12 >> 2] = 0;
            i2 = i2 + 1 | 0;
            if (i1) {
             i16 = 103;
             break L125;
            }
            if (i2 >>> 0 >= i5 >>> 0) {
             i16 = 102;
             break;
            }
           }
          } while (0);
          if ((i16 | 0) == 102) HEAP32[i19 + 16 >> 2] = 0; else if ((i16 | 0) == 103 ? (_ft_mem_free(i9, HEAP32[i18 + 292 >> 2] | 0), HEAP32[i18 + 292 >> 2] = 0, i15 = HEAP32[i19 >> 2] | 0, HEAP32[i19 + 16 >> 2] = i15, (i15 | 0) != 0) : 0) break L1;
          HEAP32[i19 + 20 >> 2] = 0;
          i9 = HEAP32[i18 + 100 >> 2] | 0;
          i4 = HEAP32[i18 + 192 >> 2] | 0;
          i1 = HEAP32[i18 + 188 >> 2] | 0;
          L139 : do if (!i1) {
           i1 = 3;
           i16 = 109;
          } else {
           i2 = 0;
           while (1) {
            if ((HEAP32[i4 + (i2 << 4) >> 2] | 0) == 8) break;
            i2 = i2 + 1 | 0;
            if (i2 >>> 0 >= i1 >>> 0) {
             i1 = 3;
             i16 = 109;
             break L139;
            }
           }
           i1 = HEAP32[i12 + 8 >> 2] | 0;
           i3 = HEAP32[i4 + (i2 << 4) + 12 >> 2] | 0;
           if (i3 >>> 0 < i1 >>> 0) {
            i1 = 83;
            i16 = 109;
            break;
           }
           if (_FT_Stream_Skip(i12, i3 - i1 | 0) | 0) {
            i1 = 83;
            i16 = 109;
            break;
           }
           i6 = HEAP32[i4 + (i2 << 4) + 8 >> 2] | 0;
           i1 = _FT_Stream_EnterFrame(i12, 8) | 0;
           HEAP32[i19 + 20 >> 2] = i1;
           if (i1) break;
           i3 = _FT_Stream_GetULongLE(i12) | 0;
           if (!(i3 & 4)) i5 = _FT_Stream_GetULongLE(i12) | 0; else i5 = _FT_Stream_GetULong(i12) | 0;
           _FT_Stream_ExitFrame(i12);
           if (i3 >>> 0 >= 256) {
            i1 = 3;
            break;
           }
           i15 = HEAP32[i18 + 288 >> 2] | 0;
           if (!((i15 | 0) > -1 & (i5 | 0) == (i15 | 0))) {
            i1 = 3;
            break;
           }
           i4 = _ft_mem_realloc(i9, 4, 0, i5, 0, i19 + 20 | 0) | 0;
           i1 = HEAP32[i19 + 20 >> 2] | 0;
           if (i1) break;
           i2 = (i5 | 0) == 0;
           if (!i2) {
            if (!(i3 & 4)) {
             i1 = 0;
             do {
              HEAP32[i4 + (i1 << 2) >> 2] = _FT_Stream_ReadULongLE(i12, i19 + 20 | 0) | 0;
              i1 = i1 + 1 | 0;
             } while ((i1 | 0) != (i5 | 0));
            } else {
             i1 = 0;
             do {
              HEAP32[i4 + (i1 << 2) >> 2] = _FT_Stream_ReadULong(i12, i19 + 20 | 0) | 0;
              i1 = i1 + 1 | 0;
             } while ((i1 | 0) != (i5 | 0));
            }
            if (!(HEAP32[i19 + 20 >> 2] | 0)) i16 = 122;
           } else i16 = 122;
           do if ((i16 | 0) == 122) {
            if (!(i3 & 4)) {
             _FT_Stream_ReadULongLE(i12, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) break;
             _FT_Stream_ReadULongLE(i12, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) break;
             _FT_Stream_ReadULongLE(i12, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) break;
             _FT_Stream_ReadULongLE(i12, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) break;
            } else {
             _FT_Stream_ReadULong(i12, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) break;
             _FT_Stream_ReadULong(i12, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) break;
             _FT_Stream_ReadULong(i12, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) break;
             _FT_Stream_ReadULong(i12, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) break;
            }
            if (!i2) {
             i2 = 0;
             do {
              i1 = HEAP32[i4 + (i2 << 2) >> 2] | 0;
              if (!((i1 | 0) < 0 | i1 >>> 0 > i6 >>> 0)) HEAP32[(HEAP32[i18 + 292 >> 2] | 0) + (i2 << 4) + 12 >> 2] = (HEAP32[i12 + 8 >> 2] | 0) + i1;
              i2 = i2 + 1 | 0;
             } while ((i2 | 0) != (i5 | 0));
            }
            HEAP32[i18 + 308 >> 2] = i3;
           } while (0);
           _ft_mem_free(i9, i4);
           i15 = HEAP32[i19 + 20 >> 2] | 0;
           HEAP32[i19 + 16 >> 2] = i15;
           if (i15) break L1;
           HEAP32[i19 + 20 >> 2] = 0;
           i10 = HEAP32[i18 + 100 >> 2] | 0;
           i4 = HEAP32[i18 + 192 >> 2] | 0;
           i1 = HEAP32[i18 + 188 >> 2] | 0;
           L183 : do if (!i1) {
            i1 = 3;
            i16 = 143;
           } else {
            i2 = 0;
            while (1) {
             if ((HEAP32[i4 + (i2 << 4) >> 2] | 0) == 32) break;
             i2 = i2 + 1 | 0;
             if (i2 >>> 0 >= i1 >>> 0) {
              i1 = 3;
              i16 = 143;
              break L183;
             }
            }
            i3 = HEAP32[i12 + 8 >> 2] | 0;
            i1 = HEAP32[i4 + (i2 << 4) + 12 >> 2] | 0;
            if (i1 >>> 0 < i3 >>> 0) {
             i1 = 83;
             i16 = 143;
             break;
            }
            if (_FT_Stream_Skip(i12, i1 - i3 | 0) | 0) {
             i1 = 83;
             i16 = 143;
             break;
            }
            i1 = _FT_Stream_EnterFrame(i12, 14) | 0;
            HEAP32[i19 + 20 >> 2] = i1;
            if (i1) break;
            i5 = _FT_Stream_GetULongLE(i12) | 0;
            if (!(i5 & 4)) {
             i6 = (_FT_Stream_GetUShortLE(i12) | 0) << 16 >> 16;
             i3 = (_FT_Stream_GetUShortLE(i12) | 0) << 16 >> 16;
             i7 = (_FT_Stream_GetUShortLE(i12) | 0) << 16 >> 16;
             i2 = (_FT_Stream_GetUShortLE(i12) | 0) << 16 >> 16;
             i1 = _FT_Stream_GetUShortLE(i12) | 0;
            } else {
             i6 = (_FT_Stream_GetUShort(i12) | 0) << 16 >> 16;
             i3 = (_FT_Stream_GetUShort(i12) | 0) << 16 >> 16;
             i7 = (_FT_Stream_GetUShort(i12) | 0) << 16 >> 16;
             i2 = (_FT_Stream_GetUShort(i12) | 0) << 16 >> 16;
             i1 = _FT_Stream_GetUShort(i12) | 0;
            }
            HEAP16[i18 + 304 >> 1] = i1;
            _FT_Stream_ExitFrame(i12);
            if (i5 >>> 0 >= 256) {
             i1 = 3;
             break;
            }
            i9 = i3 - i6 + 1 | 0;
            i1 = 1 - i7 + i2 | 0;
            i2 = Math_imul(i1, i9) | 0;
            i8 = _ft_mem_realloc(i10, 8, 0, i2, 0, i19 + 20 | 0) | 0;
            if (HEAP32[i19 + 20 >> 2] | 0) {
             i1 = 64;
             break;
            }
            i15 = _FT_Stream_EnterFrame(i12, i2 << 1) | 0;
            HEAP32[i19 + 20 >> 2] = i15;
            do if (!i15) {
             if ((i2 | 0) > 0) {
              i2 = Math_imul(i1, 1 - i6 + i3 | 0) | 0;
              i4 = 0;
              i3 = 0;
              do {
               if (!(i5 & 4)) i1 = _FT_Stream_GetUShortLE(i12) | 0; else i1 = _FT_Stream_GetUShort(i12) | 0;
               if (i1 << 16 >> 16 != -1) {
                HEAP32[i8 + (i3 << 3) >> 2] = ((i4 | 0) % (i9 | 0) | 0) + i6 + (((i4 | 0) / (i9 | 0) | 0) + i7 << 8);
                HEAP16[i8 + (i3 << 3) + 4 >> 1] = i1;
                i3 = i3 + 1 | 0;
               }
               i4 = i4 + 1 | 0;
              } while ((i4 | 0) != (i2 | 0));
             } else i3 = 0;
             _FT_Stream_ExitFrame(i12);
             i1 = _ft_mem_realloc(i10, 8, 0, i3, 0, i19 + 20 | 0) | 0;
             if (HEAP32[i19 + 20 >> 2] | 0) {
              i16 = 163;
              break;
             }
             if ((i3 | 0) > 0) {
              i2 = 0;
              do {
               HEAP32[i1 + (i2 << 3) >> 2] = HEAP32[i8 + (i2 << 3) >> 2];
               HEAP16[i1 + (i2 << 3) + 4 >> 1] = HEAP16[i8 + (i2 << 3) + 4 >> 1] | 0;
               i2 = i2 + 1 | 0;
              } while ((i2 | 0) != (i3 | 0));
             }
             HEAP32[i18 + 296 >> 2] = i3;
             HEAP32[i18 + 300 >> 2] = i1;
             _ft_mem_free(i10, i8);
            } else {
             i1 = 0;
             i16 = 163;
            } while (0);
            if ((i16 | 0) == 163) {
             _ft_mem_free(i10, i1);
             _ft_mem_free(i10, i8);
            }
            i15 = HEAP32[i19 + 20 >> 2] | 0;
            HEAP32[i19 + 16 >> 2] = i15;
            if (i15) break L1;
            if (i11 ? (i15 = _pcf_get_accel(i12, i18, 256) | 0, HEAP32[i19 + 16 >> 2] = i15, (i15 | 0) != 0) : 0) break L1;
            HEAP32[i18 >> 2] = 1;
            HEAP32[i18 + 4 >> 2] = 0;
            HEAP32[i18 + 8 >> 2] = (HEAP8[i18 + 199 >> 0] | 0) == 0 ? 146 : 150;
            HEAP32[i19 + 20 >> 2] = 0;
            i15 = HEAP32[i18 + 100 >> 2] | 0;
            HEAP32[i18 + 12 >> 2] = 0;
            i6 = HEAP32[i18 + 284 >> 2] | 0;
            i5 = HEAP32[i18 + 280 >> 2] | 0;
            if ((i5 | 0) > 0) {
             i1 = 0;
             while (1) {
              i2 = i1 + 1 | 0;
              i3 = (_strcmp(HEAP32[i6 + (i1 * 12 | 0) >> 2] | 0, 324223) | 0) != 0;
              if ((i2 | 0) < (i5 | 0) & i3) i1 = i2; else break;
             }
             L227 : do if ((i6 + (i1 * 12 | 0) | 0) == 0 | i3) {
              i4 = 2;
              i9 = 0;
             } else {
              if (!(HEAP8[i6 + (i1 * 12 | 0) + 4 >> 0] | 0)) {
               i4 = 2;
               i9 = 0;
               break;
              }
              i1 = HEAP32[i6 + (i1 * 12 | 0) + 8 >> 2] | 0;
              switch (HEAP8[i1 >> 0] | 0) {
              case 105:
              case 73:
              case 111:
              case 79:
               break;
              default:
               {
                i4 = 2;
                i9 = 0;
                break L227;
               }
              }
              HEAP32[i18 + 12 >> 2] = 1;
              i4 = 3;
              i9 = (HEAP8[i1 >> 0] & -33) << 24 >> 24 == 79 ? 324229 : 324237;
             } while (0);
             i1 = 0;
             while (1) {
              i2 = i1 + 1 | 0;
              i3 = (_strcmp(HEAP32[i6 + (i1 * 12 | 0) >> 2] | 0, 324244) | 0) != 0;
              if ((i2 | 0) < (i5 | 0) & i3) i1 = i2; else break;
             }
             L235 : do if ((i6 + (i1 * 12 | 0) | 0) == 0 | i3) i4 = 0; else {
              if (!(HEAP8[i6 + (i1 * 12 | 0) + 4 >> 0] | 0)) {
               i4 = 0;
               break;
              }
              switch (HEAP8[HEAP32[i6 + (i1 * 12 | 0) + 8 >> 2] >> 0] | 0) {
              case 98:
              case 66:
               break;
              default:
               {
                i4 = 0;
                break L235;
               }
              }
              HEAP32[i18 + 12 >> 2] = i4;
              i4 = 324256;
             } while (0);
             i1 = 0;
             while (1) {
              i2 = i1 + 1 | 0;
              i3 = (_strcmp(HEAP32[i6 + (i1 * 12 | 0) >> 2] | 0, 324261) | 0) != 0;
              if ((i2 | 0) < (i5 | 0) & i3) i1 = i2; else break;
             }
             L243 : do if ((i6 + (i1 * 12 | 0) | 0) == 0 | i3) i7 = 0; else {
              if (!(HEAP8[i6 + (i1 * 12 | 0) + 4 >> 0] | 0)) {
               i7 = 0;
               break;
              }
              i1 = HEAP32[i6 + (i1 * 12 | 0) + 8 >> 2] | 0;
              switch (HEAP8[i1 >> 0] | 0) {
              case 110:
              case 78:
              case 0:
               {
                i7 = 0;
                break L243;
               }
              default:
               {}
              }
              i7 = i1;
             } while (0);
             i1 = 0;
             while (1) {
              i2 = i1 + 1 | 0;
              i3 = (_strcmp(HEAP32[i6 + (i1 * 12 | 0) >> 2] | 0, 324275) | 0) != 0;
              if ((i2 | 0) < (i5 | 0) & i3) i1 = i2; else break;
             }
             L251 : do if ((i6 + (i1 * 12 | 0) | 0) == 0 | i3) {
              i1 = 0;
              i6 = 0;
              i2 = 0;
             } else {
              if (!(HEAP8[i6 + (i1 * 12 | 0) + 4 >> 0] | 0)) {
               i1 = 0;
               i6 = 0;
               i2 = 0;
               break;
              }
              i1 = HEAP32[i6 + (i1 * 12 | 0) + 8 >> 2] | 0;
              switch (HEAP8[i1 >> 0] | 0) {
              case 110:
              case 78:
              case 0:
               {
                i1 = 0;
                i6 = 0;
                i2 = 0;
                break L251;
               }
              default:
               {}
              }
              if (!i1) {
               i1 = 0;
               i6 = 0;
               i2 = 0;
               break;
              }
              i2 = _strlen(i1) | 0;
              i6 = i2;
              i2 = i2 + 1 | 0;
             } while (0);
             if (!i4) {
              i8 = 1;
              i10 = 0;
              i4 = 0;
             } else {
              i14 = _strlen(i4) | 0;
              i8 = 0;
              i10 = i4;
              i4 = i14;
              i2 = i2 + 1 + i14 | 0;
             }
             if (!i9) {
              i11 = 1;
              i9 = 0;
              i12 = 0;
              i3 = i2;
             } else {
              i3 = _strlen(i9) | 0;
              i11 = 0;
              i12 = i3;
              i3 = i2 + 1 + i3 | 0;
             }
             if (!i7) {
              i5 = 1;
              i7 = 0;
              i2 = 0;
             } else {
              i14 = _strlen(i7) | 0;
              i5 = 0;
              i2 = i14;
              i3 = i3 + 1 + i14 | 0;
             }
             if (!i3) {
              i1 = i10;
              i3 = i12;
              i16 = 194;
             } else {
              i14 = i1;
              i13 = i4;
              i1 = i3;
             }
            } else {
             i2 = 0;
             i11 = 1;
             i4 = 0;
             i7 = 0;
             i1 = 0;
             i9 = 0;
             i8 = 1;
             i3 = 0;
             i5 = 1;
             i16 = 194;
            }
            if ((i16 | 0) == 194) {
             i14 = 324290;
             i6 = 7;
             i10 = i1;
             i13 = i4;
             i12 = i3;
             i1 = 8;
            }
            i1 = _ft_mem_alloc(i15, i1, i19 + 20 | 0) | 0;
            HEAP32[i18 + 24 >> 2] = i1;
            i3 = HEAP32[i19 + 20 >> 2] | 0;
            if (i3) {
             HEAP32[i19 + 16 >> 2] = i3;
             break L1;
            }
            if (i14) {
             _memcpy(i1 | 0, i14 | 0, i6 | 0) | 0;
             if (i6) {
              i4 = 0;
              do {
               i3 = i1 + i4 | 0;
               if ((HEAP8[i3 >> 0] | 0) == 32) HEAP8[i3 >> 0] = 45;
               i4 = i4 + 1 | 0;
              } while ((i4 | 0) != (i6 | 0));
             }
             i1 = i1 + i6 | 0;
            }
            if (!i8) {
             if ((i1 | 0) != (HEAP32[i18 + 24 >> 2] | 0)) {
              HEAP8[i1 >> 0] = 32;
              i1 = i1 + 1 | 0;
             }
             _memcpy(i1 | 0, i10 | 0, i13 | 0) | 0;
             i1 = i1 + i13 | 0;
            }
            if (!i11) {
             if ((i1 | 0) != (HEAP32[i18 + 24 >> 2] | 0)) {
              HEAP8[i1 >> 0] = 32;
              i1 = i1 + 1 | 0;
             }
             _memcpy(i1 | 0, i9 | 0, i12 | 0) | 0;
             i1 = i1 + i12 | 0;
            }
            if (!i5) {
             if ((i1 | 0) != (HEAP32[i18 + 24 >> 2] | 0)) {
              HEAP8[i1 >> 0] = 32;
              i1 = i1 + 1 | 0;
             }
             _memcpy(i1 | 0, i7 | 0, i2 | 0) | 0;
             if (!i2) i2 = 0; else {
              i4 = 0;
              do {
               i3 = i1 + i4 | 0;
               if ((HEAP8[i3 >> 0] | 0) == 32) HEAP8[i3 >> 0] = 45;
               i4 = i4 + 1 | 0;
              } while ((i4 | 0) != (i2 | 0));
             }
             i1 = i1 + i2 | 0;
            }
            HEAP8[i1 >> 0] = 0;
            i15 = HEAP32[i19 + 20 >> 2] | 0;
            HEAP32[i19 + 16 >> 2] = i15;
            if (i15) break L1;
            i4 = HEAP32[i18 + 284 >> 2] | 0;
            i2 = HEAP32[i18 + 280 >> 2] | 0;
            do if ((i2 | 0) > 0) {
             i1 = 0;
             while (1) {
              i3 = i1 + 1 | 0;
              i5 = (_strcmp(HEAP32[i4 + (i1 * 12 | 0) >> 2] | 0, 324211) | 0) != 0;
              if ((i3 | 0) < (i2 | 0) & i5) i1 = i3; else break;
             }
             if (i5 | (i4 + (i1 * 12 | 0) | 0) == 0) {
              i16 = 231;
              break;
             }
             if (!(HEAP8[i4 + (i1 * 12 | 0) + 4 >> 0] | 0)) {
              i16 = 231;
              break;
             }
             HEAP32[i18 + 20 >> 2] = _ft_mem_strdup(i17, HEAP32[i4 + (i1 * 12 | 0) + 8 >> 2] | 0, i19 + 16 | 0) | 0;
             if (HEAP32[i19 + 16 >> 2] | 0) break L1;
            } else i16 = 231; while (0);
            if ((i16 | 0) == 231) HEAP32[i18 + 20 >> 2] = 0;
            HEAP32[i18 + 16 >> 2] = (HEAP32[i18 + 288 >> 2] | 0) + 1;
            HEAP32[i18 + 28 >> 2] = 1;
            i9 = _ft_mem_realloc(i17, 16, 0, 1, 0, i19 + 16 | 0) | 0;
            HEAP32[i18 + 32 >> 2] = i9;
            if (HEAP32[i19 + 16 >> 2] | 0) break L1;
            HEAP32[i9 >> 2] = 0;
            HEAP32[i9 + 4 >> 2] = 0;
            HEAP32[i9 + 8 >> 2] = 0;
            HEAP32[i9 + 12 >> 2] = 0;
            i3 = (HEAP32[i18 + 208 >> 2] | 0) + (HEAP32[i18 + 204 >> 2] | 0) | 0;
            HEAP16[i9 >> 1] = i3;
            i8 = HEAP32[i18 + 284 >> 2] | 0;
            i7 = HEAP32[i18 + 280 >> 2] | 0;
            do if ((i7 | 0) > 0) {
             i1 = 0;
             while (1) {
              i2 = i1 + 1 | 0;
              i4 = (_strcmp(HEAP32[i8 + (i1 * 12 | 0) >> 2] | 0, 324298) | 0) != 0;
              if ((i2 | 0) < (i7 | 0) & i4) i1 = i2; else break;
             }
             if (i4 | (i8 + (i1 * 12 | 0) | 0) == 0) {
              i16 = 237;
              break;
             }
             HEAP16[i9 + 2 >> 1] = ((HEAP32[i8 + (i1 * 12 | 0) + 8 >> 2] | 0) + 5 | 0) / 10 | 0;
            } else i16 = 237; while (0);
            if ((i16 | 0) == 237) HEAP16[i9 + 2 >> 1] = (i3 << 16 >> 15 | 0) / 3 | 0;
            do if ((i7 | 0) > 0) {
             i1 = 0;
             while (1) {
              i2 = i1 + 1 | 0;
              i3 = (_strcmp(HEAP32[i8 + (i1 * 12 | 0) >> 2] | 0, 324312) | 0) != 0;
              if ((i2 | 0) < (i7 | 0) & i3) i1 = i2; else break;
             }
             if (i3 | (i8 + (i1 * 12 | 0) | 0) == 0) i1 = 0; else {
              i1 = (((HEAP32[i8 + (i1 * 12 | 0) + 8 >> 2] | 0) * 460800 | 0) + 36135 | 0) / 72270 | 0;
              HEAP32[i9 + 4 >> 2] = i1;
             }
             if ((i7 | 0) > 0) i2 = 0; else {
              i16 = 254;
              break;
             }
             while (1) {
              i3 = i2 + 1 | 0;
              i4 = (_strcmp(HEAP32[i8 + (i2 * 12 | 0) >> 2] | 0, 324323) | 0) != 0;
              if ((i3 | 0) < (i7 | 0) & i4) i2 = i3; else break;
             }
             if (i4 | (i8 + (i2 * 12 | 0) | 0) == 0) i6 = 0; else {
              i6 = HEAP32[i8 + (i2 * 12 | 0) + 8 >> 2] << 16 >> 10;
              HEAP32[i9 + 12 >> 2] = i6;
             }
             do if ((i7 | 0) > 0) {
              i2 = 0;
              while (1) {
               i3 = i2 + 1 | 0;
               i4 = (_strcmp(HEAP32[i8 + (i2 * 12 | 0) >> 2] | 0, 324334) | 0) != 0;
               if ((i3 | 0) < (i7 | 0) & i4) i2 = i3; else break;
              }
              if (i4 | (i8 + (i2 * 12 | 0) | 0) == 0) i4 = 0; else i4 = HEAP32[i8 + (i2 * 12 | 0) + 8 >> 2] << 16 >> 16;
              if ((i7 | 0) > 0) i3 = 0; else {
               i2 = 0;
               break;
              }
              while (1) {
               i2 = i3 + 1 | 0;
               i5 = (_strcmp(HEAP32[i8 + (i3 * 12 | 0) >> 2] | 0, 324347) | 0) != 0;
               if ((i2 | 0) < (i7 | 0) & i5) i3 = i2; else break;
              }
              if (i5 | (i8 + (i3 * 12 | 0) | 0) == 0) {
               i2 = 0;
               break;
              }
              i2 = HEAP32[i8 + (i3 * 12 | 0) + 8 >> 2] & 65535;
             } else {
              i4 = 0;
              i2 = 0;
             } while (0);
             if (!i6) {
              HEAP32[i9 + 12 >> 2] = i1;
              if (!(i2 << 16 >> 16)) {
               i16 = 260;
               break;
              }
              i1 = (Math_imul(i1, i2 << 16 >> 16) | 0) / 72 | 0;
              HEAP32[i9 + 12 >> 2] = i1;
             } else i1 = i6;
             if ((i4 | 0) == 0 | i2 << 16 >> 16 == 0) {
              i16 = 260;
              break;
             }
             HEAP32[i9 + 8 >> 2] = (Math_imul(i1, i4) | 0) / (i2 << 16 >> 16 | 0) | 0;
            } else {
             i1 = 0;
             i16 = 254;
            } while (0);
            if ((i16 | 0) == 254) {
             HEAP32[i9 + 12 >> 2] = i1;
             i16 = 260;
            }
            if ((i16 | 0) == 260) HEAP32[i9 + 8 >> 2] = i1;
            if ((i7 | 0) > 0) i1 = 0; else {
             i18 = 0;
             STACKTOP = i19;
             return i18 | 0;
            }
            while (1) {
             i2 = i1 + 1 | 0;
             i3 = (_strcmp(HEAP32[i8 + (i1 * 12 | 0) >> 2] | 0, 325861) | 0) != 0;
             if ((i2 | 0) < (i7 | 0) & i3) i1 = i2; else break;
            }
            i4 = i3 ? 0 : i8 + (i1 * 12 | 0) | 0;
            i1 = 0;
            while (1) {
             i2 = i1 + 1 | 0;
             i3 = (_strcmp(HEAP32[i8 + (i1 * 12 | 0) >> 2] | 0, 325878) | 0) != 0;
             if ((i2 | 0) < (i7 | 0) & i3) i1 = i2; else break;
            }
            i1 = i3 ? 0 : i8 + (i1 * 12 | 0) | 0;
            if (!i4) {
             i18 = 0;
             STACKTOP = i19;
             return i18 | 0;
            }
            if (!((i1 | 0) != 0 & (HEAP8[i4 + 4 >> 0] | 0) != 0)) {
             i18 = 0;
             STACKTOP = i19;
             return i18 | 0;
            }
            if (!(HEAP8[i1 + 4 >> 0] | 0)) {
             i18 = 0;
             STACKTOP = i19;
             return i18 | 0;
            }
            HEAP32[i18 + 176 >> 2] = _ft_mem_strdup(i17, HEAP32[i1 + 8 >> 2] | 0, i19 + 16 | 0) | 0;
            if (HEAP32[i19 + 16 >> 2] | 0) break L1;
            HEAP32[i18 + 180 >> 2] = _ft_mem_strdup(i17, HEAP32[i4 + 8 >> 2] | 0, i19 + 16 | 0) | 0;
            if (!(HEAP32[i19 + 16 >> 2] | 0)) i1 = 0; else break L1;
            STACKTOP = i19;
            return i1 | 0;
           } while (0);
           if ((i16 | 0) == 143) HEAP32[i19 + 20 >> 2] = i1;
           HEAP32[i19 + 16 >> 2] = i1;
           break L1;
          } while (0);
          if ((i16 | 0) == 109) HEAP32[i19 + 20 >> 2] = i1;
          HEAP32[i19 + 16 >> 2] = i1;
          break L1;
         } else i1 = 64;
        } else i1 = 8;
       } else i1 = 3;
      }
     } else {
      i1 = 83;
      i16 = 78;
     }
    } else {
     i1 = 3;
     i16 = 78;
    } while (0);
    if ((i16 | 0) == 78) HEAP32[i19 >> 2] = i1;
    HEAP32[i19 + 16 >> 2] = i1;
   }
  } else {
   i1 = 64;
   i16 = 19;
  }
 } else {
  i1 = 3;
  i16 = 19;
 } else {
  i1 = 1;
  i16 = 19;
 } while (0);
 if ((i16 | 0) == 19) HEAP32[i19 + 16 >> 2] = i1;
 HEAP32[i19 + 16 >> 2] = 3;
 i18 = 3;
 STACKTOP = i19;
 return i18 | 0;
}

function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 do if (i1 >>> 0 < 245) {
  i13 = i1 >>> 0 < 11 ? 16 : i1 + 11 & -8;
  i6 = HEAP32[70412] | 0;
  if (i6 >>> (i13 >>> 3) & 3) {
   i1 = (i6 >>> (i13 >>> 3) & 1 ^ 1) + (i13 >>> 3) << 1;
   i2 = HEAP32[281688 + (i1 + 2 << 2) >> 2] | 0;
   i3 = HEAP32[i2 + 8 >> 2] | 0;
   do if ((281688 + (i1 << 2) | 0) == (i3 | 0)) HEAP32[70412] = i6 & ~(1 << (i6 >>> (i13 >>> 3) & 1 ^ 1) + (i13 >>> 3)); else {
    if (i3 >>> 0 >= (HEAP32[70416] | 0) >>> 0 ? (HEAP32[i3 + 12 >> 2] | 0) == (i2 | 0) : 0) {
     HEAP32[i3 + 12 >> 2] = 281688 + (i1 << 2);
     HEAP32[281688 + (i1 + 2 << 2) >> 2] = i3;
     break;
    }
    _abort();
   } while (0);
   i14 = (i6 >>> (i13 >>> 3) & 1 ^ 1) + (i13 >>> 3) << 3;
   HEAP32[i2 + 4 >> 2] = i14 | 3;
   HEAP32[i2 + (i14 | 4) >> 2] = HEAP32[i2 + (i14 | 4) >> 2] | 1;
   i14 = i2 + 8 | 0;
   break;
  }
  i2 = HEAP32[70414] | 0;
  if (i13 >>> 0 > i2 >>> 0) {
   if (i6 >>> (i13 >>> 3)) {
    i1 = i6 >>> (i13 >>> 3) << (i13 >>> 3) & (2 << (i13 >>> 3) | 0 - (2 << (i13 >>> 3)));
    i5 = ((i1 & 0 - i1) + -1 | 0) >>> (((i1 & 0 - i1) + -1 | 0) >>> 12 & 16);
    i4 = i5 >>> (i5 >>> 5 & 8) >>> (i5 >>> (i5 >>> 5 & 8) >>> 2 & 4);
    i4 = (i5 >>> 5 & 8 | ((i1 & 0 - i1) + -1 | 0) >>> 12 & 16 | i5 >>> (i5 >>> 5 & 8) >>> 2 & 4 | i4 >>> 1 & 2 | i4 >>> (i4 >>> 1 & 2) >>> 1 & 1) + (i4 >>> (i4 >>> 1 & 2) >>> (i4 >>> (i4 >>> 1 & 2) >>> 1 & 1)) | 0;
    i5 = HEAP32[281688 + ((i4 << 1) + 2 << 2) >> 2] | 0;
    i1 = HEAP32[i5 + 8 >> 2] | 0;
    do if ((281688 + (i4 << 1 << 2) | 0) == (i1 | 0)) {
     HEAP32[70412] = i6 & ~(1 << i4);
     i7 = i2;
    } else {
     if (i1 >>> 0 >= (HEAP32[70416] | 0) >>> 0 ? (HEAP32[i1 + 12 >> 2] | 0) == (i5 | 0) : 0) {
      HEAP32[i1 + 12 >> 2] = 281688 + (i4 << 1 << 2);
      HEAP32[281688 + ((i4 << 1) + 2 << 2) >> 2] = i1;
      i7 = HEAP32[70414] | 0;
      break;
     }
     _abort();
    } while (0);
    HEAP32[i5 + 4 >> 2] = i13 | 3;
    HEAP32[i5 + (i13 | 4) >> 2] = (i4 << 3) - i13 | 1;
    HEAP32[i5 + (i4 << 3) >> 2] = (i4 << 3) - i13;
    if (i7) {
     i3 = HEAP32[70417] | 0;
     i2 = i7 >>> 3;
     i1 = HEAP32[70412] | 0;
     if (i1 & 1 << i2) {
      i1 = HEAP32[281688 + ((i2 << 1) + 2 << 2) >> 2] | 0;
      if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
       i8 = 281688 + ((i2 << 1) + 2 << 2) | 0;
       i9 = i1;
      }
     } else {
      HEAP32[70412] = i1 | 1 << i2;
      i8 = 281688 + ((i2 << 1) + 2 << 2) | 0;
      i9 = 281688 + (i2 << 1 << 2) | 0;
     }
     HEAP32[i8 >> 2] = i3;
     HEAP32[i9 + 12 >> 2] = i3;
     HEAP32[i3 + 8 >> 2] = i9;
     HEAP32[i3 + 12 >> 2] = 281688 + (i2 << 1 << 2);
    }
    HEAP32[70414] = (i4 << 3) - i13;
    HEAP32[70417] = i5 + i13;
    i14 = i5 + 8 | 0;
    break;
   }
   i1 = HEAP32[70413] | 0;
   if (i1) {
    i3 = ((i1 & 0 - i1) + -1 | 0) >>> (((i1 & 0 - i1) + -1 | 0) >>> 12 & 16);
    i4 = i3 >>> (i3 >>> 5 & 8) >>> (i3 >>> (i3 >>> 5 & 8) >>> 2 & 4);
    i4 = HEAP32[281952 + ((i3 >>> 5 & 8 | ((i1 & 0 - i1) + -1 | 0) >>> 12 & 16 | i3 >>> (i3 >>> 5 & 8) >>> 2 & 4 | i4 >>> 1 & 2 | i4 >>> (i4 >>> 1 & 2) >>> 1 & 1) + (i4 >>> (i4 >>> 1 & 2) >>> (i4 >>> (i4 >>> 1 & 2) >>> 1 & 1)) << 2) >> 2] | 0;
    i3 = (HEAP32[i4 + 4 >> 2] & -8) - i13 | 0;
    i2 = i4;
    while (1) {
     i1 = HEAP32[i2 + 16 >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i2 + 20 >> 2] | 0;
      if (!i1) {
       i8 = i3;
       i7 = i4;
       break;
      }
     }
     i2 = (HEAP32[i1 + 4 >> 2] & -8) - i13 | 0;
     i33 = i2 >>> 0 < i3 >>> 0;
     i3 = i33 ? i2 : i3;
     i2 = i1;
     i4 = i33 ? i1 : i4;
    }
    i5 = HEAP32[70416] | 0;
    if (i7 >>> 0 >= i5 >>> 0 ? i7 >>> 0 < (i7 + i13 | 0) >>> 0 : 0) {
     i6 = HEAP32[i7 + 24 >> 2] | 0;
     i1 = HEAP32[i7 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i7 | 0)) {
      i1 = HEAP32[i7 + 20 >> 2] | 0;
      if (!i1) {
       i1 = HEAP32[i7 + 16 >> 2] | 0;
       if (!i1) {
        i10 = 0;
        break;
       } else i2 = i7 + 16 | 0;
      } else i2 = i7 + 20 | 0;
      while (1) {
       i3 = i1 + 20 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (i4) {
        i1 = i4;
        i2 = i3;
        continue;
       }
       i3 = i1 + 16 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (!i4) break; else {
        i1 = i4;
        i2 = i3;
       }
      }
      if (i2 >>> 0 < i5 >>> 0) _abort(); else {
       HEAP32[i2 >> 2] = 0;
       i10 = i1;
       break;
      }
     } else {
      i2 = HEAP32[i7 + 8 >> 2] | 0;
      if ((i2 >>> 0 >= i5 >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i7 | 0) : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (i7 | 0) : 0) {
       HEAP32[i2 + 12 >> 2] = i1;
       HEAP32[i1 + 8 >> 2] = i2;
       i10 = i1;
       break;
      }
      _abort();
     } while (0);
     do if (i6) {
      i1 = HEAP32[i7 + 28 >> 2] | 0;
      if ((i7 | 0) == (HEAP32[281952 + (i1 << 2) >> 2] | 0)) {
       HEAP32[281952 + (i1 << 2) >> 2] = i10;
       if (!i10) {
        HEAP32[70413] = HEAP32[70413] & ~(1 << i1);
        break;
       }
      } else {
       if (i6 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort();
       if ((HEAP32[i6 + 16 >> 2] | 0) == (i7 | 0)) HEAP32[i6 + 16 >> 2] = i10; else HEAP32[i6 + 20 >> 2] = i10;
       if (!i10) break;
      }
      i2 = HEAP32[70416] | 0;
      if (i10 >>> 0 < i2 >>> 0) _abort();
      HEAP32[i10 + 24 >> 2] = i6;
      i1 = HEAP32[i7 + 16 >> 2] | 0;
      do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
       HEAP32[i10 + 16 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i10;
       break;
      } while (0);
      i1 = HEAP32[i7 + 20 >> 2] | 0;
      if (i1) if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
       HEAP32[i10 + 20 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i10;
       break;
      }
     } while (0);
     if (i8 >>> 0 < 16) {
      HEAP32[i7 + 4 >> 2] = i8 + i13 | 3;
      HEAP32[i7 + (i8 + i13 + 4) >> 2] = HEAP32[i7 + (i8 + i13 + 4) >> 2] | 1;
     } else {
      HEAP32[i7 + 4 >> 2] = i13 | 3;
      HEAP32[i7 + (i13 | 4) >> 2] = i8 | 1;
      HEAP32[i7 + (i8 + i13) >> 2] = i8;
      i2 = HEAP32[70414] | 0;
      if (i2) {
       i3 = HEAP32[70417] | 0;
       i1 = HEAP32[70412] | 0;
       if (i1 & 1 << (i2 >>> 3)) {
        i1 = HEAP32[281688 + ((i2 >>> 3 << 1) + 2 << 2) >> 2] | 0;
        if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
         i11 = 281688 + ((i2 >>> 3 << 1) + 2 << 2) | 0;
         i12 = i1;
        }
       } else {
        HEAP32[70412] = i1 | 1 << (i2 >>> 3);
        i11 = 281688 + ((i2 >>> 3 << 1) + 2 << 2) | 0;
        i12 = 281688 + (i2 >>> 3 << 1 << 2) | 0;
       }
       HEAP32[i11 >> 2] = i3;
       HEAP32[i12 + 12 >> 2] = i3;
       HEAP32[i3 + 8 >> 2] = i12;
       HEAP32[i3 + 12 >> 2] = 281688 + (i2 >>> 3 << 1 << 2);
      }
      HEAP32[70414] = i8;
      HEAP32[70417] = i7 + i13;
     }
     i14 = i7 + 8 | 0;
     break;
    }
    _abort();
   } else {
    i8 = i13;
    i34 = 154;
   }
  } else {
   i8 = i13;
   i34 = 154;
  }
 } else if (i1 >>> 0 <= 4294967231) {
  i8 = i1 + 11 & -8;
  i9 = HEAP32[70413] | 0;
  if (i9) {
   if ((i1 + 11 | 0) >>> 8) if (i8 >>> 0 > 16777215) i7 = 31; else {
    i7 = (i1 + 11 | 0) >>> 8 << ((((i1 + 11 | 0) >>> 8) + 1048320 | 0) >>> 16 & 8);
    i7 = 14 - ((i7 + 520192 | 0) >>> 16 & 4 | (((i1 + 11 | 0) >>> 8) + 1048320 | 0) >>> 16 & 8 | ((i7 << ((i7 + 520192 | 0) >>> 16 & 4)) + 245760 | 0) >>> 16 & 2) + (i7 << ((i7 + 520192 | 0) >>> 16 & 4) << (((i7 << ((i7 + 520192 | 0) >>> 16 & 4)) + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
    i7 = i8 >>> (i7 + 7 | 0) & 1 | i7 << 1;
   } else i7 = 0;
   i1 = HEAP32[281952 + (i7 << 2) >> 2] | 0;
   L110 : do if (!i1) {
    i2 = 0 - i8 | 0;
    i3 = 0;
    i1 = 0;
    i34 = 86;
   } else {
    i2 = 0 - i8 | 0;
    i3 = 0;
    i5 = i8 << ((i7 | 0) == 31 ? 0 : 25 - (i7 >>> 1) | 0);
    i6 = i1;
    i1 = 0;
    while (1) {
     i4 = HEAP32[i6 + 4 >> 2] & -8;
     if ((i4 - i8 | 0) >>> 0 < i2 >>> 0) if ((i4 | 0) == (i8 | 0)) {
      i2 = i4 - i8 | 0;
      i4 = i6;
      i1 = i6;
      i34 = 90;
      break L110;
     } else {
      i2 = i4 - i8 | 0;
      i1 = i6;
     }
     i34 = HEAP32[i6 + 20 >> 2] | 0;
     i6 = HEAP32[i6 + 16 + (i5 >>> 31 << 2) >> 2] | 0;
     i3 = (i34 | 0) == 0 | (i34 | 0) == (i6 | 0) ? i3 : i34;
     if (!i6) {
      i34 = 86;
      break;
     } else i5 = i5 << 1;
    }
   } while (0);
   if ((i34 | 0) == 86) {
    if ((i3 | 0) == 0 & (i1 | 0) == 0) {
     i1 = 2 << i7;
     if (!(i9 & (i1 | 0 - i1))) {
      i34 = 154;
      break;
     }
     i12 = (i9 & (i1 | 0 - i1) & 0 - (i9 & (i1 | 0 - i1))) + -1 | 0;
     i1 = i12 >>> (i12 >>> 12 & 16) >>> (i12 >>> (i12 >>> 12 & 16) >>> 5 & 8);
     i3 = i1 >>> (i1 >>> 2 & 4) >>> (i1 >>> (i1 >>> 2 & 4) >>> 1 & 2);
     i3 = HEAP32[281952 + ((i12 >>> (i12 >>> 12 & 16) >>> 5 & 8 | i12 >>> 12 & 16 | i1 >>> 2 & 4 | i1 >>> (i1 >>> 2 & 4) >>> 1 & 2 | i3 >>> 1 & 1) + (i3 >>> (i3 >>> 1 & 1)) << 2) >> 2] | 0;
     i1 = 0;
    }
    if (!i3) {
     i9 = i2;
     i7 = i1;
    } else {
     i4 = i3;
     i34 = 90;
    }
   }
   if ((i34 | 0) == 90) while (1) {
    i34 = 0;
    i12 = (HEAP32[i4 + 4 >> 2] & -8) - i8 | 0;
    i3 = i12 >>> 0 < i2 >>> 0;
    i2 = i3 ? i12 : i2;
    i1 = i3 ? i4 : i1;
    i3 = HEAP32[i4 + 16 >> 2] | 0;
    if (i3) {
     i4 = i3;
     i34 = 90;
     continue;
    }
    i4 = HEAP32[i4 + 20 >> 2] | 0;
    if (!i4) {
     i9 = i2;
     i7 = i1;
     break;
    } else i34 = 90;
   }
   if ((i7 | 0) != 0 ? i9 >>> 0 < ((HEAP32[70414] | 0) - i8 | 0) >>> 0 : 0) {
    i5 = HEAP32[70416] | 0;
    if (i7 >>> 0 >= i5 >>> 0 ? (i23 = i7 + i8 | 0, i7 >>> 0 < i23 >>> 0) : 0) {
     i6 = HEAP32[i7 + 24 >> 2] | 0;
     i1 = HEAP32[i7 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i7 | 0)) {
      i2 = i7 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i7 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i13 = 0;
        break;
       }
      }
      while (1) {
       i3 = i1 + 20 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (i4) {
        i1 = i4;
        i2 = i3;
        continue;
       }
       i3 = i1 + 16 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (!i4) break; else {
        i1 = i4;
        i2 = i3;
       }
      }
      if (i2 >>> 0 < i5 >>> 0) _abort(); else {
       HEAP32[i2 >> 2] = 0;
       i13 = i1;
       break;
      }
     } else {
      i2 = HEAP32[i7 + 8 >> 2] | 0;
      if ((i2 >>> 0 >= i5 >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i7 | 0) : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (i7 | 0) : 0) {
       HEAP32[i2 + 12 >> 2] = i1;
       HEAP32[i1 + 8 >> 2] = i2;
       i13 = i1;
       break;
      }
      _abort();
     } while (0);
     do if (i6) {
      i1 = HEAP32[i7 + 28 >> 2] | 0;
      if ((i7 | 0) == (HEAP32[281952 + (i1 << 2) >> 2] | 0)) {
       HEAP32[281952 + (i1 << 2) >> 2] = i13;
       if (!i13) {
        HEAP32[70413] = HEAP32[70413] & ~(1 << i1);
        break;
       }
      } else {
       if (i6 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort();
       if ((HEAP32[i6 + 16 >> 2] | 0) == (i7 | 0)) HEAP32[i6 + 16 >> 2] = i13; else HEAP32[i6 + 20 >> 2] = i13;
       if (!i13) break;
      }
      i2 = HEAP32[70416] | 0;
      if (i13 >>> 0 < i2 >>> 0) _abort();
      HEAP32[i13 + 24 >> 2] = i6;
      i1 = HEAP32[i7 + 16 >> 2] | 0;
      do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
       HEAP32[i13 + 16 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i13;
       break;
      } while (0);
      i1 = HEAP32[i7 + 20 >> 2] | 0;
      if (i1) if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
       HEAP32[i13 + 20 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i13;
       break;
      }
     } while (0);
     L179 : do if (i9 >>> 0 >= 16) {
      HEAP32[i7 + 4 >> 2] = i8 | 3;
      HEAP32[i7 + (i8 | 4) >> 2] = i9 | 1;
      HEAP32[i7 + (i9 + i8) >> 2] = i9;
      i2 = i9 >>> 3;
      if (i9 >>> 0 < 256) {
       i1 = HEAP32[70412] | 0;
       if (i1 & 1 << i2) {
        i1 = HEAP32[281688 + ((i2 << 1) + 2 << 2) >> 2] | 0;
        if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
         i16 = 281688 + ((i2 << 1) + 2 << 2) | 0;
         i17 = i1;
        }
       } else {
        HEAP32[70412] = i1 | 1 << i2;
        i16 = 281688 + ((i2 << 1) + 2 << 2) | 0;
        i17 = 281688 + (i2 << 1 << 2) | 0;
       }
       HEAP32[i16 >> 2] = i23;
       HEAP32[i17 + 12 >> 2] = i23;
       HEAP32[i7 + (i8 + 8) >> 2] = i17;
       HEAP32[i7 + (i8 + 12) >> 2] = 281688 + (i2 << 1 << 2);
       break;
      }
      i1 = i9 >>> 8;
      if (i1) if (i9 >>> 0 > 16777215) i4 = 31; else {
       i4 = i1 << ((i1 + 1048320 | 0) >>> 16 & 8) << (((i1 << ((i1 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4);
       i4 = 14 - (((i1 << ((i1 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4 | (i1 + 1048320 | 0) >>> 16 & 8 | (i4 + 245760 | 0) >>> 16 & 2) + (i4 << ((i4 + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
       i4 = i9 >>> (i4 + 7 | 0) & 1 | i4 << 1;
      } else i4 = 0;
      i1 = 281952 + (i4 << 2) | 0;
      HEAP32[i7 + (i8 + 28) >> 2] = i4;
      HEAP32[i7 + (i8 + 20) >> 2] = 0;
      HEAP32[i7 + (i8 + 16) >> 2] = 0;
      i2 = HEAP32[70413] | 0;
      i3 = 1 << i4;
      if (!(i2 & i3)) {
       HEAP32[70413] = i2 | i3;
       HEAP32[i1 >> 2] = i23;
       HEAP32[i7 + (i8 + 24) >> 2] = i1;
       HEAP32[i7 + (i8 + 12) >> 2] = i23;
       HEAP32[i7 + (i8 + 8) >> 2] = i23;
       break;
      }
      i1 = HEAP32[i1 >> 2] | 0;
      L197 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i9 | 0)) {
       i4 = i9 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
       while (1) {
        i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) break;
        if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i9 | 0)) {
         i22 = i2;
         break L197;
        } else {
         i4 = i4 << 1;
         i1 = i2;
        }
       }
       if (i3 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
        HEAP32[i3 >> 2] = i23;
        HEAP32[i7 + (i8 + 24) >> 2] = i1;
        HEAP32[i7 + (i8 + 12) >> 2] = i23;
        HEAP32[i7 + (i8 + 8) >> 2] = i23;
        break L179;
       }
      } else i22 = i1; while (0);
      i1 = i22 + 8 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      i33 = HEAP32[70416] | 0;
      if (i2 >>> 0 >= i33 >>> 0 & i22 >>> 0 >= i33 >>> 0) {
       HEAP32[i2 + 12 >> 2] = i23;
       HEAP32[i1 >> 2] = i23;
       HEAP32[i7 + (i8 + 8) >> 2] = i2;
       HEAP32[i7 + (i8 + 12) >> 2] = i22;
       HEAP32[i7 + (i8 + 24) >> 2] = 0;
       break;
      } else _abort();
     } else {
      i33 = i9 + i8 | 0;
      HEAP32[i7 + 4 >> 2] = i33 | 3;
      i33 = i7 + (i33 + 4) | 0;
      HEAP32[i33 >> 2] = HEAP32[i33 >> 2] | 1;
     } while (0);
     i14 = i7 + 8 | 0;
     break;
    }
    _abort();
   } else i34 = 154;
  } else i34 = 154;
 } else {
  i8 = -1;
  i34 = 154;
 } while (0);
 L212 : do if ((i34 | 0) == 154) {
  i3 = HEAP32[70414] | 0;
  if (i3 >>> 0 >= i8 >>> 0) {
   i1 = i3 - i8 | 0;
   i2 = HEAP32[70417] | 0;
   if (i1 >>> 0 > 15) {
    HEAP32[70417] = i2 + i8;
    HEAP32[70414] = i1;
    HEAP32[i2 + (i8 + 4) >> 2] = i1 | 1;
    HEAP32[i2 + i3 >> 2] = i1;
    HEAP32[i2 + 4 >> 2] = i8 | 3;
   } else {
    HEAP32[70414] = 0;
    HEAP32[70417] = 0;
    HEAP32[i2 + 4 >> 2] = i3 | 3;
    HEAP32[i2 + (i3 + 4) >> 2] = HEAP32[i2 + (i3 + 4) >> 2] | 1;
   }
   i14 = i2 + 8 | 0;
   break;
  }
  i1 = HEAP32[70415] | 0;
  if (i1 >>> 0 > i8 >>> 0) {
   i34 = i1 - i8 | 0;
   HEAP32[70415] = i34;
   i14 = HEAP32[70418] | 0;
   HEAP32[70418] = i14 + i8;
   HEAP32[i14 + (i8 + 4) >> 2] = i34 | 1;
   HEAP32[i14 + 4 >> 2] = i8 | 3;
   i14 = i14 + 8 | 0;
   break;
  }
  if (!(HEAP32[70530] | 0)) _init_mparams();
  i9 = i8 + 48 | 0;
  i4 = HEAP32[70532] | 0;
  i5 = i8 + 47 | 0;
  i6 = i4 + i5 & 0 - i4;
  if (i6 >>> 0 > i8 >>> 0) {
   i1 = HEAP32[70522] | 0;
   if ((i1 | 0) != 0 ? (i23 = HEAP32[70520] | 0, (i23 + i6 | 0) >>> 0 <= i23 >>> 0 | (i23 + i6 | 0) >>> 0 > i1 >>> 0) : 0) {
    i14 = 0;
    break;
   }
   L231 : do if (!(HEAP32[70523] & 4)) {
    i2 = HEAP32[70418] | 0;
    L233 : do if (i2) {
     i1 = 282096;
     while (1) {
      i3 = HEAP32[i1 >> 2] | 0;
      if (i3 >>> 0 <= i2 >>> 0 ? (i15 = i1 + 4 | 0, (i3 + (HEAP32[i15 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) : 0) break;
      i1 = HEAP32[i1 + 8 >> 2] | 0;
      if (!i1) {
       i34 = 172;
       break L233;
      }
     }
     i2 = i4 + i5 - (HEAP32[70415] | 0) & 0 - i4;
     if (i2 >>> 0 < 2147483647) {
      i3 = _sbrk(i2 | 0) | 0;
      i23 = (i3 | 0) == ((HEAP32[i1 >> 2] | 0) + (HEAP32[i15 >> 2] | 0) | 0);
      i1 = i23 ? i2 : 0;
      if (i23) {
       if ((i3 | 0) != (-1 | 0)) {
        i16 = i3;
        i15 = i1;
        i34 = 192;
        break L231;
       }
      } else i34 = 182;
     } else i1 = 0;
    } else i34 = 172; while (0);
    do if ((i34 | 0) == 172) {
     i4 = _sbrk(0) | 0;
     if ((i4 | 0) != (-1 | 0)) {
      i1 = HEAP32[70531] | 0;
      if (!(i1 + -1 & i4)) i2 = i6; else i2 = i6 - i4 + (i1 + -1 + i4 & 0 - i1) | 0;
      i1 = HEAP32[70520] | 0;
      i3 = i1 + i2 | 0;
      if (i2 >>> 0 > i8 >>> 0 & i2 >>> 0 < 2147483647) {
       i23 = HEAP32[70522] | 0;
       if ((i23 | 0) != 0 ? i3 >>> 0 <= i1 >>> 0 | i3 >>> 0 > i23 >>> 0 : 0) {
        i1 = 0;
        break;
       }
       i3 = _sbrk(i2 | 0) | 0;
       i1 = (i3 | 0) == (i4 | 0) ? i2 : 0;
       if ((i3 | 0) == (i4 | 0)) {
        i16 = i4;
        i15 = i1;
        i34 = 192;
        break L231;
       } else i34 = 182;
      } else i1 = 0;
     } else i1 = 0;
    } while (0);
    L253 : do if ((i34 | 0) == 182) {
     i4 = 0 - i2 | 0;
     do if (i9 >>> 0 > i2 >>> 0 & (i2 >>> 0 < 2147483647 & (i3 | 0) != (-1 | 0)) ? (i18 = HEAP32[70532] | 0, i18 = i5 - i2 + i18 & 0 - i18, i18 >>> 0 < 2147483647) : 0) if ((_sbrk(i18 | 0) | 0) == (-1 | 0)) {
      _sbrk(i4 | 0) | 0;
      break L253;
     } else {
      i2 = i18 + i2 | 0;
      break;
     } while (0);
     if ((i3 | 0) != (-1 | 0)) {
      i16 = i3;
      i15 = i2;
      i34 = 192;
      break L231;
     }
    } while (0);
    HEAP32[70523] = HEAP32[70523] | 4;
    i34 = 189;
   } else {
    i1 = 0;
    i34 = 189;
   } while (0);
   if ((((i34 | 0) == 189 ? i6 >>> 0 < 2147483647 : 0) ? (i19 = _sbrk(i6 | 0) | 0, i20 = _sbrk(0) | 0, i19 >>> 0 < i20 >>> 0 & ((i19 | 0) != (-1 | 0) & (i20 | 0) != (-1 | 0))) : 0) ? (i21 = (i20 - i19 | 0) >>> 0 > (i8 + 40 | 0) >>> 0, i21) : 0) {
    i16 = i19;
    i15 = i21 ? i20 - i19 | 0 : i1;
    i34 = 192;
   }
   if ((i34 | 0) == 192) {
    i1 = (HEAP32[70520] | 0) + i15 | 0;
    HEAP32[70520] = i1;
    if (i1 >>> 0 > (HEAP32[70521] | 0) >>> 0) HEAP32[70521] = i1;
    i6 = HEAP32[70418] | 0;
    L272 : do if (i6) {
     i4 = 282096;
     do {
      i1 = HEAP32[i4 >> 2] | 0;
      i2 = i4 + 4 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i16 | 0) == (i1 + i3 | 0)) {
       i24 = i4;
       i34 = 202;
       break;
      }
      i4 = HEAP32[i4 + 8 >> 2] | 0;
     } while ((i4 | 0) != 0);
     if (((i34 | 0) == 202 ? (HEAP32[i24 + 12 >> 2] & 8 | 0) == 0 : 0) ? i6 >>> 0 < i16 >>> 0 & i6 >>> 0 >= i1 >>> 0 : 0) {
      HEAP32[i2 >> 2] = i3 + i15;
      i34 = (HEAP32[70415] | 0) + i15 | 0;
      i33 = (i6 + 8 & 7 | 0) == 0 ? 0 : 0 - (i6 + 8) & 7;
      HEAP32[70418] = i6 + i33;
      HEAP32[70415] = i34 - i33;
      HEAP32[i6 + (i33 + 4) >> 2] = i34 - i33 | 1;
      HEAP32[i6 + (i34 + 4) >> 2] = 40;
      HEAP32[70419] = HEAP32[70534];
      break;
     }
     i1 = HEAP32[70416] | 0;
     if (i16 >>> 0 < i1 >>> 0) {
      HEAP32[70416] = i16;
      i11 = i16;
     } else i11 = i1;
     i1 = i16 + i15 | 0;
     i3 = 282096;
     while (1) {
      if ((HEAP32[i3 >> 2] | 0) == (i1 | 0)) {
       i2 = i3;
       i1 = i3;
       i34 = 210;
       break;
      }
      i3 = HEAP32[i3 + 8 >> 2] | 0;
      if (!i3) {
       i1 = 282096;
       break;
      }
     }
     if ((i34 | 0) == 210) if (!(HEAP32[i1 + 12 >> 2] & 8)) {
      HEAP32[i2 >> 2] = i16;
      HEAP32[i1 + 4 >> 2] = (HEAP32[i1 + 4 >> 2] | 0) + i15;
      i13 = i16 + 8 | 0;
      i13 = (i13 & 7 | 0) == 0 ? 0 : 0 - i13 & 7;
      i9 = i16 + (i15 + 8) | 0;
      i9 = (i9 & 7 | 0) == 0 ? 0 : 0 - i9 & 7;
      i1 = i16 + (i9 + i15) | 0;
      i12 = i13 + i8 | 0;
      i14 = i16 + i12 | 0;
      i10 = i1 - (i16 + i13) - i8 | 0;
      HEAP32[i16 + (i13 + 4) >> 2] = i8 | 3;
      L297 : do if ((i1 | 0) != (i6 | 0)) {
       if ((i1 | 0) == (HEAP32[70417] | 0)) {
        i34 = (HEAP32[70414] | 0) + i10 | 0;
        HEAP32[70414] = i34;
        HEAP32[70417] = i14;
        HEAP32[i16 + (i12 + 4) >> 2] = i34 | 1;
        HEAP32[i16 + (i34 + i12) >> 2] = i34;
        break;
       }
       i7 = i15 + 4 | 0;
       i8 = HEAP32[i16 + (i7 + i9) >> 2] | 0;
       if ((i8 & 3 | 0) == 1) {
        L305 : do if (i8 >>> 0 >= 256) {
         i6 = HEAP32[i16 + ((i9 | 24) + i15) >> 2] | 0;
         i2 = HEAP32[i16 + (i15 + 12 + i9) >> 2] | 0;
         L324 : do if ((i2 | 0) == (i1 | 0)) {
          i3 = i16 + (i7 + (i9 | 16)) | 0;
          i2 = HEAP32[i3 >> 2] | 0;
          if (!i2) {
           i3 = i16 + ((i9 | 16) + i15) | 0;
           i2 = HEAP32[i3 >> 2] | 0;
           if (!i2) {
            i30 = 0;
            break;
           }
          }
          while (1) {
           i4 = i2 + 20 | 0;
           i5 = HEAP32[i4 >> 2] | 0;
           if (i5) {
            i2 = i5;
            i3 = i4;
            continue;
           }
           i4 = i2 + 16 | 0;
           i5 = HEAP32[i4 >> 2] | 0;
           if (!i5) break; else {
            i2 = i5;
            i3 = i4;
           }
          }
          if (i3 >>> 0 < i11 >>> 0) _abort(); else {
           HEAP32[i3 >> 2] = 0;
           i30 = i2;
           break;
          }
         } else {
          i3 = HEAP32[i16 + ((i9 | 8) + i15) >> 2] | 0;
          do if (i3 >>> 0 >= i11 >>> 0) {
           if ((HEAP32[i3 + 12 >> 2] | 0) != (i1 | 0)) break;
           if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) break;
           HEAP32[i3 + 12 >> 2] = i2;
           HEAP32[i2 + 8 >> 2] = i3;
           i30 = i2;
           break L324;
          } while (0);
          _abort();
         } while (0);
         if (!i6) break;
         i2 = HEAP32[i16 + (i15 + 28 + i9) >> 2] | 0;
         do if ((i1 | 0) != (HEAP32[281952 + (i2 << 2) >> 2] | 0)) {
          if (i6 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort();
          if ((HEAP32[i6 + 16 >> 2] | 0) == (i1 | 0)) HEAP32[i6 + 16 >> 2] = i30; else HEAP32[i6 + 20 >> 2] = i30;
          if (!i30) break L305;
         } else {
          HEAP32[281952 + (i2 << 2) >> 2] = i30;
          if (i30) break;
          HEAP32[70413] = HEAP32[70413] & ~(1 << i2);
          break L305;
         } while (0);
         i2 = HEAP32[70416] | 0;
         if (i30 >>> 0 < i2 >>> 0) _abort();
         HEAP32[i30 + 24 >> 2] = i6;
         i1 = HEAP32[i16 + ((i9 | 16) + i15) >> 2] | 0;
         do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
          HEAP32[i30 + 16 >> 2] = i1;
          HEAP32[i1 + 24 >> 2] = i30;
          break;
         } while (0);
         i1 = HEAP32[i16 + (i7 + (i9 | 16)) >> 2] | 0;
         if (!i1) break;
         if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
          HEAP32[i30 + 20 >> 2] = i1;
          HEAP32[i1 + 24 >> 2] = i30;
          break;
         }
        } else {
         i2 = HEAP32[i16 + ((i9 | 8) + i15) >> 2] | 0;
         i3 = HEAP32[i16 + (i15 + 12 + i9) >> 2] | 0;
         do if ((i2 | 0) != (281688 + (i8 >>> 3 << 1 << 2) | 0)) {
          if (i2 >>> 0 >= i11 >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i1 | 0) : 0) break;
          _abort();
         } while (0);
         if ((i3 | 0) == (i2 | 0)) {
          HEAP32[70412] = HEAP32[70412] & ~(1 << (i8 >>> 3));
          break;
         }
         do if ((i3 | 0) == (281688 + (i8 >>> 3 << 1 << 2) | 0)) i28 = i3 + 8 | 0; else {
          if (i3 >>> 0 >= i11 >>> 0 ? (HEAP32[i3 + 8 >> 2] | 0) == (i1 | 0) : 0) {
           i28 = i3 + 8 | 0;
           break;
          }
          _abort();
         } while (0);
         HEAP32[i2 + 12 >> 2] = i3;
         HEAP32[i28 >> 2] = i2;
        } while (0);
        i1 = i16 + ((i8 & -8 | i9) + i15) | 0;
        i5 = (i8 & -8) + i10 | 0;
       } else i5 = i10;
       i2 = i1 + 4 | 0;
       HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
       HEAP32[i16 + (i12 + 4) >> 2] = i5 | 1;
       HEAP32[i16 + (i5 + i12) >> 2] = i5;
       i2 = i5 >>> 3;
       if (i5 >>> 0 < 256) {
        i1 = HEAP32[70412] | 0;
        do if (!(i1 & 1 << i2)) {
         HEAP32[70412] = i1 | 1 << i2;
         i31 = 281688 + ((i2 << 1) + 2 << 2) | 0;
         i32 = 281688 + (i2 << 1 << 2) | 0;
        } else {
         i1 = HEAP32[281688 + ((i2 << 1) + 2 << 2) >> 2] | 0;
         if (i1 >>> 0 >= (HEAP32[70416] | 0) >>> 0) {
          i31 = 281688 + ((i2 << 1) + 2 << 2) | 0;
          i32 = i1;
          break;
         }
         _abort();
        } while (0);
        HEAP32[i31 >> 2] = i14;
        HEAP32[i32 + 12 >> 2] = i14;
        HEAP32[i16 + (i12 + 8) >> 2] = i32;
        HEAP32[i16 + (i12 + 12) >> 2] = 281688 + (i2 << 1 << 2);
        break;
       }
       i1 = i5 >>> 8;
       do if (!i1) i4 = 0; else {
        if (i5 >>> 0 > 16777215) {
         i4 = 31;
         break;
        }
        i4 = i1 << ((i1 + 1048320 | 0) >>> 16 & 8) << (((i1 << ((i1 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4);
        i4 = 14 - (((i1 << ((i1 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4 | (i1 + 1048320 | 0) >>> 16 & 8 | (i4 + 245760 | 0) >>> 16 & 2) + (i4 << ((i4 + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
        i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
       } while (0);
       i1 = 281952 + (i4 << 2) | 0;
       HEAP32[i16 + (i12 + 28) >> 2] = i4;
       HEAP32[i16 + (i12 + 20) >> 2] = 0;
       HEAP32[i16 + (i12 + 16) >> 2] = 0;
       i2 = HEAP32[70413] | 0;
       i3 = 1 << i4;
       if (!(i2 & i3)) {
        HEAP32[70413] = i2 | i3;
        HEAP32[i1 >> 2] = i14;
        HEAP32[i16 + (i12 + 24) >> 2] = i1;
        HEAP32[i16 + (i12 + 12) >> 2] = i14;
        HEAP32[i16 + (i12 + 8) >> 2] = i14;
        break;
       }
       i1 = HEAP32[i1 >> 2] | 0;
       L385 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
        i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
        while (1) {
         i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
         i2 = HEAP32[i3 >> 2] | 0;
         if (!i2) break;
         if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
          i33 = i2;
          break L385;
         } else {
          i4 = i4 << 1;
          i1 = i2;
         }
        }
        if (i3 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
         HEAP32[i3 >> 2] = i14;
         HEAP32[i16 + (i12 + 24) >> 2] = i1;
         HEAP32[i16 + (i12 + 12) >> 2] = i14;
         HEAP32[i16 + (i12 + 8) >> 2] = i14;
         break L297;
        }
       } else i33 = i1; while (0);
       i1 = i33 + 8 | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       i34 = HEAP32[70416] | 0;
       if (i2 >>> 0 >= i34 >>> 0 & i33 >>> 0 >= i34 >>> 0) {
        HEAP32[i2 + 12 >> 2] = i14;
        HEAP32[i1 >> 2] = i14;
        HEAP32[i16 + (i12 + 8) >> 2] = i2;
        HEAP32[i16 + (i12 + 12) >> 2] = i33;
        HEAP32[i16 + (i12 + 24) >> 2] = 0;
        break;
       } else _abort();
      } else {
       i34 = (HEAP32[70415] | 0) + i10 | 0;
       HEAP32[70415] = i34;
       HEAP32[70418] = i14;
       HEAP32[i16 + (i12 + 4) >> 2] = i34 | 1;
      } while (0);
      i14 = i16 + (i13 | 8) | 0;
      break L212;
     } else i1 = 282096;
     while (1) {
      i2 = HEAP32[i1 >> 2] | 0;
      if (i2 >>> 0 <= i6 >>> 0 ? (i25 = HEAP32[i1 + 4 >> 2] | 0, (i2 + i25 | 0) >>> 0 > i6 >>> 0) : 0) break;
      i1 = HEAP32[i1 + 8 >> 2] | 0;
     }
     i5 = i2 + (i25 + -47 + ((i2 + (i25 + -39) & 7 | 0) == 0 ? 0 : 0 - (i2 + (i25 + -39)) & 7)) | 0;
     i5 = i5 >>> 0 < (i6 + 16 | 0) >>> 0 ? i6 : i5;
     i34 = i16 + 8 | 0;
     i34 = (i34 & 7 | 0) == 0 ? 0 : 0 - i34 & 7;
     i33 = i15 + -40 - i34 | 0;
     HEAP32[70418] = i16 + i34;
     HEAP32[70415] = i33;
     HEAP32[i16 + (i34 + 4) >> 2] = i33 | 1;
     HEAP32[i16 + (i15 + -36) >> 2] = 40;
     HEAP32[70419] = HEAP32[70534];
     HEAP32[i5 + 4 >> 2] = 27;
     HEAP32[i5 + 8 >> 2] = HEAP32[70524];
     HEAP32[i5 + 8 + 4 >> 2] = HEAP32[70525];
     HEAP32[i5 + 8 + 8 >> 2] = HEAP32[70526];
     HEAP32[i5 + 8 + 12 >> 2] = HEAP32[70527];
     HEAP32[70524] = i16;
     HEAP32[70525] = i15;
     HEAP32[70527] = 0;
     HEAP32[70526] = i5 + 8;
     HEAP32[i5 + 28 >> 2] = 7;
     if ((i5 + 32 | 0) >>> 0 < (i2 + i25 | 0) >>> 0) {
      i1 = i5 + 28 | 0;
      do {
       i34 = i1;
       i1 = i1 + 4 | 0;
       HEAP32[i1 >> 2] = 7;
      } while ((i34 + 8 | 0) >>> 0 < (i2 + i25 | 0) >>> 0);
     }
     if ((i5 | 0) != (i6 | 0)) {
      HEAP32[i5 + 4 >> 2] = HEAP32[i5 + 4 >> 2] & -2;
      HEAP32[i6 + 4 >> 2] = i5 - i6 | 1;
      HEAP32[i5 >> 2] = i5 - i6;
      if ((i5 - i6 | 0) >>> 0 < 256) {
       i1 = HEAP32[70412] | 0;
       if (i1 & 1 << ((i5 - i6 | 0) >>> 3)) {
        i1 = HEAP32[281688 + (((i5 - i6 | 0) >>> 3 << 1) + 2 << 2) >> 2] | 0;
        if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
         i26 = 281688 + (((i5 - i6 | 0) >>> 3 << 1) + 2 << 2) | 0;
         i27 = i1;
        }
       } else {
        HEAP32[70412] = i1 | 1 << ((i5 - i6 | 0) >>> 3);
        i26 = 281688 + (((i5 - i6 | 0) >>> 3 << 1) + 2 << 2) | 0;
        i27 = 281688 + ((i5 - i6 | 0) >>> 3 << 1 << 2) | 0;
       }
       HEAP32[i26 >> 2] = i6;
       HEAP32[i27 + 12 >> 2] = i6;
       HEAP32[i6 + 8 >> 2] = i27;
       HEAP32[i6 + 12 >> 2] = 281688 + ((i5 - i6 | 0) >>> 3 << 1 << 2);
       break;
      }
      if ((i5 - i6 | 0) >>> 8) if ((i5 - i6 | 0) >>> 0 > 16777215) i4 = 31; else {
       i4 = (i5 - i6 | 0) >>> 8 << ((((i5 - i6 | 0) >>> 8) + 1048320 | 0) >>> 16 & 8);
       i4 = 14 - ((i4 + 520192 | 0) >>> 16 & 4 | (((i5 - i6 | 0) >>> 8) + 1048320 | 0) >>> 16 & 8 | ((i4 << ((i4 + 520192 | 0) >>> 16 & 4)) + 245760 | 0) >>> 16 & 2) + (i4 << ((i4 + 520192 | 0) >>> 16 & 4) << (((i4 << ((i4 + 520192 | 0) >>> 16 & 4)) + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
       i4 = (i5 - i6 | 0) >>> (i4 + 7 | 0) & 1 | i4 << 1;
      } else i4 = 0;
      i1 = 281952 + (i4 << 2) | 0;
      HEAP32[i6 + 28 >> 2] = i4;
      HEAP32[i6 + 20 >> 2] = 0;
      HEAP32[i6 + 16 >> 2] = 0;
      i2 = HEAP32[70413] | 0;
      i3 = 1 << i4;
      if (!(i2 & i3)) {
       HEAP32[70413] = i2 | i3;
       HEAP32[i1 >> 2] = i6;
       HEAP32[i6 + 24 >> 2] = i1;
       HEAP32[i6 + 12 >> 2] = i6;
       HEAP32[i6 + 8 >> 2] = i6;
       break;
      }
      i1 = HEAP32[i1 >> 2] | 0;
      L425 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 - i6 | 0)) {
       i4 = i5 - i6 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
       while (1) {
        i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) break;
        if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 - i6 | 0)) {
         i29 = i2;
         break L425;
        } else {
         i4 = i4 << 1;
         i1 = i2;
        }
       }
       if (i3 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
        HEAP32[i3 >> 2] = i6;
        HEAP32[i6 + 24 >> 2] = i1;
        HEAP32[i6 + 12 >> 2] = i6;
        HEAP32[i6 + 8 >> 2] = i6;
        break L272;
       }
      } else i29 = i1; while (0);
      i1 = i29 + 8 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      i34 = HEAP32[70416] | 0;
      if (i2 >>> 0 >= i34 >>> 0 & i29 >>> 0 >= i34 >>> 0) {
       HEAP32[i2 + 12 >> 2] = i6;
       HEAP32[i1 >> 2] = i6;
       HEAP32[i6 + 8 >> 2] = i2;
       HEAP32[i6 + 12 >> 2] = i29;
       HEAP32[i6 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } else {
     i34 = HEAP32[70416] | 0;
     if ((i34 | 0) == 0 | i16 >>> 0 < i34 >>> 0) HEAP32[70416] = i16;
     HEAP32[70524] = i16;
     HEAP32[70525] = i15;
     HEAP32[70527] = 0;
     HEAP32[70421] = HEAP32[70530];
     HEAP32[70420] = -1;
     i1 = 0;
     do {
      i34 = i1 << 1;
      HEAP32[281688 + (i34 + 3 << 2) >> 2] = 281688 + (i34 << 2);
      HEAP32[281688 + (i34 + 2 << 2) >> 2] = 281688 + (i34 << 2);
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != 32);
     i34 = i16 + 8 | 0;
     i34 = (i34 & 7 | 0) == 0 ? 0 : 0 - i34 & 7;
     i33 = i15 + -40 - i34 | 0;
     HEAP32[70418] = i16 + i34;
     HEAP32[70415] = i33;
     HEAP32[i16 + (i34 + 4) >> 2] = i33 | 1;
     HEAP32[i16 + (i15 + -36) >> 2] = 40;
     HEAP32[70419] = HEAP32[70534];
    } while (0);
    i1 = HEAP32[70415] | 0;
    if (i1 >>> 0 > i8 >>> 0) {
     i34 = i1 - i8 | 0;
     HEAP32[70415] = i34;
     i14 = HEAP32[70418] | 0;
     HEAP32[70418] = i14 + i8;
     HEAP32[i14 + (i8 + 4) >> 2] = i34 | 1;
     HEAP32[i14 + 4 >> 2] = i8 | 3;
     i14 = i14 + 8 | 0;
     break;
    }
   }
   HEAP32[(___errno_location() | 0) >> 2] = 12;
   i14 = 0;
  } else i14 = 0;
 } while (0);
 return i14 | 0;
}

function __Z21ConvertRawImageFormat13TextureFormatPKhjiiS_Phj(i8, i2, i3, i9, i7, i6, i5, i4) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 L1 : do if ((i8 | 0) >= 59) {
  L7 : do if ((i8 | 0) >= 88) {
   if ((i8 | 0) >= 1048578) {
    if ((i8 | 0) < 4194324) switch (i8 | 0) {
    case 1048582:
     {
      i10 = 6;
      break L1;
     }
    case 1048583:
    case 1048579:
    case 1048578:
    case 1048580:
     {
      i10 = 8;
      break L1;
     }
    case 1048584:
    case 1048581:
     {
      i10 = 9;
      break L7;
     }
    default:
     {
      i10 = 11;
      break L1;
     }
    }
    switch (i8 | 0) {
    case 4194339:
    case 4194337:
     {
      i10 = 6;
      break L1;
     }
    case 4194334:
    case 4194333:
     {
      i10 = 8;
      break L1;
     }
    case 4194356:
    case 4194354:
    case 4194331:
     {
      i10 = 9;
      break L7;
     }
    case 4194324:
     break;
    default:
     {
      i10 = 11;
      break L1;
     }
    }
    i1 = 24;
    i10 = 12;
    break L1;
   }
   if ((i8 | 0) < 95) switch (i8 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
    {
     i10 = 6;
     break L1;
    }
   case 94:
    {
     i10 = 3;
     break L7;
    }
   default:
    {
     i10 = 11;
     break L1;
    }
   }
   if ((i8 | 0) < 99) switch (i8 | 0) {
   case 98:
   case 97:
   case 96:
   case 95:
    {
     i10 = 3;
     break L7;
    }
   default:
    {
     i10 = 11;
     break L1;
    }
   }
   if ((i8 | 0) < 1048576) switch (i8 | 0) {
   case 115:
    {
     i10 = 8;
     break L1;
    }
   case 99:
    {
     i10 = 3;
     break L7;
    }
   default:
    {
     i10 = 11;
     break L1;
    }
   } else switch (i8 | 0) {
   case 1048577:
    {
     i10 = 8;
     break L1;
    }
   case 1048576:
    {
     i10 = 2;
     break L7;
    }
   default:
    {
     i10 = 11;
     break L1;
    }
   }
  } else {
   switch (i8 | 0) {
   case 87:
   case 69:
   case 68:
   case 67:
    {
     i10 = 6;
     break L1;
    }
   case 86:
   case 85:
   case 59:
    {
     i10 = 8;
     break L1;
    }
   case 72:
   case 71:
   case 70:
    {
     i10 = 2;
     break L7;
    }
   case 84:
   case 83:
   case 82:
   case 81:
   case 80:
   case 79:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
    {
     i10 = 3;
     break L7;
    }
   case 65:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
    {
     i10 = 9;
     break L7;
    }
   case 66:
    break;
   default:
    {
     i10 = 11;
     break L1;
    }
   }
   i1 = 1;
   i10 = 12;
   break L1;
  } while (0);
  if ((i10 | 0) == 2) {
   i1 = Math_imul(((i9 + 3 | 0) / 4 | 0) << 3, (i7 + 3 | 0) / 4 | 0) | 0;
   break;
  } else if ((i10 | 0) == 3) {
   i1 = Math_imul(((i9 + 3 | 0) / 4 | 0) << 4, (i7 + 3 | 0) / 4 | 0) | 0;
   break;
  } else if ((i10 | 0) == 9) {
   i1 = 8;
   i10 = 12;
   break;
  }
 } else switch (i8 | 0) {
 case 0:
  {
   i1 = 0;
   break L1;
  }
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i1 = 128;
   i10 = 12;
   break L1;
  }
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
  {
   i10 = 6;
   break L1;
  }
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
  {
   i10 = 8;
   break L1;
  }
 case 8:
 case 7:
 case 6:
 case 5:
  {
   i1 = 96;
   i10 = 12;
   break L1;
  }
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
  {
   i1 = 64;
   i10 = 12;
   break L1;
  }
 default:
  {
   i10 = 11;
   break L1;
  }
 } while (0);
 if ((i10 | 0) == 6) {
  i1 = 32;
  i10 = 12;
 } else if ((i10 | 0) == 8) {
  i1 = 16;
  i10 = 12;
 } else if ((i10 | 0) == 11) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i11);
  i1 = 0;
  i10 = 12;
 }
 if ((i10 | 0) == 12) i1 = ((Math_imul(Math_imul(i7, i9) | 0, i1) | 0) + 7 | 0) / 8 | 0;
 if ((i1 | 0) != (i3 | 0)) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303653, i11 + 8 | 0);
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 L42 : do if ((i6 | 0) >= 59) {
  L48 : do if ((i6 | 0) >= 88) {
   if ((i6 | 0) >= 1048578) {
    if ((i6 | 0) < 4194324) switch (i6 | 0) {
    case 1048582:
     {
      i10 = 20;
      break L42;
     }
    case 1048583:
    case 1048579:
    case 1048578:
    case 1048580:
     {
      i10 = 22;
      break L42;
     }
    case 1048584:
    case 1048581:
     {
      i10 = 23;
      break L48;
     }
    default:
     {
      i10 = 25;
      break L42;
     }
    }
    switch (i6 | 0) {
    case 4194339:
    case 4194337:
     {
      i10 = 20;
      break L42;
     }
    case 4194334:
    case 4194333:
     {
      i10 = 22;
      break L42;
     }
    case 4194356:
    case 4194354:
    case 4194331:
     {
      i10 = 23;
      break L48;
     }
    case 4194324:
     break;
    default:
     {
      i10 = 25;
      break L42;
     }
    }
    i1 = 24;
    i10 = 26;
    break L42;
   }
   if ((i6 | 0) < 95) switch (i6 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
    {
     i10 = 20;
     break L42;
    }
   case 94:
    {
     i10 = 17;
     break L48;
    }
   default:
    {
     i10 = 25;
     break L42;
    }
   }
   if ((i6 | 0) < 99) switch (i6 | 0) {
   case 98:
   case 97:
   case 96:
   case 95:
    {
     i10 = 17;
     break L48;
    }
   default:
    {
     i10 = 25;
     break L42;
    }
   }
   if ((i6 | 0) < 1048576) switch (i6 | 0) {
   case 115:
    {
     i10 = 22;
     break L42;
    }
   case 99:
    {
     i10 = 17;
     break L48;
    }
   default:
    {
     i10 = 25;
     break L42;
    }
   } else switch (i6 | 0) {
   case 1048577:
    {
     i10 = 22;
     break L42;
    }
   case 1048576:
    {
     i10 = 16;
     break L48;
    }
   default:
    {
     i10 = 25;
     break L42;
    }
   }
  } else {
   switch (i6 | 0) {
   case 87:
   case 69:
   case 68:
   case 67:
    {
     i10 = 20;
     break L42;
    }
   case 86:
   case 85:
   case 59:
    {
     i10 = 22;
     break L42;
    }
   case 72:
   case 71:
   case 70:
    {
     i10 = 16;
     break L48;
    }
   case 84:
   case 83:
   case 82:
   case 81:
   case 80:
   case 79:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
    {
     i10 = 17;
     break L48;
    }
   case 65:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
    {
     i10 = 23;
     break L48;
    }
   case 66:
    break;
   default:
    {
     i10 = 25;
     break L42;
    }
   }
   i1 = 1;
   i10 = 26;
   break L42;
  } while (0);
  if ((i10 | 0) == 16) {
   i1 = Math_imul(((i9 + 3 | 0) / 4 | 0) << 3, (i7 + 3 | 0) / 4 | 0) | 0;
   break;
  } else if ((i10 | 0) == 17) {
   i1 = Math_imul(((i9 + 3 | 0) / 4 | 0) << 4, (i7 + 3 | 0) / 4 | 0) | 0;
   break;
  } else if ((i10 | 0) == 23) {
   i1 = 8;
   i10 = 26;
   break;
  }
 } else switch (i6 | 0) {
 case 0:
  {
   i1 = 0;
   break L42;
  }
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i1 = 128;
   i10 = 26;
   break L42;
  }
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
  {
   i10 = 20;
   break L42;
  }
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
  {
   i10 = 22;
   break L42;
  }
 case 8:
 case 7:
 case 6:
 case 5:
  {
   i1 = 96;
   i10 = 26;
   break L42;
  }
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
  {
   i1 = 64;
   i10 = 26;
   break L42;
  }
 default:
  {
   i10 = 25;
   break L42;
  }
 } while (0);
 if ((i10 | 0) == 20) {
  i1 = 32;
  i10 = 26;
 } else if ((i10 | 0) == 22) {
  i1 = 16;
  i10 = 26;
 } else if ((i10 | 0) == 25) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i11 + 16 | 0);
  i1 = 0;
  i10 = 26;
 }
 if ((i10 | 0) == 26) i1 = ((Math_imul(Math_imul(i7, i9) | 0, i1) | 0) + 7 | 0) / 8 | 0;
 if ((i1 | 0) != (i4 | 0)) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303714, i11 + 24 | 0);
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((i7 | 0) <= 0) {
  i10 = 1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = i5;
 i5 = 0;
 while (1) {
  if ((i9 | 0) > 0) switch (i8 | 0) {
  case 1:
   {
    i4 = 0;
    while (1) {
     __Z18ConvertPixelFormat13TextureFormatPKhS_Ph(1, i2, i6, i1) | 0;
     i3 = i2 + 16 | 0;
     L169 : do if ((i6 | 0) >= 59) {
      L175 : do if ((i6 | 0) < 88) switch (i6 | 0) {
      case 87:
      case 69:
      case 68:
      case 67:
       {
        i10 = 41;
        break L169;
       }
      case 86:
      case 85:
      case 59:
       {
        i10 = 39;
        break L169;
       }
      case 65:
      case 64:
      case 63:
      case 62:
      case 61:
      case 60:
       {
        i10 = 38;
        break L175;
       }
      case 84:
      case 83:
      case 82:
      case 78:
      case 77:
      case 76:
      case 75:
      case 74:
      case 73:
       {
        i10 = 35;
        break L175;
       }
      case 66:
       {
        i2 = 0;
        break L169;
       }
      case 81:
      case 80:
      case 79:
      case 72:
      case 71:
      case 70:
       {
        i2 = 0;
        break L169;
       }
      default:
       {
        i10 = 44;
        break L169;
       }
      } else {
       if ((i6 | 0) >= 1048578) {
        if ((i6 | 0) < 4194324) switch (i6 | 0) {
        case 1048582:
         {
          i10 = 41;
          break L169;
         }
        case 1048583:
        case 1048579:
        case 1048578:
        case 1048580:
         {
          i10 = 39;
          break L169;
         }
        case 1048584:
        case 1048581:
         {
          i10 = 38;
          break L175;
         }
        default:
         {
          i10 = 44;
          break L169;
         }
        }
        switch (i6 | 0) {
        case 4194339:
        case 4194337:
         {
          i10 = 41;
          break L169;
         }
        case 4194334:
        case 4194333:
         {
          i10 = 39;
          break L169;
         }
        case 4194356:
        case 4194354:
        case 4194331:
         {
          i10 = 38;
          break L175;
         }
        case 4194324:
         break;
        default:
         {
          i10 = 44;
          break L169;
         }
        }
        i2 = 3;
        break L169;
       }
       if ((i6 | 0) < 95) switch (i6 | 0) {
       case 93:
       case 92:
       case 91:
       case 90:
       case 89:
       case 88:
        {
         i10 = 41;
         break L169;
        }
       case 94:
        {
         i10 = 35;
         break L175;
        }
       default:
        {
         i10 = 44;
         break L169;
        }
       }
       if ((i6 | 0) < 99) switch (i6 | 0) {
       case 98:
       case 97:
       case 96:
       case 95:
        {
         i10 = 35;
         break L175;
        }
       default:
        {
         i10 = 44;
         break L169;
        }
       }
       if ((i6 | 0) < 1048576) switch (i6 | 0) {
       case 115:
        {
         i10 = 39;
         break L169;
        }
       case 99:
        {
         i10 = 35;
         break L175;
        }
       default:
        {
         i10 = 44;
         break L169;
        }
       }
       switch (i6 | 0) {
       case 1048577:
        {
         i10 = 39;
         break L169;
        }
       case 1048576:
        break;
       default:
        {
         i10 = 44;
         break L169;
        }
       }
       i2 = 0;
       break L169;
      } while (0);
      if ((i10 | 0) == 35) {
       i10 = 0;
       i2 = 1;
       break;
      } else if ((i10 | 0) == 38) {
       i10 = 0;
       i2 = 1;
       break;
      }
     } else switch (i6 | 0) {
     case 4:
     case 3:
     case 2:
     case 1:
      {
       i2 = 16;
       break L169;
      }
     case 47:
     case 46:
     case 45:
     case 44:
     case 43:
     case 42:
     case 41:
     case 40:
     case 39:
     case 38:
     case 37:
     case 36:
     case 35:
     case 34:
     case 33:
     case 32:
     case 31:
     case 30:
     case 29:
     case 28:
     case 27:
     case 26:
     case 25:
     case 24:
     case 23:
      {
       i10 = 41;
       break L169;
      }
     case 58:
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       i10 = 39;
       break L169;
      }
     case 8:
     case 7:
     case 6:
     case 5:
      {
       i2 = 12;
       break L169;
      }
     case 22:
     case 21:
     case 20:
     case 19:
     case 18:
     case 17:
     case 16:
     case 15:
     case 14:
     case 13:
     case 12:
     case 11:
     case 10:
     case 9:
      {
       i2 = 8;
       break L169;
      }
     default:
      {
       i10 = 44;
       break L169;
      }
     } while (0);
     if ((i10 | 0) == 39) {
      i10 = 0;
      i2 = 2;
     } else if ((i10 | 0) == 41) {
      i10 = 0;
      i2 = 4;
     } else if ((i10 | 0) == 44) {
      i10 = 0;
      __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i11 + 32 | 0);
      i2 = 0;
     }
     i1 = i1 + i2 | 0;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (i9 | 0)) {
      i2 = i3;
      break;
     } else i2 = i3;
    }
    break;
   }
  case 2:
   {
    i4 = 0;
    while (1) {
     __Z18ConvertPixelFormat13TextureFormatPKhS_Ph(2, i2, i6, i1) | 0;
     i3 = i2 + 16 | 0;
     L208 : do if ((i6 | 0) >= 59) {
      L214 : do if ((i6 | 0) < 88) switch (i6 | 0) {
      case 87:
      case 69:
      case 68:
      case 67:
       {
        i10 = 54;
        break L208;
       }
      case 86:
      case 85:
      case 59:
       {
        i10 = 52;
        break L208;
       }
      case 65:
      case 64:
      case 63:
      case 62:
      case 61:
      case 60:
       {
        i10 = 51;
        break L214;
       }
      case 84:
      case 83:
      case 82:
      case 78:
      case 77:
      case 76:
      case 75:
      case 74:
      case 73:
       {
        i10 = 48;
        break L214;
       }
      case 66:
       {
        i2 = 0;
        break L208;
       }
      case 81:
      case 80:
      case 79:
      case 72:
      case 71:
      case 70:
       {
        i2 = 0;
        break L208;
       }
      default:
       {
        i10 = 57;
        break L208;
       }
      } else {
       if ((i6 | 0) >= 1048578) {
        if ((i6 | 0) < 4194324) switch (i6 | 0) {
        case 1048582:
         {
          i10 = 54;
          break L208;
         }
        case 1048583:
        case 1048579:
        case 1048578:
        case 1048580:
         {
          i10 = 52;
          break L208;
         }
        case 1048584:
        case 1048581:
         {
          i10 = 51;
          break L214;
         }
        default:
         {
          i10 = 57;
          break L208;
         }
        }
        switch (i6 | 0) {
        case 4194339:
        case 4194337:
         {
          i10 = 54;
          break L208;
         }
        case 4194334:
        case 4194333:
         {
          i10 = 52;
          break L208;
         }
        case 4194356:
        case 4194354:
        case 4194331:
         {
          i10 = 51;
          break L214;
         }
        case 4194324:
         break;
        default:
         {
          i10 = 57;
          break L208;
         }
        }
        i2 = 3;
        break L208;
       }
       if ((i6 | 0) < 95) switch (i6 | 0) {
       case 93:
       case 92:
       case 91:
       case 90:
       case 89:
       case 88:
        {
         i10 = 54;
         break L208;
        }
       case 94:
        {
         i10 = 48;
         break L214;
        }
       default:
        {
         i10 = 57;
         break L208;
        }
       }
       if ((i6 | 0) < 99) switch (i6 | 0) {
       case 98:
       case 97:
       case 96:
       case 95:
        {
         i10 = 48;
         break L214;
        }
       default:
        {
         i10 = 57;
         break L208;
        }
       }
       if ((i6 | 0) < 1048576) switch (i6 | 0) {
       case 115:
        {
         i10 = 52;
         break L208;
        }
       case 99:
        {
         i10 = 48;
         break L214;
        }
       default:
        {
         i10 = 57;
         break L208;
        }
       }
       switch (i6 | 0) {
       case 1048577:
        {
         i10 = 52;
         break L208;
        }
       case 1048576:
        break;
       default:
        {
         i10 = 57;
         break L208;
        }
       }
       i2 = 0;
       break L208;
      } while (0);
      if ((i10 | 0) == 48) {
       i10 = 0;
       i2 = 1;
       break;
      } else if ((i10 | 0) == 51) {
       i10 = 0;
       i2 = 1;
       break;
      }
     } else switch (i6 | 0) {
     case 4:
     case 3:
     case 2:
     case 1:
      {
       i2 = 16;
       break L208;
      }
     case 47:
     case 46:
     case 45:
     case 44:
     case 43:
     case 42:
     case 41:
     case 40:
     case 39:
     case 38:
     case 37:
     case 36:
     case 35:
     case 34:
     case 33:
     case 32:
     case 31:
     case 30:
     case 29:
     case 28:
     case 27:
     case 26:
     case 25:
     case 24:
     case 23:
      {
       i10 = 54;
       break L208;
      }
     case 58:
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       i10 = 52;
       break L208;
      }
     case 8:
     case 7:
     case 6:
     case 5:
      {
       i2 = 12;
       break L208;
      }
     case 22:
     case 21:
     case 20:
     case 19:
     case 18:
     case 17:
     case 16:
     case 15:
     case 14:
     case 13:
     case 12:
     case 11:
     case 10:
     case 9:
      {
       i2 = 8;
       break L208;
      }
     default:
      {
       i10 = 57;
       break L208;
      }
     } while (0);
     if ((i10 | 0) == 52) {
      i10 = 0;
      i2 = 2;
     } else if ((i10 | 0) == 54) {
      i10 = 0;
      i2 = 4;
     } else if ((i10 | 0) == 57) {
      i10 = 0;
      __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i11 + 40 | 0);
      i2 = 0;
     }
     i1 = i1 + i2 | 0;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (i9 | 0)) {
      i2 = i3;
      break;
     } else i2 = i3;
    }
    break;
   }
  default:
   {
    i3 = i2;
    i4 = 0;
    while (1) {
     __Z18ConvertPixelFormat13TextureFormatPKhS_Ph(i8, i3, i6, i1) | 0;
     L93 : do if ((i8 | 0) >= 59) {
      L99 : do if ((i8 | 0) < 88) switch (i8 | 0) {
      case 87:
      case 69:
      case 68:
      case 67:
       {
        i10 = 62;
        break L93;
       }
      case 86:
      case 85:
      case 59:
       {
        i10 = 64;
        break L93;
       }
      case 65:
      case 64:
      case 63:
      case 62:
      case 61:
      case 60:
       {
        i10 = 65;
        break L99;
       }
      case 84:
      case 83:
      case 82:
      case 78:
      case 77:
      case 76:
      case 75:
      case 74:
      case 73:
       {
        i10 = 68;
        break L99;
       }
      case 66:
       {
        i2 = 0;
        break L93;
       }
      case 81:
      case 80:
      case 79:
      case 72:
      case 71:
      case 70:
       {
        i2 = 0;
        break L93;
       }
      default:
       {
        i10 = 70;
        break L93;
       }
      } else {
       if ((i8 | 0) >= 1048578) {
        if ((i8 | 0) < 4194324) switch (i8 | 0) {
        case 1048582:
         {
          i10 = 62;
          break L93;
         }
        case 1048583:
        case 1048579:
        case 1048578:
        case 1048580:
         {
          i10 = 64;
          break L93;
         }
        case 1048584:
        case 1048581:
         {
          i10 = 65;
          break L99;
         }
        default:
         {
          i10 = 70;
          break L93;
         }
        }
        switch (i8 | 0) {
        case 4194339:
        case 4194337:
         {
          i10 = 62;
          break L93;
         }
        case 4194334:
        case 4194333:
         {
          i10 = 64;
          break L93;
         }
        case 4194356:
        case 4194354:
        case 4194331:
         {
          i10 = 65;
          break L99;
         }
        case 4194324:
         break;
        default:
         {
          i10 = 70;
          break L93;
         }
        }
        i2 = 3;
        break L93;
       }
       if ((i8 | 0) < 95) switch (i8 | 0) {
       case 93:
       case 92:
       case 91:
       case 90:
       case 89:
       case 88:
        {
         i10 = 62;
         break L93;
        }
       case 94:
        {
         i10 = 68;
         break L99;
        }
       default:
        {
         i10 = 70;
         break L93;
        }
       }
       if ((i8 | 0) < 99) switch (i8 | 0) {
       case 98:
       case 97:
       case 96:
       case 95:
        {
         i10 = 68;
         break L99;
        }
       default:
        {
         i10 = 70;
         break L93;
        }
       }
       if ((i8 | 0) < 1048576) switch (i8 | 0) {
       case 115:
        {
         i10 = 64;
         break L93;
        }
       case 99:
        {
         i10 = 68;
         break L99;
        }
       default:
        {
         i10 = 70;
         break L93;
        }
       }
       switch (i8 | 0) {
       case 1048577:
        {
         i10 = 64;
         break L93;
        }
       case 1048576:
        break;
       default:
        {
         i10 = 70;
         break L93;
        }
       }
       i2 = 0;
       break L93;
      } while (0);
      if ((i10 | 0) == 65) {
       i10 = 0;
       i2 = 1;
       break;
      } else if ((i10 | 0) == 68) {
       i10 = 0;
       i2 = 1;
       break;
      }
     } else switch (i8 | 0) {
     case 4:
     case 3:
     case 2:
     case 1:
      {
       i2 = 16;
       break L93;
      }
     case 47:
     case 46:
     case 45:
     case 44:
     case 43:
     case 42:
     case 41:
     case 40:
     case 39:
     case 38:
     case 37:
     case 36:
     case 35:
     case 34:
     case 33:
     case 32:
     case 31:
     case 30:
     case 29:
     case 28:
     case 27:
     case 26:
     case 25:
     case 24:
     case 23:
      {
       i10 = 62;
       break L93;
      }
     case 58:
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       i10 = 64;
       break L93;
      }
     case 8:
     case 7:
     case 6:
     case 5:
      {
       i2 = 12;
       break L93;
      }
     case 22:
     case 21:
     case 20:
     case 19:
     case 18:
     case 17:
     case 16:
     case 15:
     case 14:
     case 13:
     case 12:
     case 11:
     case 10:
     case 9:
      {
       i2 = 8;
       break L93;
      }
     default:
      {
       i10 = 70;
       break L93;
      }
     } while (0);
     if ((i10 | 0) == 62) {
      i10 = 0;
      i2 = 4;
     } else if ((i10 | 0) == 64) {
      i10 = 0;
      i2 = 2;
     } else if ((i10 | 0) == 70) {
      i10 = 0;
      __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i11 + 48 | 0);
      i2 = 0;
     }
     i3 = i3 + i2 | 0;
     L130 : do if ((i6 | 0) >= 59) {
      L136 : do if ((i6 | 0) < 88) switch (i6 | 0) {
      case 87:
      case 69:
      case 68:
      case 67:
       {
        i10 = 74;
        break L130;
       }
      case 86:
      case 85:
      case 59:
       {
        i10 = 76;
        break L130;
       }
      case 65:
      case 64:
      case 63:
      case 62:
      case 61:
      case 60:
       {
        i10 = 77;
        break L136;
       }
      case 84:
      case 83:
      case 82:
      case 78:
      case 77:
      case 76:
      case 75:
      case 74:
      case 73:
       {
        i10 = 80;
        break L136;
       }
      case 66:
       {
        i2 = 0;
        break L130;
       }
      case 81:
      case 80:
      case 79:
      case 72:
      case 71:
      case 70:
       {
        i2 = 0;
        break L130;
       }
      default:
       {
        i10 = 82;
        break L130;
       }
      } else {
       if ((i6 | 0) >= 1048578) {
        if ((i6 | 0) < 4194324) switch (i6 | 0) {
        case 1048582:
         {
          i10 = 74;
          break L130;
         }
        case 1048583:
        case 1048579:
        case 1048578:
        case 1048580:
         {
          i10 = 76;
          break L130;
         }
        case 1048584:
        case 1048581:
         {
          i10 = 77;
          break L136;
         }
        default:
         {
          i10 = 82;
          break L130;
         }
        }
        switch (i6 | 0) {
        case 4194339:
        case 4194337:
         {
          i10 = 74;
          break L130;
         }
        case 4194334:
        case 4194333:
         {
          i10 = 76;
          break L130;
         }
        case 4194356:
        case 4194354:
        case 4194331:
         {
          i10 = 77;
          break L136;
         }
        case 4194324:
         break;
        default:
         {
          i10 = 82;
          break L130;
         }
        }
        i2 = 3;
        break L130;
       }
       if ((i6 | 0) < 95) switch (i6 | 0) {
       case 93:
       case 92:
       case 91:
       case 90:
       case 89:
       case 88:
        {
         i10 = 74;
         break L130;
        }
       case 94:
        {
         i10 = 80;
         break L136;
        }
       default:
        {
         i10 = 82;
         break L130;
        }
       }
       if ((i6 | 0) < 99) switch (i6 | 0) {
       case 98:
       case 97:
       case 96:
       case 95:
        {
         i10 = 80;
         break L136;
        }
       default:
        {
         i10 = 82;
         break L130;
        }
       }
       if ((i6 | 0) < 1048576) switch (i6 | 0) {
       case 115:
        {
         i10 = 76;
         break L130;
        }
       case 99:
        {
         i10 = 80;
         break L136;
        }
       default:
        {
         i10 = 82;
         break L130;
        }
       }
       switch (i6 | 0) {
       case 1048577:
        {
         i10 = 76;
         break L130;
        }
       case 1048576:
        break;
       default:
        {
         i10 = 82;
         break L130;
        }
       }
       i2 = 0;
       break L130;
      } while (0);
      if ((i10 | 0) == 77) {
       i10 = 0;
       i2 = 1;
       break;
      } else if ((i10 | 0) == 80) {
       i10 = 0;
       i2 = 1;
       break;
      }
     } else switch (i6 | 0) {
     case 4:
     case 3:
     case 2:
     case 1:
      {
       i2 = 16;
       break L130;
      }
     case 47:
     case 46:
     case 45:
     case 44:
     case 43:
     case 42:
     case 41:
     case 40:
     case 39:
     case 38:
     case 37:
     case 36:
     case 35:
     case 34:
     case 33:
     case 32:
     case 31:
     case 30:
     case 29:
     case 28:
     case 27:
     case 26:
     case 25:
     case 24:
     case 23:
      {
       i10 = 74;
       break L130;
      }
     case 58:
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       i10 = 76;
       break L130;
      }
     case 8:
     case 7:
     case 6:
     case 5:
      {
       i2 = 12;
       break L130;
      }
     case 22:
     case 21:
     case 20:
     case 19:
     case 18:
     case 17:
     case 16:
     case 15:
     case 14:
     case 13:
     case 12:
     case 11:
     case 10:
     case 9:
      {
       i2 = 8;
       break L130;
      }
     default:
      {
       i10 = 82;
       break L130;
      }
     } while (0);
     if ((i10 | 0) == 74) {
      i10 = 0;
      i2 = 4;
     } else if ((i10 | 0) == 76) {
      i10 = 0;
      i2 = 2;
     } else if ((i10 | 0) == 82) {
      i10 = 0;
      __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i11 + 56 | 0);
      i2 = 0;
     }
     i1 = i1 + i2 | 0;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (i9 | 0)) {
      i2 = i3;
      break;
     }
    }
   }
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == (i7 | 0)) {
   i1 = 1;
   break;
  }
 }
 STACKTOP = i11;
 return i1 | 0;
}

function _ps_hints_apply(i18, i14, i22, i19) {
 i18 = i18 | 0;
 i14 = i14 | 0;
 i22 = i22 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i3 = HEAP16[i14 + 2 >> 1] | 0;
 if (!(i3 << 16 >> 16)) {
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 if (!(HEAP16[i14 >> 1] | 0)) {
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 i1 = i23;
 i2 = i1 + 128 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i16 = HEAP32[i22 >> 2] | 0;
 HEAP32[i23 + 16 >> 2] = i16;
 HEAP32[i23 + 8 >> 2] = _ft_mem_realloc(i16, 48, 0, i3 << 16 >> 16, 0, i23 + 136 | 0) | 0;
 i2 = HEAP32[i23 + 136 >> 2] | 0;
 if (!i2) {
  i1 = _ft_mem_realloc(i16, 8, 0, HEAP16[i14 >> 1] | 0, 0, i23 + 136 | 0) | 0;
  HEAP32[i23 + 12 >> 2] = i1;
  i2 = HEAP32[i23 + 136 >> 2] | 0;
  if (!i2) {
   i10 = HEAP16[i14 + 2 >> 1] | 0;
   HEAP32[i23 >> 2] = i10 << 16 >> 16;
   i7 = HEAP16[i14 >> 1] | 0;
   HEAP32[i23 + 4 >> 2] = i7 << 16 >> 16;
   i13 = HEAP32[i23 + 8 >> 2] | 0;
   if (i7 << 16 >> 16) {
    i8 = HEAP32[i14 + 12 >> 2] | 0;
    i9 = 0;
    i6 = 0;
    while (1) {
     i2 = HEAP16[i8 + (i6 << 1) >> 1] | 0;
     i5 = i9;
     i9 = i2 + 1 | 0;
     i3 = i9 - i5 | 0;
     HEAP32[i1 >> 2] = i13 + (i5 * 48 | 0);
     HEAP32[i1 + 4 >> 2] = i3;
     if ((i3 | 0) > 0) {
      HEAP32[i13 + (i5 * 48 | 0) >> 2] = i13 + (i2 * 48 | 0);
      HEAP32[i13 + (i5 * 48 | 0) + 8 >> 2] = i1;
      if ((i3 | 0) > 1) {
       i4 = i13 + (i5 * 48 | 0) | 0;
       do {
        i20 = i4;
        i4 = i4 + 48 | 0;
        HEAP32[i20 + 4 >> 2] = i4;
        HEAP32[i4 >> 2] = i20;
        HEAP32[i20 + 56 >> 2] = i1;
        i3 = i3 + -1 | 0;
       } while ((i3 | 0) > 1);
      } else i2 = i5;
      HEAP32[i13 + (i2 * 48 | 0) + 4 >> 2] = i13 + (i5 * 48 | 0);
     }
     i6 = i6 + 1 | 0;
     if (i6 >>> 0 >= i7 << 16 >> 16 >>> 0) break; else i1 = i1 + 8 | 0;
    }
   }
   i12 = HEAP32[i14 + 4 >> 2] | 0;
   if (i10 << 16 >> 16) {
    i10 = 0;
    i11 = i13;
    while (1) {
     i1 = ((HEAP32[i11 >> 2] | 0) - i13 | 0) / 48 | 0;
     i3 = ((HEAP32[i11 + 4 >> 2] | 0) - i13 | 0) / 48 | 0;
     if (!(HEAP8[(HEAP32[i14 + 8 >> 2] | 0) + i10 >> 0] & 1)) HEAP32[i11 + 12 >> 2] = 1;
     i9 = HEAP32[i12 + (i10 << 3) >> 2] | 0;
     i8 = i9 - (HEAP32[i12 + (i1 << 3) >> 2] | 0) | 0;
     i4 = HEAP32[i12 + (i10 << 3) + 4 >> 2] | 0;
     i7 = i4 - (HEAP32[i12 + (i1 << 3) + 4 >> 2] | 0) | 0;
     i1 = (i8 | 0) > -1 ? i8 : 0 - i8 | 0;
     i2 = (i7 | 0) > -1 ? i7 : 0 - i7 | 0;
     if ((i2 * 12 | 0) >= (i1 | 0)) if ((i1 * 12 | 0) < (i2 | 0)) i6 = (i7 >> 31 & 2) + -1 | 0; else i6 = 4; else i6 = i8 >> 31 & -4 | 2;
     HEAP8[i11 + 20 >> 0] = i6;
     i5 = (HEAP32[i12 + (i3 << 3) >> 2] | 0) - i9 | 0;
     i3 = (HEAP32[i12 + (i3 << 3) + 4 >> 2] | 0) - i4 | 0;
     i1 = (i5 | 0) > -1 ? i5 : 0 - i5 | 0;
     i2 = (i3 | 0) > -1 ? i3 : 0 - i3 | 0;
     if ((i2 * 12 | 0) >= (i1 | 0)) if ((i1 * 12 | 0) < (i2 | 0)) i9 = (i3 >> 31 & 2) + -1 | 0; else i9 = 4; else i9 = i5 >> 31 & -4 | 2;
     HEAP8[i11 + 21 >> 0] = i9;
     i2 = i11 + 12 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     do if (!(i1 & 1)) {
      if ((i6 | 0) == (i9 | 0)) {
       if ((i6 | 0) == 4) {
        if (!(_ft_corner_is_flat(i8, i7, i5, i3) | 0)) break;
        i1 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i2 >> 2] = i1 | 2;
      }
     } else HEAP32[i2 >> 2] = i1 | 2; while (0);
     i10 = i10 + 1 | 0;
     i2 = HEAP32[i23 >> 2] | 0;
     if (i10 >>> 0 >= i2 >>> 0) break; else i11 = i11 + 48 | 0;
    }
    HEAP32[i23 + 20 >> 2] = i14;
    HEAP32[i23 + 24 >> 2] = i22;
    if (i2) {
     i3 = HEAP32[i23 + 8 >> 2] | 0;
     i1 = HEAP32[i14 + 4 >> 2] | 0;
     while (1) {
      HEAP32[i3 + 16 >> 2] = 0;
      HEAP32[i3 + 32 >> 2] = 0;
      HEAP32[i3 + 36 >> 2] = HEAP32[i1 >> 2];
      HEAP32[i3 + 40 >> 2] = HEAP32[i1 + 4 >> 2];
      i2 = i2 + -1 | 0;
      if (!i2) break; else {
       i3 = i3 + 48 | 0;
       i1 = i1 + 8 | 0;
      }
     }
    }
   } else {
    HEAP32[i23 + 20 >> 2] = i14;
    HEAP32[i23 + 24 >> 2] = i22;
   }
   if (HEAP32[i23 + 4 >> 2] | 0) {
    i15 = 0;
    do {
     i1 = HEAP32[i23 + 12 >> 2] | 0;
     L57 : do if ((HEAP32[i1 + (i15 << 3) + 4 >> 2] | 0) >>> 0 >= 4) {
      i13 = HEAP32[i1 + (i15 << 3) >> 2] | 0;
      i1 = i13;
      do {
       i1 = HEAP32[i1 + 4 >> 2] | 0;
       if ((i1 | 0) == (i13 | 0)) break L57;
       i7 = HEAP32[i1 + 36 >> 2] | 0;
       i8 = HEAP32[i13 + 36 >> 2] | 0;
       i10 = HEAP32[i1 + 40 >> 2] | 0;
       i11 = HEAP32[i13 + 40 >> 2] | 0;
      } while ((i7 | 0) == (i8 | 0) & (i10 | 0) == (i11 | 0));
      i2 = HEAP32[i13 >> 2] | 0;
      if ((i2 | 0) != (i13 | 0)) {
       i9 = i8;
       i3 = i11;
       i4 = i13;
       while (1) {
        i5 = i2 + 36 | 0;
        i24 = HEAP32[i5 >> 2] | 0;
        i12 = i9 - i24 | 0;
        i6 = i2 + 40 | 0;
        i20 = HEAP32[i6 >> 2] | 0;
        i14 = i3 - i20 | 0;
        if (!((i9 | 0) == (i24 | 0) & (i3 | 0) == (i20 | 0)) ? (i17 = _ft_corner_orientation(i7 - i8 | 0, i10 - i11 | 0, i12, i14) | 0, (i17 | 0) != 0) : 0) break;
        i3 = HEAP32[i2 >> 2] | 0;
        if ((i3 | 0) == (i13 | 0)) break L57;
        i4 = i2;
        i2 = i3;
        i9 = HEAP32[i5 >> 2] | 0;
        i3 = HEAP32[i6 >> 2] | 0;
       }
       i11 = i14;
       i13 = i17;
       i3 = i4;
       while (1) {
        i9 = i1;
        i2 = 0;
        while (1) {
         i1 = HEAP32[i9 + 4 >> 2] | 0;
         i2 = (i1 | 0) == (i4 | 0) ? 1 : i2;
         i5 = HEAP32[i1 + 36 >> 2] | 0;
         i6 = HEAP32[i9 + 36 >> 2] | 0;
         i7 = HEAP32[i1 + 40 >> 2] | 0;
         i8 = HEAP32[i9 + 40 >> 2] | 0;
         if ((i5 | 0) == (i6 | 0) & (i7 | 0) == (i8 | 0)) {
          i9 = i1;
          continue;
         }
         i10 = _ft_corner_orientation(i12, i11, i5 - i6 | 0, i7 - i8 | 0) | 0;
         if (!i10) i9 = i1; else break;
        }
        if ((i10 ^ i13 | 0) < 0) {
         do {
          i24 = i3 + 12 | 0;
          HEAP32[i24 >> 2] = HEAP32[i24 >> 2] | 4;
          i3 = HEAP32[i3 + 4 >> 2] | 0;
         } while ((i3 | 0) != (i9 | 0));
         HEAP32[i9 + 12 >> 2] = HEAP32[i9 + 12 >> 2] | 4;
        }
        if (!i2) {
         i12 = i5 - i6 | 0;
         i11 = i7 - i8 | 0;
         i13 = i10;
         i3 = i9;
        } else break;
       }
      }
     } while (0);
     i15 = i15 + 1 | 0;
    } while (i15 >>> 0 < (HEAP32[i23 + 4 >> 2] | 0) >>> 0);
   }
   i1 = _psh_hint_table_init(i23 + 28 | 0, i18 + 16 | 0, i18 + 28 | 0, i16) | 0;
   HEAP32[i23 + 136 >> 2] = i1;
   if (!i1) {
    i2 = _psh_hint_table_init(i23 + 68 | 0, i18 + 52 | 0, i18 + 64 | 0, i16) | 0;
    if (!i2) {
     i20 = HEAP32[i23 + 24 >> 2] | 0;
     i18 = HEAP32[i20 + 200 >> 2] | 0;
     i20 = HEAP32[i20 + 404 >> 2] | 0;
     i1 = _FT_MulFix(HEAP32[i22 + 416 >> 2] | 0, i20) | 0;
     if ((i1 + 32 & -64 | 0) == 0 | (i1 | 0) == (i1 + 32 & -64 | 0)) i17 = 1; else {
      i17 = _FT_MulDiv(i20, i1 + 32 & -64, i1) | 0;
      _psh_globals_set_scale(HEAP32[i23 + 24 >> 2] | 0, i18 - ((i1 + 32 & -64 | 0) < (i1 | 0) ? (i18 | 0) / 50 | 0 : 0) | 0, i17, 0, 0) | 0;
      i17 = 0;
     }
     HEAP8[i23 + 120 >> 0] = 1;
     HEAP8[i23 + 121 >> 0] = 1;
     HEAP8[i23 + 122 >> 0] = (i19 & -2 | 0) == 2 & 1;
     HEAP8[i23 + 123 >> 0] = ((i19 | 0) == 2 | (i19 | 0) == 4) & 1;
     HEAP8[i23 + 124 >> 0] = (i19 | 0) != 1 & 1;
     i16 = 0;
     while (1) {
      i11 = HEAP32[i23 >> 2] | 0;
      i12 = HEAP32[i23 + 8 >> 2] | 0;
      i1 = HEAP32[(HEAP32[i23 + 20 >> 2] | 0) + 4 >> 2] | 0;
      if (i11) if (!i16) {
       i2 = i11;
       i3 = i12;
       while (1) {
        HEAP32[i3 + 16 >> 2] = 0;
        HEAP32[i3 + 32 >> 2] = 0;
        HEAP32[i3 + 36 >> 2] = HEAP32[i1 >> 2];
        HEAP32[i3 + 40 >> 2] = HEAP32[i1 + 4 >> 2];
        i2 = i2 + -1 | 0;
        if (!i2) break; else {
         i3 = i3 + 48 | 0;
         i1 = i1 + 8 | 0;
        }
       }
      } else {
       i2 = i11;
       i3 = i12;
       while (1) {
        HEAP32[i3 + 16 >> 2] = 0;
        HEAP32[i3 + 32 >> 2] = 0;
        HEAP32[i3 + 36 >> 2] = HEAP32[i1 + 4 >> 2];
        HEAP32[i3 + 40 >> 2] = HEAP32[i1 >> 2];
        i2 = i2 + -1 | 0;
        if (!i2) break; else {
         i3 = i3 + 48 | 0;
         i1 = i1 + 8 | 0;
        }
       }
      }
      i8 = HEAP32[i23 + 4 >> 2] | 0;
      L98 : do if (!i8) i1 = 0; else {
       i10 = HEAP32[i23 + 12 >> 2] | 0;
       i1 = 0;
       while (1) {
        i3 = HEAP32[i10 + (i1 << 3) >> 2] | 0;
        L102 : do if (HEAP32[i10 + (i1 << 3) + 4 >> 2] | 0) {
         i2 = i3;
         do {
          i2 = HEAP32[i2 >> 2] | 0;
          if ((i2 | 0) == (i3 | 0)) {
           i21 = 94;
           break L98;
          }
         } while ((HEAP32[i2 + 36 >> 2] | 0) == (HEAP32[i3 + 36 >> 2] | 0));
         i7 = HEAP32[i2 + 4 >> 2] | 0;
         i9 = i7;
         while (1) {
          i6 = i9 + 36 | 0;
          i3 = i9;
          do {
           i3 = HEAP32[i3 + 4 >> 2] | 0;
           if ((i3 | 0) == (i7 | 0)) break L102;
           i4 = HEAP32[i3 + 36 >> 2] | 0;
           i5 = HEAP32[i6 >> 2] | 0;
          } while ((i4 | 0) == (i5 | 0));
          if ((HEAP32[i2 + 36 >> 2] | 0) < (i5 | 0)) {
           if ((i4 | 0) < (i5 | 0)) {
            i2 = i9;
            i21 = 79;
           }
          } else if ((i4 | 0) > (i5 | 0)) {
           i2 = i9;
           i21 = 79;
          }
          if ((i21 | 0) == 79) while (1) {
           i21 = 0;
           i24 = i2 + 16 | 0;
           HEAP32[i24 >> 2] = HEAP32[i24 >> 2] | 64;
           i2 = HEAP32[i2 + 4 >> 2] | 0;
           if ((i2 | 0) == (i3 | 0)) break; else i21 = 79;
          }
          i2 = HEAP32[i3 >> 2] | 0;
          i9 = i3;
         }
        } while (0);
        i1 = i1 + 1 | 0;
        if (i1 >>> 0 >= i8 >>> 0) {
         i1 = 0;
         break;
        }
       }
      } while (0);
      L122 : while (1) {
       if ((i21 | 0) == 94) {
        i21 = 0;
        i1 = i1 + 1 | 0;
       }
       if (i1 >>> 0 >= i11 >>> 0) break;
       i4 = i12 + (i1 * 48 | 0) | 0;
       i5 = i12 + (i1 * 48 | 0) + 16 | 0;
       i6 = HEAP32[i5 >> 2] | 0;
       if (!(i6 & 64)) {
        i21 = 94;
        continue;
       }
       i2 = i12 + (i1 * 48 | 0) + 40 | 0;
       i3 = i4;
       while (1) {
        i3 = HEAP32[i3 >> 2] | 0;
        if ((i3 | 0) == (i4 | 0)) {
         i21 = 94;
         continue L122;
        }
        i7 = HEAP32[i3 + 40 >> 2] | 0;
        i8 = HEAP32[i2 >> 2] | 0;
        if ((i7 | 0) != (i8 | 0)) break;
       }
       i3 = i4;
       while (1) {
        i3 = HEAP32[i3 + 4 >> 2] | 0;
        if ((i3 | 0) == (i4 | 0)) {
         i21 = 94;
         continue L122;
        }
        i2 = HEAP32[i3 + 40 >> 2] | 0;
        if ((i2 | 0) != (i8 | 0)) break;
       }
       if ((i7 | 0) < (i8 | 0) & (i2 | 0) > (i8 | 0)) {
        HEAP32[i5 >> 2] = i6 | 128;
        i21 = 94;
        continue;
       }
       if (!((i7 | 0) > (i8 | 0) & (i2 | 0) < (i8 | 0))) {
        i21 = 94;
        continue;
       }
       HEAP32[i5 >> 2] = i6 | 256;
       i21 = 94;
      }
      i13 = i23 + 28 + (i16 * 40 | 0) | 0;
      i3 = HEAP32[i23 + 24 >> 2] | 0;
      i1 = HEAP32[i13 >> 2] | 0;
      if (i1) {
       i2 = HEAP32[i23 + 28 + (i16 * 40 | 0) + 8 >> 2] | 0;
       while (1) {
        _psh_hint_align(i2, i3, i16, i23);
        i1 = i1 + -1 | 0;
        if (!i1) break; else i2 = i2 + 28 | 0;
       }
       i3 = HEAP32[i23 + 24 >> 2] | 0;
      }
      i11 = i23 + 28 + (i16 * 40 | 0) + 32 | 0;
      i9 = HEAP32[i11 >> 2] | 0;
      i4 = HEAP32[i9 + 8 >> 2] | 0;
      i9 = HEAP32[i9 >> 2] | 0;
      i15 = (i16 | 0) == 0;
      i12 = i15 ? 1 : 2;
      i10 = _FT_DivFix(32, HEAP32[i3 + 4 + (i16 * 204 | 0) + 196 >> 2] | 0) | 0;
      i10 = (i10 | 0) > 30 ? 30 : i10;
      L147 : do if (i9 >>> 0 > 1) {
       i3 = HEAP32[i23 >> 2] | 0;
       if (!i3) {
        i12 = 1;
        i5 = 0;
       } else {
        i8 = HEAP32[i4 + 12 >> 2] | 0;
        i2 = i23 + 28 + (i16 * 40 | 0) + 4 | 0;
        i1 = i23 + 28 + (i16 * 40 | 0) + 12 | 0;
        i7 = i3;
        i8 = i8 >>> 0 > i3 >>> 0 ? i3 : i8;
        while (1) {
         i6 = i4 + 16 | 0;
         i5 = HEAP32[i4 + 28 >> 2] | 0;
         i5 = i5 >>> 0 > i7 >>> 0 ? i7 : i5;
         i3 = i5 - i8 | 0;
         if ((i3 | 0) > 0) {
          i24 = (HEAP32[i23 + 8 >> 2] | 0) + (i8 * 48 | 0) | 0;
          _psh_hint_table_activate_mask(i13, HEAP32[i6 >> 2] | 0, HEAP32[i4 + 24 >> 2] | 0);
          _psh_hint_table_find_strong_points(HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0, i24, i3, i10, i12);
         }
         i3 = i9 + -1 | 0;
         if (i3 >>> 0 <= 1) {
          i21 = 108;
          break L147;
         }
         i4 = i6;
         i7 = HEAP32[i23 >> 2] | 0;
         i8 = i5;
         i9 = i3;
        }
       }
      } else if ((i9 | 0) == 1) {
       i2 = i23 + 28 + (i16 * 40 | 0) + 4 | 0;
       i1 = i23 + 28 + (i16 * 40 | 0) + 12 | 0;
       i21 = 108;
      } else i21 = 109; while (0);
      if ((i21 | 0) == 108) {
       i24 = HEAP32[i23 >> 2] | 0;
       i19 = HEAP32[i23 + 8 >> 2] | 0;
       i14 = HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] | 0;
       _psh_hint_table_activate_mask(i13, HEAP32[i14 >> 2] | 0, HEAP32[i14 + 8 >> 2] | 0);
       _psh_hint_table_find_strong_points(HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0, i19, i24, i10, i12);
       i21 = 109;
      }
      if ((i21 | 0) == 109) {
       i21 = 0;
       i5 = HEAP32[i23 >> 2] | 0;
       if (!i5) {
        i12 = 1;
        i5 = 0;
       } else {
        i3 = i5;
        i4 = HEAP32[i23 + 8 >> 2] | 0;
        while (1) {
         do if (HEAP32[i4 + 32 >> 2] | 0) {
          i1 = i4 + 16 | 0;
          i2 = HEAP32[i1 >> 2] | 0;
          if (i2 & 16) break;
          HEAP32[i1 >> 2] = i2 | 16;
         } while (0);
         i3 = i3 + -1 | 0;
         if (!i3) {
          i12 = (i5 | 0) == 0;
          break;
         } else i4 = i4 + 48 | 0;
        }
       }
      }
      L170 : do if ((i16 | 0) == 1) if (i12) i1 = 0; else {
       i10 = i5;
       i11 = HEAP32[i23 + 8 >> 2] | 0;
       while (1) {
        switch (HEAP8[i11 + 20 >> 0] | 0) {
        case -2:
        case 2:
         {
          i21 = 120;
          break;
         }
        default:
         switch (HEAP8[i11 + 21 >> 0] | 0) {
         case -2:
         case 2:
          {
           i21 = 120;
           break;
          }
         default:
          {}
         }
        }
        L177 : do if ((i21 | 0) == 120) {
         i21 = 0;
         i7 = i11 + 16 | 0;
         i1 = HEAP32[i7 >> 2] | 0;
         if (i1 & 16) break;
         i8 = HEAP32[i11 + 36 >> 2] | 0;
         i2 = HEAP32[i22 + 412 >> 2] | 0;
         L180 : do if (i2) {
          i4 = HEAP32[i22 + 2488 >> 2] | 0;
          i6 = i11 + 44 | 0;
          i9 = i22 + 416 | 0;
          while (1) {
           i3 = i8 - (HEAP32[i9 + 12 >> 2] | 0) | 0;
           if ((i3 | 0) < (0 - i4 | 0)) break L180;
           do if ((i8 | 0) <= ((HEAP32[i9 + 8 >> 2] | 0) + i4 | 0)) {
            if ((HEAP8[i22 + 2492 >> 0] | 0) == 0 ? (i3 | 0) > (HEAP32[i22 + 2484 >> 2] | 0) : 0) break;
            HEAP32[i6 >> 2] = HEAP32[i9 + 24 >> 2];
            i1 = i1 | 48;
            HEAP32[i7 >> 2] = i1;
           } while (0);
           i2 = i2 + -1 | 0;
           if (!i2) break; else i9 = i9 + 32 | 0;
          }
         } while (0);
         i2 = HEAP32[i22 + 928 >> 2] | 0;
         if (!i2) break;
         i4 = HEAP32[i22 + 2488 >> 2] | 0;
         i6 = i11 + 44 | 0;
         i3 = i2;
         i9 = i22 + 932 + (i2 + -1 << 5) | 0;
         while (1) {
          i2 = (HEAP32[i9 + 8 >> 2] | 0) - i8 | 0;
          if ((i2 | 0) < (0 - i4 | 0)) break L177;
          do if ((i8 | 0) >= ((HEAP32[i9 + 12 >> 2] | 0) - i4 | 0)) {
           if ((HEAP8[i22 + 2492 >> 0] | 0) == 0 ? (i2 | 0) >= (HEAP32[i22 + 2484 >> 2] | 0) : 0) break;
           HEAP32[i6 >> 2] = HEAP32[i9 + 28 >> 2];
           i1 = i1 | 48;
           HEAP32[i7 >> 2] = i1;
          } while (0);
          i3 = i3 + -1 | 0;
          if (!i3) break; else i9 = i9 + -32 | 0;
         }
        } while (0);
        i10 = i10 + -1 | 0;
        if (!i10) {
         i21 = 138;
         break L170;
        } else i11 = i11 + 48 | 0;
       }
      } else i21 = 138; while (0);
      if ((i21 | 0) == 138) {
       i21 = 0;
       i9 = HEAP32[(HEAP32[i23 + 24 >> 2] | 0) + 4 + (i16 * 204 | 0) + 196 >> 2] | 0;
       if (i12) i1 = 0; else {
        i8 = HEAP32[i23 + 8 >> 2] | 0;
        while (1) {
         i2 = HEAP32[i8 + 32 >> 2] | 0;
         if (i2) {
          i7 = i8 + 16 | 0;
          i1 = HEAP32[i7 >> 2] | 0;
          do if (!(i1 & 512)) {
           if (i1 & 1024) {
            HEAP32[i8 + 44 >> 2] = (HEAP32[i2 + 12 >> 2] | 0) + (HEAP32[i2 + 8 >> 2] | 0);
            break;
           }
           i3 = (HEAP32[i8 + 36 >> 2] | 0) - (HEAP32[i2 >> 2] | 0) | 0;
           if ((i3 | 0) < 1) {
            i24 = HEAP32[i2 + 8 >> 2] | 0;
            HEAP32[i8 + 44 >> 2] = (_FT_MulFix(i3, i9) | 0) + i24;
            break;
           }
           i4 = HEAP32[i2 + 4 >> 2] | 0;
           i6 = HEAP32[i2 + 8 >> 2] | 0;
           i1 = HEAP32[i2 + 12 >> 2] | 0;
           if ((i3 | 0) < (i4 | 0)) {
            HEAP32[i8 + 44 >> 2] = (_FT_MulDiv(i3, i1, i4) | 0) + i6;
            break;
           } else {
            HEAP32[i8 + 44 >> 2] = i1 + i6 + (_FT_MulFix(i3 - i4 | 0, i9) | 0);
            break;
           }
          } else HEAP32[i8 + 44 >> 2] = HEAP32[i2 + 8 >> 2]; while (0);
          HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 32;
         }
         i5 = i5 + -1 | 0;
         if (!i5) break; else i8 = i8 + 48 | 0;
        }
        i1 = HEAP32[i23 >> 2] | 0;
       }
      }
      i11 = HEAP32[(HEAP32[i23 + 24 >> 2] | 0) + 4 + (i16 * 204 | 0) + 196 >> 2] | 0;
      i12 = HEAP32[i23 + 16 >> 2] | 0;
      i7 = HEAP32[i23 + 8 >> 2] | 0;
      i13 = i7 + (i1 * 48 | 0) | 0;
      do if ((i1 | 0) > 0) {
       i1 = 0;
       i2 = i7;
       do {
        i1 = ((HEAP32[i2 + 16 >> 2] | 0) >>> 4 & 1) + i1 | 0;
        i2 = i2 + 48 | 0;
       } while (i2 >>> 0 < i13 >>> 0);
       if (i1) {
        if (i1 >>> 0 >= 17) {
         i1 = _ft_mem_realloc(i12, 4, 0, i1, 0, i23 + 128 | 0) | 0;
         if (HEAP32[i23 + 128 >> 2] | 0) break;
        } else i1 = i23 + 136 | 0;
        i2 = 0;
        i6 = i7;
        do {
         if (HEAP32[i6 + 16 >> 2] & 16) {
          i3 = i1 + (i2 << 2) | 0;
          L238 : do if ((i2 | 0) > 0) {
           i9 = HEAP32[i6 + 36 >> 2] | 0;
           while (1) {
            i4 = i3 + -4 | 0;
            i5 = HEAP32[i4 >> 2] | 0;
            if ((HEAP32[i5 + 36 >> 2] | 0) <= (i9 | 0)) break L238;
            HEAP32[i3 >> 2] = i5;
            if (i4 >>> 0 > i1 >>> 0) i3 = i4; else {
             i3 = i4;
             break;
            }
           }
          } while (0);
          HEAP32[i3 >> 2] = i6;
          i2 = i2 + 1 | 0;
         }
         i6 = i6 + 48 | 0;
        } while (i6 >>> 0 < i13 >>> 0);
        i10 = i1 + (i2 + -1 << 2) | 0;
        do {
         i8 = i7 + 16 | 0;
         i9 = HEAP32[i8 >> 2] | 0;
         do if (!(i9 & 16)) {
          i3 = i7 + 12 | 0;
          i4 = HEAP32[i3 >> 2] | 0;
          if (i4 & 2) {
           i5 = HEAP8[i7 + 20 >> 0] | 0;
           if (i5 << 24 >> 24 == 4) break;
           if (i5 << 24 >> 24 != (HEAP8[i7 + 21 >> 0] | 0)) break;
           if (!(i4 & 4 | i9 & 64)) break;
           HEAP32[i3 >> 2] = i4 & -3;
          }
          i6 = HEAP32[i7 + 36 >> 2] | 0;
          do if (i2) {
           i3 = 0;
           do {
            if ((HEAP32[(HEAP32[i1 + (i3 << 2) >> 2] | 0) + 36 >> 2] | 0) > (i6 | 0)) break;
            i3 = i3 + 1 | 0;
           } while (i3 >>> 0 < i2 >>> 0);
           if (!i3) {
            i21 = 177;
            break;
           }
           i5 = HEAP32[i1 + (i3 + -1 << 2) >> 2] | 0;
           i3 = i2;
           while (1) {
            if (!i3) {
             i3 = 0;
             break;
            }
            i9 = i3 + -1 | 0;
            if ((HEAP32[(HEAP32[i1 + (i9 << 2) >> 2] | 0) + 36 >> 2] | 0) < (i6 | 0)) break; else i3 = i9;
           }
           if ((i3 | 0) == (i2 | 0)) {
            i19 = HEAP32[i10 >> 2] | 0;
            i24 = HEAP32[i19 + 44 >> 2] | 0;
            HEAP32[i7 + 44 >> 2] = (_FT_MulFix(i6 - (HEAP32[i19 + 36 >> 2] | 0) | 0, i11) | 0) + i24;
            break;
           }
           i9 = HEAP32[i1 + (i3 << 2) >> 2] | 0;
           i3 = HEAP32[i5 + 36 >> 2] | 0;
           if ((i6 | 0) == (i3 | 0)) {
            HEAP32[i7 + 44 >> 2] = HEAP32[i5 + 44 >> 2];
            break;
           }
           i4 = HEAP32[i9 + 36 >> 2] | 0;
           i9 = HEAP32[i9 + 44 >> 2] | 0;
           if ((i6 | 0) == (i4 | 0)) {
            HEAP32[i7 + 44 >> 2] = i9;
            break;
           } else {
            i24 = HEAP32[i5 + 44 >> 2] | 0;
            HEAP32[i7 + 44 >> 2] = (_FT_MulDiv(i6 - i3 | 0, i9 - i24 | 0, i4 - i3 | 0) | 0) + i24;
            break;
           }
          } else i21 = 177; while (0);
          if ((i21 | 0) == 177) {
           i21 = 0;
           i19 = HEAP32[i1 >> 2] | 0;
           i24 = HEAP32[i19 + 44 >> 2] | 0;
           HEAP32[i7 + 44 >> 2] = (_FT_MulFix(i6 - (HEAP32[i19 + 36 >> 2] | 0) | 0, i11) | 0) + i24;
          }
          HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 32;
         } while (0);
         i7 = i7 + 48 | 0;
        } while (i7 >>> 0 < i13 >>> 0);
        if ((i1 | 0) == (i23 + 136 | 0)) break;
        _ft_mem_free(i12, i1);
       }
      } while (0);
      i2 = HEAP32[i23 + 4 >> 2] | 0;
      i1 = HEAP32[i23 + 24 >> 2] | 0;
      i13 = HEAP32[i1 + 4 + (i16 * 204 | 0) + 196 >> 2] | 0;
      if (i2) {
       i14 = HEAP32[i23 + 12 >> 2] | 0;
       i1 = HEAP32[i1 + 4 + (i16 * 204 | 0) + 200 >> 2] | 0;
       while (1) {
        i9 = HEAP32[i14 >> 2] | 0;
        i6 = HEAP32[i14 + 4 >> 2] | 0;
        L286 : do if ((i6 | 0) > 0) {
         i4 = 0;
         i3 = 0;
         i5 = i9;
         do {
          if (HEAP32[i5 + 16 >> 2] & 32) {
           i4 = (i4 | 0) == 0 ? i5 : i4;
           i3 = i3 + 1 | 0;
          }
          i5 = i5 + 48 | 0;
         } while (i5 >>> 0 < (i9 + (i6 * 48 | 0) | 0) >>> 0);
         i12 = i4;
         if (i3 >>> 0 < 2) {
          if ((i3 | 0) == 1) {
           i1 = HEAP32[i12 + 44 >> 2] | 0;
           i1 = i1 - (_FT_MulFix(HEAP32[i12 + 36 >> 2] | 0, i13) | 0) | 0;
          }
          i3 = i9;
          while (1) {
           if ((i3 | 0) != (i12 | 0)) HEAP32[i3 + 44 >> 2] = (_FT_MulFix(HEAP32[i3 + 36 >> 2] | 0, i13) | 0) + i1;
           i3 = i3 + 48 | 0;
           if (i3 >>> 0 >= (i9 + (i6 * 48 | 0) | 0) >>> 0) break L286;
          }
         }
         i3 = HEAP32[i12 + 4 >> 2] | 0;
         if ((i3 | 0) == (i12 | 0)) break; else {
          i8 = i12 + 4 | 0;
          i9 = i12;
         }
         while (1) {
          if (!(HEAP32[i3 + 16 >> 2] & 32)) {
           i4 = i3;
           do i4 = HEAP32[i4 + 4 >> 2] | 0; while ((HEAP32[i4 + 16 >> 2] & 32 | 0) == 0);
           i6 = HEAP32[i9 + 36 >> 2] | 0;
           i7 = HEAP32[i4 + 36 >> 2] | 0;
           i5 = HEAP32[i4 + 44 >> 2] | 0;
           i9 = HEAP32[i9 + 44 >> 2] | 0;
           if ((i6 | 0) > (i7 | 0)) {
            i11 = i5;
            i9 = i9 - i5 | 0;
            i10 = i7;
            i7 = i6 - i7 | 0;
           } else {
            i11 = i9;
            i9 = i5 - i9 | 0;
            i10 = i6;
            i7 = i7 - i6 | 0;
           }
           if ((i7 | 0) > 0) {
            i6 = _FT_DivFix(i9, i7) | 0;
            i3 = HEAP32[i8 >> 2] | 0;
           } else i6 = 65536;
           i5 = i9 + i11 | 0;
           do {
            i9 = (HEAP32[i3 + 36 >> 2] | 0) - i10 | 0;
            do if ((i9 | 0) >= 1) if ((i9 | 0) < (i7 | 0)) {
             i9 = (_FT_MulFix(i9, i6) | 0) + i11 | 0;
             break;
            } else {
             i9 = i5 + (_FT_MulFix(i9 - i7 | 0, i13) | 0) | 0;
             break;
            } else i9 = (_FT_MulFix(i9, i13) | 0) + i11 | 0; while (0);
            HEAP32[i3 + 44 >> 2] = i9;
            i3 = HEAP32[i3 + 4 >> 2] | 0;
           } while ((i3 | 0) != (i4 | 0));
           if ((i4 | 0) == (i12 | 0)) break L286;
          } else i4 = i3;
          i8 = i4 + 4 | 0;
          i3 = HEAP32[i8 >> 2] | 0;
          if ((i3 | 0) == (i12 | 0)) break; else i9 = i4;
         }
        } while (0);
        i2 = i2 + -1 | 0;
        if (!i2) break; else i14 = i14 + 8 | 0;
       }
      }
      i2 = HEAP32[i23 + 8 >> 2] | 0;
      i4 = HEAP32[i23 + 20 >> 2] | 0;
      i9 = HEAP32[i4 + 4 >> 2] | 0;
      i4 = HEAP32[i4 + 8 >> 2] | 0;
      i1 = HEAP32[i23 >> 2] | 0;
      if (i1) {
       i5 = i15 ? 32 : 64;
       if (i15) {
        i3 = 0;
        while (1) {
         HEAP32[i9 + (i3 << 3) >> 2] = HEAP32[i2 + 44 >> 2];
         if (HEAP32[i2 + 16 >> 2] & 16) {
          i1 = i4 + i3 | 0;
          HEAP8[i1 >> 0] = HEAPU8[i1 >> 0] | i5;
          i1 = HEAP32[i23 >> 2] | 0;
         }
         i3 = i3 + 1 | 0;
         if (i3 >>> 0 >= i1 >>> 0) break; else i2 = i2 + 48 | 0;
        }
       } else {
        i3 = 0;
        while (1) {
         HEAP32[i9 + (i3 << 3) + 4 >> 2] = HEAP32[i2 + 44 >> 2];
         if (HEAP32[i2 + 16 >> 2] & 16) {
          i1 = i4 + i3 | 0;
          HEAP8[i1 >> 0] = HEAPU8[i1 >> 0] | i5;
          i1 = HEAP32[i23 >> 2] | 0;
         }
         i3 = i3 + 1 | 0;
         if (i3 >>> 0 >= i1 >>> 0) break; else i2 = i2 + 48 | 0;
        }
       }
      }
      if (!i17) _psh_globals_set_scale(HEAP32[i23 + 24 >> 2] | 0, i18, i20, 0, 0) | 0;
      i16 = i16 + 1 | 0;
      if ((i16 | 0) == 2) {
       i1 = i23 + 12 | 0;
       i4 = i23;
       i5 = i23 + 4 | 0;
       i3 = i23 + 12 | 0;
       i2 = 0;
       break;
      }
     }
    } else {
     i1 = i23 + 12 | 0;
     i4 = i23;
     i5 = i23 + 4 | 0;
     i3 = i23 + 12 | 0;
    }
   } else {
    i2 = i1;
    i3 = i23 + 12 | 0;
    i1 = i23 + 12 | 0;
    i21 = 57;
   }
  } else {
   i3 = i23 + 12 | 0;
   i1 = i23 + 12 | 0;
   i21 = 57;
  }
 } else {
  i3 = i23 + 12 | 0;
  i1 = i23 + 12 | 0;
  i21 = 57;
 }
 if ((i21 | 0) == 57) {
  i4 = i23;
  i5 = i23 + 4 | 0;
 }
 i24 = HEAP32[i23 + 16 >> 2] | 0;
 _ft_mem_free(i24, HEAP32[i23 + 92 >> 2] | 0);
 HEAP32[i23 + 92 >> 2] = 0;
 HEAP32[i23 + 88 >> 2] = 0;
 HEAP32[i23 + 96 >> 2] = 0;
 _ft_mem_free(i24, HEAP32[i23 + 80 >> 2] | 0);
 HEAP32[i23 + 80 >> 2] = 0;
 _ft_mem_free(i24, HEAP32[i23 + 76 >> 2] | 0);
 HEAP32[i23 + 76 >> 2] = 0;
 HEAP32[i23 + 72 >> 2] = 0;
 HEAP32[i23 + 68 >> 2] = 0;
 HEAP32[i23 + 84 >> 2] = 0;
 _ft_mem_free(i24, HEAP32[i23 + 52 >> 2] | 0);
 HEAP32[i23 + 52 >> 2] = 0;
 HEAP32[i23 + 48 >> 2] = 0;
 HEAP32[i23 + 56 >> 2] = 0;
 _ft_mem_free(i24, HEAP32[i23 + 40 >> 2] | 0);
 HEAP32[i23 + 40 >> 2] = 0;
 _ft_mem_free(i24, HEAP32[i23 + 36 >> 2] | 0);
 HEAP32[i23 + 36 >> 2] = 0;
 HEAP32[i23 + 32 >> 2] = 0;
 HEAP32[i23 + 28 >> 2] = 0;
 HEAP32[i23 + 44 >> 2] = 0;
 _ft_mem_free(i24, HEAP32[i23 + 8 >> 2] | 0);
 HEAP32[i23 + 8 >> 2] = 0;
 _ft_mem_free(i24, HEAP32[i1 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i23 + 16 >> 2] = 0;
 i24 = i2;
 STACKTOP = i23;
 return i24 | 0;
}

function _BDF_Face_Init(i17, i38, i9, i3, i4) {
 i17 = i17 | 0;
 i38 = i38 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i37 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i36 = HEAP32[i38 + 100 >> 2] | 0;
 i9 = _FT_Stream_Seek(i17, 0) | 0;
 HEAP32[i37 + 40 >> 2] = i9;
 if (i9) {
  i38 = i9;
  STACKTOP = i37;
  return i38 | 0;
 }
 HEAP32[i37 + 24 >> 2] = 1;
 HEAP32[i37 + 24 + 4 >> 2] = 1;
 HEAP32[i37 + 24 + 8 >> 2] = 0;
 HEAP32[i37 + 24 + 12 >> 2] = 8;
 HEAP32[i37 + 44 >> 2] = 0;
 i18 = _ft_mem_alloc(i36, 139324, i37 + 44 | 0) | 0;
 i3 = HEAP32[i37 + 44 >> 2] | 0;
 do if (i3) if (!i18) i9 = 0; else {
  i4 = i18 + 139304 | 0;
  i3 = i18 + 139316 | 0;
  i9 = 0;
  i27 = 56;
 } else {
  HEAP32[i18 + 36 >> 2] = i37 + 24;
  HEAP16[i18 + 12 >> 1] = 32767;
  HEAP32[i18 + 139320 >> 2] = i36;
  HEAP32[i18 + 139304 >> 2] = 0;
  HEAP32[i18 + 139304 + 4 >> 2] = 0;
  HEAP32[i18 + 139304 + 8 >> 2] = 0;
  HEAP32[i18 + 139316 >> 2] = i36;
  i16 = HEAP32[i17 + 28 >> 2] | 0;
  HEAP32[i37 + 48 >> 2] = 0;
  i9 = _ft_mem_realloc(i16, 1, 0, 1024, 0, i37 + 48 | 0) | 0;
  L6 : do if (!(HEAP32[i37 + 48 >> 2] | 0)) {
   HEAP32[i37 + 52 >> 2] = 34;
   HEAP8[i9 >> 0] = 0;
   i4 = 0;
   i11 = 1024;
   i5 = 0;
   i12 = 0;
   i15 = 1;
   i3 = 0;
   i10 = 0;
   i13 = 256;
   L8 : while (1) {
    i6 = i12;
    L10 : while (1) {
     L12 : while (1) {
      while (1) {
       if (i3) i12 = i6; else {
        i5 = _FT_Stream_TryRead(i17, i9 + i6 | 0, i11 - i6 | 0) | 0;
        i4 = i5 + i6 | 0;
        i12 = 0;
       }
       L19 : do if ((i4 | 0) > (i10 | 0)) {
        i14 = i9 + i10 | 0;
        i3 = HEAP8[i14 >> 0] | 0;
        if ((i3 << 24 >> 24 | 0) == (i13 | 0)) {
         i3 = i11;
         i6 = i12;
         break L12;
        } else i6 = i10;
        while (1) {
         switch (i3 << 24 >> 24) {
         case 10:
         case 13:
          {
           i13 = i3;
           break L10;
          }
         default:
          {}
         }
         i6 = i6 + 1 | 0;
         if ((i6 | 0) >= (i4 | 0)) break L19;
         i3 = HEAP8[i9 + i6 >> 0] | 0;
        }
       } while (0);
       if (!i5) break L6;
       if (!i10) break;
       i6 = i4 - i10 | 0;
       _memcpy(i9 | 0, i9 + i10 | 0, i6 | 0) | 0;
       i4 = i10;
       i5 = i6;
       i3 = 0;
       i10 = 0;
      }
      if (i11 >>> 0 > 65535) break L8;
      i3 = i11 << 1;
      i9 = _ft_mem_realloc(i16, 1, i11, i3, i9, i37 + 48 | 0) | 0;
      if (!(HEAP32[i37 + 48 >> 2] | 0)) {
       i6 = i11;
       i11 = i3;
       i3 = 0;
       i10 = 0;
      } else break L6;
     }
     i11 = i3;
     i3 = 1;
     i10 = i10 + 1 | 0;
     i13 = 256;
    }
    HEAP8[i9 + i6 >> 0] = 0;
    switch (HEAP8[i14 >> 0] | 0) {
    case 26:
    case 35:
     {
      i3 = i9;
      break;
     }
    default:
     if ((i6 | 0) > (i10 | 0)) {
      i3 = FUNCTION_TABLE_iiiiii[HEAP32[i37 + 52 >> 2] & 63](i14, i6 - i10 | 0, i15, i37 + 52 | 0, i18) | 0;
      HEAP32[i37 + 48 >> 2] = i3;
      if ((i3 | 0) == -1) {
       i3 = FUNCTION_TABLE_iiiiii[HEAP32[i37 + 52 >> 2] & 63](i14, i6 - i10 | 0, i15, i37 + 52 | 0, i18) | 0;
       HEAP32[i37 + 48 >> 2] = i3;
      }
      if (i3) break L6; else i3 = i9;
     } else i3 = i9;
    }
    HEAP8[i9 + i6 >> 0] = i13;
    i9 = i3;
    i15 = i15 + 1 | 0;
    i3 = 1;
    i10 = i6 + 1 | 0;
    i13 = i13 << 24 >> 24 == 10 ? 13 : i13 << 24 >> 24 == 13 ? 10 : 256;
   }
   HEAP32[i37 + 48 >> 2] = 6;
  } while (0);
  _ft_mem_free(i16, i9);
  i28 = HEAP32[i37 + 48 >> 2] | 0;
  HEAP32[i37 + 44 >> 2] = i28;
  i9 = HEAP32[i18 + 32 >> 2] | 0;
  if (!i28) {
   if (i9) {
    if ((HEAP32[i9 + 28 >> 2] | 0) != 8) HEAP16[i9 + 32 >> 1] = HEAP16[i9 + 4 >> 1] | 0;
    i3 = HEAP32[i9 + 52 >> 2] | 0;
    i4 = HEAP32[i9 + 64 >> 2] | 0;
    if ((HEAP32[i18 + 4 >> 2] | 0) != (i4 + i3 | 0)) HEAP16[i9 + 278660 >> 1] = 1;
    if (!((i4 | i3 | 0) == 0 ? 1 : (HEAP32[HEAP32[i18 + 36 >> 2] >> 2] | 0) == 0)) {
     i3 = HEAP16[i18 + 12 >> 1] | 0;
     i4 = (HEAP16[i18 + 16 >> 1] | 0) - (i3 << 16 >> 16) | 0;
     if ((i4 | 0) != (HEAPU16[i9 + 4 >> 1] | 0)) {
      HEAP16[i9 + 4 >> 1] = i4;
      HEAP16[i9 + 278660 >> 1] = 1;
     }
     if ((HEAP16[i9 + 8 >> 1] | 0) != i3 << 16 >> 16) {
      HEAP16[i9 + 8 >> 1] = i3;
      HEAP16[i9 + 278660 >> 1] = 1;
     }
     i3 = HEAP16[i18 + 18 >> 1] | 0;
     if ((HEAP16[i9 + 12 >> 1] | 0) != i3 << 16 >> 16) {
      HEAP16[i9 + 12 >> 1] = i3;
      HEAP16[i9 + 278660 >> 1] = 1;
     }
     i4 = HEAP16[i18 + 20 >> 1] | 0;
     if ((HEAP16[i9 + 14 >> 1] | 0) != i4 << 16 >> 16) {
      HEAP16[i9 + 14 >> 1] = i4;
      HEAP16[i9 + 10 >> 1] = 0 - (i4 & 65535);
      HEAP16[i9 + 278660 >> 1] = 1;
     }
     if (((i4 << 16 >> 16) + (i3 << 16 >> 16) | 0) != (HEAPU16[i9 + 6 >> 1] | 0)) HEAP16[i9 + 6 >> 1] = (i4 << 16 >> 16) + (i3 << 16 >> 16);
    }
   }
   i3 = HEAP32[i18 >> 2] | 0;
   if (i3 & 1) if (!(i3 & 32)) {
    HEAP32[i37 + 44 >> 2] = 185;
    i4 = i18 + 139304 | 0;
    i3 = i18 + 139316 | 0;
    i9 = 0;
    i27 = 56;
    break;
   } else {
    HEAP32[i37 + 44 >> 2] = 186;
    i4 = i18 + 139304 | 0;
    i3 = i18 + 139316 | 0;
    i9 = 0;
    i27 = 56;
    break;
   }
   if (!i9) {
    HEAP32[i37 + 44 >> 2] = 3;
    i4 = i18 + 139304 | 0;
    i3 = i18 + 139316 | 0;
    i27 = 56;
    break;
   }
   i3 = HEAP32[i9 + 88 >> 2] | 0;
   if (!i3) {
    i4 = i18 + 139304 | 0;
    i3 = i18 + 139316 | 0;
    i27 = 56;
    break;
   }
   i3 = _ft_mem_realloc(HEAP32[i9 + 278664 >> 2] | 0, 1, i3, i3 + 1 | 0, HEAP32[i9 + 84 >> 2] | 0, i37 + 44 | 0) | 0;
   i9 = HEAP32[i18 + 32 >> 2] | 0;
   HEAP32[i9 + 84 >> 2] = i3;
   if (!(HEAP32[i37 + 44 >> 2] | 0)) {
    HEAP8[i3 + (HEAP32[i9 + 88 >> 2] | 0) >> 0] = 0;
    i4 = i18 + 139304 | 0;
    i3 = i18 + 139316 | 0;
    i9 = HEAP32[i18 + 32 >> 2] | 0;
    i27 = 56;
    break;
   }
  }
  _bdf_free_font(i9);
  _ft_mem_free(i36, HEAP32[i18 + 32 >> 2] | 0);
  HEAP32[i18 + 32 >> 2] = 0;
  i4 = i18 + 139304 | 0;
  i3 = i18 + 139316 | 0;
  i9 = 0;
  i27 = 56;
 } while (0);
 if ((i27 | 0) == 56) {
  i3 = HEAP32[i3 >> 2] | 0;
  if (i3) {
   _ft_mem_free(i3, HEAP32[i4 >> 2] | 0);
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 12 >> 2] = 0;
  }
  _ft_mem_free(i36, i18);
  i3 = HEAP32[i37 + 44 >> 2] | 0;
 }
 HEAP32[i37 + 40 >> 2] = i3;
 switch (i3 | 0) {
 case 176:
  {
   _BDF_Face_Done(i38);
   i38 = 2;
   STACKTOP = i37;
   return i38 | 0;
  }
 case 0:
  {
   HEAP32[i38 + 140 >> 2] = i9;
   HEAP32[i38 >> 2] = 1;
   HEAP32[i38 + 4 >> 2] = 0;
   HEAP32[i38 + 8 >> 2] = 146;
   i28 = i9;
   i18 = (i9 | 0) == 0;
   L90 : do if (!i18 ? (i20 = (HEAP32[i28 + 72 >> 2] | 0) == 0, !i20) : 0) {
    i6 = HEAP32[i28 + 128 >> 2] | 0;
    i5 = HEAP32[i6 + 12 >> 2] | 0;
    i6 = HEAP32[i6 + 4 >> 2] | 0;
    i9 = HEAP32[i5 + ((3000791075 % (i6 >>> 0) | 0) << 2) >> 2] | 0;
    if (i9) {
     i4 = i5 + ((3000791075 % (i6 >>> 0) | 0) << 2) | 0;
     do {
      i3 = HEAP32[i9 >> 2] | 0;
      if ((HEAP8[i3 >> 0] | 0) == 83 ? (_strcmp(i3, 324203) | 0) == 0 : 0) {
       i19 = i9;
       i27 = 68;
       break;
      }
      i9 = i4 + -4 | 0;
      i4 = i9 >>> 0 < i5 >>> 0 ? i5 + (i6 + -1 << 2) | 0 : i9;
      i9 = HEAP32[i4 >> 2] | 0;
     } while ((i9 | 0) != 0);
     L100 : do if ((((i27 | 0) == 68 ? (i21 = HEAP32[i28 + 80 >> 2] | 0, i22 = HEAP32[i19 + 4 >> 2] | 0, (i21 + (i22 << 4) | 0) != 0) : 0) ? (HEAP32[i21 + (i22 << 4) + 4 >> 2] | 0) == 1 : 0) ? (i23 = HEAP32[i21 + (i22 << 4) + 12 >> 2] | 0, (i23 | 0) != 0) : 0) {
      switch (HEAP8[i23 >> 0] | 0) {
      case 99:
      case 67:
      case 109:
      case 77:
       break;
      default:
       break L100;
      }
      HEAP32[i38 + 8 >> 2] = 150;
     } while (0);
     if (i20) {
      i27 = 83;
      break;
     }
    }
    i6 = HEAP32[i28 + 128 >> 2] | 0;
    i5 = HEAP32[i6 + 12 >> 2] | 0;
    i6 = HEAP32[i6 + 4 >> 2] | 0;
    i3 = HEAP32[i5 + ((1183963782 % (i6 >>> 0) | 0) << 2) >> 2] | 0;
    if (i3) {
     i4 = i5 + ((1183963782 % (i6 >>> 0) | 0) << 2) | 0;
     while (1) {
      i9 = HEAP32[i3 >> 2] | 0;
      if ((HEAP8[i9 >> 0] | 0) == 70 ? (_strcmp(i9, 324211) | 0) == 0 : 0) break;
      i3 = i4 + -4 | 0;
      i4 = i3 >>> 0 < i5 >>> 0 ? i5 + (i6 + -1 << 2) | 0 : i3;
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) {
       i27 = 83;
       break L90;
      }
     }
     i4 = HEAP32[i28 + 80 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     if ((i4 + (i3 << 4) | 0) != 0 ? (i24 = HEAP32[i4 + (i3 << 4) + 12 >> 2] | 0, (i24 | 0) != 0) : 0) {
      HEAP32[i38 + 20 >> 2] = _ft_mem_strdup(i36, i24, i37 + 40 | 0) | 0;
      i3 = HEAP32[i37 + 40 >> 2] | 0;
      if (!i3) {
       i11 = HEAP32[i38 + 140 >> 2] | 0;
       break;
      } else {
       i38 = i3;
       STACKTOP = i37;
       return i38 | 0;
      }
     } else i27 = 83;
    } else i27 = 83;
   } else i27 = 83; while (0);
   if ((i27 | 0) == 83) {
    HEAP32[i38 + 20 >> 2] = 0;
    i11 = i28;
   }
   HEAP32[i37 + 52 >> 2] = 0;
   i17 = HEAP32[i38 + 100 >> 2] | 0;
   HEAP32[i38 + 12 >> 2] = 0;
   if ((i11 | 0) != 0 ? (HEAP32[i11 + 72 >> 2] | 0) != 0 : 0) {
    i10 = HEAP32[i11 + 128 >> 2] | 0;
    i6 = HEAP32[i10 + 12 >> 2] | 0;
    i10 = HEAP32[i10 + 4 >> 2] | 0;
    i9 = HEAP32[i6 + ((78981326 % (i10 >>> 0) | 0) << 2) >> 2] | 0;
    L126 : do if (i9) {
     i4 = i6 + ((78981326 % (i10 >>> 0) | 0) << 2) | 0;
     while (1) {
      i3 = HEAP32[i9 >> 2] | 0;
      if ((HEAP8[i3 >> 0] | 0) == 83 ? (_strcmp(i3, 324223) | 0) == 0 : 0) break;
      i9 = i4 + -4 | 0;
      i4 = i9 >>> 0 < i6 >>> 0 ? i6 + (i10 + -1 << 2) | 0 : i9;
      i9 = HEAP32[i4 >> 2] | 0;
      if (!i9) {
       i5 = 2;
       i14 = 0;
       break L126;
      }
     }
     i3 = HEAP32[i11 + 80 >> 2] | 0;
     i9 = HEAP32[i9 + 4 >> 2] | 0;
     if (((i3 + (i9 << 4) | 0) != 0 ? (HEAP32[i3 + (i9 << 4) + 4 >> 2] | 0) == 1 : 0) ? (i25 = HEAP32[i3 + (i9 << 4) + 12 >> 2] | 0, (i25 | 0) != 0) : 0) {
      switch (HEAP8[i25 >> 0] | 0) {
      case 105:
      case 73:
      case 111:
      case 79:
       break;
      default:
       {
        i5 = 2;
        i14 = 0;
        break L126;
       }
      }
      HEAP32[i38 + 12 >> 2] = 1;
      i5 = 3;
      i14 = (HEAP8[i25 >> 0] & -33) << 24 >> 24 == 79 ? 324229 : 324237;
     } else {
      i5 = 2;
      i14 = 0;
     }
    } else {
     i5 = 2;
     i14 = 0;
    } while (0);
    i9 = HEAP32[i6 + ((4260511730 % (i10 >>> 0) | 0) << 2) >> 2] | 0;
    L139 : do if (i9) {
     i4 = i6 + ((4260511730 % (i10 >>> 0) | 0) << 2) | 0;
     while (1) {
      i3 = HEAP32[i9 >> 2] | 0;
      if ((HEAP8[i3 >> 0] | 0) == 87 ? (_strcmp(i3, 324244) | 0) == 0 : 0) break;
      i9 = i4 + -4 | 0;
      i4 = i9 >>> 0 < i6 >>> 0 ? i6 + (i10 + -1 << 2) | 0 : i9;
      i9 = HEAP32[i4 >> 2] | 0;
      if (!i9) {
       i5 = 0;
       break L139;
      }
     }
     i3 = HEAP32[i11 + 80 >> 2] | 0;
     i9 = HEAP32[i9 + 4 >> 2] | 0;
     if (((i3 + (i9 << 4) | 0) != 0 ? (HEAP32[i3 + (i9 << 4) + 4 >> 2] | 0) == 1 : 0) ? (i26 = HEAP32[i3 + (i9 << 4) + 12 >> 2] | 0, (i26 | 0) != 0) : 0) {
      switch (HEAP8[i26 >> 0] | 0) {
      case 98:
      case 66:
       break;
      default:
       {
        i5 = 0;
        break L139;
       }
      }
      HEAP32[i38 + 12 >> 2] = i5;
      i5 = 324256;
     } else i5 = 0;
    } else i5 = 0; while (0);
    i9 = HEAP32[i6 + ((41411398 % (i10 >>> 0) | 0) << 2) >> 2] | 0;
    L152 : do if (i9) {
     i4 = i6 + ((41411398 % (i10 >>> 0) | 0) << 2) | 0;
     while (1) {
      i3 = HEAP32[i9 >> 2] | 0;
      if ((HEAP8[i3 >> 0] | 0) == 83 ? (_strcmp(i3, 324261) | 0) == 0 : 0) break;
      i9 = i4 + -4 | 0;
      i4 = i9 >>> 0 < i6 >>> 0 ? i6 + (i10 + -1 << 2) | 0 : i9;
      i9 = HEAP32[i4 >> 2] | 0;
      if (!i9) {
       i7 = 0;
       break L152;
      }
     }
     i3 = HEAP32[i11 + 80 >> 2] | 0;
     i9 = HEAP32[i9 + 4 >> 2] | 0;
     if (((i3 + (i9 << 4) | 0) != 0 ? (HEAP32[i3 + (i9 << 4) + 4 >> 2] | 0) == 1 : 0) ? (i7 = HEAP32[i3 + (i9 << 4) + 12 >> 2] | 0, (i7 | 0) != 0) : 0) switch (HEAP8[i7 >> 0] | 0) {
     case 110:
     case 78:
     case 0:
      {
       i7 = 0;
       break L152;
      }
     default:
      {}
     } else i7 = 0;
    } else i7 = 0; while (0);
    i3 = HEAP32[i6 + ((657458935 % (i10 >>> 0) | 0) << 2) >> 2] | 0;
    L165 : do if (i3) {
     i4 = i6 + ((657458935 % (i10 >>> 0) | 0) << 2) | 0;
     while (1) {
      i9 = HEAP32[i3 >> 2] | 0;
      if ((HEAP8[i9 >> 0] | 0) == 65 ? (_strcmp(i9, 324275) | 0) == 0 : 0) break;
      i3 = i4 + -4 | 0;
      i4 = i3 >>> 0 < i6 >>> 0 ? i6 + (i10 + -1 << 2) | 0 : i3;
      i3 = HEAP32[i4 >> 2] | 0;
      if (!i3) {
       i8 = 0;
       i11 = 0;
       i9 = 0;
       break L165;
      }
     }
     i4 = HEAP32[i11 + 80 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     if (((i4 + (i3 << 4) | 0) != 0 ? (HEAP32[i4 + (i3 << 4) + 4 >> 2] | 0) == 1 : 0) ? (i8 = HEAP32[i4 + (i3 << 4) + 12 >> 2] | 0, (i8 | 0) != 0) : 0) {
      switch (HEAP8[i8 >> 0] | 0) {
      case 110:
      case 78:
      case 0:
       {
        i8 = 0;
        i11 = 0;
        i9 = 0;
        break L165;
       }
      default:
       {}
      }
      i9 = _strlen(i8) | 0;
      i11 = i9;
      i9 = i9 + 1 | 0;
     } else {
      i8 = 0;
      i11 = 0;
      i9 = 0;
     }
    } else {
     i8 = 0;
     i11 = 0;
     i9 = 0;
    } while (0);
    if (!i5) {
     i12 = 1;
     i3 = 0;
     i6 = 0;
    } else {
     i26 = _strlen(i5) | 0;
     i12 = 0;
     i3 = i5;
     i6 = i26;
     i9 = i9 + 1 + i26 | 0;
    }
    if (!i14) {
     i13 = 1;
     i5 = 0;
     i14 = 0;
    } else {
     i26 = _strlen(i14) | 0;
     i13 = 0;
     i5 = i14;
     i14 = i26;
     i9 = i9 + 1 + i26 | 0;
    }
    if (!i7) {
     i10 = 1;
     i7 = 0;
     i4 = 0;
    } else {
     i26 = _strlen(i7) | 0;
     i10 = 0;
     i4 = i26;
     i9 = i9 + 1 + i26 | 0;
    }
    if (!i9) {
     i9 = i14;
     i27 = 127;
    } else {
     i16 = i3;
     i15 = i5;
    }
   } else {
    i4 = 0;
    i13 = 1;
    i6 = 0;
    i3 = 0;
    i5 = 0;
    i7 = 0;
    i12 = 1;
    i9 = 0;
    i10 = 1;
    i27 = 127;
   }
   if ((i27 | 0) == 127) {
    i8 = 324290;
    i11 = 7;
    i16 = i3;
    i15 = i5;
    i14 = i9;
    i9 = 8;
   }
   i3 = _ft_mem_alloc(i17, i9, i37 + 52 | 0) | 0;
   HEAP32[i38 + 24 >> 2] = i3;
   i9 = HEAP32[i37 + 52 >> 2] | 0;
   if (i9) {
    HEAP32[i37 + 40 >> 2] = i9;
    i38 = i9;
    STACKTOP = i37;
    return i38 | 0;
   }
   if (i8) {
    _memcpy(i3 | 0, i8 | 0, i11 | 0) | 0;
    if (i11) {
     i5 = 0;
     do {
      i9 = i3 + i5 | 0;
      if ((HEAP8[i9 >> 0] | 0) == 32) HEAP8[i9 >> 0] = 45;
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) != (i11 | 0));
    }
    i3 = i3 + i11 | 0;
   }
   if (!i12) {
    if ((i3 | 0) != (HEAP32[i38 + 24 >> 2] | 0)) {
     HEAP8[i3 >> 0] = 32;
     i3 = i3 + 1 | 0;
    }
    _memcpy(i3 | 0, i16 | 0, i6 | 0) | 0;
    i3 = i3 + i6 | 0;
   }
   if (!i13) {
    if ((i3 | 0) != (HEAP32[i38 + 24 >> 2] | 0)) {
     HEAP8[i3 >> 0] = 32;
     i3 = i3 + 1 | 0;
    }
    _memcpy(i3 | 0, i15 | 0, i14 | 0) | 0;
    i3 = i3 + i14 | 0;
   }
   if (!i10) {
    if ((i3 | 0) != (HEAP32[i38 + 24 >> 2] | 0)) {
     HEAP8[i3 >> 0] = 32;
     i3 = i3 + 1 | 0;
    }
    _memcpy(i3 | 0, i7 | 0, i4 | 0) | 0;
    if (!i4) i4 = 0; else {
     i6 = 0;
     do {
      i5 = i3 + i6 | 0;
      if ((HEAP8[i5 >> 0] | 0) == 32) HEAP8[i5 >> 0] = 45;
      i6 = i6 + 1 | 0;
     } while ((i6 | 0) != (i4 | 0));
    }
    i3 = i3 + i4 | 0;
   }
   HEAP8[i3 >> 0] = 0;
   i3 = HEAP32[i37 + 52 >> 2] | 0;
   HEAP32[i37 + 40 >> 2] = i3;
   if (i3) {
    i38 = i3;
    STACKTOP = i37;
    return i38 | 0;
   }
   HEAP32[i38 + 16 >> 2] = (HEAP32[i28 + 48 >> 2] | 0) + 1;
   HEAP32[i38 + 28 >> 2] = 1;
   i11 = _ft_mem_realloc(i36, 16, 0, 1, 0, i37 + 40 | 0) | 0;
   HEAP32[i38 + 32 >> 2] = i11;
   i3 = HEAP32[i37 + 40 >> 2] | 0;
   if (i3) {
    i38 = i3;
    STACKTOP = i37;
    return i38 | 0;
   };
   HEAP32[i11 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   HEAP32[i11 + 8 >> 2] = 0;
   HEAP32[i11 + 12 >> 2] = 0;
   i9 = (HEAP32[i28 + 44 >> 2] | 0) + (HEAP32[i28 + 40 >> 2] | 0) | 0;
   HEAP16[i11 >> 1] = i9;
   i10 = (HEAP32[i28 + 72 >> 2] | 0) == 0;
   L235 : do if (!i10 ? (i31 = HEAP32[i28 + 128 >> 2] | 0, i30 = HEAP32[i31 + 12 >> 2] | 0, i31 = HEAP32[i31 + 4 >> 2] | 0, i29 = HEAP32[i30 + ((3825651940 % (i31 >>> 0) | 0) << 2) >> 2] | 0, (i29 | 0) != 0) : 0) {
    i3 = i29;
    i5 = i30 + ((3825651940 % (i31 >>> 0) | 0) << 2) | 0;
    while (1) {
     i4 = HEAP32[i3 >> 2] | 0;
     if ((HEAP8[i4 >> 0] | 0) == 65 ? (_strcmp(i4, 324298) | 0) == 0 : 0) break;
     i3 = i5 + -4 | 0;
     i5 = i3 >>> 0 < i30 >>> 0 ? i30 + (i31 + -1 << 2) | 0 : i3;
     i3 = HEAP32[i5 >> 2] | 0;
     if (!i3) {
      i27 = 168;
      break L235;
     }
    }
    i4 = HEAP32[i28 + 80 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    if (i4 + (i3 << 4) | 0) {
     i5 = ((HEAP32[i4 + (i3 << 4) + 12 >> 2] | 0) + 5 | 0) / 10 | 0;
     HEAP16[i11 + 2 >> 1] = i5;
    } else i27 = 168;
   } else i27 = 168; while (0);
   if ((i27 | 0) == 168) {
    HEAP16[i11 + 2 >> 1] = (i9 << 16 >> 15 | 0) / 3 | 0;
    i5 = (i9 << 16 >> 15 | 0) / 3 | 0;
   }
   L248 : do if (!(i18 | i10) ? (i33 = HEAP32[i28 + 128 >> 2] | 0, i32 = HEAP32[i33 + 12 >> 2] | 0, i33 = HEAP32[i33 + 4 >> 2] | 0, i2 = HEAP32[i32 + ((1780881776 % (i33 >>> 0) | 0) << 2) >> 2] | 0, (i2 | 0) != 0) : 0) {
    i4 = i32 + ((1780881776 % (i33 >>> 0) | 0) << 2) | 0;
    while (1) {
     i3 = HEAP32[i2 >> 2] | 0;
     if ((HEAP8[i3 >> 0] | 0) == 80 ? (_strcmp(i3, 324312) | 0) == 0 : 0) break;
     i2 = i4 + -4 | 0;
     i4 = i2 >>> 0 < i32 >>> 0 ? i32 + (i33 + -1 << 2) | 0 : i2;
     i2 = HEAP32[i4 >> 2] | 0;
     if (!i2) {
      i27 = 177;
      break L248;
     }
    }
    i3 = HEAP32[i28 + 80 >> 2] | 0;
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    if (i3 + (i2 << 4) | 0) {
     i2 = (((HEAP32[i3 + (i2 << 4) + 12 >> 2] | 0) * 460800 | 0) + 36135 | 0) / 72270 | 0;
     HEAP32[i11 + 4 >> 2] = i2;
    } else i27 = 177;
   } else i27 = 177; while (0);
   if ((i27 | 0) == 177) {
    i2 = i5 << 16 >> 10;
    HEAP32[i11 + 4 >> 2] = i2;
   }
   do if (!i18) {
    if (i10) {
     HEAP32[i11 + 12 >> 2] = i2;
     i27 = 210;
     break;
    }
    i7 = HEAP32[i28 + 128 >> 2] | 0;
    i6 = HEAP32[i7 + 12 >> 2] | 0;
    i7 = HEAP32[i7 + 4 >> 2] | 0;
    i3 = HEAP32[i6 + ((486426170 % (i7 >>> 0) | 0) << 2) >> 2] | 0;
    if (i3) {
     i5 = i6 + ((486426170 % (i7 >>> 0) | 0) << 2) | 0;
     while (1) {
      i4 = HEAP32[i3 >> 2] | 0;
      if ((HEAP8[i4 >> 0] | 0) == 80 ? (_strcmp(i4, 324323) | 0) == 0 : 0) {
       i27 = 187;
       break;
      }
      i3 = i5 + -4 | 0;
      i5 = i3 >>> 0 < i6 >>> 0 ? i6 + (i7 + -1 << 2) | 0 : i3;
      i3 = HEAP32[i5 >> 2] | 0;
      if (!i3) {
       i3 = 0;
       break;
      }
     }
     do if ((i27 | 0) == 187) {
      i4 = HEAP32[i28 + 80 >> 2] | 0;
      i3 = HEAP32[i3 + 4 >> 2] | 0;
      if (!(i4 + (i3 << 4) | 0)) {
       i3 = 0;
       break;
      }
      i3 = HEAP32[i4 + (i3 << 4) + 12 >> 2] << 16 >> 10;
      HEAP32[i11 + 12 >> 2] = i3;
     } while (0);
     if (i10) {
      i4 = 0;
      i5 = 0;
     } else i27 = 190;
    } else {
     i3 = 0;
     i27 = 190;
    }
    L278 : do if ((i27 | 0) == 190) {
     i8 = HEAP32[i28 + 128 >> 2] | 0;
     i7 = HEAP32[i8 + 12 >> 2] | 0;
     i8 = HEAP32[i8 + 4 >> 2] | 0;
     i4 = HEAP32[i7 + ((2286220677 % (i8 >>> 0) | 0) << 2) >> 2] | 0;
     if (i4) {
      i6 = i7 + ((2286220677 % (i8 >>> 0) | 0) << 2) | 0;
      while (1) {
       i5 = HEAP32[i4 >> 2] | 0;
       if ((HEAP8[i5 >> 0] | 0) == 82 ? (_strcmp(i5, 324334) | 0) == 0 : 0) {
        i27 = 195;
        break;
       }
       i4 = i6 + -4 | 0;
       i6 = i4 >>> 0 < i7 >>> 0 ? i7 + (i8 + -1 << 2) | 0 : i4;
       i4 = HEAP32[i6 >> 2] | 0;
       if (!i4) {
        i4 = 0;
        break;
       }
      }
      do if ((i27 | 0) == 195) {
       i5 = HEAP32[i28 + 80 >> 2] | 0;
       i4 = HEAP32[i4 + 4 >> 2] | 0;
       if (!(i5 + (i4 << 4) | 0)) {
        i4 = 0;
        break;
       }
       i4 = HEAP32[i5 + (i4 << 4) + 12 >> 2] | 0;
      } while (0);
      if (i10) {
       i5 = 0;
       break;
      } else i9 = i4;
     } else i9 = 0;
     i8 = HEAP32[i28 + 128 >> 2] | 0;
     i7 = HEAP32[i8 + 12 >> 2] | 0;
     i8 = HEAP32[i8 + 4 >> 2] | 0;
     i4 = HEAP32[i7 + ((2286220678 % (i8 >>> 0) | 0) << 2) >> 2] | 0;
     if (!i4) {
      i4 = i9;
      i5 = 0;
      break;
     }
     i6 = i7 + ((2286220678 % (i8 >>> 0) | 0) << 2) | 0;
     while (1) {
      i5 = HEAP32[i4 >> 2] | 0;
      if ((HEAP8[i5 >> 0] | 0) == 82 ? (_strcmp(i5, 324347) | 0) == 0 : 0) break;
      i4 = i6 + -4 | 0;
      i6 = i4 >>> 0 < i7 >>> 0 ? i7 + (i8 + -1 << 2) | 0 : i4;
      i4 = HEAP32[i6 >> 2] | 0;
      if (!i4) {
       i4 = i9;
       i5 = 0;
       break L278;
      }
     }
     i6 = HEAP32[i28 + 80 >> 2] | 0;
     i5 = HEAP32[i4 + 4 >> 2] | 0;
     if (!(i6 + (i5 << 4) | 0)) {
      i4 = i9;
      i5 = 0;
      break;
     }
     i4 = i9;
     i5 = HEAP32[i6 + (i5 << 4) + 12 >> 2] & 65535;
    } while (0);
    if (!i3) {
     HEAP32[i11 + 12 >> 2] = i2;
     if (!(i5 << 16 >> 16)) {
      i27 = 210;
      break;
     }
     i2 = (Math_imul(i2, i5 << 16 >> 16) | 0) / 72 | 0;
     HEAP32[i11 + 12 >> 2] = i2;
    } else i2 = i3;
    i3 = i4 << 16 >> 16;
    if (i5 << 16 >> 16 == 0 | (i3 | 0) == 0) i27 = 210; else HEAP32[i11 + 8 >> 2] = (Math_imul(i2, i3) | 0) / (i5 << 16 >> 16 | 0) | 0;
   } else {
    HEAP32[i11 + 12 >> 2] = i2;
    i27 = 210;
   } while (0);
   if ((i27 | 0) == 210) HEAP32[i11 + 8 >> 2] = i2;
   i5 = HEAP32[i28 + 56 >> 2] | 0;
   i6 = _ft_mem_realloc(i36, 8, 0, HEAP32[i28 + 48 >> 2] | 0, 0, i37 + 40 | 0) | 0;
   HEAP32[i38 + 144 >> 2] = i6;
   i2 = HEAP32[i37 + 40 >> 2] | 0;
   if (i2) {
    i38 = i2;
    STACKTOP = i37;
    return i38 | 0;
   }
   HEAP32[i38 + 164 >> 2] = 0;
   i2 = HEAP32[i28 + 48 >> 2] | 0;
   if (i2) {
    i3 = HEAP32[i28 + 36 >> 2] | 0;
    i4 = 0;
    do {
     i33 = HEAP32[i5 + (i4 * 36 | 0) + 4 >> 2] | 0;
     HEAP32[i6 + (i4 << 3) >> 2] = i33;
     HEAP16[i6 + (i4 << 3) + 4 >> 1] = i4;
     if ((i33 | 0) == (i3 | 0)) HEAP32[i38 + 164 >> 2] = i4;
     i4 = i4 + 1 | 0;
    } while (i4 >>> 0 < i2 >>> 0);
   }
   i4 = (HEAP32[i28 + 72 >> 2] | 0) == 0;
   L320 : do if (!i4 ? (i35 = HEAP32[i28 + 128 >> 2] | 0, i34 = HEAP32[i35 + 12 >> 2] | 0, i35 = HEAP32[i35 + 4 >> 2] | 0, i1 = HEAP32[i34 + ((3781719536 % (i35 >>> 0) | 0) << 2) >> 2] | 0, (i1 | 0) != 0) : 0) {
    i3 = i34 + ((3781719536 % (i35 >>> 0) | 0) << 2) | 0;
    while (1) {
     i2 = HEAP32[i1 >> 2] | 0;
     if ((HEAP8[i2 >> 0] | 0) == 67 ? (_strcmp(i2, 325861) | 0) == 0 : 0) break;
     i1 = i3 + -4 | 0;
     i3 = i1 >>> 0 < i34 >>> 0 ? i34 + (i35 + -1 << 2) | 0 : i1;
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i6 = 0;
      break L320;
     }
    }
    i6 = (HEAP32[i28 + 80 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] << 4) | 0;
   } else i6 = 0; while (0);
   L330 : do if (!(i18 | i4)) {
    i5 = HEAP32[i28 + 128 >> 2] | 0;
    i4 = HEAP32[i5 + 12 >> 2] | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    i1 = HEAP32[i4 + ((1888187142 % (i5 >>> 0) | 0) << 2) >> 2] | 0;
    if (!i1) break;
    i3 = i4 + ((1888187142 % (i5 >>> 0) | 0) << 2) | 0;
    while (1) {
     i2 = HEAP32[i1 >> 2] | 0;
     if ((HEAP8[i2 >> 0] | 0) == 67 ? (_strcmp(i2, 325878) | 0) == 0 : 0) break;
     i1 = i3 + -4 | 0;
     i3 = i1 >>> 0 < i4 >>> 0 ? i4 + (i5 + -1 << 2) | 0 : i1;
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) break L330;
    }
    i2 = HEAP32[i28 + 80 >> 2] | 0;
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (!((i6 | 0) != 0 & (i2 + (i1 << 4) | 0) != 0)) break;
    if ((HEAP32[i6 + 4 >> 2] | 0) != 1) break;
    if ((HEAP32[i2 + (i1 << 4) + 4 >> 2] | 0) != 1) break;
    i3 = i6 + 12 | 0;
    if (!(HEAP32[i3 >> 2] | 0)) break;
    i1 = HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0;
    if (!i1) break;
    HEAP32[i38 + 132 >> 2] = _ft_mem_strdup(i36, i1, i37 + 40 | 0) | 0;
    i1 = HEAP32[i37 + 40 >> 2] | 0;
    if (i1) {
     i38 = i1;
     STACKTOP = i37;
     return i38 | 0;
    }
    i1 = _ft_mem_strdup(i36, HEAP32[i3 >> 2] | 0, i37 + 40 | 0) | 0;
    HEAP32[i38 + 136 >> 2] = i1;
    i2 = HEAP32[i37 + 40 >> 2] | 0;
    if (i2) {
     i38 = i2;
     STACKTOP = i37;
     return i38 | 0;
    }
    L350 : do switch (HEAP8[i1 >> 0] | 0) {
    case 73:
    case 105:
     {
      switch (HEAP8[i1 + 1 >> 0] | 0) {
      case 83:
      case 115:
       break;
      default:
       {
        i1 = 0;
        break L350;
       }
      }
      switch (HEAP8[i1 + 2 >> 0] | 0) {
      case 79:
      case 111:
       break;
      default:
       {
        i1 = 0;
        break L350;
       }
      }
      if (_strcmp(i1 + 3 | 0, 324360) | 0) {
       if (_strcmp(i1 + 3 | 0, 324366) | 0) {
        i1 = 0;
        break L350;
       }
       if (_strcmp(HEAP32[i38 + 132 >> 2] | 0, 324371) | 0) {
        i1 = 0;
        break L350;
       }
      }
      i1 = 1;
      break;
     }
    default:
     i1 = 0;
    } while (0);
    HEAP32[i37 + 12 >> 2] = i38;
    HEAP32[i37 + 12 + 4 >> 2] = 0;
    HEAP16[i37 + 12 + 8 >> 1] = 0;
    HEAP16[i37 + 12 + 10 >> 1] = 0;
    if (i1) {
     HEAP32[i37 + 12 + 4 >> 2] = 1970170211;
     HEAP16[i37 + 12 + 8 >> 1] = 3;
     HEAP16[i37 + 12 + 10 >> 1] = 1;
    }
    i38 = _FT_CMap_New(270828, 0, i37 + 12 | 0, 0) | 0;
    HEAP32[i37 + 40 >> 2] = i38;
    STACKTOP = i37;
    return i38 | 0;
   } while (0);
   HEAP32[i37 >> 2] = i38;
   HEAP32[i37 + 4 >> 2] = 1094995778;
   HEAP16[i37 + 8 >> 1] = 7;
   HEAP16[i37 + 10 >> 1] = 0;
   i1 = _FT_CMap_New(270828, 0, i37, 0) | 0;
   HEAP32[i37 + 40 >> 2] = i1;
   if (!(HEAP32[i38 + 36 >> 2] | 0)) {
    i38 = i1;
    STACKTOP = i37;
    return i38 | 0;
   }
   HEAP32[i38 + 92 >> 2] = HEAP32[HEAP32[i38 + 40 >> 2] >> 2];
   i38 = i1;
   STACKTOP = i37;
   return i38 | 0;
  }
 default:
  {
   i38 = i3;
   STACKTOP = i37;
   return i38 | 0;
  }
 }
 return 0;
}

function _Render_Single_Pass(i18, i17) {
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i18 + 1024 >> 2] | 0;
 if ((i1 | 0) <= -1) {
  i18 = 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 L4 : while (1) {
  i2 = HEAP32[i18 + 4 >> 2] | 0;
  HEAP32[i18 + 80 >> 2] = Math_imul(HEAP16[i18 + 960 + (i1 << 2) + 2 >> 1] | 0, i2) | 0;
  HEAP32[i18 + 76 >> 2] = Math_imul(HEAP16[i18 + 960 + (i1 << 2) >> 1] | 0, i2) | 0;
  i2 = HEAP32[i18 + 28 >> 2] | 0;
  HEAP32[i18 + 40 >> 2] = i2;
  HEAP32[i18 + 44 >> 2] = 0;
  HEAP32[i18 + 92 >> 2] = 0;
  HEAP8[i18 + 87 >> 0] = 0;
  HEAP8[i18 + 86 >> 0] = 0;
  i1 = (HEAP32[i18 + 32 >> 2] | 0) + -32 | 0;
  HEAP32[i18 + 36 >> 2] = i1;
  HEAP32[i18 + 48 >> 2] = 0;
  HEAP32[i18 + 88 >> 2] = i2;
  HEAP32[i2 + 8 >> 2] = i2;
  HEAP16[i18 + 84 >> 1] = 0;
  L6 : do if ((HEAP16[i18 + 128 >> 1] | 0) > 0) {
   i6 = HEAP32[i18 + 140 >> 2] | 0;
   i1 = HEAP32[i18 + 8 >> 2] | 0;
   i13 = 0;
   i7 = 0;
   while (1) {
    HEAP32[i18 + 100 >> 2] = 0;
    HEAP32[i18 + 96 >> 2] = 0;
    i8 = HEAP32[i18 + 132 >> 2] | 0;
    i4 = HEAPU16[i6 + (i13 << 1) >> 1] | 0;
    i7 = i7 & 65535;
    i2 = HEAP32[i18 + 24 >> 2] | 0;
    i3 = (HEAP32[i8 + (i7 << 3) >> 2] << i2) - i1 | 0;
    i6 = (HEAP32[i8 + (i7 << 3) + 4 >> 2] << i2) - i1 | 0;
    i5 = (HEAP32[i8 + (i4 << 3) >> 2] << i2) - i1 | 0;
    i2 = (HEAP32[i8 + (i4 << 3) + 4 >> 2] << i2) - i1 | 0;
    i9 = i17 << 24 >> 24 != 0 ? i6 : i3;
    i6 = i17 << 24 >> 24 != 0 ? i3 : i6;
    i3 = i17 << 24 >> 24 != 0 ? i2 : i5;
    i2 = i17 << 24 >> 24 != 0 ? i5 : i2;
    i5 = HEAP32[i18 + 136 >> 2] | 0;
    i1 = HEAP8[i5 + i7 >> 0] | 0;
    if (i1 & 4) {
     HEAP8[i18 + 180 >> 0] = (i1 & 255) >>> 5;
     i1 = HEAP8[i5 + i7 >> 0] | 0;
    }
    switch (i1 & 3 | 0) {
    case 2:
     {
      i15 = 31;
      break L4;
     }
    case 0:
     {
      if ((HEAP8[i5 + i4 >> 0] & 3) == 1) i1 = i8 + (i4 + -1 << 3) | 0; else {
       i1 = i8 + (i4 << 3) | 0;
       i3 = (i3 + i9 | 0) / 2 | 0;
       i2 = (i2 + i6 | 0) / 2 | 0;
      }
      i12 = i1;
      i4 = i8 + (i7 + -1 << 3) | 0;
      i1 = i5 + (i7 + -1) | 0;
      i11 = i3;
      i10 = i2;
      break;
     }
    default:
     {
      i12 = i8 + (i4 << 3) | 0;
      i4 = i8 + (i7 << 3) | 0;
      i1 = i5 + i7 | 0;
      i11 = i9;
      i10 = i6;
     }
    }
    HEAP32[i18 + 68 >> 2] = i11;
    HEAP32[i18 + 72 >> 2] = i10;
    L20 : do if (i4 >>> 0 < i12 >>> 0) {
     L21 : while (1) {
      i3 = i4 + 8 | 0;
      i5 = i1 + 1 | 0;
      switch (HEAPU8[i5 >> 0] & 3 | 0) {
      case 1:
       {
        i8 = HEAP32[i18 + 24 >> 2] | 0;
        i15 = HEAP32[i18 + 8 >> 2] | 0;
        i14 = (HEAP32[i3 >> 2] << i8) - i15 | 0;
        i15 = (HEAP32[i4 + 12 >> 2] << i8) - i15 | 0;
        if (!((_Line_To(i18, i17 << 24 >> 24 != 0 ? i15 : i14, i17 << 24 >> 24 != 0 ? i14 : i15) | 0) << 24 >> 24)) {
         i2 = i3;
         i1 = i5;
        } else {
         i15 = 86;
         break L6;
        }
        break;
       }
      case 0:
       {
        i2 = HEAP32[i18 + 24 >> 2] | 0;
        i1 = HEAP32[i18 + 8 >> 2] | 0;
        i15 = (HEAP32[i3 >> 2] << i2) - i1 | 0;
        i1 = (HEAP32[i4 + 12 >> 2] << i2) - i1 | 0;
        i2 = i17 << 24 >> 24 != 0 ? i1 : i15;
        i1 = i17 << 24 >> 24 != 0 ? i15 : i1;
        L30 : do if (i17 << 24 >> 24) {
         i6 = i3;
         while (1) {
          if (i6 >>> 0 >= i12 >>> 0) {
           i15 = 24;
           break L21;
          }
          i9 = i6 + 8 | 0;
          i5 = i5 + 1 | 0;
          i14 = HEAP32[i18 + 24 >> 2] | 0;
          i15 = HEAP32[i18 + 8 >> 2] | 0;
          i3 = i1;
          i1 = (HEAP32[i9 >> 2] << i14) - i15 | 0;
          i7 = i2;
          i2 = (HEAP32[i4 + 20 >> 2] << i14) - i15 | 0;
          switch (HEAPU8[i5 >> 0] & 3 | 0) {
          case 1:
           {
            i4 = i7;
            break L30;
           }
          case 0:
           break;
          default:
           {
            i15 = 31;
            break L4;
           }
          }
          if ((_Conic_To(i18, i7, i3, (i2 + i7 | 0) / 2 | 0, (i1 + i3 | 0) / 2 | 0) | 0) << 24 >> 24) {
           i15 = 86;
           break L6;
          } else {
           i4 = i6;
           i6 = i9;
          }
         }
        } else {
         i6 = i3;
         while (1) {
          if (i6 >>> 0 >= i12 >>> 0) {
           i15 = 24;
           break L21;
          }
          i9 = i6 + 8 | 0;
          i5 = i5 + 1 | 0;
          i14 = HEAP32[i18 + 24 >> 2] | 0;
          i15 = HEAP32[i18 + 8 >> 2] | 0;
          i7 = i2;
          i2 = (HEAP32[i9 >> 2] << i14) - i15 | 0;
          i3 = i1;
          i1 = (HEAP32[i4 + 20 >> 2] << i14) - i15 | 0;
          switch (HEAPU8[i5 >> 0] & 3 | 0) {
          case 1:
           {
            i4 = i7;
            break L30;
           }
          case 0:
           break;
          default:
           {
            i15 = 31;
            break L4;
           }
          }
          if ((_Conic_To(i18, i7, i3, (i2 + i7 | 0) / 2 | 0, (i1 + i3 | 0) / 2 | 0) | 0) << 24 >> 24) {
           i15 = 86;
           break L6;
          } else {
           i4 = i6;
           i6 = i9;
          }
         }
        } while (0);
        if (!((_Conic_To(i18, i4, i3, i2, i1) | 0) << 24 >> 24)) {
         i2 = i9;
         i1 = i5;
        } else {
         i15 = 86;
         break L6;
        }
        break;
       }
      default:
       {
        if ((i4 + 16 | 0) >>> 0 > i12 >>> 0) {
         i15 = 31;
         break L4;
        }
        if ((HEAP8[i1 + 2 >> 0] & 3) != 2) {
         i15 = 31;
         break L4;
        }
        i2 = i4 + 24 | 0;
        i3 = HEAP32[i18 + 24 >> 2] | 0;
        i5 = HEAP32[i18 + 8 >> 2] | 0;
        i8 = (HEAP32[i4 + 8 >> 2] << i3) - i5 | 0;
        i7 = (HEAP32[i4 + 12 >> 2] << i3) - i5 | 0;
        i15 = (HEAP32[i4 + 16 >> 2] << i3) - i5 | 0;
        i9 = (HEAP32[i4 + 20 >> 2] << i3) - i5 | 0;
        i6 = i17 << 24 >> 24 != 0 ? i7 : i8;
        i7 = i17 << 24 >> 24 != 0 ? i8 : i7;
        i8 = i17 << 24 >> 24 != 0 ? i9 : i15;
        i9 = i17 << 24 >> 24 != 0 ? i15 : i9;
        if (i2 >>> 0 > i12 >>> 0) {
         i15 = 29;
         break L21;
        }
        i14 = (HEAP32[i2 >> 2] << i3) - i5 | 0;
        i15 = (HEAP32[i4 + 28 >> 2] << i3) - i5 | 0;
        if (!((_Cubic_To(i18, i6, i7, i8, i9, i17 << 24 >> 24 != 0 ? i15 : i14, i17 << 24 >> 24 != 0 ? i14 : i15) | 0) << 24 >> 24)) i1 = i1 + 3 | 0; else {
         i15 = 86;
         break L6;
        }
       }
      }
      if (i2 >>> 0 < i12 >>> 0) i4 = i2; else {
       i15 = 30;
       break L20;
      }
     }
     if ((i15 | 0) == 24) {
      i15 = 0;
      if (!((_Conic_To(i18, i2, i1, i11, i10) | 0) << 24 >> 24)) break; else {
       i15 = 86;
       break L6;
      }
     } else if ((i15 | 0) == 29) {
      i15 = 0;
      if (!((_Cubic_To(i18, i6, i7, i8, i9, i11, i10) | 0) << 24 >> 24)) break; else {
       i15 = 86;
       break L6;
      }
     }
    } else i15 = 30; while (0);
    if ((i15 | 0) == 30 ? (i15 = 0, (_Line_To(i18, i11, i10) | 0) << 24 >> 24 != 0) : 0) {
     i15 = 86;
     break L6;
    }
    i6 = HEAP32[i18 + 140 >> 2] | 0;
    i7 = (HEAP16[i6 + (i13 << 1) >> 1] | 0) + 1 | 0;
    i1 = HEAP32[i18 + 72 >> 2] | 0;
    i2 = HEAP32[i18 + 4 >> 2] | 0;
    if (((((i2 + -1 & i1 | 0) == 0 ? (i1 | 0) >= (HEAP32[i18 + 76 >> 2] | 0) : 0) ? (i1 | 0) <= (HEAP32[i18 + 80 >> 2] | 0) : 0) ? (i16 = HEAP32[i18 + 96 >> 2] | 0, (i16 | 0) != 0) : 0) ? ((HEAP32[(HEAP32[i18 + 88 >> 2] | 0) + 12 >> 2] ^ HEAP32[i16 + 12 >> 2]) & 8 | 0) == 0 : 0) HEAP32[i18 + 40 >> 2] = (HEAP32[i18 + 40 >> 2] | 0) + -4;
    i9 = HEAP32[i18 + 88 >> 2] | 0;
    i4 = HEAP32[i9 + 12 >> 2] | 0;
    if (!(i4 & 8)) {
     i3 = HEAP32[i18 + 8 >> 2] | 0;
     i5 = i3;
     i3 = ((i1 + -1 + i2 & 0 - i2) - i1 | 0) >= (i3 | 0);
    } else {
     i3 = HEAP32[i18 + 8 >> 2] | 0;
     i5 = i3;
     i3 = (i2 + -1 & i1 | 0) >= (i3 | 0);
    }
    i2 = HEAP32[i18 + 40 >> 2] | 0;
    i1 = i2 - (HEAP32[i9 + 8 >> 2] | 0) | 0;
    if ((i1 | 0) < 0) {
     i15 = 42;
     break L4;
    }
    if ((i1 | 0) > 0) {
     HEAP32[i9 + 16 >> 2] = i1 >> 2;
     do if (i3) if (!(i4 & 8)) {
      HEAP32[i9 + 12 >> 2] = i4 | 32;
      break;
     } else {
      HEAP32[i9 + 12 >> 2] = i4 | 16;
      break;
     } while (0);
     HEAP32[i18 + 88 >> 2] = i2;
     HEAP32[i18 + 40 >> 2] = i2 + 32;
     HEAP32[i2 + 16 >> 2] = 0;
     HEAP32[i2 + 8 >> 2] = i2 + 32;
     HEAP32[i9 + 28 >> 2] = i2;
     HEAP16[i18 + 84 >> 1] = (HEAP16[i18 + 84 >> 1] | 0) + 1 << 16 >> 16;
     i2 = i2 + 32 | 0;
    }
    i1 = HEAP32[i18 + 36 >> 2] | 0;
    if (i2 >>> 0 >= i1 >>> 0) {
     i15 = 50;
     break;
    }
    HEAP8[i18 + 87 >> 0] = 0;
    i3 = HEAP32[i18 + 96 >> 2] | 0;
    if (i3) HEAP32[i9 + 28 >> 2] = i3;
    i13 = i13 + 1 | 0;
    if ((i13 | 0) >= (HEAP16[i18 + 128 >> 1] | 0)) break; else i1 = i5;
   }
   if ((i15 | 0) == 50) {
    HEAP32[i18 + 44 >> 2] = 98;
    i15 = 87;
    break;
   }
   i4 = HEAP16[i18 + 84 >> 1] | 0;
   i3 = HEAP32[i18 + 92 >> 2] | 0;
   if ((i4 & 65535) > 1 & (i3 | 0) != 0) if (i4 << 16 >> 16) {
    i14 = HEAP32[i18 + 32 >> 2] | 0;
    i12 = i2;
    i6 = i3;
    while (1) {
     i7 = HEAP32[i6 + 16 >> 2] | 0;
     if ((i4 & 65535) > 1) {
      i13 = (HEAP32[i6 + 8 >> 2] | 0) + (i7 << 2) | 0;
      HEAP32[i6 + 4 >> 2] = i13;
     } else {
      HEAP32[i6 + 4 >> 2] = 0;
      i13 = 0;
     }
     i5 = i6 + 20 | 0;
     i8 = HEAP32[i5 >> 2] | 0;
     if (!(HEAP32[i6 + 12 >> 2] & 8)) {
      HEAP32[i5 >> 2] = i8 - i7 + 1;
      i5 = i6 + 8 | 0;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (i7 + -1 << 2);
      i5 = i8 - i7 + 1 | 0;
     } else {
      i5 = i8;
      i8 = i7 + -1 + i8 | 0;
     }
     i11 = HEAP32[i18 + 48 >> 2] | 0;
     i7 = i11;
     while (1) {
      i6 = i7 + -1 | 0;
      if ((i7 | 0) <= 0) {
       i15 = 69;
       break;
      }
      i9 = HEAP32[i14 + (i6 - i11 << 2) >> 2] | 0;
      if ((i9 | 0) > (i5 | 0)) i7 = i6; else {
       i10 = i7;
       i15 = 66;
       break;
      }
     }
     if ((i15 | 0) == 66) if ((i9 | 0) < (i5 | 0)) {
      while (1) {
       i15 = i14 + (i6 - i11 << 2) | 0;
       i7 = HEAP32[i15 >> 2] | 0;
       HEAP32[i15 >> 2] = i5;
       if ((i6 | 0) > 0) {
        i5 = i7;
        i6 = i6 + -1 | 0;
       } else break;
      }
      if ((0 - i10 | 0) > -1) {
       i5 = i7;
       i6 = i10 + -2 | 0;
       i15 = 69;
      } else {
       i5 = i7;
       i15 = 70;
      }
     } else i15 = 69;
     if ((i15 | 0) == 69) {
      i15 = 0;
      if ((i6 | 0) < 0) i15 = 70;
     }
     if ((i15 | 0) == 70) {
      i1 = i1 + -4 | 0;
      HEAP32[i18 + 36 >> 2] = i1;
      if (i1 >>> 0 <= i12 >>> 0) {
       i15 = 72;
       break;
      }
      HEAP32[i18 + 48 >> 2] = i11 + 1;
      HEAP32[i14 + (~i11 << 2) >> 2] = i5;
      i11 = i11 + 1 | 0;
     }
     i5 = i8 + 1 | 0;
     i7 = i11;
     while (1) {
      i6 = i7 + -1 | 0;
      if ((i7 | 0) <= 0) {
       i15 = 79;
       break;
      }
      i9 = HEAP32[i14 + (i6 - i11 << 2) >> 2] | 0;
      if ((i9 | 0) > (i5 | 0)) i7 = i6; else {
       i8 = i7;
       i15 = 76;
       break;
      }
     }
     if ((i15 | 0) == 76) if ((i9 | 0) < (i5 | 0)) {
      while (1) {
       i15 = i14 + (i6 - i11 << 2) | 0;
       i7 = HEAP32[i15 >> 2] | 0;
       HEAP32[i15 >> 2] = i5;
       if ((i6 | 0) > 0) {
        i5 = i7;
        i6 = i6 + -1 | 0;
       } else break;
      }
      if ((0 - i8 | 0) > -1) {
       i5 = i7;
       i6 = i8 + -2 | 0;
       i15 = 79;
      } else {
       i5 = i7;
       i15 = 80;
      }
     } else i15 = 79;
     if ((i15 | 0) == 79) {
      i15 = 0;
      if ((i6 | 0) < 0) i15 = 80; else i5 = i12;
     }
     if ((i15 | 0) == 80) {
      i1 = i1 + -4 | 0;
      HEAP32[i18 + 36 >> 2] = i1;
      if (i1 >>> 0 <= i2 >>> 0) {
       i15 = 82;
       break;
      }
      HEAP32[i18 + 48 >> 2] = i11 + 1;
      HEAP32[i14 + (~i11 << 2) >> 2] = i5;
      i5 = i2;
     }
     i4 = i4 + -1 << 16 >> 16;
     if (!(i4 << 16 >> 16)) {
      i15 = 85;
      break L6;
     } else {
      i12 = i5;
      i6 = i13;
     }
    }
    if ((i15 | 0) == 72) {
     HEAP32[i18 + 44 >> 2] = 98;
     i15 = 87;
     break;
    } else if ((i15 | 0) == 82) {
     HEAP32[i18 + 44 >> 2] = 98;
     i15 = 87;
     break;
    }
   } else i15 = 85; else i15 = 84;
  } else i15 = 84; while (0);
  if ((i15 | 0) == 84) {
   HEAP32[i18 + 92 >> 2] = 0;
   i3 = 0;
   i15 = 85;
  }
  if ((i15 | 0) == 85) {
   i15 = 0;
   if (i2 >>> 0 < i1 >>> 0) {
    if (i3) {
     HEAP32[i19 + 8 >> 2] = 0;
     HEAP32[i19 + 4 >> 2] = 0;
     HEAP32[i19 >> 2] = 0;
     i4 = HEAP32[i18 >> 2] | 0;
     i5 = HEAP32[i18 + 76 >> 2] >> i4 & 65535;
     HEAP16[i19 + 12 >> 1] = i5;
     i4 = HEAP32[i18 + 80 >> 2] >> i4 & 65535;
     HEAP16[i19 + 14 >> 1] = i4;
     do {
      i9 = i3 + 4 | 0;
      i6 = i3;
      i3 = HEAP32[i9 >> 2] | 0;
      i1 = HEAP32[i6 + 20 >> 2] | 0;
      i2 = i1 + 65535 + (HEAP32[i6 + 16 >> 2] | 0) | 0;
      if ((i4 << 16 >> 16 | 0) > (i1 << 16 >> 16 | 0)) {
       HEAP16[i19 + 14 >> 1] = i1;
       i4 = i1 & 65535;
      }
      if ((i5 << 16 >> 16 | 0) < (i2 << 16 >> 16 | 0)) {
       HEAP16[i19 + 12 >> 1] = i2;
       i5 = i2 & 65535;
      }
      HEAP32[i6 >> 2] = 0;
      i1 = HEAP32[i19 + 8 >> 2] | 0;
      L133 : do if (!i1) {
       i2 = i19 + 8 | 0;
       i1 = 0;
      } else {
       i2 = i19 + 8 | 0;
       while (1) {
        if ((HEAP32[i1 >> 2] | 0) > 0) break L133;
        i2 = i1 + 4 | 0;
        i1 = HEAP32[i2 >> 2] | 0;
        if (!i1) {
         i1 = 0;
         break;
        }
       }
      } while (0);
      HEAP32[i9 >> 2] = i1;
      HEAP32[i2 >> 2] = i6;
     } while ((i3 | 0) != 0);
     if (!(HEAP32[i18 + 48 >> 2] | 0)) {
      i15 = 101;
      break;
     }
     FUNCTION_TABLE_viii[HEAP32[i18 + 164 >> 2] & 31](i18, i19 + 14 | 0, i19 + 12 | 0);
     i3 = HEAP32[i19 + 8 >> 2] | 0;
     i1 = HEAP16[i19 + 14 >> 1] | 0;
     if (i3) {
      i2 = i3;
      do {
       HEAP32[i2 + 24 >> 2] = (HEAP32[i2 + 20 >> 2] | 0) - (i1 & 65535) & 65535;
       i2 = HEAP32[i2 + 4 >> 2] | 0;
      } while ((i2 | 0) != 0);
     }
     i2 = HEAP32[i18 + 48 >> 2] | 0;
     L145 : do if ((i2 | 0) > 0) {
      if ((HEAP32[(HEAP32[i18 + 32 >> 2] | 0) + (0 - i2 << 2) >> 2] | 0) == (i1 << 16 >> 16 | 0)) {
       HEAP32[i18 + 48 >> 2] = i2 + -1;
       if ((i2 | 0) > 1) {
        i2 = i2 + -1 | 0;
        i4 = 0;
       } else break;
      } else i4 = 0;
      while (1) {
       if (i3) {
        i8 = i4 << 16 >> 16;
        do {
         i6 = i3 + 4 | 0;
         i7 = i3;
         i3 = HEAP32[i6 >> 2] | 0;
         i14 = HEAP32[i7 + 24 >> 2] | 0;
         HEAP32[i7 + 24 >> 2] = i14 - i8;
         do if ((i14 | 0) == (i8 | 0)) {
          i4 = i19 + 8 | 0;
          while (1) {
           i5 = HEAP32[i4 >> 2] | 0;
           if (!i5) break;
           if ((i5 | 0) == (i7 | 0)) {
            i15 = 116;
            break;
           } else i4 = i5 + 4 | 0;
          }
          if ((i15 | 0) == 116) {
           i15 = 0;
           HEAP32[i4 >> 2] = HEAP32[i5 + 4 >> 2];
          }
          i9 = HEAP32[i7 >> 2] | 0;
          if (!(HEAP32[i7 + 12 >> 2] & 8)) {
           i4 = HEAP32[i19 >> 2] | 0;
           L164 : do if (!i4) {
            i5 = i19;
            i4 = 0;
           } else {
            i5 = i19;
            while (1) {
             if ((i9 | 0) < (HEAP32[i4 >> 2] | 0)) break L164;
             i5 = i4 + 4 | 0;
             i4 = HEAP32[i5 >> 2] | 0;
             if (!i4) {
              i4 = 0;
              break;
             }
            }
           } while (0);
           HEAP32[i6 >> 2] = i4;
           HEAP32[i5 >> 2] = i7;
           break;
          } else {
           i4 = HEAP32[i19 + 4 >> 2] | 0;
           L170 : do if (!i4) {
            i5 = i19 + 4 | 0;
            i4 = 0;
           } else {
            i5 = i19 + 4 | 0;
            while (1) {
             if ((i9 | 0) < (HEAP32[i4 >> 2] | 0)) break L170;
             i5 = i4 + 4 | 0;
             i4 = HEAP32[i5 >> 2] | 0;
             if (!i4) {
              i4 = 0;
              break;
             }
            }
           } while (0);
           HEAP32[i6 >> 2] = i4;
           HEAP32[i5 >> 2] = i7;
           break;
          }
         } while (0);
        } while ((i3 | 0) != 0);
       }
       i4 = HEAP32[i19 + 4 >> 2] | 0;
       if (i4) {
        i3 = i4;
        do {
         i14 = i3 + 8 | 0;
         i13 = HEAP32[i14 >> 2] | 0;
         HEAP32[i3 >> 2] = HEAP32[i13 >> 2];
         HEAP32[i14 >> 2] = i13 + (((HEAP32[i3 + 12 >> 2] | 0) >>> 2 & 2) + -1 << 2);
         i14 = i3 + 16 | 0;
         HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
         i3 = HEAP32[i3 + 4 >> 2] | 0;
        } while ((i3 | 0) != 0);
        i5 = HEAP32[i4 + 4 >> 2] | 0;
        if (i5) {
         i3 = i4;
         i6 = i4 + 4 | 0;
         i4 = i19 + 4 | 0;
         do {
          if ((HEAP32[i3 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) {
           HEAP32[i4 >> 2] = i5;
           i4 = i5 + 4 | 0;
           HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
           HEAP32[i4 >> 2] = i3;
           i3 = HEAP32[i19 + 4 >> 2] | 0;
           i4 = i19 + 4 | 0;
          } else {
           i3 = i5;
           i4 = i6;
          }
          i6 = i3 + 4 | 0;
          i5 = HEAP32[i6 >> 2] | 0;
         } while ((i5 | 0) != 0);
        }
       }
       i4 = HEAP32[i19 >> 2] | 0;
       if (i4) {
        i3 = i4;
        do {
         i14 = i3 + 8 | 0;
         i13 = HEAP32[i14 >> 2] | 0;
         HEAP32[i3 >> 2] = HEAP32[i13 >> 2];
         HEAP32[i14 >> 2] = i13 + (((HEAP32[i3 + 12 >> 2] | 0) >>> 2 & 2) + -1 << 2);
         i14 = i3 + 16 | 0;
         HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
         i3 = HEAP32[i3 + 4 >> 2] | 0;
        } while ((i3 | 0) != 0);
        i5 = HEAP32[i4 + 4 >> 2] | 0;
        if (!i5) i3 = i4; else {
         i3 = i4;
         i6 = i4;
         i7 = i4 + 4 | 0;
         i4 = i19;
         do {
          if ((HEAP32[i6 >> 2] | 0) > (HEAP32[i5 >> 2] | 0)) {
           HEAP32[i4 >> 2] = i5;
           i3 = i5 + 4 | 0;
           HEAP32[i7 >> 2] = HEAP32[i3 >> 2];
           HEAP32[i3 >> 2] = i6;
           i6 = HEAP32[i19 >> 2] | 0;
           i3 = i6;
           i4 = i19;
          } else {
           i6 = i5;
           i4 = i7;
          }
          i7 = i6 + 4 | 0;
          i5 = HEAP32[i7 >> 2] | 0;
         } while ((i5 | 0) != 0);
        }
       } else i3 = 0;
       HEAP32[i18 + 48 >> 2] = i2 + -1;
       i10 = HEAP32[(HEAP32[i18 + 32 >> 2] | 0) + (0 - i2 << 2) >> 2] << 16 >> 16;
       i4 = i10 - (i1 & 65535) | 0;
       L197 : do if ((i1 << 16 >> 16 | 0) < (i10 | 0)) L198 : while (1) {
        i9 = HEAP32[i19 + 4 >> 2] | 0;
        do if (i9) {
         i5 = i9;
         i2 = 0;
         while (1) {
          i8 = HEAP32[i5 >> 2] | 0;
          i7 = HEAP32[i3 >> 2] | 0;
          i6 = (i8 | 0) > (i7 | 0) ? i7 : i8;
          i7 = (i8 | 0) > (i7 | 0) ? i8 : i7;
          i8 = HEAP32[i18 + 4 >> 2] | 0;
          do if ((i7 - i6 | 0) > (i8 | 0) | (i6 & 0 - i8 | 0) == (i6 | 0) | (i8 + -1 + i7 & 0 - i8 | 0) == (i7 | 0)) i15 = 145; else {
           if (!((i6 & 0 - i8 | 0) > (i8 + -1 + i7 & 0 - i8 | 0) ? 1 : (i8 + -1 + i7 & 0 - i8 | 0) == ((i6 & 0 - i8) + i8 | 0))) {
            i15 = 145;
            break;
           }
           if ((HEAP32[i5 + 12 >> 2] & 7 | 0) == 2) break;
           HEAP32[i5 >> 2] = i6;
           HEAP32[i3 >> 2] = i7;
           HEAP32[i5 + 24 >> 2] = 1;
           i2 = i2 + 1 << 16 >> 16;
          } while (0);
          if ((i15 | 0) == 145) {
           i15 = 0;
           FUNCTION_TABLE_viiiiii[HEAP32[i18 + 168 >> 2] & 7](i18, i1, i6, i7, i5, i3);
          }
          i5 = HEAP32[i5 + 4 >> 2] | 0;
          if (!i5) break;
          i3 = HEAP32[i3 + 4 >> 2] | 0;
         }
         if (i2 << 16 >> 16 < 1) break; else {
          i5 = i9;
          i2 = i19;
         }
         while (1) {
          i3 = HEAP32[i2 >> 2] | 0;
          i2 = i5 + 24 | 0;
          if (HEAP32[i2 >> 2] | 0) {
           HEAP32[i2 >> 2] = 0;
           FUNCTION_TABLE_viiiiii[HEAP32[i18 + 172 >> 2] & 7](i18, i1, HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0, i5, i3);
          }
          i5 = HEAP32[i5 + 4 >> 2] | 0;
          if (!i5) break; else i2 = i3 + 4 | 0;
         }
        } while (0);
        FUNCTION_TABLE_vi[HEAP32[i18 + 176 >> 2] & 127](i18);
        i1 = i1 + 1 << 16 >> 16;
        if ((i1 << 16 >> 16 | 0) >= (i10 | 0)) break L197;
        do if (i9) {
         i2 = i9;
         do {
          i14 = i2 + 8 | 0;
          i13 = HEAP32[i14 >> 2] | 0;
          HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
          HEAP32[i14 >> 2] = i13 + (((HEAP32[i2 + 12 >> 2] | 0) >>> 2 & 2) + -1 << 2);
          i14 = i2 + 16 | 0;
          HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
          i2 = HEAP32[i2 + 4 >> 2] | 0;
         } while ((i2 | 0) != 0);
         i3 = HEAP32[i9 + 4 >> 2] | 0;
         if (!i3) break; else {
          i2 = i9;
          i6 = i9 + 4 | 0;
          i5 = i19 + 4 | 0;
         }
         do {
          if ((HEAP32[i2 >> 2] | 0) > (HEAP32[i3 >> 2] | 0)) {
           HEAP32[i5 >> 2] = i3;
           i5 = i3 + 4 | 0;
           HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
           HEAP32[i5 >> 2] = i2;
           i2 = HEAP32[i19 + 4 >> 2] | 0;
           i5 = i19 + 4 | 0;
          } else {
           i2 = i3;
           i5 = i6;
          }
          i6 = i2 + 4 | 0;
          i3 = HEAP32[i6 >> 2] | 0;
         } while ((i3 | 0) != 0);
        } while (0);
        i3 = HEAP32[i19 >> 2] | 0;
        if (!i3) {
         i3 = 0;
         continue;
        } else i2 = i3;
        do {
         i14 = i2 + 8 | 0;
         i13 = HEAP32[i14 >> 2] | 0;
         HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
         HEAP32[i14 >> 2] = i13 + (((HEAP32[i2 + 12 >> 2] | 0) >>> 2 & 2) + -1 << 2);
         i14 = i2 + 16 | 0;
         HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -1;
         i2 = HEAP32[i2 + 4 >> 2] | 0;
        } while ((i2 | 0) != 0);
        i2 = HEAP32[i3 + 4 >> 2] | 0;
        if (!i2) continue; else {
         i8 = i3;
         i9 = i3;
         i5 = i3 + 4 | 0;
         i3 = i19;
        }
        while (1) {
         if ((HEAP32[i9 >> 2] | 0) > (HEAP32[i2 >> 2] | 0)) {
          HEAP32[i3 >> 2] = i2;
          i2 = i2 + 4 | 0;
          HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
          HEAP32[i2 >> 2] = i9;
          i2 = HEAP32[i19 >> 2] | 0;
          i3 = i2;
          i7 = i19;
         } else {
          i3 = i8;
          i7 = i5;
         }
         i5 = i2 + 4 | 0;
         i6 = HEAP32[i5 >> 2] | 0;
         if (!i6) continue L198; else {
          i8 = i3;
          i9 = i2;
          i2 = i6;
          i3 = i7;
         }
        }
       } while (0);
       i2 = HEAP32[i19 + 4 >> 2] | 0;
       if (i2) do {
        i5 = i2;
        i2 = HEAP32[i2 + 4 >> 2] | 0;
        L241 : do if (!(HEAP32[i5 + 16 >> 2] | 0)) {
         i3 = i19 + 4 | 0;
         while (1) {
          i6 = HEAP32[i3 >> 2] | 0;
          if (!i6) break L241;
          if ((i6 | 0) == (i5 | 0)) break; else i3 = i6 + 4 | 0;
         }
         HEAP32[i3 >> 2] = HEAP32[i6 + 4 >> 2];
        } while (0);
       } while ((i2 | 0) != 0);
       i2 = HEAP32[i19 >> 2] | 0;
       if (i2) do {
        i5 = i2;
        i2 = HEAP32[i2 + 4 >> 2] | 0;
        L251 : do if (!(HEAP32[i5 + 16 >> 2] | 0)) {
         i3 = i19;
         while (1) {
          i6 = HEAP32[i3 >> 2] | 0;
          if (!i6) break L251;
          if ((i6 | 0) == (i5 | 0)) break; else i3 = i6 + 4 | 0;
         }
         HEAP32[i3 >> 2] = HEAP32[i6 + 4 >> 2];
        } while (0);
       } while ((i2 | 0) != 0);
       i2 = HEAP32[i18 + 48 >> 2] | 0;
       if ((i2 | 0) <= 0) break L145;
       i3 = HEAP32[i19 + 8 >> 2] | 0;
      }
     } while (0);
     if (i1 << 16 >> 16 <= (HEAP16[i19 + 12 >> 1] | 0)) do {
      FUNCTION_TABLE_vi[HEAP32[i18 + 176 >> 2] & 127](i18);
      i1 = i1 + 1 << 16 >> 16;
     } while (i1 << 16 >> 16 <= (HEAP16[i19 + 12 >> 1] | 0));
    }
    i1 = (HEAP32[i18 + 1024 >> 2] | 0) + -1 | 0;
   } else i15 = 86;
  }
  if ((i15 | 0) == 86) if ((HEAP32[i18 + 44 >> 2] | 0) == 98) i15 = 87; else {
   i1 = 1;
   i15 = 181;
   break;
  }
  if ((i15 | 0) == 87) {
   HEAP32[i18 + 44 >> 2] = 0;
   i1 = HEAP32[i18 + 1024 >> 2] | 0;
   i2 = HEAP16[i18 + 960 + (i1 << 2) + 2 >> 1] | 0;
   i3 = HEAP16[i18 + 960 + (i1 << 2) >> 1] | 0;
   if ((i1 | 0) > 6 ? 1 : (((i2 << 16 >> 16) + i3 | 0) / 2 | 0 | 0) < (i3 | 0)) {
    i15 = 88;
    break;
   }
   HEAP16[i18 + 960 + (i1 + 1 << 2) >> 1] = ((i2 << 16 >> 16) + i3 | 0) / 2 | 0;
   HEAP16[i18 + 960 + ((HEAP32[i18 + 1024 >> 2] | 0) + 1 << 2) + 2 >> 1] = i2;
   HEAP16[i18 + 960 + (HEAP32[i18 + 1024 >> 2] << 2) + 2 >> 1] = (((i2 << 16 >> 16) + i3 | 0) / 2 | 0) + 65535;
   i1 = (HEAP32[i18 + 1024 >> 2] | 0) + 1 | 0;
  }
  HEAP32[i18 + 1024 >> 2] = i1;
  if ((i1 | 0) <= -1) {
   i1 = 0;
   i15 = 181;
   break;
  }
 }
 if ((i15 | 0) == 31) {
  HEAP32[i18 + 44 >> 2] = 20;
  i18 = 1;
  STACKTOP = i19;
  return i18 | 0;
 } else if ((i15 | 0) == 42) {
  HEAP32[i18 + 44 >> 2] = 99;
  i18 = 1;
  STACKTOP = i19;
  return i18 | 0;
 } else if ((i15 | 0) == 88) {
  HEAP32[i18 + 1024 >> 2] = 0;
  HEAP32[i18 + 44 >> 2] = 20;
  i18 = 20;
  STACKTOP = i19;
  return i18 | 0;
 } else if ((i15 | 0) == 101) {
  HEAP32[i18 + 44 >> 2] = 20;
  i18 = 20;
  STACKTOP = i19;
  return i18 | 0;
 } else if ((i15 | 0) == 181) {
  STACKTOP = i19;
  return i1 | 0;
 }
 return 0;
}

function ___floatscan(i20, i2, i19) {
 i20 = i20 | 0;
 i2 = i2 | 0;
 i19 = i19 | 0;
 var d1 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, d10 = 0.0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, d27 = 0.0;
 i26 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 switch (i2 | 0) {
 case 0:
  {
   i25 = 24;
   i23 = -149;
   i22 = 4;
   break;
  }
 case 1:
  {
   i25 = 53;
   i23 = -1074;
   i22 = 4;
   break;
  }
 case 2:
  {
   i25 = 53;
   i23 = -1074;
   i22 = 4;
   break;
  }
 default:
  d1 = 0.0;
 }
 L4 : do if ((i22 | 0) == 4) {
  do {
   i2 = HEAP32[i20 + 4 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
    HEAP32[i20 + 4 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i20) | 0;
  } while ((_isspace(i2) | 0) != 0);
  L13 : do switch (i2 | 0) {
  case 43:
  case 45:
   {
    i3 = HEAP32[i20 + 4 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
     HEAP32[i20 + 4 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     i24 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
     break L13;
    } else {
     i3 = ___shgetc(i20) | 0;
     i24 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
     break L13;
    }
   }
  default:
   {
    i3 = i2;
    i24 = 1;
   }
  } while (0);
  i2 = 0;
  do {
   if ((i3 | 32 | 0) != (HEAP8[389841 + i2 >> 0] | 0)) break;
   do if (i2 >>> 0 < 7) {
    i3 = HEAP32[i20 + 4 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
     HEAP32[i20 + 4 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     break;
    } else {
     i3 = ___shgetc(i20) | 0;
     break;
    }
   } while (0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < 8);
  L29 : do switch (i2 | 0) {
  case 8:
   break;
  case 3:
   {
    i22 = 23;
    break;
   }
  default:
   {
    if ((i19 | 0) != 0 & i2 >>> 0 > 3) if ((i2 | 0) == 8) break L29; else {
     i22 = 23;
     break L29;
    }
    L34 : do if (!i2) {
     i2 = 0;
     do {
      if ((i3 | 32 | 0) != (HEAP8[391684 + i2 >> 0] | 0)) break L34;
      do if (i2 >>> 0 < 2) {
       i3 = HEAP32[i20 + 4 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
        HEAP32[i20 + 4 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
        break;
       } else {
        i3 = ___shgetc(i20) | 0;
        break;
       }
      } while (0);
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < 3);
    } while (0);
    switch (i2 | 0) {
    case 3:
     {
      i2 = HEAP32[i20 + 4 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
       HEAP32[i20 + 4 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] | 0;
      } else i2 = ___shgetc(i20) | 0;
      if ((i2 | 0) == 40) i2 = 1; else {
       if (!(HEAP32[i20 + 100 >> 2] | 0)) {
        d1 = nan;
        break L4;
       }
       HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
       d1 = nan;
       break L4;
      }
      while (1) {
       i3 = HEAP32[i20 + 4 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
        HEAP32[i20 + 4 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
       } else i3 = ___shgetc(i20) | 0;
       if (!((i3 + -48 | 0) >>> 0 < 10 | (i3 + -65 | 0) >>> 0 < 26) ? !((i3 | 0) == 95 | (i3 + -97 | 0) >>> 0 < 26) : 0) break;
       i2 = i2 + 1 | 0;
      }
      if ((i3 | 0) == 41) {
       d1 = nan;
       break L4;
      }
      i3 = (HEAP32[i20 + 100 >> 2] | 0) == 0;
      if (!i3) HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
      if (!i19) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i20, 0);
       d1 = 0.0;
       break L4;
      }
      if (!i2) {
       d1 = nan;
       break L4;
      }
      while (1) {
       i2 = i2 + -1 | 0;
       if (!i3) HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
       if (!i2) {
        d1 = nan;
        break L4;
       }
      }
     }
    case 0:
     {
      do if ((i3 | 0) == 48) {
       i2 = HEAP32[i20 + 4 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
        HEAP32[i20 + 4 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i20) | 0;
       if ((i2 | 32 | 0) != 120) {
        if (!(HEAP32[i20 + 100 >> 2] | 0)) {
         i2 = 48;
         break;
        }
        HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
        i2 = 48;
        break;
       }
       i2 = HEAP32[i20 + 4 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
        HEAP32[i20 + 4 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
        i5 = 0;
       } else {
        i2 = ___shgetc(i20) | 0;
        i5 = 0;
       }
       L94 : while (1) {
        switch (i2 | 0) {
        case 46:
         {
          i22 = 74;
          break L94;
         }
        case 48:
         break;
        default:
         {
          i17 = 0;
          i6 = 0;
          i16 = 0;
          i3 = 0;
          i11 = i5;
          i7 = 0;
          i15 = 0;
          d4 = 1.0;
          i5 = 0;
          d1 = 0.0;
          break L94;
         }
        }
        i2 = HEAP32[i20 + 4 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
         HEAP32[i20 + 4 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
         i5 = 1;
         continue;
        } else {
         i2 = ___shgetc(i20) | 0;
         i5 = 1;
         continue;
        }
       }
       if ((i22 | 0) == 74) {
        i2 = HEAP32[i20 + 4 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
         HEAP32[i20 + 4 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
        } else i2 = ___shgetc(i20) | 0;
        if ((i2 | 0) == 48) {
         i5 = 0;
         i3 = 0;
         do {
          i2 = HEAP32[i20 + 4 >> 2] | 0;
          if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
           HEAP32[i20 + 4 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i20) | 0;
          i5 = _i64Add(i5 | 0, i3 | 0, -1, -1) | 0;
          i3 = tempRet0;
         } while ((i2 | 0) == 48);
         i17 = 0;
         i6 = 0;
         i16 = i5;
         i11 = 1;
         i7 = 1;
         i15 = 0;
         d4 = 1.0;
         i5 = 0;
         d1 = 0.0;
        } else {
         i17 = 0;
         i6 = 0;
         i16 = 0;
         i3 = 0;
         i11 = i5;
         i7 = 1;
         i15 = 0;
         d4 = 1.0;
         i5 = 0;
         d1 = 0.0;
        }
       }
       while (1) {
        i9 = i2 + -48 | 0;
        i13 = i2 | 32;
        if (i9 >>> 0 >= 10) {
         i14 = (i2 | 0) == 46;
         if (!(i14 | (i13 + -97 | 0) >>> 0 < 6)) {
          i13 = i16;
          i14 = i17;
          break;
         }
         if (i14) if (!i7) {
          i9 = i6;
          i3 = i17;
          i14 = i17;
          i7 = 1;
          i13 = i15;
          d12 = d4;
         } else {
          i13 = i16;
          i14 = i17;
          i2 = 46;
          break;
         } else i22 = 86;
        } else i22 = 86;
        if ((i22 | 0) == 86) {
         i22 = 0;
         i2 = (i2 | 0) > 57 ? i13 + -87 | 0 : i9;
         do if (!((i17 | 0) < 0 | (i17 | 0) == 0 & i6 >>> 0 < 8)) {
          if ((i17 | 0) < 0 | (i17 | 0) == 0 & i6 >>> 0 < 14) {
           d10 = d4 * .0625;
           i13 = i15;
           d12 = d10;
           d1 = d1 + d10 * +(i2 | 0);
           break;
          }
          if ((i15 | 0) != 0 | (i2 | 0) == 0) {
           i13 = i15;
           d12 = d4;
          } else {
           i13 = 1;
           d12 = d4;
           d1 = d1 + d4 * .5;
          }
         } else {
          i13 = i15;
          d12 = d4;
          i5 = i2 + (i5 << 4) | 0;
         } while (0);
         i6 = _i64Add(i6 | 0, i17 | 0, 1, 0) | 0;
         i9 = i16;
         i14 = tempRet0;
         i11 = 1;
        }
        i2 = HEAP32[i20 + 4 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
         HEAP32[i20 + 4 >> 2] = i2 + 1;
         i17 = i14;
         i16 = i9;
         i2 = HEAPU8[i2 >> 0] | 0;
         i15 = i13;
         d4 = d12;
         continue;
        } else {
         i17 = i14;
         i16 = i9;
         i2 = ___shgetc(i20) | 0;
         i15 = i13;
         d4 = d12;
         continue;
        }
       }
       if (!i11) {
        i2 = (HEAP32[i20 + 100 >> 2] | 0) == 0;
        if (!i2) HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
        if (i19) {
         if (!i2 ? (i18 = HEAP32[i20 + 4 >> 2] | 0, HEAP32[i20 + 4 >> 2] = i18 + -1, (i7 | 0) != 0) : 0) HEAP32[i20 + 4 >> 2] = i18 + -2;
        } else ___shlim(i20, 0);
        d1 = +(i24 | 0) * 0.0;
        break L4;
       }
       i11 = (i7 | 0) == 0;
       i13 = i11 ? i6 : i13;
       i11 = i11 ? i14 : i3;
       if ((i14 | 0) < 0 | (i14 | 0) == 0 & i6 >>> 0 < 8) {
        i3 = i14;
        do {
         i5 = i5 << 4;
         i6 = _i64Add(i6 | 0, i3 | 0, 1, 0) | 0;
         i3 = tempRet0;
        } while ((i3 | 0) < 0 | (i3 | 0) == 0 & i6 >>> 0 < 8);
       }
       if ((i2 | 32 | 0) == 112) {
        i3 = _scanexp(i20, i19) | 0;
        i2 = tempRet0;
        if ((i3 | 0) == 0 & (i2 | 0) == -2147483648) {
         if (!i19) {
          ___shlim(i20, 0);
          d1 = 0.0;
          break L4;
         }
         if (!(HEAP32[i20 + 100 >> 2] | 0)) {
          i3 = 0;
          i2 = 0;
         } else {
          HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
          i3 = 0;
          i2 = 0;
         }
        }
       } else if (!(HEAP32[i20 + 100 >> 2] | 0)) {
        i3 = 0;
        i2 = 0;
       } else {
        HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
        i3 = 0;
        i2 = 0;
       }
       i22 = _bitshift64Shl(i13 | 0, i11 | 0, 2) | 0;
       i22 = _i64Add(i22 | 0, tempRet0 | 0, -32, -1) | 0;
       i2 = _i64Add(i22 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
       i3 = tempRet0;
       if (!i5) {
        d1 = +(i24 | 0) * 0.0;
        break L4;
       }
       if ((i3 | 0) > 0 | (i3 | 0) == 0 & i2 >>> 0 > (0 - i23 | 0) >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i24 | 0) * 17976931348623157.0e292 * 17976931348623157.0e292;
        break L4;
       }
       i22 = i23 + -106 | 0;
       if ((i3 | 0) < (((i22 | 0) < 0) << 31 >> 31 | 0) | (i3 | 0) == (((i22 | 0) < 0) << 31 >> 31 | 0) & i2 >>> 0 < i22 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i24 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break L4;
       }
       if ((i5 | 0) > -1) while (1) {
        i22 = !(d1 >= .5);
        i5 = i22 & 1 | i5 << 1;
        d1 = d1 + (i22 ? d1 : d1 + -1.0);
        i2 = _i64Add(i2 | 0, i3 | 0, -1, -1) | 0;
        i3 = tempRet0;
        if ((i5 | 0) > -1) i5 = i5 ^ 1; else {
         i11 = i2;
         i5 = i5 ^ 1;
         d8 = d1;
         break;
        }
       } else {
        i11 = i2;
        d8 = d1;
       }
       i2 = _i64Subtract(32, 0, i23 | 0, ((i23 | 0) < 0) << 31 >> 31 | 0) | 0;
       i2 = _i64Add(i11 | 0, i3 | 0, i2 | 0, tempRet0 | 0) | 0;
       i23 = tempRet0;
       if (0 > (i23 | 0) | 0 == (i23 | 0) & i25 >>> 0 > i2 >>> 0) if ((i2 | 0) < 0) {
        i2 = 0;
        i22 = 127;
       } else i22 = 125; else {
        i2 = i25;
        i22 = 125;
       }
       if ((i22 | 0) == 125) if ((i2 | 0) < 53) i22 = 127; else {
        i3 = i2;
        d4 = +(i24 | 0);
        d1 = 0.0;
       }
       if ((i22 | 0) == 127) {
        d1 = +(i24 | 0);
        i3 = i2;
        d4 = d1;
        d1 = +_copysignl(+_scalbn(1.0, 84 - i2 | 0), d1);
       }
       i25 = (i5 & 1 | 0) == 0 & (d8 != 0.0 & (i3 | 0) < 32);
       d1 = d4 * (i25 ? 0.0 : d8) + (d1 + d4 * +(((i25 & 1) + i5 | 0) >>> 0)) - d1;
       if (!(d1 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
       d1 = +_scalbnl(d1, i11);
       break L4;
      } else i2 = i3; while (0);
      i21 = i23 + i25 | 0;
      i5 = 0;
      L184 : while (1) {
       switch (i2 | 0) {
       case 46:
        {
         i22 = 138;
         break L184;
        }
       case 48:
        break;
       default:
        {
         i3 = 0;
         i14 = 0;
         i13 = 0;
         break L184;
        }
       }
       i2 = HEAP32[i20 + 4 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
        HEAP32[i20 + 4 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
        i5 = 1;
        continue;
       } else {
        i2 = ___shgetc(i20) | 0;
        i5 = 1;
        continue;
       }
      }
      if ((i22 | 0) == 138) {
       i2 = HEAP32[i20 + 4 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
        HEAP32[i20 + 4 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i20) | 0;
       if ((i2 | 0) == 48) {
        i3 = 0;
        i2 = 0;
        while (1) {
         i3 = _i64Add(i3 | 0, i2 | 0, -1, -1) | 0;
         i5 = tempRet0;
         i2 = HEAP32[i20 + 4 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
          HEAP32[i20 + 4 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i20) | 0;
         if ((i2 | 0) == 48) i2 = i5; else {
          i14 = i5;
          i5 = 1;
          i13 = 1;
          break;
         }
        }
       } else {
        i3 = 0;
        i14 = 0;
        i13 = 1;
       }
      }
      HEAP32[i26 >> 2] = 0;
      i7 = i2 + -48 | 0;
      i6 = (i2 | 0) == 46;
      L203 : do if (i6 | i7 >>> 0 < 10) {
       i17 = 0;
       i11 = 0;
       i15 = i6;
       i18 = 0;
       i6 = 0;
       i9 = 0;
       L205 : while (1) {
        do if (i15) if (!i13) {
         i3 = i17;
         i14 = i11;
         i13 = 1;
        } else {
         i2 = i17;
         i13 = i18;
         break L205;
        } else {
         i15 = _i64Add(i17 | 0, i11 | 0, 1, 0) | 0;
         i11 = tempRet0;
         i16 = (i2 | 0) != 48;
         if ((i6 | 0) >= 125) {
          if (!i16) {
           i17 = i15;
           break;
          }
          HEAP32[i26 + 496 >> 2] = HEAP32[i26 + 496 >> 2] | 1;
          i17 = i15;
          break;
         }
         i5 = i26 + (i6 << 2) | 0;
         if (i18) i7 = i2 + -48 + ((HEAP32[i5 >> 2] | 0) * 10 | 0) | 0;
         HEAP32[i5 >> 2] = i7;
         i22 = i18 + 1 | 0;
         i17 = i15;
         i5 = 1;
         i18 = (i22 | 0) == 9 ? 0 : i22;
         i6 = ((i22 | 0) == 9 & 1) + i6 | 0;
         i9 = i16 ? i15 : i9;
        } while (0);
        i2 = HEAP32[i20 + 4 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
         HEAP32[i20 + 4 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
        } else i2 = ___shgetc(i20) | 0;
        i7 = i2 + -48 | 0;
        i15 = (i2 | 0) == 46;
        if (!(i15 | i7 >>> 0 < 10)) {
         i22 = 161;
         break L203;
        }
       }
       i7 = (i5 | 0) != 0;
       i5 = i13;
       i22 = 169;
      } else {
       i17 = 0;
       i11 = 0;
       i18 = 0;
       i6 = 0;
       i9 = 0;
       i22 = 161;
      } while (0);
      do if ((i22 | 0) == 161) {
       i13 = (i13 | 0) == 0;
       i3 = i13 ? i17 : i3;
       i14 = i13 ? i11 : i14;
       i13 = (i5 | 0) != 0;
       if (!((i2 | 32 | 0) == 101 & i13)) if ((i2 | 0) > -1) {
        i2 = i17;
        i7 = i13;
        i5 = i18;
        i22 = 169;
        break;
       } else {
        i2 = i17;
        i5 = i18;
        i22 = 171;
        break;
       }
       i5 = _scanexp(i20, i19) | 0;
       i2 = tempRet0;
       if ((i5 | 0) == 0 & (i2 | 0) == -2147483648) {
        if (!i19) {
         ___shlim(i20, 0);
         d1 = 0.0;
         break;
        }
        if (!(HEAP32[i20 + 100 >> 2] | 0)) {
         i5 = 0;
         i2 = 0;
        } else {
         HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
         i5 = 0;
         i2 = 0;
        }
       }
       i3 = _i64Add(i5 | 0, i2 | 0, i3 | 0, i14 | 0) | 0;
       i13 = i17;
       i14 = tempRet0;
       i5 = i18;
       i22 = 173;
      } while (0);
      if ((i22 | 0) == 169) if (HEAP32[i20 + 100 >> 2] | 0) {
       HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
       if (i7) {
        i13 = i2;
        i22 = 173;
       } else i22 = 172;
      } else {
       i13 = i7;
       i22 = 171;
      }
      if ((i22 | 0) == 171) if (i13) {
       i13 = i2;
       i22 = 173;
      } else i22 = 172;
      do if ((i22 | 0) == 172) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i20, 0);
       d1 = 0.0;
      } else if ((i22 | 0) == 173) {
       i2 = HEAP32[i26 >> 2] | 0;
       if (!i2) {
        d1 = +(i24 | 0) * 0.0;
        break;
       }
       if (((i11 | 0) < 0 | (i11 | 0) == 0 & i13 >>> 0 < 10) & ((i3 | 0) == (i13 | 0) & (i14 | 0) == (i11 | 0)) ? i25 >>> 0 > 30 | (i2 >>> i25 | 0) == 0 : 0) {
        d1 = +(i24 | 0) * +(i2 >>> 0);
        break;
       }
       i20 = (i23 | 0) / -2 | 0;
       if ((i14 | 0) > (((i20 | 0) < 0) << 31 >> 31 | 0) | (i14 | 0) == (((i20 | 0) < 0) << 31 >> 31 | 0) & i3 >>> 0 > i20 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i24 | 0) * 17976931348623157.0e292 * 17976931348623157.0e292;
        break;
       }
       i20 = i23 + -106 | 0;
       if ((i14 | 0) < (((i20 | 0) < 0) << 31 >> 31 | 0) | (i14 | 0) == (((i20 | 0) < 0) << 31 >> 31 | 0) & i3 >>> 0 < i20 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i24 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
       }
       if (i5) {
        if ((i5 | 0) < 9) {
         i7 = i26 + (i6 << 2) | 0;
         i2 = HEAP32[i7 >> 2] | 0;
         do {
          i2 = i2 * 10 | 0;
          i5 = i5 + 1 | 0;
         } while ((i5 | 0) != 9);
         HEAP32[i7 >> 2] = i2;
        }
        i6 = i6 + 1 | 0;
       }
       if ((i9 | 0) < 9 ? (i9 | 0) <= (i3 | 0) & (i3 | 0) < 18 : 0) {
        if ((i3 | 0) == 9) {
         d1 = +(i24 | 0) * +((HEAP32[i26 >> 2] | 0) >>> 0);
         break;
        }
        if ((i3 | 0) < 9) {
         d1 = +(i24 | 0) * +((HEAP32[i26 >> 2] | 0) >>> 0) / +(HEAP32[282148 + (8 - i3 << 2) >> 2] | 0);
         break;
        }
        i20 = i25 + 27 + (Math_imul(i3, -3) | 0) | 0;
        i2 = HEAP32[i26 >> 2] | 0;
        if ((i20 | 0) > 30 | (i2 >>> i20 | 0) == 0) {
         d1 = +(i24 | 0) * +(i2 >>> 0) * +(HEAP32[282148 + (i3 + -10 << 2) >> 2] | 0);
         break;
        }
       }
       i2 = (i3 | 0) % 9 | 0;
       if (!i2) {
        i5 = 0;
        i2 = 0;
       } else {
        i11 = (i3 | 0) > -1 ? i2 : i2 + 9 | 0;
        i7 = HEAP32[282148 + (8 - i11 << 2) >> 2] | 0;
        if (i6) {
         i5 = 0;
         i2 = 0;
         i9 = 0;
         do {
          i18 = i26 + (i9 << 2) | 0;
          i19 = HEAP32[i18 >> 2] | 0;
          i20 = ((i19 >>> 0) / (i7 >>> 0) | 0) + i2 | 0;
          HEAP32[i18 >> 2] = i20;
          i2 = Math_imul((i19 >>> 0) % (i7 >>> 0) | 0, 1e9 / (i7 | 0) | 0) | 0;
          i20 = (i9 | 0) == (i5 | 0) & (i20 | 0) == 0;
          i9 = i9 + 1 | 0;
          i3 = i20 ? i3 + -9 | 0 : i3;
          i5 = i20 ? i9 & 127 : i5;
         } while ((i9 | 0) != (i6 | 0));
         if (i2) {
          HEAP32[i26 + (i6 << 2) >> 2] = i2;
          i6 = i6 + 1 | 0;
         }
        } else {
         i5 = 0;
         i6 = 0;
        }
        i2 = 0;
        i3 = 9 - i11 + i3 | 0;
       }
       L284 : while (1) {
        i13 = (i3 | 0) < 18;
        i14 = (i3 | 0) == 18;
        i15 = i26 + (i5 << 2) | 0;
        do {
         if (!i13) {
          if (!i14) break L284;
          if ((HEAP32[i15 >> 2] | 0) >>> 0 >= 9007199) {
           i3 = 18;
           break L284;
          }
         }
         i9 = 0;
         i7 = i6 + 127 | 0;
         while (1) {
          i11 = i7 & 127;
          i7 = _bitshift64Shl(HEAP32[i26 + (i11 << 2) >> 2] | 0, 0, 29) | 0;
          i7 = _i64Add(i7 | 0, tempRet0 | 0, i9 | 0, 0) | 0;
          i9 = tempRet0;
          if (i9 >>> 0 > 0 | (i9 | 0) == 0 & i7 >>> 0 > 1e9) {
           i20 = ___udivdi3(i7 | 0, i9 | 0, 1e9, 0) | 0;
           i7 = ___uremdi3(i7 | 0, i9 | 0, 1e9, 0) | 0;
           i9 = i20;
          } else i9 = 0;
          HEAP32[i26 + (i11 << 2) >> 2] = i7;
          i20 = (i11 | 0) == (i5 | 0);
          i6 = (i11 | 0) != (i6 + 127 & 127 | 0) | i20 ? i6 : (i7 | 0) == 0 ? i11 : i6;
          if (i20) break; else i7 = i11 + -1 | 0;
         }
         i2 = i2 + -29 | 0;
        } while ((i9 | 0) == 0);
        i5 = i5 + 127 & 127;
        if ((i5 | 0) == (i6 | 0)) {
         HEAP32[i26 + ((i6 + 126 & 127) << 2) >> 2] = HEAP32[i26 + ((i6 + 126 & 127) << 2) >> 2] | HEAP32[i26 + ((i6 + 127 & 127) << 2) >> 2];
         i6 = i6 + 127 & 127;
        }
        HEAP32[i26 + (i5 << 2) >> 2] = i9;
        i3 = i3 + 9 | 0;
       }
       L302 : while (1) {
        i16 = i6 + 1 & 127;
        i15 = i26 + ((i6 + 127 & 127) << 2) | 0;
        while (1) {
         i13 = (i3 | 0) == 18;
         i14 = (i3 | 0) > 27 ? 9 : 1;
         while (1) {
          i9 = i5 & 127;
          i11 = (i9 | 0) == (i6 | 0);
          do if (!i11) {
           i7 = HEAP32[i26 + (i9 << 2) >> 2] | 0;
           if (i7 >>> 0 < 9007199) {
            i22 = 219;
            break;
           }
           if (i7 >>> 0 > 9007199) break;
           i7 = i5 + 1 & 127;
           if ((i7 | 0) == (i6 | 0)) {
            i22 = 219;
            break;
           }
           i7 = HEAP32[i26 + (i7 << 2) >> 2] | 0;
           if (i7 >>> 0 < 254740991) {
            i22 = 219;
            break;
           }
           if (!(i7 >>> 0 > 254740991 | i13 ^ 1)) {
            i3 = i9;
            break L302;
           }
          } else i22 = 219; while (0);
          if ((i22 | 0) == 219 ? (i22 = 0, i13) : 0) {
           i22 = 220;
           break L302;
          }
          i2 = i2 + i14 | 0;
          if ((i5 | 0) == (i6 | 0)) i5 = i6; else break;
         }
         i11 = i5;
         i7 = 0;
         i9 = i5;
         while (1) {
          i19 = i26 + (i9 << 2) | 0;
          i20 = HEAP32[i19 >> 2] | 0;
          i5 = (i20 >>> i14) + i7 | 0;
          HEAP32[i19 >> 2] = i5;
          i7 = Math_imul(i20 & (1 << i14) + -1, 1e9 >>> i14) | 0;
          i5 = (i9 | 0) == (i11 | 0) & (i5 | 0) == 0;
          i9 = i9 + 1 & 127;
          i3 = i5 ? i3 + -9 | 0 : i3;
          i5 = i5 ? i9 : i11;
          if ((i9 | 0) == (i6 | 0)) break; else i11 = i5;
         }
         if (!i7) continue;
         if ((i16 | 0) != (i5 | 0)) break;
         HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 1;
        }
        HEAP32[i26 + (i6 << 2) >> 2] = i7;
        i6 = i16;
       }
       if ((i22 | 0) == 220) if (i11) {
        HEAP32[i26 + (i16 + -1 << 2) >> 2] = 0;
        i3 = i6;
        i6 = i16;
       } else i3 = i9;
       d1 = +((HEAP32[i26 + (i3 << 2) >> 2] | 0) >>> 0);
       i3 = i5 + 1 & 127;
       if ((i3 | 0) == (i6 | 0)) {
        i6 = i5 + 2 & 127;
        HEAP32[i26 + (i6 + -1 << 2) >> 2] = 0;
       }
       d12 = +(i24 | 0);
       d4 = d12 * (d1 * 1.0e9 + +((HEAP32[i26 + (i3 << 2) >> 2] | 0) >>> 0));
       i13 = i2 + 53 | 0;
       i11 = i13 - i23 | 0;
       i9 = (i11 | 0) < (i25 | 0);
       i7 = i9 ? ((i11 | 0) < 0 ? 0 : i11) : i25;
       if ((i7 | 0) < 53) {
        d27 = +_copysignl(+_scalbn(1.0, 105 - i7 | 0), d4);
        d8 = +_fmodl(d4, +_scalbn(1.0, 53 - i7 | 0));
        d10 = d27;
        d1 = d8;
        d8 = d27 + (d4 - d8);
       } else {
        d10 = 0.0;
        d1 = 0.0;
        d8 = d4;
       }
       i3 = i5 + 2 & 127;
       do if ((i3 | 0) == (i6 | 0)) d4 = d1; else {
        i3 = HEAP32[i26 + (i3 << 2) >> 2] | 0;
        do if (i3 >>> 0 >= 5e8) {
         if (i3 >>> 0 > 5e8) {
          d1 = d12 * .75 + d1;
          break;
         }
         if ((i5 + 3 & 127 | 0) == (i6 | 0)) {
          d1 = d12 * .5 + d1;
          break;
         } else {
          d1 = d12 * .75 + d1;
          break;
         }
        } else {
         if ((i3 | 0) == 0 ? (i5 + 3 & 127 | 0) == (i6 | 0) : 0) break;
         d1 = d12 * .25 + d1;
        } while (0);
        if ((53 - i7 | 0) <= 1) {
         d4 = d1;
         break;
        }
        if (+_fmodl(d1, 1.0) != 0.0) {
         d4 = d1;
         break;
        }
        d4 = d1 + 1.0;
       } while (0);
       d1 = d8 + d4 - d10;
       do if ((i13 & 2147483647 | 0) > (-2 - i21 | 0)) {
        if (!(+Math_abs(+d1) >= 9007199254740992.0)) i3 = i9 & 1; else {
         i3 = i9 & (i7 | 0) == (i11 | 0) ? 0 : i9 & 1;
         i2 = i2 + 1 | 0;
         d1 = d1 * .5;
        }
        if ((i2 + 50 | 0) <= (0 - i21 | 0) ? !(d4 != 0.0 & (i3 | 0) != 0) : 0) break;
        HEAP32[(___errno_location() | 0) >> 2] = 34;
       } while (0);
       d1 = +_scalbnl(d1, i2);
      } while (0);
      break L4;
     }
    default:
     {
      if (HEAP32[i20 + 100 >> 2] | 0) HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim(i20, 0);
      d1 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i22 | 0) == 23) {
   i3 = (HEAP32[i20 + 100 >> 2] | 0) == 0;
   if (!i3) HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
   if ((i19 | 0) != 0 & i2 >>> 0 > 3) do {
    if (!i3) HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > 3);
  }
  d1 = +Math_fround(Math_fround(i24 | 0) * Math_fround(inf));
 } while (0);
 STACKTOP = i26;
 return +d1;
}

function _printf_core(i26, i2, i27, i28, i29) {
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i28 = i28 | 0;
 i29 = i29 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 i23 = i30 + 536 + 40 | 0;
 i25 = i30 + 576 + 12 | 0;
 i24 = i30 + 588 + 9 | 0;
 i1 = 0;
 i14 = i2;
 i3 = 0;
 i2 = 0;
 L1 : while (1) {
  do if ((i1 | 0) > -1) if ((i3 | 0) > (2147483647 - i1 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   i1 = -1;
   break;
  } else {
   i1 = i3 + i1 | 0;
   break;
  } while (0);
  i3 = HEAP8[i14 >> 0] | 0;
  if (!(i3 << 24 >> 24)) {
   i22 = 245;
   break;
  } else i4 = i14;
  L9 : while (1) {
   switch (i3 << 24 >> 24) {
   case 37:
    {
     i3 = i4;
     i22 = 9;
     break L9;
    }
   case 0:
    {
     i3 = i4;
     break L9;
    }
   default:
    {}
   }
   i21 = i4 + 1 | 0;
   i3 = HEAP8[i21 >> 0] | 0;
   i4 = i21;
  }
  L12 : do if ((i22 | 0) == 9) while (1) {
   i22 = 0;
   if ((HEAP8[i3 + 1 >> 0] | 0) != 37) break L12;
   i4 = i4 + 1 | 0;
   i3 = i3 + 2 | 0;
   if ((HEAP8[i3 >> 0] | 0) == 37) i22 = 9; else break;
  } while (0);
  i13 = i4 - i14 | 0;
  if ((i26 | 0) != 0 ? (HEAP32[i26 >> 2] & 32 | 0) == 0 : 0) ___fwritex(i14, i13, i26) | 0;
  if ((i4 | 0) != (i14 | 0)) {
   i14 = i3;
   i3 = i13;
   continue;
  }
  i5 = i3 + 1 | 0;
  i4 = HEAP8[i5 >> 0] | 0;
  if (((i4 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
   i21 = (HEAP8[i3 + 2 >> 0] | 0) == 36;
   i5 = i21 ? i3 + 3 | 0 : i5;
   i7 = HEAP8[i5 >> 0] | 0;
   i12 = i21 ? (i4 << 24 >> 24) + -48 | 0 : -1;
   i2 = i21 ? 1 : i2;
  } else {
   i7 = i4;
   i12 = -1;
  }
  i3 = i7 << 24 >> 24;
  L25 : do if ((i3 & -32 | 0) == 32) {
   i4 = i7;
   i7 = 0;
   do {
    if (!(1 << i3 + -32 & 75913)) break L25;
    i7 = 1 << (i4 << 24 >> 24) + -32 | i7;
    i5 = i5 + 1 | 0;
    i4 = HEAP8[i5 >> 0] | 0;
    i3 = i4 << 24 >> 24;
   } while ((i3 & -32 | 0) == 32);
  } else {
   i4 = i7;
   i7 = 0;
  } while (0);
  do if (i4 << 24 >> 24 == 42) {
   i4 = i5 + 1 | 0;
   i3 = (HEAP8[i4 >> 0] | 0) + -48 | 0;
   if (i3 >>> 0 < 10 ? (HEAP8[i5 + 2 >> 0] | 0) == 36 : 0) {
    HEAP32[i29 + (i3 << 2) >> 2] = 10;
    i2 = 1;
    i5 = i5 + 3 | 0;
    i3 = HEAP32[i28 + ((HEAP8[i4 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else {
    if (i2) {
     i1 = -1;
     break L1;
    }
    if (!i26) {
     i11 = i7;
     i5 = i4;
     i2 = 0;
     i21 = 0;
     break;
    }
    i2 = (HEAP32[i27 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i3 = HEAP32[i2 >> 2] | 0;
    HEAP32[i27 >> 2] = i2 + 4;
    i2 = 0;
    i5 = i4;
   }
   if ((i3 | 0) < 0) {
    i11 = i7 | 8192;
    i21 = 0 - i3 | 0;
   } else {
    i11 = i7;
    i21 = i3;
   }
  } else {
   i4 = (i4 << 24 >> 24) + -48 | 0;
   if (i4 >>> 0 < 10) {
    i3 = 0;
    do {
     i3 = (i3 * 10 | 0) + i4 | 0;
     i5 = i5 + 1 | 0;
     i4 = (HEAP8[i5 >> 0] | 0) + -48 | 0;
    } while (i4 >>> 0 < 10);
    if ((i3 | 0) < 0) {
     i1 = -1;
     break L1;
    } else {
     i11 = i7;
     i21 = i3;
    }
   } else {
    i11 = i7;
    i21 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[i5 >> 0] | 0) == 46) {
   i3 = i5 + 1 | 0;
   i7 = HEAP8[i3 >> 0] | 0;
   if (i7 << 24 >> 24 != 42) {
    if (((i7 << 24 >> 24) + -48 | 0) >>> 0 < 10) {
     i4 = 0;
     i5 = (i7 << 24 >> 24) + -48 | 0;
    } else {
     i7 = 0;
     break;
    }
    while (1) {
     i4 = (i4 * 10 | 0) + i5 | 0;
     i3 = i3 + 1 | 0;
     i5 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
     if (i5 >>> 0 >= 10) {
      i7 = i4;
      break L46;
     }
    }
   }
   i4 = i5 + 2 | 0;
   i3 = (HEAP8[i4 >> 0] | 0) + -48 | 0;
   if (i3 >>> 0 < 10 ? (HEAP8[i5 + 3 >> 0] | 0) == 36 : 0) {
    HEAP32[i29 + (i3 << 2) >> 2] = 10;
    i3 = i5 + 4 | 0;
    i7 = HEAP32[i28 + ((HEAP8[i4 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if (i2) {
    i1 = -1;
    break L1;
   }
   if (i26) {
    i3 = (HEAP32[i27 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i7 = HEAP32[i3 >> 2] | 0;
    HEAP32[i27 >> 2] = i3 + 4;
    i3 = i4;
   } else {
    i3 = i4;
    i7 = 0;
   }
  } else {
   i3 = i5;
   i7 = -1;
  } while (0);
  i9 = 0;
  while (1) {
   i4 = (HEAP8[i3 >> 0] | 0) + -65 | 0;
   if (i4 >>> 0 > 57) {
    i1 = -1;
    break L1;
   }
   i20 = i3 + 1 | 0;
   i4 = HEAP8[391160 + (i9 * 58 | 0) + i4 >> 0] | 0;
   if (((i4 & 255) + -1 | 0) >>> 0 < 8) {
    i3 = i20;
    i9 = i4 & 255;
   } else {
    i10 = i9;
    break;
   }
  }
  if (!(i4 << 24 >> 24)) {
   i1 = -1;
   break;
  }
  i9 = (i12 | 0) > -1;
  do if (i4 << 24 >> 24 == 19) if (i9) {
   i1 = -1;
   break L1;
  } else i22 = 52; else {
   if (i9) {
    HEAP32[i29 + (i12 << 2) >> 2] = i4 & 255;
    i19 = i28 + (i12 << 3) | 0;
    i22 = HEAP32[i19 + 4 >> 2] | 0;
    HEAP32[i30 >> 2] = HEAP32[i19 >> 2];
    HEAP32[i30 + 4 >> 2] = i22;
    i22 = 52;
    break;
   }
   if (!i26) {
    i1 = 0;
    break L1;
   }
   _pop_arg(i30, i4 & 255, i27);
  } while (0);
  if ((i22 | 0) == 52 ? (i22 = 0, (i26 | 0) == 0) : 0) {
   i14 = i20;
   i3 = i13;
   continue;
  }
  i12 = HEAP8[i3 >> 0] | 0;
  i12 = (i10 | 0) != 0 & (i12 & 15 | 0) == 3 ? i12 & -33 : i12;
  i5 = i11 & -65537;
  i19 = (i11 & 8192 | 0) == 0 ? i11 : i5;
  L75 : do switch (i12 | 0) {
  case 110:
   switch (i10 | 0) {
   case 0:
    {
     HEAP32[HEAP32[i30 >> 2] >> 2] = i1;
     i14 = i20;
     i3 = i13;
     continue L1;
    }
   case 1:
    {
     HEAP32[HEAP32[i30 >> 2] >> 2] = i1;
     i14 = i20;
     i3 = i13;
     continue L1;
    }
   case 2:
    {
     i14 = HEAP32[i30 >> 2] | 0;
     HEAP32[i14 >> 2] = i1;
     HEAP32[i14 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i14 = i20;
     i3 = i13;
     continue L1;
    }
   case 3:
    {
     HEAP16[HEAP32[i30 >> 2] >> 1] = i1;
     i14 = i20;
     i3 = i13;
     continue L1;
    }
   case 4:
    {
     HEAP8[HEAP32[i30 >> 2] >> 0] = i1;
     i14 = i20;
     i3 = i13;
     continue L1;
    }
   case 6:
    {
     HEAP32[HEAP32[i30 >> 2] >> 2] = i1;
     i14 = i20;
     i3 = i13;
     continue L1;
    }
   case 7:
    {
     i14 = HEAP32[i30 >> 2] | 0;
     HEAP32[i14 >> 2] = i1;
     HEAP32[i14 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i14 = i20;
     i3 = i13;
     continue L1;
    }
   default:
    {
     i14 = i20;
     i3 = i13;
     continue L1;
    }
   }
  case 112:
   {
    i10 = i19 | 8;
    i7 = i7 >>> 0 > 8 ? i7 : 8;
    i11 = 120;
    i22 = 64;
    break;
   }
  case 88:
  case 120:
   {
    i10 = i19;
    i11 = i12;
    i22 = 64;
    break;
   }
  case 111:
   {
    i4 = HEAP32[i30 >> 2] | 0;
    i5 = HEAP32[i30 + 4 >> 2] | 0;
    if ((i4 | 0) == 0 & (i5 | 0) == 0) i3 = i23; else {
     i3 = i23;
     do {
      i3 = i3 + -1 | 0;
      HEAP8[i3 >> 0] = i4 & 7 | 48;
      i4 = _bitshift64Lshr(i4 | 0, i5 | 0, 3) | 0;
      i5 = tempRet0;
     } while (!((i4 | 0) == 0 & (i5 | 0) == 0));
    }
    if (!(i19 & 8)) {
     i4 = i19;
     i9 = 0;
     i10 = 391640;
     i22 = 77;
    } else {
     i9 = i23 - i3 + 1 | 0;
     i4 = i19;
     i7 = (i7 | 0) < (i9 | 0) ? i9 : i7;
     i9 = 0;
     i10 = 391640;
     i22 = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    i3 = HEAP32[i30 >> 2] | 0;
    i4 = HEAP32[i30 + 4 >> 2] | 0;
    if ((i4 | 0) < 0) {
     i3 = _i64Subtract(0, 0, i3 | 0, i4 | 0) | 0;
     i4 = tempRet0;
     HEAP32[i30 >> 2] = i3;
     HEAP32[i30 + 4 >> 2] = i4;
     i9 = 1;
     i5 = 391640;
     i22 = 76;
     break L75;
    }
    if (!(i19 & 2048)) {
     i9 = i19 & 1;
     i5 = (i19 & 1 | 0) == 0 ? 391640 : 391642;
     i22 = 76;
    } else {
     i9 = 1;
     i5 = 391641;
     i22 = 76;
    }
    break;
   }
  case 117:
   {
    i3 = HEAP32[i30 >> 2] | 0;
    i4 = HEAP32[i30 + 4 >> 2] | 0;
    i9 = 0;
    i5 = 391640;
    i22 = 76;
    break;
   }
  case 99:
   {
    HEAP8[i30 + 536 + 39 >> 0] = HEAP32[i30 >> 2];
    i12 = i30 + 536 + 39 | 0;
    i4 = 1;
    i11 = 0;
    i10 = 391640;
    i3 = i23;
    break;
   }
  case 109:
   {
    i3 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    i22 = 82;
    break;
   }
  case 115:
   {
    i3 = HEAP32[i30 >> 2] | 0;
    i3 = (i3 | 0) != 0 ? i3 : 391650;
    i22 = 82;
    break;
   }
  case 67:
   {
    HEAP32[i30 + 8 >> 2] = HEAP32[i30 >> 2];
    HEAP32[i30 + 8 + 4 >> 2] = 0;
    HEAP32[i30 >> 2] = i30 + 8;
    i7 = -1;
    i22 = 86;
    break;
   }
  case 83:
   {
    if (!i7) {
     _pad(i26, 32, i21, 0, i19);
     i3 = 0;
     i22 = 98;
    } else i22 = 86;
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    d6 = +HEAPF64[i30 >> 3];
    HEAP32[i30 + 16 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = d6;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) >= 0) if (!(i19 & 2048)) {
     i17 = i19 & 1;
     i18 = (i19 & 1 | 0) == 0 ? 391658 : 391663;
    } else {
     i17 = 1;
     i18 = 391660;
    } else {
     d6 = -d6;
     i17 = 1;
     i18 = 391657;
    }
    HEAPF64[tempDoublePtr >> 3] = d6;
    i16 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if (i16 >>> 0 < 2146435072 | (i16 | 0) == 2146435072 & 0 < 0) {
     d6 = +_frexpl(d6, i30 + 16 | 0) * 2.0;
     if (d6 != 0.0) HEAP32[i30 + 16 >> 2] = (HEAP32[i30 + 16 >> 2] | 0) + -1;
     if ((i12 | 32 | 0) == 97) {
      i13 = (i12 & 32 | 0) == 0 ? i18 : i18 + 9 | 0;
      i5 = i17 | 2;
      i3 = 12 - i7 | 0;
      do if (!(i7 >>> 0 > 11 | (i3 | 0) == 0)) {
       d8 = 8.0;
       do {
        i3 = i3 + -1 | 0;
        d8 = d8 * 16.0;
       } while ((i3 | 0) != 0);
       if ((HEAP8[i13 >> 0] | 0) == 45) {
        d6 = -(d8 + (-d6 - d8));
        break;
       } else {
        d6 = d6 + d8 - d8;
        break;
       }
      } while (0);
      i9 = HEAP32[i30 + 16 >> 2] | 0;
      i3 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
      i3 = _fmt_u(i3, ((i3 | 0) < 0) << 31 >> 31, i30 + 576 + 12 | 0) | 0;
      if ((i3 | 0) == (i30 + 576 + 12 | 0)) {
       HEAP8[i30 + 576 + 11 >> 0] = 48;
       i3 = i30 + 576 + 11 | 0;
      }
      HEAP8[i3 + -1 >> 0] = (i9 >> 31 & 2) + 43;
      i11 = i3 + -2 | 0;
      HEAP8[i11 >> 0] = i12 + 15;
      i10 = (i7 | 0) < 1;
      i9 = i30 + 588 | 0;
      while (1) {
       i18 = ~~d6;
       i4 = i9 + 1 | 0;
       HEAP8[i9 >> 0] = HEAPU8[391624 + i18 >> 0] | i12 & 32;
       d6 = (d6 - +(i18 | 0)) * 16.0;
       do if ((i4 - (i30 + 588) | 0) == 1) {
        if ((i19 & 8 | 0) == 0 & (i10 & d6 == 0.0)) break;
        HEAP8[i4 >> 0] = 46;
        i4 = i9 + 2 | 0;
       } while (0);
       if (!(d6 != 0.0)) break; else i9 = i4;
      }
      i3 = ((i7 | 0) != 0 ? (-2 - (i30 + 588) + i4 | 0) < (i7 | 0) : 0) ? i25 + 2 + i7 - i11 | 0 : i25 - (i30 + 588) - i11 + i4 | 0;
      _pad(i26, 32, i21, i3 + i5 | 0, i19);
      if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i13, i5, i26) | 0;
      _pad(i26, 48, i21, i3 + i5 | 0, i19 ^ 65536);
      if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i30 + 588 | 0, i4 - (i30 + 588) | 0, i26) | 0;
      _pad(i26, 48, i3 - (i4 - (i30 + 588) + (i25 - i11)) | 0, 0, 0);
      if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i11, i25 - i11 | 0, i26) | 0;
      _pad(i26, 32, i21, i3 + i5 | 0, i19 ^ 8192);
      i3 = (i3 + i5 | 0) < (i21 | 0) ? i21 : i3 + i5 | 0;
      break;
     }
     i3 = (i7 | 0) < 0 ? 6 : i7;
     if (d6 != 0.0) {
      i4 = (HEAP32[i30 + 16 >> 2] | 0) + -28 | 0;
      HEAP32[i30 + 16 >> 2] = i4;
      d6 = d6 * 268435456.0;
     } else i4 = HEAP32[i30 + 16 >> 2] | 0;
     i16 = (i4 | 0) < 0 ? i30 + 24 | 0 : i30 + 24 + 288 | 0;
     i9 = i16;
     do {
      i15 = ~~d6 >>> 0;
      HEAP32[i9 >> 2] = i15;
      i9 = i9 + 4 | 0;
      d6 = (d6 - +(i15 >>> 0)) * 1.0e9;
     } while (d6 != 0.0);
     i4 = HEAP32[i30 + 16 >> 2] | 0;
     if ((i4 | 0) > 0) {
      i10 = i16;
      do {
       i11 = (i4 | 0) > 29 ? 29 : i4;
       i5 = i9 + -4 | 0;
       do if (i5 >>> 0 >= i10 >>> 0) {
        i4 = 0;
        do {
         i15 = _bitshift64Shl(HEAP32[i5 >> 2] | 0, 0, i11 | 0) | 0;
         i15 = _i64Add(i15 | 0, tempRet0 | 0, i4 | 0, 0) | 0;
         i4 = tempRet0;
         i14 = ___uremdi3(i15 | 0, i4 | 0, 1e9, 0) | 0;
         HEAP32[i5 >> 2] = i14;
         i4 = ___udivdi3(i15 | 0, i4 | 0, 1e9, 0) | 0;
         i5 = i5 + -4 | 0;
        } while (i5 >>> 0 >= i10 >>> 0);
        if (!i4) break;
        i10 = i10 + -4 | 0;
        HEAP32[i10 >> 2] = i4;
       } while (0);
       while (1) {
        if (i9 >>> 0 <= i10 >>> 0) break;
        i4 = i9 + -4 | 0;
        if (!(HEAP32[i4 >> 2] | 0)) i9 = i4; else break;
       }
       i4 = (HEAP32[i30 + 16 >> 2] | 0) - i11 | 0;
       HEAP32[i30 + 16 >> 2] = i4;
      } while ((i4 | 0) > 0);
     } else i10 = i16;
     if ((i4 | 0) < 0) {
      do {
       i11 = 0 - i4 | 0;
       i11 = (i11 | 0) > 9 ? 9 : i11;
       do if (i10 >>> 0 < i9 >>> 0) {
        i4 = 0;
        i7 = i10;
        while (1) {
         i5 = HEAP32[i7 >> 2] | 0;
         HEAP32[i7 >> 2] = (i5 >>> i11) + i4;
         i5 = Math_imul(i5 & (1 << i11) + -1, 1e9 >>> i11) | 0;
         i7 = i7 + 4 | 0;
         if (i7 >>> 0 >= i9 >>> 0) break; else i4 = i5;
        }
        i4 = (HEAP32[i10 >> 2] | 0) == 0 ? i10 + 4 | 0 : i10;
        if (!i5) {
         i10 = i4;
         break;
        }
        HEAP32[i9 >> 2] = i5;
        i10 = i4;
        i9 = i9 + 4 | 0;
       } else i10 = (HEAP32[i10 >> 2] | 0) == 0 ? i10 + 4 | 0 : i10; while (0);
       i4 = (i12 | 32 | 0) == 102 ? i16 : i10;
       i9 = (i9 - i4 >> 2 | 0) > (((i3 + 25 | 0) / 9 | 0) + 1 | 0) ? i4 + (((i3 + 25 | 0) / 9 | 0) + 1 << 2) | 0 : i9;
       i4 = (HEAP32[i30 + 16 >> 2] | 0) + i11 | 0;
       HEAP32[i30 + 16 >> 2] = i4;
      } while ((i4 | 0) < 0);
      i4 = i10;
     } else i4 = i10;
     do if (i4 >>> 0 < i9 >>> 0) {
      i5 = (i16 - i4 >> 2) * 9 | 0;
      i7 = HEAP32[i4 >> 2] | 0;
      if (i7 >>> 0 < 10) break; else i10 = 10;
      do {
       i10 = i10 * 10 | 0;
       i5 = i5 + 1 | 0;
      } while (i7 >>> 0 >= i10 >>> 0);
     } else i5 = 0; while (0);
     i13 = i3 - ((i12 | 32 | 0) != 102 ? i5 : 0) + (((i3 | 0) != 0 & (i12 | 32 | 0) == 103) << 31 >> 31) | 0;
     if ((i13 | 0) < (((i9 - i16 >> 2) * 9 | 0) + -9 | 0)) {
      i10 = i16 + (((i13 + 9216 | 0) / 9 | 0) + -1023 << 2) | 0;
      if ((((i13 + 9216 | 0) % 9 | 0) + 1 | 0) < 9) {
       i7 = 10;
       i11 = ((i13 + 9216 | 0) % 9 | 0) + 1 | 0;
       do {
        i7 = i7 * 10 | 0;
        i11 = i11 + 1 | 0;
       } while ((i11 | 0) != 9);
      } else i7 = 10;
      i14 = HEAP32[i10 >> 2] | 0;
      i15 = (i14 >>> 0) % (i7 >>> 0) | 0;
      if (!((i15 | 0) == 0 ? (i16 + (((i13 + 9216 | 0) / 9 | 0) + -1022 << 2) | 0) == (i9 | 0) : 0)) i22 = 163;
      do if ((i22 | 0) == 163) {
       i22 = 0;
       d8 = (((i14 >>> 0) / (i7 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       i11 = (i7 | 0) / 2 | 0;
       do if (i15 >>> 0 < i11 >>> 0) d6 = .5; else {
        if ((i15 | 0) == (i11 | 0) ? (i16 + (((i13 + 9216 | 0) / 9 | 0) + -1022 << 2) | 0) == (i9 | 0) : 0) {
         d6 = 1.0;
         break;
        }
        d6 = 1.5;
       } while (0);
       do if (i17) {
        if ((HEAP8[i18 >> 0] | 0) != 45) break;
        d8 = -d8;
        d6 = -d6;
       } while (0);
       HEAP32[i10 >> 2] = i14 - i15;
       if (!(d8 + d6 != d8)) break;
       i15 = i14 - i15 + i7 | 0;
       HEAP32[i10 >> 2] = i15;
       if (i15 >>> 0 > 999999999) {
        i5 = i10;
        while (1) {
         i10 = i5 + -4 | 0;
         HEAP32[i5 >> 2] = 0;
         if (i10 >>> 0 < i4 >>> 0) {
          i4 = i4 + -4 | 0;
          HEAP32[i4 >> 2] = 0;
         }
         i15 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
         HEAP32[i10 >> 2] = i15;
         if (i15 >>> 0 > 999999999) i5 = i10; else break;
        }
       }
       i5 = (i16 - i4 >> 2) * 9 | 0;
       i11 = HEAP32[i4 >> 2] | 0;
       if (i11 >>> 0 < 10) break; else i7 = 10;
       do {
        i7 = i7 * 10 | 0;
        i5 = i5 + 1 | 0;
       } while (i11 >>> 0 >= i7 >>> 0);
      } while (0);
      i15 = i10 + 4 | 0;
      i9 = i9 >>> 0 > i15 >>> 0 ? i15 : i9;
     }
     i14 = 0 - i5 | 0;
     while (1) {
      if (i9 >>> 0 <= i4 >>> 0) {
       i15 = 0;
       break;
      }
      i7 = i9 + -4 | 0;
      if (!(HEAP32[i7 >> 2] | 0)) i9 = i7; else {
       i15 = 1;
       break;
      }
     }
     do if ((i12 | 32 | 0) == 103) {
      if ((((i3 | 0) != 0 ^ 1) + i3 | 0) > (i5 | 0) & (i5 | 0) > -5) {
       i12 = i12 + -1 | 0;
       i3 = ((i3 | 0) != 0 ^ 1) + i3 + -1 - i5 | 0;
      } else {
       i12 = i12 + -2 | 0;
       i3 = ((i3 | 0) != 0 ^ 1) + i3 + -1 | 0;
      }
      if (i19 & 8) {
       i13 = i19 & 8;
       break;
      }
      do if (i15) {
       i10 = HEAP32[i9 + -4 >> 2] | 0;
       if (!i10) {
        i7 = 9;
        break;
       }
       if (!((i10 >>> 0) % 10 | 0)) {
        i11 = 10;
        i7 = 0;
       } else {
        i7 = 0;
        break;
       }
       do {
        i11 = i11 * 10 | 0;
        i7 = i7 + 1 | 0;
       } while (((i10 >>> 0) % (i11 >>> 0) | 0 | 0) == 0);
      } else i7 = 9; while (0);
      i10 = ((i9 - i16 >> 2) * 9 | 0) + -9 | 0;
      if ((i12 | 32 | 0) == 102) {
       i13 = i10 - i7 | 0;
       i13 = (i13 | 0) < 0 ? 0 : i13;
       i3 = (i3 | 0) < (i13 | 0) ? i3 : i13;
       i13 = 0;
       break;
      } else {
       i13 = i10 + i5 - i7 | 0;
       i13 = (i13 | 0) < 0 ? 0 : i13;
       i3 = (i3 | 0) < (i13 | 0) ? i3 : i13;
       i13 = 0;
       break;
      }
     } else i13 = i19 & 8; while (0);
     i7 = i3 | i13;
     i11 = (i12 | 32 | 0) == 102;
     if (i11) {
      i10 = (i5 | 0) > 0 ? i5 : 0;
      i12 = 0;
     } else {
      i10 = (i5 | 0) < 0 ? i14 : i5;
      i10 = _fmt_u(i10, ((i10 | 0) < 0) << 31 >> 31, i30 + 576 + 12 | 0) | 0;
      if ((i25 - i10 | 0) < 2) do {
       i10 = i10 + -1 | 0;
       HEAP8[i10 >> 0] = 48;
      } while ((i25 - i10 | 0) < 2);
      HEAP8[i10 + -1 >> 0] = (i5 >> 31 & 2) + 43;
      i14 = i10 + -2 | 0;
      HEAP8[i14 >> 0] = i12;
      i10 = i25 - i14 | 0;
      i12 = i14;
     }
     i14 = i17 + 1 + i3 + ((i7 | 0) != 0 & 1) + i10 | 0;
     _pad(i26, 32, i21, i14, i19);
     if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i18, i17, i26) | 0;
     _pad(i26, 48, i21, i14, i19 ^ 65536);
     do if (i11) {
      i11 = i4 >>> 0 > i16 >>> 0 ? i16 : i4;
      i10 = i11;
      while (1) {
       i4 = _fmt_u(HEAP32[i10 >> 2] | 0, 0, i24) | 0;
       do if ((i10 | 0) == (i11 | 0)) {
        if ((i4 | 0) != (i24 | 0)) break;
        HEAP8[i30 + 588 + 8 >> 0] = 48;
        i4 = i30 + 588 + 8 | 0;
       } else {
        if (i4 >>> 0 <= (i30 + 588 | 0) >>> 0) break;
        do {
         i4 = i4 + -1 | 0;
         HEAP8[i4 >> 0] = 48;
        } while (i4 >>> 0 > (i30 + 588 | 0) >>> 0);
       } while (0);
       if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i4, i24 - i4 | 0, i26) | 0;
       i4 = i10 + 4 | 0;
       if (i4 >>> 0 > i16 >>> 0) break; else i10 = i4;
      }
      do if (i7) {
       if (HEAP32[i26 >> 2] & 32) break;
       ___fwritex(391692, 1, i26) | 0;
      } while (0);
      if ((i3 | 0) > 0 & i4 >>> 0 < i9 >>> 0) {
       i5 = i4;
       while (1) {
        i4 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i24) | 0;
        if (i4 >>> 0 > (i30 + 588 | 0) >>> 0) do {
         i4 = i4 + -1 | 0;
         HEAP8[i4 >> 0] = 48;
        } while (i4 >>> 0 > (i30 + 588 | 0) >>> 0);
        if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i4, (i3 | 0) > 9 ? 9 : i3, i26) | 0;
        i5 = i5 + 4 | 0;
        i4 = i3 + -9 | 0;
        if (!((i3 | 0) > 9 & i5 >>> 0 < i9 >>> 0)) {
         i3 = i4;
         break;
        } else i3 = i4;
       }
      }
      _pad(i26, 48, i3 + 9 | 0, 9, 0);
     } else {
      i7 = i15 ? i9 : i4 + 4 | 0;
      if ((i3 | 0) > -1) {
       i11 = (i13 | 0) == 0;
       i10 = i4;
       do {
        i9 = _fmt_u(HEAP32[i10 >> 2] | 0, 0, i24) | 0;
        if ((i9 | 0) == (i24 | 0)) {
         HEAP8[i30 + 588 + 8 >> 0] = 48;
         i9 = i30 + 588 + 8 | 0;
        }
        do if ((i10 | 0) == (i4 | 0)) {
         i5 = i9 + 1 | 0;
         if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i9, 1, i26) | 0;
         if (i11 & (i3 | 0) < 1) {
          i9 = i5;
          break;
         }
         if (HEAP32[i26 >> 2] & 32) {
          i9 = i5;
          break;
         }
         ___fwritex(391692, 1, i26) | 0;
         i9 = i5;
        } else {
         if (i9 >>> 0 <= (i30 + 588 | 0) >>> 0) break;
         do {
          i9 = i9 + -1 | 0;
          HEAP8[i9 >> 0] = 48;
         } while (i9 >>> 0 > (i30 + 588 | 0) >>> 0);
        } while (0);
        i5 = i24 - i9 | 0;
        if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i9, (i3 | 0) > (i5 | 0) ? i5 : i3, i26) | 0;
        i3 = i3 - i5 | 0;
        i10 = i10 + 4 | 0;
       } while (i10 >>> 0 < i7 >>> 0 & (i3 | 0) > -1);
      }
      _pad(i26, 48, i3 + 18 | 0, 18, 0);
      if (HEAP32[i26 >> 2] & 32) break;
      ___fwritex(i12, i25 - i12 | 0, i26) | 0;
     } while (0);
     _pad(i26, 32, i21, i14, i19 ^ 8192);
     i3 = (i14 | 0) < (i21 | 0) ? i21 : i14;
    } else {
     i9 = d6 != d6 | 0.0 != 0.0;
     i4 = i9 ? 0 : i17;
     _pad(i26, 32, i21, i4 + 3 | 0, i5);
     i3 = HEAP32[i26 >> 2] | 0;
     if (!(i3 & 32)) {
      ___fwritex(i18, i4, i26) | 0;
      i3 = HEAP32[i26 >> 2] | 0;
     }
     if (!(i3 & 32)) ___fwritex(i9 ? ((i12 & 32 | 0) != 0 ? 391684 : 391688) : (i12 & 32 | 0) != 0 ? 391676 : 391680, 3, i26) | 0;
     _pad(i26, 32, i21, i4 + 3 | 0, i19 ^ 8192);
     i3 = (i4 + 3 | 0) < (i21 | 0) ? i21 : i4 + 3 | 0;
    } while (0);
    i14 = i20;
    continue L1;
   }
  default:
   {
    i12 = i14;
    i5 = i19;
    i4 = i7;
    i11 = 0;
    i10 = 391640;
    i3 = i23;
   }
  } while (0);
  L313 : do if ((i22 | 0) == 64) {
   i4 = HEAP32[i30 >> 2] | 0;
   i5 = HEAP32[i30 + 4 >> 2] | 0;
   i9 = i11 & 32;
   if (!((i4 | 0) == 0 & (i5 | 0) == 0)) {
    i3 = i23;
    do {
     i3 = i3 + -1 | 0;
     HEAP8[i3 >> 0] = HEAPU8[391624 + (i4 & 15) >> 0] | i9;
     i4 = _bitshift64Lshr(i4 | 0, i5 | 0, 4) | 0;
     i5 = tempRet0;
    } while (!((i4 | 0) == 0 & (i5 | 0) == 0));
    if ((i10 & 8 | 0) == 0 | (HEAP32[i30 >> 2] | 0) == 0 & (HEAP32[i30 + 4 >> 2] | 0) == 0) {
     i4 = i10;
     i9 = 0;
     i10 = 391640;
     i22 = 77;
    } else {
     i4 = i10;
     i9 = 2;
     i10 = 391640 + (i11 >> 4) | 0;
     i22 = 77;
    }
   } else {
    i3 = i23;
    i4 = i10;
    i9 = 0;
    i10 = 391640;
    i22 = 77;
   }
  } else if ((i22 | 0) == 76) {
   i3 = _fmt_u(i3, i4, i23) | 0;
   i4 = i19;
   i10 = i5;
   i22 = 77;
  } else if ((i22 | 0) == 82) {
   i22 = 0;
   i19 = _memchr(i3, 0, i7) | 0;
   i12 = i3;
   i4 = (i19 | 0) == 0 ? i7 : i19 - i3 | 0;
   i11 = 0;
   i10 = 391640;
   i3 = (i19 | 0) == 0 ? i3 + i7 | 0 : i19;
  } else if ((i22 | 0) == 86) {
   i22 = 0;
   i4 = 0;
   i3 = 0;
   i9 = HEAP32[i30 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i9 >> 2] | 0;
    if (!i5) break;
    i3 = _wctomb(i30 + 528 | 0, i5) | 0;
    if ((i3 | 0) < 0 | i3 >>> 0 > (i7 - i4 | 0) >>> 0) break;
    i4 = i3 + i4 | 0;
    if (i7 >>> 0 > i4 >>> 0) i9 = i9 + 4 | 0; else break;
   }
   if ((i3 | 0) < 0) {
    i1 = -1;
    break L1;
   }
   _pad(i26, 32, i21, i4, i19);
   if (!i4) {
    i3 = 0;
    i22 = 98;
   } else {
    i5 = 0;
    i7 = HEAP32[i30 >> 2] | 0;
    while (1) {
     i3 = HEAP32[i7 >> 2] | 0;
     if (!i3) {
      i3 = i4;
      i22 = 98;
      break L313;
     }
     i3 = _wctomb(i30 + 528 | 0, i3) | 0;
     i5 = i3 + i5 | 0;
     if ((i5 | 0) > (i4 | 0)) {
      i3 = i4;
      i22 = 98;
      break L313;
     }
     if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i30 + 528 | 0, i3, i26) | 0;
     if (i5 >>> 0 >= i4 >>> 0) {
      i3 = i4;
      i22 = 98;
      break;
     } else i7 = i7 + 4 | 0;
    }
   }
  } while (0);
  if ((i22 | 0) == 98) {
   i22 = 0;
   _pad(i26, 32, i21, i3, i19 ^ 8192);
   i14 = i20;
   i3 = (i21 | 0) > (i3 | 0) ? i21 : i3;
   continue;
  }
  if ((i22 | 0) == 77) {
   i22 = 0;
   i5 = (i7 | 0) > -1 ? i4 & -65537 : i4;
   i4 = (HEAP32[i30 >> 2] | 0) != 0 | (HEAP32[i30 + 4 >> 2] | 0) != 0;
   if ((i7 | 0) != 0 | i4) {
    i4 = (i4 & 1 ^ 1) + (i23 - i3) | 0;
    i12 = i3;
    i4 = (i7 | 0) > (i4 | 0) ? i7 : i4;
    i11 = i9;
    i3 = i23;
   } else {
    i12 = i23;
    i4 = 0;
    i11 = i9;
    i3 = i23;
   }
  }
  i9 = i3 - i12 | 0;
  i4 = (i4 | 0) < (i9 | 0) ? i9 : i4;
  i7 = i11 + i4 | 0;
  i3 = (i21 | 0) < (i7 | 0) ? i7 : i21;
  _pad(i26, 32, i3, i7, i5);
  if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i10, i11, i26) | 0;
  _pad(i26, 48, i3, i7, i5 ^ 65536);
  _pad(i26, 48, i4, i9, 0);
  if (!(HEAP32[i26 >> 2] & 32)) ___fwritex(i12, i9, i26) | 0;
  _pad(i26, 32, i3, i7, i5 ^ 8192);
  i14 = i20;
 }
 L348 : do if ((i22 | 0) == 245) if (!i26) if (i2) {
  i1 = 1;
  while (1) {
   i2 = HEAP32[i29 + (i1 << 2) >> 2] | 0;
   if (!i2) break;
   _pop_arg(i28 + (i1 << 3) | 0, i2, i27);
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break L348;
   }
  }
  if ((i1 | 0) < 10) while (1) {
   if (HEAP32[i29 + (i1 << 2) >> 2] | 0) {
    i1 = -1;
    break L348;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break;
   }
  } else i1 = 1;
 } else i1 = 0; while (0);
 STACKTOP = i30;
 return i1 | 0;
}
function __bdf_parse_glyphs(i6, i3, i2, i1, i16) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i15 >> 2] = 0;
 i13 = HEAP32[i16 + 32 >> 2] | 0;
 i14 = HEAP32[i13 + 278664 >> 2] | 0;
 L1 : do if (!(_memcmp(i6, 324373, 7) | 0)) {
  i4 = (HEAP8[i6 + 7 >> 0] | 0) == 0;
  i2 = (i4 ? -7 : -8) + i3 | 0;
  HEAP32[i15 + 4 >> 2] = 0;
  i3 = HEAP32[i13 + 88 >> 2] | 0;
  i3 = _ft_mem_realloc(i14, 1, i3, i2 + 1 + i3 | 0, HEAP32[i13 + 84 >> 2] | 0, i15 + 4 | 0) | 0;
  HEAP32[i13 + 84 >> 2] = i3;
  i1 = HEAP32[i15 + 4 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i13 + 88 >> 2] | 0;
   _memcpy(i3 + i1 | 0, (i4 ? i6 + 7 | 0 : i6 + 8 | 0) | 0, i2 | 0) | 0;
   HEAP8[i3 + (i1 + i2) >> 0] = 10;
   HEAP32[i13 + 88 >> 2] = (HEAP32[i13 + 88 >> 2] | 0) + (i2 + 1);
   i1 = HEAP32[i15 + 4 >> 2] | 0;
  }
  HEAP32[i15 >> 2] = i1;
  i10 = 193;
 } else {
  i2 = HEAP32[i16 >> 2] | 0;
  L7 : do if (!(i2 & 32)) {
   if (_memcmp(i6, 324630, 5) | 0) {
    HEAP32[i15 >> 2] = 180;
    i2 = i16;
    i1 = 180;
    break L1;
   }
   i1 = __bdf_list_split(i16 + 139304 | 0, 324407, i6, i3) | 0;
   HEAP32[i15 >> 2] = i1;
   if (i1) {
    i2 = i16;
    break L1;
   }
   i1 = HEAP32[(HEAP32[i16 + 139304 >> 2] | 0) + 4 >> 2] | 0;
   L13 : do if (i1) {
    i2 = HEAP8[i1 >> 0] | 0;
    L15 : do switch (i2 << 24 >> 24) {
    case 0:
     {
      i10 = 15;
      break L13;
     }
    case 48:
     {
      switch (HEAP8[i1 + 1 >> 0] | 0) {
      case 88:
      case 120:
       break;
      default:
       {
        i3 = i1;
        i5 = 10;
        i2 = 48;
        i4 = 324442;
        break L15;
       }
      }
      i3 = i1 + 2 | 0;
      i5 = 16;
      i2 = HEAP8[i1 + 2 >> 0] | 0;
      i4 = 324410;
      break;
     }
    default:
     {
      i3 = i1;
      i5 = 10;
      i4 = 324442;
     }
    } while (0);
    i1 = i2 << 24 >> 24;
    if (HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7)) {
     i2 = i1;
     i1 = 0;
     do {
      i1 = Math_imul(i1, i5) | 0;
      i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
      i3 = i3 + 1 | 0;
      i12 = HEAP8[i3 >> 0] | 0;
      i2 = i12 << 24 >> 24;
     } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i12 & 255) >>> 3) >> 0] | 0) != 0);
     HEAP32[i13 + 48 >> 2] = i1;
     HEAP32[i16 + 4 >> 2] = i1;
     if (i1) {
      if (i1 >>> 0 > 1114111) {
       HEAP32[i15 >> 2] = 6;
       i2 = i16;
       i1 = 6;
       break L1;
      }
     } else {
      i1 = i13 + 48 | 0;
      i10 = 17;
     }
    } else i10 = 15;
   } else i10 = 15; while (0);
   if ((i10 | 0) == 15) {
    HEAP32[i13 + 48 >> 2] = 0;
    HEAP32[i16 + 4 >> 2] = 0;
    i1 = i13 + 48 | 0;
    i10 = 17;
   }
   if ((i10 | 0) == 17) {
    HEAP32[i1 >> 2] = 64;
    i1 = 64;
   }
   HEAP32[i13 + 56 >> 2] = _ft_mem_realloc(i14, 36, 0, i1, 0, i15) | 0;
   i1 = HEAP32[i15 >> 2] | 0;
   if (i1) {
    i2 = i16;
    break L1;
   }
   HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 32;
  } else {
   if (!(_memcmp(i6, 324665, 7) | 0)) {
    _qsort(HEAP32[i13 + 56 >> 2] | 0, HEAP32[i13 + 52 >> 2] | 0, 36, 155);
    HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -2;
    break;
   }
   if (!(_memcmp(i6, 324673, 7) | 0)) {
    HEAP32[i16 + 28 >> 2] = 0;
    HEAP32[i16 >> 2] = i2 & -4033;
    break;
   }
   if (((i2 & 64 | 0) != 0 ? (HEAP32[i16 + 28 >> 2] | 0) == -1 : 0) ? (HEAP32[(HEAP32[i16 + 36 >> 2] | 0) + 4 >> 2] | 0) == 0 : 0) break;
   if (!(_memcmp(i6, 324681, 9) | 0)) {
    _ft_mem_free(i14, HEAP32[i16 + 24 >> 2] | 0);
    HEAP32[i16 + 24 >> 2] = 0;
    i1 = __bdf_list_split(i16 + 139304 | 0, 324407, i6, i3) | 0;
    HEAP32[i15 >> 2] = i1;
    if (i1) {
     i2 = i16;
     break L1;
    }
    i3 = HEAP32[i16 + 139312 >> 2] | 0;
    do if (i3) {
     if (i3 >>> 0 < 2) {
      HEAP32[i16 + 139312 >> 2] = 0;
      break;
     }
     i1 = 0;
     i2 = 1;
     while (1) {
      i13 = HEAP32[i16 + 139304 >> 2] | 0;
      HEAP32[i13 + (i1 << 2) >> 2] = HEAP32[i13 + (i2 << 2) >> 2];
      i1 = i1 + 1 | 0;
      if ((i1 | 0) == (i3 + -1 | 0)) break; else i2 = i2 + 1 | 0;
     }
     HEAP32[i16 + 139312 >> 2] = i3 + -1;
     if (i3 + -1 | 0) {
      i2 = HEAP32[HEAP32[i16 + 139304 >> 2] >> 2] | 0;
      i5 = i2;
      i6 = i3 + -1 | 0;
      i7 = 0;
      i4 = 0;
      while (1) {
       i1 = HEAP8[i5 >> 0] | 0;
       if (!(i1 << 24 >> 24)) i1 = i6; else {
        while (1) {
         i5 = i5 + 1 | 0;
         i3 = i4 + 1 | 0;
         HEAP8[i2 + i4 >> 0] = i1;
         i1 = HEAP8[i5 >> 0] | 0;
         if (!(i1 << 24 >> 24)) break; else i4 = i3;
        }
        i1 = HEAP32[i16 + 139312 >> 2] | 0;
        i4 = i3;
       }
       i3 = i7 + 1 | 0;
       if (i3 >>> 0 < i1 >>> 0) {
        HEAP8[i2 + i4 >> 0] = 32;
        i1 = HEAP32[i16 + 139312 >> 2] | 0;
        i4 = i4 + 1 | 0;
       }
       if (i3 >>> 0 >= i1 >>> 0) break;
       i5 = HEAP32[(HEAP32[i16 + 139304 >> 2] | 0) + (i3 << 2) >> 2] | 0;
       i6 = i1;
       i7 = i3;
      }
      if ((i2 | 0) != 298501) {
       HEAP8[i2 + i4 >> 0] = 0;
       if (!i2) break;
      } else i2 = 298501;
      i3 = _ft_mem_realloc(i14, 1, 0, i4 + 1 | 0, 0, i15) | 0;
      HEAP32[i16 + 24 >> 2] = i3;
      i1 = HEAP32[i15 >> 2] | 0;
      if (i1) {
       i2 = i16;
       break L1;
      }
      _memcpy(i3 | 0, i2 | 0, i4 + 1 | 0) | 0;
      HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 64;
      break L7;
     }
    } while (0);
    HEAP32[i15 >> 2] = 3;
    i2 = i16;
    i1 = 3;
    break L1;
   }
   if (!(_memcmp(i6, 324691, 8) | 0)) {
    if (!(i2 & 64)) {
     HEAP32[i15 >> 2] = 181;
     i2 = i16;
     i1 = 181;
     break L1;
    }
    i1 = __bdf_list_split(i16 + 139304 | 0, 324407, i6, i3) | 0;
    HEAP32[i15 >> 2] = i1;
    if (i1) {
     i2 = i16;
     break L1;
    }
    i6 = HEAP32[i16 + 139304 >> 2] | 0;
    i1 = HEAP32[i6 + 4 >> 2] | 0;
    if ((i1 | 0) != 0 ? (i7 = HEAP8[i1 >> 0] | 0, i7 << 24 >> 24 != 0) : 0) {
     i1 = i7 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
     i2 = HEAP8[i1 >> 0] | 0;
     L80 : do if (i2 << 24 >> 24 == 48) {
      switch (HEAP8[i1 + 1 >> 0] | 0) {
      case 88:
      case 120:
       break;
      default:
       {
        i5 = 10;
        i3 = i1;
        i2 = 48;
        i4 = 324442;
        break L80;
       }
      }
      i5 = 16;
      i3 = i1 + 2 | 0;
      i2 = HEAP8[i1 + 2 >> 0] | 0;
      i4 = 324410;
     } else {
      i5 = 10;
      i3 = i1;
      i4 = 324442;
     } while (0);
     i1 = i2 << 24 >> 24;
     if (!(HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7))) i1 = 0; else {
      i2 = i1;
      i1 = 0;
      do {
       i1 = Math_imul(i1, i5) | 0;
       i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
       i3 = i3 + 1 | 0;
       i12 = HEAP8[i3 >> 0] | 0;
       i2 = i12 << 24 >> 24;
      } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i12 & 255) >>> 3) >> 0] | 0) != 0);
     }
     i1 = i7 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1;
    } else i1 = 0;
    i1 = (i1 | 0) < -1 ? -1 : i1;
    HEAP32[i16 + 28 >> 2] = i1;
    if ((i1 | 0) == -1) if ((HEAP32[i16 + 139312 >> 2] | 0) >>> 0 > 2) {
     i1 = HEAP32[i6 + 8 >> 2] | 0;
     if ((i1 | 0) != 0 ? (i9 = HEAP8[i1 >> 0] | 0, i9 << 24 >> 24 != 0) : 0) {
      i1 = i9 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
      i2 = HEAP8[i1 >> 0] | 0;
      L95 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i5 = 10;
         i3 = i1;
         i2 = 48;
         i4 = 324442;
         break L95;
        }
       }
       i5 = 16;
       i3 = i1 + 2 | 0;
       i2 = HEAP8[i1 + 2 >> 0] | 0;
       i4 = 324410;
      } else {
       i5 = 10;
       i3 = i1;
       i4 = 324442;
      } while (0);
      i1 = i2 << 24 >> 24;
      if (!(HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7))) i1 = 0; else {
       i2 = i1;
       i1 = 0;
       do {
        i1 = Math_imul(i1, i5) | 0;
        i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
        i3 = i3 + 1 | 0;
        i12 = HEAP8[i3 >> 0] | 0;
        i2 = i12 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i12 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i1 = i9 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1;
     } else i1 = 0;
     HEAP32[i16 + 28 >> 2] = i1;
     i10 = 73;
    } else i10 = 84; else i10 = 73;
    do if ((i10 | 0) == 73) {
     if ((i1 | 0) > 0 & i1 >>> 0 > 1114111) {
      HEAP32[i15 >> 2] = 3;
      i2 = i16;
      i1 = 3;
      break L1;
     }
     if ((i1 | 0) > -1) {
      i2 = i16 + 40 + (i1 >> 5 << 2) | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      i1 = 1 << (i1 & 31);
      if (i3 & i1) {
       HEAP32[i16 + 28 >> 2] = -1;
       HEAP16[i13 + 278660 >> 1] = 1;
       i10 = 84;
       break;
      }
      HEAP32[i2 >> 2] = i3 | i1;
      i3 = HEAP32[i16 + 28 >> 2] | 0;
      if ((i3 | 0) > -1) {
       i1 = HEAP32[i13 + 52 >> 2] | 0;
       if ((i1 | 0) == (HEAP32[i13 + 48 >> 2] | 0)) {
        i2 = _ft_mem_realloc(i14, 36, i1, i1 + 64 | 0, HEAP32[i13 + 56 >> 2] | 0, i15) | 0;
        HEAP32[i13 + 56 >> 2] = i2;
        i1 = HEAP32[i15 >> 2] | 0;
        if (i1) {
         i2 = i16;
         break L1;
        }
        HEAP32[i13 + 48 >> 2] = (HEAP32[i13 + 48 >> 2] | 0) + 64;
        i1 = HEAP32[i13 + 52 >> 2] | 0;
        i3 = HEAP32[i16 + 28 >> 2] | 0;
       } else i2 = HEAP32[i13 + 56 >> 2] | 0;
       HEAP32[i13 + 52 >> 2] = i1 + 1;
       HEAP32[i2 + (i1 * 36 | 0) >> 2] = HEAP32[i16 + 24 >> 2];
       HEAP32[i2 + (i1 * 36 | 0) + 4 >> 2] = i3;
       HEAP32[i16 + 24 >> 2] = 0;
      } else i10 = 84;
     } else i10 = 84;
    } while (0);
    if ((i10 | 0) == 84) {
     if (!(HEAP32[(HEAP32[i16 + 36 >> 2] | 0) + 4 >> 2] | 0)) {
      _ft_mem_free(i14, HEAP32[i16 + 24 >> 2] | 0);
      HEAP32[i16 + 24 >> 2] = 0;
      i1 = i16 + 24 | 0;
     } else {
      i1 = HEAP32[i13 + 64 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i13 + 60 >> 2] | 0)) {
       i2 = _ft_mem_realloc(i14, 36, i1, i1 + 4 | 0, HEAP32[i13 + 68 >> 2] | 0, i15) | 0;
       HEAP32[i13 + 68 >> 2] = i2;
       i1 = HEAP32[i15 >> 2] | 0;
       if (i1) {
        i2 = i16;
        break L1;
       }
       HEAP32[i13 + 60 >> 2] = (HEAP32[i13 + 60 >> 2] | 0) + 4;
       i1 = HEAP32[i13 + 64 >> 2] | 0;
      } else i2 = HEAP32[i13 + 68 >> 2] | 0;
      HEAP32[i2 + (i1 * 36 | 0) >> 2] = HEAP32[i16 + 24 >> 2];
      HEAP32[i13 + 64 >> 2] = i1 + 1;
      HEAP32[i2 + (i1 * 36 | 0) + 4 >> 2] = i1;
      i1 = i16 + 24 | 0;
     }
     HEAP32[i1 >> 2] = 0;
    }
    HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & 1073741695 | 128;
    break;
   }
   if ((HEAP32[i16 + 28 >> 2] | 0) == -1) i12 = (HEAP32[i13 + 68 >> 2] | 0) + (((HEAP32[i13 + 64 >> 2] | 0) + -1 | 0) * 36 | 0) | 0; else i12 = (HEAP32[i13 + 56 >> 2] | 0) + (((HEAP32[i13 + 52 >> 2] | 0) + -1 | 0) * 36 | 0) | 0;
   if (i2 & 2048) {
    i1 = HEAP32[i16 + 8 >> 2] | 0;
    if (i1 >>> 0 >= (HEAPU16[i12 + 14 >> 1] | 0) >>> 0) {
     if ((i2 | 0) < 0) break;
     HEAP32[i16 >> 2] = i2 | -2147483648;
     HEAP16[i13 + 278660 >> 1] = 1;
     break;
    }
    i4 = HEAP32[i12 + 28 >> 2] | 0;
    i3 = (HEAP32[i12 + 24 >> 2] | 0) + (Math_imul(i4, i1) | 0) | 0;
    i1 = 0;
    L142 : while (1) {
     while (1) {
      if (i1 >>> 0 >= i4 << 1 >>> 0) {
       i2 = i1;
       break L142;
      }
      i2 = HEAP8[i6 + i1 >> 0] | 0;
      if (!(1 << (i2 & 7) & HEAPU8[324410 + ((i2 & 255) >>> 3) >> 0])) {
       i2 = i1;
       i10 = 106;
       break L142;
      }
      HEAP8[i3 >> 0] = (HEAPU8[i3 >> 0] << 4) + (HEAPU8[324474 + (i2 << 24 >> 24) >> 0] | 0);
      i2 = i1 + 1 | 0;
      if (i2 >>> 0 >= i4 << 1 >>> 0 | (i1 & 1 | 0) == 0) i1 = i2; else break;
     }
     i1 = i3 + 1 | 0;
     HEAP8[i1 >> 0] = 0;
     i3 = i1;
     i1 = i2;
    }
    if ((i10 | 0) == 106) {
     i1 = HEAP32[i16 >> 2] | 0;
     if (!(i1 & 1073741824)) {
      HEAP32[i16 >> 2] = i1 | 1073741824;
      HEAP16[i13 + 278660 >> 1] = 1;
     }
    }
    i1 = HEAP16[i12 + 12 >> 1] | 0;
    if (i1 << 16 >> 16) {
     i12 = HEAP8[324700 + ((Math_imul(HEAPU16[(HEAP32[i16 + 32 >> 2] | 0) + 278662 >> 1] | 0, i1 & 65535) | 0) & 7) >> 0] | 0;
     HEAP8[i3 >> 0] = HEAP8[i3 >> 0] & i12;
    }
    if (((i2 | 0) == (i4 << 1 | 0) ? (i12 = HEAPU8[i6 + (i4 << 1) >> 0] | 0, (1 << (i12 & 7) & HEAPU8[324410 + (i12 >>> 3) >> 0] | 0) != 0) : 0) ? (i5 = HEAP32[i16 >> 2] | 0, (i5 & 1073741824 | 0) == 0) : 0) {
     HEAP32[i16 >> 2] = i5 | 1073741824;
     HEAP16[i13 + 278660 >> 1] = 1;
    }
    HEAP32[i16 + 8 >> 2] = (HEAP32[i16 + 8 >> 2] | 0) + 1;
    break;
   }
   do if (!(_memcmp(i6, 324708, 6) | 0)) {
    if (i2 & 128) {
     i1 = __bdf_list_split(i16 + 139304 | 0, 324407, i6, i3) | 0;
     HEAP32[i15 >> 2] = i1;
     if (i1) {
      i2 = i16;
      break L1;
     }
     i1 = HEAP32[(HEAP32[i16 + 139304 >> 2] | 0) + 4 >> 2] | 0;
     L166 : do if (i1) {
      i2 = HEAP8[i1 >> 0] | 0;
      L168 : do switch (i2 << 24 >> 24) {
      case 0:
       {
        i1 = 0;
        break L166;
       }
      case 48:
       {
        switch (HEAP8[i1 + 1 >> 0] | 0) {
        case 88:
        case 120:
         break;
        default:
         {
          i3 = i1;
          i5 = 10;
          i2 = 48;
          i4 = 324442;
          break L168;
         }
        }
        i3 = i1 + 2 | 0;
        i5 = 16;
        i2 = HEAP8[i1 + 2 >> 0] | 0;
        i4 = 324410;
        break;
       }
      default:
       {
        i3 = i1;
        i5 = 10;
        i4 = 324442;
       }
      } while (0);
      i1 = i2 << 24 >> 24;
      if (HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7)) {
       i2 = i1;
       i1 = 0;
       do {
        i1 = Math_imul(i1, i5) | 0;
        i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
        i3 = i3 + 1 | 0;
        i13 = HEAP8[i3 >> 0] | 0;
        i2 = i13 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i13 & 255) >>> 3) >> 0] | 0) != 0);
       i1 = i1 & 65535;
      } else i1 = 0;
     } else i1 = 0; while (0);
     HEAP16[i12 + 8 >> 1] = i1;
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 256;
     break L7;
    }
   } else {
    if (!(_memcmp(i6, 324715, 6) | 0)) {
     if (!(i2 & 128)) break;
     i1 = __bdf_list_split(i16 + 139304 | 0, 324407, i6, i3) | 0;
     HEAP32[i15 >> 2] = i1;
     if (i1) {
      i2 = i16;
      break L1;
     }
     i1 = HEAP32[(HEAP32[i16 + 139304 >> 2] | 0) + 4 >> 2] | 0;
     L181 : do if (i1) {
      i2 = HEAP8[i1 >> 0] | 0;
      L183 : do switch (i2 << 24 >> 24) {
      case 0:
       {
        i2 = 0;
        break L181;
       }
      case 48:
       {
        switch (HEAP8[i1 + 1 >> 0] | 0) {
        case 88:
        case 120:
         break;
        default:
         {
          i3 = i1;
          i5 = 10;
          i2 = 48;
          i4 = 324442;
          break L183;
         }
        }
        i3 = i1 + 2 | 0;
        i5 = 16;
        i2 = HEAP8[i1 + 2 >> 0] | 0;
        i4 = 324410;
        break;
       }
      default:
       {
        i3 = i1;
        i5 = 10;
        i4 = 324442;
       }
      } while (0);
      i1 = i2 << 24 >> 24;
      if (HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7)) {
       i2 = 0;
       do {
        i2 = Math_imul(i2, i5) | 0;
        i2 = (HEAPU8[324474 + i1 >> 0] | 0) + i2 | 0;
        i3 = i3 + 1 | 0;
        i11 = HEAP8[i3 >> 0] | 0;
        i1 = i11 << 24 >> 24;
       } while ((1 << (i1 & 7) & HEAPU8[i4 + ((i11 & 255) >>> 3) >> 0] | 0) != 0);
      } else i2 = 0;
     } else i2 = 0; while (0);
     HEAP16[i12 + 10 >> 1] = i2;
     i1 = HEAP32[i16 >> 2] | 0;
     if (!(i1 & 256)) {
      HEAP16[i12 + 8 >> 1] = _FT_MulDiv(i2 & 65535, 72e3, Math_imul(HEAP32[i13 + 20 >> 2] | 0, HEAP32[i13 + 16 >> 2] | 0) | 0) | 0;
      i1 = HEAP32[i16 >> 2] | 0;
     }
     HEAP32[i16 >> 2] = i1 | 512;
     break L7;
    }
    if (_memcmp(i6, 324722, 3) | 0) {
     if (_memcmp(i6, 324726, 6) | 0) {
      HEAP32[i15 >> 2] = 3;
      i2 = i16;
      i1 = 3;
      break L1;
     }
     if (!(i2 & 1024)) {
      HEAP32[i15 >> 2] = 183;
      i2 = i16;
      i1 = 183;
      break L1;
     }
     i13 = (Math_imul(HEAPU16[i13 + 278662 >> 1] | 0, HEAPU16[i12 + 12 >> 1] | 0) | 0) + 7 | 0;
     HEAP32[i12 + 28 >> 2] = i13 >>> 3;
     i1 = Math_imul(i13 >>> 3, HEAPU16[i12 + 14 >> 1] | 0) | 0;
     if (i13 >>> 0 > 524287 | i1 >>> 0 > 65535) {
      HEAP32[i15 >> 2] = 184;
      i2 = i16;
      i1 = 184;
      break L1;
     }
     HEAP16[i12 + 32 >> 1] = i1;
     HEAP32[i12 + 24 >> 2] = _ft_mem_realloc(i14, 1, 0, i1 & 65535, 0, i15) | 0;
     i1 = HEAP32[i15 >> 2] | 0;
     if (i1) {
      i2 = i16;
      break L1;
     }
     HEAP32[i16 + 8 >> 2] = 0;
     HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 2048;
     break L7;
    }
    if (i2 & 128) {
     i1 = __bdf_list_split(i16 + 139304 | 0, 324407, i6, i3) | 0;
     HEAP32[i15 >> 2] = i1;
     if (i1) {
      i2 = i16;
      break L1;
     }
     i10 = HEAP32[i16 + 139304 >> 2] | 0;
     i1 = HEAP32[i10 + 4 >> 2] | 0;
     if ((i1 | 0) != 0 ? (i8 = HEAP8[i1 >> 0] | 0, i8 << 24 >> 24 != 0) : 0) {
      i1 = i8 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
      i2 = HEAP8[i1 >> 0] | 0;
      L212 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i6 = 10;
         i3 = i1;
         i2 = 48;
         i5 = 324442;
         break L212;
        }
       }
       i6 = 16;
       i3 = i1 + 2 | 0;
       i2 = HEAP8[i1 + 2 >> 0] | 0;
       i5 = 324410;
      } else {
       i6 = 10;
       i3 = i1;
       i5 = 324442;
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i1 = 0;
       i2 = i4;
       do {
        i1 = Math_imul(i1, i6) | 0;
        i3 = i3 + 1 | 0;
        i11 = HEAP8[i3 >> 0] | 0;
        i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
        i2 = i11 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i11 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i11 = (i8 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1) & 65535;
     } else i11 = 0;
     HEAP16[i12 + 12 >> 1] = i11;
     i1 = HEAP32[i10 + 8 >> 2] | 0;
     do if (!i1) i9 = 0; else {
      i7 = HEAP8[i1 >> 0] | 0;
      if (!(i7 << 24 >> 24)) {
       i9 = 0;
       break;
      }
      i1 = i7 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
      i2 = HEAP8[i1 >> 0] | 0;
      L224 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i6 = 10;
         i3 = i1;
         i2 = 48;
         i5 = 324442;
         break L224;
        }
       }
       i6 = 16;
       i3 = i1 + 2 | 0;
       i2 = HEAP8[i1 + 2 >> 0] | 0;
       i5 = 324410;
      } else {
       i6 = 10;
       i3 = i1;
       i5 = 324442;
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i1 = 0;
       i2 = i4;
       do {
        i1 = Math_imul(i1, i6) | 0;
        i3 = i3 + 1 | 0;
        i8 = HEAP8[i3 >> 0] | 0;
        i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
        i2 = i8 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i8 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i9 = (i7 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1) & 65535;
     } while (0);
     HEAP16[i12 + 14 >> 1] = i9;
     i1 = HEAP32[i10 + 12 >> 2] | 0;
     do if (!i1) i8 = 0; else {
      i7 = HEAP8[i1 >> 0] | 0;
      if (!(i7 << 24 >> 24)) {
       i8 = 0;
       break;
      }
      i1 = i7 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
      i2 = HEAP8[i1 >> 0] | 0;
      L236 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i6 = 10;
         i3 = i1;
         i2 = 48;
         i5 = 324442;
         break L236;
        }
       }
       i6 = 16;
       i3 = i1 + 2 | 0;
       i2 = HEAP8[i1 + 2 >> 0] | 0;
       i5 = 324410;
      } else {
       i6 = 10;
       i3 = i1;
       i5 = 324442;
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i1 = 0;
       i2 = i4;
       do {
        i1 = Math_imul(i1, i6) | 0;
        i3 = i3 + 1 | 0;
        i8 = HEAP8[i3 >> 0] | 0;
        i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
        i2 = i8 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i8 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i8 = (i7 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1) & 65535;
     } while (0);
     HEAP16[i12 + 16 >> 1] = i8;
     i1 = HEAP32[i10 + 16 >> 2] | 0;
     do if (!i1) i1 = 0; else {
      i7 = HEAP8[i1 >> 0] | 0;
      if (!(i7 << 24 >> 24)) {
       i1 = 0;
       break;
      }
      i1 = i7 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
      i2 = HEAP8[i1 >> 0] | 0;
      L248 : do if (i2 << 24 >> 24 == 48) {
       switch (HEAP8[i1 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i6 = 10;
         i3 = i1;
         i2 = 48;
         i5 = 324442;
         break L248;
        }
       }
       i6 = 16;
       i3 = i1 + 2 | 0;
       i2 = HEAP8[i1 + 2 >> 0] | 0;
       i5 = 324410;
      } else {
       i6 = 10;
       i3 = i1;
       i5 = 324442;
      } while (0);
      i4 = i2 << 24 >> 24;
      if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
       i1 = 0;
       i2 = i4;
       do {
        i1 = Math_imul(i1, i6) | 0;
        i3 = i3 + 1 | 0;
        i10 = HEAP8[i3 >> 0] | 0;
        i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
        i2 = i10 << 24 >> 24;
       } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i10 & 255) >>> 3) >> 0] | 0) != 0);
      }
      i1 = (i7 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1) & 65535;
     } while (0);
     HEAP16[i12 + 18 >> 1] = i1;
     i1 = i1 & 65535;
     i7 = (i9 & 65535) + i1 & 65535;
     HEAP16[i12 + 20 >> 1] = i7;
     HEAP16[i12 + 22 >> 1] = 0 - i1;
     i10 = HEAP16[i16 + 18 >> 1] | 0;
     HEAP16[i16 + 18 >> 1] = i7 << 16 >> 16 > i10 << 16 >> 16 ? i7 : i10;
     i10 = HEAP16[i16 + 20 >> 1] | 0;
     HEAP16[i16 + 20 >> 1] = (0 - i1 & 65535) << 16 >> 16 > i10 << 16 >> 16 ? 0 - i1 & 65535 : i10;
     i10 = (i8 & 65535) + (i11 & 65535) | 0;
     HEAP16[i16 + 22 >> 1] = i10;
     i1 = HEAP16[i16 + 16 >> 1] | 0;
     HEAP16[i16 + 16 >> 1] = (i10 << 16 >> 16 | 0) > (i1 << 16 >> 16 | 0) ? i10 & 65535 : i1;
     i1 = HEAP16[i16 + 12 >> 1] | 0;
     HEAP16[i16 + 12 >> 1] = i8 << 16 >> 16 < i1 << 16 >> 16 ? i8 : i1;
     i1 = HEAP16[i16 + 14 >> 1] | 0;
     HEAP16[i16 + 14 >> 1] = i8 << 16 >> 16 > i1 << 16 >> 16 ? i8 : i1;
     i1 = HEAP32[i16 >> 2] | 0;
     if (!(i1 & 512)) HEAP16[i12 + 10 >> 1] = i11;
     do if (HEAP32[HEAP32[i16 + 36 >> 2] >> 2] | 0) {
      i1 = _FT_MulDiv(HEAPU16[i12 + 10 >> 1] | 0, 72e3, Math_imul(HEAP32[i13 + 20 >> 2] | 0, HEAP32[i13 + 16 >> 2] | 0) | 0) | 0;
      i2 = i12 + 8 | 0;
      if ((HEAP16[i2 >> 1] | 0) == (i1 & 65535) << 16 >> 16) {
       i1 = HEAP32[i16 >> 2] | 0;
       break;
      }
      HEAP16[i2 >> 1] = i1;
      if ((HEAP32[i16 + 28 >> 2] | 0) == -1) {
       i12 = (HEAP32[i13 + 64 >> 2] | 0) + -1 | 0;
       HEAP32[i13 + 139396 + (i12 >>> 5 << 2) >> 2] = 1 << (i12 & 31) | HEAP32[i13 + 139396 + (i12 >>> 5 << 2) >> 2];
      } else {
       i12 = HEAP32[i12 + 4 >> 2] | 0;
       HEAP32[i13 + 132 + (i12 >> 5 << 2) >> 2] = 1 << (i12 & 31) | HEAP32[i13 + 132 + (i12 >> 5 << 2) >> 2];
      }
      i1 = HEAP32[i16 >> 2] | 4096;
      HEAP32[i16 >> 2] = i1;
      HEAP16[i13 + 278660 >> 1] = 1;
     } while (0);
     HEAP32[i16 >> 2] = i1 | 1024;
     break L7;
    }
   } while (0);
   HEAP32[i15 >> 2] = 182;
   i2 = i16;
   i1 = 182;
   break L1;
  } while (0);
  i1 = HEAP32[i15 >> 2] | 0;
  i10 = 193;
 } while (0);
 do if ((i10 | 0) == 193) if (!i1) {
  i16 = 0;
  STACKTOP = i15;
  return i16 | 0;
 } else {
  i2 = i16;
  break;
 } while (0);
 if (!(HEAP32[i2 >> 2] & 64)) {
  i16 = i1;
  STACKTOP = i15;
  return i16 | 0;
 }
 _ft_mem_free(i14, HEAP32[i16 + 24 >> 2] | 0);
 HEAP32[i16 + 24 >> 2] = 0;
 i16 = HEAP32[i15 >> 2] | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _load_truetype_glyph(i25, i10, i22, i9) {
 i25 = i25 | 0;
 i10 = i10 | 0;
 i22 = i22 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i27 = HEAP32[i25 >> 2] | 0;
 i23 = HEAP32[i25 + 12 >> 2] | 0;
 HEAP32[i28 + 48 >> 2] = 0;
 if (i22 >>> 0 > 1 ? (HEAPU16[i27 + 290 >> 1] | 0) >>> 0 < i22 >>> 0 : 0) {
  i27 = 21;
  STACKTOP = i28;
  return i27 | 0;
 }
 if ((HEAP32[i27 + 16 >> 2] | 0) >>> 0 <= i10 >>> 0) {
  i27 = 16;
  STACKTOP = i28;
  return i27 | 0;
 }
 HEAP32[i25 + 20 >> 2] = i10;
 if (!(HEAP32[i25 + 16 >> 2] & 1)) {
  i12 = HEAP32[i25 + 4 >> 2] | 0;
  i11 = HEAP32[i12 + 48 >> 2] | 0;
  i12 = HEAP32[i12 + 52 >> 2] | 0;
 } else {
  i11 = 65536;
  i12 = 65536;
 }
 HEAP16[i28 + 56 >> 1] = 0;
 HEAP16[i28 + 52 >> 1] = 0;
 HEAP16[i28 + 74 >> 1] = 0;
 HEAP16[i28 + 72 >> 1] = 0;
 FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i27 + 532 >> 2] | 0) + 156 >> 2] & 63](i27, 0, i10, i28 + 56 | 0, i28 + 74 | 0) | 0;
 if (!(HEAP8[i27 + 296 >> 0] | 0)) {
  HEAP16[i28 + 52 >> 1] = 0;
  i3 = HEAP16[i27 + 68 >> 1] | 0;
  HEAP16[i28 + 72 >> 1] = i3;
  i2 = 0;
 } else {
  FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i27 + 532 >> 2] | 0) + 156 >> 2] & 63](i27, 1, i10, i28 + 52 | 0, i28 + 72 | 0) | 0;
  i2 = HEAP16[i28 + 52 >> 1] | 0;
  i3 = HEAP16[i28 + 72 >> 1] | 0;
 }
 HEAP32[i25 + 52 >> 2] = HEAP16[i28 + 56 >> 1];
 i1 = HEAPU16[i28 + 74 >> 1] | 0;
 HEAP32[i25 + 56 >> 2] = i1;
 HEAP32[i25 + 176 >> 2] = i2 << 16 >> 16;
 HEAP32[i25 + 180 >> 2] = i3 & 65535;
 if (!(HEAP8[i25 + 64 >> 0] | 0)) {
  HEAP8[i25 + 64 >> 0] = 1;
  HEAP32[i25 + 60 >> 2] = i1;
 }
 i1 = HEAP32[(HEAP32[i27 + 128 >> 2] | 0) + 52 >> 2] | 0;
 do if (i1) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 >> 2] >> 2] & 127](HEAP32[i1 + 4 >> 2] | 0, i10, i28 + 40 | 0) | 0;
  if (!i1) {
   i1 = HEAP32[i28 + 40 + 4 >> 2] | 0;
   HEAP32[i25 + 28 >> 2] = i1;
   i2 = i28;
   i3 = i2 + 40 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i3 | 0));
   _FT_Stream_OpenMemory(i28, HEAP32[i28 + 40 >> 2] | 0, i1);
   HEAP32[i25 + 24 >> 2] = i28;
   i21 = i25 + 28 | 0;
   i24 = 1;
   i3 = 0;
   break;
  } else {
   i27 = i1;
   STACKTOP = i28;
   return i27 | 0;
  }
 } else {
  i21 = i25 + 28 | 0;
  i24 = 0;
  i3 = _tt_face_get_location(i27, i10, i25 + 28 | 0) | 0;
 } while (0);
 i1 = HEAP32[i21 >> 2] | 0;
 do if ((i1 | 0) > 0) {
  i2 = HEAP32[i25 + 84 >> 2] | 0;
  if ((i2 | 0) == 0 ? (HEAP32[(HEAP32[i27 + 128 >> 2] | 0) + 52 >> 2] | 0) == 0 : 0) {
   i1 = 8;
   break;
  }
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i27 + 512 >> 2] & 63](i25, i10, i2 + i3 | 0, i1) | 0;
  if (!i1) {
   i1 = FUNCTION_TABLE_ii[HEAP32[i27 + 520 >> 2] & 63](i25) | 0;
   if (i9 << 24 >> 24 == 0 & (i1 | 0) == 0) {
    i1 = HEAP32[i21 >> 2] | 0;
    i8 = 1;
    i26 = 21;
   } else i26 = 125;
  }
 } else {
  i8 = 0;
  i26 = 21;
 } while (0);
 L32 : do if ((i26 | 0) == 21) {
  do if ((i1 | 0) != 0 ? (HEAP16[i25 + 32 >> 1] | 0) != 0 : 0) {
   i1 = HEAP32[i25 + 52 >> 2] | 0;
   i3 = (HEAP32[i25 + 36 >> 2] | 0) - i1 | 0;
   HEAP32[i25 + 68 >> 2] = i3;
   HEAP32[i25 + 72 >> 2] = 0;
   i2 = HEAP32[i25 + 56 >> 2] | 0;
   HEAP32[i25 + 76 >> 2] = i2 + i3;
   HEAP32[i25 + 80 >> 2] = 0;
   HEAP32[i25 + 184 >> 2] = 0;
   i3 = (HEAP32[i25 + 48 >> 2] | 0) + (HEAP32[i25 + 176 >> 2] | 0) | 0;
   HEAP32[i25 + 188 >> 2] = i3;
   HEAP32[i25 + 192 >> 2] = 0;
   HEAP32[i25 + 196 >> 2] = i3 - (HEAP32[i25 + 180 >> 2] | 0);
   i3 = HEAP32[(HEAP32[(HEAP32[i25 >> 2] | 0) + 128 >> 2] | 0) + 52 >> 2] | 0;
   if ((((i3 | 0) != 0 ? (i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] | 0, (i6 | 0) != 0) : 0) ? (HEAP32[i28 + 56 >> 2] = i1, HEAP32[i28 + 56 + 4 >> 2] = 0, HEAP32[i28 + 56 + 8 >> 2] = i2, HEAP32[i28 + 56 + 12 >> 2] = 0, (FUNCTION_TABLE_iiiii[i6 & 63](HEAP32[i3 + 4 >> 2] | 0, i10, 0, i28 + 56 | 0) | 0) == 0) : 0) ? (i7 = HEAP32[i28 + 56 + 8 >> 2] | 0, HEAP32[i25 + 52 >> 2] = HEAP32[i28 + 56 >> 2] << 16 >> 16, HEAP32[i25 + 56 >> 2] = i7 & 65535, HEAP32[i25 + 176 >> 2] = 0, HEAP32[i25 + 180 >> 2] = 0, (HEAP8[i25 + 64 >> 0] | 0) == 0) : 0) {
    HEAP8[i25 + 64 >> 0] = 1;
    HEAP32[i25 + 60 >> 2] = i7 & 65535;
   }
   i1 = HEAP16[i25 + 32 >> 1] | 0;
   if (i1 << 16 >> 16 > 0) {
    i1 = FUNCTION_TABLE_ii[HEAP32[i27 + 524 >> 2] & 63](i25) | 0;
    if (i1) break;
    FUNCTION_TABLE_vi[HEAP32[i27 + 516 >> 2] & 127](i25);
    i5 = HEAP32[i25 + 12 >> 2] | 0;
    i6 = HEAP16[i5 + 58 >> 1] | 0;
    i1 = HEAP32[i25 + 68 + 4 >> 2] | 0;
    i2 = (HEAP32[i5 + 60 >> 2] | 0) + (i6 << 16 >> 16 << 3) | 0;
    HEAP32[i2 >> 2] = HEAP32[i25 + 68 >> 2];
    HEAP32[i2 + 4 >> 2] = i1;
    i2 = HEAP32[i25 + 76 + 4 >> 2] | 0;
    i1 = (HEAP32[i5 + 60 >> 2] | 0) + ((i6 << 16 >> 16) + 1 << 3) | 0;
    HEAP32[i1 >> 2] = HEAP32[i25 + 76 >> 2];
    HEAP32[i1 + 4 >> 2] = i2;
    i1 = HEAP32[i25 + 184 + 4 >> 2] | 0;
    i2 = (HEAP32[i5 + 60 >> 2] | 0) + ((i6 << 16 >> 16) + 2 << 3) | 0;
    HEAP32[i2 >> 2] = HEAP32[i25 + 184 >> 2];
    HEAP32[i2 + 4 >> 2] = i1;
    i2 = HEAP32[i25 + 192 + 4 >> 2] | 0;
    i1 = (HEAP32[i5 + 60 >> 2] | 0) + ((i6 << 16 >> 16) + 3 << 3) | 0;
    HEAP32[i1 >> 2] = HEAP32[i25 + 192 >> 2];
    HEAP32[i1 + 4 >> 2] = i2;
    HEAP8[(HEAP32[i5 + 64 >> 2] | 0) + (i6 << 16 >> 16) >> 0] = 0;
    HEAP8[(HEAP32[i5 + 64 >> 2] | 0) + ((i6 << 16 >> 16) + 1) >> 0] = 0;
    HEAP8[(HEAP32[i5 + 64 >> 2] | 0) + ((i6 << 16 >> 16) + 2) >> 0] = 0;
    HEAP8[(HEAP32[i5 + 64 >> 2] | 0) + ((i6 << 16 >> 16) + 3) >> 0] = 0;
    i1 = HEAP32[i25 >> 2] | 0;
    i2 = HEAP8[i1 + 708 >> 0] | 0;
    if (i2 << 24 >> 24) {
     i4 = HEAP32[i1 + 100 >> 2] | 0;
     i1 = _TT_Vary_Get_Glyph_Deltas(HEAP32[i1 + 104 >> 2] | 0, i2, HEAP32[i1 + 712 >> 2] | 0, HEAP32[i25 + 20 >> 2] | 0, i28 + 56 | 0, (i6 << 16 >> 16) + 4 | 0) | 0;
     if (i1) break L32;
     if (i6 << 16 >> 16 > -4) {
      i1 = HEAP32[i28 + 56 >> 2] | 0;
      i2 = HEAP32[i5 + 60 >> 2] | 0;
      i3 = 0;
      do {
       i22 = i2 + (i3 << 3) | 0;
       HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + (HEAP32[i1 + (i3 << 3) >> 2] | 0);
       i22 = i2 + (i3 << 3) + 4 | 0;
       HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + (HEAP32[i1 + (i3 << 3) + 4 >> 2] | 0);
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < ((i6 << 16 >> 16) + 4 | 0));
     } else i1 = HEAP32[i28 + 56 >> 2] | 0;
     _ft_mem_free(i4, i1);
     HEAP32[i28 + 56 >> 2] = 0;
    }
    i1 = HEAP32[i25 + 16 >> 2] | 0;
    if (!(i1 & 2)) {
     i1 = HEAP16[i5 + 58 >> 1] | 0;
     HEAP16[i25 + 132 >> 1] = i1;
     HEAP16[i25 + 134 >> 1] = HEAP16[i5 + 56 >> 1] | 0;
     HEAP32[i25 + 136 >> 2] = HEAP32[i5 + 76 >> 2];
     i22 = HEAP32[i5 + 60 >> 2] | 0;
     HEAP32[i25 + 140 >> 2] = i22;
     i21 = HEAP32[i5 + 80 >> 2] | 0;
     HEAP32[i25 + 144 >> 2] = i21;
     HEAP32[i25 + 148 >> 2] = HEAP32[i5 + 64 >> 2];
     HEAP32[i25 + 152 >> 2] = HEAP32[i5 + 68 >> 2];
     HEAP16[i25 + 156 >> 1] = 0;
     _memcpy(i21 | 0, i22 | 0, ((i1 & 65535) << 3) + 32 | 0) | 0;
     i1 = HEAP32[i25 + 16 >> 2] | 0;
    }
    if (!(i1 & 1)) {
     i2 = HEAP32[i5 + 60 >> 2] | 0;
     i4 = HEAP32[i25 + 4 >> 2] | 0;
     i3 = HEAP32[i4 + 48 >> 2] | 0;
     i4 = HEAP32[i4 + 52 >> 2] | 0;
     if (i6 << 16 >> 16 > -4) {
      i1 = i2;
      do {
       HEAP32[i1 >> 2] = _FT_MulFix(HEAP32[i1 >> 2] | 0, i3) | 0;
       i22 = i1 + 4 | 0;
       HEAP32[i22 >> 2] = _FT_MulFix(HEAP32[i22 >> 2] | 0, i4) | 0;
       i1 = i1 + 8 | 0;
      } while (i1 >>> 0 < (i2 + ((i6 << 16 >> 16) + 4 << 3) | 0) >>> 0);
      i1 = HEAP32[i25 + 16 >> 2] | 0;
      i2 = HEAP32[i5 + 60 >> 2] | 0;
     }
     i22 = i2 + (i6 << 16 >> 16 << 3) | 0;
     i21 = HEAP32[i22 + 4 >> 2] | 0;
     HEAP32[i25 + 68 >> 2] = HEAP32[i22 >> 2];
     HEAP32[i25 + 68 + 4 >> 2] = i21;
     i21 = (HEAP32[i5 + 60 >> 2] | 0) + ((i6 << 16 >> 16) + 1 << 3) | 0;
     i22 = HEAP32[i21 + 4 >> 2] | 0;
     HEAP32[i25 + 76 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i25 + 76 + 4 >> 2] = i22;
     i22 = (HEAP32[i5 + 60 >> 2] | 0) + ((i6 << 16 >> 16) + 2 << 3) | 0;
     i21 = HEAP32[i22 + 4 >> 2] | 0;
     HEAP32[i25 + 184 >> 2] = HEAP32[i22 >> 2];
     HEAP32[i25 + 184 + 4 >> 2] = i21;
     i21 = (HEAP32[i5 + 60 >> 2] | 0) + ((i6 << 16 >> 16) + 3 << 3) | 0;
     i22 = HEAP32[i21 + 4 >> 2] | 0;
     HEAP32[i25 + 192 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i25 + 192 + 4 >> 2] = i22;
    }
    if (!(i1 & 2)) {
     HEAP16[i25 + 132 >> 1] = (HEAPU16[i25 + 132 >> 1] | 0) + 4;
     i1 = _TT_Hint_Glyph(i25, 0) | 0;
     if (i1) break L32;
    }
    _FT_GlyphLoader_Add(i23);
    i1 = 0;
    break L32;
   }
   if (i1 << 16 >> 16 == -1) {
    i20 = HEAP16[i23 + 22 >> 1] | 0;
    i19 = HEAP16[i23 + 20 >> 1] | 0;
    i1 = FUNCTION_TABLE_ii[HEAP32[i27 + 528 >> 2] & 63](i25) | 0;
    if (!i1) {
     i18 = HEAP32[i25 + 168 >> 2] | 0;
     FUNCTION_TABLE_vi[HEAP32[i27 + 516 >> 2] & 127](i25);
     i1 = HEAP8[i27 + 708 >> 0] | 0;
     if (i1 << 24 >> 24) {
      i5 = HEAP32[i27 + 100 >> 2] | 0;
      i1 = _TT_Vary_Get_Glyph_Deltas(HEAP32[i27 + 104 >> 2] | 0, i1, HEAP32[i27 + 712 >> 2] | 0, i10, i28 + 48 | 0, (HEAP32[i23 + 84 >> 2] | 0) + 4 | 0) | 0;
      if (i1) break L32;
      i1 = HEAP32[i23 + 84 >> 2] | 0;
      if ((i1 | 0) > 0) {
       i2 = HEAP32[i28 + 48 >> 2] | 0;
       i3 = 0;
       i4 = (HEAP32[i23 + 88 >> 2] | 0) + (HEAP32[i23 + 48 >> 2] << 5) | 0;
       while (1) {
        if (HEAP16[i4 + 4 >> 1] & 2) {
         i17 = i4 + 8 | 0;
         HEAP32[i17 >> 2] = (HEAP32[i2 + (i3 << 3) >> 2] << 16 >> 16) + (HEAP32[i17 >> 2] | 0);
         i17 = i4 + 12 | 0;
         HEAP32[i17 >> 2] = (HEAP32[i2 + (i3 << 3) + 4 >> 2] << 16 >> 16) + (HEAP32[i17 >> 2] | 0);
        }
        i3 = i3 + 1 | 0;
        if ((i3 | 0) == (i1 | 0)) break; else i4 = i4 + 32 | 0;
       }
      } else {
       i2 = HEAP32[i28 + 48 >> 2] | 0;
       i1 = 0;
      }
      HEAP32[i25 + 68 >> 2] = (HEAP32[i25 + 68 >> 2] | 0) + (HEAP32[i2 + (i1 << 3) >> 2] | 0);
      HEAP32[i25 + 72 >> 2] = (HEAP32[i25 + 72 >> 2] | 0) + (HEAP32[i2 + (i1 << 3) + 4 >> 2] | 0);
      i17 = i1 + 1 | 0;
      HEAP32[i25 + 76 >> 2] = (HEAP32[i25 + 76 >> 2] | 0) + (HEAP32[i2 + (i17 << 3) >> 2] | 0);
      HEAP32[i25 + 80 >> 2] = (HEAP32[i25 + 80 >> 2] | 0) + (HEAP32[i2 + (i17 << 3) + 4 >> 2] | 0);
      i17 = i1 + 2 | 0;
      HEAP32[i25 + 184 >> 2] = (HEAP32[i25 + 184 >> 2] | 0) + (HEAP32[i2 + (i17 << 3) >> 2] | 0);
      HEAP32[i25 + 188 >> 2] = (HEAP32[i25 + 188 >> 2] | 0) + (HEAP32[i2 + (i17 << 3) + 4 >> 2] | 0);
      i17 = i1 + 3 | 0;
      HEAP32[i25 + 192 >> 2] = (HEAP32[i25 + 192 >> 2] | 0) + (HEAP32[i2 + (i17 << 3) >> 2] | 0);
      HEAP32[i25 + 196 >> 2] = (HEAP32[i25 + 196 >> 2] | 0) + (HEAP32[i2 + (i17 << 3) + 4 >> 2] | 0);
      _ft_mem_free(i5, i2);
      HEAP32[i28 + 48 >> 2] = 0;
     }
     i1 = HEAP32[i25 + 16 >> 2] | 0;
     if (!(i1 & 1)) {
      HEAP32[i25 + 68 >> 2] = _FT_MulFix(HEAP32[i25 + 68 >> 2] | 0, i11) | 0;
      HEAP32[i25 + 76 >> 2] = _FT_MulFix(HEAP32[i25 + 76 >> 2] | 0, i11) | 0;
      HEAP32[i25 + 188 >> 2] = _FT_MulFix(HEAP32[i25 + 188 >> 2] | 0, i12) | 0;
      HEAP32[i25 + 196 >> 2] = _FT_MulFix(HEAP32[i25 + 196 >> 2] | 0, i12) | 0;
      i1 = HEAP32[i25 + 16 >> 2] | 0;
     }
     if (i1 & 1024) {
      _FT_GlyphLoader_Add(i23);
      HEAP32[(HEAP32[i25 + 8 >> 2] | 0) + 72 >> 2] = 1668246896;
      i1 = 0;
      break L32;
     }
     i10 = HEAP32[i23 + 84 >> 2] | 0;
     i11 = HEAP32[i23 + 48 >> 2] | 0;
     i16 = HEAP32[i25 + 24 >> 2] | 0;
     i17 = HEAP32[i21 >> 2] | 0;
     _FT_GlyphLoader_Add(i23);
     if (!i10) {
      i2 = i20 << 16 >> 16;
      i1 = 0;
     } else {
      i14 = 0;
      do {
       i15 = i14 + i11 | 0;
       i2 = HEAP32[i25 + 68 >> 2] | 0;
       i3 = HEAP32[i25 + 68 + 4 >> 2] | 0;
       i4 = HEAP32[i25 + 76 >> 2] | 0;
       i5 = HEAP32[i25 + 76 + 4 >> 2] | 0;
       i6 = HEAP32[i25 + 184 >> 2] | 0;
       i7 = HEAP32[i25 + 184 + 4 >> 2] | 0;
       i8 = HEAP32[i25 + 192 >> 2] | 0;
       i9 = HEAP32[i25 + 192 + 4 >> 2] | 0;
       i12 = HEAP16[i23 + 22 >> 1] | 0;
       i1 = _load_truetype_glyph(i25, HEAP32[(HEAP32[i23 + 52 >> 2] | 0) + (i15 << 5) >> 2] | 0, i22 + 1 | 0, 0) | 0;
       if (i1) break L32;
       i13 = HEAP32[i23 + 52 >> 2] | 0;
       if (!(HEAP16[i13 + (i15 << 5) + 4 >> 1] & 512)) {
        HEAP32[i25 + 68 >> 2] = i2;
        HEAP32[i25 + 68 + 4 >> 2] = i3;
        HEAP32[i25 + 76 >> 2] = i4;
        HEAP32[i25 + 76 + 4 >> 2] = i5;
        HEAP32[i25 + 184 >> 2] = i6;
        HEAP32[i25 + 184 + 4 >> 2] = i7;
        HEAP32[i25 + 192 >> 2] = i8;
        HEAP32[i25 + 192 + 4 >> 2] = i9;
       }
       i5 = HEAP16[i23 + 22 >> 1] | 0;
       L104 : do if (i5 << 16 >> 16 != i12 << 16 >> 16) {
        i3 = HEAP32[i25 + 12 >> 2] | 0;
        i6 = HEAP32[i3 + 24 >> 2] | 0;
        i7 = HEAP16[i3 + 22 >> 1] | 0;
        i4 = HEAP16[i13 + (i15 << 5) + 4 >> 1] | 0;
        if ((i7 & 65535) > (i12 & 65535) & ((i4 & 200) == 0 ^ 1)) {
         i1 = i12 << 16 >> 16;
         do {
          _FT_Vector_Transform(i6 + (i1 << 3) | 0, i13 + (i15 << 5) + 16 | 0);
          i1 = i1 + 1 | 0;
         } while ((i1 | 0) != (i7 << 16 >> 16 | 0));
         i1 = HEAP16[i13 + (i15 << 5) + 4 >> 1] | 0;
        } else i1 = i4;
        i1 = i1 & 65535;
        i9 = HEAP32[i13 + (i15 << 5) + 8 >> 2] | 0;
        i2 = HEAP32[i13 + (i15 << 5) + 12 >> 2] | 0;
        do if (!(i1 & 2)) {
         if (!((i9 + (i20 << 16 >> 16) | 0) >>> 0 < i12 << 16 >> 16 >>> 0 ? (i2 + (i12 << 16 >> 16) | 0) >>> 0 < i7 << 16 >> 16 >>> 0 : 0)) break L104;
         i8 = HEAP32[i3 + 24 >> 2] | 0;
         i1 = (HEAP32[i8 + (i9 + (i20 << 16 >> 16) << 3) >> 2] | 0) - (HEAP32[i8 + (i2 + (i12 << 16 >> 16) << 3) >> 2] | 0) | 0;
         i2 = (HEAP32[i8 + (i9 + (i20 << 16 >> 16) << 3) + 4 >> 2] | 0) - (HEAP32[i8 + (i2 + (i12 << 16 >> 16) << 3) + 4 >> 2] | 0) | 0;
        } else {
         if (!(i2 | i9)) break L104;
         if ((i4 & 200) == 0 | (i1 & 2048 | 0) == 0) i1 = i9; else {
          i1 = HEAP32[i13 + (i15 << 5) + 16 >> 2] | 0;
          i1 = _FT_MulFix(i1, i1) | 0;
          i8 = HEAP32[i13 + (i15 << 5) + 20 >> 2] | 0;
          i1 = _FT_SqrtFixed((_FT_MulFix(i8, i8) | 0) + i1 | 0) | 0;
          i8 = HEAP32[i13 + (i15 << 5) + 28 >> 2] | 0;
          i8 = _FT_MulFix(i8, i8) | 0;
          i4 = HEAP32[i13 + (i15 << 5) + 24 >> 2] | 0;
          i8 = _FT_SqrtFixed((_FT_MulFix(i4, i4) | 0) + i8 | 0) | 0;
          i1 = _FT_MulFix(i9, i1) | 0;
          i2 = _FT_MulFix(i2, i8) | 0;
         }
         if (HEAP32[i25 + 16 >> 2] & 1) break;
         i4 = HEAP32[i25 + 4 >> 2] | 0;
         i8 = HEAP32[i4 + 52 >> 2] | 0;
         i1 = _FT_MulFix(i1, HEAP32[i4 + 48 >> 2] | 0) | 0;
         i2 = _FT_MulFix(i2, i8) | 0;
         if (!(HEAP16[i13 + (i15 << 5) + 4 >> 1] & 4)) break;
         i1 = i1 + 32 & -64;
         i2 = i2 + 32 & -64;
        } while (0);
        if (!(i1 | i2)) break;
        if (!((i1 | 0) == 0 ? 1 : i7 << 16 >> 16 == i12 << 16 >> 16)) {
         i3 = 0;
         do {
          i8 = i6 + (i3 + (i12 << 16 >> 16) << 3) | 0;
          HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i1;
          i3 = i3 + 1 | 0;
         } while ((i3 | 0) != ((i7 << 16 >> 16) - (i12 << 16 >> 16) | 0));
        }
        if ((i2 | 0) == 0 ? 1 : i7 << 16 >> 16 == i12 << 16 >> 16) break; else i1 = 0;
        do {
         i8 = i6 + (i1 + (i12 << 16 >> 16) << 3) + 4 | 0;
         HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i2;
         i1 = i1 + 1 | 0;
        } while ((i1 | 0) != ((i7 << 16 >> 16) - (i12 << 16 >> 16) | 0));
       } while (0);
       i14 = i14 + 1 | 0;
      } while (i14 >>> 0 < i10 >>> 0);
      i2 = i5 << 16 >> 16;
      i1 = i13 + (i15 << 5) | 0;
     }
     HEAP32[i25 + 24 >> 2] = i16;
     HEAP32[i21 >> 2] = i17;
     HEAP32[i25 + 168 >> 2] = i18;
     if (HEAP32[i25 + 16 >> 2] & 2) {
      i1 = 0;
      break L32;
     }
     if (!(i2 >>> 0 > i20 << 16 >> 16 >>> 0 ? (HEAP16[i1 + 4 >> 1] & 256) != 0 : 0)) {
      i1 = 0;
      break L32;
     }
     i2 = HEAP32[i25 + 12 >> 2] | 0;
     i1 = HEAP16[i2 + 22 >> 1] | 0;
     do if (!((i1 << 16 >> 16) + 4 | 0)) i26 = 106; else {
      if (((i1 << 16 >> 16) + 4 + (i1 << 16 >> 16) + (HEAP16[i2 + 58 >> 1] | 0) | 0) >>> 0 <= (HEAP32[i2 + 4 >> 2] | 0) >>> 0) {
       i26 = 106;
       break;
      }
      i23 = _FT_GlyphLoader_CheckPoints(i2, (i1 << 16 >> 16) + 4 | 0, 0) | 0;
      HEAP32[i28 + 52 >> 2] = i23;
      if (i23) break;
      i1 = HEAP16[i2 + 22 >> 1] | 0;
      i26 = 109;
     } while (0);
     if ((i26 | 0) == 106) {
      HEAP32[i28 + 52 >> 2] = 0;
      i26 = 109;
     }
     do if ((i26 | 0) == 109) {
      i4 = HEAP32[i25 + 68 + 4 >> 2] | 0;
      i23 = (HEAP32[i2 + 24 >> 2] | 0) + (i1 << 16 >> 16 << 3) | 0;
      HEAP32[i23 >> 2] = HEAP32[i25 + 68 >> 2];
      HEAP32[i23 + 4 >> 2] = i4;
      i23 = HEAP32[i25 + 76 + 4 >> 2] | 0;
      i4 = (HEAP32[i2 + 24 >> 2] | 0) + ((HEAP16[i2 + 22 >> 1] | 0) + 1 << 3) | 0;
      HEAP32[i4 >> 2] = HEAP32[i25 + 76 >> 2];
      HEAP32[i4 + 4 >> 2] = i23;
      i4 = HEAP32[i25 + 184 + 4 >> 2] | 0;
      i23 = (HEAP32[i2 + 24 >> 2] | 0) + ((HEAP16[i2 + 22 >> 1] | 0) + 2 << 3) | 0;
      HEAP32[i23 >> 2] = HEAP32[i25 + 184 >> 2];
      HEAP32[i23 + 4 >> 2] = i4;
      i23 = HEAP32[i25 + 192 + 4 >> 2] | 0;
      i4 = (HEAP32[i2 + 24 >> 2] | 0) + ((HEAP16[i2 + 22 >> 1] | 0) + 3 << 3) | 0;
      HEAP32[i4 >> 2] = HEAP32[i25 + 192 >> 2];
      HEAP32[i4 + 4 >> 2] = i23;
      HEAP8[(HEAP32[i2 + 28 >> 2] | 0) + (HEAP16[i2 + 22 >> 1] | 0) >> 0] = 0;
      HEAP8[(HEAP32[i2 + 28 >> 2] | 0) + ((HEAP16[i2 + 22 >> 1] | 0) + 1) >> 0] = 0;
      HEAP8[(HEAP32[i2 + 28 >> 2] | 0) + ((HEAP16[i2 + 22 >> 1] | 0) + 2) >> 0] = 0;
      HEAP8[(HEAP32[i2 + 28 >> 2] | 0) + ((HEAP16[i2 + 22 >> 1] | 0) + 3) >> 0] = 0;
      i4 = HEAP32[i25 + 24 >> 2] | 0;
      i23 = _FT_Stream_Seek(i4, HEAP32[i25 + 168 >> 2] | 0) | 0;
      HEAP32[i28 + 52 >> 2] = i23;
      if (i23) break;
      i5 = _FT_Stream_ReadUShort(i4, i28 + 52 | 0) | 0;
      if (HEAP32[i28 + 52 >> 2] | 0) break;
      if ((i5 & 65535) > (HEAPU16[(HEAP32[i25 >> 2] | 0) + 286 >> 1] | 0)) {
       if ((i5 & 65535 | 0) > (HEAP32[i21 >> 2] | 0)) break;
       i1 = HEAP32[i25 + 160 >> 2] | 0;
       i2 = HEAP32[i1 + 388 >> 2] | 0;
       if (i2 >>> 0 < (i5 & 65535) >>> 0) {
        HEAP32[i1 + 392 >> 2] = _ft_mem_realloc(HEAP32[i1 + 8 >> 2] | 0, 1, i2, i5 & 65535, HEAP32[i1 + 392 >> 2] | 0, i28 + 56 | 0) | 0;
        i1 = HEAP32[i28 + 56 >> 2] | 0;
        i3 = i1;
        i2 = (i1 | 0) == 0 ? i5 & 65535 : i2;
        i1 = HEAP32[i25 + 160 >> 2] | 0;
       } else i3 = 0;
       HEAP32[i28 + 52 >> 2] = i3;
       HEAP32[i1 + 388 >> 2] = i2 & 65535;
       if (!(HEAP32[i28 + 52 >> 2] | 0)) i2 = i25 + 160 | 0; else break;
      } else {
       if (!(i5 << 16 >> 16)) break;
       i2 = i25 + 160 | 0;
       i1 = HEAP32[i25 + 160 >> 2] | 0;
      }
      i23 = _FT_Stream_Read(i4, HEAP32[i1 + 392 >> 2] | 0, i5 & 65535) | 0;
      HEAP32[i28 + 52 >> 2] = i23;
      if (i23) break;
      i23 = HEAP32[i25 + 8 >> 2] | 0;
      HEAP32[i23 + 136 >> 2] = HEAP32[(HEAP32[i2 >> 2] | 0) + 392 >> 2];
      HEAP32[i23 + 140 >> 2] = i5 & 65535;
      i23 = HEAP32[i25 + 12 >> 2] | 0;
      i1 = (HEAPU16[i23 + 22 >> 1] | 0) - (i20 << 16 >> 16) | 0;
      HEAP16[i25 + 132 >> 1] = i1;
      HEAP16[i25 + 134 >> 1] = (HEAPU16[i23 + 20 >> 1] | 0) - i19;
      HEAP32[i25 + 136 >> 2] = (HEAP32[i23 + 40 >> 2] | 0) + (i20 << 16 >> 16 << 3);
      HEAP32[i25 + 140 >> 2] = (HEAP32[i23 + 24 >> 2] | 0) + (i20 << 16 >> 16 << 3);
      HEAP32[i25 + 144 >> 2] = (HEAP32[i23 + 44 >> 2] | 0) + (i20 << 16 >> 16 << 3);
      i2 = HEAP32[i23 + 28 >> 2] | 0;
      HEAP32[i25 + 148 >> 2] = i2 + (i20 << 16 >> 16);
      HEAP32[i25 + 152 >> 2] = (HEAP32[i23 + 32 >> 2] | 0) + (i19 << 1);
      HEAP16[i25 + 156 >> 1] = i20;
      do if ((i1 & 65535) >>> 0 > i20 << 16 >> 16 >>> 0) {
       HEAP8[i2 + (i20 << 16 >> 16 << 1) >> 0] = HEAPU8[i2 + (i20 << 16 >> 16 << 1) >> 0] & 231;
       i1 = HEAPU16[i25 + 132 >> 1] | 0;
       if (((i20 << 16 >> 16) + 1 | 0) >>> 0 < i1 >>> 0) i2 = (i20 << 16 >> 16) + 1 | 0; else break;
       do {
        i1 = (HEAP32[i25 + 148 >> 2] | 0) + i2 | 0;
        HEAP8[i1 >> 0] = HEAPU8[i1 >> 0] & 231;
        i2 = i2 + 1 | 0;
        i1 = HEAPU16[i25 + 132 >> 1] | 0;
       } while (i2 >>> 0 < i1 >>> 0);
      } else i1 = i1 & 65535; while (0);
      HEAP16[i25 + 132 >> 1] = i1 + 4;
      _TT_Hint_Glyph(i25, 1) | 0;
     } while (0);
     i1 = 0;
     break L32;
    }
   } else i1 = 20;
  } else i26 = 23; while (0);
  do if ((i26 | 0) == 23) {
   HEAP32[i25 + 36 >> 2] = 0;
   HEAP32[i25 + 36 + 4 >> 2] = 0;
   HEAP32[i25 + 36 + 8 >> 2] = 0;
   HEAP32[i25 + 36 + 12 >> 2] = 0;
   if (!(i9 << 24 >> 24)) {
    i2 = HEAP32[i25 + 52 >> 2] | 0;
    HEAP32[i25 + 68 >> 2] = 0 - i2;
    HEAP32[i25 + 72 >> 2] = 0;
    i3 = HEAP32[i25 + 56 >> 2] | 0;
    HEAP32[i25 + 76 >> 2] = i3 - i2;
    HEAP32[i25 + 80 >> 2] = 0;
    HEAP32[i25 + 184 >> 2] = 0;
    i1 = HEAP32[i25 + 176 >> 2] | 0;
    HEAP32[i25 + 188 >> 2] = i1;
    HEAP32[i25 + 192 >> 2] = 0;
    HEAP32[i25 + 196 >> 2] = i1 - (HEAP32[i25 + 180 >> 2] | 0);
    i1 = HEAP32[(HEAP32[(HEAP32[i25 >> 2] | 0) + 128 >> 2] | 0) + 52 >> 2] | 0;
    if ((((i1 | 0) != 0 ? (i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0, (i4 | 0) != 0) : 0) ? (HEAP32[i28 + 56 >> 2] = i2, HEAP32[i28 + 56 + 4 >> 2] = 0, HEAP32[i28 + 56 + 8 >> 2] = i3, HEAP32[i28 + 56 + 12 >> 2] = 0, (FUNCTION_TABLE_iiiii[i4 & 63](HEAP32[i1 + 4 >> 2] | 0, i10, 0, i28 + 56 | 0) | 0) == 0) : 0) ? (i5 = HEAP32[i28 + 56 + 8 >> 2] | 0, HEAP32[i25 + 52 >> 2] = HEAP32[i28 + 56 >> 2] << 16 >> 16, HEAP32[i25 + 56 >> 2] = i5 & 65535, HEAP32[i25 + 176 >> 2] = 0, HEAP32[i25 + 180 >> 2] = 0, (HEAP8[i25 + 64 >> 0] | 0) == 0) : 0) {
     HEAP8[i25 + 64 >> 0] = 1;
     HEAP32[i25 + 60 >> 2] = i5 & 65535;
    }
    i1 = HEAP32[i25 >> 2] | 0;
    i2 = HEAP8[i1 + 708 >> 0] | 0;
    if (i2 << 24 >> 24) {
     i3 = HEAP32[i1 + 100 >> 2] | 0;
     i1 = _TT_Vary_Get_Glyph_Deltas(HEAP32[i1 + 104 >> 2] | 0, i2, HEAP32[i1 + 712 >> 2] | 0, i10, i28 + 48 | 0, 4) | 0;
     if (i1) break;
     i23 = HEAP32[i28 + 48 >> 2] | 0;
     HEAP32[i25 + 68 >> 2] = (HEAP32[i25 + 68 >> 2] | 0) + (HEAP32[i23 >> 2] | 0);
     HEAP32[i25 + 72 >> 2] = (HEAP32[i25 + 72 >> 2] | 0) + (HEAP32[i23 + 4 >> 2] | 0);
     HEAP32[i25 + 76 >> 2] = (HEAP32[i25 + 76 >> 2] | 0) + (HEAP32[i23 + 8 >> 2] | 0);
     HEAP32[i25 + 80 >> 2] = (HEAP32[i25 + 80 >> 2] | 0) + (HEAP32[i23 + 12 >> 2] | 0);
     HEAP32[i25 + 184 >> 2] = (HEAP32[i25 + 184 >> 2] | 0) + (HEAP32[i23 + 16 >> 2] | 0);
     HEAP32[i25 + 188 >> 2] = (HEAP32[i25 + 188 >> 2] | 0) + (HEAP32[i23 + 20 >> 2] | 0);
     HEAP32[i25 + 192 >> 2] = (HEAP32[i25 + 192 >> 2] | 0) + (HEAP32[i23 + 24 >> 2] | 0);
     HEAP32[i25 + 196 >> 2] = (HEAP32[i25 + 196 >> 2] | 0) + (HEAP32[i23 + 28 >> 2] | 0);
     _ft_mem_free(i3, i23);
     HEAP32[i28 + 48 >> 2] = 0;
    }
    if (!(HEAP32[i25 + 16 >> 2] & 1)) {
     HEAP32[i25 + 68 >> 2] = _FT_MulFix(HEAP32[i25 + 68 >> 2] | 0, i11) | 0;
     HEAP32[i25 + 76 >> 2] = _FT_MulFix(HEAP32[i25 + 76 >> 2] | 0, i11) | 0;
     HEAP32[i25 + 188 >> 2] = _FT_MulFix(HEAP32[i25 + 188 >> 2] | 0, i12) | 0;
     HEAP32[i25 + 196 >> 2] = _FT_MulFix(HEAP32[i25 + 196 >> 2] | 0, i12) | 0;
     i1 = 0;
    } else i1 = 0;
   } else i1 = 0;
  } while (0);
  if (i8 << 24 >> 24) i26 = 125;
 } while (0);
 if ((i26 | 0) == 125) FUNCTION_TABLE_vi[HEAP32[i27 + 516 >> 2] & 127](i25);
 if (!(i24 << 24 >> 24)) {
  i27 = i1;
  STACKTOP = i28;
  return i27 | 0;
 }
 i27 = HEAP32[(HEAP32[i27 + 128 >> 2] | 0) + 52 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i27 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i27 + 4 >> 2] | 0, i28 + 40 | 0);
 i27 = i1;
 STACKTOP = i28;
 return i27 | 0;
}

function _pfr_face_init(i18, i20, i19, i1, i2) {
 i18 = i18 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = _FT_Stream_Seek(i18, 0) | 0;
 if (!i1) {
  i1 = _FT_Stream_ReadFields(i18, 284636, i20 + 132 | 0) | 0;
  if (!i1) {
   HEAP32[i20 + 168 >> 2] = (HEAP32[i20 + 168 >> 2] | 0) + (HEAP32[i20 + 204 >> 2] << 16);
   HEAP32[i21 + 12 >> 2] = 0;
   if ((((HEAP32[i20 + 132 >> 2] | 0) == 1346785840 ? (HEAP32[i20 + 136 >> 2] | 0) >>> 0 <= 4 : 0) ? (HEAP32[i20 + 144 >> 2] | 0) >>> 0 >= 58 : 0) ? (HEAP32[i20 + 140 >> 2] | 0) == 3338 : 0) {
    i1 = _FT_Stream_Seek(i18, HEAP32[i20 + 152 >> 2] | 0) | 0;
    HEAP32[i21 + 20 >> 2] = i1;
    if (i1) {
     HEAP32[i21 + 12 >> 2] = i1;
     i20 = i1;
     STACKTOP = i21;
     return i20 | 0;
    }
    i1 = _FT_Stream_ReadUShort(i18, i21 + 20 | 0) | 0;
    i2 = HEAP32[i21 + 20 >> 2] | 0;
    i1 = (i2 | 0) == 0 ? i1 & 65535 : 0;
    HEAP32[i21 + 12 >> 2] = i2;
    if (i2) {
     i20 = i2;
     STACKTOP = i21;
     return i20 | 0;
    }
    HEAP32[i20 >> 2] = i1;
    if ((i19 | 0) < 0) {
     i20 = 0;
     STACKTOP = i21;
     return i20 | 0;
    }
    if ((i1 | 0) <= (i19 | 0)) {
     HEAP32[i21 + 12 >> 2] = 6;
     i20 = 6;
     STACKTOP = i21;
     return i20 | 0;
    }
    i8 = (HEAP32[i20 + 204 >> 2] | 0) == 0;
    i1 = _FT_Stream_Seek(i18, HEAP32[i20 + 152 >> 2] | 0) | 0;
    HEAP32[i21 + 20 >> 2] = i1;
    do if (!i1) {
     i2 = _FT_Stream_ReadUShort(i18, i21 + 20 | 0) | 0;
     i1 = HEAP32[i21 + 20 >> 2] | 0;
     if (!i1) if ((i2 & 65535) >>> 0 > i19 >>> 0) {
      i1 = _FT_Stream_Skip(i18, i19 * 5 | 0) | 0;
      HEAP32[i21 + 20 >> 2] = i1;
      if (!i1) {
       i7 = _FT_Stream_ReadUShort(i18, i21 + 20 | 0) | 0;
       i1 = HEAP32[i21 + 20 >> 2] | 0;
       if (!i1) {
        i2 = _FT_Stream_ReadUOffset(i18, i21 + 20 | 0) | 0;
        i1 = HEAP32[i21 + 20 >> 2] | 0;
        if (!i1) {
         HEAP32[i20 + 240 >> 2] = i7 & 65535;
         HEAP32[i20 + 244 >> 2] = i2;
         i1 = _FT_Stream_Seek(i18, i2) | 0;
         HEAP32[i21 + 20 >> 2] = i1;
         if (!i1) {
          i1 = _FT_Stream_EnterFrame(i18, i7 & 65535) | 0;
          HEAP32[i21 + 20 >> 2] = i1;
          if (i1) break;
          i9 = HEAP32[i18 + 32 >> 2] | 0;
          L32 : do if ((i7 & 65535) < 13) i17 = 53; else {
           HEAP32[i20 + 240 + 8 >> 2] = HEAPU8[i9 + 1 >> 0] << 8 | HEAP8[i9 >> 0] << 16 | HEAPU8[i9 + 2 >> 0];
           HEAP32[i20 + 240 + 12 >> 2] = HEAPU8[i9 + 4 >> 0] << 8 | HEAP8[i9 + 3 >> 0] << 16 | HEAPU8[i9 + 5 >> 0];
           HEAP32[i20 + 240 + 16 >> 2] = HEAPU8[i9 + 7 >> 0] << 8 | HEAP8[i9 + 6 >> 0] << 16 | HEAPU8[i9 + 8 >> 0];
           HEAP32[i20 + 240 + 20 >> 2] = HEAPU8[i9 + 10 >> 0] << 8 | HEAP8[i9 + 9 >> 0] << 16 | HEAPU8[i9 + 11 >> 0];
           i6 = HEAPU8[i9 + 12 >> 0] | 0;
           if (i6 & 4) i1 = (i6 & 3 | 0) == 0 ? i6 >>> 3 & 1 | 4 : (i6 >>> 3 & 1) + 1 | 0; else i1 = 0;
           if (i6 & 16) i1 = (i6 >>> 5 & 1) + 1 + i1 | 0;
           if ((i1 + 13 | 0) > (i7 & 65535 | 0)) {
            i17 = 53;
            break;
           }
           do if (i6 & 4) {
            if (!(i6 & 8)) {
             i2 = HEAPU8[i9 + 13 >> 0] | 0;
             i3 = 17;
             i1 = i9 + 14 | 0;
             i4 = 15;
             i5 = 16;
            } else {
             i2 = HEAP8[i9 + 13 >> 0] << 8 | HEAPU8[i9 + 14 >> 0];
             i3 = 18;
             i1 = i9 + 15 | 0;
             i4 = 16;
             i5 = 17;
            }
            HEAP32[i20 + 240 + 28 >> 2] = i2;
            if (i6 & 3) break;
            HEAP32[i20 + 240 + 36 >> 2] = HEAPU8[i9 + i4 >> 0] << 8 | HEAP8[i1 >> 0] << 16 | HEAPU8[i9 + i5 >> 0];
            i1 = i9 + i3 | 0;
           } else i1 = i9 + 13 | 0; while (0);
           if (i6 & 16) {
            if (!(i6 & 32)) {
             i3 = HEAPU8[i1 >> 0] | 0;
             i2 = i1 + 1 | 0;
            } else {
             i3 = HEAP8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
             i2 = i1 + 2 | 0;
            }
            HEAP32[i20 + 240 + 32 >> 2] = i3;
           } else i2 = i1;
           L56 : do if (!(i6 & 64)) i1 = i2; else {
            i1 = i2 + 1 | 0;
            L58 : do if (i1 >>> 0 <= (i9 + (i7 & 65535) | 0) >>> 0) {
             i2 = HEAP8[i2 >> 0] | 0;
             if (i2 << 24 >> 24) {
              i2 = i2 & 255;
              do {
               if ((i1 + 2 | 0) >>> 0 > (i9 + (i7 & 65535) | 0) >>> 0) break L58;
               i1 = i1 + ((HEAPU8[i1 >> 0] | 0) + 2) | 0;
               if (i1 >>> 0 > (i9 + (i7 & 65535) | 0) >>> 0) break L58;
               i2 = i2 + -1 | 0;
              } while ((i2 | 0) != 0);
             }
             HEAP32[i21 + 20 >> 2] = 0;
             break L56;
            } while (0);
            HEAP32[i21 + 20 >> 2] = 8;
            break L32;
           } while (0);
           i2 = i1 + 5 | 0;
           if (i2 >>> 0 > (i9 + (i7 & 65535) | 0) >>> 0) {
            i17 = 53;
            break;
           }
           i3 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
           HEAP32[i20 + 240 + 40 >> 2] = i3;
           HEAP32[i20 + 240 + 44 >> 2] = HEAPU8[i1 + 3 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 4 >> 0];
           if (i8) break;
           if ((i1 + 6 | 0) >>> 0 > (i9 + (i7 & 65535) | 0) >>> 0) {
            i17 = 53;
            break;
           }
           HEAP32[i20 + 240 + 40 >> 2] = HEAPU8[i2 >> 0] << 16 | i3;
          } while (0);
          if ((i17 | 0) == 53) HEAP32[i21 + 20 >> 2] = 8;
          _FT_Stream_ExitFrame(i18);
          i1 = HEAP32[i21 + 20 >> 2] | 0;
          HEAP32[i21 + 12 >> 2] = i1;
          if (i1) {
           i20 = i1;
           STACKTOP = i21;
           return i20 | 0;
          }
          i12 = HEAP32[i20 + 240 + 44 >> 2] | 0;
          i14 = HEAP32[i20 + 240 + 40 >> 2] | 0;
          i13 = HEAP32[i18 + 28 >> 2] | 0;
          HEAP32[i20 + 288 >> 2] = i13;
          HEAP32[i20 + 288 + 4 >> 2] = i12;
          HEAP32[i20 + 288 + 136 >> 2] = 0;
          HEAP32[i20 + 288 + 140 >> 2] = i20 + 288 + 136;
          i1 = _FT_Stream_Seek(i18, i12) | 0;
          HEAP32[i21 + 16 >> 2] = i1;
          L78 : do if (!i1) {
           i1 = _FT_Stream_EnterFrame(i18, i14) | 0;
           HEAP32[i21 + 16 >> 2] = i1;
           if (i1) break;
           i11 = HEAP32[i18 + 32 >> 2] | 0;
           HEAP32[i20 + 288 + 148 >> 2] = i11;
           L81 : do if ((i14 | 0) < 15) i17 = 128; else {
            HEAP32[i20 + 288 + 8 >> 2] = HEAPU8[i11 >> 0] << 8 | HEAPU8[i11 + 1 >> 0];
            HEAP32[i20 + 288 + 12 >> 2] = HEAPU8[i11 + 2 >> 0] << 8 | HEAPU8[i11 + 3 >> 0];
            HEAP32[i20 + 288 + 16 >> 2] = HEAPU8[i11 + 4 >> 0] << 8 | HEAPU8[i11 + 5 >> 0];
            HEAP32[i20 + 288 + 20 >> 2] = HEAP8[i11 + 6 >> 0] << 8 | HEAPU8[i11 + 7 >> 0];
            HEAP32[i20 + 288 + 24 >> 2] = HEAP8[i11 + 8 >> 0] << 8 | HEAPU8[i11 + 9 >> 0];
            HEAP32[i20 + 288 + 28 >> 2] = HEAP8[i11 + 10 >> 0] << 8 | HEAPU8[i11 + 11 >> 0];
            HEAP32[i20 + 288 + 32 >> 2] = HEAP8[i11 + 12 >> 0] << 8 | HEAPU8[i11 + 13 >> 0];
            i16 = HEAPU8[i11 + 14 >> 0] | 0;
            HEAP32[i20 + 288 + 36 >> 2] = i16;
            if (i16 & 4) {
             i2 = 15;
             i3 = i11 + 15 | 0;
            } else {
             if ((i14 | 0) < 17) {
              i17 = 128;
              break;
             }
             HEAP32[i20 + 288 + 40 >> 2] = HEAP8[i11 + 15 >> 0] << 8 | HEAPU8[i11 + 16 >> 0];
             i2 = 17;
             i3 = i11 + 17 | 0;
            }
            L87 : do if (i16 & 128) {
             i1 = i11 + (i2 + 1) | 0;
             L89 : do if ((i2 | 0) < (i14 | 0)) {
              i2 = HEAP8[i3 >> 0] | 0;
              if (i2 << 24 >> 24) {
               i4 = i2 & 255;
               do {
                i2 = i1 + 2 | 0;
                if (i2 >>> 0 > (i11 + i14 | 0) >>> 0) {
                 i1 = 8;
                 break L89;
                }
                i3 = HEAP8[i1 + 1 >> 0] | 0;
                i1 = i1 + ((HEAPU8[i1 >> 0] | 0) + 2) | 0;
                if (i1 >>> 0 > (i11 + i14 | 0) >>> 0) {
                 i1 = 8;
                 break L89;
                }
                do if (i3 << 24 >> 24 != 1) {
                 if (i3 << 24 >> 24 == 2) {
                  i10 = 63;
                  i17 = 70;
                  break;
                 }
                 if (i3 << 24 >> 24 == 3) {
                  i10 = 64;
                  i17 = 70;
                  break;
                 }
                 if (i3 << 24 >> 24 == 4) {
                  i10 = 65;
                  i17 = 70;
                 }
                } else {
                 i10 = 62;
                 i17 = 70;
                } while (0);
                if ((i17 | 0) == 70 ? (i17 = 0, i15 = FUNCTION_TABLE_iiii[i10 & 127](i2, i1, i20 + 288 | 0) | 0, (i15 | 0) != 0) : 0) {
                 i1 = i15;
                 break L89;
                }
                i4 = i4 + -1 | 0;
               } while ((i4 | 0) != 0);
              }
              HEAP32[i21 + 16 >> 2] = 0;
              i3 = i1;
              break L87;
             } else i1 = 8; while (0);
             HEAP32[i21 + 16 >> 2] = i1;
             break L81;
            } while (0);
            i1 = i3 + 3 | 0;
            if (i1 >>> 0 > (i11 + i14 | 0) >>> 0) {
             i17 = 128;
             break;
            }
            i9 = HEAPU8[i3 + 1 >> 0] << 8 | HEAPU8[i3 >> 0] << 16 | HEAPU8[i3 + 2 >> 0];
            do if (i9) {
             i10 = i3 + (i9 + 3) | 0;
             if (i10 >>> 0 > (i11 + i14 | 0) >>> 0) {
              i17 = 128;
              break L81;
             }
             i8 = i9;
             i7 = i1;
             L111 : while (1) {
              i5 = i7 + 4 | 0;
              if (i5 >>> 0 > i10 >>> 0) {
               i17 = 104;
               break;
              }
              i6 = HEAPU8[i7 >> 0] << 8 | HEAPU8[i7 + 1 >> 0];
              if (i6 >>> 0 < 4 | i8 >>> 0 < i6 >>> 0) {
               i17 = 104;
               break;
              }
              L115 : do switch (HEAPU8[i7 + 2 >> 0] << 8 | HEAPU8[i7 + 3 >> 0] | 0) {
              case 1:
               {
                HEAP32[i21 + 20 >> 2] = 0;
                L117 : do if (i6 + -4 | 0) {
                 if (!(HEAP8[i7 + (i6 + -1) >> 0] | 0)) if (!(i6 + -5 | 0)) break; else i2 = i6 + -5 | 0; else i2 = i6 + -4 | 0;
                 i1 = 0;
                 do {
                  i17 = HEAP8[i7 + (i1 + 4) >> 0] | 0;
                  i1 = i1 + 1 | 0;
                  if ((i17 & 255) < 32 | i17 << 24 >> 24 < 0) break L117;
                 } while (i1 >>> 0 < i2 >>> 0);
                 i4 = _ft_mem_alloc(i13, i2 + 1 | 0, i21 + 20 | 0) | 0;
                 i1 = HEAP32[i21 + 20 >> 2] | 0;
                 if (i1) {
                  i17 = 88;
                  break L111;
                 }
                 _memcpy(i4 | 0, i5 | 0, i2 | 0) | 0;
                 HEAP8[i4 + i2 >> 0] = 0;
                 i1 = HEAP32[i21 + 20 >> 2] | 0;
                 HEAP32[i20 + 288 + 84 >> 2] = i4;
                 HEAP32[i21 + 16 >> 2] = i1;
                 if (!i1) break L115; else break L78;
                } while (0);
                HEAP32[i20 + 288 + 84 >> 2] = 0;
                HEAP32[i21 + 16 >> 2] = 0;
                break;
               }
              case 2:
               {
                if (i6 >>> 0 < 36) break L115;
                HEAP32[i20 + 288 + 44 >> 2] = HEAP8[i7 + 14 >> 0] << 8 | HEAPU8[i7 + 15 >> 0];
                HEAP32[i20 + 288 + 48 >> 2] = HEAP8[i7 + 16 >> 0] << 8 | HEAPU8[i7 + 17 >> 0];
                HEAP32[i20 + 288 + 52 >> 2] = HEAP8[i7 + 18 >> 0] << 8 | HEAPU8[i7 + 19 >> 0];
                break;
               }
              case 3:
               {
                HEAP32[i21 + 20 >> 2] = 0;
                L131 : do if (i6 + -4 | 0) {
                 if (!(HEAP8[i7 + (i6 + -1) >> 0] | 0)) if (!(i6 + -5 | 0)) break; else i2 = i6 + -5 | 0; else i2 = i6 + -4 | 0;
                 i1 = 0;
                 do {
                  i17 = HEAP8[i7 + (i1 + 4) >> 0] | 0;
                  i1 = i1 + 1 | 0;
                  if ((i17 & 255) < 32 | i17 << 24 >> 24 < 0) break L131;
                 } while (i1 >>> 0 < i2 >>> 0);
                 i4 = _ft_mem_alloc(i13, i2 + 1 | 0, i21 + 20 | 0) | 0;
                 i1 = HEAP32[i21 + 20 >> 2] | 0;
                 if (i1) {
                  i17 = 100;
                  break L111;
                 }
                 _memcpy(i4 | 0, i5 | 0, i2 | 0) | 0;
                 HEAP8[i4 + i2 >> 0] = 0;
                 i1 = HEAP32[i21 + 20 >> 2] | 0;
                 HEAP32[i20 + 288 + 88 >> 2] = i4;
                 HEAP32[i21 + 16 >> 2] = i1;
                 if (!i1) break L115; else break L78;
                } while (0);
                HEAP32[i20 + 288 + 88 >> 2] = 0;
                HEAP32[i21 + 16 >> 2] = 0;
                break;
               }
              default:
               {}
              } while (0);
              i7 = i7 + i6 | 0;
              if ((i8 | 0) == (i6 | 0)) {
               i17 = 104;
               break;
              } else i8 = i8 - i6 | 0;
             }
             if ((i17 | 0) == 88) {
              HEAP32[i20 + 288 + 84 >> 2] = i4;
              HEAP32[i21 + 16 >> 2] = i1;
              break L78;
             } else if ((i17 | 0) == 100) {
              HEAP32[i20 + 288 + 88 >> 2] = i4;
              HEAP32[i21 + 16 >> 2] = i1;
              break L78;
             } else if ((i17 | 0) == 104) {
              i4 = i9 + 4 | 0;
              i1 = i10;
              break;
             }
            } else i4 = 4; while (0);
            i2 = i3 + i4 | 0;
            if (i2 >>> 0 > (i11 + i14 | 0) >>> 0) {
             i17 = 128;
             break;
            }
            i5 = HEAP8[i1 >> 0] | 0;
            HEAP32[i20 + 288 + 104 >> 2] = i5 & 255;
            i1 = ((i5 & 255) << 1) + i4 | 0;
            i6 = i3 + i1 | 0;
            if (i6 >>> 0 > (i11 + i14 | 0) >>> 0) {
             i17 = 128;
             break;
            }
            i7 = _ft_mem_realloc(i13, 4, 0, i5 & 255, 0, i21 + 16 | 0) | 0;
            HEAP32[i20 + 288 + 108 >> 2] = i7;
            if (HEAP32[i21 + 16 >> 2] | 0) break;
            if (!(i5 << 24 >> 24)) i1 = i4; else {
             i4 = 0;
             while (1) {
              HEAP32[i7 + (i4 << 2) >> 2] = HEAP8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
              i4 = i4 + 1 | 0;
              if ((i4 | 0) == (i5 & 255 | 0)) {
               i2 = i6;
               break;
              } else i2 = i2 + 2 | 0;
             }
            }
            i5 = i1 + 8 | 0;
            i4 = i3 + i5 | 0;
            if (i4 >>> 0 > (i11 + i14 | 0) >>> 0) {
             i17 = 128;
             break;
            }
            HEAP32[i20 + 288 + 112 >> 2] = HEAPU8[i2 >> 0];
            HEAP32[i20 + 288 + 116 >> 2] = HEAPU8[i3 + (i1 + 1) >> 0];
            HEAP32[i20 + 288 + 68 >> 2] = HEAPU8[i3 + (i1 + 2) >> 0] << 8 | HEAPU8[i3 + (i1 + 3) >> 0];
            HEAP32[i20 + 288 + 56 >> 2] = HEAPU8[i3 + (i1 + 4) >> 0] << 8 | HEAPU8[i3 + (i1 + 5) >> 0];
            i8 = HEAPU8[i3 + (i1 + 6) >> 0] << 8 | HEAPU8[i3 + (i1 + 7) >> 0];
            HEAP32[i20 + 288 + 120 >> 2] = i8;
            HEAP32[i20 + 288 + 124 >> 2] = i4 + i12 - (HEAP32[i18 + 32 >> 2] | 0);
            i9 = _ft_mem_realloc(i13, 16, 0, i8, 0, i21 + 16 | 0) | 0;
            HEAP32[i20 + 288 + 128 >> 2] = i9;
            if (HEAP32[i21 + 16 >> 2] | 0) break;
            if ((i3 + (i5 + (Math_imul(i8, ((i16 & 16) >>> 4) + ((i16 & 8) >>> 3) + ((i16 & 32) >>> 5) + (i16 >>> 1 & 3 | 4) | 0) | 0)) | 0) >>> 0 > (i11 + i14 | 0) >>> 0) {
             i17 = 128;
             break;
            }
            if (!i8) break;
            i7 = 0;
            while (1) {
             if (!(i16 & 2)) {
              i2 = HEAPU8[i4 >> 0] | 0;
              i5 = 3;
              i1 = i4 + 1 | 0;
              i3 = 2;
             } else {
              i2 = HEAPU8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
              i5 = 4;
              i1 = i4 + 2 | 0;
              i3 = 3;
             }
             HEAP32[i9 + (i7 << 4) >> 2] = i2;
             if (i16 & 4) {
              i2 = HEAP8[i1 >> 0] << 8 | HEAPU8[i4 + i3 >> 0];
              i1 = i4 + i5 | 0;
             } else i2 = HEAP32[i20 + 288 + 40 >> 2] | 0;
             HEAP32[i9 + (i7 << 4) + 4 >> 2] = i2;
             i6 = (i16 & 8 | 0) != 0 ? i1 + 1 | 0 : i1;
             if (!(i16 & 16)) {
              i1 = HEAPU8[i6 >> 0] | 0;
              i3 = i6 + 1 | 0;
              i4 = 2;
              i5 = 3;
              i2 = 4;
             } else {
              i1 = HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0];
              i3 = i6 + 2 | 0;
              i4 = 3;
              i5 = 4;
              i2 = 5;
             }
             HEAP32[i9 + (i7 << 4) + 8 >> 2] = i1;
             i3 = HEAPU8[i3 >> 0] | 0;
             i1 = HEAP8[i6 + i4 >> 0] | 0;
             if (!(i16 & 32)) {
              i2 = i5;
              i1 = i1 & 255 | i3 << 8;
             } else i1 = (i1 & 255) << 8 | i3 << 16 | HEAPU8[i6 + i5 >> 0];
             HEAP32[i9 + (i7 << 4) + 12 >> 2] = i1;
             i7 = i7 + 1 | 0;
             if ((i7 | 0) == (i8 | 0)) break; else i4 = i6 + i2 | 0;
            }
           } while (0);
           if ((i17 | 0) == 128) HEAP32[i21 + 16 >> 2] = 8;
           _FT_Stream_ExitFrame(i18);
           HEAP32[i20 + 288 + 144 >> 2] = _FT_Stream_Pos(i18) | 0;
           HEAP32[i20 + 288 + 148 >> 2] = 0;
           i1 = HEAP32[i21 + 16 >> 2] | 0;
           HEAP32[i21 + 12 >> 2] = i1;
           if (i1) {
            i20 = i1;
            STACKTOP = i21;
            return i20 | 0;
           }
           HEAP32[i20 + 4 >> 2] = i19;
           i3 = HEAP32[i20 + 288 + 120 >> 2] | 0;
           HEAP32[i20 + 16 >> 2] = i3 + 1;
           HEAP32[i20 + 8 >> 2] = 1;
           L183 : do if (!i3) i1 = 0; else {
            i2 = HEAP32[i20 + 288 + 128 >> 2] | 0;
            i1 = 0;
            do {
             if (HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0) break L183;
             i1 = i1 + 1 | 0;
            } while (i1 >>> 0 < i3 >>> 0);
           } while (0);
           do if ((i1 | 0) == (i3 | 0)) {
            if (HEAP32[i20 + 288 + 92 >> 2] | 0) {
             HEAP32[i20 + 8 >> 2] = 0;
             i2 = 0;
             break;
            }
            HEAP32[i21 + 12 >> 2] = 3;
            i20 = 3;
            STACKTOP = i21;
            return i20 | 0;
           } else i2 = 1; while (0);
           i1 = HEAP32[i20 + 288 + 36 >> 2] | 0;
           if (!(i1 & 4)) {
            i2 = i2 | 4;
            HEAP32[i20 + 8 >> 2] = i2;
           }
           i2 = (i1 << 4 & 16) + 16 | i2;
           HEAP32[i20 + 8 >> 2] = i2;
           i4 = HEAP32[i20 + 288 + 92 >> 2] | 0;
           if (i4) {
            HEAP32[i20 + 8 >> 2] = i2 | 2;
            i2 = i2 | 2;
           }
           if (HEAP32[i20 + 288 + 132 >> 2] | 0) HEAP32[i20 + 8 >> 2] = i2 | 64;
           i19 = HEAP32[i20 + 288 + 84 >> 2] | 0;
           HEAP32[i20 + 20 >> 2] = i19;
           if (!i19) HEAP32[i20 + 20 >> 2] = HEAP32[i20 + 288 + 80 >> 2];
           HEAP32[i20 + 24 >> 2] = HEAP32[i20 + 288 + 88 >> 2];
           HEAP32[i20 + 28 >> 2] = 0;
           HEAP32[i20 + 32 >> 2] = 0;
           HEAP32[i20 + 52 >> 2] = HEAP32[i20 + 288 + 20 >> 2];
           HEAP32[i20 + 52 + 4 >> 2] = HEAP32[i20 + 288 + 20 + 4 >> 2];
           HEAP32[i20 + 52 + 8 >> 2] = HEAP32[i20 + 288 + 20 + 8 >> 2];
           HEAP32[i20 + 52 + 12 >> 2] = HEAP32[i20 + 288 + 20 + 12 >> 2];
           i19 = HEAP32[i20 + 288 + 12 >> 2] | 0;
           HEAP16[i20 + 68 >> 1] = i19;
           i17 = HEAP32[i20 + 288 + 32 >> 2] | 0;
           HEAP16[i20 + 70 >> 1] = i17;
           i18 = HEAP32[i20 + 288 + 24 >> 2] | 0;
           HEAP16[i20 + 72 >> 1] = i18;
           HEAP16[i20 + 74 >> 1] = (((((i19 & 65535) * 12 | 0) >>> 0) / 10 | 0) << 16 >> 16 | 0) < ((i17 << 16 >> 16) - (i18 << 16 >> 16) | 0) ? (i17 << 16 >> 16) - (i18 << 16 >> 16) | 0 : (((i19 & 65535) * 12 | 0) >>> 0) / 10 | 0;
           if (i4) {
            i2 = _ft_mem_realloc(HEAP32[(HEAP32[i20 + 104 >> 2] | 0) + 28 >> 2] | 0, 16, 0, i4, 0, i21 + 12 | 0) | 0;
            HEAP32[i20 + 32 >> 2] = i2;
            i1 = HEAP32[i21 + 12 >> 2] | 0;
            if (i1) {
             i20 = i1;
             STACKTOP = i21;
             return i20 | 0;
            }
            i3 = 0;
            i1 = HEAP32[i20 + 288 + 100 >> 2] | 0;
            while (1) {
             i19 = HEAP32[i1 + 4 >> 2] | 0;
             HEAP16[i2 >> 1] = i19;
             i18 = HEAP32[i1 >> 2] | 0;
             HEAP16[i2 + 2 >> 1] = i18;
             HEAP32[i2 + 4 >> 2] = i19 << 6;
             HEAP32[i2 + 8 >> 2] = i18 << 6;
             HEAP32[i2 + 12 >> 2] = i19 << 6;
             i3 = i3 + 1 | 0;
             if ((i3 | 0) == (i4 | 0)) break; else {
              i2 = i2 + 16 | 0;
              i1 = i1 + 36 | 0;
             }
            }
            HEAP32[i20 + 28 >> 2] = i4;
            i1 = HEAP32[i20 + 288 + 36 >> 2] | 0;
           }
           if (!(i1 & 4)) HEAP16[i20 + 76 >> 1] = HEAP32[i20 + 288 + 40 >> 2]; else {
            i1 = HEAP32[i20 + 288 + 120 >> 2] | 0;
            if (!i1) i1 = 0; else {
             i3 = HEAP32[i20 + 288 + 128 >> 2] | 0;
             i2 = 0;
             while (1) {
              i19 = HEAP32[i3 + 4 >> 2] | 0;
              i2 = (i2 | 0) < (i19 | 0) ? i19 : i2;
              i1 = i1 + -1 | 0;
              if (!i1) break; else i3 = i3 + 16 | 0;
             }
             i1 = i2 & 65535;
            }
            HEAP16[i20 + 76 >> 1] = i1;
           }
           HEAP16[i20 + 78 >> 1] = HEAP16[i20 + 74 >> 1] | 0;
           i1 = HEAP16[i20 + 68 >> 1] | 0;
           HEAP16[i20 + 80 >> 1] = (i1 & 65535 | 0) / -10 | 0;
           HEAP16[i20 + 82 >> 1] = (i1 & 65535) / 30 | 0;
           HEAP32[i21 >> 2] = i20;
           HEAP16[i21 + 8 >> 1] = 3;
           HEAP16[i21 + 10 >> 1] = 1;
           HEAP32[i21 + 4 >> 2] = 1970170211;
           i1 = _FT_CMap_New(269404, 0, i21, 0) | 0;
           HEAP32[i21 + 12 >> 2] = i1;
           if (!(HEAP32[i20 + 288 + 132 >> 2] | 0)) {
            i20 = i1;
            STACKTOP = i21;
            return i20 | 0;
           }
           HEAP32[i20 + 8 >> 2] = HEAP32[i20 + 8 >> 2] | 64;
           i20 = i1;
           STACKTOP = i21;
           return i20 | 0;
          } while (0);
          HEAP32[i21 + 12 >> 2] = i1;
          i20 = i1;
          STACKTOP = i21;
          return i20 | 0;
         }
        }
       }
      }
     } else i1 = 6;
    } while (0);
    HEAP32[i21 + 12 >> 2] = i1;
    i20 = i1;
    STACKTOP = i21;
    return i20 | 0;
   }
   HEAP32[i21 + 12 >> 2] = 2;
   i20 = 2;
   STACKTOP = i21;
   return i20 | 0;
  }
 }
 HEAP32[i21 + 12 >> 2] = i1;
 i20 = i1;
 STACKTOP = i21;
 return i20 | 0;
}

function _tt_glyph_load(i18, i17, i15, i1) {
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i2 = HEAP32[i18 + 4 >> 2] | 0;
 if (!i18) {
  i18 = 37;
  STACKTOP = i19;
  return i18 | 0;
 }
 if (!i17) {
  i18 = 36;
  STACKTOP = i19;
  return i18 | 0;
 }
 if (!i2) {
  i18 = 6;
  STACKTOP = i19;
  return i18 | 0;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) >>> 0 <= i15 >>> 0 ? (HEAP32[(HEAP32[i2 + 128 >> 2] | 0) + 52 >> 2] | 0) == 0 : 0) {
  i18 = 6;
  STACKTOP = i19;
  return i18 | 0;
 }
 if (i1 & 2) {
  i1 = (HEAP32[i2 + 8 >> 2] & 8192 | 0) == 0 ? i1 : i1 & -3;
  i1 = i1 >>> 14 & 2 | i1;
 }
 if (!(i1 & 1025)) i12 = i1; else i12 = (HEAP32[i2 + 8 >> 2] | 0) >>> 12 & 2 ^ 11 | i1;
 i1 = HEAP32[i17 + 112 >> 2] | 0;
 do if ((i12 & 8 | 0) == 0 & (i1 | 0) != -1) {
  if (FUNCTION_TABLE_iiiiiiii[HEAP32[(HEAP32[i2 + 532 >> 2] | 0) + 104 >> 2] & 1](i2, i1, i15, i12, HEAP32[i2 + 104 >> 2] | 0, i18 + 76 | 0, i19 + 224 | 0) | 0) {
   i16 = 21;
   break;
  }
  HEAP16[i18 + 110 >> 1] = 0;
  HEAP16[i18 + 108 >> 1] = 0;
  HEAP32[i18 + 24 >> 2] = HEAPU8[i19 + 224 + 1 >> 0] << 6;
  HEAP32[i18 + 28 >> 2] = HEAPU8[i19 + 224 >> 0] << 6;
  i10 = HEAP8[i19 + 224 + 2 >> 0] | 0;
  HEAP32[i18 + 32 >> 2] = i10 << 6;
  i14 = HEAP8[i19 + 224 + 3 >> 0] | 0;
  HEAP32[i18 + 36 >> 2] = i14 << 6;
  HEAP32[i18 + 40 >> 2] = HEAPU8[i19 + 224 + 4 >> 0] << 6;
  i11 = HEAP8[i19 + 224 + 5 >> 0] | 0;
  HEAP32[i18 + 44 >> 2] = i11 << 6;
  i1 = HEAP8[i19 + 224 + 6 >> 0] | 0;
  HEAP32[i18 + 48 >> 2] = i1 << 6;
  HEAP32[i18 + 52 >> 2] = HEAPU8[i19 + 224 + 7 >> 0] << 6;
  HEAP32[i18 + 72 >> 2] = 1651078259;
  i13 = (i12 & 16 | 0) == 0;
  HEAP32[i18 + 100 >> 2] = i13 ? i10 : i11;
  HEAP32[i18 + 104 >> 2] = i13 ? i14 : i1;
  i1 = HEAP32[i18 + 4 >> 2] | 0;
  if (!(HEAP32[i1 + 8 >> 2] & 1)) i1 = 0; else {
   i2 = HEAP32[i1 + 104 >> 2] | 0;
   _memset(i19 | 0, 0, 208) | 0;
   L26 : do if (!(HEAP32[(HEAP32[i1 + 128 >> 2] | 0) + 52 >> 2] | 0)) switch (FUNCTION_TABLE_iiiii[HEAP32[i1 + 508 >> 2] & 63](i1, 1735162214, i2, 0) | 0) {
   case 142:
    {
     HEAP32[i19 + 84 >> 2] = 0;
     i16 = 19;
     break L26;
    }
   case 0:
    {
     HEAP32[i19 + 84 >> 2] = _FT_Stream_Pos(i2) | 0;
     i16 = 19;
     break L26;
    }
   default:
    break L26;
   } else {
    HEAP32[i19 + 84 >> 2] = 0;
    i16 = 19;
   } while (0);
   if ((i16 | 0) == 19) {
    HEAP32[i19 + 16 >> 2] = i12;
    HEAP32[i19 >> 2] = i1;
    HEAP32[i19 + 4 >> 2] = i17;
    HEAP32[i19 + 8 >> 2] = i18;
    HEAP32[i19 + 24 >> 2] = i2;
   }
   _load_truetype_glyph(i19, i15, 0, 1) | 0;
   HEAP32[i18 + 56 >> 2] = HEAP32[i19 + 60 >> 2];
   HEAP32[i18 + 60 >> 2] = (HEAP32[i19 + 48 >> 2] | 0) + (HEAP32[i19 + 176 >> 2] | 0) - (HEAP32[i19 + 180 >> 2] | 0);
   i1 = 0;
  }
 } else i16 = 21; while (0);
 L35 : do if ((i16 | 0) == 21) {
  i14 = (i12 & 1 | 0) != 0;
  if (!i14 ? (HEAP8[i17 + 108 >> 0] | 0) == 0 : 0) {
   i1 = 36;
   break;
  }
  if (!(i12 & 16384)) {
   i8 = i12 & 128;
   i10 = HEAP32[i18 + 4 >> 2] | 0;
   i11 = HEAP32[i10 + 104 >> 2] | 0;
   _memset(i19 | 0, 0, 208) | 0;
   i13 = (i12 & 2 | 0) == 0;
   if (i13) {
    if (!(HEAP8[i17 + 301 >> 0] | 0)) {
     L45 : do if (!(HEAP8[i17 + 300 >> 0] | 0)) {
      i4 = HEAP32[i17 >> 2] | 0;
      i2 = HEAP32[i4 + 100 >> 2] | 0;
      HEAP8[i17 + 300 >> 0] = 1;
      HEAP8[i17 + 301 >> 0] = 0;
      i6 = HEAPU16[i4 + 280 >> 1] | 0;
      HEAP32[i17 + 120 >> 2] = i6;
      HEAP32[i17 + 132 >> 2] = HEAPU16[i4 + 282 >> 1];
      HEAP32[i17 + 116 >> 2] = 0;
      HEAP32[i17 + 128 >> 2] = 0;
      HEAP32[i17 + 140 >> 2] = 0;
      HEAP32[i17 + 144 >> 2] = 0;
      HEAP32[i17 + 240 >> 2] = HEAP32[i4 + 668 >> 2];
      HEAP16[i17 + 248 >> 1] = HEAP16[i4 + 278 >> 1] | 0;
      HEAP8[i17 + 72 + 37 >> 0] = 0;
      HEAP8[i17 + 72 + 38 >> 0] = 0;
      HEAP32[i17 + 92 >> 2] = 0;
      HEAP32[i17 + 92 + 4 >> 2] = 0;
      HEAP32[i17 + 92 + 8 >> 2] = 0;
      HEAP32[i17 + 92 + 12 >> 2] = 0;
      HEAP32[i17 + 124 >> 2] = _ft_mem_realloc(i2, 20, 0, i6, 0, i19 + 208 | 0) | 0;
      L47 : do if (((HEAP32[i19 + 208 >> 2] | 0) == 0 ? (HEAP32[i17 + 136 >> 2] = _ft_mem_realloc(i2, 20, 0, HEAP32[i17 + 132 >> 2] | 0, 0, i19 + 208 | 0) | 0, (HEAP32[i19 + 208 >> 2] | 0) == 0) : 0) ? (HEAP32[i17 + 244 >> 2] = _ft_mem_realloc(i2, 4, 0, HEAP32[i17 + 240 >> 2] | 0, 0, i19 + 208 | 0) | 0, (HEAP32[i19 + 208 >> 2] | 0) == 0) : 0) {
       HEAP32[i17 + 252 >> 2] = _ft_mem_realloc(i2, 4, 0, HEAPU16[i17 + 248 >> 1] | 0, 0, i19 + 208 | 0) | 0;
       if (HEAP32[i19 + 208 >> 2] | 0) break;
       i9 = (HEAPU16[i4 + 276 >> 1] | 0) + 4 | 0;
       i5 = i17 + 256 | 0;
       i6 = i5 + 36 | 0;
       do {
        HEAP32[i5 >> 2] = 0;
        i5 = i5 + 4 | 0;
       } while ((i5 | 0) < (i6 | 0));
       HEAP32[i17 + 256 >> 2] = i2;
       HEAP32[i17 + 256 + 12 >> 2] = _ft_mem_realloc(i2, 8, 0, i9 & 65535, 0, i19 + 224 | 0) | 0;
       i1 = HEAP32[i19 + 224 >> 2] | 0;
       do if (!i1) {
        HEAP32[i17 + 256 + 16 >> 2] = _ft_mem_realloc(i2, 8, 0, i9 & 65535, 0, i19 + 224 | 0) | 0;
        i1 = HEAP32[i19 + 224 >> 2] | 0;
        if (i1) {
         i16 = 36;
         break;
        }
        HEAP32[i17 + 256 + 20 >> 2] = _ft_mem_realloc(i2, 8, 0, i9 & 65535, 0, i19 + 224 | 0) | 0;
        i1 = HEAP32[i19 + 224 >> 2] | 0;
        if (i1) {
         i16 = 36;
         break;
        }
        HEAP32[i17 + 256 + 24 >> 2] = _ft_mem_realloc(i2, 1, 0, i9 & 65535, 0, i19 + 224 | 0) | 0;
        i1 = HEAP32[i19 + 224 >> 2] | 0;
        if (i1) {
         i16 = 36;
         break;
        }
        HEAP32[i17 + 256 + 28 >> 2] = _ft_mem_realloc(i2, 2, 0, 0, 0, i19 + 224 | 0) | 0;
        i1 = HEAP32[i19 + 224 >> 2] | 0;
        if (i1) {
         i16 = 36;
         break;
        }
        HEAP16[i17 + 256 + 4 >> 1] = i9;
        HEAP16[i17 + 256 + 6 >> 1] = 0;
        HEAP32[i19 + 208 >> 2] = 0;
       } else i16 = 36; while (0);
       do if ((i16 | 0) == 36) {
        i2 = HEAP32[i17 + 256 >> 2] | 0;
        if (i2) {
         _ft_mem_free(i2, HEAP32[i17 + 256 + 28 >> 2] | 0);
         HEAP32[i17 + 256 + 28 >> 2] = 0;
         _ft_mem_free(i2, HEAP32[i17 + 256 + 24 >> 2] | 0);
         HEAP32[i17 + 256 + 24 >> 2] = 0;
         _ft_mem_free(i2, HEAP32[i17 + 256 + 16 >> 2] | 0);
         HEAP32[i17 + 256 + 16 >> 2] = 0;
         _ft_mem_free(i2, HEAP32[i17 + 256 + 12 >> 2] | 0);
         HEAP32[i17 + 256 + 12 >> 2] = 0;
         _ft_mem_free(i2, HEAP32[i17 + 256 + 20 >> 2] | 0);
         HEAP32[i17 + 256 + 20 >> 2] = 0;
         HEAP32[i17 + 256 >> 2] = 0;
         HEAP32[i17 + 256 + 4 >> 2] = 0;
         HEAP32[i17 + 256 + 8 >> 2] = 0;
         i6 = HEAP32[i19 + 224 >> 2] | 0;
         HEAP32[i19 + 208 >> 2] = i6;
         if (!i6) break; else break L47;
        } else {
         HEAP32[i19 + 208 >> 2] = i1;
         break L47;
        }
       } while (0);
       HEAP16[i17 + 256 + 8 >> 1] = i9;
       i5 = i17 + 172 | 0;
       i3 = 263152;
       i6 = i5 + 68 | 0;
       do {
        HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
        i5 = i5 + 4 | 0;
        i3 = i3 + 4 | 0;
       } while ((i5 | 0) < (i6 | 0));
       i6 = HEAP32[(HEAP32[(HEAP32[i4 + 96 >> 2] | 0) + 4 >> 2] | 0) + 172 >> 2] | 0;
       HEAP32[i4 + 688 >> 2] = (i6 | 0) == 0 ? 57 : i6;
       i4 = HEAP32[i17 >> 2] | 0;
       if (!(HEAP8[i17 + 292 >> 0] | 0)) i1 = (HEAP32[i4 + 96 >> 2] | 0) + 28 | 0; else i1 = i17 + 296 | 0;
       i3 = HEAP32[i1 >> 2] | 0;
       do if (!i3) i1 = 153; else {
        _TT_Load_Context(i3, i4, i17);
        HEAP32[i3 + 428 >> 2] = 0;
        HEAP32[i3 + 16 >> 2] = 0;
        HEAP32[i3 + 476 >> 2] = 64;
        HEAP32[i3 + 480 >> 2] = 0;
        HEAP32[i3 + 484 >> 2] = 0;
        HEAP8[i3 + 488 >> 0] = 0;
        HEAP32[i3 + 564 >> 2] = 65536;
        HEAP8[i3 + 561 >> 0] = i8;
        HEAP16[i3 + 252 >> 1] = 0;
        HEAP32[i3 + 260 >> 2] = 0;
        HEAP16[i3 + 216 >> 1] = 0;
        HEAP16[i3 + 216 + 2 >> 1] = 0;
        HEAP16[i3 + 216 + 4 >> 1] = 0;
        HEAP16[i3 + 216 + 6 >> 1] = 0;
        HEAP16[i3 + 216 + 8 >> 1] = 0;
        HEAP16[i3 + 216 + 10 >> 1] = 0;
        HEAP32[i3 + 256 >> 2] = 65536;
        i1 = HEAP32[i4 + 656 >> 2] | 0;
        i2 = HEAP32[i4 + 652 >> 2] | 0;
        HEAP32[i3 + 444 >> 2] = i1;
        HEAP32[i3 + 448 >> 2] = i2;
        HEAP32[i3 + 452 >> 2] = 0;
        HEAP32[i3 + 452 + 4 >> 2] = 0;
        HEAP32[i3 + 452 + 8 >> 2] = 0;
        HEAP32[i3 + 452 + 12 >> 2] = 0;
        if ((i2 | 0) != 0 ? (HEAP32[i3 + 356 >> 2] = i1, HEAP32[i3 + 364 >> 2] = i2, HEAP32[i3 + 360 >> 2] = 0, HEAP32[i3 + 352 >> 2] = 1, i7 = FUNCTION_TABLE_ii[HEAP32[i4 + 688 >> 2] & 63](i3) | 0, (i7 | 0) != 0) : 0) {
         i1 = i7;
         break;
        }
        HEAP32[i17 + 116 >> 2] = HEAP32[i3 + 396 >> 2];
        HEAP32[i17 + 128 >> 2] = HEAP32[i3 + 408 >> 2];
        HEAP32[i17 + 140 >> 2] = HEAP32[i3 + 420 >> 2];
        HEAP32[i17 + 144 >> 2] = HEAP32[i3 + 424 >> 2];
        i7 = HEAP32[i3 + 444 + 4 >> 2] | 0;
        HEAP32[i17 + 148 >> 2] = HEAP32[i3 + 444 >> 2];
        HEAP32[i17 + 148 + 4 >> 2] = i7;
        i7 = HEAP32[i3 + 452 + 4 >> 2] | 0;
        HEAP32[i17 + 156 >> 2] = HEAP32[i3 + 452 >> 2];
        HEAP32[i17 + 156 + 4 >> 2] = i7;
        i7 = HEAP32[i3 + 460 + 4 >> 2] | 0;
        HEAP32[i17 + 164 >> 2] = HEAP32[i3 + 460 >> 2];
        HEAP32[i17 + 164 + 4 >> 2] = i7;
        break L45;
       } while (0);
       HEAP32[i19 + 208 >> 2] = i1;
      } while (0);
      _tt_size_done_bytecode(i17);
      i1 = HEAP32[i19 + 208 >> 2] | 0;
      if (i1) break L35;
     } while (0);
     if (!(HEAP8[i17 + 301 >> 0] | 0)) {
      if (HEAP32[i17 + 240 >> 2] | 0) {
       i1 = (HEAP32[i17 >> 2] | 0) + 672 | 0;
       i2 = 0;
       do {
        i7 = _FT_MulFix(HEAP16[(HEAP32[i1 >> 2] | 0) + (i2 << 1) >> 1] | 0, HEAP32[i17 + 88 >> 2] | 0) | 0;
        HEAP32[(HEAP32[i17 + 244 >> 2] | 0) + (i2 << 2) >> 2] = i7;
        i2 = i2 + 1 | 0;
       } while (i2 >>> 0 < (HEAP32[i17 + 240 >> 2] | 0) >>> 0);
      }
      i1 = HEAP16[i17 + 264 >> 1] | 0;
      if (i1 << 16 >> 16) {
       i2 = HEAP32[i17 + 268 >> 2] | 0;
       i3 = HEAP32[i17 + 272 >> 2] | 0;
       i4 = 0;
       do {
        HEAP32[i2 + (i4 << 3) >> 2] = 0;
        HEAP32[i2 + (i4 << 3) + 4 >> 2] = 0;
        HEAP32[i3 + (i4 << 3) >> 2] = 0;
        HEAP32[i3 + (i4 << 3) + 4 >> 2] = 0;
        i4 = i4 + 1 | 0;
       } while ((i4 | 0) != (i1 & 65535 | 0));
      }
      i1 = HEAP16[i17 + 248 >> 1] | 0;
      if (i1 << 16 >> 16) _memset(HEAP32[i17 + 252 >> 2] | 0, 0, ((i1 & 65535) > 1 ? (i1 & 65535) << 2 : 4) | 0) | 0;
      i5 = i17 + 172 | 0;
      i3 = 263152;
      i6 = i5 + 68 | 0;
      do {
       HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
       i5 = i5 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i5 | 0) < (i6 | 0));
      i3 = HEAP32[i17 >> 2] | 0;
      if (!(HEAP8[i17 + 292 >> 0] | 0)) i1 = (HEAP32[i3 + 96 >> 2] | 0) + 28 | 0; else i1 = i17 + 296 | 0;
      i4 = HEAP32[i1 >> 2] | 0;
      if (!i4) {
       i1 = 153;
       break;
      }
      _TT_Load_Context(i4, i3, i17);
      HEAP32[i4 + 428 >> 2] = 0;
      HEAP32[i4 + 16 >> 2] = 0;
      HEAP8[i4 + 488 >> 0] = 0;
      HEAP8[i4 + 561 >> 0] = i8;
      i1 = HEAP32[i3 + 664 >> 2] | 0;
      i2 = HEAP32[i3 + 660 >> 2] | 0;
      HEAP32[i4 + 452 >> 2] = i1;
      HEAP32[i4 + 456 >> 2] = i2;
      HEAP32[i4 + 460 >> 2] = 0;
      HEAP32[i4 + 464 >> 2] = 0;
      do if (!i2) i1 = 0; else {
       HEAP32[i4 + 356 >> 2] = i1;
       HEAP32[i4 + 364 >> 2] = i2;
       HEAP32[i4 + 360 >> 2] = 0;
       HEAP32[i4 + 352 >> 2] = 2;
       if (HEAP8[i17 + 292 >> 0] | 0) {
        i1 = 0;
        break;
       }
       i1 = FUNCTION_TABLE_ii[HEAP32[i3 + 688 >> 2] & 63](i4) | 0;
      } while (0);
      i5 = i17 + 172 | 0;
      i3 = i4 + 284 | 0;
      i6 = i5 + 68 | 0;
      do {
       HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
       i5 = i5 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i5 | 0) < (i6 | 0));
      HEAP32[i17 + 116 >> 2] = HEAP32[i4 + 396 >> 2];
      HEAP32[i17 + 128 >> 2] = HEAP32[i4 + 408 >> 2];
      HEAP32[i17 + 140 >> 2] = HEAP32[i4 + 420 >> 2];
      HEAP32[i17 + 144 >> 2] = HEAP32[i4 + 424 >> 2];
      i7 = HEAP32[i4 + 444 + 4 >> 2] | 0;
      HEAP32[i17 + 148 >> 2] = HEAP32[i4 + 444 >> 2];
      HEAP32[i17 + 148 + 4 >> 2] = i7;
      i7 = HEAP32[i4 + 452 + 4 >> 2] | 0;
      HEAP32[i17 + 156 >> 2] = HEAP32[i4 + 452 >> 2];
      HEAP32[i17 + 156 + 4 >> 2] = i7;
      i7 = HEAP32[i4 + 460 + 4 >> 2] | 0;
      HEAP32[i17 + 164 >> 2] = HEAP32[i4 + 460 >> 2];
      HEAP32[i17 + 164 + 4 >> 2] = i7;
      if (i1) break;
      HEAP8[i17 + 301 >> 0] = 1;
     }
    }
    if (!(HEAP8[i17 + 292 >> 0] | 0)) i1 = (HEAP32[i10 + 96 >> 2] | 0) + 28 | 0; else i1 = i17 + 296 | 0;
    i9 = HEAP32[i1 >> 2] | 0;
    if (!i9) {
     i1 = 153;
     break;
    }
    i1 = (i12 & 983040 | 0) != 131072;
    _TT_Load_Context(i9, i10, i17);
    if ((i1 & 1 | 0) != (HEAPU8[i9 + 604 >> 0] | 0)) {
     HEAP8[i9 + 604 >> 0] = i1 & 1;
     if (HEAP32[i17 + 240 >> 2] | 0) {
      i1 = 0;
      do {
       i7 = _FT_MulFix(HEAP16[(HEAP32[i10 + 672 >> 2] | 0) + (i1 << 1) >> 1] | 0, HEAP32[i17 + 88 >> 2] | 0) | 0;
       HEAP32[(HEAP32[i17 + 244 >> 2] | 0) + (i1 << 2) >> 2] = i7;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 < (HEAP32[i17 + 240 >> 2] | 0) >>> 0);
     }
     i3 = HEAP32[i17 >> 2] | 0;
     if (!(HEAP8[i17 + 292 >> 0] | 0)) i1 = (HEAP32[i3 + 96 >> 2] | 0) + 28 | 0; else i1 = i17 + 296 | 0;
     i4 = HEAP32[i1 >> 2] | 0;
     if (i4) {
      _TT_Load_Context(i4, i3, i17);
      HEAP32[i4 + 428 >> 2] = 0;
      HEAP32[i4 + 16 >> 2] = 0;
      HEAP8[i4 + 488 >> 0] = 0;
      HEAP8[i4 + 561 >> 0] = i8;
      i1 = HEAP32[i3 + 664 >> 2] | 0;
      i2 = HEAP32[i3 + 660 >> 2] | 0;
      HEAP32[i4 + 452 >> 2] = i1;
      HEAP32[i4 + 456 >> 2] = i2;
      HEAP32[i4 + 460 >> 2] = 0;
      HEAP32[i4 + 464 >> 2] = 0;
      do if (i2) {
       HEAP32[i4 + 356 >> 2] = i1;
       HEAP32[i4 + 364 >> 2] = i2;
       HEAP32[i4 + 360 >> 2] = 0;
       HEAP32[i4 + 352 >> 2] = 2;
       if (HEAP8[i17 + 292 >> 0] | 0) break;
       FUNCTION_TABLE_ii[HEAP32[i3 + 688 >> 2] & 63](i4) | 0;
      } while (0);
      i5 = i17 + 172 | 0;
      i3 = i4 + 284 | 0;
      i6 = i5 + 68 | 0;
      do {
       HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
       i5 = i5 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i5 | 0) < (i6 | 0));
      HEAP32[i17 + 116 >> 2] = HEAP32[i4 + 396 >> 2];
      HEAP32[i17 + 128 >> 2] = HEAP32[i4 + 408 >> 2];
      HEAP32[i17 + 140 >> 2] = HEAP32[i4 + 420 >> 2];
      HEAP32[i17 + 144 >> 2] = HEAP32[i4 + 424 >> 2];
      i7 = HEAP32[i4 + 444 + 4 >> 2] | 0;
      HEAP32[i17 + 148 >> 2] = HEAP32[i4 + 444 >> 2];
      HEAP32[i17 + 148 + 4 >> 2] = i7;
      i7 = HEAP32[i4 + 452 + 4 >> 2] | 0;
      HEAP32[i17 + 156 >> 2] = HEAP32[i4 + 452 >> 2];
      HEAP32[i17 + 156 + 4 >> 2] = i7;
      i7 = HEAP32[i4 + 460 + 4 >> 2] | 0;
      HEAP32[i17 + 164 >> 2] = HEAP32[i4 + 460 >> 2];
      HEAP32[i17 + 164 + 4 >> 2] = i7;
     }
    }
    i7 = HEAP8[i9 + 336 >> 0] | 0;
    i2 = (i7 & 1) << 1 | i12;
    if (i7 & 2) {
     i5 = i9 + 284 | 0;
     i3 = 263152;
     i6 = i5 + 68 | 0;
     do {
      HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
      i5 = i5 + 4 | 0;
      i3 = i3 + 4 | 0;
     } while ((i5 | 0) < (i6 | 0));
    }
    HEAP8[i9 + 561 >> 0] = i8;
    HEAP32[i19 + 160 >> 2] = i9;
    HEAP32[i19 + 164 >> 2] = HEAP32[i9 + 392 >> 2];
   } else i2 = i12;
   L127 : do if (!(HEAP32[(HEAP32[i10 + 128 >> 2] | 0) + 52 >> 2] | 0)) {
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i10 + 508 >> 2] & 63](i10, 1735162214, i11, 0) | 0;
    switch (i1 | 0) {
    case 142:
     {
      HEAP32[i19 + 84 >> 2] = 0;
      break L127;
     }
    case 0:
     {
      HEAP32[i19 + 84 >> 2] = _FT_Stream_Pos(i11) | 0;
      break L127;
     }
    default:
     break L35;
    }
   } else HEAP32[i19 + 84 >> 2] = 0; while (0);
   i1 = HEAP32[HEAP32[i18 + 156 >> 2] >> 2] | 0;
   _FT_GlyphLoader_Rewind(i1);
   HEAP32[i19 + 12 >> 2] = i1;
   HEAP32[i19 + 16 >> 2] = i2;
   HEAP32[i19 >> 2] = i10;
   HEAP32[i19 + 4 >> 2] = i17;
   HEAP32[i19 + 8 >> 2] = i18;
   HEAP32[i19 + 24 >> 2] = i11;
   HEAP32[i18 + 72 >> 2] = 1869968492;
   HEAP32[i18 + 128 >> 2] = 0;
   HEAP32[i18 + 124 >> 2] = 0;
   i1 = _load_truetype_glyph(i19, i15, 0, 0) | 0;
   if (!i1) {
    i2 = HEAP32[i19 + 12 >> 2] | 0;
    if ((HEAP32[i18 + 72 >> 2] | 0) != 1668246896) {
     HEAP32[i18 + 108 >> 2] = HEAP32[i2 + 20 >> 2];
     HEAP32[i18 + 108 + 4 >> 2] = HEAP32[i2 + 20 + 4 >> 2];
     HEAP32[i18 + 108 + 8 >> 2] = HEAP32[i2 + 20 + 8 >> 2];
     HEAP32[i18 + 108 + 12 >> 2] = HEAP32[i2 + 20 + 12 >> 2];
     HEAP32[i18 + 108 + 16 >> 2] = HEAP32[i2 + 20 + 16 >> 2];
     HEAP32[i18 + 124 >> 2] = HEAP32[i18 + 124 >> 2] & -513;
     i2 = HEAP32[i19 + 68 >> 2] | 0;
     if (i2) _FT_Outline_Translate(i18 + 108 | 0, 0 - i2 | 0, 0);
    } else {
     HEAP32[i18 + 128 >> 2] = HEAP32[i2 + 48 >> 2];
     HEAP32[i18 + 132 >> 2] = HEAP32[i2 + 52 >> 2];
    }
    L141 : do if (i13) {
     i2 = HEAP32[i19 + 160 >> 2] | 0;
     if (!(HEAP8[i2 + 337 >> 0] | 0)) {
      HEAP32[i18 + 124 >> 2] = HEAP32[i18 + 124 >> 2] | 8;
      break;
     }
     switch (HEAP32[i2 + 340 >> 2] | 0) {
     case 1:
      break L141;
     case 0:
      {
       HEAP32[i18 + 124 >> 2] = HEAP32[i18 + 124 >> 2] | 32;
       break L141;
      }
     case 4:
      {
       HEAP32[i18 + 124 >> 2] = HEAP32[i18 + 124 >> 2] | 48;
       break L141;
      }
     case 5:
      {
       HEAP32[i18 + 124 >> 2] = HEAP32[i18 + 124 >> 2] | 16;
       break L141;
      }
     default:
      {
       HEAP32[i18 + 124 >> 2] = HEAP32[i18 + 124 >> 2] | 8;
       break L141;
      }
     }
    } while (0);
    i10 = HEAP32[i19 >> 2] | 0;
    i12 = HEAP32[i19 + 8 >> 2] | 0;
    i2 = HEAP32[i19 + 4 >> 2] | 0;
    if (!(HEAP32[i19 + 16 >> 2] & 1)) i11 = HEAP32[i2 + 20 >> 2] | 0; else i11 = 65536;
    if ((HEAP32[i12 + 72 >> 2] | 0) == 1668246896) {
     HEAP32[i19 + 224 >> 2] = HEAP32[i19 + 36 >> 2];
     HEAP32[i19 + 224 + 4 >> 2] = HEAP32[i19 + 36 + 4 >> 2];
     HEAP32[i19 + 224 + 8 >> 2] = HEAP32[i19 + 36 + 8 >> 2];
     HEAP32[i19 + 224 + 12 >> 2] = HEAP32[i19 + 36 + 12 >> 2];
    } else _FT_Outline_Get_CBox(i12 + 108 | 0, i19 + 224 | 0);
    HEAP32[i12 + 56 >> 2] = HEAP32[i19 + 60 >> 2];
    i8 = HEAP32[i19 + 224 >> 2] | 0;
    HEAP32[i12 + 32 >> 2] = i8;
    i9 = HEAP32[i19 + 224 + 12 >> 2] | 0;
    HEAP32[i12 + 36 >> 2] = i9;
    HEAP32[i12 + 40 >> 2] = (HEAP32[i19 + 76 >> 2] | 0) - (HEAP32[i19 + 68 >> 2] | 0);
    L159 : do if (!(HEAP32[i10 + 480 >> 2] | 0)) {
     if (HEAP32[i19 + 16 >> 2] & 2) break;
     i3 = HEAPU16[i2 + 12 >> 1] | 0;
     i6 = HEAP32[i10 + 752 >> 2] | 0;
     i7 = HEAP32[i10 + 740 >> 2] | 0;
     i4 = HEAP32[i10 + 748 >> 2] | 0;
     if (!i4) break;
     i5 = HEAP32[i10 + 756 >> 2] | 0;
     i2 = 0;
     while (1) {
      if ((HEAPU8[i5 + i2 >> 0] | 0) == (i3 | 0)) break;
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= i4 >>> 0) break L159;
     }
     if ((i15 + 2 | 0) >>> 0 >= i6 >>> 0) break;
     i2 = i7 + (i15 + 10 + (Math_imul(i2, i6) | 0)) | 0;
     if (!i2) break;
     HEAP32[i12 + 40 >> 2] = HEAPU8[i2 >> 0] << 6;
    } while (0);
    HEAP32[i12 + 24 >> 2] = (HEAP32[i19 + 224 + 8 >> 2] | 0) - i8;
    i2 = i9 - (HEAP32[i19 + 224 + 4 >> 2] | 0) | 0;
    HEAP32[i12 + 28 >> 2] = i2;
    do if (!(HEAP8[i10 + 296 >> 0] | 0)) i16 = 122; else {
     if (!(HEAP16[i10 + 334 >> 1] | 0)) {
      i16 = 122;
      break;
     }
     i2 = (_FT_DivFix((HEAP32[i19 + 188 >> 2] | 0) - i9 | 0, i11) | 0) << 16 >> 16;
     i3 = HEAP32[i19 + 188 >> 2] | 0;
     i4 = HEAP32[i19 + 196 >> 2] | 0;
     if ((i3 | 0) <= (i4 | 0)) {
      i3 = 0;
      break;
     }
     i3 = (_FT_DivFix(i3 - i4 | 0, i11) | 0) & 65535;
    } while (0);
    if ((i16 | 0) == 122) {
     i2 = (_FT_DivFix(i2, i11) | 0) << 16 >> 16;
     if ((HEAP16[i10 + 368 >> 1] | 0) == -1) i4 = (HEAP16[i10 + 220 >> 1] | 0) - (HEAP16[i10 + 222 >> 1] | 0) | 0; else i4 = (HEAP16[i10 + 438 >> 1] | 0) - (HEAP16[i10 + 440 >> 1] | 0) | 0;
     i3 = i4;
     i2 = (i4 - i2 | 0) / 2 | 0;
    }
    i4 = HEAP32[(HEAP32[i10 + 128 >> 2] | 0) + 52 >> 2] | 0;
    do if (!i4) i16 = 130; else {
     i5 = HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0;
     if (!i5) {
      i16 = 130;
      break;
     }
     HEAP32[i19 + 208 >> 2] = 0;
     HEAP32[i19 + 208 + 4 >> 2] = i2;
     HEAP32[i19 + 208 + 8 >> 2] = i3;
     if (FUNCTION_TABLE_iiiii[i5 & 63](HEAP32[i4 + 4 >> 2] | 0, i15, 1, i19 + 208 | 0) | 0) break;
     i3 = HEAP32[i19 + 208 + 8 >> 2] | 0;
     i2 = HEAP32[i19 + 208 + 4 >> 2] | 0;
     i16 = 130;
    } while (0);
    if ((i16 | 0) == 130) {
     HEAP32[i12 + 60 >> 2] = i3;
     if (!(HEAP32[i19 + 16 >> 2] & 1)) {
      i2 = _FT_MulFix(i2, i11) | 0;
      i3 = _FT_MulFix(i3, i11) | 0;
     }
     HEAP32[i12 + 44 >> 2] = (HEAP32[i12 + 32 >> 2] | 0) - ((HEAP32[i12 + 40 >> 2] | 0) / 2 | 0);
     HEAP32[i12 + 48 >> 2] = i2;
     HEAP32[i12 + 52 >> 2] = i3;
    }
   }
   if (!i14 ? (HEAPU16[i17 + 14 >> 1] | 0) < 24 : 0) HEAP32[i18 + 124 >> 2] = HEAP32[i18 + 124 >> 2] | 256;
  } else i1 = 6;
 } while (0);
 i18 = i1;
 STACKTOP = i19;
 return i18 | 0;
}

function _T1_Face_Init(i3, i18, i14, i1, i2) {
 i3 = i3 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 1920 | 0;
 HEAP32[i18 >> 2] = 1;
 i15 = _ft_module_get_service(HEAP32[i18 + 96 >> 2] | 0, 327387) | 0;
 HEAP32[i18 + 484 >> 2] = i15;
 i16 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i18 + 96 >> 2] | 0) + 4 >> 2] | 0, 326535) | 0;
 HEAP32[i18 + 488 >> 2] = i16;
 if (!i16) {
  i18 = 11;
  STACKTOP = i17;
  return i18 | 0;
 }
 HEAP32[i18 + 552 >> 2] = _FT_Get_Module_Interface(HEAP32[(HEAP32[i18 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 i10 = HEAP32[i18 + 488 >> 2] | 0;
 _memset(i17 + 8 | 0, 0, 376) | 0;
 HEAP32[i18 + 536 >> 2] = -1;
 HEAP32[i18 + 540 >> 2] = -1;
 HEAP32[i18 + 544 >> 2] = 0;
 HEAP32[i18 + 280 >> 2] = 7;
 HEAP32[i18 + 284 >> 2] = 1;
 HEAP32[i18 + 172 >> 2] = 4;
 HEAP32[i18 + 348 >> 2] = 3932;
 HEAP32[i18 + 276 >> 2] = 2596864;
 i9 = HEAP32[i18 + 104 >> 2] | 0;
 i4 = HEAP32[i18 + 100 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[HEAP32[i10 + 4 >> 2] >> 2] & 15](i17 + 8 | 0, 0, 0, i4);
 HEAP32[i17 + 8 + 72 >> 2] = i9;
 i8 = i17 + 8 + 80 | 0;
 i12 = i17 + 8 + 76 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAP16[i12 + 16 >> 1] = 0;
 HEAP8[i12 + 18 >> 0] = 0;
 i1 = _check_type1_format(i9, 323224, 14) | 0;
 HEAP32[i17 + 400 >> 2] = i1;
 switch (i1 | 0) {
 case 0:
  {
   i13 = 4;
   break;
  }
 case 2:
  {
   i1 = _check_type1_format(i9, 323239, 10) | 0;
   HEAP32[i17 + 400 >> 2] = i1;
   if (!i1) i13 = 4; else i13 = 21;
   break;
  }
 default:
  i13 = 21;
 }
 L6 : do if ((i13 | 0) == 4) {
  i1 = _FT_Stream_Seek(i9, 0) | 0;
  HEAP32[i17 + 400 >> 2] = i1;
  if (!i1) {
   i3 = _FT_Stream_ReadUShort(i9, i17 + 1904 | 0) | 0;
   i1 = HEAP32[i17 + 1904 >> 2] | 0;
   do if (!i1) {
    if ((i3 + 32767 & 65535) < 2) {
     i1 = _FT_Stream_ReadULongLE(i9, i17 + 1904 | 0) | 0;
     i2 = HEAP32[i17 + 1904 >> 2] | 0;
     if (i2) {
      i1 = i2;
      break;
     }
     HEAP32[i17 + 400 >> 2] = 0;
     if (i3 << 16 >> 16 == -32767) HEAP8[i17 + 8 + 92 >> 0] = 1; else i13 = 11;
    } else {
     HEAP32[i17 + 400 >> 2] = 0;
     i13 = 11;
    }
    if ((i13 | 0) == 11) {
     i1 = _FT_Stream_Seek(i9, 0) | 0;
     HEAP32[i17 + 400 >> 2] = i1;
     if (i1) {
      i13 = 21;
      break L6;
     }
     i1 = HEAP32[i9 + 4 >> 2] | 0;
    }
    if (!(HEAP32[i9 + 20 >> 2] | 0)) {
     HEAP32[i12 >> 2] = (HEAP32[i9 >> 2] | 0) + (HEAP32[i9 + 8 >> 2] | 0);
     HEAP32[i8 >> 2] = i1;
     HEAP8[i17 + 8 + 93 >> 0] = 1;
     i1 = _FT_Stream_Skip(i9, i1) | 0;
     HEAP32[i17 + 400 >> 2] = i1;
     if (i1) {
      i13 = 21;
      break L6;
     }
     i1 = HEAP32[i8 >> 2] | 0;
    } else {
     i2 = _ft_mem_alloc(i4, i1, i17 + 400 | 0) | 0;
     HEAP32[i12 >> 2] = i2;
     i3 = HEAP32[i17 + 400 >> 2] | 0;
     if (i3) {
      i1 = i3;
      i13 = 21;
      break L6;
     }
     i2 = _FT_Stream_Read(i9, i2, i1) | 0;
     HEAP32[i17 + 400 >> 2] = i2;
     if (i2) {
      i1 = i2;
      i13 = 21;
      break L6;
     }
     HEAP32[i8 >> 2] = i1;
    }
    i6 = HEAP32[i12 >> 2] | 0;
    HEAP32[i17 + 8 + 4 >> 2] = i6;
    HEAP32[i17 + 8 >> 2] = i6;
    HEAP32[i17 + 8 + 8 >> 2] = i6 + i1;
    HEAP32[i17 >> 2] = 0;
    i5 = i1;
    i13 = 25;
    break L6;
   } while (0);
   HEAP32[i17 + 400 >> 2] = i1;
   i13 = 21;
  } else i13 = 21;
 } while (0);
 if ((i13 | 0) == 21) {
  if (!(HEAP8[i17 + 8 + 93 >> 0] | 0)) {
   _ft_mem_free(i4, HEAP32[i12 >> 2] | 0);
   HEAP32[i12 >> 2] = 0;
   i1 = HEAP32[i17 + 400 >> 2] | 0;
  }
  HEAP32[i17 >> 2] = i1;
  if (!i1) {
   i6 = HEAP32[i12 >> 2] | 0;
   i5 = HEAP32[i8 >> 2] | 0;
   i13 = 25;
  }
 }
 L34 : do if ((i13 | 0) == 25 ? (i6 = _parse_dict(i18, i17 + 8 | 0, i6, i5) | 0, HEAP32[i17 >> 2] = i6, (i6 | 0) == 0) : 0) {
  i9 = HEAP32[i17 + 8 + 72 >> 2] | 0;
  i6 = HEAP32[i17 + 8 + 16 >> 2] | 0;
  HEAP32[i17 + 400 >> 2] = 0;
  L37 : do if (HEAP8[i17 + 8 + 92 >> 0] | 0) {
   i4 = _FT_Stream_Pos(i9) | 0;
   i5 = i17 + 8 + 88 | 0;
   HEAP32[i5 >> 2] = 0;
   while (1) {
    i3 = _FT_Stream_ReadUShort(i9, i17 + 1904 | 0) | 0;
    i1 = HEAP32[i17 + 1904 >> 2] | 0;
    if (i1) {
     i13 = 32;
     break;
    }
    if ((i3 + 32767 & 65535) >= 2) {
     i13 = 30;
     break;
    }
    i2 = _FT_Stream_ReadULongLE(i9, i17 + 1904 | 0) | 0;
    i1 = HEAP32[i17 + 1904 >> 2] | 0;
    if (i1) {
     i13 = 32;
     break;
    }
    HEAP32[i17 + 400 >> 2] = 0;
    if (i3 << 16 >> 16 != -32766) break;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
    i1 = _FT_Stream_Skip(i9, i2) | 0;
    HEAP32[i17 + 400 >> 2] = i1;
    if (i1) break L37;
   }
   if ((i13 | 0) == 30) HEAP32[i17 + 400 >> 2] = 0; else if ((i13 | 0) == 32) {
    HEAP32[i17 + 400 >> 2] = i1;
    break;
   }
   if (!(HEAP32[i5 >> 2] | 0)) {
    HEAP32[i17 + 400 >> 2] = 3;
    i1 = 3;
    break;
   }
   i1 = _FT_Stream_Seek(i9, i4) | 0;
   HEAP32[i17 + 400 >> 2] = i1;
   if (!i1) {
    HEAP32[i17 + 8 + 84 >> 2] = _ft_mem_alloc(i6, HEAP32[i5 >> 2] | 0, i17 + 400 | 0) | 0;
    i1 = HEAP32[i17 + 400 >> 2] | 0;
    if (!i1) {
     HEAP32[i5 >> 2] = 0;
     i2 = _FT_Stream_ReadUShort(i9, i17 + 1904 | 0) | 0;
     i1 = HEAP32[i17 + 1904 >> 2] | 0;
     L104 : do if (!i1) while (1) {
      if ((i2 + 32767 & 65535) >= 2) {
       i1 = 0;
       i13 = 42;
       break L104;
      }
      i3 = _FT_Stream_ReadULongLE(i9, i17 + 1904 | 0) | 0;
      i1 = HEAP32[i17 + 1904 >> 2] | 0;
      if (i1) {
       i13 = 42;
       break L104;
      }
      HEAP32[i17 + 400 >> 2] = 0;
      if (i2 << 16 >> 16 != -32766) break L104;
      i1 = _FT_Stream_Read(i9, (HEAP32[i17 + 8 + 84 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0, i3) | 0;
      HEAP32[i17 + 400 >> 2] = i1;
      if (i1) break L37;
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i3;
      i2 = _FT_Stream_ReadUShort(i9, i17 + 1904 | 0) | 0;
      i1 = HEAP32[i17 + 1904 >> 2] | 0;
      if (i1) {
       i13 = 42;
       break;
      }
     } else i13 = 42; while (0);
     if ((i13 | 0) == 42) HEAP32[i17 + 400 >> 2] = i1;
     HEAP32[i17 + 400 >> 2] = 0;
     i2 = i17 + 8 + 84 | 0;
     i1 = i5;
     i13 = 82;
    }
   }
  } else {
   i3 = HEAP32[i12 >> 2] | 0;
   i4 = HEAP32[i8 >> 2] | 0;
   i1 = i3;
   i9 = i4;
   i5 = i3;
   i4 = i3 + i4 | 0;
   L39 : while (1) {
    i3 = i1;
    i2 = i5;
    while (1) {
     if ((((((HEAP8[i2 >> 0] | 0) == 101 ? (i7 = i2 + 9 | 0, i7 >>> 0 < i4 >>> 0) : 0) ? (HEAP8[i2 + 1 >> 0] | 0) == 101 : 0) ? (HEAP8[i2 + 2 >> 0] | 0) == 120 : 0) ? (HEAP8[i2 + 3 >> 0] | 0) == 101 : 0) ? (HEAP8[i2 + 4 >> 0] | 0) == 99 : 0) break;
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 >= i4 >>> 0) {
      i13 = 56;
      break L39;
     }
    }
    HEAP32[i17 + 8 >> 2] = i3;
    HEAP32[i17 + 8 + 8 >> 2] = i7;
    if (i1 >>> 0 < i7 >>> 0) {
     do {
      if ((HEAP8[i1 >> 0] | 0) == 101 ? (_strncmp(i1, 323250, 5) | 0) == 0 : 0) break L39;
      FUNCTION_TABLE_vi[HEAP32[i17 + 8 + 32 >> 2] & 127](i17 + 8 | 0);
      if (HEAP32[i17 + 8 + 12 >> 2] | 0) break;
      FUNCTION_TABLE_vi[HEAP32[i17 + 8 + 28 >> 2] & 127](i17 + 8 | 0);
      i1 = HEAP32[i17 + 8 >> 2] | 0;
     } while (i1 >>> 0 < i7 >>> 0);
     i2 = HEAP32[i12 >> 2] | 0;
     i3 = HEAP32[i8 >> 2] | 0;
    } else {
     i2 = i1;
     i3 = i9;
    }
    i1 = i2;
    i9 = i3;
    i5 = i7;
    i4 = i2 + i3 | 0;
   }
   if ((i13 | 0) == 56) {
    HEAP32[i17 + 400 >> 2] = 3;
    i1 = 3;
    break;
   }
   HEAP32[i17 + 8 + 8 >> 2] = (HEAP32[i12 >> 2] | 0) + (HEAP32[i8 >> 2] | 0);
   FUNCTION_TABLE_vi[HEAP32[i17 + 8 + 32 >> 2] & 127](i17 + 8 | 0);
   i1 = HEAP32[i17 + 8 >> 2] | 0;
   L63 : do if (i1 >>> 0 < i7 >>> 0) {
    L64 : while (1) {
     switch (HEAP8[i1 >> 0] | 0) {
     case 10:
     case 13:
     case 9:
     case 32:
      break;
     default:
      {
       i3 = i1;
       break L64;
      }
     }
     i1 = i1 + 1 | 0;
     if (i1 >>> 0 >= i7 >>> 0) break L63;
    }
    i2 = HEAP32[i12 >> 2] | 0;
    i9 = i2 - i3 + (HEAP32[i8 >> 2] | 0) | 0;
    if (!(HEAP8[i17 + 8 + 93 >> 0] | 0)) {
     HEAP8[i17 + 8 + 94 >> 0] = 1;
     HEAP32[i17 + 8 + 84 >> 2] = i2;
     HEAP32[i17 + 8 + 88 >> 2] = i9;
     HEAP32[i12 >> 2] = 0;
     HEAP32[i8 >> 2] = 0;
    } else {
     i2 = _ft_mem_alloc(i6, i9 + 1 | 0, i17 + 400 | 0) | 0;
     HEAP32[i17 + 8 + 84 >> 2] = i2;
     i1 = HEAP32[i17 + 400 >> 2] | 0;
     if (i1) break L37;
     HEAP32[i17 + 8 + 88 >> 2] = i9;
    }
    i1 = HEAPU8[i3 >> 0] | 0;
    if ((i1 + -48 | 0) >>> 0 < 10) i13 = 74; else switch (i1 | 0) {
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
     {
      i13 = 74;
      break;
     }
    default:
     {}
    }
    L75 : do if ((i13 | 0) == 74) {
     i1 = HEAPU8[i3 + 1 >> 0] | 0;
     if ((i1 + -48 | 0) >>> 0 >= 10) switch (i1 | 0) {
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 97:
     case 98:
     case 99:
     case 100:
     case 101:
     case 102:
      break;
     default:
      break L75;
     }
     i1 = HEAPU8[i3 + 2 >> 0] | 0;
     if ((i1 + -48 | 0) >>> 0 >= 10) switch (i1 | 0) {
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 97:
     case 98:
     case 99:
     case 100:
     case 101:
     case 102:
      break;
     default:
      break L75;
     }
     i1 = HEAPU8[i3 + 3 >> 0] | 0;
     if ((i1 + -48 | 0) >>> 0 >= 10) switch (i1 | 0) {
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 97:
     case 98:
     case 99:
     case 100:
     case 101:
     case 102:
      break;
     default:
      break L75;
     }
     HEAP32[i17 + 8 >> 2] = i3;
     FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i10 + 4 >> 2] | 0) + 24 >> 2] & 63](i17 + 8 | 0, i2, i9, i17 + 384 | 0, 0) | 0;
     i2 = HEAP32[i17 + 384 >> 2] | 0;
     HEAP32[i17 + 8 + 88 >> 2] = i2;
     HEAP8[(HEAP32[i17 + 8 + 84 >> 2] | 0) + i2 >> 0] = 0;
     i2 = i17 + 8 + 84 | 0;
     i1 = i17 + 8 + 88 | 0;
     i13 = 82;
     break L37;
    } while (0);
    _memmove(i2 | 0, i3 | 0, i9 | 0) | 0;
    i2 = i17 + 8 + 84 | 0;
    i1 = i17 + 8 + 88 | 0;
    i13 = 82;
    break L37;
   } while (0);
   HEAP32[i17 + 400 >> 2] = 3;
   i1 = 3;
  } while (0);
  do if ((i13 | 0) == 82) {
   FUNCTION_TABLE_viii[HEAP32[i10 + 16 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0, -9871);
   if ((HEAP32[i1 >> 2] | 0) >>> 0 < 4) {
    HEAP32[i17 + 400 >> 2] = 3;
    i1 = 3;
    break;
   }
   HEAP8[HEAP32[i2 >> 2] >> 0] = 32;
   HEAP8[(HEAP32[i2 >> 2] | 0) + 1 >> 0] = 32;
   HEAP8[(HEAP32[i2 >> 2] | 0) + 2 >> 0] = 32;
   HEAP8[(HEAP32[i2 >> 2] | 0) + 3 >> 0] = 32;
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP32[i17 + 8 + 4 >> 2] = i10;
   HEAP32[i17 + 8 >> 2] = i10;
   HEAP32[i17 + 8 + 8 >> 2] = i10 + (HEAP32[i1 >> 2] | 0);
   i10 = HEAP32[i17 + 400 >> 2] | 0;
   HEAP32[i17 >> 2] = i10;
   if (i10) break L34;
   i10 = _parse_dict(i18, i17 + 8 | 0, HEAP32[i17 + 8 + 84 >> 2] | 0, HEAP32[i17 + 8 + 88 >> 2] | 0) | 0;
   HEAP32[i17 >> 2] = i10;
   if (i10) break L34;
   HEAP8[i18 + 176 >> 0] = HEAPU8[i18 + 176 >> 0] & 254;
   i2 = HEAP32[i18 + 532 >> 2] | 0;
   L121 : do if (i2) {
    i10 = HEAP32[i2 + 416 >> 2] | 0;
    if ((i10 | 0) != 0 ? (i10 | 0) != (HEAP32[i2 + 4 >> 2] | 0) : 0) HEAP32[i2 + 416 >> 2] = 0;
    if ((HEAP32[i2 >> 2] | 0) != 0 ? (i11 = HEAP32[i2 + 4 >> 2] | 0, (i11 | 0) != 0) : 0) {
     i1 = i11;
     i13 = 95;
    } else {
     _T1_Done_Blend(i18);
     i2 = HEAP32[i18 + 532 >> 2] | 0;
     if (!i2) {
      i13 = 102;
      break;
     }
     i1 = HEAP32[i2 + 4 >> 2] | 0;
     if (i1) i13 = 95;
    }
    L132 : do if ((i13 | 0) == 95) {
     i3 = 0;
     while (1) {
      if (!(HEAP8[i2 + 88 + (i3 * 12 | 0) >> 0] | 0)) break;
      i3 = i3 + 1 | 0;
      if (i3 >>> 0 >= i1 >>> 0) break L132;
     }
     _T1_Done_Blend(i18);
     if (!(HEAP32[i18 + 532 >> 2] | 0)) {
      i13 = 102;
      break L121;
     }
    } while (0);
    i1 = HEAP32[i18 + 544 >> 2] | 0;
    if ((i1 | 0) != 0 ? (HEAP32[i18 + 548 >> 2] = _ft_mem_realloc(HEAP32[i18 + 100 >> 2] | 0, 4, 0, i1, 0, i17) | 0, (HEAP32[i17 >> 2] | 0) != 0) : 0) {
     HEAP32[i18 + 544 >> 2] = 0;
     break L34;
    }
   } else i13 = 102; while (0);
   if ((i13 | 0) == 102) HEAP32[i18 + 544 >> 2] = 0;
   i7 = HEAP32[i17 + 8 + 152 >> 2] | 0;
   HEAP32[i18 + 416 >> 2] = i7;
   if (HEAP32[i17 + 8 + 328 >> 2] | 0) {
    HEAP32[i17 + 8 + 328 >> 2] = 0;
    HEAP32[i18 + 404 >> 2] = HEAP32[i17 + 8 + 312 >> 2];
    HEAP32[i18 + 392 >> 2] = HEAP32[i17 + 8 + 316 >> 2];
    HEAP32[i18 + 408 >> 2] = HEAP32[i17 + 8 + 340 >> 2];
    HEAP32[i18 + 412 >> 2] = HEAP32[i17 + 8 + 344 >> 2];
   }
   if ((HEAP32[i17 + 8 + 220 >> 2] | 0) == 0 ? (HEAP32[(HEAP32[i18 + 128 >> 2] | 0) + 52 >> 2] | 0) == 0 : 0) HEAP32[i17 >> 2] = 3;
   HEAP32[i17 + 8 + 220 >> 2] = 0;
   HEAP32[i18 + 396 >> 2] = HEAP32[i17 + 8 + 208 >> 2];
   HEAP32[i18 + 424 >> 2] = HEAP32[i17 + 8 + 232 >> 2];
   HEAP32[i18 + 428 >> 2] = HEAP32[i17 + 8 + 236 >> 2];
   HEAP32[i18 + 400 >> 2] = HEAP32[i17 + 8 + 156 >> 2];
   HEAP32[i18 + 420 >> 2] = HEAP32[i17 + 8 + 180 >> 2];
   HEAP32[i17 + 8 + 156 >> 2] = 0;
   HEAP32[i17 + 8 + 180 >> 2] = 0;
   if ((HEAP32[i18 + 368 >> 2] | 0) != 1) break L34;
   i9 = HEAP32[i17 + 8 + 116 >> 2] | 0;
   L151 : do if ((i9 | 0) > 0) {
    if ((i7 | 0) < 1) {
     i1 = 0;
     while (1) {
      HEAP16[(HEAP32[i18 + 384 >> 2] | 0) + (i1 << 1) >> 1] = 0;
      HEAP32[(HEAP32[i18 + 388 >> 2] | 0) + (i1 << 2) >> 2] = 323974;
      i1 = i1 + 1 | 0;
      if ((i1 | 0) == (i9 | 0)) {
       i2 = 0;
       i1 = 0;
       break L151;
      }
     }
    } else {
     i8 = 0;
     i2 = 0;
     i1 = 0;
    }
    do {
     HEAP16[(HEAP32[i18 + 384 >> 2] | 0) + (i8 << 1) >> 1] = 0;
     HEAP32[(HEAP32[i18 + 388 >> 2] | 0) + (i8 << 2) >> 2] = 323974;
     i4 = HEAP32[(HEAP32[i17 + 8 + 124 >> 2] | 0) + (i8 << 2) >> 2] | 0;
     L158 : do if (i4) {
      i5 = HEAP32[i18 + 420 >> 2] | 0;
      i3 = 0;
      while (1) {
       i6 = HEAP32[i5 + (i3 << 2) >> 2] | 0;
       if (!(_strcmp(i4, i6) | 0)) break;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) >= (i7 | 0)) break L158;
      }
      HEAP16[(HEAP32[i18 + 384 >> 2] | 0) + (i8 << 1) >> 1] = i3;
      HEAP32[(HEAP32[i18 + 388 >> 2] | 0) + (i8 << 2) >> 2] = i6;
      if (_strcmp(323974, i6) | 0) {
       i2 = (i8 | 0) < (i2 | 0) ? i2 : i8 + 1 | 0;
       i1 = (i8 | 0) < (i1 | 0) ? i8 : i1;
      }
     } while (0);
     i8 = i8 + 1 | 0;
    } while ((i8 | 0) != (i9 | 0));
   } else {
    i2 = 0;
    i1 = 0;
   } while (0);
   HEAP32[i18 + 376 >> 2] = i1;
   HEAP32[i18 + 380 >> 2] = i2;
   HEAP32[i18 + 372 >> 2] = HEAP32[i17 + 8 + 96 >> 2];
   break L34;
  } while (0);
  HEAP32[i17 >> 2] = i1;
 } while (0);
 i1 = HEAP32[i17 + 8 + 148 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i17 + 8 + 100 | 0);
 i1 = HEAP32[i17 + 8 + 256 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i17 + 8 + 208 | 0);
 i1 = HEAP32[i17 + 8 + 204 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i17 + 8 + 156 | 0);
 i1 = HEAP32[i17 + 8 + 308 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i17 + 8 + 260 | 0);
 i1 = HEAP32[i17 + 8 + 364 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i17 + 8 + 316 | 0);
 i1 = HEAP32[i17 + 8 + 16 >> 2] | 0;
 _ft_mem_free(i1, HEAP32[i17 + 8 + 84 >> 2] | 0);
 HEAP32[i17 + 8 + 84 >> 2] = 0;
 if (!(HEAP8[i17 + 8 + 93 >> 0] | 0)) {
  _ft_mem_free(i1, HEAP32[i12 >> 2] | 0);
  HEAP32[i12 >> 2] = 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i17 + 8 + 24 >> 2] & 127](i17 + 8 | 0);
 i1 = HEAP32[i17 >> 2] | 0;
 if ((i14 | 0) < 0 | (i1 | 0) != 0) {
  i18 = i1;
  STACKTOP = i17;
  return i18 | 0;
 }
 if ((i14 | 0) > 0) {
  i18 = 6;
  STACKTOP = i17;
  return i18 | 0;
 }
 HEAP32[i18 + 16 >> 2] = HEAP32[i18 + 416 >> 2];
 HEAP32[i18 + 4 >> 2] = 0;
 i1 = (HEAP8[i18 + 156 >> 0] | 0) == 0 ? 2577 : 2581;
 HEAP32[i18 + 8 >> 2] = i1;
 i9 = HEAP32[i18 + 532 >> 2] | 0;
 if (i9) HEAP32[i18 + 8 >> 2] = i1 | 256;
 i3 = HEAP32[i18 + 144 >> 2] | 0;
 HEAP32[i18 + 20 >> 2] = i3;
 HEAP32[i18 + 24 >> 2] = 0;
 L196 : do if (!i3) {
  i1 = HEAP32[i18 + 364 >> 2] | 0;
  if (!i1) i13 = 149; else {
   HEAP32[i18 + 20 >> 2] = i1;
   i13 = 149;
  }
 } else {
  i1 = HEAP32[i18 + 140 >> 2] | 0;
  if (!i1) i13 = 149; else {
   i2 = HEAP8[i1 >> 0] | 0;
   L201 : do if (i2 << 24 >> 24) {
    L202 : while (1) {
     i4 = HEAP8[i3 >> 0] | 0;
     L204 : while (1) {
      if (i2 << 24 >> 24 == i4 << 24 >> 24) {
       i13 = 140;
       break;
      }
      switch (i2 << 24 >> 24) {
      case 45:
      case 32:
       break;
      default:
       {
        i13 = 144;
        break L204;
       }
      }
      i1 = i1 + 1 | 0;
      i2 = HEAP8[i1 >> 0] | 0;
      if (!(i2 << 24 >> 24)) break L201;
     }
     if ((i13 | 0) == 140) {
      i13 = 0;
      i1 = i1 + 1 | 0;
     } else if ((i13 | 0) == 144) {
      i13 = 0;
      switch (i4 << 24 >> 24) {
      case 0:
       break L202;
      case 45:
      case 32:
       break;
      default:
       {
        i13 = 149;
        break L196;
       }
      }
     }
     i2 = HEAP8[i1 >> 0] | 0;
     if (!(i2 << 24 >> 24)) break L201; else i3 = i3 + 1 | 0;
    }
    HEAP32[i18 + 24 >> 2] = i1;
    if (!i1) {
     i13 = 149;
     break L196;
    } else break L196;
   } while (0);
   HEAP32[i18 + 24 >> 2] = 324290;
  }
 } while (0);
 do if ((i13 | 0) == 149) {
  i1 = HEAP32[i18 + 148 >> 2] | 0;
  if (!i1) {
   HEAP32[i18 + 24 >> 2] = 324290;
   break;
  } else {
   HEAP32[i18 + 24 >> 2] = i1;
   break;
  }
 } while (0);
 i1 = (HEAP32[i18 + 152 >> 2] | 0) != 0 & 1;
 HEAP32[i18 + 12 >> 2] = i1;
 i2 = HEAP32[i18 + 148 >> 2] | 0;
 do if (i2) {
  if ((_strcmp(i2, 324256) | 0) != 0 ? (_strcmp(i2, 323534) | 0) != 0 : 0) break;
  HEAP32[i18 + 12 >> 2] = i1 | 2;
 } while (0);
 HEAP32[i18 + 28 >> 2] = 0;
 HEAP32[i18 + 32 >> 2] = 0;
 HEAP32[i18 + 52 >> 2] = HEAP32[i18 + 460 >> 2] >> 16;
 i2 = HEAP32[i18 + 460 + 4 >> 2] >> 16;
 HEAP32[i18 + 56 >> 2] = i2;
 i3 = (HEAP32[i18 + 460 + 8 >> 2] | 0) + 65535 >> 16;
 HEAP32[i18 + 60 >> 2] = i3;
 i4 = (HEAP32[i18 + 460 + 12 >> 2] | 0) + 65535 >> 16;
 HEAP32[i18 + 64 >> 2] = i4;
 i1 = HEAP16[i18 + 68 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  HEAP16[i18 + 68 >> 1] = 1e3;
  i1 = 1e3;
 }
 HEAP16[i18 + 70 >> 1] = i4;
 HEAP16[i18 + 72 >> 1] = i2;
 i14 = (((i1 & 65535) * 12 | 0) >>> 0) / 10 | 0;
 HEAP16[i18 + 74 >> 1] = (i14 << 16 >> 16 | 0) < (i4 - i2 | 0) ? i4 - i2 | 0 : i14;
 HEAP16[i18 + 76 >> 1] = i3;
 i4 = (HEAP32[i18 + 488 >> 2] | 0) + 12 | 0;
 if (!(FUNCTION_TABLE_iiiiiiiiii[HEAP32[HEAP32[i4 >> 2] >> 2] & 1](i17 + 400 | 0, i18, 0, 0, HEAP32[i18 + 420 >> 2] | 0, i9, 0, 0, 151) | 0)) {
  HEAP8[i17 + 400 + 70 >> 0] = 1;
  HEAP8[i17 + 400 + 68 >> 0] = 0;
  HEAP32[i17 + 400 + 1364 >> 2] = HEAP32[i18 + 404 >> 2];
  HEAP32[i17 + 400 + 1368 >> 2] = HEAP32[i18 + 408 >> 2];
  HEAP32[i17 + 400 + 1372 >> 2] = HEAP32[i18 + 412 >> 2];
  HEAP32[i17 + 400 + 1488 >> 2] = HEAP32[i18 + 548 >> 2];
  HEAP32[i17 + 400 + 1492 >> 2] = HEAP32[i18 + 544 >> 2];
  if ((HEAP32[i18 + 416 >> 2] | 0) > 0) {
   i1 = 0;
   i3 = 0;
   do {
    do if (!(_T1_Parse_Glyph_And_Get_Char_String(i17 + 400 | 0, i3, i17 + 1904 | 0) | 0)) {
     i2 = HEAP32[(HEAP32[(HEAP32[i17 + 400 + 4 >> 2] | 0) + 128 >> 2] | 0) + 52 >> 2] | 0;
     if (!i2) break;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i2 + 4 >> 2] | 0, i17 + 1904 | 0);
    } while (0);
    i14 = HEAP32[i17 + 400 + 40 >> 2] | 0;
    i1 = (i3 | 0) == 0 | (i14 | 0) > (i1 | 0) ? i14 : i1;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (HEAP32[i18 + 416 >> 2] | 0));
  } else i1 = 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] & 127](i17 + 400 | 0);
  HEAP16[i18 + 76 >> 1] = (_FT_RoundFix(i1) | 0) >>> 16;
 }
 HEAP16[i18 + 78 >> 1] = HEAP16[i18 + 74 >> 1] | 0;
 HEAP16[i18 + 80 >> 1] = HEAP16[i18 + 132 + 26 >> 1] | 0;
 HEAP16[i18 + 82 >> 1] = HEAP16[i18 + 160 >> 1] | 0;
 if (!i15) {
  i18 = 0;
  STACKTOP = i17;
  return i18 | 0;
 }
 i1 = HEAP32[i16 + 20 >> 2] | 0;
 HEAP32[i17 + 388 >> 2] = i18;
 HEAP16[i17 + 388 + 8 >> 1] = 3;
 i2 = i17 + 388 + 10 | 0;
 HEAP16[i2 >> 1] = 1;
 i3 = i17 + 388 + 4 | 0;
 HEAP32[i3 >> 2] = 1970170211;
 i4 = _FT_CMap_New(HEAP32[i1 + 12 >> 2] | 0, 0, i17 + 388 | 0, 0) | 0;
 switch (i4 | 0) {
 case 0:
 case 163:
  break;
 default:
  {
   i18 = i4;
   STACKTOP = i17;
   return i18 | 0;
  }
 }
 HEAP16[i17 + 388 + 8 >> 1] = 7;
 switch (HEAP32[i18 + 368 >> 2] | 0) {
 case 2:
  {
   HEAP32[i3 >> 2] = 1094995778;
   HEAP16[i2 >> 1] = 0;
   break;
  }
 case 4:
  {
   HEAP32[i3 >> 2] = 1094992453;
   HEAP16[i2 >> 1] = 1;
   i1 = i1 + 4 | 0;
   break;
  }
 case 1:
  {
   HEAP32[i3 >> 2] = 1094992451;
   HEAP16[i2 >> 1] = 2;
   i1 = i1 + 8 | 0;
   break;
  }
 case 3:
  {
   HEAP32[i3 >> 2] = 1818326065;
   HEAP16[i2 >> 1] = 3;
   i1 = i1 + 12 | 0;
   break;
  }
 default:
  {
   i18 = 0;
   STACKTOP = i17;
   return i18 | 0;
  }
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i18 = 0;
  STACKTOP = i17;
  return i18 | 0;
 }
 i18 = _FT_CMap_New(i1, 0, i17 + 388 | 0, 0) | 0;
 STACKTOP = i17;
 return i18 | 0;
}

function __ZN8Graphics12CreateWindowEP6engine13TextureFormatS2_i(i7, i6, i1, i2, i3, i5) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 880 | 0;
 HEAP32[i6 + 148 >> 2] = i1;
 HEAP32[i8 + 288 >> 2] = 12339;
 HEAP32[i8 + 288 + 4 >> 2] = 4;
 HEAP32[i8 + 288 + 8 >> 2] = 12322;
 L1 : do if ((i2 | 0) < 57) {
  switch (i2 | 0) {
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i1 = 32;
    i4 = 12;
    break L1;
   }
  case 25:
  case 24:
  case 23:
  case 26:
   {
    i4 = 3;
    break L1;
   }
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
   {
    i4 = 5;
    break L1;
   }
  case 20:
  case 55:
  case 45:
  case 40:
  case 56:
  case 54:
  case 53:
  case 46:
  case 39:
  case 43:
  case 42:
  case 41:
  case 21:
  case 18:
  case 17:
  case 16:
  case 15:
  case 38:
  case 37:
  case 36:
  case 35:
  case 34:
  case 33:
  case 22:
  case 47:
  case 52:
  case 51:
  case 50:
  case 49:
  case 48:
  case 44:
  case 19:
   {
    i4 = 9;
    break L1;
   }
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   break;
  default:
   {
    i4 = 11;
    break L1;
   }
  }
  i1 = 16;
  i4 = 12;
 } else {
  L5 : do if ((i2 | 0) < 85) {
   switch (i2 | 0) {
   case 69:
   case 68:
    {
     i4 = 5;
     break L1;
    }
   case 65:
   case 66:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
   case 59:
   case 58:
   case 57:
    {
     i4 = 9;
     break L1;
    }
   case 84:
   case 83:
   case 82:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
   case 81:
   case 80:
   case 79:
   case 72:
   case 71:
   case 70:
    break L5;
   case 67:
    break;
   default:
    {
     i4 = 11;
     break L1;
    }
   }
   HEAP32[i8 + 288 + 12 >> 2] = 9;
   HEAP32[i8 + 288 + 16 >> 2] = 12323;
   i1 = i8 + 288 + 20 | 0;
   i4 = 16;
   break L1;
  } else {
   L9 : do if ((i2 | 0) < 99) switch (i2 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 88:
   case 87:
    {
     i4 = 5;
     break L1;
    }
   case 89:
    {
     i4 = 3;
     break L1;
    }
   case 98:
   case 97:
   case 96:
   case 95:
   case 94:
    break L5;
   case 86:
   case 85:
    break;
   default:
    {
     i4 = 11;
     break L1;
    }
   } else {
    L12 : do if ((i2 | 0) < 1048581) {
     if ((i2 | 0) >= 1048577) switch (i2 | 0) {
     case 1048579:
      {
       i4 = 9;
       break L1;
      }
     case 1048577:
     case 1048580:
      break L9;
     case 1048578:
      break L12;
     default:
      {
       i4 = 11;
       break L1;
      }
     }
     if ((i2 | 0) < 115) switch (i2 | 0) {
     case 99:
      break L5;
     default:
      {
       i4 = 11;
       break L1;
      }
     }
     if ((i2 | 0) < 1048576) switch (i2 | 0) {
     case 115:
      break L12;
     default:
      {
       i4 = 11;
       break L1;
      }
     } else switch (i2 | 0) {
     case 1048576:
      break L5;
     default:
      {
       i4 = 11;
       break L1;
      }
     }
    } else {
     L24 : do if ((i2 | 0) < 4194333) if ((i2 | 0) < 4194324) switch (i2 | 0) {
     case 1048583:
      break L12;
     case 1048581:
      break L24;
     default:
      {
       i4 = 11;
       break L1;
      }
     } else switch (i2 | 0) {
     case 4194324:
      {
       i4 = 5;
       break L1;
      }
     case 4194331:
      break L24;
     default:
      {
       i4 = 11;
       break L1;
      }
     } else switch (i2 | 0) {
     case 4194337:
      {
       i4 = 5;
       break L1;
      }
     case 4194339:
      {
       i4 = 3;
       break L1;
      }
     case 4194334:
      break L12;
     case 4194333:
      break;
     default:
      {
       i4 = 11;
       break L1;
      }
     } while (0);
     i1 = 2;
     i4 = 12;
     break L1;
    } while (0);
    i1 = 4;
    i4 = 12;
    break L1;
   } while (0);
   i1 = 5;
   i4 = 12;
   break L1;
  } while (0);
  i1 = 0;
  i4 = 12;
 } while (0);
 if ((i4 | 0) == 3) {
  i1 = 10;
  i4 = 12;
 } else if ((i4 | 0) == 5) {
  i1 = 8;
  i4 = 12;
 } else if ((i4 | 0) == 9) {
  i1 = 0;
  i4 = 12;
 } else if ((i4 | 0) == 11) {
  i1 = 0;
  i4 = 12;
 }
 L39 : do if ((i4 | 0) == 12) {
  HEAP32[i8 + 288 + 12 >> 2] = i1;
  HEAP32[i8 + 288 + 16 >> 2] = 12323;
  L41 : do if ((i2 | 0) < 57) switch (i2 | 0) {
  case 18:
  case 17:
  case 16:
  case 15:
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i1 = 32;
    i4 = 25;
    break L41;
   }
  case 25:
  case 24:
  case 23:
   {
    i4 = 15;
    break L41;
   }
  case 22:
  case 47:
  case 52:
  case 51:
  case 50:
  case 49:
  case 48:
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
  case 44:
  case 19:
   {
    i4 = 17;
    break L41;
   }
  case 20:
  case 55:
  case 45:
  case 40:
  case 56:
  case 54:
  case 53:
  case 46:
  case 39:
  case 43:
  case 42:
  case 41:
  case 21:
   {
    i4 = 22;
    break L41;
   }
  case 38:
  case 37:
  case 36:
  case 35:
  case 34:
  case 33:
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i1 = 16;
    i4 = 25;
    break L41;
   }
  case 26:
   {
    HEAP32[i8 + 288 + 20 >> 2] = 11;
    HEAP32[i8 + 288 + 24 >> 2] = 12324;
    i1 = i8 + 288 + 28 | 0;
    i4 = 28;
    break L41;
   }
  default:
   {
    i4 = 24;
    break L41;
   }
  } else {
   L47 : do if ((i2 | 0) < 85) switch (i2 | 0) {
   case 67:
    {
     i1 = i8 + 288 + 20 | 0;
     i4 = 16;
     break L39;
    }
   case 69:
   case 68:
    {
     i4 = 17;
     break L41;
    }
   case 65:
   case 66:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
   case 59:
   case 58:
   case 57:
    {
     i4 = 22;
     break L41;
    }
   case 84:
   case 83:
   case 82:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
   case 81:
   case 80:
   case 79:
   case 72:
   case 71:
   case 70:
    break;
   default:
    {
     i4 = 24;
     break L41;
    }
   } else {
    L50 : do if ((i2 | 0) < 99) {
     switch (i2 | 0) {
     case 93:
     case 92:
     case 91:
     case 90:
     case 88:
     case 87:
      {
       i4 = 17;
       break L41;
      }
     case 89:
      {
       i4 = 15;
       break L41;
      }
     case 98:
     case 97:
     case 96:
     case 95:
     case 94:
      break L47;
     case 86:
      break L50;
     case 85:
      break;
     default:
      {
       i4 = 24;
       break L41;
      }
     }
     HEAP32[i8 + 288 + 20 >> 2] = 6;
     HEAP32[i8 + 288 + 24 >> 2] = 12324;
     i1 = i8 + 288 + 28 | 0;
     i4 = 32;
     break L41;
    } else {
     L54 : do if ((i2 | 0) < 1048581) {
      if ((i2 | 0) >= 1048577) switch (i2 | 0) {
      case 1048579:
       {
        i4 = 22;
        break L41;
       }
      case 1048577:
      case 1048580:
       break L50;
      case 1048578:
       break L54;
      default:
       {
        i4 = 24;
        break L41;
       }
      }
      if ((i2 | 0) < 115) switch (i2 | 0) {
      case 99:
       break L47;
      default:
       {
        i4 = 24;
        break L41;
       }
      }
      if ((i2 | 0) < 1048576) switch (i2 | 0) {
      case 115:
       break L54;
      default:
       {
        i4 = 24;
        break L41;
       }
      } else switch (i2 | 0) {
      case 1048576:
       break L47;
      default:
       {
        i4 = 24;
        break L41;
       }
      }
     } else {
      L66 : do if ((i2 | 0) < 4194333) if ((i2 | 0) < 4194324) switch (i2 | 0) {
      case 1048583:
       break L54;
      case 1048581:
       break L66;
      default:
       {
        i4 = 24;
        break L41;
       }
      } else switch (i2 | 0) {
      case 4194324:
       {
        i4 = 17;
        break L41;
       }
      case 4194331:
       break L66;
      default:
       {
        i4 = 24;
        break L41;
       }
      } else switch (i2 | 0) {
      case 4194337:
       {
        i4 = 17;
        break L41;
       }
      case 4194339:
       {
        i4 = 15;
        break L41;
       }
      case 4194334:
       break L54;
      case 4194333:
       break;
      default:
       {
        i4 = 24;
        break L41;
       }
      } while (0);
      i1 = 3;
      i4 = 25;
      break L41;
     } while (0);
     i1 = 4;
     i4 = 25;
     break L41;
    } while (0);
    i1 = 5;
    i4 = 25;
    break L41;
   } while (0);
   i1 = 0;
   i4 = 25;
  } while (0);
  if ((i4 | 0) == 15) {
   i1 = 10;
   i4 = 25;
  } else if ((i4 | 0) == 17) {
   i1 = 8;
   i4 = 25;
  } else if ((i4 | 0) == 22) {
   i1 = 0;
   i4 = 25;
  } else if ((i4 | 0) == 24) {
   i1 = 0;
   i4 = 25;
  }
  L81 : do if ((i4 | 0) == 25) {
   HEAP32[i8 + 288 + 20 >> 2] = i1;
   HEAP32[i8 + 288 + 24 >> 2] = 12324;
   i1 = i8 + 288 + 28 | 0;
   L83 : do if ((i2 | 0) < 58) {
    switch (i2 | 0) {
    case 39:
    case 43:
    case 42:
    case 41:
    case 21:
    case 19:
    case 18:
    case 17:
    case 16:
    case 15:
    case 8:
    case 7:
    case 6:
    case 5:
    case 4:
    case 3:
    case 2:
    case 1:
     {
      i2 = 32;
      break L39;
     }
    case 26:
     {
      i4 = 28;
      break L81;
     }
    case 57:
    case 56:
    case 54:
    case 53:
    case 38:
    case 37:
    case 36:
    case 35:
    case 34:
    case 33:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
     {
      i4 = 27;
      break L83;
     }
    case 25:
    case 24:
    case 23:
     {
      i4 = 29;
      break L83;
     }
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
    case 32:
    case 31:
    case 30:
    case 29:
    case 28:
    case 27:
     {
      i4 = 31;
      break L83;
     }
    case 22:
    case 20:
    case 55:
    case 47:
    case 45:
    case 40:
     {
      i4 = 36;
      break L83;
     }
    case 46:
    case 44:
     break;
    default:
     {
      i4 = 38;
      break L83;
     }
    }
    i2 = 24;
    break L39;
   } else {
    L87 : do if ((i2 | 0) < 87) {
     switch (i2 | 0) {
     case 67:
      {
       i4 = 30;
       break L39;
      }
     case 86:
     case 85:
      {
       i4 = 32;
       break L81;
      }
     case 59:
     case 58:
      {
       i4 = 27;
       break L83;
      }
     case 64:
     case 63:
     case 62:
     case 61:
     case 60:
     case 69:
     case 68:
      {
       i4 = 31;
       break L83;
      }
     case 65:
      {
       i4 = 36;
       break L83;
      }
     case 84:
     case 83:
     case 82:
     case 78:
     case 77:
     case 76:
     case 75:
     case 74:
     case 73:
     case 81:
     case 80:
     case 79:
     case 72:
     case 71:
     case 70:
      break L87;
     case 66:
      break;
     default:
      {
       i4 = 38;
       break L83;
      }
     }
     i2 = 1;
     break L39;
    } else {
     L91 : do if ((i2 | 0) < 1048576) switch (i2 | 0) {
     case 93:
     case 92:
     case 91:
     case 90:
     case 88:
     case 87:
      {
       i4 = 31;
       break L83;
      }
     case 89:
      {
       i4 = 29;
       break L83;
      }
     case 99:
     case 98:
     case 97:
     case 96:
     case 95:
     case 94:
      break L87;
     case 115:
      break;
     default:
      {
       i4 = 38;
       break L83;
      }
     } else {
      if ((i2 | 0) < 4194324) switch (i2 | 0) {
      case 1048577:
      case 1048580:
       {
        i4 = 32;
        break L81;
       }
      case 1048579:
       {
        i4 = 31;
        break L83;
       }
      case 1048576:
       break L87;
      case 1048583:
      case 1048578:
       break L91;
      case 1048581:
       break;
      default:
       {
        i4 = 38;
        break L83;
       }
      } else switch (i2 | 0) {
      case 4194354:
      case 4194337:
      case 4194324:
       {
        i4 = 31;
        break L83;
       }
      case 4194339:
       {
        i4 = 29;
        break L83;
       }
      case 4194356:
      case 4194334:
       break L91;
      case 4194333:
      case 4194331:
       break;
      default:
       {
        i4 = 38;
        break L83;
       }
      }
      i2 = 3;
      break L39;
     } while (0);
     i2 = 4;
     break L39;
    } while (0);
    i2 = 0;
    break L39;
   } while (0);
   if ((i4 | 0) == 27) {
    i2 = 16;
    break L39;
   } else if ((i4 | 0) == 29) {
    i2 = 10;
    break L39;
   } else if ((i4 | 0) == 31) {
    i2 = 8;
    break L39;
   } else if ((i4 | 0) == 36) {
    i2 = 0;
    break L39;
   } else if ((i4 | 0) == 38) {
    i2 = 0;
    break L39;
   }
  } while (0);
  if ((i4 | 0) == 28) {
   i2 = 11;
   break;
  } else if ((i4 | 0) == 32) {
   i2 = 5;
   break;
  }
 } while (0);
 if ((i4 | 0) == 16) {
  HEAP32[i1 >> 2] = 9;
  HEAP32[i8 + 288 + 24 >> 2] = 12324;
  i1 = i8 + 288 + 28 | 0;
  i4 = 30;
 }
 if ((i4 | 0) == 30) i2 = 9;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i8 + 288 + 32 >> 2] = 12325;
 L114 : do if ((i3 | 0) < 45) switch (i3 | 0) {
 case 40:
 case 20:
  {
   i1 = 32;
   i4 = 43;
   break;
  }
 default:
  i4 = 42;
 } else {
  if ((i3 | 0) < 55) {
   switch (i3 | 0) {
   case 45:
    break;
   default:
    {
     i4 = 42;
     break L114;
    }
   }
   HEAP32[i8 + 288 + 36 >> 2] = 24;
   HEAP32[i8 + 288 + 40 >> 2] = 12326;
   i2 = 8;
   i1 = i8 + 288 + 44 | 0;
   break;
  }
  if ((i3 | 0) >= 1048582) switch (i3 | 0) {
  case 1048582:
   {
    i1 = 32;
    i4 = 43;
    break L114;
   }
  default:
   {
    i4 = 42;
    break L114;
   }
  }
  switch (i3 | 0) {
  case 55:
   break;
  default:
   {
    i4 = 42;
    break L114;
   }
  }
  HEAP32[i8 + 288 + 36 >> 2] = 16;
  HEAP32[i8 + 288 + 40 >> 2] = 12326;
  i1 = i8 + 288 + 44 | 0;
  i4 = 44;
 } while (0);
 if ((i4 | 0) == 42) {
  i1 = 0;
  i4 = 43;
 }
 L127 : do if ((i4 | 0) == 43) {
  HEAP32[i8 + 288 + 36 >> 2] = i1;
  HEAP32[i8 + 288 + 40 >> 2] = 12326;
  i1 = i8 + 288 + 44 | 0;
  if ((i3 | 0) < 45) switch (i3 | 0) {
  case 20:
   {
    i2 = 8;
    break L127;
   }
  default:
   {
    i4 = 44;
    break L127;
   }
  }
  if ((i3 | 0) < 1048584) switch (i3 | 0) {
  case 45:
   {
    i2 = 8;
    break L127;
   }
  default:
   {
    i4 = 44;
    break L127;
   }
  } else switch (i3 | 0) {
  case 1048584:
   {
    i2 = 8;
    break L127;
   }
  default:
   {
    i4 = 44;
    break L127;
   }
  }
 } while (0);
 if ((i4 | 0) == 44) i2 = 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i8 + 288 + 48 >> 2] = 12338;
 HEAP32[i8 + 288 + 52 >> 2] = (i5 | 0) < 2 ^ 1;
 HEAP32[i8 + 288 + 56 >> 2] = 12337;
 HEAP32[i8 + 288 + 60 >> 2] = (i5 | 0) < 2 ? 0 : i5;
 HEAP32[i8 + 288 + 64 >> 2] = 12344;
 HEAP32[i8 + 288 + 68 >> 2] = 12344;
 i5 = _eglGetDisplay(0) | 0;
 i1 = _eglGetError() | 0;
 if ((i1 | 0) != 12288) {
  HEAP32[i8 >> 2] = 290063;
  HEAP32[i8 + 4 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8);
 }
 if (!i5) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290077, i8 + 8 | 0);
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i7, 290128, 290210, 420, -2147467259, 290077, i8 + 16 | 0);
  STACKTOP = i8;
  return;
 }
 HEAP32[i8 + 276 >> 2] = -1;
 HEAP32[i8 + 272 >> 2] = -1;
 i1 = _eglInitialize(i5 | 0, i8 + 276 | 0, i8 + 272 | 0) | 0;
 i2 = _eglGetError() | 0;
 if ((i2 | 0) != 12288) {
  HEAP32[i8 + 24 >> 2] = 290252;
  HEAP32[i8 + 24 + 4 >> 2] = i2;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 24 | 0);
 }
 if ((i1 | 0) != 1) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290266, i8 + 32 | 0);
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i7, 290128, 290210, 431, -2147467259, 290266, i8 + 40 | 0);
  STACKTOP = i8;
  return;
 }
 i4 = _eglQueryString(i5 | 0, 12429) | 0;
 HEAP32[i8 + 256 >> 2] = 0;
 HEAP32[i8 + 256 + 4 >> 2] = 0;
 HEAP32[i8 + 256 + 8 >> 2] = 0;
 HEAP32[i8 + 256 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i8 + 256 | 0, i4);
 _memset(i8 + 360 | 0, 0, 512) | 0;
 i4 = _eglQueryString(i5 | 0, 12372) | 0;
 HEAP32[i8 + 48 >> 2] = i8 + 252;
 HEAP32[i8 + 48 + 4 >> 2] = i8 + 248;
 HEAP32[i8 + 48 + 8 >> 2] = i8 + 360;
 _sscanf(i4, 290288, i8 + 48 | 0) | 0;
 HEAP32[i8 + 244 >> 2] = 0;
 i4 = (_eglGetConfigs(i5 | 0, 0, 0, i8 + 244 | 0) | 0) != 1;
 if (i4 | (HEAP32[i8 + 244 >> 2] | 0) == 0) __ZN4math22PrintToConsoleVariadicEjPKcz(4, 290300, i8 + 64 | 0);
 i1 = _eglGetError() | 0;
 if ((i1 | 0) != 12288) {
  HEAP32[i8 + 72 >> 2] = 290367;
  HEAP32[i8 + 72 + 4 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 72 | 0);
 }
 i4 = HEAP32[i8 + 244 >> 2] | 0;
 i4 = (i4 | 0) > 128 ? 128 : i4;
 HEAP32[i8 + 244 >> 2] = i4;
 i1 = __Znaj(i4 >>> 0 > 1073741823 ? -1 : i4 << 2) | 0;
 i4 = (_eglGetConfigs(i5 | 0, i1 | 0, i4 | 0, i8 + 244 | 0) | 0) != 1;
 if (i4 | (HEAP32[i8 + 244 >> 2] | 0) == 0) __ZN4math22PrintToConsoleVariadicEjPKcz(4, 290381, i8 + 80 | 0);
 i2 = _eglGetError() | 0;
 if ((i2 | 0) != 12288) {
  HEAP32[i8 + 88 >> 2] = 290367;
  HEAP32[i8 + 88 + 4 >> 2] = i2;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 88 | 0);
 }
 __ZdaPv(i1);
 i1 = _eglChooseConfig(i5 | 0, i8 + 288 | 0, i8 + 240 | 0, 1, i8 + 236 | 0) | 0;
 i2 = _eglGetError() | 0;
 if ((i2 | 0) != 12288) {
  HEAP32[i8 + 96 >> 2] = 290434;
  HEAP32[i8 + 96 + 4 >> 2] = i2;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 96 | 0);
 }
 do if ((i1 | 0) == 1) {
  i4 = _eglCreateWindowSurface(i5 | 0, HEAP32[i8 + 240 >> 2] | 0, 0, 0) | 0;
  i1 = _eglGetError() | 0;
  if ((i1 | 0) != 12288) {
   HEAP32[i8 + 120 >> 2] = 290474;
   HEAP32[i8 + 120 + 4 >> 2] = i1;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 120 | 0);
  }
  if (!i4) {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290497, i8 + 128 | 0);
   __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i7, 290128, 290210, 577, -2147467259, 290497, i8 + 136 | 0);
   break;
  };
  HEAP32[i8 + 224 >> 2] = HEAP32[84];
  HEAP32[i8 + 224 + 4 >> 2] = HEAP32[85];
  HEAP32[i8 + 224 + 8 >> 2] = HEAP32[86];
  HEAP32[i8 + 224 + 4 >> 2] = 2;
  i3 = _eglCreateContext(i5 | 0, HEAP32[i8 + 240 >> 2] | 0, 0, i8 + 224 | 0) | 0;
  i1 = _eglGetError() | 0;
  if ((i1 | 0) != 12288) {
   HEAP32[i8 + 144 >> 2] = 290528;
   HEAP32[i8 + 144 + 4 >> 2] = i1;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 144 | 0);
  }
  if (!i3) {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290545, i8 + 152 | 0);
   __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i7, 290128, 290210, 603, -2147467259, 290545, i8 + 160 | 0);
   break;
  }
  HEAP32[i8 + 168 >> 2] = HEAP32[i8 + 224 + 4 >> 2];
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 290570, i8 + 168 | 0);
  i1 = _eglMakeCurrent(i5 | 0, i4 | 0, i4 | 0, i3 | 0) | 0;
  i2 = _eglGetError() | 0;
  if ((i2 | 0) != 12288) {
   HEAP32[i8 + 176 >> 2] = 290608;
   HEAP32[i8 + 176 + 4 >> 2] = i2;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 176 | 0);
  }
  if (!i1) {
   __ZN4math22PrintToConsoleVariadicEjPKcz(4, 290623, i8 + 184 | 0);
   __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i7, 290128, 290210, 612, -2147467259, 290648, i8 + 192 | 0);
   break;
  }
  _eglQuerySurface(i5 | 0, i4 | 0, 12375, i8 + 284 | 0) | 0;
  i1 = _eglGetError() | 0;
  if ((i1 | 0) != 12288) {
   HEAP32[i8 + 200 >> 2] = 290671;
   HEAP32[i8 + 200 + 4 >> 2] = i1;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 200 | 0);
  }
  _eglQuerySurface(i5 | 0, i4 | 0, 12374, i8 + 280 | 0) | 0;
  i1 = _eglGetError() | 0;
  if ((i1 | 0) != 12288) {
   HEAP32[i8 + 208 >> 2] = 290693;
   HEAP32[i8 + 208 + 4 >> 2] = i1;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 208 | 0);
  }
  HEAP32[i6 + 24 >> 2] = HEAP32[i8 + 284 >> 2];
  HEAP32[i6 + 28 >> 2] = HEAP32[i8 + 280 >> 2];
  i1 = HEAP32[i6 + 148 >> 2] | 0;
  HEAP32[i1 >> 2] = i5;
  HEAP32[i1 + 4 >> 2] = i3;
  HEAP32[i1 + 8 >> 2] = i4;
  __ZN8Graphics23SetupDefaultDeviceStateEv(i6);
  _eglSwapInterval(i5 | 0, 0) | 0;
  i1 = _eglGetError() | 0;
  if ((i1 | 0) != 12288) {
   HEAP32[i8 + 216 >> 2] = 290716;
   HEAP32[i8 + 216 + 4 >> 2] = i1;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290016, i8 + 216 | 0);
  }
  _emscripten_set_main_loop_timing(2, 0) | 0;
  _eglBindAPI(12448) | 0;
  _eglWaitClient() | 0;
  _eglWaitNative(12379) | 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 12 >> 2] = 0;
  HEAP32[i7 + 16 >> 2] = 0;
 } else {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 290450, i8 + 104 | 0);
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i7, 290128, 290210, 540, -2147467259, 290450, i8 + 112 | 0);
 } while (0);
 i1 = HEAP32[i8 + 256 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i8 + 256 >> 2] = 0;
 STACKTOP = i8;
 return;
}

function __bdf_parse_start(i6, i2, i1, i8, i17) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 HEAP32[i18 + 12 >> 2] = 0;
 i5 = HEAP32[i17 + 32 >> 2] | 0;
 if (!i5) i12 = 0; else i12 = HEAP32[i5 + 278664 >> 2] | 0;
 if (!(_memcmp(i6, 324373, 7) | 0)) {
  if ((i5 | 0) == 0 ? 1 : (HEAP32[(HEAP32[i17 + 36 >> 2] | 0) + 8 >> 2] | 0) == 0) {
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
  i4 = (HEAP8[i6 + 7 >> 0] | 0) == 0;
  i2 = (i4 ? -7 : -8) + i2 | 0;
  i1 = HEAP32[i5 + 278664 >> 2] | 0;
  HEAP32[i18 + 32 >> 2] = 0;
  i3 = HEAP32[i5 + 88 >> 2] | 0;
  i3 = _ft_mem_realloc(i1, 1, i3, i2 + 1 + i3 | 0, HEAP32[i5 + 84 >> 2] | 0, i18 + 32 | 0) | 0;
  HEAP32[i5 + 84 >> 2] = i3;
  i1 = HEAP32[i18 + 32 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i5 + 88 >> 2] | 0;
   _memcpy(i3 + i1 | 0, (i4 ? i6 + 7 | 0 : i6 + 8 | 0) | 0, i2 | 0) | 0;
   HEAP8[i3 + (i1 + i2) >> 0] = 10;
   HEAP32[i5 + 88 >> 2] = (HEAP32[i5 + 88 >> 2] | 0) + (i2 + 1);
   i1 = HEAP32[i18 + 32 >> 2] | 0;
  }
  HEAP32[i18 + 12 >> 2] = i1;
  i17 = i1;
  STACKTOP = i18;
  return i17 | 0;
 }
 i1 = HEAP32[i17 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = HEAP32[i17 + 139320 >> 2] | 0;
  if (_memcmp(i6, 324381, 9) | 0) {
   HEAP32[i18 + 12 >> 2] = 176;
   i17 = 176;
   STACKTOP = i18;
   return i17 | 0;
  }
  HEAP32[i17 >> 2] = 1;
  HEAP32[i17 + 32 >> 2] = 0;
  i4 = _ft_mem_alloc(i5, 278692, i18 + 12 | 0) | 0;
  i1 = HEAP32[i18 + 12 >> 2] | 0;
  if (i1) {
   i17 = i1;
   STACKTOP = i18;
   return i17 | 0;
  }
  HEAP32[i17 + 32 >> 2] = i4;
  HEAP32[i4 + 278664 >> 2] = HEAP32[i17 + 139320 >> 2];
  HEAP32[i17 + 139320 >> 2] = 0;
  HEAP32[i18 + 32 >> 2] = 0;
  HEAP32[i4 + 278680 >> 2] = 241;
  HEAP32[i4 + 278676 >> 2] = 80;
  HEAP32[i4 + 278684 >> 2] = 0;
  HEAP32[i4 + 278688 >> 2] = _ft_mem_realloc(i5, 4, 0, 241, 0, i18 + 32 | 0) | 0;
  i1 = HEAP32[i18 + 32 >> 2] | 0;
  HEAP32[i18 + 12 >> 2] = i1;
  if (!i1) {
   i2 = 0;
   i3 = 270972;
  } else {
   i17 = i1;
   STACKTOP = i18;
   return i17 | 0;
  }
  while (1) {
   i1 = _hash_insert(HEAP32[i3 >> 2] | 0, i2, i4 + 278676 | 0, i5) | 0;
   HEAP32[i18 + 12 >> 2] = i1;
   if (i1) {
    i16 = 149;
    break;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= 83) break; else i3 = i3 + 16 | 0;
  }
  if ((i16 | 0) == 149) {
   STACKTOP = i18;
   return i1 | 0;
  }
  i1 = _ft_mem_alloc(i5, 16, i18 + 12 | 0) | 0;
  HEAP32[(HEAP32[i17 + 32 >> 2] | 0) + 128 >> 2] = i1;
  i2 = HEAP32[i18 + 12 >> 2] | 0;
  if (i2) {
   i17 = i2;
   STACKTOP = i18;
   return i17 | 0;
  }
  HEAP32[i18 + 32 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 241;
  HEAP32[i1 >> 2] = 80;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = _ft_mem_realloc(i5, 4, 0, 241, 0, i18 + 32 | 0) | 0;
  i1 = HEAP32[i18 + 32 >> 2] | 0;
  HEAP32[i18 + 12 >> 2] = i1;
  if (i1) {
   i17 = i1;
   STACKTOP = i18;
   return i17 | 0;
  }
  i16 = HEAP32[i17 + 32 >> 2] | 0;
  HEAP32[i16 + 28 >> 2] = HEAP32[(HEAP32[i17 + 36 >> 2] | 0) + 12 >> 2];
  HEAP32[i16 + 36 >> 2] = -1;
  i17 = HEAP32[i18 + 12 >> 2] | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (!(_memcmp(i6, 324391, 15) | 0)) {
  if (!(i1 & 8)) {
   HEAP32[i18 + 12 >> 2] = 179;
   i17 = 179;
   STACKTOP = i18;
   return i17 | 0;
  }
  i1 = __bdf_list_split(i17 + 139304 | 0, 324407, i6, i2) | 0;
  HEAP32[i18 + 12 >> 2] = i1;
  if (i1) {
   i17 = i1;
   STACKTOP = i18;
   return i17 | 0;
  }
  i1 = HEAP32[(HEAP32[i17 + 139304 >> 2] | 0) + 4 >> 2] | 0;
  L48 : do if (i1) {
   i2 = HEAP8[i1 >> 0] | 0;
   L50 : do switch (i2 << 24 >> 24) {
   case 0:
    {
     i1 = 0;
     break L48;
    }
   case 48:
    {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i3 = i1;
       i5 = 10;
       i2 = 48;
       i4 = 324442;
       break L50;
      }
     }
     i3 = i1 + 2 | 0;
     i5 = 16;
     i2 = HEAP8[i1 + 2 >> 0] | 0;
     i4 = 324410;
     break;
    }
   default:
    {
     i3 = i1;
     i5 = 10;
     i4 = 324442;
    }
   } while (0);
   i1 = i2 << 24 >> 24;
   if (HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7)) {
    i2 = i1;
    i1 = 0;
    do {
     i1 = Math_imul(i1, i5) | 0;
     i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
     i3 = i3 + 1 | 0;
     i16 = HEAP8[i3 >> 0] | 0;
     i2 = i16 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i16 & 255) >>> 3) >> 0] | 0) != 0);
   } else i1 = 0;
  } else i1 = 0; while (0);
  HEAP32[(HEAP32[i17 + 32 >> 2] | 0) + 72 >> 2] = i1;
  HEAP32[i17 + 4 >> 2] = i1;
  i1 = _ft_mem_realloc(i12, 16, 0, i1, 0, i18 + 12 | 0) | 0;
  HEAP32[(HEAP32[i17 + 32 >> 2] | 0) + 80 >> 2] = i1;
  i1 = HEAP32[i18 + 12 >> 2] | 0;
  if (i1) {
   i17 = i1;
   STACKTOP = i18;
   return i17 | 0;
  }
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 16;
  HEAP32[i8 >> 2] = 35;
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (!(_memcmp(i6, 324602, 15) | 0)) {
  if (!(i1 & 4)) {
   HEAP32[i18 + 12 >> 2] = 178;
   i17 = 178;
   STACKTOP = i18;
   return i17 | 0;
  }
  i1 = __bdf_list_split(i17 + 139304 | 0, 324407, i6, i2) | 0;
  HEAP32[i18 + 12 >> 2] = i1;
  if (i1) {
   i17 = i1;
   STACKTOP = i18;
   return i17 | 0;
  }
  i9 = HEAP32[i17 + 139304 >> 2] | 0;
  i1 = HEAP32[i9 + 4 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i7 = HEAP8[i1 >> 0] | 0, i7 << 24 >> 24 != 0) : 0) {
   i1 = i7 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
   i2 = HEAP8[i1 >> 0] | 0;
   L74 : do if (i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i6 = 10;
      i3 = i1;
      i2 = 48;
      i5 = 324442;
      break L74;
     }
    }
    i6 = 16;
    i3 = i1 + 2 | 0;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    i5 = 324410;
   } else {
    i6 = 10;
    i3 = i1;
    i5 = 324442;
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i1 = 0;
    i2 = i4;
    do {
     i1 = Math_imul(i1, i6) | 0;
     i3 = i3 + 1 | 0;
     i16 = HEAP8[i3 >> 0] | 0;
     i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
     i2 = i16 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i16 & 255) >>> 3) >> 0] | 0) != 0);
   }
   i1 = (i7 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1) & 65535;
  } else i1 = 0;
  i8 = HEAP32[i17 + 32 >> 2] | 0;
  HEAP16[i8 + 4 >> 1] = i1;
  i1 = HEAP32[i9 + 8 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i11 = HEAP8[i1 >> 0] | 0, i11 << 24 >> 24 != 0) : 0) {
   i1 = i11 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
   i2 = HEAP8[i1 >> 0] | 0;
   L86 : do if (i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i6 = 10;
      i3 = i1;
      i2 = 48;
      i5 = 324442;
      break L86;
     }
    }
    i6 = 16;
    i3 = i1 + 2 | 0;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    i5 = 324410;
   } else {
    i6 = 10;
    i3 = i1;
    i5 = 324442;
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i1 = 0;
    i2 = i4;
    do {
     i1 = Math_imul(i1, i6) | 0;
     i3 = i3 + 1 | 0;
     i16 = HEAP8[i3 >> 0] | 0;
     i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
     i2 = i16 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i16 & 255) >>> 3) >> 0] | 0) != 0);
   }
   i7 = (i11 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1) & 65535;
  } else i7 = 0;
  HEAP16[i8 + 6 >> 1] = i7;
  i1 = HEAP32[i9 + 12 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i13 = HEAP8[i1 >> 0] | 0, i13 << 24 >> 24 != 0) : 0) {
   i1 = i13 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
   i2 = HEAP8[i1 >> 0] | 0;
   L98 : do if (i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i6 = 10;
      i3 = i1;
      i2 = 48;
      i5 = 324442;
      break L98;
     }
    }
    i6 = 16;
    i3 = i1 + 2 | 0;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    i5 = 324410;
   } else {
    i6 = 10;
    i3 = i1;
    i5 = 324442;
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i1 = 0;
    i2 = i4;
    do {
     i1 = Math_imul(i1, i6) | 0;
     i3 = i3 + 1 | 0;
     i16 = HEAP8[i3 >> 0] | 0;
     i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
     i2 = i16 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i16 & 255) >>> 3) >> 0] | 0) != 0);
   }
   i1 = (i13 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1) & 65535;
  } else i1 = 0;
  HEAP16[i8 + 8 >> 1] = i1;
  i1 = HEAP32[i9 + 16 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i15 = HEAP8[i1 >> 0] | 0, i15 << 24 >> 24 != 0) : 0) {
   i1 = i15 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
   i2 = HEAP8[i1 >> 0] | 0;
   L110 : do if (i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i6 = 10;
      i3 = i1;
      i2 = 48;
      i5 = 324442;
      break L110;
     }
    }
    i6 = 16;
    i3 = i1 + 2 | 0;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    i5 = 324410;
   } else {
    i6 = 10;
    i3 = i1;
    i5 = 324442;
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i1 = 0;
    i2 = i4;
    do {
     i1 = Math_imul(i1, i6) | 0;
     i3 = i3 + 1 | 0;
     i16 = HEAP8[i3 >> 0] | 0;
     i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
     i2 = i16 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i16 & 255) >>> 3) >> 0] | 0) != 0);
   }
   i1 = (i15 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1) & 65535;
  } else i1 = 0;
  HEAP16[i8 + 10 >> 1] = i1;
  i16 = i1 & 65535;
  HEAP16[i8 + 12 >> 1] = i16 + (i7 & 65535);
  HEAP16[i8 + 14 >> 1] = 0 - i16;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 8;
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (!(_memcmp(i6, 324618, 4) | 0)) {
  i1 = __bdf_list_split(i17 + 139304 | 0, 324407, i6, i2) | 0;
  HEAP32[i18 + 12 >> 2] = i1;
  if (i1) {
   i17 = i1;
   STACKTOP = i18;
   return i17 | 0;
  }
  i4 = HEAP32[i17 + 139312 >> 2] | 0;
  do if (i4) {
   if (i4 >>> 0 < 2) {
    HEAP32[i17 + 139312 >> 2] = 0;
    break;
   }
   i1 = 0;
   i2 = 1;
   while (1) {
    i16 = HEAP32[i17 + 139304 >> 2] | 0;
    HEAP32[i16 + (i1 << 2) >> 2] = HEAP32[i16 + (i2 << 2) >> 2];
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i4 + -1 | 0)) break; else i2 = i2 + 1 | 0;
   }
   HEAP32[i17 + 139312 >> 2] = i4 + -1;
   if (i4 + -1 | 0) {
    i3 = HEAP32[HEAP32[i17 + 139304 >> 2] >> 2] | 0;
    i5 = i3;
    i6 = i4 + -1 | 0;
    i7 = 0;
    i4 = 0;
    while (1) {
     i1 = HEAP8[i5 >> 0] | 0;
     if (!(i1 << 24 >> 24)) i1 = i6; else {
      while (1) {
       i5 = i5 + 1 | 0;
       i2 = i4 + 1 | 0;
       HEAP8[i3 + i4 >> 0] = i1;
       i1 = HEAP8[i5 >> 0] | 0;
       if (!(i1 << 24 >> 24)) break; else i4 = i2;
      }
      i1 = HEAP32[i17 + 139312 >> 2] | 0;
      i4 = i2;
     }
     i2 = i7 + 1 | 0;
     if (i2 >>> 0 < i1 >>> 0) {
      HEAP8[i3 + i4 >> 0] = 32;
      i1 = HEAP32[i17 + 139312 >> 2] | 0;
      i4 = i4 + 1 | 0;
     }
     if (i2 >>> 0 >= i1 >>> 0) break;
     i5 = HEAP32[(HEAP32[i17 + 139304 >> 2] | 0) + (i2 << 2) >> 2] | 0;
     i6 = i1;
     i7 = i2;
    }
    if ((i3 | 0) != 298501) {
     HEAP8[i3 + i4 >> 0] = 0;
     if (!i3) break;
    } else i3 = 298501;
    _ft_mem_free(i12, HEAP32[HEAP32[i17 + 32 >> 2] >> 2] | 0);
    HEAP32[HEAP32[i17 + 32 >> 2] >> 2] = 0;
    i1 = _ft_mem_realloc(i12, 1, 0, i4 + 1 | 0, 0, i18 + 12 | 0) | 0;
    HEAP32[HEAP32[i17 + 32 >> 2] >> 2] = i1;
    i2 = HEAP32[i18 + 12 >> 2] | 0;
    if (i2) {
     i17 = i2;
     STACKTOP = i18;
     return i17 | 0;
    }
    _memcpy(i1 | 0, i3 | 0, i4 + 1 | 0) | 0;
    i3 = HEAP32[i17 + 32 >> 2] | 0;
    i1 = HEAP32[i17 + 36 >> 2] | 0;
    if ((((i3 | 0) != 0 ? (i9 = HEAP32[i3 >> 2] | 0, (i9 | 0) != 0) : 0) ? (HEAP8[i9 >> 0] | 0) != 0 : 0) ? (i10 = HEAP32[i3 + 278664 >> 2] | 0, HEAP32[i18 + 16 >> 2] = 0, HEAP32[i18 + 16 + 4 >> 2] = 0, HEAP32[i18 + 16 + 8 >> 2] = 0, HEAP32[i18 + 16 + 12 >> 2] = i10, HEAP32[i3 + 28 >> 2] = HEAP32[i1 + 12 >> 2], i10 = (_strlen(i9) | 0) + 1 | 0, i10 >>> 0 <= 255) : 0) {
     _memcpy(i18 + 32 | 0, i9 | 0, i10 | 0) | 0;
     i2 = __bdf_list_split(i18 + 16 | 0, 324623, i18 + 32 | 0, i10) | 0;
     L158 : do if (!i2) {
      if ((HEAP32[i18 + 16 + 8 >> 2] | 0) != 15) break;
      switch (HEAP8[HEAP32[(HEAP32[i18 + 16 >> 2] | 0) + 44 >> 2] >> 0] | 0) {
      case 99:
      case 67:
       {
        HEAP32[i3 + 28 >> 2] = 32;
        break L158;
       }
      case 109:
      case 77:
       {
        HEAP32[i3 + 28 >> 2] = 16;
        break L158;
       }
      case 112:
      case 80:
       {
        HEAP32[i3 + 28 >> 2] = 8;
        break L158;
       }
      default:
       break L158;
      }
     } while (0);
     i1 = HEAP32[i18 + 16 + 12 >> 2] | 0;
     if (i1) {
      _ft_mem_free(i1, HEAP32[i18 + 16 >> 2] | 0);
      HEAP32[i18 + 16 >> 2] = 0;
      HEAP32[i18 + 16 + 4 >> 2] = 0;
      HEAP32[i18 + 16 + 8 >> 2] = 0;
      HEAP32[i18 + 16 + 12 >> 2] = 0;
     }
     HEAP32[i18 + 12 >> 2] = i2;
     if (i2) {
      i17 = i2;
      STACKTOP = i18;
      return i17 | 0;
     }
     HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 2;
     i17 = 0;
     STACKTOP = i18;
     return i17 | 0;
    }
    HEAP32[i18 + 12 >> 2] = 6;
    i17 = 6;
    STACKTOP = i18;
    return i17 | 0;
   }
  } while (0);
  HEAP32[i18 + 12 >> 2] = 3;
  i17 = 3;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (_memcmp(i6, 324625, 4) | 0) {
  if (_memcmp(i6, 324630, 5) | 0) {
   HEAP32[i18 + 12 >> 2] = 3;
   i17 = 3;
   STACKTOP = i18;
   return i17 | 0;
  }
  if (i1 & 8) {
   i1 = HEAP16[i5 + 12 >> 1] | 0;
   HEAP32[i5 + 40 >> 2] = i1;
   HEAP32[i18 >> 2] = i1;
   _sprintf(i18 + 32 | 0, 324636, i18) | 0;
   i1 = __bdf_add_property(HEAP32[i17 + 32 >> 2] | 0, 324640, i18 + 32 | 0) | 0;
   HEAP32[i18 + 12 >> 2] = i1;
   if (!i1) {
    i16 = HEAP32[i17 + 32 >> 2] | 0;
    i1 = HEAP16[i16 + 14 >> 1] | 0;
    HEAP32[i16 + 44 >> 2] = i1;
    HEAP32[i18 + 8 >> 2] = i1;
    _sprintf(i18 + 32 | 0, 324636, i18 + 8 | 0) | 0;
    i1 = __bdf_add_property(HEAP32[i17 + 32 >> 2] | 0, 324652, i18 + 32 | 0) | 0;
    HEAP32[i18 + 12 >> 2] = i1;
    if (!i1) {
     HEAP16[(HEAP32[i17 + 32 >> 2] | 0) + 278660 >> 1] = 1;
     HEAP32[i8 >> 2] = 36;
     HEAP32[i18 + 12 >> 2] = -1;
     i1 = -1;
    }
   }
  } else {
   HEAP32[i18 + 12 >> 2] = 179;
   i1 = 179;
  }
  i17 = i1;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (!(i1 & 2)) {
  HEAP32[i18 + 12 >> 2] = 177;
  i17 = 177;
  STACKTOP = i18;
  return i17 | 0;
 }
 i1 = __bdf_list_split(i17 + 139304 | 0, 324407, i6, i2) | 0;
 HEAP32[i18 + 12 >> 2] = i1;
 if (i1) {
  i17 = i1;
  STACKTOP = i18;
  return i17 | 0;
 }
 i9 = HEAP32[i17 + 139304 >> 2] | 0;
 i1 = HEAP32[i9 + 4 >> 2] | 0;
 L199 : do if (i1) {
  i2 = HEAP8[i1 >> 0] | 0;
  L201 : do switch (i2 << 24 >> 24) {
  case 0:
   {
    i1 = 0;
    break L199;
   }
  case 48:
   {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i3 = i1;
      i5 = 10;
      i2 = 48;
      i4 = 324442;
      break L201;
     }
    }
    i3 = i1 + 2 | 0;
    i5 = 16;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    i4 = 324410;
    break;
   }
  default:
   {
    i3 = i1;
    i5 = 10;
    i4 = 324442;
   }
  } while (0);
  i1 = i2 << 24 >> 24;
  if (HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7)) {
   i2 = i1;
   i1 = 0;
   do {
    i1 = Math_imul(i1, i5) | 0;
    i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
    i3 = i3 + 1 | 0;
    i15 = HEAP8[i3 >> 0] | 0;
    i2 = i15 << 24 >> 24;
   } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
  } else i1 = 0;
 } else i1 = 0; while (0);
 i7 = HEAP32[i17 + 32 >> 2] | 0;
 HEAP32[i7 + 16 >> 2] = i1;
 i1 = HEAP32[i9 + 8 >> 2] | 0;
 L208 : do if (i1) {
  i2 = HEAP8[i1 >> 0] | 0;
  L210 : do switch (i2 << 24 >> 24) {
  case 0:
   {
    i1 = 0;
    break L208;
   }
  case 48:
   {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i3 = i1;
      i5 = 10;
      i2 = 48;
      i4 = 324442;
      break L210;
     }
    }
    i3 = i1 + 2 | 0;
    i5 = 16;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    i4 = 324410;
    break;
   }
  default:
   {
    i3 = i1;
    i5 = 10;
    i4 = 324442;
   }
  } while (0);
  i1 = i2 << 24 >> 24;
  if (HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7)) {
   i2 = i1;
   i1 = 0;
   do {
    i1 = Math_imul(i1, i5) | 0;
    i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
    i3 = i3 + 1 | 0;
    i15 = HEAP8[i3 >> 0] | 0;
    i2 = i15 << 24 >> 24;
   } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
  } else i1 = 0;
 } else i1 = 0; while (0);
 HEAP32[i7 + 20 >> 2] = i1;
 i1 = HEAP32[i9 + 12 >> 2] | 0;
 L217 : do if (i1) {
  i2 = HEAP8[i1 >> 0] | 0;
  L219 : do switch (i2 << 24 >> 24) {
  case 0:
   {
    i1 = 0;
    break L217;
   }
  case 48:
   {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i3 = i1;
      i5 = 10;
      i2 = 48;
      i4 = 324442;
      break L219;
     }
    }
    i3 = i1 + 2 | 0;
    i5 = 16;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    i4 = 324410;
    break;
   }
  default:
   {
    i3 = i1;
    i5 = 10;
    i4 = 324442;
   }
  } while (0);
  i1 = i2 << 24 >> 24;
  if (HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7)) {
   i2 = i1;
   i1 = 0;
   do {
    i1 = Math_imul(i1, i5) | 0;
    i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
    i3 = i3 + 1 | 0;
    i15 = HEAP8[i3 >> 0] | 0;
    i2 = i15 << 24 >> 24;
   } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
  } else i1 = 0;
 } else i1 = 0; while (0);
 HEAP32[i7 + 24 >> 2] = i1;
 if ((HEAP32[i17 + 139312 >> 2] | 0) == 5) {
  i1 = HEAP32[i9 + 16 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i14 = HEAP8[i1 >> 0] | 0, i14 << 24 >> 24 != 0) : 0) {
   i1 = i14 << 24 >> 24 == 45 ? i1 + 1 | 0 : i1;
   i2 = HEAP8[i1 >> 0] | 0;
   L231 : do if (i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i6 = 10;
      i3 = i1;
      i2 = 48;
      i5 = 324442;
      break L231;
     }
    }
    i6 = 16;
    i3 = i1 + 2 | 0;
    i2 = HEAP8[i1 + 2 >> 0] | 0;
    i5 = 324410;
   } else {
    i6 = 10;
    i3 = i1;
    i5 = 324442;
   } while (0);
   i4 = i2 << 24 >> 24;
   if (!(HEAPU8[i5 + ((i2 & 255) >>> 3) >> 0] & 1 << (i4 & 7))) i1 = 0; else {
    i1 = 0;
    i2 = i4;
    do {
     i1 = Math_imul(i1, i6) | 0;
     i3 = i3 + 1 | 0;
     i15 = HEAP8[i3 >> 0] | 0;
     i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 << 16 >> 16;
     i2 = i15 << 24 >> 24;
    } while ((1 << (i2 & 7) & HEAPU8[i5 + ((i15 & 255) >>> 3) >> 0] | 0) != 0);
   }
   i3 = i14 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1;
   HEAP16[i7 + 278662 >> 1] = i3;
   if ((i3 & 65535) << 16 >> 16) {
    i2 = 0;
    i1 = 0;
    i4 = i3 & 65535;
    while (1) {
     i2 = (i4 & 1) == 0 ? i2 : i1;
     i4 = (i4 & 65535) >>> 1;
     if (!(i4 << 16 >> 16)) break; else i1 = i1 + 1 << 16 >> 16;
    }
    if ((i2 & 65535) > 3) {
     i2 = 8;
     i1 = i7 + 278662 | 0;
    } else {
     i1 = i7 + 278662 | 0;
     i16 = 136;
    }
   } else {
    i3 = 0;
    i1 = i7 + 278662 | 0;
    i2 = 0;
    i16 = 136;
   }
  } else {
   HEAP16[i7 + 278662 >> 1] = 0;
   i3 = 0;
   i1 = i7 + 278662 | 0;
   i2 = 0;
   i16 = 136;
  }
  if ((i16 | 0) == 136) i2 = 1 << (i2 & 65535) & 65535;
  if ((i3 & 65535 | 0) != (i2 | 0)) HEAP16[i1 >> 1] = i2 << 1;
 } else HEAP16[i7 + 278662 >> 1] = 1;
 HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 4;
 i17 = 0;
 STACKTOP = i18;
 return i17 | 0;
}
function _pfr_glyph_load_rec(i18, i19, i14, i1, i17) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = _FT_Stream_Seek(i19, i1 + i14 | 0) | 0;
 if (i1) {
  i20 = i1;
  STACKTOP = i21;
  return i20 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i19, i17) | 0;
 if (i1) {
  i20 = i1;
  STACKTOP = i21;
  return i20 | 0;
 }
 i16 = HEAP32[i19 + 32 >> 2] | 0;
 if ((i17 | 0) != 0 ? (HEAP8[i16 >> 0] | 0) < 0 : 0) {
  i12 = HEAP32[i18 + 28 >> 2] | 0;
  i13 = HEAP32[i18 + 16 >> 2] | 0;
  HEAP32[i21 + 32 >> 2] = 0;
  i3 = HEAP32[i12 >> 2] | 0;
  L10 : do if ((i17 | 0) >= 1 ? (i10 = HEAPU8[i16 >> 0] | 0, (i10 & 128 | 0) != 0) : 0) {
   L13 : do if (!(i10 & 8)) i2 = i16 + 1 | 0; else {
    L15 : do if ((i17 | 0) >= 2) {
     i1 = HEAP8[i16 + 1 >> 0] | 0;
     if (!(i1 << 24 >> 24)) i1 = i16 + 2 | 0; else {
      i2 = i1 & 255;
      i1 = i16 + 2 | 0;
      do {
       if ((i1 + 2 | 0) >>> 0 > (i16 + i17 | 0) >>> 0) break L15;
       i1 = i1 + ((HEAPU8[i1 >> 0] | 0) + 2) | 0;
       if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) break L15;
       i2 = i2 + -1 | 0;
      } while ((i2 | 0) != 0);
     }
     HEAP32[i21 + 32 >> 2] = 0;
     i2 = i1;
     break L13;
    } while (0);
    HEAP32[i21 + 32 >> 2] = 8;
    i1 = 8;
    break L10;
   } while (0);
   i1 = HEAP32[i18 + 20 >> 2] | 0;
   if ((i13 + (i10 & 63) | 0) >>> 0 > i1 >>> 0) {
    if ((i13 + (i10 & 63) + 3 & -4) >>> 0 > 64) {
     HEAP32[i21 + 32 >> 2] = 8;
     i1 = 8;
     break;
    }
    HEAP32[i18 + 24 >> 2] = _ft_mem_realloc(i3, 24, i1, i13 + (i10 & 63) + 3 & -4, HEAP32[i18 + 24 >> 2] | 0, i21 + 32 | 0) | 0;
    i1 = HEAP32[i21 + 32 >> 2] | 0;
    if (i1) break;
    HEAP32[i18 + 20 >> 2] = i13 + (i10 & 63) + 3 & -4;
   }
   if (!(i10 & 63)) i1 = 0; else {
    i8 = 0;
    i1 = i2;
    i7 = (HEAP32[i18 + 24 >> 2] | 0) + (i13 * 24 | 0) | 0;
    while (1) {
     i2 = i1 + 1 | 0;
     if (i2 >>> 0 > (i16 + i17 | 0) >>> 0) {
      i20 = 52;
      break L10;
     }
     i6 = HEAPU8[i1 >> 0] | 0;
     HEAP32[i7 >> 2] = 65536;
     if (!(i6 & 16)) {
      i5 = 3;
      i9 = 2;
     } else {
      i3 = i1 + 3 | 0;
      if (i3 >>> 0 > (i16 + i17 | 0) >>> 0) {
       i20 = 52;
       break L10;
      }
      HEAP32[i7 >> 2] = (HEAP8[i2 >> 0] << 8 | HEAPU8[i1 + 2 >> 0]) << 4;
      i5 = 5;
      i9 = 4;
      i2 = i3;
     }
     i4 = i7 + 4 | 0;
     HEAP32[i4 >> 2] = 65536;
     if (i6 & 32) {
      i3 = i1 + i5 | 0;
      if (i3 >>> 0 > (i16 + i17 | 0) >>> 0) {
       i20 = 52;
       break L10;
      }
      HEAP32[i4 >> 2] = (HEAP8[i2 >> 0] << 8 | HEAPU8[i1 + i9 >> 0]) << 4;
      i2 = i3;
     }
     switch (i6 & 3 | 0) {
     case 1:
      {
       i1 = i2 + 2 | 0;
       if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 52;
        break L10;
       }
       i3 = HEAP8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
       break;
      }
     case 2:
      {
       i1 = i2 + 1 | 0;
       if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 52;
        break L10;
       }
       i3 = HEAP8[i2 >> 0] | 0;
       break;
      }
     default:
      {
       i1 = i2;
       i3 = 0;
      }
     }
     switch (i6 >>> 2 & 3 | 0) {
     case 1:
      {
       i2 = i1 + 2 | 0;
       if (i2 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 52;
        break L10;
       }
       i1 = HEAP8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
       break;
      }
     case 2:
      {
       i2 = i1 + 1 | 0;
       if (i2 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 52;
        break L10;
       }
       i1 = HEAP8[i1 >> 0] | 0;
       break;
      }
     default:
      {
       i2 = i1;
       i1 = 0;
      }
     }
     HEAP32[i7 + 8 >> 2] = i3;
     HEAP32[i7 + 12 >> 2] = i1;
     if (!(i6 & 64)) {
      i1 = i2 + 1 | 0;
      if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
       i20 = 52;
       break L10;
      }
      HEAP32[i7 + 20 >> 2] = HEAPU8[i2 >> 0];
      i3 = 4;
      i5 = 2;
      i4 = 3;
      i9 = i1;
     } else {
      i1 = i2 + 2 | 0;
      if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
       i20 = 52;
       break L10;
      }
      HEAP32[i7 + 20 >> 2] = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
      i3 = 5;
      i5 = 3;
      i4 = 4;
      i9 = i1;
     }
     if (!(i6 & 128)) {
      i1 = i2 + i4 | 0;
      if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
       i20 = 52;
       break L10;
      }
      HEAP32[i7 + 16 >> 2] = HEAPU8[i9 >> 0] << 8 | HEAPU8[i2 + i5 >> 0];
     } else {
      i1 = i2 + i3 | 0;
      if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
       i20 = 52;
       break L10;
      }
      HEAP32[i7 + 16 >> 2] = HEAPU8[i2 + i5 >> 0] << 8 | HEAP8[i9 >> 0] << 16 | HEAPU8[i2 + i4 >> 0];
     }
     HEAP32[i18 + 16 >> 2] = (HEAP32[i18 + 16 >> 2] | 0) + 1;
     i8 = i8 + 1 | 0;
     if (i8 >>> 0 >= (i10 & 63) >>> 0) break; else i7 = i7 + 24 | 0;
    }
    i1 = HEAP32[i21 + 32 >> 2] | 0;
   }
  } else i20 = 52; while (0);
  if ((i20 | 0) == 52) {
   HEAP32[i21 + 32 >> 2] = 8;
   i1 = 8;
  }
  _FT_Stream_ExitFrame(i19);
  if (i1) {
   i20 = i1;
   STACKTOP = i21;
   return i20 | 0;
  }
  i10 = (HEAP32[i18 + 16 >> 2] | 0) - i13 | 0;
  if ((i10 | 0) <= 0) {
   i20 = 0;
   STACKTOP = i21;
   return i20 | 0;
  }
  i11 = 0;
  while (1) {
   i1 = HEAP32[i18 + 24 >> 2] | 0;
   i8 = i11 + i13 | 0;
   i9 = HEAP16[i12 + 22 >> 1] | 0;
   i1 = _pfr_glyph_load_rec(i18, i19, i14, HEAP32[i1 + (i8 * 24 | 0) + 16 >> 2] | 0, HEAP32[i1 + (i8 * 24 | 0) + 20 >> 2] | 0) | 0;
   if (i1) {
    i20 = 181;
    break;
   }
   i6 = HEAP32[i18 + 24 >> 2] | 0;
   i7 = (HEAP16[i12 + 22 >> 1] | 0) - i9 | 0;
   i3 = HEAP32[i6 + (i8 * 24 | 0) >> 2] | 0;
   if ((i3 | 0) == 65536 ? (HEAP32[i6 + (i8 * 24 | 0) + 4 >> 2] | 0) == 65536 : 0) {
    if ((i7 | 0) > 0) {
     i1 = HEAP32[i6 + (i8 * 24 | 0) + 8 >> 2] | 0;
     i2 = HEAP32[i6 + (i8 * 24 | 0) + 12 >> 2] | 0;
     i4 = 0;
     i5 = (HEAP32[i12 + 24 >> 2] | 0) + (i9 << 3) | 0;
     while (1) {
      HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i1;
      i17 = i5 + 4 | 0;
      HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + i2;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i7 | 0)) break; else i5 = i5 + 8 | 0;
     }
    }
   } else i20 = 59;
   L88 : do if ((i20 | 0) == 59 ? (i20 = 0, (i7 | 0) > 0) : 0) {
    i1 = 0;
    i2 = (HEAP32[i12 + 24 >> 2] | 0) + (i9 << 3) | 0;
    while (1) {
     i17 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i3) | 0;
     HEAP32[i2 >> 2] = (HEAP32[i6 + (i8 * 24 | 0) + 8 >> 2] | 0) + i17;
     i17 = i2 + 4 | 0;
     i16 = _FT_MulFix(HEAP32[i17 >> 2] | 0, HEAP32[i6 + (i8 * 24 | 0) + 4 >> 2] | 0) | 0;
     HEAP32[i17 >> 2] = (HEAP32[i6 + (i8 * 24 | 0) + 12 >> 2] | 0) + i16;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) == (i7 | 0)) break L88;
     i3 = HEAP32[i6 + (i8 * 24 | 0) >> 2] | 0;
     i2 = i2 + 8 | 0;
    }
   } while (0);
   i11 = i11 + 1 | 0;
   if ((i11 | 0) >= (i10 | 0)) {
    i1 = 0;
    i20 = 181;
    break;
   }
  }
  if ((i20 | 0) == 181) {
   STACKTOP = i21;
   return i1 | 0;
  }
 }
 HEAP32[i21 + 32 >> 2] = 0;
 i5 = HEAP32[HEAP32[i18 + 28 >> 2] >> 2] | 0;
 L99 : do if ((i17 | 0) >= 1 ? (i8 = HEAPU8[i16 >> 0] | 0, (i8 & 128 | 0) == 0) : 0) {
  if (!(i8 & 4)) {
   if (!(i8 & 2)) {
    i1 = 2;
    i4 = i16 + 1 | 0;
    i3 = 0;
   } else {
    if ((i17 | 0) < 2) {
     i20 = 179;
     break;
    }
    i1 = 3;
    i4 = i16 + 2 | 0;
    i3 = HEAPU8[i16 + 1 >> 0] | 0;
   }
   if (!(i8 & 1)) {
    i2 = i4;
    i12 = 0;
   } else {
    if ((i1 | 0) > (i17 | 0)) {
     i20 = 179;
     break;
    }
    i2 = i16 + i1 | 0;
    i12 = HEAPU8[i4 >> 0] | 0;
   }
  } else {
   if ((i17 | 0) < 2) {
    i20 = 179;
    break;
   }
   i12 = HEAPU8[i16 + 1 >> 0] | 0;
   i2 = i16 + 2 | 0;
   i3 = i12 & 15;
   i12 = i12 >>> 4;
  }
  i7 = i3 + i12 | 0;
  i1 = HEAP32[i18 + 4 >> 2] | 0;
  if (i7 >>> 0 > i1 >>> 0) {
   i4 = _ft_mem_realloc(i5, 4, i1, i7 + 7 & -8, HEAP32[i18 + 8 >> 2] | 0, i21 + 32 | 0) | 0;
   HEAP32[i18 + 8 >> 2] = i4;
   i1 = HEAP32[i21 + 32 >> 2] | 0;
   if (i1) break;
   HEAP32[i18 + 4 >> 2] = i7 + 7 & -8;
   i11 = i18 + 8 | 0;
  } else {
   i11 = i18 + 8 | 0;
   i4 = HEAP32[i18 + 8 >> 2] | 0;
  }
  HEAP32[i18 + 12 >> 2] = i4 + (i3 << 2);
  if (i7) {
   i6 = 0;
   i5 = 0;
   i9 = 0;
   while (1) {
    if (!(i6 & 7)) {
     i1 = i2 + 1 | 0;
     if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
      i20 = 179;
      break L99;
     }
     i5 = HEAPU8[i2 >> 0] | 0;
     i2 = i1;
    }
    if (!(i5 & 1)) {
     i1 = i2 + 1 | 0;
     if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
      i20 = 179;
      break L99;
     }
     i9 = (HEAPU8[i2 >> 0] | 0) + i9 | 0;
    } else {
     i1 = i2 + 2 | 0;
     if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
      i20 = 179;
      break L99;
     }
     i9 = HEAP8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
    }
    HEAP32[i4 + (i6 << 2) >> 2] = i9;
    i6 = i6 + 1 | 0;
    if (i6 >>> 0 >= i7 >>> 0) {
     i2 = i1;
     break;
    } else {
     i5 = i5 >>> 1;
     i2 = i1;
    }
   }
  }
  L132 : do if (!(i8 & 8)) i1 = i2; else {
   i1 = i2 + 1 | 0;
   L134 : do if (i1 >>> 0 <= (i16 + i17 | 0) >>> 0) {
    i2 = HEAP8[i2 >> 0] | 0;
    if (i2 << 24 >> 24) {
     i2 = i2 & 255;
     do {
      if ((i1 + 2 | 0) >>> 0 > (i16 + i17 | 0) >>> 0) break L134;
      i1 = i1 + ((HEAPU8[i1 >> 0] | 0) + 2) | 0;
      if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) break L134;
      i2 = i2 + -1 | 0;
     } while ((i2 | 0) != 0);
    }
    HEAP32[i21 + 32 >> 2] = 0;
    break L132;
   } while (0);
   HEAP32[i21 + 32 >> 2] = 8;
   i1 = 8;
   break L99;
  } while (0);
  HEAP8[i18 + 32 >> 0] = 0;
  HEAP32[i21 + 4 >> 2] = 0;
  HEAP32[i21 >> 2] = 0;
  i5 = HEAP32[i21 >> 2] | 0;
  i2 = HEAP32[i21 + 4 >> 2] | 0;
  HEAP32[i21 + 24 >> 2] = i5;
  HEAP32[i21 + 24 + 4 >> 2] = i2;
  L145 : while (1) {
   i4 = i1 + 1 | 0;
   if (i4 >>> 0 > (i16 + i17 | 0) >>> 0) {
    i20 = 179;
    break L99;
   }
   i10 = HEAPU8[i1 >> 0] | 0;
   switch (i10 >>> 4 | 0) {
   case 0:
    break L145;
   case 5:
   case 4:
   case 1:
    {
     i9 = 1;
     i6 = i10 & 15;
     i7 = i21;
     i8 = 0;
     i20 = 111;
     break;
    }
   case 2:
    {
     if ((i10 & 15) >>> 0 >= i3 >>> 0) {
      i20 = 179;
      break L99;
     }
     HEAP32[i21 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + ((i10 & 15) << 2) >> 2];
     HEAP32[i21 + 4 >> 2] = i2;
     i5 = HEAP32[i21 >> 2] | 0;
     i2 = HEAP32[i21 + 4 >> 2] | 0;
     HEAP32[i21 + 24 >> 2] = i5;
     HEAP32[i21 + 24 + 4 >> 2] = i2;
     i20 = 146;
     break;
    }
   case 3:
    {
     if ((i10 & 15) >>> 0 >= i12 >>> 0) {
      i20 = 179;
      break L99;
     }
     HEAP32[i21 >> 2] = i5;
     HEAP32[i21 + 4 >> 2] = HEAP32[(HEAP32[i18 + 12 >> 2] | 0) + ((i10 & 15) << 2) >> 2];
     i5 = HEAP32[i21 >> 2] | 0;
     i2 = HEAP32[i21 + 4 >> 2] | 0;
     HEAP32[i21 + 24 >> 2] = i5;
     HEAP32[i21 + 24 + 4 >> 2] = i2;
     i20 = 146;
     break;
    }
   case 6:
    {
     i9 = 3;
     i6 = 2958;
     i7 = i21;
     i8 = 0;
     i20 = 111;
     break;
    }
   case 7:
    {
     i9 = 3;
     i6 = 3627;
     i7 = i21;
     i8 = 0;
     i20 = 111;
     break;
    }
   default:
    {
     i9 = 4;
     i6 = i10 & 15;
     i7 = i21;
     i8 = 0;
     i20 = 111;
    }
   }
   L156 : do if ((i20 | 0) == 111) {
    while (1) {
     i20 = 0;
     switch (i6 & 3 | 0) {
     case 0:
      {
       i5 = i4 + 1 | 0;
       if (i5 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 179;
        break L99;
       }
       i1 = HEAPU8[i4 >> 0] | 0;
       if (i1 >>> 0 >= i3 >>> 0) {
        i20 = 179;
        break L99;
       }
       HEAP32[i7 >> 2] = HEAP32[(HEAP32[i11 >> 2] | 0) + (i1 << 2) >> 2];
       i4 = i5;
       break;
      }
     case 1:
      {
       i1 = i4 + 2 | 0;
       if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 179;
        break L99;
       }
       HEAP32[i7 >> 2] = HEAP8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
       i4 = i1;
       break;
      }
     case 2:
      {
       i1 = i4 + 1 | 0;
       if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 179;
        break L99;
       }
       HEAP32[i7 >> 2] = (HEAP8[i4 >> 0] | 0) + i5;
       i4 = i1;
       break;
      }
     default:
      HEAP32[i7 >> 2] = i5;
     }
     switch (i6 >>> 2 & 3 | 0) {
     case 0:
      {
       i2 = i4 + 1 | 0;
       if (i2 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 179;
        break L99;
       }
       i1 = HEAPU8[i4 >> 0] | 0;
       if (i1 >>> 0 >= i12 >>> 0) {
        i20 = 179;
        break L99;
       }
       HEAP32[i7 + 4 >> 2] = HEAP32[(HEAP32[i18 + 12 >> 2] | 0) + (i1 << 2) >> 2];
       i4 = i2;
       break;
      }
     case 1:
      {
       i1 = i4 + 2 | 0;
       if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 179;
        break L99;
       }
       HEAP32[i7 + 4 >> 2] = HEAP8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
       i4 = i1;
       break;
      }
     case 2:
      {
       i1 = i4 + 1 | 0;
       if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
        i20 = 179;
        break L99;
       }
       HEAP32[i7 + 4 >> 2] = (HEAP8[i4 >> 0] | 0) + i2;
       i4 = i1;
       break;
      }
     default:
      HEAP32[i7 + 4 >> 2] = i2;
     }
     if ((i8 | 0) == 0 & (i9 | 0) == 4) {
      i1 = i4 + 1 | 0;
      if (i1 >>> 0 > (i16 + i17 | 0) >>> 0) {
       i20 = 179;
       break L99;
      }
      i9 = 3;
      i6 = HEAPU8[i4 >> 0] | 0;
      i4 = i1;
     } else i6 = i6 >>> 4;
     i2 = i7;
     i5 = HEAP32[i2 >> 2] | 0;
     i2 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i21 + 24 >> 2] = i5;
     HEAP32[i21 + 24 + 4 >> 2] = i2;
     i8 = i8 + 1 | 0;
     if (i8 >>> 0 >= i9 >>> 0) break; else {
      i7 = i7 + 8 | 0;
      i20 = 111;
     }
    }
    switch (i10 >>> 4 | 0) {
    case 0:
     break L145;
    case 3:
    case 2:
    case 1:
     {
      i20 = 146;
      break L156;
     }
    case 5:
    case 4:
     break;
    default:
     {
      i6 = HEAP32[i18 + 28 >> 2] | 0;
      do if (!(HEAP8[i18 + 32 >> 0] | 0)) i1 = 8; else {
       i1 = HEAP16[i6 + 58 >> 1] | 0;
       if (((HEAP16[i6 + 22 >> 1] | 0) + 3 + (i1 << 16 >> 16) | 0) >>> 0 > (HEAP32[i6 + 4 >> 2] | 0) >>> 0) {
        i1 = _FT_GlyphLoader_CheckPoints(i6, 3, 0) | 0;
        if (i1) break;
        i1 = HEAP16[i6 + 58 >> 1] | 0;
       }
       i10 = HEAP32[i6 + 60 >> 2] | 0;
       i1 = i1 << 16 >> 16;
       i14 = HEAP32[i6 + 64 >> 2] | 0;
       i8 = HEAP32[i21 + 4 >> 2] | 0;
       HEAP32[i10 + (i1 << 3) >> 2] = HEAP32[i21 >> 2];
       HEAP32[i10 + (i1 << 3) + 4 >> 2] = i8;
       i8 = HEAP32[i21 + 8 + 4 >> 2] | 0;
       HEAP32[i10 + (i1 + 1 << 3) >> 2] = HEAP32[i21 + 8 >> 2];
       HEAP32[i10 + (i1 + 1 << 3) + 4 >> 2] = i8;
       i8 = HEAP32[i21 + 16 + 4 >> 2] | 0;
       HEAP32[i10 + (i1 + 2 << 3) >> 2] = HEAP32[i21 + 16 >> 2];
       HEAP32[i10 + (i1 + 2 << 3) + 4 >> 2] = i8;
       HEAP8[i14 + i1 >> 0] = 2;
       HEAP8[i14 + (i1 + 1) >> 0] = 2;
       HEAP8[i14 + (i1 + 2) >> 0] = 1;
       HEAP16[i6 + 58 >> 1] = (HEAPU16[i6 + 58 >> 1] | 0) + 3;
       i1 = 0;
      } while (0);
      HEAP32[i21 + 32 >> 2] = i1;
      break L156;
     }
    }
    i7 = HEAP32[i18 + 28 >> 2] | 0;
    if (HEAP8[i18 + 32 >> 0] | 0) {
     i6 = HEAP16[i7 + 58 >> 1] | 0;
     i1 = (i6 << 16 >> 16) + -1 | 0;
     i8 = HEAP16[i7 + 56 >> 1] | 0;
     if (i8 << 16 >> 16 > 0) i9 = HEAP16[(HEAP32[i7 + 68 >> 2] | 0) + ((i8 << 16 >> 16) + -1 << 1) >> 1] | 0; else i9 = 0;
     if (((i1 | 0) > (i9 | 0) ? (i13 = HEAP32[i7 + 60 >> 2] | 0, (HEAP32[i13 + (i9 << 3) >> 2] | 0) == (HEAP32[i13 + (i1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i13 + (i9 << 3) + 4 >> 2] | 0) == (HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0) : 0) {
      HEAP16[i7 + 58 >> 1] = i6 + -1 << 16 >> 16;
      i1 = (i6 << 16 >> 16) + -2 | 0;
     }
     if ((i1 | 0) >= (i9 | 0)) {
      HEAP16[i7 + 56 >> 1] = i8 + 1 << 16 >> 16;
      HEAP16[(HEAP32[i7 + 68 >> 2] | 0) + (i8 << 16 >> 16 << 1) >> 1] = i1;
     }
     HEAP8[i18 + 32 >> 0] = 0;
    }
    HEAP8[i18 + 32 >> 0] = 1;
    i6 = HEAP16[i7 + 22 >> 1] | 0;
    i1 = HEAP16[i7 + 58 >> 1] | 0;
    i8 = HEAP32[i7 + 4 >> 2] | 0;
    if (((i6 << 16 >> 16) + 1 + (i1 << 16 >> 16) | 0) >>> 0 <= i8 >>> 0 ? ((HEAP16[i7 + 20 >> 1] | 0) + 1 + (HEAP16[i7 + 56 >> 1] | 0) | 0) >>> 0 <= (HEAP32[i7 + 8 >> 2] | 0) >>> 0 : 0) i20 = 167; else {
     i1 = _FT_GlyphLoader_CheckPoints(i7, 1, 1) | 0;
     if (!i1) {
      i7 = HEAP32[i18 + 28 >> 2] | 0;
      if (!(HEAP8[i18 + 32 >> 0] | 0)) i1 = 8; else {
       i6 = HEAP16[i7 + 22 >> 1] | 0;
       i1 = HEAP16[i7 + 58 >> 1] | 0;
       i8 = HEAP32[i7 + 4 >> 2] | 0;
       i20 = 167;
      }
     }
    }
    do if ((i20 | 0) == 167) {
     i20 = 0;
     i9 = i7 + 58 | 0;
     if (((i1 << 16 >> 16) + 1 + (i6 << 16 >> 16) | 0) >>> 0 > i8 >>> 0) {
      i1 = _FT_GlyphLoader_CheckPoints(i7, 1, 0) | 0;
      if (i1) break;
      i1 = HEAP16[i9 >> 1] | 0;
     }
     i1 = i1 << 16 >> 16;
     i10 = HEAP32[i21 + 4 >> 2] | 0;
     i14 = (HEAP32[i7 + 60 >> 2] | 0) + (i1 << 3) | 0;
     HEAP32[i14 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i14 + 4 >> 2] = i10;
     HEAP8[(HEAP32[i7 + 64 >> 2] | 0) + i1 >> 0] = 1;
     HEAP16[i9 >> 1] = (HEAP16[i9 >> 1] | 0) + 1 << 16 >> 16;
     i1 = 0;
    } while (0);
    HEAP32[i21 + 32 >> 2] = i1;
   } while (0);
   if ((i20 | 0) == 146) {
    i20 = 0;
    i6 = HEAP32[i18 + 28 >> 2] | 0;
    do if (!(HEAP8[i18 + 32 >> 0] | 0)) i1 = 8; else {
     i1 = HEAP16[i6 + 58 >> 1] | 0;
     if (((HEAP16[i6 + 22 >> 1] | 0) + 1 + (i1 << 16 >> 16) | 0) >>> 0 > (HEAP32[i6 + 4 >> 2] | 0) >>> 0) {
      i1 = _FT_GlyphLoader_CheckPoints(i6, 1, 0) | 0;
      if (i1) break;
      i1 = HEAP16[i6 + 58 >> 1] | 0;
     }
     i1 = i1 << 16 >> 16;
     i10 = HEAP32[i21 + 4 >> 2] | 0;
     i14 = (HEAP32[i6 + 60 >> 2] | 0) + (i1 << 3) | 0;
     HEAP32[i14 >> 2] = HEAP32[i21 >> 2];
     HEAP32[i14 + 4 >> 2] = i10;
     HEAP8[(HEAP32[i6 + 64 >> 2] | 0) + i1 >> 0] = 1;
     HEAP16[i6 + 58 >> 1] = (HEAP16[i6 + 58 >> 1] | 0) + 1 << 16 >> 16;
     i1 = 0;
    } while (0);
    HEAP32[i21 + 32 >> 2] = i1;
   }
   if (!i1) i1 = i4; else break L99;
  }
  i3 = HEAP32[i18 + 28 >> 2] | 0;
  if (HEAP8[i18 + 32 >> 0] | 0) {
   i2 = HEAP16[i3 + 58 >> 1] | 0;
   i1 = (i2 << 16 >> 16) + -1 | 0;
   i4 = HEAP16[i3 + 56 >> 1] | 0;
   if (i4 << 16 >> 16 > 0) i5 = HEAP16[(HEAP32[i3 + 68 >> 2] | 0) + ((i4 << 16 >> 16) + -1 << 1) >> 1] | 0; else i5 = 0;
   if (((i1 | 0) > (i5 | 0) ? (i15 = HEAP32[i3 + 60 >> 2] | 0, (HEAP32[i15 + (i5 << 3) >> 2] | 0) == (HEAP32[i15 + (i1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i15 + (i5 << 3) + 4 >> 2] | 0) == (HEAP32[i15 + (i1 << 3) + 4 >> 2] | 0) : 0) {
    HEAP16[i3 + 58 >> 1] = i2 + -1 << 16 >> 16;
    i1 = (i2 << 16 >> 16) + -2 | 0;
   }
   if ((i1 | 0) >= (i5 | 0)) {
    HEAP16[i3 + 56 >> 1] = i4 + 1 << 16 >> 16;
    HEAP16[(HEAP32[i3 + 68 >> 2] | 0) + (i4 << 16 >> 16 << 1) >> 1] = i1;
   }
   HEAP8[i18 + 32 >> 0] = 0;
  }
  _FT_GlyphLoader_Add(i3);
  i1 = HEAP32[i21 + 32 >> 2] | 0;
 } else i20 = 179; while (0);
 if ((i20 | 0) == 179) {
  HEAP32[i21 + 32 >> 2] = 8;
  i1 = 8;
 }
 _FT_Stream_ExitFrame(i19);
 i20 = i1;
 STACKTOP = i21;
 return i20 | 0;
}

function _cid_face_init(i3, i20, i18, i1, i2) {
 i3 = i3 | 0;
 i20 = i20 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 HEAP32[i20 >> 2] = 1;
 do if (!(HEAP32[i20 + 136 >> 2] | 0)) {
  i1 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i20 + 96 >> 2] | 0) + 4 >> 2] | 0, 326535) | 0;
  if (!i1) {
   i20 = 11;
   STACKTOP = i19;
   return i20 | 0;
  } else {
   HEAP32[i20 + 136 >> 2] = i1;
   break;
  }
 } while (0);
 if (!(HEAP32[i20 + 320 >> 2] | 0)) HEAP32[i20 + 320 >> 2] = _FT_Get_Module_Interface(HEAP32[(HEAP32[i20 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 i1 = _FT_Stream_Seek(i3, 0) | 0;
 if (i1) {
  i20 = i1;
  STACKTOP = i19;
  return i20 | 0;
 }
 i12 = HEAP32[i20 + 100 >> 2] | 0;
 i2 = i19 + 8 | 0;
 i3 = i2 + 104 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 i10 = HEAP32[i20 + 104 >> 2] | 0;
 i1 = HEAP32[i20 + 136 >> 2] | 0;
 i2 = i19 + 8 | 0;
 i3 = i2 + 100 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 FUNCTION_TABLE_viiii[HEAP32[HEAP32[i1 + 4 >> 2] >> 2] & 15](i19 + 8 | 0, 0, 0, i12);
 HEAP32[i19 + 8 + 72 >> 2] = i10;
 i8 = _FT_Stream_Pos(i10) | 0;
 i1 = _FT_Stream_EnterFrame(i10, 31) | 0;
 L13 : do if (!i1) {
  i16 = (_strncmp(HEAP32[i10 + 32 >> 2] | 0, 323449, 31) | 0) == 0;
  _FT_Stream_ExitFrame(i10);
  if (!i16) {
   HEAP32[i19 >> 2] = 2;
   break;
  }
  i11 = i19 + 8 + 12 | 0;
  L18 : while (1) {
   i3 = _FT_Stream_Pos(i10) | 0;
   i1 = HEAP32[i10 + 4 >> 2] | 0;
   i2 = _FT_Stream_Pos(i10) | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = 3;
    i17 = 25;
    break;
   }
   i2 = i1 - i2 | 0;
   i4 = 0;
   i9 = i3;
   i3 = i19 + 112 | 0;
   i1 = 266;
   L21 : while (1) {
    i2 = (i1 | 0) < (i2 | 0) ? i1 : i2;
    i1 = _FT_Stream_Read(i10, i3, i2) | 0;
    if (i1) {
     i17 = 25;
     break L18;
    }
    if ((i2 | 0) < 256) HEAP8[i19 + 112 + (i2 + i4) >> 0] = 0;
    i3 = i4 + -10 + i2 | 0;
    if ((i3 | 0) > 0) {
     i4 = HEAP8[i19 + 112 >> 0] | 0;
     i2 = i19 + 112 | 0;
     while (1) {
      if (i4 << 24 >> 24 == 83 ? (_strncmp(i2, 323481, 9) | 0) == 0 : 0) {
       i1 = i9;
       i17 = 19;
       break L21;
      }
      i1 = i2 + 1 | 0;
      i4 = HEAP8[i1 >> 0] | 0;
      if (i4 << 24 >> 24 == 115 ? (_strncmp(i2, 323491, 6) | 0) == 0 : 0) {
       i1 = i9;
       i17 = 23;
       break L21;
      }
      if (i1 >>> 0 >= (i19 + 112 + i3 | 0) >>> 0) break; else i2 = i1;
     }
    } else i1 = i19 + 112 | 0;
    _memmove(i19 + 112 | 0, i1 | 0, 10) | 0;
    i1 = HEAP32[i10 + 4 >> 2] | 0;
    i2 = _FT_Stream_Pos(i10) | 0;
    if ((i1 | 0) == (i2 | 0)) {
     i1 = 3;
     i17 = 25;
     break L18;
    } else {
     i2 = i1 - i2 | 0;
     i4 = 10;
     i9 = i9 + 256 | 0;
     i3 = i19 + 112 + 10 | 0;
     i1 = 256;
    }
   }
   if ((i17 | 0) == 19) {
    i17 = 0;
    i2 = 10 - (i19 + 112) + i2 | 0;
   } else if ((i17 | 0) == 23) {
    i17 = 0;
    i2 = 7 - (i19 + 112) + i2 | 0;
   }
   i7 = i2 + i1 | 0;
   i1 = _FT_Stream_Seek(i10, i8) | 0;
   if (i1) {
    i17 = 38;
    break L13;
   }
   i1 = _FT_Stream_ExtractFrame(i10, i7 - i8 | 0, i19 + 8 + 76 | 0) | 0;
   if (i1) {
    i17 = 38;
    break L13;
   }
   HEAP32[i19 + 8 + 84 >> 2] = i7;
   HEAP32[i19 + 8 + 80 >> 2] = i7 - i8;
   i2 = HEAP32[i19 + 8 + 76 >> 2] | 0;
   HEAP32[i19 + 8 + 4 >> 2] = i2;
   HEAP32[i19 + 8 >> 2] = i2;
   HEAP32[i19 + 8 + 8 >> 2] = i2 + (i7 - i8);
   HEAP32[i19 + 8 + 96 >> 2] = -1;
   FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 32 >> 2] & 127](i19 + 8 | 0);
   FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 28 >> 2] & 127](i19 + 8 | 0);
   i1 = HEAP32[i19 + 8 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 32 >> 2] & 127](i19 + 8 | 0);
   FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 28 >> 2] & 127](i19 + 8 | 0);
   i6 = HEAP32[i19 + 8 + 8 >> 2] | 0;
   i3 = HEAP32[i19 + 8 >> 2] | 0;
   if (i3 >>> 0 < i6 >>> 0) {
    i4 = i1;
    while (1) {
     i1 = HEAP32[i11 >> 2] | 0;
     if (i1) {
      i17 = 38;
      break L13;
     }
     if ((HEAP8[i3 >> 0] | 0) == 83 ? (_strncmp(i3, 323481, 9) | 0) == 0 : 0) {
      i1 = i4;
      break L18;
     }
     if ((HEAP8[i3 + 1 >> 0] | 0) == 115 ? (_strncmp(i3, 323491, 6) | 0) == 0 : 0) {
      i1 = 2;
      i17 = 38;
      break L13;
     }
     FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 32 >> 2] & 127](i19 + 8 | 0);
     FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 28 >> 2] & 127](i19 + 8 | 0);
     i1 = HEAP32[i19 + 8 >> 2] | 0;
     if (i1 >>> 0 < i6 >>> 0) {
      i16 = i3;
      i2 = i4;
      i3 = i1;
      i4 = i16;
     } else break;
    }
   }
   _FT_Stream_ReleaseFrame(i10, i19 + 8 + 76 | 0);
   i1 = _FT_Stream_Seek(i10, i7) | 0;
   if (i1) {
    i17 = 38;
    break L13;
   }
  }
  if ((i17 | 0) == 25) {
   i17 = 38;
   break;
  }
  if (!(_strncmp(i2, 323498, 5) | 0)) HEAP32[i19 + 8 + 88 >> 2] = _atol(i1) | 0;
  HEAP32[i19 >> 2] = 0;
  i8 = HEAP32[i19 + 8 + 76 >> 2] | 0;
  i10 = HEAP32[i19 + 8 + 80 >> 2] | 0;
  HEAP32[i19 + 8 >> 2] = i8;
  HEAP32[i19 + 8 + 8 >> 2] = i8 + i10;
  HEAP32[i11 >> 2] = 0;
  i1 = i8;
  L61 : while (1) {
   HEAP32[i19 + 8 >> 2] = i1;
   FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 28 >> 2] & 127](i19 + 8 | 0);
   i9 = HEAP32[i19 + 8 >> 2] | 0;
   i2 = i9 >>> 0 < (i8 + i10 | 0) >>> 0 ? i9 + -17 | 0 : i8 + (i10 + -18) | 0;
   if (i1 >>> 0 < i2 >>> 0) do {
    if (((HEAP8[i1 >> 0] | 0) == 37 ? (_strncmp(i1, 323504, 17) | 0) == 0 : 0) ? (HEAP32[i20 + 300 >> 2] | 0) > 0 : 0) HEAP32[i19 + 8 + 96 >> 2] = (HEAP32[i19 + 8 + 96 >> 2] | 0) + 1;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i2 | 0));
   if (i9 >>> 0 >= (i8 + i10 | 0) >>> 0) {
    i17 = 48;
    break;
   }
   FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 32 >> 2] & 127](i19 + 8 | 0);
   i7 = HEAP32[i19 + 8 >> 2] | 0;
   i1 = HEAP32[i11 >> 2] | 0;
   if (!(i7 >>> 0 < (i8 + i10 | 0) >>> 0 & (i1 | 0) == 0)) break;
   if (!((i9 + 2 | 0) >>> 0 < (i8 + i10 | 0) >>> 0 & (HEAP8[i9 >> 0] | 0) == 47)) {
    i1 = i7;
    continue;
   }
   i4 = i7 - (i9 + 1) | 0;
   if ((i4 + -1 | 0) >>> 0 >= 21) {
    i1 = i7;
    continue;
   }
   i6 = HEAP8[i9 + 1 >> 0] | 0;
   L76 : do if ((i4 | 0) > 1) {
    i1 = 323522;
    i3 = 267492;
    while (1) {
     L79 : do if (i6 << 24 >> 24 == (HEAP8[i1 >> 0] | 0) ? (i4 | 0) == (_strlen(i1) | 0) : 0) {
      i2 = 1;
      while (1) {
       i16 = i2;
       i2 = i2 + 1 | 0;
       if ((HEAP8[i9 + i2 >> 0] | 0) != (HEAP8[i1 + i16 >> 0] | 0)) break L79;
       if ((i2 | 0) >= (i4 | 0)) break L76;
      }
     } while (0);
     i3 = i3 + 36 | 0;
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i1 = i7;
      continue L61;
     }
    }
   } else {
    i1 = 323522;
    i3 = 267492;
    while (1) {
     if (i6 << 24 >> 24 == (HEAP8[i1 >> 0] | 0) ? (i4 | 0) == (_strlen(i1) | 0) : 0) break L76;
     i3 = i3 + 36 | 0;
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i1 = i7;
      continue L61;
     }
    }
   } while (0);
   i2 = HEAP32[i3 + 8 >> 2] | 0;
   do if ((i2 | 0) != 10) {
    switch (HEAP32[i3 + 4 >> 2] | 0) {
    case 0:
     {
      i1 = i20 + 140 | 0;
      break;
     }
    case 3:
     {
      i1 = i20 + 164 | 0;
      break;
     }
    case 2:
     {
      i1 = i20 + 312 | 0;
      break;
     }
    case 5:
     {
      i1 = i20 + 196 | 0;
      break;
     }
    default:
     {
      i1 = HEAP32[i19 + 8 + 96 >> 2] | 0;
      if ((i1 | 0) < 0) {
       i17 = 72;
       break L61;
      }
      if ((i1 | 0) >= (HEAP32[i20 + 300 >> 2] | 0)) {
       i17 = 72;
       break L61;
      }
      i1 = (HEAP32[i20 + 304 >> 2] | 0) + (i1 * 252 | 0) | 0;
     }
    }
    HEAP32[i19 + 112 >> 2] = i1;
    if ((i2 & -2 | 0) == 8) {
     i1 = FUNCTION_TABLE_iiiiii[HEAP32[i19 + 8 + 68 >> 2] & 63](i19 + 8 | 0, i3, i19 + 112 | 0, 0, 0) | 0;
     break;
    } else {
     i1 = FUNCTION_TABLE_iiiiii[HEAP32[i19 + 8 + 64 >> 2] & 63](i19 + 8 | 0, i3, i19 + 112 | 0, 0, 0) | 0;
     break;
    }
   } else {
    FUNCTION_TABLE_vii[HEAP32[i3 + 12 >> 2] & 31](i20, i19 + 8 | 0);
    i1 = HEAP32[i11 >> 2] | 0;
   } while (0);
   HEAP32[i11 >> 2] = i1;
   if (i1) {
    i17 = 76;
    break;
   }
   i1 = HEAP32[i19 + 8 >> 2] | 0;
  }
  if ((i17 | 0) == 48) i1 = HEAP32[i11 >> 2] | 0; else if ((i17 | 0) == 72) {
   HEAP32[i11 >> 2] = 160;
   i1 = 160;
   i17 = 76;
  }
  if ((i17 | 0) == 76) {
   HEAP32[i19 >> 2] = i1;
   break;
  }
  HEAP32[i19 >> 2] = i1;
  if (!((i18 | 0) < 0 | (i1 | 0) != 0) ? (i13 = _ft_mem_alloc(i12, 40, i19) | 0, HEAP32[i20 + 328 >> 2] = i13, (HEAP32[i19 >> 2] | 0) == 0) : 0) {
   i1 = HEAP32[i19 + 8 + 88 >> 2] | 0;
   L115 : do if (!i1) {
    i2 = i13;
    i1 = HEAP32[i20 + 104 >> 2] | 0;
    i3 = i2 + 40 | 0;
    do {
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     i2 = i2 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i2 | 0) < (i3 | 0));
    HEAP32[i20 + 308 >> 2] = HEAP32[i19 + 8 + 84 >> 2];
   } else {
    i7 = _ft_mem_alloc(i12, i1, i19) | 0;
    HEAP32[i20 + 324 >> 2] = i7;
    if (HEAP32[i19 >> 2] | 0) break L13;
    i8 = HEAP32[i19 + 8 + 88 >> 2] | 0;
    i10 = HEAP32[i20 + 104 >> 2] | 0;
    L119 : do if (!(_FT_Stream_Seek(i10, HEAP32[i19 + 8 + 84 >> 2] | 0) | 0)) {
     L121 : do if ((i8 | 0) > 0) {
      i6 = i7;
      i1 = i19 + 112 | 0;
      i2 = i19 + 112 | 0;
      i11 = 1;
      while (1) {
       L125 : while (1) {
        if (i1 >>> 0 >= i2 >>> 0) {
         i2 = _FT_Stream_Pos(i10) | 0;
         i1 = HEAP32[i10 + 4 >> 2] | 0;
         if ((i1 | 0) == (i2 | 0)) break L119;
         if (_FT_Stream_Read(i10, i19 + 112 | 0, (i1 - i2 | 0) >>> 0 < 256 ? i1 - i2 | 0 : 256) | 0) break L119;
         i1 = i19 + 112 | 0;
         i2 = i19 + 112 + ((_FT_Stream_Pos(i10) | 0) - i2) | 0;
        }
        i4 = HEAP8[i1 >> 0] | 0;
        if (((i4 & 255) + -48 | 0) >>> 0 < 10) {
         i17 = 94;
         break;
        }
        if ((i4 + -97 & 255) < 6) {
         i17 = 95;
         break;
        }
        if ((i4 + -65 & 255) < 6) {
         i17 = 96;
         break;
        }
        switch (i4 << 24 >> 24) {
        case 62:
         {
          i9 = 1;
          i3 = i1;
          i1 = 0;
          break L125;
         }
        case 0:
        case 12:
        case 10:
        case 13:
        case 9:
        case 32:
         break;
        default:
         break L119;
        }
        i1 = i1 + 1 | 0;
       }
       if ((i17 | 0) == 94) {
        i17 = 0;
        i9 = 0;
        i3 = i1;
        i1 = (i4 & 255) + 208 & 255;
       } else if ((i17 | 0) == 95) {
        i17 = 0;
        i9 = 0;
        i3 = i1;
        i1 = (i4 & 255) + 159 & 255;
       } else if ((i17 | 0) == 96) {
        i17 = 0;
        i9 = 0;
        i3 = i1;
        i1 = (i4 & 255) + 201 & 255;
       }
       if (!(i11 << 24 >> 24)) {
        HEAP8[i6 >> 0] = (HEAPU8[i6 >> 0] | 0) + (i1 & 255);
        i1 = i6 + 1 | 0;
       } else {
        HEAP8[i6 >> 0] = (i1 & 255) << 4;
        i1 = i6;
       }
       if (i9 << 24 >> 24) break L121;
       if (i1 >>> 0 < (i7 + i8 | 0) >>> 0) {
        i6 = i1;
        i1 = i3 + 1 | 0;
        i11 = 1 - (i11 & 255) & 255;
       } else break;
      }
     } while (0);
     _FT_Stream_OpenMemory(HEAP32[i20 + 328 >> 2] | 0, HEAP32[i20 + 324 >> 2] | 0, HEAP32[i19 + 8 + 88 >> 2] | 0);
     HEAP32[i20 + 308 >> 2] = 0;
     break L115;
    } while (0);
    break L13;
   } while (0);
   i16 = HEAP32[i20 + 100 >> 2] | 0;
   i13 = HEAP32[i20 + 328 >> 2] | 0;
   i14 = HEAP32[i20 + 136 >> 2] | 0;
   i2 = _ft_mem_realloc(i16, 8, 0, HEAP32[i20 + 300 >> 2] | 0, 0, i19 + 112 | 0) | 0;
   HEAP32[i20 + 316 >> 2] = i2;
   L149 : do if ((HEAP32[i19 + 112 >> 2] | 0) == 0 ? (HEAP32[i20 + 300 >> 2] | 0) > 0 : 0) {
    i3 = 0;
    i15 = 0;
    i1 = 0;
    L152 : while (1) {
     i4 = HEAP32[i20 + 304 >> 2] | 0;
     i10 = HEAP32[i4 + (i15 * 252 | 0) + 4 >> 2] | 0;
     i12 = HEAP32[i4 + (i15 * 252 | 0) + 240 >> 2] | 0;
     if ((i12 | 0) == -1) {
      i17 = 109;
      break;
     }
     if ((i12 + 1 | 0) >>> 0 > i3 >>> 0) {
      if ((i12 + 4 & -4) >>> 0 <= i3 >>> 0) {
       i17 = 112;
       break;
      }
      i1 = _ft_mem_realloc(i16, 4, i3, i12 + 4 & -4, i1, i19 + 112 | 0) | 0;
      if (!(HEAP32[i19 + 112 >> 2] | 0)) i11 = i12 + 4 & -4; else break;
     } else i11 = i3;
     i8 = _FT_Stream_Seek(i13, (HEAP32[i4 + (i15 * 252 | 0) + 244 >> 2] | 0) + (HEAP32[i20 + 308 >> 2] | 0) | 0) | 0;
     HEAP32[i19 + 112 >> 2] = i8;
     if (i8) break;
     i3 = i4 + (i15 * 252 | 0) + 248 | 0;
     i8 = _FT_Stream_EnterFrame(i13, Math_imul(HEAP32[i3 >> 2] | 0, i12 + 1 | 0) | 0) | 0;
     HEAP32[i19 + 112 >> 2] = i8;
     if (i8) break;
     i8 = HEAP32[i3 >> 2] | 0;
     if (!((i8 & 255) << 24 >> 24)) {
      i3 = 0;
      do {
       HEAP32[i1 + (i3 << 2) >> 2] = 0;
       i3 = i3 + 1 | 0;
      } while (i3 >>> 0 <= i12 >>> 0);
     } else {
      i3 = HEAP32[i13 + 32 >> 2] | 0;
      i9 = 0;
      while (1) {
       i7 = i3;
       i6 = i8 & 255;
       i3 = i7;
       i4 = 0;
       while (1) {
        i4 = HEAPU8[i3 >> 0] | i4 << 8;
        i6 = i6 + -1 << 24 >> 24;
        if (!(i6 << 24 >> 24)) break; else i3 = i3 + 1 | 0;
       }
       HEAP32[i1 + (i9 << 2) >> 2] = i4;
       i9 = i9 + 1 | 0;
       if (i9 >>> 0 > i12 >>> 0) break; else i3 = i7 + ((i8 + 255 & 255) + 1) | 0;
      }
     }
     _FT_Stream_ExitFrame(i13);
     i3 = HEAP32[i1 >> 2] | 0;
     if (i12) {
      i4 = i3;
      i6 = 1;
      do {
       i8 = i4;
       i4 = HEAP32[i1 + (i6 << 2) >> 2] | 0;
       i6 = i6 + 1 | 0;
       if (i8 >>> 0 > i4 >>> 0) break L152;
      } while (i6 >>> 0 <= i12 >>> 0);
     }
     i3 = (HEAP32[i1 + (i12 << 2) >> 2] | 0) - i3 | 0;
     i7 = i2 + 4 | 0;
     HEAP32[i7 >> 2] = _ft_mem_realloc(i16, 4, 0, i12 + 1 | 0, 0, i19 + 112 | 0) | 0;
     if (HEAP32[i19 + 112 >> 2] | 0) break;
     i8 = _ft_mem_alloc(i16, i3, i19 + 112 | 0) | 0;
     HEAP32[HEAP32[i7 >> 2] >> 2] = i8;
     if (HEAP32[i19 + 112 >> 2] | 0) break;
     i8 = _FT_Stream_Seek(i13, (HEAP32[i1 >> 2] | 0) + (HEAP32[i20 + 308 >> 2] | 0) | 0) | 0;
     HEAP32[i19 + 112 >> 2] = i8;
     if (i8) break;
     i8 = _FT_Stream_Read(i13, HEAP32[HEAP32[i7 >> 2] >> 2] | 0, i3) | 0;
     HEAP32[i19 + 112 >> 2] = i8;
     if (i8) break;
     do if (i12) {
      i6 = HEAP32[i1 >> 2] | 0;
      i3 = i6;
      i4 = 1;
      do {
       i9 = i3;
       i3 = HEAP32[i1 + (i4 << 2) >> 2] | 0;
       i8 = HEAP32[i7 >> 2] | 0;
       HEAP32[i8 + (i4 << 2) >> 2] = (HEAP32[i8 + (i4 + -1 << 2) >> 2] | 0) + (i3 - i9);
       i4 = i4 + 1 | 0;
      } while (i4 >>> 0 <= i12 >>> 0);
      if ((i10 | 0) < 0) break;
      i3 = i1 + 4 | 0;
      FUNCTION_TABLE_viii[HEAP32[i14 + 16 >> 2] & 31](HEAP32[HEAP32[i7 >> 2] >> 2] | 0, (HEAP32[i3 >> 2] | 0) - i6 | 0, 4330);
      if ((i12 | 0) == 1) break; else i4 = 1;
      do {
       i8 = i4;
       i4 = i4 + 1 | 0;
       i10 = i3;
       i3 = i1 + (i4 << 2) | 0;
       FUNCTION_TABLE_viii[HEAP32[i14 + 16 >> 2] & 31](HEAP32[(HEAP32[i7 >> 2] | 0) + (i8 << 2) >> 2] | 0, (HEAP32[i3 >> 2] | 0) - (HEAP32[i10 >> 2] | 0) | 0, 4330);
      } while ((i4 | 0) != (i12 | 0));
     } while (0);
     HEAP32[i2 >> 2] = i12;
     i15 = i15 + 1 | 0;
     if ((i15 | 0) >= (HEAP32[i20 + 300 >> 2] | 0)) break L149; else {
      i3 = i11;
      i2 = i2 + 8 | 0;
     }
    }
    if ((i17 | 0) == 109) HEAP32[i19 + 112 >> 2] = 160; else if ((i17 | 0) == 112) HEAP32[i19 + 112 >> 2] = 160;
    i2 = HEAP32[i20 + 316 >> 2] | 0;
    if (i2) {
     if ((HEAP32[i20 + 300 >> 2] | 0) > 0) {
      i4 = 0;
      do {
       i3 = HEAP32[i2 + (i4 << 3) + 4 >> 2] | 0;
       if (i3) {
        _ft_mem_free(i16, HEAP32[i3 >> 2] | 0);
        HEAP32[HEAP32[(HEAP32[i20 + 316 >> 2] | 0) + (i4 << 3) + 4 >> 2] >> 2] = 0;
        i2 = HEAP32[i20 + 316 >> 2] | 0;
       }
       _ft_mem_free(i16, HEAP32[i2 + (i4 << 3) + 4 >> 2] | 0);
       i2 = HEAP32[i20 + 316 >> 2] | 0;
       HEAP32[i2 + (i4 << 3) + 4 >> 2] = 0;
       i4 = i4 + 1 | 0;
      } while ((i4 | 0) < (HEAP32[i20 + 300 >> 2] | 0));
     }
     _ft_mem_free(i16, i2);
     HEAP32[i20 + 316 >> 2] = 0;
    }
   } else i1 = 0; while (0);
   _ft_mem_free(i16, i1);
   HEAP32[i19 >> 2] = HEAP32[i19 + 112 >> 2];
  }
 } else i17 = 38; while (0);
 if ((i17 | 0) == 38) HEAP32[i19 >> 2] = i1;
 if (HEAP32[i19 + 8 + 76 >> 2] | 0) _FT_Stream_ReleaseFrame(HEAP32[i19 + 8 + 72 >> 2] | 0, i19 + 8 + 76 | 0);
 FUNCTION_TABLE_vi[HEAP32[i19 + 8 + 24 >> 2] & 127](i19 + 8 | 0);
 i1 = HEAP32[i19 >> 2] | 0;
 if ((i18 | 0) < 0 | (i1 | 0) != 0) {
  i20 = i1;
  STACKTOP = i19;
  return i20 | 0;
 }
 if (i18) {
  i20 = 6;
  STACKTOP = i19;
  return i20 | 0;
 }
 HEAP32[i20 + 16 >> 2] = HEAP32[i20 + 140 + 156 >> 2];
 HEAP32[i20 + 36 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = (HEAP8[i20 + 140 + 48 >> 0] | 0) == 0 ? 2065 : 2069;
 i2 = HEAP32[i20 + 140 + 36 >> 2] | 0;
 HEAP32[i20 + 20 >> 2] = i2;
 HEAP32[i20 + 24 >> 2] = 324290;
 L214 : do if (!i2) {
  i1 = HEAP32[i20 + 140 >> 2] | 0;
  if (i1) HEAP32[i20 + 20 >> 2] = i1;
 } else {
  i1 = HEAP32[i20 + 140 + 32 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i5 = HEAP8[i1 >> 0] | 0, i5 << 24 >> 24 != 0) : 0) {
   L219 : while (1) {
    i4 = i5 << 24 >> 24 == 0;
    L221 : while (1) {
     i3 = HEAP8[i2 >> 0] | 0;
     if (i5 << 24 >> 24 == i3 << 24 >> 24) {
      i17 = 152;
      break;
     }
     switch (i5 << 24 >> 24) {
     case 45:
     case 32:
      break L221;
     default:
      {}
     }
     switch (i3 << 24 >> 24) {
     case 0:
      break L219;
     case 45:
     case 32:
      break;
     default:
      break L214;
     }
     if (i4) break L214; else i2 = i2 + 1 | 0;
    }
    if ((i17 | 0) == 152) {
     i17 = 0;
     i2 = i2 + 1 | 0;
    }
    i1 = i1 + 1 | 0;
    i5 = HEAP8[i1 >> 0] | 0;
    if (!(i5 << 24 >> 24)) break L214;
   }
   HEAP32[i20 + 24 >> 2] = i1;
  }
 } while (0);
 i1 = (HEAP32[i20 + 140 + 44 >> 2] | 0) != 0 & 1;
 HEAP32[i20 + 12 >> 2] = i1;
 i2 = HEAP32[i20 + 140 + 40 >> 2] | 0;
 do if (i2) {
  if ((_strcmp(i2, 324256) | 0) != 0 ? (_strcmp(i2, 323534) | 0) != 0 : 0) break;
  HEAP32[i20 + 12 >> 2] = i1 | 2;
 } while (0);
 HEAP32[i20 + 28 >> 2] = 0;
 HEAP32[i20 + 32 >> 2] = 0;
 HEAP32[i20 + 52 >> 2] = HEAP32[i20 + 140 + 56 >> 2] >> 16;
 i2 = HEAP32[i20 + 140 + 60 >> 2] >> 16;
 HEAP32[i20 + 56 >> 2] = i2;
 HEAP32[i20 + 60 >> 2] = (HEAP32[i20 + 140 + 64 >> 2] | 0) + 65535 >> 16;
 i3 = (HEAP32[i20 + 140 + 68 >> 2] | 0) + 65535 >> 16;
 HEAP32[i20 + 64 >> 2] = i3;
 i1 = HEAP16[i20 + 68 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  HEAP16[i20 + 68 >> 1] = 1e3;
  i1 = 1e3;
 }
 HEAP16[i20 + 70 >> 1] = i3;
 HEAP16[i20 + 72 >> 1] = i2;
 i18 = (((i1 & 65535) * 12 | 0) >>> 0) / 10 | 0;
 HEAP16[i20 + 74 >> 1] = (i18 << 16 >> 16 | 0) < (i3 - i2 | 0) ? i3 - i2 | 0 : i18;
 HEAP16[i20 + 80 >> 1] = HEAP16[i20 + 140 + 24 + 26 >> 1] | 0;
 HEAP16[i20 + 82 >> 1] = HEAP16[i20 + 140 + 52 >> 1] | 0;
 i20 = 0;
 STACKTOP = i19;
 return i20 | 0;
}

function __ZNK4math6Sphere11TriangulateEPNS_6float3ES2_PNS_6float2Eib(i11, i8, i9, i10, i7, i1) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i12 = 0, i13 = 0, f14 = f0, f15 = f0, f16 = f0, d17 = 0.0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((i7 | 0) < 24) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 HEAP32[i13 + 1032 >> 2] = 0;
 i12 = i13 + 1032 + 4 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 + 1032 + 8 >> 2] = 0;
 __ZN4math6float3C2Efff(i13 + 984 | 0, Math_fround(HEAPF32[i11 + 12 >> 2]), Math_fround(0.0), Math_fround(0.0));
 __ZN4math6float3C2Efff(i13 + 972 | 0, Math_fround(-Math_fround(HEAPF32[i11 + 12 >> 2])), Math_fround(0.0), Math_fround(0.0));
 __ZN4math6float3C2Efff(i13 + 960 | 0, Math_fround(0.0), Math_fround(HEAPF32[i11 + 12 >> 2]), Math_fround(0.0));
 __ZN4math6float3C2Efff(i13 + 948 | 0, Math_fround(0.0), Math_fround(-Math_fround(HEAPF32[i11 + 12 >> 2])), Math_fround(0.0));
 __ZN4math6float3C2Efff(i13 + 936 | 0, Math_fround(0.0), Math_fround(0.0), Math_fround(HEAPF32[i11 + 12 >> 2]));
 __ZN4math6float3C2Efff(i13 + 924 | 0, Math_fround(0.0), Math_fround(0.0), Math_fround(-Math_fround(HEAPF32[i11 + 12 >> 2])));
 do if (i1) {
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 888 | 0, i13 + 960 | 0, i13 + 984 | 0, i13 + 936 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  i2 = i13 + 1032 + 8 | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 888 | 0); else {
   i6 = i1;
   i4 = i13 + 888 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 852 | 0, i13 + 984 | 0, i13 + 960 | 0, i13 + 924 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 852 | 0); else {
   i6 = i1;
   i4 = i13 + 852 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 816 | 0, i13 + 948 | 0, i13 + 936 | 0, i13 + 984 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 816 | 0); else {
   i6 = i1;
   i4 = i13 + 816 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 780 | 0, i13 + 948 | 0, i13 + 984 | 0, i13 + 924 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 780 | 0); else {
   i6 = i1;
   i4 = i13 + 780 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 744 | 0, i13 + 936 | 0, i13 + 972 | 0, i13 + 960 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 744 | 0); else {
   i6 = i1;
   i4 = i13 + 744 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 708 | 0, i13 + 960 | 0, i13 + 972 | 0, i13 + 924 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 708 | 0); else {
   i6 = i1;
   i4 = i13 + 708 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 672 | 0, i13 + 948 | 0, i13 + 972 | 0, i13 + 936 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 672 | 0); else {
   i6 = i1;
   i4 = i13 + 672 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 636 | 0, i13 + 972 | 0, i13 + 948 | 0, i13 + 924 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) {
   __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 636 | 0);
   break;
  } else {
   i6 = i1;
   i4 = i13 + 636 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
   break;
  }
 } else {
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 600 | 0, i13 + 960 | 0, i13 + 936 | 0, i13 + 984 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  i2 = i13 + 1032 + 8 | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 600 | 0); else {
   i6 = i1;
   i4 = i13 + 600 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 564 | 0, i13 + 984 | 0, i13 + 924 | 0, i13 + 960 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 564 | 0); else {
   i6 = i1;
   i4 = i13 + 564 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 528 | 0, i13 + 948 | 0, i13 + 984 | 0, i13 + 936 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 528 | 0); else {
   i6 = i1;
   i4 = i13 + 528 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 492 | 0, i13 + 948 | 0, i13 + 924 | 0, i13 + 984 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 492 | 0); else {
   i6 = i1;
   i4 = i13 + 492 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 456 | 0, i13 + 936 | 0, i13 + 960 | 0, i13 + 972 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 456 | 0); else {
   i6 = i1;
   i4 = i13 + 456 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 420 | 0, i13 + 960 | 0, i13 + 924 | 0, i13 + 972 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 420 | 0); else {
   i6 = i1;
   i4 = i13 + 420 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 384 | 0, i13 + 948 | 0, i13 + 936 | 0, i13 + 972 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 384 | 0); else {
   i6 = i1;
   i4 = i13 + 384 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
  }
  __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 348 | 0, i13 + 972 | 0, i13 + 924 | 0, i13 + 948 | 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) {
   __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 348 | 0);
   break;
  } else {
   i6 = i1;
   i4 = i13 + 348 | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   HEAP32[i12 >> 2] = i1 + 36;
   break;
  }
 } while (0);
 i1 = HEAP32[i12 >> 2] | 0;
 i2 = HEAP32[i13 + 1032 >> 2] | 0;
 if (((((i1 - i2 | 0) / 36 | 0) * 3 | 0) + 9 | 0) > (i7 | 0)) i5 = 0; else {
  i3 = 0;
  do {
   i6 = i13 + 996 | 0;
   i4 = i2 + (i3 * 36 | 0) | 0;
   i5 = i6 + 36 | 0;
   do {
    HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
    i6 = i6 + 4 | 0;
    i4 = i4 + 4 | 0;
   } while ((i6 | 0) < (i5 | 0));
   __ZNK4math6float3plERKS0_(i13 + 324 | 0, i13 + 996 | 0, i13 + 996 + 12 | 0);
   __ZNK4math6float3mlEf(i13 + 312 | 0, i13 + 324 | 0, Math_fround(.5));
   __ZNK4math6float314ScaledToLengthEf(i13 + 336 | 0, i13 + 312 | 0, Math_fround(HEAPF32[i11 + 12 >> 2]));
   __ZNK4math6float3plERKS0_(i13 + 288 | 0, i13 + 996 | 0, i13 + 996 + 24 | 0);
   __ZNK4math6float3mlEf(i13 + 276 | 0, i13 + 288 | 0, Math_fround(.5));
   __ZNK4math6float314ScaledToLengthEf(i13 + 300 | 0, i13 + 276 | 0, Math_fround(HEAPF32[i11 + 12 >> 2]));
   __ZNK4math6float3plERKS0_(i13 + 252 | 0, i13 + 996 + 12 | 0, i13 + 996 + 24 | 0);
   __ZNK4math6float3mlEf(i13 + 240 | 0, i13 + 252 | 0, Math_fround(.5));
   __ZNK4math6float314ScaledToLengthEf(i13 + 264 | 0, i13 + 240 | 0, Math_fround(HEAPF32[i11 + 12 >> 2]));
   __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 204 | 0, i13 + 996 | 0, i13 + 336 | 0, i13 + 300 | 0);
   i1 = HEAP32[i12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i13 + 1032 + 8 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 204 | 0); else {
    i6 = i1;
    i4 = i13 + 204 | 0;
    i5 = i6 + 36 | 0;
    do {
     HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
     i6 = i6 + 4 | 0;
     i4 = i4 + 4 | 0;
    } while ((i6 | 0) < (i5 | 0));
    HEAP32[i12 >> 2] = i1 + 36;
   }
   __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 168 | 0, i13 + 996 + 12 | 0, i13 + 264 | 0, i13 + 336 | 0);
   i1 = HEAP32[i12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i13 + 1032 + 8 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 168 | 0); else {
    i6 = i1;
    i4 = i13 + 168 | 0;
    i5 = i6 + 36 | 0;
    do {
     HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
     i6 = i6 + 4 | 0;
     i4 = i4 + 4 | 0;
    } while ((i6 | 0) < (i5 | 0));
    HEAP32[i12 >> 2] = i1 + 36;
   }
   __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 132 | 0, i13 + 996 + 24 | 0, i13 + 300 | 0, i13 + 264 | 0);
   i1 = HEAP32[i12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i13 + 1032 + 8 >> 2] | 0)) __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 132 | 0); else {
    i6 = i1;
    i4 = i13 + 132 | 0;
    i5 = i6 + 36 | 0;
    do {
     HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
     i6 = i6 + 4 | 0;
     i4 = i4 + 4 | 0;
    } while ((i6 | 0) < (i5 | 0));
    HEAP32[i12 >> 2] = i1 + 36;
   }
   __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i13 + 96 | 0, i13 + 336 | 0, i13 + 264 | 0, i13 + 300 | 0);
   i1 = HEAP32[i12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i13 + 1032 + 8 >> 2] | 0)) {
    __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 1032 | 0, i13 + 96 | 0);
    i1 = HEAP32[i12 >> 2] | 0;
   } else {
    i6 = i1;
    i4 = i13 + 96 | 0;
    i5 = i6 + 36 | 0;
    do {
     HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
     i6 = i6 + 4 | 0;
     i4 = i4 + 4 | 0;
    } while ((i6 | 0) < (i5 | 0));
    HEAP32[i12 >> 2] = i1 + 36;
    i1 = i1 + 36 | 0;
   }
   i3 = i3 + 1 | 0;
   i2 = HEAP32[i13 + 1032 >> 2] | 0;
  } while ((((((i1 - i2 | 0) / 36 | 0) - i3 | 0) * 3 | 0) + 9 | 0) <= (i7 | 0));
  i5 = i3;
 }
 if (i5 >>> 0 < ((i1 - i2 | 0) / 36 | 0) >>> 0) {
  i3 = i5;
  i4 = 0;
  while (1) {
   i1 = i4 * 3 | 0;
   __ZNK4math6float3plERKS0_(i13 + 84 | 0, i11, i2 + (i3 * 36 | 0) | 0);
   HEAP32[i8 + (i1 * 12 | 0) >> 2] = HEAP32[i13 + 84 >> 2];
   HEAP32[i8 + (i1 * 12 | 0) + 4 >> 2] = HEAP32[i13 + 84 + 4 >> 2];
   HEAP32[i8 + (i1 * 12 | 0) + 8 >> 2] = HEAP32[i13 + 84 + 8 >> 2];
   __ZNK4math6float3plERKS0_(i13 + 72 | 0, i11, (HEAP32[i13 + 1032 >> 2] | 0) + (i3 * 36 | 0) + 12 | 0);
   HEAP32[i8 + ((i1 + 1 | 0) * 12 | 0) >> 2] = HEAP32[i13 + 72 >> 2];
   HEAP32[i8 + ((i1 + 1 | 0) * 12 | 0) + 4 >> 2] = HEAP32[i13 + 72 + 4 >> 2];
   HEAP32[i8 + ((i1 + 1 | 0) * 12 | 0) + 8 >> 2] = HEAP32[i13 + 72 + 8 >> 2];
   __ZNK4math6float3plERKS0_(i13 + 60 | 0, i11, (HEAP32[i13 + 1032 >> 2] | 0) + (i3 * 36 | 0) + 24 | 0);
   HEAP32[i8 + ((i1 + 2 | 0) * 12 | 0) >> 2] = HEAP32[i13 + 60 >> 2];
   HEAP32[i8 + ((i1 + 2 | 0) * 12 | 0) + 4 >> 2] = HEAP32[i13 + 60 + 4 >> 2];
   HEAP32[i8 + ((i1 + 2 | 0) * 12 | 0) + 8 >> 2] = HEAP32[i13 + 60 + 8 >> 2];
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i2 = HEAP32[i13 + 1032 >> 2] | 0;
   if (i3 >>> 0 >= ((i1 - i2 | 0) / 36 | 0) >>> 0) break; else i4 = i4 + 1 | 0;
  }
 }
 if ((i9 | 0) != 0 ? i5 >>> 0 < ((i1 - i2 | 0) / 36 | 0) >>> 0 : 0) {
  i3 = i5;
  i4 = 0;
  while (1) {
   i1 = i4 * 3 | 0;
   __ZNK4math6float310NormalizedEv(i13 + 48 | 0, i2 + (i3 * 36 | 0) | 0);
   HEAP32[i9 + (i1 * 12 | 0) >> 2] = HEAP32[i13 + 48 >> 2];
   HEAP32[i9 + (i1 * 12 | 0) + 4 >> 2] = HEAP32[i13 + 48 + 4 >> 2];
   HEAP32[i9 + (i1 * 12 | 0) + 8 >> 2] = HEAP32[i13 + 48 + 8 >> 2];
   __ZNK4math6float310NormalizedEv(i13 + 36 | 0, (HEAP32[i13 + 1032 >> 2] | 0) + (i3 * 36 | 0) + 12 | 0);
   HEAP32[i9 + ((i1 + 1 | 0) * 12 | 0) >> 2] = HEAP32[i13 + 36 >> 2];
   HEAP32[i9 + ((i1 + 1 | 0) * 12 | 0) + 4 >> 2] = HEAP32[i13 + 36 + 4 >> 2];
   HEAP32[i9 + ((i1 + 1 | 0) * 12 | 0) + 8 >> 2] = HEAP32[i13 + 36 + 8 >> 2];
   __ZNK4math6float310NormalizedEv(i13 + 24 | 0, (HEAP32[i13 + 1032 >> 2] | 0) + (i3 * 36 | 0) + 24 | 0);
   HEAP32[i9 + ((i1 + 2 | 0) * 12 | 0) >> 2] = HEAP32[i13 + 24 >> 2];
   HEAP32[i9 + ((i1 + 2 | 0) * 12 | 0) + 4 >> 2] = HEAP32[i13 + 24 + 4 >> 2];
   HEAP32[i9 + ((i1 + 2 | 0) * 12 | 0) + 8 >> 2] = HEAP32[i13 + 24 + 8 >> 2];
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i2 = HEAP32[i13 + 1032 >> 2] | 0;
   if (i3 >>> 0 >= ((i1 - i2 | 0) / 36 | 0) >>> 0) break; else i4 = i4 + 1 | 0;
  }
 }
 if ((i10 | 0) != 0 ? i5 >>> 0 < ((i1 - i2 | 0) / 36 | 0) >>> 0 : 0) {
  i3 = i5;
  i4 = 0;
  while (1) {
   i1 = i4 * 3 | 0;
   d17 = +Math_fround(HEAPF32[i2 + (i3 * 36 | 0) + 4 >> 2]);
   f16 = Math_fround(+Math_atan2(+d17, +(+Math_fround(HEAPF32[i2 + (i3 * 36 | 0) >> 2]))) / 6.2831854820251465 + .5);
   f15 = Math_fround(HEAPF32[i2 + (i3 * 36 | 0) + 8 >> 2]);
   f14 = Math_fround(HEAPF32[i11 + 12 >> 2]);
   __ZN4math6float2C2Eff(i13 + 16 | 0, f16, Math_fround(Math_fround(f15 + f14) / Math_fround(f14 * Math_fround(2.0))));
   i2 = HEAP32[i13 + 16 + 4 >> 2] | 0;
   HEAP32[i10 + (i1 << 3) >> 2] = HEAP32[i13 + 16 >> 2];
   HEAP32[i10 + (i1 << 3) + 4 >> 2] = i2;
   i2 = HEAP32[i13 + 1032 >> 2] | 0;
   d17 = +Math_fround(HEAPF32[i2 + (i3 * 36 | 0) + 16 >> 2]);
   f14 = Math_fround(+Math_atan2(+d17, +(+Math_fround(HEAPF32[i2 + (i3 * 36 | 0) + 12 >> 2]))) / 6.2831854820251465 + .5);
   f15 = Math_fround(HEAPF32[i2 + (i3 * 36 | 0) + 20 >> 2]);
   f16 = Math_fround(HEAPF32[i11 + 12 >> 2]);
   __ZN4math6float2C2Eff(i13 + 8 | 0, f14, Math_fround(Math_fround(f15 + f16) / Math_fround(f16 * Math_fround(2.0))));
   i2 = HEAP32[i13 + 8 + 4 >> 2] | 0;
   HEAP32[i10 + (i1 + 1 << 3) >> 2] = HEAP32[i13 + 8 >> 2];
   HEAP32[i10 + (i1 + 1 << 3) + 4 >> 2] = i2;
   i2 = HEAP32[i13 + 1032 >> 2] | 0;
   d17 = +Math_fround(HEAPF32[i2 + (i3 * 36 | 0) + 28 >> 2]);
   f16 = Math_fround(+Math_atan2(+d17, +(+Math_fround(HEAPF32[i2 + (i3 * 36 | 0) + 24 >> 2]))) / 6.2831854820251465 + .5);
   f15 = Math_fround(HEAPF32[i2 + (i3 * 36 | 0) + 32 >> 2]);
   f14 = Math_fround(HEAPF32[i11 + 12 >> 2]);
   __ZN4math6float2C2Eff(i13, f16, Math_fround(Math_fround(f15 + f14) / Math_fround(f14 * Math_fround(2.0))));
   i2 = HEAP32[i13 + 4 >> 2] | 0;
   HEAP32[i10 + (i1 + 2 << 3) >> 2] = HEAP32[i13 >> 2];
   HEAP32[i10 + (i1 + 2 << 3) + 4 >> 2] = i2;
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i12 >> 2] | 0;
   i2 = HEAP32[i13 + 1032 >> 2] | 0;
   if (i3 >>> 0 >= ((i1 - i2 | 0) / 36 | 0) >>> 0) {
    i4 = i1;
    break;
   } else i4 = i4 + 1 | 0;
  }
 } else i4 = i1;
 i3 = i2;
 i1 = (((i4 - i3 | 0) / 36 | 0) - i5 | 0) * 3 | 0;
 if (!i2) {
  i12 = i1;
  STACKTOP = i13;
  return i12 | 0;
 }
 if ((i4 | 0) != (i2 | 0)) HEAP32[i12 >> 2] = i4 + (~(((i4 + -36 - i3 | 0) >>> 0) / 36 | 0) * 36 | 0);
 __ZdlPv(i2);
 i12 = i1;
 STACKTOP = i13;
 return i12 | 0;
}

function __ZN7Texture9CreateGPUEiiii11TextureType13TextureFormat13ResourceUsagemPK5ImageiPKc(i18, i17, i11, i7, i6, i8, i9, i12, i10, i4, i1, i2, i5) {
 i18 = i18 | 0;
 i17 = i17 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i3 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 __ZN7Texture6DeinitEv(i17);
 switch (i9 | 0) {
 case 2:
 case 4:
  break;
 default:
  {
   __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i18, 299425, 299561, 494, -1610579966, 299602, i19);
   STACKTOP = i19;
   return;
  }
 }
 if (!(__ZNK8Graphics24IsTextureFormatSupportedE13TextureFormat13ResourceUsagem(HEAP32[122] | 0, i12, i10, i4) | 0)) {
  HEAP32[i19 + 8 >> 2] = __Z21TextureFormatToString13TextureFormat(i12) | 0;
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i18, 299425, 299561, 496, -1610579964, 299648, i19 + 8 | 0);
  STACKTOP = i19;
  return;
 }
 L9 : do if ((i2 | 0) == 0 & (((i4 & 16 | 0) == 0 | (i1 | 0) != 0) ^ 1) ? (i9 | 0) == 2 & ((i8 | 0) < 2 & (i4 & 79 | 0) == 0) : 0) {
  L12 : do if ((i12 | 0) >= 55) if ((i12 | 0) < 1048583) switch (i12 | 0) {
  case 55:
   break L12;
  default:
   {
    i16 = 9;
    break L9;
   }
  } else switch (i12 | 0) {
  case 1048584:
  case 1048583:
   break L12;
  default:
   {
    i16 = 9;
    break L9;
   }
  } else switch (i12 | 0) {
  case 45:
  case 10:
   break;
  default:
   {
    i16 = 9;
    break L9;
   }
  } while (0);
  i15 = (i4 & 16 | 0) != 0;
  i3 = 1;
 } else i16 = 9; while (0);
 L19 : do if ((i16 | 0) == 9) if (!(i4 & 16)) {
  i15 = 0;
  i3 = 0;
 } else {
  L22 : do if ((i12 | 0) >= 80) {
   if ((i12 | 0) < 95) switch (i12 | 0) {
   case 94:
   case 84:
   case 83:
   case 82:
   case 81:
   case 80:
    break L22;
   default:
    {
     i15 = 1;
     i3 = 0;
     break L19;
    }
   }
   if ((i12 | 0) < 98) switch (i12 | 0) {
   case 97:
   case 96:
   case 95:
    break L22;
   default:
    {
     i15 = 1;
     i3 = 0;
     break L19;
    }
   }
   if ((i12 | 0) < 1048576) switch (i12 | 0) {
   case 99:
   case 98:
    break L22;
   default:
    {
     i15 = 1;
     i3 = 0;
     break L19;
    }
   } else switch (i12 | 0) {
   case 1048576:
   case 1048579:
    break L22;
   default:
    {
     i15 = 1;
     i3 = 0;
     break L19;
    }
   }
  } else switch (i12 | 0) {
  case 78:
  case 77:
  case 76:
  case 75:
  case 74:
  case 73:
  case 79:
  case 72:
  case 71:
  case 70:
  case 61:
  case 65:
   break;
  default:
   {
    i15 = 1;
    i3 = 0;
    break L19;
   }
  } while (0);
  i17 = __Z21TextureFormatToString13TextureFormat(i12) | 0;
  __Z19AccessFlagsToStringm(i19 + 208 | 0, i4);
  i1 = HEAP32[i19 + 208 >> 2] | 0;
  HEAP32[i19 + 16 >> 2] = i17;
  HEAP32[i19 + 16 + 4 >> 2] = i1;
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i18, 299425, 299561, 507, -1610579964, 299704, i19 + 16 | 0);
  if (i1) __ZdaPv(i1);
  HEAP32[i19 + 208 >> 2] = 0;
  STACKTOP = i19;
  return;
 } while (0);
 if (i1) if (__ZN8Graphics32TextureFormatSupportsInitialDataE13TextureFormat(i12) | 0) {
  i14 = i1;
  i13 = i2;
 } else {
  HEAP32[i19 + 24 >> 2] = __Z21TextureFormatToString13TextureFormat(i12) | 0;
  __ZN4math22PrintToConsoleVariadicEjPKcz(4, 299778, i19 + 24 | 0);
  i14 = 0;
  i13 = 0;
 } else {
  i14 = 0;
  i13 = i2;
 }
 if ((HEAP32[i17 + 4 >> 2] | 0) != (i5 | 0)) __ZN6String3SetEPKc(i17 + 4 | 0, i5);
 HEAP32[i17 + 20 >> 2] = i11;
 HEAP32[i17 + 24 >> 2] = i7;
 HEAP32[i17 + 28 >> 2] = i6;
 HEAP32[i17 + 36 >> 2] = i12;
 HEAP32[i17 + 40 >> 2] = i9;
 HEAP32[i17 + 44 >> 2] = i10;
 HEAP32[i17 + 48 >> 2] = i4;
 if ((i6 | 0) > 1) {
  HEAP32[i19 + 32 >> 2] = i6;
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i18, 299425, 299561, 529, -1610579966, 299920, i19 + 32 | 0);
  STACKTOP = i19;
  return;
 }
 HEAP32[i17 + 32 >> 2] = (i8 | 0) > 1 ? i8 : 1;
 if (i3) {
  i2 = __Z21TextureFormatToString13TextureFormat(i12) | 0;
  L53 : do if ((i12 | 0) >= 55) if ((i12 | 0) < 1048583) {
   switch (i12 | 0) {
   case 55:
    break;
   default:
    {
     i16 = 27;
     break L53;
    }
   }
   i1 = 33189;
   break;
  } else {
   switch (i12 | 0) {
   case 1048583:
    {
     i1 = 32854;
     break L53;
    }
   case 1048584:
    break;
   default:
    {
     i16 = 27;
     break L53;
    }
   }
   i1 = 36168;
   break;
  } else switch (i12 | 0) {
  case 45:
   {
    i1 = 34041;
    break L53;
   }
  case 10:
   {
    i1 = 34842;
    break L53;
   }
  default:
   {
    i16 = 27;
    break L53;
   }
  } while (0);
  if ((i16 | 0) == 27) {
   HEAP32[i19 + 40 >> 2] = i2;
   __ZN4math22PrintToConsoleVariadicEjPKcz(4, 299304, i19 + 40 | 0);
   i1 = 0;
  }
  i13 = __Z17WWWGLEnumToStringj(i1) | 0;
  i14 = HEAP32[i17 + 20 >> 2] | 0;
  i15 = HEAP32[i17 + 24 >> 2] | 0;
  HEAP32[i19 + 48 >> 2] = i2;
  HEAP32[i19 + 48 + 4 >> 2] = i13;
  HEAP32[i19 + 48 + 8 >> 2] = i14;
  HEAP32[i19 + 48 + 12 >> 2] = i15;
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 299952, i19 + 48 | 0);
  _glGenRenderbuffers(1, i17 + 52 | 0);
  _glBindRenderbuffer(36161, HEAP32[i17 + 52 >> 2] | 0);
  L67 : do if ((i12 | 0) >= 55) if ((i12 | 0) < 1048583) {
   switch (i12 | 0) {
   case 55:
    break;
   default:
    {
     i16 = 33;
     break L67;
    }
   }
   i1 = 33189;
   break;
  } else {
   switch (i12 | 0) {
   case 1048583:
    {
     i1 = 32854;
     break L67;
    }
   case 1048584:
    break;
   default:
    {
     i16 = 33;
     break L67;
    }
   }
   i1 = 36168;
   break;
  } else switch (i12 | 0) {
  case 45:
   {
    i1 = 34041;
    break L67;
   }
  case 10:
   {
    i1 = 34842;
    break L67;
   }
  default:
   {
    i16 = 33;
    break L67;
   }
  } while (0);
  if ((i16 | 0) == 33) {
   HEAP32[i19 + 64 >> 2] = i2;
   __ZN4math22PrintToConsoleVariadicEjPKcz(4, 299304, i19 + 64 | 0);
   i1 = 0;
  }
  _glRenderbufferStorage(36161, i1 | 0, HEAP32[i17 + 20 >> 2] | 0, HEAP32[i17 + 24 >> 2] | 0);
  HEAP8[i17 + 56 >> 0] = 1;
  HEAP32[i18 >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = 0;
  HEAP32[i18 + 12 >> 2] = 0;
  HEAP32[i18 + 16 >> 2] = 0;
  STACKTOP = i19;
  return;
 }
 HEAP8[i17 + 56 >> 0] = 0;
 L83 : do if ((i12 | 0) >= 74) {
  L97 : do if ((i12 | 0) < 1048578) {
   if ((i12 | 0) < 87) {
    switch (i12 | 0) {
    case 74:
     {
      i16 = 37;
      break L97;
     }
    case 77:
     {
      i16 = 38;
      break L97;
     }
    case 85:
     break;
    default:
     {
      i16 = 54;
      break L83;
     }
    }
    i8 = 6407;
    i10 = 6407;
    i11 = 33635;
    i16 = 56;
    break L83;
   }
   if ((i12 | 0) < 1048576) {
    switch (i12 | 0) {
    case 87:
     break;
    default:
     {
      i16 = 54;
      break L83;
     }
    }
    i8 = 32856;
    i10 = 32993;
    i11 = 5121;
    i16 = 56;
    break L83;
   } else {
    switch (i12 | 0) {
    case 1048576:
     {
      i8 = 36196;
      i10 = 36196;
      i11 = 0;
      i16 = 56;
      break L83;
     }
    case 1048577:
     break;
    default:
     {
      i16 = 54;
      break L83;
     }
    }
    i8 = 6408;
    i10 = 6408;
    i11 = 32820;
    i16 = 56;
    break L83;
   }
  } else switch (i12 | 0) {
  case 1048586:
   break L83;
  case 1048650:
   {
    i16 = 37;
    break L97;
   }
  case 1048653:
   {
    i16 = 38;
    break L97;
   }
  case 1048578:
   {
    i8 = 6408;
    i10 = 6408;
    i11 = 32819;
    i16 = 56;
    break L83;
   }
  case 1048579:
   {
    i8 = 6410;
    i10 = 6410;
    i11 = 5121;
    i16 = 56;
    break L83;
   }
  case 1048582:
   {
    i8 = 6402;
    i10 = 6402;
    i11 = 5125;
    i16 = 56;
    break L83;
   }
  default:
   {
    i16 = 54;
    break L83;
   }
  } while (0);
  if ((i16 | 0) == 37) {
   i8 = 33778;
   i10 = 33778;
   i11 = 0;
   i16 = 56;
   break;
  } else if ((i16 | 0) == 38) {
   i8 = 33779;
   i10 = 33779;
   i11 = 0;
   i16 = 56;
   break;
  }
 } else do switch (i12 | 0) {
 case 0:
  break L83;
 case 71:
  {
   i8 = 33777;
   i10 = 33777;
   i11 = 0;
   i16 = 56;
   break L83;
  }
 case 61:
  {
   i8 = 6409;
   i10 = 6409;
   i11 = 5121;
   i16 = 56;
   break L83;
  }
 case 65:
  {
   i8 = 6406;
   i10 = 6406;
   i11 = 5121;
   i16 = 56;
   break L83;
  }
 case 28:
  {
   i8 = 6408;
   i10 = 6408;
   i11 = 5121;
   i16 = 56;
   break L83;
  }
 case 2:
  {
   i8 = 6408;
   i10 = 6408;
   i11 = 5126;
   i16 = 56;
   break L83;
  }
 case 10:
  {
   i8 = 6408;
   i10 = 6408;
   i11 = 36193;
   i16 = 56;
   break L83;
  }
 case 55:
  {
   i8 = 6402;
   i10 = 6402;
   i11 = 5123;
   i16 = 56;
   break L83;
  }
 case 40:
  {
   i8 = 36012;
   i10 = 6402;
   i11 = 5126;
   i16 = 56;
   break L83;
  }
 case 20:
  {
   i8 = 36013;
   i10 = 34041;
   i11 = 36269;
   i16 = 56;
   break L83;
  }
 case 45:
  {
   i8 = 34041;
   i10 = 34041;
   i11 = 34042;
   i16 = 56;
   break L83;
  }
 default:
  {
   i16 = 54;
   break L83;
  }
 } while (0); while (0);
 if ((i16 | 0) == 54) {
  HEAP32[i19 + 72 >> 2] = __Z21TextureFormatToString13TextureFormat(i12) | 0;
  __ZN4math22PrintToConsoleVariadicEjPKcz(4, 299208, i19 + 72 | 0);
 } else if ((i16 | 0) == 56) {
  if (i15) {
   i4 = __Z21TextureFormatToString13TextureFormat(i12) | 0;
   i5 = __Z17WWWGLEnumToStringj(i10) | 0;
   i6 = __Z17WWWGLEnumToStringj(i8) | 0;
   i7 = __Z17WWWGLEnumToStringj(i11) | 0;
   i12 = HEAP32[i17 + 20 >> 2] | 0;
   i16 = HEAP32[i17 + 24 >> 2] | 0;
   HEAP32[i19 + 88 >> 2] = i4;
   HEAP32[i19 + 88 + 4 >> 2] = i5;
   HEAP32[i19 + 88 + 8 >> 2] = i6;
   HEAP32[i19 + 88 + 12 >> 2] = i7;
   HEAP32[i19 + 88 + 16 >> 2] = i12;
   HEAP32[i19 + 88 + 20 >> 2] = i16;
   __ZN4math22PrintToConsoleVariadicEjPKcz(1, 300141, i19 + 88 | 0);
  }
  _glGenTextures(1, i17 + 52 | 0);
  i12 = __Z30WWWGLGetActiveMultitextureUnitv() | 0;
  _glActiveTexture(33999);
  _glBindTexture(((HEAP32[i17 + 40 >> 2] | 0) == 2 ? 3553 : 34067) | 0, HEAP32[i17 + 52 >> 2] | 0);
  i1 = HEAP32[i17 + 32 >> 2] | 0;
  do if ((i1 | 0) > 1) {
   if (__ZN4math6IsPow2Em(HEAP32[i17 + 20 >> 2] | 0) | 0 ? __ZN4math6IsPow2Em(HEAP32[i17 + 24 >> 2] | 0) | 0 : 0) {
    i1 = HEAP32[i17 + 32 >> 2] | 0;
    break;
   }
   i7 = HEAP32[i17 + 20 >> 2] | 0;
   i16 = HEAP32[i17 + 24 >> 2] | 0;
   i1 = HEAP32[i17 + 32 >> 2] | 0;
   HEAP32[i19 + 112 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i19 + 112 + 4 >> 2] = i7;
   HEAP32[i19 + 112 + 8 >> 2] = i16;
   HEAP32[i19 + 112 + 12 >> 2] = i1;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 300272, i19 + 112 | 0);
   HEAP32[i17 + 32 >> 2] = 1;
   i1 = 1;
  } while (0);
  i4 = (i1 | 0) > 1;
  i3 = i4 ? 9985 : 9729;
  i1 = HEAP32[i17 + 36 >> 2] | 0;
  if ((i1 | 0) == 2) if (__ZN8Graphics19SupportsGLExtensionEPKc(300391) | 0) {
   i1 = HEAP32[i17 + 36 >> 2] | 0;
   i16 = 66;
  } else i16 = 68; else i16 = 66;
  if ((i16 | 0) == 66) if ((i1 | 0) == 10 ? !(__ZN8Graphics19SupportsGLExtensionEPKc(300416) | 0) : 0) i16 = 68; else {
   i2 = 9729;
   i1 = i3;
  }
  if ((i16 | 0) == 68) {
   HEAP32[i19 + 128 >> 2] = __Z21TextureFormatToString13TextureFormat(HEAP32[i17 + 36 >> 2] | 0) | 0;
   __ZN4math22PrintToConsoleVariadicEjPKcz(4, 300446, i19 + 128 | 0);
   i2 = 9728;
   i1 = i4 ? 9984 : 9728;
  }
  _glTexParameteri(3553, 10241, i1 | 0);
  _glTexParameteri(3553, 10240, i2 | 0);
  _glTexParameteri(3553, 10242, 33071);
  _glTexParameteri(3553, 10243, 33071);
  i7 = (HEAP32[i17 + 40 >> 2] | 0) == 4 ? 6 : 1;
  i1 = HEAP32[i17 + 32 >> 2] | 0;
  if ((i13 | 0) > (Math_imul(i7, i1) | 0)) {
   i4 = HEAP32[i17 + 4 >> 2] | 0;
   i5 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = HEAP32[i17 + 24 >> 2] | 0;
   HEAP32[i19 + 136 >> 2] = i13;
   HEAP32[i19 + 136 + 4 >> 2] = i4;
   HEAP32[i19 + 136 + 8 >> 2] = i5;
   HEAP32[i19 + 136 + 12 >> 2] = i6;
   HEAP32[i19 + 136 + 16 >> 2] = i1;
   __ZN4math22PrintToConsoleVariadicEjPKcz(4, 300593, i19 + 136 | 0);
   i1 = HEAP32[i17 + 32 >> 2] | 0;
  }
  if ((i1 | 0) > 0) {
   i1 = 0;
   i2 = 0;
   while (1) {
    i5 = 0;
    while (1) {
     i3 = i14 + (i2 * 36 | 0) | 0;
     i6 = i2 + 1 | 0;
     if ((i2 | 0) >= (i13 | 0) | (i3 | 0) == 0) {
      i9 = 0;
      i4 = 0;
     } else {
      i9 = HEAP32[i14 + (i2 * 36 | 0) + 4 >> 2] | 0;
      i4 = HEAP32[i3 >> 2] | 0;
     }
     L149 : do switch (HEAP32[i17 + 40 >> 2] | 0) {
     case 2:
      {
       i3 = 3553;
       break;
      }
     case 4:
      switch (i5 | 0) {
      case 0:
       {
        i3 = 34069;
        break L149;
       }
      case 1:
       {
        i3 = 34070;
        break L149;
       }
      case 2:
       {
        i3 = 34071;
        break L149;
       }
      case 3:
       {
        i3 = 34072;
        break L149;
       }
      case 4:
       {
        i3 = 34073;
        break L149;
       }
      case 5:
       {
        i3 = 34074;
        break L149;
       }
      default:
       {
        i16 = 82;
        break L149;
       }
      }
     default:
      i16 = 82;
     } while (0);
     if ((i16 | 0) == 82) i3 = 0;
     i2 = HEAP32[i17 + 36 >> 2] | 0;
     L160 : do if ((i2 | 0) >= 81) {
      if ((i2 | 0) < 95) switch (i2 | 0) {
      case 94:
      case 84:
      case 83:
      case 82:
      case 81:
       {
        i16 = 84;
        break L160;
       }
      default:
       {
        i16 = 85;
        break L160;
       }
      }
      if ((i2 | 0) < 98) switch (i2 | 0) {
      case 97:
      case 96:
      case 95:
       {
        i16 = 84;
        break L160;
       }
      default:
       {
        i16 = 85;
        break L160;
       }
      }
      if ((i2 | 0) < 99) switch (i2 | 0) {
      case 98:
       {
        i16 = 84;
        break L160;
       }
      default:
       {
        i16 = 85;
        break L160;
       }
      }
      if ((i2 | 0) < 1048576) switch (i2 | 0) {
      case 99:
       {
        i16 = 84;
        break L160;
       }
      default:
       {
        i16 = 85;
        break L160;
       }
      } else switch (i2 | 0) {
      case 1048576:
       {
        i16 = 84;
        break L160;
       }
      default:
       {
        i16 = 85;
        break L160;
       }
      }
     } else switch (i2 | 0) {
     case 78:
     case 77:
     case 76:
     case 75:
     case 74:
     case 73:
     case 80:
     case 79:
     case 72:
     case 71:
     case 70:
      {
       i16 = 84;
       break;
      }
     default:
      i16 = 85;
     } while (0);
     if ((i16 | 0) == 84) {
      i16 = 0;
      i2 = __ZNK7Texture13MipLevelWidthEi(i17, i1) | 0;
      _glCompressedTexImage2D(i3 | 0, i1 | 0, i8 | 0, i2 | 0, __ZNK7Texture14MipLevelHeightEi(i17, i1) | 0, 0, i9 | 0, i4 | 0);
     } else if ((i16 | 0) == 85) {
      i16 = 0;
      i2 = __ZNK7Texture13MipLevelWidthEi(i17, i1) | 0;
      _glTexImage2D(i3 | 0, i1 | 0, i8 | 0, i2 | 0, __ZNK7Texture14MipLevelHeightEi(i17, i1) | 0, 0, i10 | 0, i11 | 0, i4 | 0);
     }
     i5 = i5 + 1 | 0;
     if ((i5 | 0) >= (i7 | 0)) break; else i2 = i6;
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) < (HEAP32[i17 + 32 >> 2] | 0)) i2 = i6; else break;
   }
  }
  if (i15) {
   i3 = HEAP32[122] | 0;
   i1 = HEAP32[i17 + 36 >> 2] | 0;
   L183 : do if ((i1 | 0) >= 55) if ((i1 | 0) < 1048582) switch (i1 | 0) {
   case 55:
    {
     i16 = 90;
     break L183;
    }
   default:
    {
     i16 = 91;
     break L183;
    }
   } else switch (i1 | 0) {
   case 1048584:
   case 1048582:
    {
     i16 = 90;
     break L183;
    }
   default:
    {
     i16 = 91;
     break L183;
    }
   } else switch (i1 | 0) {
   case 45:
   case 40:
   case 20:
    {
     i16 = 90;
     break;
    }
   default:
    i16 = 91;
   } while (0);
   if ((i16 | 0) == 90) {
    HEAP32[i19 + 224 >> 2] = 0;
    __ZN8Graphics15SetRenderTargetEiPP7TextureS1_S1_(i18, i3, 1, i19 + 224 | 0, i17, 0);
   } else if ((i16 | 0) == 91) {
    HEAP32[i19 + 224 >> 2] = i17;
    __ZN8Graphics15SetRenderTargetEiPP7TextureS1_S1_(i18, i3, 1, i19 + 224 | 0, 0, 0);
   }
   i1 = _glCheckFramebufferStatus(36160) | 0;
   if ((i1 | 0) != 36053 & (HEAP32[i18 >> 2] | 0) > -1) {
    HEAP32[i19 + 160 >> 2] = __Z17WWWGLEnumToStringj(i1) | 0;
    __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i19 + 184 | 0, 299425, 299561, 642, -2147467259, 300747, i19 + 160 | 0);
    HEAP32[i18 >> 2] = HEAP32[i19 + 184 >> 2];
    do if ((i19 + 184 | 0) != (i18 | 0)) {
     if (!(HEAP32[i19 + 184 + 4 >> 2] | 0)) {
      HEAP32[i18 + 12 >> 2] = 0;
      HEAP32[i18 + 8 >> 2] = 0;
      i1 = HEAP32[i18 + 4 >> 2] | 0;
      if (!i1) break;
      HEAP8[i1 >> 0] = 0;
      break;
     }
     i2 = HEAP32[i19 + 184 + 12 >> 2] | 0;
     do if ((HEAP32[i18 + 16 >> 2] | 0) < (i2 + 1 | 0)) {
      if (!(i2 + 1 | 0)) {
       i1 = HEAP32[i18 + 4 >> 2] | 0;
       if (i1) __ZdaPv(i1);
       HEAP32[i18 + 4 >> 2] = 0;
       i1 = 0;
       break;
      }
      i1 = __Znaj((i2 + 1 | 0) > -1 ? i2 + 1 | 0 : -1) | 0;
      HEAP32[i18 + 16 >> 2] = i2 + 1;
      if ((i2 | 0) > -1) HEAP8[i1 >> 0] = 0;
      i2 = HEAP32[i18 + 4 >> 2] | 0;
      if (i2) __ZdaPv(i2);
      HEAP32[i18 + 4 >> 2] = i1;
     } else i1 = HEAP32[i18 + 4 >> 2] | 0; while (0);
     _memcpy(i1 | 0, HEAP32[i19 + 184 + 4 >> 2] | 0, (HEAP32[i19 + 184 + 12 >> 2] | 0) + 1 | 0) | 0;
     HEAP32[i18 + 12 >> 2] = HEAP32[i19 + 184 + 12 >> 2];
     HEAP32[i18 + 8 >> 2] = HEAP32[i19 + 184 + 8 >> 2];
    } while (0);
    i1 = HEAP32[i19 + 184 + 4 >> 2] | 0;
    if (i1) __ZdaPv(i1);
    HEAP32[i19 + 184 + 4 >> 2] = 0;
   }
   HEAP32[i19 + 224 >> 2] = 0;
   __ZN8Graphics15SetRenderTargetEiPP7TextureS1_S1_(i19 + 164 | 0, i3, 1, i19 + 224 | 0, 0, 0);
   i1 = HEAP32[i19 + 164 + 4 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i19 + 164 + 4 >> 2] = 0;
   if ((HEAP32[i18 >> 2] | 0) <= -1) __ZN7Texture6DeinitEv(i17);
  } else {
   HEAP32[i18 >> 2] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
   HEAP32[i18 + 8 >> 2] = 0;
   HEAP32[i18 + 12 >> 2] = 0;
   HEAP32[i18 + 16 >> 2] = 0;
  }
  _glActiveTexture(i12 | 0);
  STACKTOP = i19;
  return;
 }
 HEAP32[i19 + 80 >> 2] = __Z21TextureFormatToString13TextureFormat(i12) | 0;
 __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i18, 299425, 299561, 553, -1610579964, 300075, i19 + 80 | 0);
 STACKTOP = i19;
 return;
}

function _vfscanf(i20, i2, i17) {
 i20 = i20 | 0;
 i2 = i2 | 0;
 i17 = i17 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((HEAP32[i20 + 76 >> 2] | 0) > -1) i19 = ___lockfile(i20) | 0; else i19 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 L4 : do if (i1 << 24 >> 24) {
  i16 = i21 + 33 + 10 | 0;
  i4 = i1;
  i1 = 0;
  i5 = i2;
  i11 = 0;
  i3 = 0;
  i2 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i4 & 255) | 0)) {
    i4 = (HEAP8[i5 >> 0] | 0) == 37;
    L10 : do if (i4) {
     i8 = i5 + 1 | 0;
     i6 = HEAP8[i8 >> 0] | 0;
     L12 : do switch (i6 << 24 >> 24) {
     case 37:
      break L10;
     case 42:
      {
       i4 = 0;
       i8 = i5 + 2 | 0;
       break;
      }
     default:
      {
       if (((i6 & 255) + -48 | 0) >>> 0 < 10 ? (HEAP8[i5 + 2 >> 0] | 0) == 36 : 0) {
        HEAP32[i21 + 16 >> 2] = HEAP32[i17 >> 2];
        i6 = (i6 & 255) + -48 | 0;
        while (1) {
         i15 = (HEAP32[i21 + 16 >> 2] | 0) + (4 - 1) & ~(4 - 1);
         i4 = HEAP32[i15 >> 2] | 0;
         HEAP32[i21 + 16 >> 2] = i15 + 4;
         if (i6 >>> 0 > 1) i6 = i6 + -1 | 0; else break;
        }
        i8 = i5 + 3 | 0;
        break L12;
       }
       i15 = (HEAP32[i17 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i4 = HEAP32[i15 >> 2] | 0;
       HEAP32[i17 >> 2] = i15 + 4;
      }
     } while (0);
     i5 = HEAP8[i8 >> 0] | 0;
     if (((i5 & 255) + -48 | 0) >>> 0 < 10) {
      i9 = i5 & 255;
      i5 = 0;
      while (1) {
       i6 = (i5 * 10 | 0) + -48 + i9 | 0;
       i8 = i8 + 1 | 0;
       i5 = HEAP8[i8 >> 0] | 0;
       i9 = i5 & 255;
       if ((i9 + -48 | 0) >>> 0 >= 10) {
        i10 = i6;
        break;
       } else i5 = i6;
      }
     } else i10 = 0;
     if (i5 << 24 >> 24 == 109) {
      i8 = i8 + 1 | 0;
      i9 = HEAP8[i8 >> 0] | 0;
      i15 = (i4 | 0) != 0 & 1;
      i3 = 0;
      i2 = 0;
     } else {
      i9 = i5;
      i15 = 0;
     }
     i5 = i8 + 1 | 0;
     switch (i9 & 255 | 0) {
     case 104:
      {
       i6 = (HEAP8[i5 >> 0] | 0) == 104;
       i5 = i6 ? i8 + 2 | 0 : i5;
       i6 = i6 ? -2 : -1;
       break;
      }
     case 108:
      {
       i6 = (HEAP8[i5 >> 0] | 0) == 108;
       i5 = i6 ? i8 + 2 | 0 : i5;
       i6 = i6 ? 3 : 1;
       break;
      }
     case 106:
      {
       i6 = 3;
       break;
      }
     case 116:
     case 122:
      {
       i6 = 1;
       break;
      }
     case 76:
      {
       i6 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i5 = i8;
       i6 = 0;
       break;
      }
     default:
      {
       i4 = i15;
       i18 = 152;
       break L6;
      }
     }
     i14 = HEAPU8[i5 >> 0] | 0;
     i13 = (i14 & 47 | 0) == 3 ? i14 | 32 : i14;
     i14 = (i14 & 47 | 0) == 3 ? 1 : i6;
     switch (i13 | 0) {
     case 99:
      {
       i12 = (i10 | 0) < 1 ? 1 : i10;
       break;
      }
     case 91:
      {
       i12 = i10;
       break;
      }
     case 110:
      {
       if (!i4) {
        i9 = i11;
        break L8;
       }
       switch (i14 | 0) {
       case -2:
        {
         HEAP8[i4 >> 0] = i11;
         i9 = i11;
         break L8;
        }
       case -1:
        {
         HEAP16[i4 >> 1] = i11;
         i9 = i11;
         break L8;
        }
       case 0:
        {
         HEAP32[i4 >> 2] = i11;
         i9 = i11;
         break L8;
        }
       case 1:
        {
         HEAP32[i4 >> 2] = i11;
         i9 = i11;
         break L8;
        }
       case 3:
        {
         i9 = i4;
         HEAP32[i9 >> 2] = i11;
         HEAP32[i9 + 4 >> 2] = ((i11 | 0) < 0) << 31 >> 31;
         i9 = i11;
         break L8;
        }
       default:
        {
         i9 = i11;
         break L8;
        }
       }
      }
     default:
      {
       ___shlim(i20, 0);
       do {
        i6 = HEAP32[i20 + 4 >> 2] | 0;
        if (i6 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
         HEAP32[i20 + 4 >> 2] = i6 + 1;
         i6 = HEAPU8[i6 >> 0] | 0;
        } else i6 = ___shgetc(i20) | 0;
       } while ((_isspace(i6) | 0) != 0);
       i6 = HEAP32[i20 + 4 >> 2] | 0;
       if (HEAP32[i20 + 100 >> 2] | 0) {
        HEAP32[i20 + 4 >> 2] = i6 + -1;
        i6 = i6 + -1 | 0;
       }
       i11 = (HEAP32[i20 + 108 >> 2] | 0) + i11 + i6 - (HEAP32[i20 + 8 >> 2] | 0) | 0;
       i12 = i10;
      }
     }
     ___shlim(i20, i12);
     i6 = HEAP32[i20 + 4 >> 2] | 0;
     i8 = HEAP32[i20 + 100 >> 2] | 0;
     if (i6 >>> 0 < i8 >>> 0) HEAP32[i20 + 4 >> 2] = i6 + 1; else {
      if ((___shgetc(i20) | 0) < 0) {
       i4 = i15;
       i18 = 152;
       break L6;
      }
      i8 = HEAP32[i20 + 100 >> 2] | 0;
     }
     if (i8) HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
     L67 : do switch (i13 | 0) {
     case 91:
     case 99:
     case 115:
      {
       L69 : do if ((i13 & 239 | 0) == 99) {
        _memset(i21 + 33 | 0, -1, 257) | 0;
        HEAP8[i21 + 33 >> 0] = 0;
        if ((i13 | 0) == 115) {
         HEAP8[i21 + 33 + 33 >> 0] = 0;
         HEAP8[i16 >> 0] = 0;
         HEAP8[i16 + 1 >> 0] = 0;
         HEAP8[i16 + 2 >> 0] = 0;
         HEAP8[i16 + 3 >> 0] = 0;
         HEAP8[i16 + 4 >> 0] = 0;
        }
       } else {
        i10 = i5 + 1 | 0;
        i9 = (HEAP8[i10 >> 0] | 0) == 94;
        i6 = i9 ? i10 : i5;
        i5 = i9 ? i5 + 2 | 0 : i10;
        _memset(i21 + 33 | 0, i9 & 1 | 0, 257) | 0;
        HEAP8[i21 + 33 >> 0] = 0;
        switch (HEAP8[i5 >> 0] | 0) {
        case 45:
         {
          HEAP8[i21 + 33 + 46 >> 0] = i9 & 1 ^ 1;
          i10 = (i9 & 1 ^ 1) & 255;
          i5 = i6 + 2 | 0;
          break;
         }
        case 93:
         {
          HEAP8[i21 + 33 + 94 >> 0] = i9 & 1 ^ 1;
          i10 = (i9 & 1 ^ 1) & 255;
          i5 = i6 + 2 | 0;
          break;
         }
        default:
         i10 = (i9 & 1 ^ 1) & 255;
        }
        while (1) {
         i9 = HEAP8[i5 >> 0] | 0;
         L80 : do switch (i9 << 24 >> 24) {
         case 0:
          {
           i4 = i15;
           i18 = 152;
           break L6;
          }
         case 93:
          break L69;
         case 45:
          {
           i6 = i5 + 1 | 0;
           i9 = HEAP8[i6 >> 0] | 0;
           switch (i9 << 24 >> 24) {
           case 93:
           case 0:
            {
             i9 = 45;
             break L80;
            }
           default:
            {}
           }
           i5 = HEAP8[i5 + -1 >> 0] | 0;
           if ((i5 & 255) < (i9 & 255)) {
            i5 = i5 & 255;
            do {
             i5 = i5 + 1 | 0;
             HEAP8[i21 + 33 + i5 >> 0] = i10;
             i9 = HEAP8[i6 >> 0] | 0;
            } while ((i5 | 0) < (i9 & 255 | 0));
            i5 = i6;
           } else i5 = i6;
           break;
          }
         default:
          {}
         } while (0);
         HEAP8[i21 + 33 + ((i9 & 255) + 1) >> 0] = i10;
         i5 = i5 + 1 | 0;
        }
       } while (0);
       i6 = (i13 | 0) == 99 ? i12 + 1 | 0 : 31;
       i10 = (i15 | 0) != 0;
       L88 : do if ((i14 | 0) == 1) {
        if (i10) {
         i2 = _malloc(i6 << 2) | 0;
         if (!i2) {
          i4 = i15;
          i3 = 0;
          i18 = 152;
          break L6;
         }
        } else i2 = i4;
        HEAP32[i21 + 8 >> 2] = 0;
        HEAP32[i21 + 8 + 4 >> 2] = 0;
        i9 = 0;
        L94 : while (1) {
         i8 = (i2 | 0) == 0;
         do {
          L98 : while (1) {
           i3 = HEAP32[i20 + 4 >> 2] | 0;
           if (i3 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
            HEAP32[i20 + 4 >> 2] = i3 + 1;
            i3 = HEAPU8[i3 >> 0] | 0;
           } else i3 = ___shgetc(i20) | 0;
           if (!(HEAP8[i21 + 33 + (i3 + 1) >> 0] | 0)) break L94;
           HEAP8[i21 + 32 >> 0] = i3;
           switch (_mbrtowc(i21, i21 + 32 | 0, 1, i21 + 8 | 0) | 0) {
           case -1:
            {
             i4 = i15;
             i3 = 0;
             i18 = 152;
             break L6;
            }
           case -2:
            break;
           default:
            break L98;
           }
          }
          if (!i8) {
           HEAP32[i2 + (i9 << 2) >> 2] = HEAP32[i21 >> 2];
           i9 = i9 + 1 | 0;
          }
         } while (!(i10 & (i9 | 0) == (i6 | 0)));
         i9 = i6 << 1 | 1;
         i3 = _realloc(i2, i9 << 2) | 0;
         if (!i3) {
          i4 = i15;
          i3 = 0;
          i18 = 152;
          break L6;
         }
         i8 = i6;
         i6 = i9;
         i2 = i3;
         i9 = i8;
        }
        if (!(_mbsinit(i21 + 8 | 0) | 0)) {
         i4 = i15;
         i3 = 0;
         i18 = 152;
         break L6;
        } else i3 = 0;
       } else {
        if (i10) {
         i3 = _malloc(i6) | 0;
         if (!i3) {
          i4 = i15;
          i3 = 0;
          i2 = 0;
          i18 = 152;
          break L6;
         } else i9 = 0;
         while (1) {
          do {
           i2 = HEAP32[i20 + 4 >> 2] | 0;
           if (i2 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
            HEAP32[i20 + 4 >> 2] = i2 + 1;
            i2 = HEAPU8[i2 >> 0] | 0;
           } else i2 = ___shgetc(i20) | 0;
           if (!(HEAP8[i21 + 33 + (i2 + 1) >> 0] | 0)) {
            i2 = 0;
            break L88;
           }
           HEAP8[i3 + i9 >> 0] = i2;
           i9 = i9 + 1 | 0;
          } while ((i9 | 0) != (i6 | 0));
          i9 = i6 << 1 | 1;
          i2 = _realloc(i3, i9) | 0;
          if (!i2) {
           i4 = i15;
           i2 = 0;
           i18 = 152;
           break L6;
          } else {
           i8 = i6;
           i6 = i9;
           i3 = i2;
           i9 = i8;
          }
         }
        }
        if (!i4) {
         i3 = i8;
         while (1) {
          i2 = HEAP32[i20 + 4 >> 2] | 0;
          if (i2 >>> 0 < i3 >>> 0) {
           HEAP32[i20 + 4 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i20) | 0;
          if (!(HEAP8[i21 + 33 + (i2 + 1) >> 0] | 0)) {
           i9 = 0;
           i3 = 0;
           i2 = 0;
           break L88;
          }
          i3 = HEAP32[i20 + 100 >> 2] | 0;
         }
        } else {
         i9 = 0;
         while (1) {
          i2 = HEAP32[i20 + 4 >> 2] | 0;
          if (i2 >>> 0 < i8 >>> 0) {
           HEAP32[i20 + 4 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i20) | 0;
          if (!(HEAP8[i21 + 33 + (i2 + 1) >> 0] | 0)) {
           i3 = i4;
           i2 = 0;
           break L88;
          }
          HEAP8[i4 + i9 >> 0] = i2;
          i8 = HEAP32[i20 + 100 >> 2] | 0;
          i9 = i9 + 1 | 0;
         }
        }
       } while (0);
       i6 = HEAP32[i20 + 4 >> 2] | 0;
       if (HEAP32[i20 + 100 >> 2] | 0) {
        HEAP32[i20 + 4 >> 2] = i6 + -1;
        i6 = i6 + -1 | 0;
       }
       i6 = i6 - (HEAP32[i20 + 8 >> 2] | 0) + (HEAP32[i20 + 108 >> 2] | 0) | 0;
       if (!i6) {
        i4 = i15;
        break L6;
       }
       if (!((i6 | 0) == (i12 | 0) | (i13 | 0) == 99 ^ 1)) {
        i4 = i15;
        break L6;
       }
       do if (i10) if ((i14 | 0) == 1) {
        HEAP32[i4 >> 2] = i2;
        break;
       } else {
        HEAP32[i4 >> 2] = i3;
        break;
       } while (0);
       if ((i13 | 0) != 99) {
        if (i2) HEAP32[i2 + (i9 << 2) >> 2] = 0;
        if (!i3) {
         i3 = 0;
         break L67;
        }
        HEAP8[i3 + i9 >> 0] = 0;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i6 = 16;
       i18 = 134;
       break;
      }
     case 111:
      {
       i6 = 8;
       i18 = 134;
       break;
      }
     case 117:
     case 100:
      {
       i6 = 10;
       i18 = 134;
       break;
      }
     case 105:
      {
       i6 = 0;
       i18 = 134;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d7 = +___floatscan(i20, i14, 0);
       if ((HEAP32[i20 + 108 >> 2] | 0) == ((HEAP32[i20 + 8 >> 2] | 0) - (HEAP32[i20 + 4 >> 2] | 0) | 0)) {
        i4 = i15;
        break L6;
       }
       if (i4) switch (i14 | 0) {
       case 0:
        {
         HEAPF32[i4 >> 2] = Math_fround(d7);
         break L67;
        }
       case 1:
        {
         HEAPF64[i4 >> 3] = d7;
         break L67;
        }
       case 2:
        {
         HEAPF64[i4 >> 3] = d7;
         break L67;
        }
       default:
        break L67;
       }
       break;
      }
     default:
      {}
     } while (0);
     L168 : do if ((i18 | 0) == 134) {
      i18 = 0;
      i6 = ___intscan(i20, i6, 0, -1, -1) | 0;
      if ((HEAP32[i20 + 108 >> 2] | 0) == ((HEAP32[i20 + 8 >> 2] | 0) - (HEAP32[i20 + 4 >> 2] | 0) | 0)) {
       i4 = i15;
       break L6;
      }
      if ((i4 | 0) != 0 & (i13 | 0) == 112) {
       HEAP32[i4 >> 2] = i6;
       break;
      }
      if (i4) switch (i14 | 0) {
      case -2:
       {
        HEAP8[i4 >> 0] = i6;
        break L168;
       }
      case -1:
       {
        HEAP16[i4 >> 1] = i6;
        break L168;
       }
      case 0:
       {
        HEAP32[i4 >> 2] = i6;
        break L168;
       }
      case 1:
       {
        HEAP32[i4 >> 2] = i6;
        break L168;
       }
      case 3:
       {
        i15 = i4;
        HEAP32[i15 >> 2] = i6;
        HEAP32[i15 + 4 >> 2] = tempRet0;
        break L168;
       }
      default:
       break L168;
      }
     } while (0);
     i1 = ((i4 | 0) != 0 & 1) + i1 | 0;
     i9 = (HEAP32[i20 + 108 >> 2] | 0) + i11 + (HEAP32[i20 + 4 >> 2] | 0) - (HEAP32[i20 + 8 >> 2] | 0) | 0;
     break L8;
    } while (0);
    i5 = i5 + (i4 & 1) | 0;
    ___shlim(i20, 0);
    i4 = HEAP32[i20 + 4 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
     HEAP32[i20 + 4 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i20) | 0;
    if ((i4 | 0) != (HEAPU8[i5 >> 0] | 0)) {
     i18 = 21;
     break L6;
    }
    i9 = i11 + 1 | 0;
   } else {
    while (1) {
     i4 = i5 + 1 | 0;
     if (!(_isspace(HEAPU8[i4 >> 0] | 0) | 0)) break; else i5 = i4;
    }
    ___shlim(i20, 0);
    do {
     i4 = HEAP32[i20 + 4 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i20 + 100 >> 2] | 0) >>> 0) {
      HEAP32[i20 + 4 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i20) | 0;
    } while ((_isspace(i4) | 0) != 0);
    i4 = HEAP32[i20 + 4 >> 2] | 0;
    if (HEAP32[i20 + 100 >> 2] | 0) {
     HEAP32[i20 + 4 >> 2] = i4 + -1;
     i4 = i4 + -1 | 0;
    }
    i9 = (HEAP32[i20 + 108 >> 2] | 0) + i11 + i4 - (HEAP32[i20 + 8 >> 2] | 0) | 0;
   } while (0);
   i5 = i5 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (!(i4 << 24 >> 24)) break L4; else i11 = i9;
  }
  if ((i18 | 0) == 21) {
   if (HEAP32[i20 + 100 >> 2] | 0) HEAP32[i20 + 4 >> 2] = (HEAP32[i20 + 4 >> 2] | 0) + -1;
   if ((i1 | 0) != 0 | (i4 | 0) > -1) break; else {
    i1 = 0;
    i18 = 153;
   }
  } else if ((i18 | 0) == 152) if (!i1) {
   i1 = i4;
   i18 = 153;
  }
  if ((i18 | 0) == 153) {
   i4 = i1;
   i1 = -1;
  }
  if (i4) {
   _free(i3);
   _free(i2);
  }
 } else i1 = 0; while (0);
 if (i19) ___unlockfile(i20);
 STACKTOP = i21;
 return i1 | 0;
}

function _cff_glyph_load(i20, i2, i5, i7) {
 i20 = i20 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if (!i20) {
  i20 = 37;
  STACKTOP = i21;
  return i20 | 0;
 }
 i6 = (i2 | 0) == 0 ? i7 | 3 : i7;
 i17 = (i6 & 1 | 0) == 0 ? i2 : 0;
 do if (i17) {
  i1 = HEAP32[i20 + 4 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
   i16 = i1;
   break;
  } else {
   i20 = 35;
   STACKTOP = i21;
   return i20 | 0;
  }
 } else i16 = HEAP32[i20 + 4 >> 2] | 0; while (0);
 i13 = i16 + 692 | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 if ((HEAP32[i14 + 1456 >> 2] | 0) != 65535 ? (i3 = HEAP32[i14 + 1164 >> 2] | 0, (i3 | 0) != 0) : 0) if (i5) if ((HEAP32[i14 + 1168 >> 2] | 0) >>> 0 >= i5 >>> 0 ? (i4 = HEAP16[i3 + (i5 << 1) >> 1] | 0, i4 << 16 >> 16 != 0) : 0) {
  i15 = i4 & 65535;
  i19 = 12;
 } else i1 = 6; else {
  i15 = 0;
  i19 = 12;
 } else if ((HEAP32[i14 + 12 >> 2] | 0) >>> 0 > i5 >>> 0) {
  i15 = i5;
  i19 = 12;
 } else i1 = 6;
 L18 : do if ((i19 | 0) == 12) {
  i18 = (i6 & 1024 | 0) == 0 ? i6 : i7 | 3;
  HEAP32[i20 + 164 >> 2] = 65536;
  HEAP32[i20 + 168 >> 2] = 65536;
  if ((((i17 | 0) != 0 ? (HEAP32[i20 + 164 >> 2] = HEAP32[i17 + 16 >> 2], HEAP32[i20 + 168 >> 2] = HEAP32[i17 + 20 >> 2], i9 = HEAP32[i17 >> 2] | 0, i8 = HEAP32[i9 + 532 >> 2] | 0, i9 = HEAP32[i9 + 104 >> 2] | 0, i10 = HEAP32[i17 + 44 >> 2] | 0, (i10 | 0) != -1) : 0) ? (i18 & 8 | 0) == 0 & (HEAP32[i8 + 140 >> 2] | 0) != 0 : 0) ? (FUNCTION_TABLE_iiiiiiii[HEAP32[i8 + 104 >> 2] & 1](i16, i10, i15, i18, i9, i20 + 76 | 0, i21 + 1008 | 0) | 0) == 0 : 0) {
   HEAP16[i20 + 110 >> 1] = 0;
   HEAP16[i20 + 108 >> 1] = 0;
   HEAP32[i20 + 24 >> 2] = HEAPU8[i21 + 1008 + 1 >> 0] << 6;
   HEAP32[i20 + 28 >> 2] = HEAPU8[i21 + 1008 >> 0] << 6;
   i1 = HEAP8[i21 + 1008 + 2 >> 0] | 0;
   HEAP32[i20 + 32 >> 2] = i1 << 6;
   i2 = HEAP8[i21 + 1008 + 3 >> 0] | 0;
   HEAP32[i20 + 36 >> 2] = i2 << 6;
   HEAP32[i20 + 40 >> 2] = HEAPU8[i21 + 1008 + 4 >> 0] << 6;
   i3 = HEAP8[i21 + 1008 + 5 >> 0] | 0;
   HEAP32[i20 + 44 >> 2] = i3 << 6;
   i4 = HEAP8[i21 + 1008 + 6 >> 0] | 0;
   HEAP32[i20 + 48 >> 2] = i4 << 6;
   HEAP32[i20 + 52 >> 2] = HEAPU8[i21 + 1008 + 7 >> 0] << 6;
   HEAP32[i20 + 72 >> 2] = 1651078259;
   if (!(i18 & 16)) {
    HEAP32[i20 + 100 >> 2] = i1;
    HEAP32[i20 + 104 >> 2] = i2;
    i1 = 0;
    break;
   } else {
    HEAP32[i20 + 100 >> 2] = i3;
    HEAP32[i20 + 104 >> 2] = i4;
    i1 = 0;
    break;
   }
  }
  if (!(i18 & 16384)) {
   i7 = HEAP32[i14 + 1896 >> 2] | 0;
   if (i7) {
    L33 : do switch (HEAPU8[i14 + 2924 >> 0] | 0) {
    case 0:
     {
      i1 = HEAP8[(HEAP32[i14 + 2932 >> 2] | 0) + i15 >> 0] | 0;
      break;
     }
    case 3:
     {
      if ((i15 - (HEAP32[i14 + 2940 >> 2] | 0) | 0) >>> 0 < (HEAP32[i14 + 2944 >> 2] | 0) >>> 0) {
       i1 = HEAP8[i14 + 2948 >> 0] | 0;
       break L33;
      }
      i4 = HEAP32[i14 + 2932 >> 2] | 0;
      i2 = i4 + (HEAP32[i14 + 2936 >> 2] | 0) | 0;
      i3 = i4;
      i1 = HEAPU8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
      i4 = i4 + 2 | 0;
      while (1) {
       if (i1 >>> 0 > i15 >>> 0) {
        i1 = 0;
        break L33;
       }
       i6 = i4;
       i4 = i3 + 5 | 0;
       i12 = i3;
       i3 = i3 + 3 | 0;
       i5 = i1;
       i1 = HEAPU8[i3 >> 0] << 8 | HEAPU8[i12 + 4 >> 0];
       if (i1 >>> 0 > i15 >>> 0) break;
       if (i4 >>> 0 >= i2 >>> 0) {
        i1 = 0;
        break L33;
       }
      }
      i12 = HEAP8[i6 >> 0] | 0;
      HEAP32[i14 + 2940 >> 2] = i5;
      HEAP32[i14 + 2944 >> 2] = i1 - i5;
      HEAP8[i14 + 2948 >> 0] = i12;
      i1 = i12;
      break;
     }
    default:
     i1 = 0;
    } while (0);
    i4 = HEAP32[i14 + 1392 >> 2] | 0;
    i3 = i14 + 1900 + ((((i1 & 255) >>> 0 < i7 >>> 0 ? i1 : i7 + 255 & 255) & 255) << 2) | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    i1 = HEAP32[i2 + 68 >> 2] | 0;
    HEAP32[i21 + 48 >> 2] = HEAP32[i2 + 48 >> 2];
    HEAP32[i21 + 48 + 4 >> 2] = HEAP32[i2 + 48 + 4 >> 2];
    HEAP32[i21 + 48 + 8 >> 2] = HEAP32[i2 + 48 + 8 >> 2];
    HEAP32[i21 + 48 + 12 >> 2] = HEAP32[i2 + 48 + 12 >> 2];
    i3 = HEAP32[i3 >> 2] | 0;
    i2 = HEAP32[i3 + 72 >> 2] | 0;
    i3 = HEAP32[i3 + 76 >> 2] | 0;
    if ((i4 | 0) == (i1 | 0)) {
     i12 = i2;
     i11 = 0;
    } else {
     HEAP32[i20 + 164 >> 2] = _FT_MulDiv(HEAP32[i20 + 164 >> 2] | 0, i4, i1) | 0;
     HEAP32[i20 + 168 >> 2] = _FT_MulDiv(HEAP32[i20 + 168 >> 2] | 0, i4, i1) | 0;
     i12 = i2;
     i11 = 1;
    }
   } else {
    HEAP32[i21 + 48 >> 2] = HEAP32[i14 + 1372 >> 2];
    HEAP32[i21 + 48 + 4 >> 2] = HEAP32[i14 + 1372 + 4 >> 2];
    HEAP32[i21 + 48 + 8 >> 2] = HEAP32[i14 + 1372 + 8 >> 2];
    HEAP32[i21 + 48 + 12 >> 2] = HEAP32[i14 + 1372 + 12 >> 2];
    i12 = HEAP32[i14 + 1396 >> 2] | 0;
    i3 = HEAP32[i14 + 1400 >> 2] | 0;
    i11 = 0;
   }
   HEAP16[i20 + 110 >> 1] = 0;
   HEAP16[i20 + 108 >> 1] = 0;
   HEAP32[i20 + 72 >> 2] = 1869968492;
   i1 = HEAP32[i13 >> 2] | 0;
   _memset(i21 + 64 | 0, 0, 928) | 0;
   HEAP8[i21 + 64 + 65 >> 0] = 1;
   HEAP32[i21 + 64 + 4 >> 2] = i16;
   HEAP32[i21 + 64 + 8 >> 2] = i20;
   HEAP32[i21 + 64 >> 2] = HEAP32[i16 + 100 >> 2];
   i10 = HEAP32[HEAP32[i20 + 156 >> 2] >> 2] | 0;
   HEAP32[i21 + 64 + 12 >> 2] = i10;
   HEAP32[i21 + 64 + 16 >> 2] = i10 + 20;
   HEAP32[i21 + 64 + 20 >> 2] = i10 + 56;
   _FT_GlyphLoader_Rewind(i10);
   HEAP32[i21 + 64 + 72 >> 2] = 0;
   HEAP32[i21 + 64 + 68 >> 2] = 0;
   if ((i17 | 0) != 0 & (i18 & 3 | 0) == 0) {
    HEAP32[i21 + 64 + 72 >> 2] = HEAP32[HEAP32[i17 + 40 >> 2] >> 2];
    HEAP32[i21 + 64 + 68 >> 2] = HEAP32[(HEAP32[i20 + 156 >> 2] | 0) + 36 >> 2];
   }
   i2 = i21 + 64 + 24 | 0;
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
   HEAP32[i2 + 16 >> 2] = 0;
   HEAP32[i2 + 20 >> 2] = 0;
   HEAP32[i21 + 64 + 76 >> 2] = i1;
   i2 = HEAP32[i1 + 92 >> 2] | 0;
   HEAP32[i21 + 64 + 892 >> 2] = i2;
   HEAP32[i21 + 64 + 908 >> 2] = HEAP32[i1 + 1308 >> 2];
   if ((HEAP32[i1 + 1368 >> 2] | 0) != 1) if (i2 >>> 0 < 1240) i1 = 107; else i1 = i2 >>> 0 < 33900 ? 1131 : 32768; else i1 = 0;
   HEAP32[i21 + 64 + 900 >> 2] = i1;
   HEAP32[i21 + 64 + 920 >> 2] = i18 >>> 16 & 15;
   if (i18 & 256) HEAP8[i21 + 64 + 753 >> 0] = 1;
   HEAP8[i21 + 64 + 66 >> 0] = 0;
   i10 = i16 + 128 | 0;
   i1 = HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] | 0;
   if (!i1) i1 = _cff_index_access_element((HEAP32[i13 >> 2] | 0) + 1176 | 0, i15, i21 + 44 | 0, i21 + 40 | 0) | 0; else {
    i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 >> 2] >> 2] & 127](HEAP32[i1 + 4 >> 2] | 0, i15, i21 + 992 | 0) | 0;
    HEAP32[i21 + 44 >> 2] = HEAP32[i21 + 992 >> 2];
    HEAP32[i21 + 40 >> 2] = HEAP32[i21 + 992 + 4 >> 2];
   }
   if (!i1) {
    i7 = HEAP32[(HEAP32[i21 + 64 + 4 >> 2] | 0) + 692 >> 2] | 0;
    i8 = HEAP32[i7 + 1896 >> 2] | 0;
    if (i8) {
     L64 : do switch (HEAPU8[i7 + 2924 >> 0] | 0) {
     case 0:
      {
       i1 = HEAP8[(HEAP32[i7 + 2932 >> 2] | 0) + i15 >> 0] | 0;
       break;
      }
     case 3:
      {
       if ((i15 - (HEAP32[i7 + 2940 >> 2] | 0) | 0) >>> 0 < (HEAP32[i7 + 2944 >> 2] | 0) >>> 0) {
        i1 = HEAP8[i7 + 2948 >> 0] | 0;
        break L64;
       }
       i4 = HEAP32[i7 + 2932 >> 2] | 0;
       i9 = i4 + (HEAP32[i7 + 2936 >> 2] | 0) | 0;
       i2 = i4;
       i1 = HEAPU8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
       i4 = i4 + 2 | 0;
       while (1) {
        if (i1 >>> 0 > i15 >>> 0) {
         i1 = 0;
         break L64;
        }
        i6 = i4;
        i4 = i2 + 5 | 0;
        i22 = i2;
        i2 = i2 + 3 | 0;
        i5 = i1;
        i1 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i22 + 4 >> 0];
        if (i1 >>> 0 > i15 >>> 0) break;
        if (i4 >>> 0 >= i9 >>> 0) {
         i1 = 0;
         break L64;
        }
       }
       i22 = HEAP8[i6 >> 0] | 0;
       HEAP32[i7 + 2940 >> 2] = i5;
       HEAP32[i7 + 2944 >> 2] = i1 - i5;
       HEAP8[i7 + 2948 >> 0] = i22;
       i1 = i22;
       break;
      }
     default:
      i1 = 0;
     } while (0);
     i2 = i1 & 255;
     if (i2 >>> 0 >= i8 >>> 0) {
      i1 = 3;
      break;
     }
     i1 = HEAP32[i7 + 1900 + (i2 << 2) >> 2] | 0;
     if ((i17 | 0) != 0 ? (HEAP32[i21 + 64 + 68 >> 2] | 0) != 0 : 0) HEAP32[i21 + 64 + 72 >> 2] = HEAP32[(HEAP32[i17 + 40 >> 2] | 0) + 4 + (i2 << 2) >> 2];
    } else i1 = i7 + 1324 | 0;
    i2 = HEAP32[i1 + 544 >> 2] | 0;
    HEAP32[i21 + 64 + 888 >> 2] = i2;
    HEAP32[i21 + 64 + 904 >> 2] = HEAP32[i1 + 568 >> 2];
    if ((HEAP32[(HEAP32[i21 + 64 + 76 >> 2] | 0) + 1368 >> 2] | 0) != 1) if (i2 >>> 0 < 1240) i2 = 107; else i2 = i2 >>> 0 < 33900 ? 1131 : 32768; else i2 = 0;
    HEAP32[i21 + 64 + 896 >> 2] = i2;
    HEAP32[i21 + 64 + 744 >> 2] = HEAP32[i1 + 528 >> 2];
    HEAP32[i21 + 64 + 748 >> 2] = HEAP32[i1 + 532 >> 2];
    i4 = HEAP32[i21 + 40 >> 2] | 0;
    i1 = _cff_decoder_parse_charstrings(i21 + 64 | 0, HEAP32[i21 + 44 >> 2] | 0, i4) | 0;
    i2 = HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] | 0;
    if (!i2) {
     i2 = HEAP32[i13 >> 2] | 0;
     if (!(HEAP32[i2 + 1204 >> 2] | 0)) _FT_Stream_ReleaseFrame(HEAP32[i2 + 1176 >> 2] | 0, i21 + 44 | 0);
    } else {
     HEAP32[i21 + 992 >> 2] = HEAP32[i21 + 44 >> 2];
     HEAP32[i21 + 992 + 4 >> 2] = i4;
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i2 + 4 >> 2] | 0, i21 + 992 | 0);
    }
    if (!i1) {
     i1 = HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] | 0;
     if (!i1) {
      i2 = HEAP32[i14 + 1200 >> 2] | 0;
      if (i2) {
       HEAP32[i20 + 136 >> 2] = (HEAP32[i14 + 1204 >> 2] | 0) + ((HEAP32[i2 + (i15 << 2) >> 2] | 0) + -1);
       HEAP32[i20 + 140 >> 2] = i4;
      }
     } else {
      HEAP32[i20 + 136 >> 2] = 0;
      HEAP32[i20 + 140 >> 2] = 0;
     }
     i2 = HEAP32[i21 + 64 + 8 >> 2] | 0;
     if (i2) {
      i1 = HEAP32[i21 + 64 + 16 >> 2] | 0;
      HEAP32[i2 + 108 >> 2] = HEAP32[i1 >> 2];
      HEAP32[i2 + 108 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
      HEAP32[i2 + 108 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
      HEAP32[i2 + 108 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
      HEAP32[i2 + 108 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
      i1 = HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] | 0;
     }
     do if (i1) {
      i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
      if (!i2) break;
      HEAP32[i21 + 24 >> 2] = HEAP32[i21 + 64 + 32 >> 2];
      HEAP32[i21 + 24 + 4 >> 2] = 0;
      HEAP32[i21 + 24 + 8 >> 2] = HEAP32[i21 + 64 + 40 >> 2];
      HEAP32[i21 + 24 + 12 >> 2] = HEAP32[i21 + 64 + 44 >> 2];
      i1 = FUNCTION_TABLE_iiiii[i2 & 63](HEAP32[i1 + 4 >> 2] | 0, i15, 0, i21 + 24 | 0) | 0;
      HEAP32[i21 + 64 + 32 >> 2] = HEAP32[i21 + 24 >> 2];
      HEAP32[i21 + 64 + 40 >> 2] = HEAP32[i21 + 24 + 8 >> 2];
      HEAP32[i21 + 64 + 44 >> 2] = HEAP32[i21 + 24 + 12 >> 2];
      if (i1) break L18;
     } while (0);
     if (i18 & 1024) {
      i1 = HEAP32[i20 + 156 >> 2] | 0;
      HEAP32[i20 + 32 >> 2] = HEAP32[i21 + 64 + 32 >> 2];
      HEAP32[i20 + 40 >> 2] = HEAP32[i21 + 64 + 744 >> 2];
      HEAP32[i1 + 12 >> 2] = HEAP32[i21 + 48 >> 2];
      HEAP32[i1 + 12 + 4 >> 2] = HEAP32[i21 + 48 + 4 >> 2];
      HEAP32[i1 + 12 + 8 >> 2] = HEAP32[i21 + 48 + 8 >> 2];
      HEAP32[i1 + 12 + 12 >> 2] = HEAP32[i21 + 48 + 12 >> 2];
      HEAP32[i1 + 28 >> 2] = i12;
      HEAP32[i1 + 32 >> 2] = i3;
      HEAP8[i1 + 8 >> 0] = 1;
      i1 = 0;
      break;
     }
     i22 = HEAP32[i21 + 64 + 744 >> 2] | 0;
     HEAP32[i20 + 40 >> 2] = i22;
     HEAP32[i20 + 56 >> 2] = i22;
     HEAP8[(HEAP32[i20 + 156 >> 2] | 0) + 8 >> 0] = 0;
     do if (!(HEAP8[i16 + 296 >> 0] | 0)) i19 = 80; else {
      if (!(HEAP16[i16 + 334 >> 1] | 0)) {
       i19 = 80;
       break;
      }
      if (!(HEAP32[i16 + 336 >> 2] | 0)) {
       i19 = 80;
       break;
      }
      HEAP16[i21 + 1002 >> 1] = 0;
      HEAP16[i21 + 1e3 >> 1] = 0;
      FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i16 + 532 >> 2] | 0) + 156 >> 2] & 63](i16, 1, i15, i21 + 1002 | 0, i21 + 1e3 | 0) | 0;
      HEAP32[i20 + 48 >> 2] = HEAP16[i21 + 1002 >> 1];
      i1 = HEAPU16[i21 + 1e3 >> 1] | 0;
      HEAP32[i20 + 52 >> 2] = i1;
      i6 = i20 + 52 | 0;
      i9 = 1;
     } while (0);
     do if ((i19 | 0) == 80) if ((HEAP16[i16 + 368 >> 1] | 0) == -1) {
      i1 = (HEAP16[i16 + 220 >> 1] | 0) - (HEAP16[i16 + 222 >> 1] | 0) | 0;
      HEAP32[i20 + 52 >> 2] = i1;
      i6 = i20 + 52 | 0;
      i9 = 0;
      break;
     } else {
      i1 = (HEAP16[i16 + 438 >> 1] | 0) - (HEAP16[i16 + 440 >> 1] | 0) | 0;
      HEAP32[i20 + 52 >> 2] = i1;
      i6 = i20 + 52 | 0;
      i9 = 0;
      break;
     } while (0);
     HEAP32[i20 + 60 >> 2] = i1;
     HEAP32[i20 + 72 >> 2] = 1869968492;
     HEAP32[i20 + 124 >> 2] = 0;
     do if (i17) {
      if ((HEAPU16[i17 + 14 >> 1] | 0) >= 24) {
       i1 = 4;
       break;
      }
      HEAP32[i20 + 124 >> 2] = 256;
      i1 = 260;
     } else i1 = 4; while (0);
     HEAP32[i20 + 124 >> 2] = i1;
     do if ((HEAP32[i21 + 48 >> 2] | 0) == 65536) {
      if ((HEAP32[i21 + 48 + 12 >> 2] | 0) != 65536) {
       i19 = 90;
       break;
      }
      if (HEAP32[i21 + 48 + 4 >> 2] | 0) {
       i19 = 90;
       break;
      }
      if (HEAP32[i21 + 48 + 8 >> 2] | 0) i19 = 90;
     } else i19 = 90; while (0);
     if ((i19 | 0) == 90) _FT_Outline_Transform(i20 + 108 | 0, i21 + 48 | 0);
     if (i3 | i12) _FT_Outline_Translate(i20 + 108 | 0, i12, i3);
     HEAP32[i21 >> 2] = HEAP32[i20 + 40 >> 2];
     HEAP32[i21 + 4 >> 2] = 0;
     _FT_Vector_Transform(i21, i21 + 48 | 0);
     HEAP32[i20 + 40 >> 2] = (HEAP32[i21 >> 2] | 0) + i12;
     HEAP32[i21 >> 2] = 0;
     HEAP32[i21 + 4 >> 2] = HEAP32[i6 >> 2];
     _FT_Vector_Transform(i21, i21 + 48 | 0);
     HEAP32[i6 >> 2] = (HEAP32[i21 + 4 >> 2] | 0) + i3;
     if (!((i18 & 1 | 0) != 0 & (i11 | 0) == 0)) {
      i3 = HEAP32[i20 + 112 >> 2] | 0;
      i4 = HEAP32[i20 + 164 >> 2] | 0;
      i5 = HEAP32[i20 + 168 >> 2] | 0;
      if (!((i18 & 3 | 0) == 0 ? (HEAP32[i21 + 64 + 68 >> 2] | 0) != 0 : 0)) i19 = 96;
      do if ((i19 | 0) == 96) {
       i1 = HEAP16[i20 + 110 >> 1] | 0;
       if (i1 << 16 >> 16 <= 0) break;
       i2 = i1 << 16 >> 16;
       i1 = i3;
       while (1) {
        HEAP32[i1 >> 2] = _FT_MulFix(HEAP32[i1 >> 2] | 0, i4) | 0;
        i22 = i1 + 4 | 0;
        HEAP32[i22 >> 2] = _FT_MulFix(HEAP32[i22 >> 2] | 0, i5) | 0;
        if ((i2 | 0) > 1) {
         i2 = i2 + -1 | 0;
         i1 = i1 + 8 | 0;
        } else break;
       }
      } while (0);
      HEAP32[i20 + 40 >> 2] = _FT_MulFix(HEAP32[i20 + 40 >> 2] | 0, i4) | 0;
      HEAP32[i6 >> 2] = _FT_MulFix(HEAP32[i6 >> 2] | 0, i5) | 0;
     }
     _FT_Outline_Get_CBox(i20 + 108 | 0, i21 + 8 | 0);
     i1 = HEAP32[i21 + 8 >> 2] | 0;
     HEAP32[i20 + 24 >> 2] = (HEAP32[i21 + 8 + 8 >> 2] | 0) - i1;
     i22 = HEAP32[i21 + 8 + 12 >> 2] | 0;
     HEAP32[i20 + 28 >> 2] = i22 - (HEAP32[i21 + 8 + 4 >> 2] | 0);
     HEAP32[i20 + 32 >> 2] = i1;
     HEAP32[i20 + 36 >> 2] = i22;
     if (i9) {
      HEAP32[i20 + 44 >> 2] = i1 - ((HEAP32[i20 + 40 >> 2] | 0) / 2 | 0);
      i1 = 0;
      break;
     }
     if (!(i18 & 16)) {
      i1 = 0;
      break;
     }
     _ft_synthesize_vertical_metrics(i20 + 24 | 0, HEAP32[i6 >> 2] | 0);
     i1 = 0;
    }
   }
  } else i1 = 6;
 } while (0);
 i22 = i1;
 STACKTOP = i21;
 return i22 | 0;
}

function __ZN8Material11LinkProgramEv(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (!i1) {
  i1 = _glCreateProgram() | 0;
  HEAP32[i12 >> 2] = i1;
  if (!i1) {
   STACKTOP = i13;
   return;
  }
 }
 _glAttachShader(i1 | 0, HEAP32[(HEAP32[i12 + 44 >> 2] | 0) + 24 >> 2] | 0);
 _glAttachShader(HEAP32[i12 >> 2] | 0, HEAP32[(HEAP32[i12 + 48 >> 2] | 0) + 24 >> 2] | 0);
 _glLinkProgram(HEAP32[i12 >> 2] | 0);
 if (!(__Z22PrintProgramLinkErrorsj(HEAP32[i12 >> 2] | 0) | 0)) {
  _glDeleteProgram(HEAP32[i12 >> 2] | 0);
  HEAP32[i12 >> 2] = 0;
  STACKTOP = i13;
  return;
 }
 i1 = i13 + 512 | 0;
 i2 = i1 + 64 | 0;
 do {
  HEAP8[i1 >> 0] = 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i13 + 496 >> 2] = 0;
 HEAP32[i13 + 496 + 4 >> 2] = 0;
 HEAP32[i13 + 496 + 8 >> 2] = 0;
 HEAP32[i13 + 496 + 12 >> 2] = 0;
 _glGetProgramiv(HEAP32[i12 >> 2] | 0, 35721, i13 + 224 | 0);
 L9 : do if ((HEAP32[i13 + 224 >> 2] | 0) > 0) {
  i5 = 0;
  i4 = 0;
  i1 = 0;
  i3 = 0;
  i9 = 0;
  while (1) {
   HEAP8[i13 + 232 >> 0] = 0;
   HEAP8[i13 + 232 + 256 >> 0] = 0;
   HEAP32[i13 + 232 + 260 >> 2] = 0;
   _glGetActiveAttrib(HEAP32[i12 >> 2] | 0, i9 | 0, 255, 0, i13 + 220 | 0, i13 + 216 | 0, i13 + 232 | 0);
   i2 = (__Z26StringToVertexDataSemanticPKc(i13 + 232 | 0) | 0) + -1 | 0;
   if (i2 >>> 0 < 10) {
    _glBindAttribLocation(HEAP32[i12 >> 2] | 0, i2 | 0, i13 + 232 | 0);
    HEAP8[i13 + 512 + i2 >> 0] = 1;
    i2 = i3;
   } else {
    HEAP32[i13 + 200 >> 2] = 0;
    HEAP32[i13 + 200 + 4 >> 2] = 0;
    HEAP32[i13 + 200 + 8 >> 2] = 0;
    HEAP32[i13 + 200 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i13 + 200 | 0, i13 + 232 | 0);
    if (i1 >>> 0 >= i3 >>> 0 ? (i7 = i3 << 1, i7 = i7 >>> 0 < 32 ? 32 : i7, i7 >>> 0 >= i3 >>> 0) : 0) {
     i6 = __Znaj(i7 >>> 0 > 268435455 | i7 << 4 >>> 0 > 4294967291 ? -1 : (i7 << 4) + 4 | 0) | 0;
     HEAP32[i6 >> 2] = i7;
     if (!i7) i4 = i1; else {
      i1 = i6 + 4 | 0;
      do {
       HEAP32[i1 >> 2] = 0;
       HEAP32[i1 + 4 >> 2] = 0;
       HEAP32[i1 + 8 >> 2] = 0;
       HEAP32[i1 + 12 >> 2] = 0;
       i1 = i1 + 16 | 0;
      } while ((i1 | 0) != (i6 + 4 + (i7 << 4) | 0));
      i4 = HEAP32[i13 + 496 + 12 >> 2] | 0;
     }
     i3 = HEAP32[i13 + 496 >> 2] | 0;
     if (!i4) i1 = 0; else {
      i1 = 0;
      do {
       __ZN6StringaSERKS_(i6 + 4 + (i1 << 4) | 0, i3 + (i1 << 4) | 0) | 0;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 < i4 >>> 0);
      i1 = i4;
     }
     if (i3) {
      i1 = HEAP32[i3 + -4 >> 2] | 0;
      if (i1) {
       i1 = i3 + (i1 << 4) | 0;
       do {
        i1 = i1 + -16 | 0;
        i2 = HEAP32[i1 >> 2] | 0;
        if (i2) __ZdaPv(i2);
        HEAP32[i1 >> 2] = 0;
       } while ((i1 | 0) != (i3 | 0));
      }
      __ZdaPv(i3 + -4 | 0);
      i1 = i4;
     }
     HEAP32[i13 + 496 >> 2] = i6 + 4;
     HEAP32[i13 + 496 + 8 >> 2] = i7;
     i5 = i6 + 4 | 0;
     i3 = i7;
     i4 = i6 + 4 | 0;
    }
    i1 = i4 + (i1 << 4) | 0;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i1, HEAP32[i13 + 200 >> 2] | 0);
    i1 = (HEAP32[i13 + 496 + 12 >> 2] | 0) + 1 | 0;
    HEAP32[i13 + 496 + 12 >> 2] = i1;
    i2 = HEAP32[i13 + 200 >> 2] | 0;
    if (i2) __ZdaPv(i2);
    HEAP32[i13 + 200 >> 2] = 0;
    i2 = i3;
   }
   i9 = i9 + 1 | 0;
   if ((i9 | 0) >= (HEAP32[i13 + 224 >> 2] | 0)) {
    i3 = i1;
    break;
   } else i3 = i2;
  }
  if (i3) {
   i4 = 0;
   i1 = 0;
   L46 : while (1) {
    if ((i1 | 0) >= 64) break;
    while (1) {
     i2 = i13 + 512 + i1 | 0;
     if (!(HEAP8[i2 >> 0] | 0)) break;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= 64) break L46;
    }
    _glBindAttribLocation(HEAP32[i12 >> 2] | 0, i1 | 0, HEAP32[i5 + (i4 << 4) >> 2] | 0);
    HEAP8[i2 >> 0] = 1;
    i4 = i4 + 1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L9; else i1 = i1 + 1 | 0;
   }
   __ZN4math22PrintToConsoleVariadicEjPKcz(4, 296102, i13);
  }
 } while (0);
 _glLinkProgram(HEAP32[i12 >> 2] | 0);
 i11 = __Z22PrintProgramLinkErrorsj(HEAP32[i12 >> 2] | 0) | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (!i11) {
  _glDeleteProgram(i1 | 0);
  HEAP32[i12 >> 2] = 0;
  i1 = 0;
 }
 HEAP32[i13 + 196 >> 2] = -1;
 _glGetProgramiv(i1 | 0, 35718, i13 + 196 | 0);
 i4 = HEAP32[i12 + 4 >> 2] | 0;
 i1 = HEAP32[i12 + 8 >> 2] | 0;
 if ((i1 | 0) != (i4 | 0)) do {
  i2 = i1 + -20 | 0;
  HEAP32[i12 + 8 >> 2] = i2;
  i3 = i1 + -16 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) i1 = i2; else {
   __ZdaPv(i1);
   i1 = HEAP32[i12 + 8 >> 2] | 0;
  }
  HEAP32[i3 >> 2] = 0;
 } while ((i1 | 0) != (i4 | 0));
 i4 = HEAP32[i12 + 16 >> 2] | 0;
 i1 = HEAP32[i12 + 20 >> 2] | 0;
 if ((i1 | 0) != (i4 | 0)) do {
  i2 = i1 + -20 | 0;
  HEAP32[i12 + 20 >> 2] = i2;
  i3 = i1 + -16 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) i1 = i2; else {
   __ZdaPv(i1);
   i1 = HEAP32[i12 + 20 >> 2] | 0;
  }
  HEAP32[i3 >> 2] = 0;
 } while ((i1 | 0) != (i4 | 0));
 HEAP32[i13 + 184 >> 2] = 0;
 i11 = i13 + 184 + 4 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i13 + 184 + 8 >> 2] = 0;
 HEAP32[i13 + 172 >> 2] = 0;
 i10 = i13 + 172 + 4 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i13 + 172 + 8 >> 2] = 0;
 _glUseProgram(HEAP32[i12 >> 2] | 0);
 if ((HEAP32[i13 + 196 >> 2] | 0) > 0) {
  i7 = i13 + 144 + 4 | 0;
  i8 = i13 + 104 + 4 | 0;
  i9 = 0;
  do {
   HEAP8[i13 + 232 >> 0] = 0;
   HEAP8[i13 + 232 + 256 >> 0] = 0;
   HEAP32[i13 + 232 + 260 >> 2] = 0;
   _glGetActiveUniform(HEAP32[i12 >> 2] | 0, i9 | 0, 255, 0, i13 + 168 | 0, i13 + 164 | 0, i13 + 232 | 0);
   do if (((HEAP32[i13 + 164 >> 2] | 0) + -35677 | 0) >>> 0 < 6) {
    i5 = _glGetUniformLocation(HEAP32[i12 >> 2] | 0, i13 + 232 | 0) | 0;
    i6 = __Z25StringToEngineTextureTypePKc(i13 + 232 | 0) | 0;
    if ((i6 | 0) == 2147483647) {
     i1 = HEAP32[i11 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i13 + 184 + 8 >> 2] | 0)) {
      __ZNSt3__16vectorI11FixedStringILi256EcENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i13 + 184 | 0, i13 + 232 | 0);
      break;
     } else {
      _memcpy(i1 | 0, i13 + 232 | 0, 264) | 0;
      HEAP32[i11 >> 2] = i1 + 264;
      break;
     }
    };
    HEAP32[i7 >> 2] = 0;
    HEAP32[i7 + 4 >> 2] = 0;
    HEAP32[i7 + 8 >> 2] = 0;
    HEAP32[i7 + 12 >> 2] = 0;
    HEAP32[i13 + 144 >> 2] = i6;
    HEAP32[i13 + 128 >> 2] = 0;
    HEAP32[i13 + 128 + 4 >> 2] = 0;
    HEAP32[i13 + 128 + 8 >> 2] = 0;
    HEAP32[i13 + 128 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i13 + 128 | 0, i13 + 232 | 0);
    i3 = HEAP32[i13 + 128 >> 2] | 0;
    do if (!i3) {
     HEAP32[i13 + 144 + 12 >> 2] = 0;
     HEAP32[i13 + 144 + 8 >> 2] = 0;
     i4 = 0;
    } else {
     i2 = HEAP32[i13 + 128 + 8 >> 2] | 0;
     if ((i2 | 0) > -1) {
      if (!(i2 + 1 | 0)) i1 = 0; else {
       i1 = __Znaj((i2 + 1 | 0) > -1 ? i2 + 1 | 0 : -1) | 0;
       HEAP32[i13 + 144 + 16 >> 2] = i2 + 1;
       HEAP8[i1 >> 0] = 0;
      }
      HEAP32[i7 >> 2] = i1;
      _memcpy(i1 | 0, i3 | 0, i2 + 1 | 0) | 0;
      HEAP32[i13 + 144 + 12 >> 2] = i2;
      HEAP32[i13 + 144 + 8 >> 2] = HEAP32[i13 + 128 + 4 >> 2];
      if (!i3) {
       i4 = i1;
       break;
      }
     } else {
      _memcpy(0, i3 | 0, i2 + 1 | 0) | 0;
      HEAP32[i13 + 144 + 12 >> 2] = i2;
      HEAP32[i13 + 144 + 8 >> 2] = HEAP32[i13 + 128 + 4 >> 2];
      i1 = 0;
     }
     __ZdaPv(i3);
     i4 = i1;
    } while (0);
    HEAP32[i13 + 128 >> 2] = 0;
    i1 = HEAP32[i12 + 8 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i12 + 12 >> 2] | 0)) __ZNSt3__16vectorIN8Material11TextureSlotENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i12 + 4 | 0, i13 + 144 | 0); else {
     HEAP32[i1 >> 2] = i6;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 + 4 + 4 >> 2] = 0;
     HEAP32[i1 + 4 + 8 >> 2] = 0;
     HEAP32[i1 + 4 + 12 >> 2] = 0;
     __ZN6String3SetEPKc(i1 + 4 | 0, i4);
     HEAP32[i1 >> 2] = i6;
     HEAP32[i12 + 8 >> 2] = (HEAP32[i12 + 8 >> 2] | 0) + 20;
    };
    HEAP32[i8 >> 2] = 0;
    HEAP32[i8 + 4 >> 2] = 0;
    HEAP32[i8 + 8 >> 2] = 0;
    HEAP32[i8 + 12 >> 2] = 0;
    HEAP32[i13 + 104 >> 2] = i6;
    HEAP32[i13 + 88 >> 2] = 0;
    HEAP32[i13 + 88 + 4 >> 2] = 0;
    HEAP32[i13 + 88 + 8 >> 2] = 0;
    HEAP32[i13 + 88 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i13 + 88 | 0, i13 + 232 | 0);
    i3 = HEAP32[i13 + 88 >> 2] | 0;
    do if (!i3) {
     HEAP32[i13 + 104 + 12 >> 2] = 0;
     HEAP32[i13 + 104 + 8 >> 2] = 0;
     i2 = 0;
    } else {
     i2 = HEAP32[i13 + 88 + 8 >> 2] | 0;
     if ((i2 | 0) > -1) {
      if (!(i2 + 1 | 0)) i1 = 0; else {
       i1 = __Znaj((i2 + 1 | 0) > -1 ? i2 + 1 | 0 : -1) | 0;
       HEAP32[i13 + 104 + 16 >> 2] = i2 + 1;
       HEAP8[i1 >> 0] = 0;
      }
      HEAP32[i8 >> 2] = i1;
      _memcpy(i1 | 0, i3 | 0, i2 + 1 | 0) | 0;
      HEAP32[i13 + 104 + 12 >> 2] = i2;
      HEAP32[i13 + 104 + 8 >> 2] = HEAP32[i13 + 88 + 4 >> 2];
      if (!i3) {
       i2 = i1;
       break;
      }
     } else {
      _memcpy(0, i3 | 0, i2 + 1 | 0) | 0;
      HEAP32[i13 + 104 + 12 >> 2] = i2;
      HEAP32[i13 + 104 + 8 >> 2] = HEAP32[i13 + 88 + 4 >> 2];
      i1 = 0;
     }
     __ZdaPv(i3);
     i2 = i1;
    } while (0);
    HEAP32[i13 + 88 >> 2] = 0;
    i1 = HEAP32[i12 + 20 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i12 + 24 >> 2] | 0)) __ZNSt3__16vectorIN8Material18TextureSamplerSlotENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i12 + 16 | 0, i13 + 104 | 0); else {
     HEAP32[i1 >> 2] = i6;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 + 4 + 4 >> 2] = 0;
     HEAP32[i1 + 4 + 8 >> 2] = 0;
     HEAP32[i1 + 4 + 12 >> 2] = 0;
     __ZN6String3SetEPKc(i1 + 4 | 0, i2);
     HEAP32[i1 >> 2] = i6;
     HEAP32[i12 + 20 >> 2] = (HEAP32[i12 + 20 >> 2] | 0) + 20;
    }
    HEAP32[i13 + 84 >> 2] = i6;
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i13 + 172 + 8 >> 2] | 0)) __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_(i13 + 172 | 0, i13 + 84 | 0); else {
     HEAP32[i1 >> 2] = i6;
     HEAP32[i10 >> 2] = i1 + 4;
    }
    _glUniform1i(i5 | 0, i6 | 0);
    if (i2) __ZdaPv(i2);
    HEAP32[i13 + 104 + 4 >> 2] = 0;
    if (i4) __ZdaPv(i4);
    HEAP32[i13 + 144 + 4 >> 2] = 0;
   } while (0);
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (HEAP32[i13 + 196 >> 2] | 0));
 }
 i2 = HEAP32[i11 >> 2] | 0;
 i1 = HEAP32[i13 + 184 >> 2] | 0;
 if ((i2 | 0) == (i1 | 0)) i1 = i2; else {
  i7 = i13 + 64 + 4 | 0;
  i8 = i13 + 24 + 4 | 0;
  i2 = 0;
  i6 = 0;
  while (1) {
   i9 = _glGetUniformLocation(HEAP32[i12 >> 2] | 0, i1 + (i6 * 264 | 0) | 0) | 0;
   i3 = HEAP32[i13 + 172 >> 2] | 0;
   i4 = HEAP32[i10 >> 2] | 0;
   L129 : do if ((i3 | 0) == (i4 | 0)) i5 = i2; else while (1) {
    i1 = i3;
    while (1) {
     if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
     i1 = i1 + 4 | 0;
     if ((i1 | 0) == (i4 | 0)) {
      i5 = i2;
      break L129;
     }
    }
    if ((i1 | 0) == (i4 | 0)) {
     i5 = i2;
     break;
    } else i2 = i2 + 1 | 0;
   } while (0);
   HEAP32[i7 >> 2] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
   HEAP32[i7 + 8 >> 2] = 0;
   HEAP32[i7 + 12 >> 2] = 0;
   HEAP32[i13 + 64 >> 2] = i5;
   i3 = (HEAP32[i13 + 184 >> 2] | 0) + (i6 * 264 | 0) | 0;
   HEAP32[i13 + 48 >> 2] = 0;
   HEAP32[i13 + 48 + 4 >> 2] = 0;
   HEAP32[i13 + 48 + 8 >> 2] = 0;
   HEAP32[i13 + 48 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i13 + 48 | 0, i3);
   i3 = HEAP32[i13 + 48 >> 2] | 0;
   do if (!i3) {
    HEAP32[i13 + 64 + 12 >> 2] = 0;
    HEAP32[i13 + 64 + 8 >> 2] = 0;
    i4 = 0;
   } else {
    i2 = HEAP32[i13 + 48 + 8 >> 2] | 0;
    if ((i2 | 0) > -1) {
     if (!(i2 + 1 | 0)) i1 = 0; else {
      i1 = __Znaj((i2 + 1 | 0) > -1 ? i2 + 1 | 0 : -1) | 0;
      HEAP32[i13 + 64 + 16 >> 2] = i2 + 1;
      HEAP8[i1 >> 0] = 0;
     }
     HEAP32[i7 >> 2] = i1;
     _memcpy(i1 | 0, i3 | 0, i2 + 1 | 0) | 0;
     HEAP32[i13 + 64 + 12 >> 2] = i2;
     HEAP32[i13 + 64 + 8 >> 2] = HEAP32[i13 + 48 + 4 >> 2];
     if (!i3) {
      i4 = i1;
      break;
     }
    } else {
     _memcpy(0, i3 | 0, i2 + 1 | 0) | 0;
     HEAP32[i13 + 64 + 12 >> 2] = i2;
     HEAP32[i13 + 64 + 8 >> 2] = HEAP32[i13 + 48 + 4 >> 2];
     i1 = 0;
    }
    __ZdaPv(i3);
    i4 = i1;
   } while (0);
   HEAP32[i13 + 48 >> 2] = 0;
   i1 = HEAP32[i12 + 8 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i12 + 12 >> 2] | 0)) __ZNSt3__16vectorIN8Material11TextureSlotENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i12 + 4 | 0, i13 + 64 | 0); else {
    HEAP32[i1 >> 2] = i5;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 4 + 4 >> 2] = 0;
    HEAP32[i1 + 4 + 8 >> 2] = 0;
    HEAP32[i1 + 4 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i1 + 4 | 0, i4);
    HEAP32[i1 >> 2] = i5;
    HEAP32[i12 + 8 >> 2] = (HEAP32[i12 + 8 >> 2] | 0) + 20;
   };
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   HEAP32[i8 + 12 >> 2] = 0;
   HEAP32[i13 + 24 >> 2] = i5;
   i3 = (HEAP32[i13 + 184 >> 2] | 0) + (i6 * 264 | 0) | 0;
   HEAP32[i13 + 8 >> 2] = 0;
   HEAP32[i13 + 8 + 4 >> 2] = 0;
   HEAP32[i13 + 8 + 8 >> 2] = 0;
   HEAP32[i13 + 8 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i13 + 8 | 0, i3);
   i3 = HEAP32[i13 + 8 >> 2] | 0;
   do if (!i3) {
    HEAP32[i13 + 24 + 12 >> 2] = 0;
    HEAP32[i13 + 24 + 8 >> 2] = 0;
    i2 = 0;
   } else {
    i1 = HEAP32[i13 + 8 + 8 >> 2] | 0;
    if ((i1 | 0) > -1) {
     if (!(i1 + 1 | 0)) i2 = 0; else {
      i2 = __Znaj((i1 + 1 | 0) > -1 ? i1 + 1 | 0 : -1) | 0;
      HEAP32[i13 + 24 + 16 >> 2] = i1 + 1;
      HEAP8[i2 >> 0] = 0;
     }
     HEAP32[i8 >> 2] = i2;
     _memcpy(i2 | 0, i3 | 0, i1 + 1 | 0) | 0;
     HEAP32[i13 + 24 + 12 >> 2] = i1;
     HEAP32[i13 + 24 + 8 >> 2] = HEAP32[i13 + 8 + 4 >> 2];
     if (!i3) break;
    } else {
     _memcpy(0, i3 | 0, i1 + 1 | 0) | 0;
     HEAP32[i13 + 24 + 12 >> 2] = i1;
     HEAP32[i13 + 24 + 8 >> 2] = HEAP32[i13 + 8 + 4 >> 2];
     i2 = 0;
    }
    __ZdaPv(i3);
   } while (0);
   HEAP32[i13 + 8 >> 2] = 0;
   i1 = HEAP32[i12 + 20 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i12 + 24 >> 2] | 0)) __ZNSt3__16vectorIN8Material18TextureSamplerSlotENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i12 + 16 | 0, i13 + 24 | 0); else {
    HEAP32[i1 >> 2] = i5;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 4 + 4 >> 2] = 0;
    HEAP32[i1 + 4 + 8 >> 2] = 0;
    HEAP32[i1 + 4 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i1 + 4 | 0, i2);
    HEAP32[i1 >> 2] = i5;
    HEAP32[i12 + 20 >> 2] = (HEAP32[i12 + 20 >> 2] | 0) + 20;
   }
   _glUniform1i(i9 | 0, i5 | 0);
   if (i2) __ZdaPv(i2);
   HEAP32[i13 + 24 + 4 >> 2] = 0;
   if (i4) __ZdaPv(i4);
   HEAP32[i13 + 64 + 4 >> 2] = 0;
   i6 = i6 + 1 | 0;
   i1 = HEAP32[i13 + 184 >> 2] | 0;
   if (i6 >>> 0 >= (((HEAP32[i11 >> 2] | 0) - i1 | 0) / 264 | 0) >>> 0) break; else i2 = i5 + 1 | 0;
  }
 }
 i2 = HEAP32[i13 + 172 >> 2] | 0;
 if (i2) {
  i1 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) != (i2 | 0)) HEAP32[i10 >> 2] = i1 + (~((i1 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i2);
  i1 = HEAP32[i13 + 184 >> 2] | 0;
 }
 if (i1) {
  i2 = HEAP32[i11 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i11 >> 2] = i2 + (~(((0 - i1 + (i2 + -264) | 0) >>> 0) / 264 | 0) * 264 | 0);
  __ZdlPv(i1);
 }
 __ZN5ArrayI6String9StdCAllocED2Ev(i13 + 496 | 0);
 STACKTOP = i13;
 return;
}

function _FNT_Face_Init(i14, i20, i16, i1, i2) {
 i14 = i14 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i17 = HEAP32[i20 + 100 >> 2] | 0;
 i10 = HEAP32[i20 + 104 >> 2] | 0;
 HEAP32[i20 + 132 >> 2] = 0;
 i1 = _FT_Stream_Seek(i10, 0) | 0;
 HEAP32[i19 + 144 >> 2] = i1;
 L1 : do if (!i1) {
  i1 = _FT_Stream_ReadFields(i10, 284752, i19 + 156 | 0) | 0;
  HEAP32[i19 + 144 >> 2] = i1;
  if (!i1) {
   HEAP32[i19 + 144 >> 2] = 2;
   L4 : do if ((HEAP16[i19 + 156 >> 1] | 0) == 23117) {
    i1 = _FT_Stream_Seek(i10, HEAPU16[i19 + 156 + 2 >> 1] | 0) | 0;
    HEAP32[i19 + 144 >> 2] = i1;
    if (i1) break L1;
    i1 = _FT_Stream_ReadFields(i10, 284772, i19 + 148 | 0) | 0;
    HEAP32[i19 + 144 >> 2] = i1;
    if (i1) break L1;
    HEAP32[i19 + 144 >> 2] = 2;
    L8 : do switch (HEAP16[i19 + 148 >> 1] | 0) {
    case 17742:
     {
      i1 = _FT_Stream_Seek(i10, (HEAPU16[i19 + 148 + 2 >> 1] | 0) + (HEAPU16[i19 + 156 + 2 >> 1] | 0) | 0) | 0;
      HEAP32[i19 + 144 >> 2] = i1;
      if (i1) break L1;
      i1 = _FT_Stream_EnterFrame(i10, (HEAPU16[i19 + 148 + 4 >> 1] | 0) - (HEAPU16[i19 + 148 + 2 >> 1] | 0) | 0) | 0;
      HEAP32[i19 + 144 >> 2] = i1;
      if (i1) break L1;
      i4 = _FT_Stream_GetUShortLE(i10) | 0;
      i1 = _FT_Stream_GetUShortLE(i10) | 0;
      L13 : do if (!(i1 << 16 >> 16)) {
       i2 = 0;
       i3 = 0;
      } else {
       while (1) {
        i2 = _FT_Stream_GetUShortLE(i10) | 0;
        if (i1 << 16 >> 16 == -32760) break;
        HEAP32[i10 + 32 >> 2] = (HEAP32[i10 + 32 >> 2] | 0) + (((i2 & 65535) * 12 | 0) + 4);
        i1 = _FT_Stream_GetUShortLE(i10) | 0;
        if (!(i1 << 16 >> 16)) {
         i2 = 0;
         i3 = 0;
         break L13;
        }
       }
       i3 = _FT_Stream_Pos(i10) | 0;
       i3 = i3 + 4 + (HEAP32[i10 + 32 >> 2] | 0) - (HEAP32[i10 + 36 >> 2] | 0) | 0;
      } while (0);
      _FT_Stream_ExitFrame(i10);
      if (!((i3 | 0) != 0 & i2 << 16 >> 16 != 0)) {
       HEAP32[i19 + 144 >> 2] = 3;
       i1 = 3;
       break L1;
      }
      i1 = i2 & 65535;
      if ((i1 * 118 | 0) >>> 0 > (HEAP32[i10 + 4 >> 2] | 0) >>> 0) {
       HEAP32[i19 + 144 >> 2] = 3;
       i1 = 3;
       break L1;
      }
      HEAP32[i20 >> 2] = i1;
      if ((i1 | 0) <= (i16 | 0)) {
       HEAP32[i19 + 144 >> 2] = 6;
       i1 = 6;
       break L1;
      }
      if ((i16 | 0) < 0) break L4;
      HEAP32[i20 + 132 >> 2] = _ft_mem_alloc(i17, 172, i19 + 144 | 0) | 0;
      i1 = HEAP32[i19 + 144 >> 2] | 0;
      if (i1) break L1;
      i8 = _FT_Stream_Seek(i10, i3 + (i16 * 12 | 0) | 0) | 0;
      HEAP32[i19 + 144 >> 2] = i8;
      if (i8) {
       i15 = 78;
       break L4;
      }
      i8 = _FT_Stream_EnterFrame(i10, 12) | 0;
      HEAP32[i19 + 144 >> 2] = i8;
      if (i8) {
       i15 = 78;
       break L4;
      }
      i2 = ((_FT_Stream_GetUShortLE(i10) | 0) & 65535) << (i4 & 65535);
      HEAP32[HEAP32[i20 + 132 >> 2] >> 2] = i2;
      i2 = ((_FT_Stream_GetUShortLE(i10) | 0) & 65535) << (i4 & 65535);
      HEAP32[(HEAP32[i20 + 132 >> 2] | 0) + 164 >> 2] = i2;
      HEAP32[i10 + 32 >> 2] = (HEAP32[i10 + 32 >> 2] | 0) + 8;
      _FT_Stream_ExitFrame(i10);
      i2 = _fnt_font_load(HEAP32[i20 + 132 >> 2] | 0, i10) | 0;
      HEAP32[i19 + 144 >> 2] = i2;
      i1 = i20;
      break;
     }
    case 17744:
     {
      i1 = _FT_Stream_Seek(i10, HEAPU16[i19 + 156 + 2 >> 1] | 0) | 0;
      HEAP32[i19 + 144 >> 2] = i1;
      if (i1) break L1;
      i1 = _FT_Stream_ReadFields(i10, 284796, i19 + 124 | 0) | 0;
      HEAP32[i19 + 144 >> 2] = i1;
      if (i1) break L1;
      if (((HEAP32[i19 + 124 >> 2] | 0) == 17744 ? (i3 = HEAP32[i19 + 124 + 4 >> 2] | 0, (i3 & 65535) << 16 >> 16 == 332) : 0) ? (HEAP32[i19 + 124 + 8 >> 2] | 0) == 17498336 : 0) {
       HEAP32[i20 >> 2] = 0;
       L40 : do if (i3 >>> 0 >= 65536) {
        i2 = 0;
        while (1) {
         i1 = _FT_Stream_ReadFields(i10, 284848, i19 + 104 | 0) | 0;
         HEAP32[i19 + 144 >> 2] = i1;
         if (i1) break L1;
         i2 = i2 + 1 << 16 >> 16;
         if ((HEAP32[i19 + 124 + 12 >> 2] | 0) == (HEAP32[i19 + 104 + 8 >> 2] | 0)) break;
         if ((i2 & 65535) >= (HEAPU16[i19 + 124 + 6 >> 1] | 0)) break L40;
        }
        i9 = i19 + 104 + 16 | 0;
        i1 = _FT_Stream_Seek(i10, HEAP32[i9 >> 2] | 0) | 0;
        HEAP32[i19 + 144 >> 2] = i1;
        if (i1) break L1;
        i1 = _FT_Stream_ReadFields(i10, 284880, i19 + 88 | 0) | 0;
        HEAP32[i19 + 144 >> 2] = i1;
        if (i1) break L1;
        i7 = HEAP32[i9 >> 2] | 0;
        i8 = HEAP32[i19 + 88 + 12 >> 2] | 0;
        if (((i8 >>> 16) + (i8 & 65535) | 0) <= 0) {
         i2 = 0;
         i1 = i20;
         break L8;
        }
        i1 = 0;
        i8 = 0;
        L50 : while (1) {
         i1 = _FT_Stream_Seek(i10, i7 + 16 + (i1 << 3) | 0) | 0;
         HEAP32[i19 + 144 >> 2] = i1;
         if (i1) break L1;
         i1 = _FT_Stream_ReadFields(i10, 284912, i19 + 48 | 0) | 0;
         HEAP32[i19 + 144 >> 2] = i1;
         if (i1) break L1;
         i1 = HEAP32[i19 + 48 + 4 >> 2] | 0;
         if ((i1 | 0) >= 0) {
          i15 = 45;
          break;
         }
         HEAP32[i19 + 48 + 4 >> 2] = i1 & 2147483647;
         i6 = (HEAP32[i9 >> 2] | 0) + (i1 & 2147483647) | 0;
         i1 = _FT_Stream_Seek(i10, i6) | 0;
         HEAP32[i19 + 144 >> 2] = i1;
         if (i1) break L1;
         i1 = _FT_Stream_ReadFields(i10, 284880, i19 + 72 | 0) | 0;
         HEAP32[i19 + 144 >> 2] = i1;
         if (i1) break L1;
         i5 = HEAP32[i19 + 72 + 12 >> 2] | 0;
         if (((i5 >>> 16) + (i5 & 65535) | 0) > 0) {
          i1 = 0;
          i5 = 0;
          do {
           i1 = _FT_Stream_Seek(i10, i6 + 16 + (i1 << 3) | 0) | 0;
           HEAP32[i19 + 144 >> 2] = i1;
           if (i1) break L1;
           i1 = _FT_Stream_ReadFields(i10, 284912, i19 + 40 | 0) | 0;
           HEAP32[i19 + 144 >> 2] = i1;
           if (i1) break L1;
           i1 = HEAP32[i19 + 40 + 4 >> 2] | 0;
           if ((i1 | 0) >= 0) {
            i15 = 53;
            break L50;
           }
           HEAP32[i19 + 40 + 4 >> 2] = i1 & 2147483647;
           i4 = (HEAP32[i9 >> 2] | 0) + (i1 & 2147483647) | 0;
           i1 = _FT_Stream_Seek(i10, i4) | 0;
           HEAP32[i19 + 144 >> 2] = i1;
           if (i1) break L1;
           i1 = _FT_Stream_ReadFields(i10, 284880, i19 + 56 | 0) | 0;
           HEAP32[i19 + 144 >> 2] = i1;
           if (i1) break L1;
           i3 = HEAP32[i19 + 56 + 12 >> 2] | 0;
           if (((i3 >>> 16) + (i3 & 65535) | 0) > 0) {
            i1 = 0;
            i3 = 0;
            do {
             i1 = _FT_Stream_Seek(i10, i4 + 16 + (i1 << 3) | 0) | 0;
             HEAP32[i19 + 144 >> 2] = i1;
             if (i1) break L1;
             i1 = _FT_Stream_ReadFields(i10, 284912, i19 + 32 | 0) | 0;
             HEAP32[i19 + 144 >> 2] = i1;
             if (i1) break L1;
             if ((HEAP32[i19 + 40 + 4 >> 2] | 0) < 0) {
              i15 = 61;
              break L50;
             }
             if ((HEAP32[i19 + 48 >> 2] | 0) == 8) {
              i1 = _FT_Stream_Seek(i10, (HEAP32[i19 + 32 + 4 >> 2] | 0) + i7 | 0) | 0;
              HEAP32[i19 + 144 >> 2] = i1;
              if (i1) break L1;
              i1 = _FT_Stream_ReadFields(i10, 284928, i19 + 16 | 0) | 0;
              HEAP32[i19 + 144 >> 2] = i1;
              if (i1) break L1;
              i1 = HEAP32[i20 >> 2] | 0;
              if ((i1 | 0) == (i16 | 0)) {
               i2 = _ft_mem_alloc(i17, 172, i19 + 144 | 0) | 0;
               HEAP32[i20 + 132 >> 2] = i2;
               i1 = HEAP32[i19 + 144 >> 2] | 0;
               if (i1) break L1;
               HEAP32[i2 >> 2] = (HEAP32[i19 + 16 >> 2] | 0) + (HEAP32[i9 >> 2] | 0) - (HEAP32[i19 + 104 + 8 >> 2] | 0);
               HEAP32[i2 + 164 >> 2] = HEAP32[i19 + 16 + 4 >> 2];
               i2 = _fnt_font_load(i2, i10) | 0;
               HEAP32[i19 + 144 >> 2] = i2;
               if (i2) {
                i15 = 78;
                break L4;
               }
               i1 = HEAP32[i20 >> 2] | 0;
              }
              HEAP32[i20 >> 2] = i1 + 1;
             }
             i3 = i3 + 1 << 16 >> 16;
             i1 = i3 & 65535;
             i2 = HEAP32[i19 + 56 + 12 >> 2] | 0;
            } while ((i1 | 0) < ((i2 >>> 16) + (i2 & 65535) | 0));
           }
           i5 = i5 + 1 << 16 >> 16;
           i1 = i5 & 65535;
           i4 = HEAP32[i19 + 72 + 12 >> 2] | 0;
          } while ((i1 | 0) < ((i4 >>> 16) + (i4 & 65535) | 0));
         }
         i8 = i8 + 1 << 16 >> 16;
         i1 = i8 & 65535;
         i6 = HEAP32[i19 + 88 + 12 >> 2] | 0;
         if ((i1 | 0) >= ((i6 >>> 16) + (i6 & 65535) | 0)) {
          i2 = 0;
          i1 = i20;
          break L8;
         }
        }
        if ((i15 | 0) == 45) {
         HEAP32[i19 + 144 >> 2] = 3;
         i1 = 3;
         break L1;
        } else if ((i15 | 0) == 53) {
         HEAP32[i19 + 144 >> 2] = 3;
         i1 = 3;
         break L1;
        } else if ((i15 | 0) == 61) {
         HEAP32[i19 + 144 >> 2] = 3;
         i1 = 3;
         break L1;
        }
       } while (0);
       HEAP32[i19 + 144 >> 2] = 3;
       i1 = 3;
       break L1;
      }
      HEAP32[i19 + 144 >> 2] = 3;
      i1 = 3;
      break L1;
     }
    default:
     {
      i2 = 2;
      i1 = i20;
     }
    } while (0);
    i1 = HEAP32[i1 >> 2] | 0;
    if (!i1) {
     HEAP32[i19 + 144 >> 2] = 3;
     i1 = 3;
     break L1;
    }
    if ((i1 | 0) > (i16 | 0)) if (!i2) break; else {
     i15 = 78;
     break;
    } else {
     HEAP32[i19 + 144 >> 2] = 6;
     i1 = 6;
     break L1;
    }
   } else i15 = 78; while (0);
   if ((i15 | 0) == 78 ? (i11 = HEAP32[i20 + 100 >> 2] | 0, i12 = HEAP32[i20 + 104 >> 2] | 0, i13 = HEAP32[i20 + 132 >> 2] | 0, (i13 | 0) != 0) : 0) {
    if (HEAP32[i13 + 160 >> 2] | 0) _FT_Stream_ReleaseFrame(i12, i13 + 160 | 0);
    _ft_mem_free(i11, HEAP32[i13 + 168 >> 2] | 0);
    HEAP32[i13 + 168 >> 2] = 0;
    _ft_mem_free(i11, i13);
    HEAP32[i20 + 132 >> 2] = 0;
   }
   i1 = HEAP32[i19 + 144 >> 2] | 0;
  }
 } while (0);
 HEAP32[i19 + 12 >> 2] = i1;
 if ((i16 | 0) < 0 & (i1 | 0) == 0) {
  i20 = 0;
  STACKTOP = i19;
  return i20 | 0;
 }
 L109 : do switch (i1 | 0) {
 case 2:
  {
   i1 = _ft_mem_alloc(i17, 172, i19 + 12 | 0) | 0;
   HEAP32[i20 + 132 >> 2] = i1;
   i2 = HEAP32[i19 + 12 >> 2] | 0;
   if (i2) {
    i20 = i2;
    STACKTOP = i19;
    return i20 | 0;
   }
   HEAP32[i20 >> 2] = 1;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 164 >> 2] = HEAP32[i14 + 4 >> 2];
   i14 = _fnt_font_load(i1, i14) | 0;
   HEAP32[i19 + 12 >> 2] = i14;
   if (!i14) {
    if ((i16 | 0) > 0) {
     HEAP32[i19 + 12 >> 2] = 6;
     break L109;
    }
    if ((i16 | 0) < 0) {
     i20 = 0;
     STACKTOP = i19;
     return i20 | 0;
    } else i15 = 90;
   }
   break;
  }
 case 0:
  {
   i15 = 90;
   break;
  }
 default:
  if (!i20) {
   i20 = i1;
   STACKTOP = i19;
   return i20 | 0;
  }
 } while (0);
 do if ((i15 | 0) == 90) {
  i5 = HEAP32[i20 + 132 >> 2] | 0;
  HEAP32[i20 + 4 >> 2] = i16;
  HEAP32[i20 + 8 >> 2] = (HEAP16[i5 + 100 >> 1] | 0) == (HEAP16[i5 + 102 >> 1] | 0) ? 22 : 18;
  if (HEAP8[i5 + 86 >> 0] | 0) HEAP32[i20 + 12 >> 2] = HEAP32[i20 + 12 >> 2] | 1;
  if ((HEAPU16[i5 + 90 >> 1] | 0) > 799) HEAP32[i20 + 12 >> 2] = HEAP32[i20 + 12 >> 2] | 2;
  i3 = _ft_mem_realloc(i17, 16, 0, 1, 0, i19 + 12 | 0) | 0;
  HEAP32[i20 + 32 >> 2] = i3;
  if (!(HEAP32[i19 + 12 >> 2] | 0)) {
   HEAP32[i20 + 28 >> 2] = 1;
   HEAP16[i3 + 2 >> 1] = HEAP16[i5 + 100 >> 1] | 0;
   HEAP16[i3 >> 1] = (HEAPU16[i5 + 84 >> 1] | 0) + (HEAPU16[i5 + 96 >> 1] | 0);
   i16 = HEAPU16[i5 + 74 >> 1] << 6;
   HEAP32[i3 + 4 >> 2] = i16;
   i4 = HEAP16[i5 + 78 >> 1] | 0;
   i1 = HEAP16[i5 + 76 >> 1] | 0;
   i1 = i1 << 16 >> 16 != 0 ? i1 & 65535 : 72;
   i16 = (_FT_MulDiv(i16, i1, 72) | 0) + 32 & -64;
   HEAP32[i3 + 12 >> 2] = i16;
   i2 = HEAPU16[i5 + 96 >> 1] << 6;
   if ((i16 | 0) > (i2 | 0)) {
    HEAP32[i3 + 12 >> 2] = i2;
    i1 = _FT_MulDiv(i2, 72, i1) | 0;
    HEAP32[i3 + 4 >> 2] = i1;
   } else i1 = HEAP32[i3 + 4 >> 2] | 0;
   HEAP32[i3 + 8 >> 2] = (_FT_MulDiv(i1, i4 << 16 >> 16 != 0 ? i4 & 65535 : 72, 72) | 0) + 32 & -64;
   HEAP32[i19 + 4 >> 2] = 0;
   HEAP16[i19 + 8 >> 1] = 0;
   HEAP16[i19 + 10 >> 1] = 0;
   HEAP32[i19 >> 2] = i20;
   if ((HEAP8[i5 + 92 >> 0] | 0) == 77) {
    HEAP32[i19 + 4 >> 2] = 1634889070;
    HEAP16[i19 + 8 >> 1] = 1;
   }
   i16 = _FT_CMap_New(270584, 0, i19, 0) | 0;
   HEAP32[i19 + 12 >> 2] = i16;
   if (!i16) {
    if (HEAP32[i20 + 36 >> 2] | 0) HEAP32[i20 + 92 >> 2] = HEAP32[HEAP32[i20 + 40 >> 2] >> 2];
    i1 = HEAP8[i5 + 105 >> 0] | 0;
    i2 = HEAP8[i5 + 104 >> 0] | 0;
    if ((i1 & 255) < (i2 & 255)) {
     HEAP32[i19 + 12 >> 2] = 3;
     break;
    }
    HEAP32[i20 + 16 >> 2] = (i1 & 255) + 2 - (i2 & 255);
    i1 = HEAP32[i5 + 116 >> 2] | 0;
    i2 = HEAP32[i5 + 8 >> 2] | 0;
    if (i2 >>> 0 <= i1 >>> 0) {
     HEAP32[i19 + 12 >> 2] = 3;
     break;
    }
    i3 = _ft_mem_alloc(i17, i2 - i1 + 1 | 0, i19 + 12 | 0) | 0;
    HEAP32[i5 + 168 >> 2] = i3;
    if ((HEAP32[i19 + 12 >> 2] | 0) == 0 ? (_memcpy(i3 | 0, (HEAP32[i5 + 160 >> 2] | 0) + (HEAP32[i5 + 116 >> 2] | 0) | 0, i2 - i1 | 0) | 0, HEAP8[(HEAP32[i5 + 168 >> 2] | 0) + (i2 - i1) >> 0] = 0, i18 = HEAP32[i5 + 168 >> 2] | 0, i18 = _ft_mem_realloc(i17, 1, i2 - i1 | 0, (_strlen(i18) | 0) + 1 | 0, i18, i19 + 12 | 0) | 0, HEAP32[i5 + 168 >> 2] = i18, (HEAP32[i19 + 12 >> 2] | 0) == 0) : 0) {
     HEAP32[i20 + 20 >> 2] = i18;
     HEAP32[i20 + 24 >> 2] = 324290;
     i1 = HEAP32[i20 + 12 >> 2] | 0;
     if (!(i1 & 2)) {
      if (!(i1 & 1)) {
       i20 = 0;
       STACKTOP = i19;
       return i20 | 0;
      }
      HEAP32[i20 + 24 >> 2] = 324237;
      i20 = 0;
      STACKTOP = i19;
      return i20 | 0;
     }
     if (i1 & 1) {
      HEAP32[i20 + 24 >> 2] = 324171;
      i20 = 0;
      STACKTOP = i19;
      return i20 | 0;
     } else {
      HEAP32[i20 + 24 >> 2] = 324256;
      i20 = 0;
      STACKTOP = i19;
      return i20 | 0;
     }
    }
   }
  }
 } while (0);
 i1 = HEAP32[i20 + 100 >> 2] | 0;
 i2 = HEAP32[i20 + 104 >> 2] | 0;
 i3 = HEAP32[i20 + 132 >> 2] | 0;
 if (i3) {
  if (HEAP32[i3 + 160 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i3 + 160 | 0);
  _ft_mem_free(i1, HEAP32[i3 + 168 >> 2] | 0);
  HEAP32[i3 + 168 >> 2] = 0;
  _ft_mem_free(i1, i3);
  HEAP32[i20 + 132 >> 2] = 0;
 }
 _ft_mem_free(i1, HEAP32[i20 + 32 >> 2] | 0);
 HEAP32[i20 + 32 >> 2] = 0;
 HEAP32[i20 + 28 >> 2] = 0;
 i20 = HEAP32[i19 + 12 >> 2] | 0;
 STACKTOP = i19;
 return i20 | 0;
}

function __ZN11Application4MainEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, f6 = f0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 HEAP32[i4 + 2596 >> 2] = 1;
 HEAP32[i5 >> 2] = _browser_info() | 0;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 288145, i5);
 __ZN8Graphics4InitEP9MainClassiii13TextureFormatS2_ii(i5 + 612 | 0, i4 + 4 | 0, i4, 1, -1, -1, 28, 45, 0, 1);
 i1 = HEAP32[i5 + 612 + 4 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 612 + 4 >> 2] = 0;
 __ZN8Graphics23SetPresentationIntervalEi(i4 + 4 | 0, 0);
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 288181, i5 + 16 | 0);
 HEAP8[i4 + 2592 >> 0] = 0;
 HEAP8[i4 + 2552 >> 0] = (__ZNK14ProgramOptions9HasOptionEPKc(i4 + 1176 | 0, 288274) | 0) & 1;
 i1 = __ZNK14ProgramOptions8IntValueEPKci(i4 + 1176 | 0, 288284, 1800) | 0;
 HEAP32[i4 + 2568 >> 2] = i1;
 if (HEAP8[i4 + 2552 >> 0] | 0) {
  HEAP32[i5 + 8 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 288294, i5 + 8 | 0);
 }
 HEAP32[i4 + 2556 >> 2] = 0;
 HEAP32[i4 + 2572 >> 2] = 0;
 HEAPF32[i4 + 2576 >> 2] = Math_fround(0.0);
 HEAPF64[i4 + 2584 >> 3] = +__ZN4math5Clock4TickEv();
 __ZN11Application15GenerateSolidVBEN4math8GeomTypeE(i4, 1);
 i1 = __ZN6Shader10FromStringE10ShaderTypePKcS2_S2_S2_(1, 288398, 0, 0, 298501) | 0;
 HEAP32[i5 + 608 >> 2] = i1;
 if (i1) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 i1 = __ZN6Shader10FromStringE10ShaderTypePKcS2_S2_S2_(2, 288593, 0, 0, 298501) | 0;
 HEAP32[i5 + 604 >> 2] = i1;
 if (i1) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 __ZN8Material10SetShadersE9SharedPtrI6ShaderES2_(i4 + 2176 | 0, i5 + 608 | 0, i5 + 604 | 0);
 i1 = HEAP32[i5 + 604 >> 2] | 0;
 if (i1) {
  i3 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i3;
  if (!i3) {
   __ZN6ShaderD2Ev(i1);
   __ZdlPv(i1);
  }
  HEAP32[i5 + 604 >> 2] = 0;
 }
 i1 = HEAP32[i5 + 608 >> 2] | 0;
 if (i1) {
  i3 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i3;
  if (!i3) {
   __ZN6ShaderD2Ev(i1);
   __ZdlPv(i1);
  }
  HEAP32[i5 + 608 >> 2] = 0;
 }
 i1 = __Znwj(20) | 0;
 __ZN15RasterizerStateC2E8FillMode8CullModebiffbbb(i1, 1, 2, 1, 0, Math_fround(0.0), Math_fround(0.0), 0, 0, 0);
 HEAP32[i5 + 600 >> 2] = i1;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 __ZN9SharedPtrI15RasterizerStateEaSERKS1_(i4 + 2228 | 0, i5 + 600 | 0) | 0;
 i3 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
 HEAP32[i1 >> 2] = i3;
 if (!i3) __ZdlPv(i1);
 HEAP32[i5 + 600 >> 2] = 0;
 i1 = __Znwj(40) | 0;
 __ZN10BlendStateC2Eb11BlendSource14BlendOperationS0_S0_S1_S0_b(i1, 0, 5, 1, 6, 2, 1, 1, 0);
 HEAP32[i5 + 596 >> 2] = i1;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 __ZN9SharedPtrI10BlendStateEaSERKS1_(i4 + 2232 | 0, i5 + 596 | 0) | 0;
 i3 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
 HEAP32[i1 >> 2] = i3;
 if (!i3) __ZdlPv(i1);
 HEAP32[i5 + 596 >> 2] = 0;
 i1 = __Znwj(12) | 0;
 __ZN10DepthStateC2Ebb12DepthCmpFunc(i1, 1, 1, 2);
 i2 = HEAP32[i4 + 2236 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  if (i2) {
   i3 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
   HEAP32[i2 >> 2] = i3;
   if (!i3) __ZdlPv(i2);
   HEAP32[i4 + 2236 >> 2] = 0;
  }
  HEAP32[i4 + 2236 >> 2] = i1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 __ZN12VertexBuffer14BindToMaterialEPK8Material(i4 + 2e3 | 0, i4 + 2176 | 0);
 __ZN20ShaderConstantBuffer6CreateEPK14ShaderConstanti(i4 + 2240 | 0, 0, 0);
 __ZN20ShaderConstantBuffer14BindToMaterialE10ShaderTypePKcPK8Material(i4 + 2240 | 0, 1, 0, i4 + 2176 | 0);
 __ZN4math6float3C2Efff(i5 + 584 | 0, Math_fround(0.0), Math_fround(0.0), Math_fround(-1.0e3));
 __ZN4math6float3C2Efff(i5 + 572 | 0, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 __ZN4math6float3C2Efff(i5 + 560 | 0, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
 __ZN4math7Frustum8SetFrameERKNS_6float3ES3_S3_(i4 + 2288 | 0, i5 + 584 | 0, i5 + 572 | 0, i5 + 560 | 0);
 __ZN4math7Frustum21SetViewPlaneDistancesEff(i4 + 2288 | 0, Math_fround(1.0), Math_fround(1.0e4));
 __ZN4math7Frustum14SetPerspectiveEff(i4 + 2288 | 0, Math_fround(1.57079637), Math_fround(1.57079637));
 f6 = Math_fround(__ZNK8Graphics11ScreenWidthEv(i4 + 4 | 0) | 0);
 __ZN4math7Frustum28SetVerticalFovAndAspectRatioEff(i4 + 2288 | 0, Math_fround(1.57079637), Math_fround(f6 / Math_fround(__ZNK8Graphics12ScreenHeightEv(i4 + 4 | 0) | 0)));
 i1 = __ZNK14ProgramOptions8IntValueEPKci(i4 + 1176 | 0, 289002, 100) | 0;
 __ZN4math3LCG4SeedEmmmm(i5 + 16 | 0, i1, 69621, 0, 2147483647);
 HEAP32[i4 + 1788 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i4 + 1788 + 4 >> 2] = HEAP32[i5 + 16 + 4 >> 2];
 HEAP32[i4 + 1788 + 8 >> 2] = HEAP32[i5 + 16 + 8 >> 2];
 HEAP32[i4 + 1788 + 12 >> 2] = HEAP32[i5 + 16 + 12 >> 2];
 __ZN11Application10AddObjectsEi(i4, i1);
 __ZN12FTGlyphCache4InitEi(i4 + 1592 | 0, 1024);
 __ZN12FTGlyphCache12LoadFontFaceEPKci(i4 + 1592 | 0, 288963, 0) | 0;
 __ZN17VertexDeclarationC2E13PrimitiveType18PrimitiveIndexType(i5 + 316 | 0, 4, 0);
 HEAP32[i5 + 236 >> 2] = 1;
 HEAP32[i5 + 236 + 4 >> 2] = 2;
 HEAP8[i5 + 236 + 8 >> 0] = 3;
 HEAP8[i5 + 236 + 12 >> 0] = 112;
 HEAP8[i5 + 236 + 13 >> 0] = 111;
 HEAP8[i5 + 236 + 14 >> 0] = 115;
 HEAP8[i5 + 236 + 15 >> 0] = 0;
 HEAP32[i5 + 236 + 48 >> 2] = 3;
 i1 = i5 + 16 | 0;
 i2 = i5 + 236 | 0;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN17VertexDeclarationC2E13VertexElement(i5 + 288 | 0, i5 + 16 | 0);
 __ZplRK17VertexDeclarationS1_(i5 + 344 | 0, i5 + 316 | 0, i5 + 288 | 0);
 i1 = __Z22IsIE11DeveloperPreviewv() | 0;
 HEAP32[i5 + 156 >> 2] = 5;
 HEAP32[i5 + 156 + 4 >> 2] = i1 ? 2 : 18;
 HEAP8[i5 + 156 + 8 >> 0] = 4;
 HEAP8[i5 + 156 + 12 >> 0] = 99;
 HEAP8[i5 + 156 + 13 >> 0] = 111;
 HEAP8[i5 + 156 + 14 >> 0] = 108;
 HEAP8[i5 + 156 + 15 >> 0] = 111;
 HEAP8[i5 + 156 + 16 >> 0] = 114;
 HEAP8[i5 + 156 + 17 >> 0] = 0;
 HEAP32[i5 + 156 + 48 >> 2] = 5;
 i1 = i5 + 16 | 0;
 i2 = i5 + 156 | 0;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN17VertexDeclarationC2E13VertexElement(i5 + 208 | 0, i5 + 16 | 0);
 __ZplRK17VertexDeclarationS1_(i5 + 372 | 0, i5 + 344 | 0, i5 + 208 | 0);
 HEAP32[i5 + 76 >> 2] = 6;
 HEAP32[i5 + 76 + 4 >> 2] = 2;
 HEAP8[i5 + 76 + 8 >> 0] = 2;
 HEAP8[i5 + 76 + 12 >> 0] = 117;
 HEAP8[i5 + 76 + 13 >> 0] = 118;
 HEAP8[i5 + 76 + 14 >> 0] = 0;
 HEAP32[i5 + 76 + 48 >> 2] = 2;
 i1 = i5 + 16 | 0;
 i2 = i5 + 76 | 0;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN17VertexDeclarationC2E13VertexElement(i5 + 128 | 0, i5 + 16 | 0);
 __ZplRK17VertexDeclarationS1_(i5 + 400 | 0, i5 + 372 | 0, i5 + 128 | 0);
 __ZN12VertexBufferC2EbbRK17VertexDeclarationi13ResourceUsagebb(i5 + 428 | 0, 1, 0, i5 + 400 | 0, 16, 3, 0, 0);
 __ZN12VertexBufferaSERKS_(i4 + 1328 | 0, i5 + 428 | 0) | 0;
 __ZN12VertexBufferD2Ev(i5 + 428 | 0);
 i1 = HEAP32[i5 + 400 >> 2] | 0;
 if (HEAP32[i5 + 400 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 400 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 400 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 400 >> 2] = 0;
 HEAP32[i5 + 400 + 4 >> 2] = 0;
 HEAP32[i5 + 400 + 8 >> 2] = 0;
 HEAP32[i5 + 400 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 128 >> 2] | 0;
 if (HEAP32[i5 + 128 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 128 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 128 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 128 >> 2] = 0;
 HEAP32[i5 + 128 + 4 >> 2] = 0;
 HEAP32[i5 + 128 + 8 >> 2] = 0;
 HEAP32[i5 + 128 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 372 >> 2] | 0;
 if (HEAP32[i5 + 372 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 372 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 372 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 372 >> 2] = 0;
 HEAP32[i5 + 372 + 4 >> 2] = 0;
 HEAP32[i5 + 372 + 8 >> 2] = 0;
 HEAP32[i5 + 372 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 208 >> 2] | 0;
 if (HEAP32[i5 + 208 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 208 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 208 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 208 >> 2] = 0;
 HEAP32[i5 + 208 + 4 >> 2] = 0;
 HEAP32[i5 + 208 + 8 >> 2] = 0;
 HEAP32[i5 + 208 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 344 >> 2] | 0;
 if (HEAP32[i5 + 344 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 344 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 344 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 344 >> 2] = 0;
 HEAP32[i5 + 344 + 4 >> 2] = 0;
 HEAP32[i5 + 344 + 8 >> 2] = 0;
 HEAP32[i5 + 344 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 288 >> 2] | 0;
 if (HEAP32[i5 + 288 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 288 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 288 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 288 >> 2] = 0;
 HEAP32[i5 + 288 + 4 >> 2] = 0;
 HEAP32[i5 + 288 + 8 >> 2] = 0;
 HEAP32[i5 + 288 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 316 >> 2] | 0;
 if (HEAP32[i5 + 316 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 316 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 316 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 316 >> 2] = 0;
 HEAP32[i5 + 316 + 4 >> 2] = 0;
 HEAP32[i5 + 316 + 8 >> 2] = 0;
 HEAP32[i5 + 316 + 12 >> 2] = 0;
 i1 = __ZN6Shader8FromFileE10ShaderTypePKcS2_S2_S2_(1, 288975, 0, 0, 0) | 0;
 HEAP32[i5 + 72 >> 2] = i1;
 if (i1) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 __ZN8Material15SetVertexShaderE9SharedPtrI6ShaderE(i4 + 1460 | 0, i5 + 72 | 0);
 i1 = HEAP32[i5 + 72 >> 2] | 0;
 if (i1) {
  i3 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i3;
  if (!i3) {
   __ZN6ShaderD2Ev(i1);
   __ZdlPv(i1);
  }
  HEAP32[i5 + 72 >> 2] = 0;
 }
 i1 = __ZN6Shader8FromFileE10ShaderTypePKcS2_S2_S2_(2, 288975, 0, 0, 0) | 0;
 HEAP32[i5 + 68 >> 2] = i1;
 if (i1) HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 __ZN8Material14SetPixelShaderE9SharedPtrI6ShaderE(i4 + 1460 | 0, i5 + 68 | 0);
 i1 = HEAP32[i5 + 68 >> 2] | 0;
 if (i1) {
  i3 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i3;
  if (!i3) {
   __ZN6ShaderD2Ev(i1);
   __ZdlPv(i1);
  }
  HEAP32[i5 + 68 >> 2] = 0;
 }
 i1 = __Znwj(40) | 0;
 __ZN10BlendStateC2Eb11BlendSource14BlendOperationS0_S0_S1_S0_b(i1, 1, 5, 1, 6, 2, 1, 1, 0);
 i2 = HEAP32[i4 + 1516 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  if (i2) {
   i3 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
   HEAP32[i2 >> 2] = i3;
   if (!i3) __ZdlPv(i2);
   HEAP32[i4 + 1516 >> 2] = 0;
  }
  HEAP32[i4 + 1516 >> 2] = i1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 i1 = __Znwj(12) | 0;
 __ZN10DepthStateC2Ebb12DepthCmpFunc(i1, 0, 0, 2);
 i2 = HEAP32[i4 + 1520 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  if (i2) {
   i3 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
   HEAP32[i2 >> 2] = i3;
   if (!i3) __ZdlPv(i2);
   HEAP32[i4 + 1520 >> 2] = 0;
  }
  HEAP32[i4 + 1520 >> 2] = i1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 i1 = __Znwj(20) | 0;
 __ZN15RasterizerStateC2E8FillMode8CullModebiffbbb(i1, 1, 1, 1, 0, Math_fround(0.0), Math_fround(0.0), 0, 0, 0);
 i2 = HEAP32[i4 + 1512 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  if (i2) {
   i3 = (HEAP32[i2 >> 2] | 0) + -1 | 0;
   HEAP32[i2 >> 2] = i3;
   if (!i3) __ZdlPv(i2);
   HEAP32[i4 + 1512 >> 2] = 0;
  }
  HEAP32[i4 + 1512 >> 2] = i1;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 }
 __ZN12VertexBuffer17AllocateGpuMemoryE13ResourceUsagebb(i4 + 1328 | 0, 3, 0, 0);
 __ZN12VertexBuffer14BindToMaterialEPK8Material(i4 + 1328 | 0, i4 + 1460 | 0);
 __ZN20ShaderConstantBuffer6CreateEPK14ShaderConstanti(i4 + 1556 | 0, 0, 0);
 __ZN20ShaderConstantBuffer14BindToMaterialE10ShaderTypePKcPK8Material(i4 + 1556 | 0, 2, 0, i4 + 1460 | 0);
 __ZN14TextureSampler6CreateE18TextureAddressMode17TextureFilterModeS1_S1_(i4 + 1524 | 0, 1, 2, 2, 2);
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 if (!i1) {
  i3 = __Znwj(16) | 0;
  HEAP32[i3 >> 2] = 304;
  i2 = i3 + 4 | 0;
  HEAP32[i2 >> 2] = i4;
  i2 = i3 + 8 | 0;
  HEAP32[i2 >> 2] = 4;
  i2 = i2 + 4 | 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = i3;
  STACKTOP = i5;
  return 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 i3 = __Znwj(16) | 0;
 HEAP32[i3 >> 2] = 304;
 i2 = i3 + 4 | 0;
 HEAP32[i2 >> 2] = i4;
 i2 = i3 + 8 | 0;
 HEAP32[i2 >> 2] = 4;
 i2 = i2 + 4 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = i3;
 STACKTOP = i5;
 return 0;
}

function _pfr_slot_load(i17, i16, i1, i14) {
 i17 = i17 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = HEAP32[i17 + 4 >> 2] | 0;
 i12 = (i1 | 0) == 0 ? 0 : i1 + -1 | 0;
 if (!i13) {
  i20 = 6;
  STACKTOP = i21;
  return i20 | 0;
 }
 if (i12 >>> 0 >= (HEAP32[i13 + 408 >> 2] | 0) >>> 0) {
  i20 = 6;
  STACKTOP = i21;
  return i20 | 0;
 }
 L7 : do if ((i14 & 9 | 0) == 0 ? (i20 = HEAP32[i13 + 104 >> 2] | 0, i11 = HEAP32[i13 + 416 >> 2] | 0, i4 = HEAP32[i13 + 380 >> 2] | 0, (i4 | 0) != 0) : 0) {
  i1 = HEAPU16[i16 + 12 >> 1] | 0;
  i2 = 0;
  i3 = HEAP32[i13 + 388 >> 2] | 0;
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) == (i1 | 0) ? (HEAP32[i3 + 4 >> 2] | 0) == (HEAPU16[i16 + 14 >> 1] | 0) : 0) break;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i4 >>> 0) break L7; else i3 = i3 + 36 | 0;
  }
  i1 = HEAP32[i3 + 8 >> 2] | 0;
  if ((_FT_Stream_Seek(i20, (HEAP32[i3 + 24 >> 2] | 0) + (HEAP32[i13 + 432 >> 2] | 0) | 0) | 0) == 0 ? (_FT_Stream_EnterFrame(i20, Math_imul(HEAP32[i3 + 28 >> 2] | 0, (i1 & 1 | 4) + (i1 >>> 1 & 1) + (i1 >>> 2 & 1) | 0) | 0) | 0) == 0 : 0) {
   i10 = HEAP32[i20 + 32 >> 2] | 0;
   i7 = HEAP32[i20 + 36 >> 2] | 0;
   i1 = HEAP32[i3 + 28 >> 2] | 0;
   i8 = HEAP32[i3 + 8 >> 2] | 0;
   i5 = HEAP32[i11 + (i12 << 4) >> 2] | 0;
   L18 : do if (i1) {
    i6 = 0;
    while (1) {
     i4 = (i1 + i6 | 0) >>> 1;
     i3 = Math_imul(i4, (i8 & 1 | 4) + ((i8 & 2) >>> 1) + ((i8 & 4) >>> 2) | 0) | 0;
     if ((i10 + (i3 + ((i8 & 1 | 4) + ((i8 & 2) >>> 1) + ((i8 & 4) >>> 2))) | 0) >>> 0 > i7 >>> 0) break L18;
     if (!(i8 & 1)) {
      i2 = i3 + 1 | 0;
      i3 = HEAPU8[i10 + i3 >> 0] | 0;
     } else {
      i2 = i3 + 2 | 0;
      i3 = HEAPU8[i10 + i3 >> 0] << 8 | HEAPU8[i10 + (i3 + 1) >> 0];
     }
     if ((i3 | 0) == (i5 | 0)) break;
     i19 = i3 >>> 0 < i5 >>> 0;
     i1 = i19 ? i1 : i4;
     i6 = i19 ? i4 : i6;
     if (i6 >>> 0 >= i1 >>> 0) break L18;
    }
    i1 = HEAPU8[i10 + i2 >> 0] | 0;
    if (!(i8 & 2)) {
     i3 = 1;
     i9 = i1;
    } else {
     i3 = 2;
     i9 = HEAPU8[i10 + (i2 + 1) >> 0] | i1 << 8;
    }
    i1 = HEAPU8[i10 + (i3 + i2) >> 0] | 0;
    if (!(i8 & 4)) i5 = HEAPU8[i10 + (i2 + 1 + i3) >> 0] | i1 << 8; else i5 = HEAPU8[i10 + (i2 + 1 + i3) >> 0] << 8 | i1 << 16 | HEAPU8[i10 + (i2 + 2 + i3) >> 0];
    _FT_Stream_ExitFrame(i20);
    if (!i9) break L7;
    i3 = HEAP32[i11 + (i12 << 4) + 4 >> 2] | 0;
    i1 = HEAP32[i13 + 304 >> 2] | 0;
    i2 = HEAP32[i13 + 300 >> 2] | 0;
    if ((i1 | 0) == (i2 | 0)) {
     i4 = i3;
     i2 = i3;
    } else {
     i4 = _FT_MulDiv(i3, i2, i1) | 0;
     i2 = HEAP32[i11 + (i12 << 4) + 4 >> 2] | 0;
     i1 = HEAP32[i13 + 304 >> 2] | 0;
    }
    HEAP32[i17 + 56 >> 2] = i4;
    i3 = _FT_MulDiv(HEAPU16[i16 + 12 >> 1] << 8, i2, i1) | 0;
    if (_FT_Stream_Seek(i20, (HEAP32[i13 + 188 >> 2] | 0) + i5 | 0) | 0) break L7;
    if (_FT_Stream_EnterFrame(i20, i9) | 0) break L7;
    i4 = HEAP32[i20 + 36 >> 2] | 0;
    i1 = HEAP32[i20 + 32 >> 2] | 0;
    L41 : do if ((i1 + 1 | 0) >>> 0 <= i4 >>> 0) {
     i10 = HEAP8[i1 >> 0] | 0;
     switch (i10 & 3 | 0) {
     case 0:
      {
       if ((i1 + 2 | 0) >>> 0 > i4 >>> 0) break L41;
       i7 = HEAP8[i1 + 1 >> 0] | 0;
       i2 = i1 + 2 | 0;
       i8 = i7 >> 4;
       i7 = i7 << 28 >> 28;
       break;
      }
     case 1:
      {
       if ((i1 + 3 | 0) >>> 0 > i4 >>> 0) break L41;
       i2 = i1 + 3 | 0;
       i8 = HEAP8[i1 + 1 >> 0] | 0;
       i7 = HEAP8[i1 + 2 >> 0] | 0;
       break;
      }
     case 2:
      {
       if ((i1 + 5 | 0) >>> 0 > i4 >>> 0) break L41;
       i2 = i1 + 5 | 0;
       i8 = HEAP8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0];
       i7 = HEAP8[i1 + 3 >> 0] << 8 | HEAPU8[i1 + 4 >> 0];
       break;
      }
     case 3:
      {
       if ((i1 + 7 | 0) >>> 0 > i4 >>> 0) break L41;
       i2 = i1 + 7 | 0;
       i8 = HEAPU8[i1 + 2 >> 0] << 8 | HEAP8[i1 + 1 >> 0] << 16 | HEAPU8[i1 + 3 >> 0];
       i7 = HEAPU8[i1 + 5 >> 0] << 8 | HEAP8[i1 + 4 >> 0] << 16 | HEAPU8[i1 + 6 >> 0];
       break;
      }
     default:
      {
       i2 = i1 + 1 | 0;
       i8 = 0;
       i7 = 0;
      }
     }
     switch ((i10 & 255) >>> 2 & 3 | 0) {
     case 3:
      {
       i1 = i2 + 4 | 0;
       if (i1 >>> 0 > i4 >>> 0) break L41;
       i5 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
       i9 = HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
       break;
      }
     case 1:
      {
       i1 = i2 + 1 | 0;
       if (i1 >>> 0 > i4 >>> 0) break L41;
       i9 = HEAP8[i2 >> 0] | 0;
       i5 = i9 >>> 4 & 15;
       i9 = i9 & 15;
       break;
      }
     case 2:
      {
       i1 = i2 + 2 | 0;
       if (i1 >>> 0 > i4 >>> 0) break L41;
       i5 = HEAPU8[i2 >> 0] | 0;
       i9 = HEAPU8[i2 + 1 >> 0] | 0;
       break;
      }
     default:
      {
       i1 = i2;
       i5 = 0;
       i9 = 0;
      }
     }
     switch ((i10 & 255) >>> 4 & 3 | 0) {
     case 0:
      break;
     case 1:
      {
       i2 = i1 + 1 | 0;
       if (i2 >>> 0 > i4 >>> 0) break L41;
       i3 = HEAP8[i1 >> 0] << 8;
       i1 = i2;
       break;
      }
     case 2:
      {
       i2 = i1 + 2 | 0;
       if (i2 >>> 0 > i4 >>> 0) break L41;
       i3 = HEAP8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
       i1 = i2;
       break;
      }
     case 3:
      {
       i2 = i1 + 3 | 0;
       if (i2 >>> 0 > i4 >>> 0) break L41;
       i3 = HEAPU8[i1 + 1 >> 0] << 8 | HEAP8[i1 >> 0] << 16 | HEAPU8[i1 + 2 >> 0];
       i1 = i2;
       break;
      }
     default:
      i3 = 0;
     }
     i6 = i1;
     i2 = i9 + i7 | 0;
     if ((i2 | 0) > -1 ? (HEAP32[i17 + 72 >> 2] = 1651078259, HEAP32[i17 + 80 >> 2] = i5, HEAP32[i17 + 76 >> 2] = i9, i19 = i5 + 7 >> 3, HEAP32[i17 + 84 >> 2] = i19, HEAP8[i17 + 94 >> 0] = 1, i18 = i5 << 6, HEAP32[i17 + 24 >> 2] = i18, HEAP32[i17 + 28 >> 2] = i9 << 6, HEAP32[i17 + 32 >> 2] = i8 << 6, HEAP32[i17 + 36 >> 2] = i7 << 6, HEAP32[i17 + 40 >> 2] = (i3 >> 2) + 32 & -64, HEAP32[i17 + 44 >> 2] = 0 - i18 >> 1, HEAP32[i17 + 48 >> 2] = 0, HEAP32[i17 + 52 >> 2] = HEAP32[i16 + 32 >> 2], HEAP32[i17 + 100 >> 2] = i8, HEAP32[i17 + 104 >> 2] = i2, (_ft_glyphslot_alloc_bitmap(i17, Math_imul(i19, i9) | 0) | 0) == 0) : 0) {
      i15 = HEAP32[i20 + 36 >> 2] | 0;
      i2 = HEAP32[i13 + 208 >> 2] & 2;
      i3 = HEAP32[i17 + 76 >> 2] | 0;
      L72 : do if ((i3 | 0) > 0) {
       i19 = HEAP32[i17 + 80 >> 2] | 0;
       if ((i19 | 0) <= 0) break;
       i4 = HEAP32[i17 + 88 >> 2] | 0;
       i5 = HEAP32[i17 + 84 >> 2] | 0;
       i11 = Math_imul(i19, i3) | 0;
       if (!i2) {
        i2 = i4 + (Math_imul(i5, i3 + -1 | 0) | 0) | 0;
        i18 = 0 - i5 | 0;
       } else {
        i2 = i4;
        i18 = i5;
       }
       switch (((i10 & 255) >>> 4 & 255) >>> 2 | 0) {
       case 0:
        {
         i11 = (i15 - i6 << 3 | 0) > (i11 | 0) ? i11 : i15 - i6 << 3;
         if ((i11 | 0) <= 0) break L72;
         i8 = i1;
         i6 = i2;
         i3 = 0;
         i7 = i19;
         i1 = 128;
         i10 = i11;
         i4 = 0;
         while (1) {
          if (!((i10 ^ i11) & 7)) {
           i9 = i8 + 1 | 0;
           i4 = HEAPU8[i8 >> 0] | 0;
          } else i9 = i8;
          i3 = ((i4 & 128 | 0) == 0 ? 0 : i1) | i3;
          i4 = i4 << 1;
          i1 = i1 >>> 1;
          i5 = i7 + -1 | 0;
          do if ((i7 | 0) < 2) {
           HEAP8[i2 >> 0] = i3;
           i2 = i6 + i18 | 0;
           i6 = i2;
           i3 = 0;
           i5 = i19;
           i1 = 128;
          } else {
           if (i1) break;
           HEAP8[i2 >> 0] = i3;
           i3 = 0;
           i2 = i2 + 1 | 0;
           i1 = 128;
          } while (0);
          if ((i10 | 0) <= 1) break; else {
           i8 = i9;
           i7 = i5;
           i10 = i10 + -1 | 0;
          }
         }
         if ((i1 | 0) == 128) break L72;
         HEAP8[i2 >> 0] = i3;
         break L72;
        }
       case 1:
        {
         if ((i11 | 0) <= 0) break L72;
         i4 = i1;
         i8 = i2;
         i3 = 0;
         i9 = 0;
         i10 = 0;
         i12 = i19;
         i1 = 128;
         i6 = 1;
         i5 = 1;
         while (1) {
          L97 : do if (!i5) i5 = i9; else {
           i5 = i9;
           i7 = i10;
           while (1) {
            if (!i6) {
             i5 = i7;
             i6 = 1;
            } else {
             if (i4 >>> 0 >= i15 >>> 0) {
              i10 = i7;
              break L97;
             }
             i7 = HEAPU8[i4 >> 0] | 0;
             i4 = i4 + 1 | 0;
             i5 = i7 >>> 4;
             i7 = i7 & 15;
             i6 = 0;
            }
            if (!i5) i5 = 0; else {
             i10 = i7;
             break;
            }
           }
          } while (0);
          i3 = ((i6 | 0) == 0 ? 0 : i1) | i3;
          i1 = i1 >>> 1;
          i7 = i12 + -1 | 0;
          do if ((i12 | 0) < 2) {
           HEAP8[i2 >> 0] = i3;
           i2 = i8 + i18 | 0;
           i8 = i2;
           i3 = 0;
           i7 = i19;
           i1 = 128;
          } else {
           if (i1) break;
           HEAP8[i2 >> 0] = i3;
           i3 = 0;
           i2 = i2 + 1 | 0;
           i1 = 128;
          } while (0);
          if ((i11 | 0) > 1) {
           i9 = i5 + -1 | 0;
           i12 = i7;
           i11 = i11 + -1 | 0;
           i5 = (i5 | 0) < 2 & 1;
          } else break;
         }
         if ((i1 | 0) == 128) break L72;
         HEAP8[i2 >> 0] = i3;
         break L72;
        }
       case 2:
        {
         if ((i11 | 0) <= 0) break L72;
         i7 = i1;
         i8 = i2;
         i3 = 0;
         i5 = 0;
         i9 = i19;
         i1 = 128;
         i6 = 1;
         i4 = 1;
         while (1) {
          L116 : do if (!i4) {
           i4 = i7;
           i10 = i5;
          } else while (1) {
           if (i7 >>> 0 >= i15 >>> 0) {
            i4 = i7;
            i10 = i5;
            break L116;
           }
           i4 = i7 + 1 | 0;
           i5 = HEAP8[i7 >> 0] | 0;
           i6 = i6 ^ 1;
           if (!(i5 << 24 >> 24)) {
            i7 = i4;
            i5 = i5 & 255;
           } else {
            i10 = i5 & 255;
            break;
           }
          } while (0);
          i3 = ((i6 | 0) == 0 ? 0 : i1) | i3;
          i1 = i1 >>> 1;
          i5 = i9 + -1 | 0;
          do if ((i9 | 0) < 2) {
           HEAP8[i2 >> 0] = i3;
           i2 = i8 + i18 | 0;
           i8 = i2;
           i3 = 0;
           i9 = i19;
           i1 = 128;
          } else {
           if (i1) {
            i9 = i5;
            break;
           }
           HEAP8[i2 >> 0] = i3;
           i3 = 0;
           i2 = i2 + 1 | 0;
           i9 = i5;
           i1 = 128;
          } while (0);
          if ((i11 | 0) > 1) {
           i7 = i4;
           i5 = i10 + -1 | 0;
           i11 = i11 + -1 | 0;
           i4 = (i10 | 0) < 2 & 1;
          } else break;
         }
         if ((i1 | 0) == 128) break L72;
         HEAP8[i2 >> 0] = i3;
         break L72;
        }
       default:
        break L41;
       }
      } while (0);
      _FT_Stream_ExitFrame(i20);
      i20 = 0;
      STACKTOP = i21;
      return i20 | 0;
     }
    } while (0);
    _FT_Stream_ExitFrame(i20);
    break L7;
   } while (0);
   _FT_Stream_ExitFrame(i20);
  }
 } while (0);
 if (i14 & 16384) {
  i20 = 6;
  STACKTOP = i21;
  return i20 | 0;
 }
 i2 = HEAP32[i13 + 416 >> 2] | 0;
 HEAP32[i17 + 72 >> 2] = 1869968492;
 HEAP16[i17 + 110 >> 1] = 0;
 HEAP16[i17 + 108 >> 1] = 0;
 i19 = HEAP32[i13 + 188 >> 2] | 0;
 i18 = HEAP32[i13 + 104 >> 2] | 0;
 i20 = HEAP32[i2 + (i12 << 4) + 12 >> 2] | 0;
 i1 = HEAP32[i2 + (i12 << 4) + 8 >> 2] | 0;
 _FT_GlyphLoader_Rewind(HEAP32[i17 + 188 >> 2] | 0);
 HEAP32[i17 + 176 >> 2] = 0;
 i1 = _pfr_glyph_load_rec(i17 + 160 | 0, i18, i19, i20, i1) | 0;
 if (i1) {
  i20 = i1;
  STACKTOP = i21;
  return i20 | 0;
 }
 i1 = (HEAP32[i17 + 188 >> 2] | 0) + 20 | 0;
 HEAP32[i17 + 108 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i17 + 108 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i17 + 108 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i17 + 108 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i17 + 108 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 i1 = HEAP32[i17 + 124 >> 2] & -6;
 HEAP32[i17 + 124 >> 2] = i1 | 4;
 if ((i16 | 0) != 0 ? (HEAPU16[i16 + 14 >> 1] | 0) < 24 : 0) HEAP32[i17 + 124 >> 2] = i1 | 260;
 HEAP32[i17 + 40 >> 2] = 0;
 HEAP32[i17 + 52 >> 2] = 0;
 i2 = HEAP32[i2 + (i12 << 4) + 4 >> 2] | 0;
 i1 = HEAP32[i13 + 304 >> 2] | 0;
 i3 = HEAP32[i13 + 300 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) i2 = _FT_MulDiv(i2, i3, i1) | 0;
 if (!(HEAP32[i13 + 324 >> 2] & 1)) {
  HEAP32[i17 + 40 >> 2] = i2;
  i1 = i2;
  i2 = HEAP32[i17 + 52 >> 2] | 0;
 } else {
  HEAP32[i17 + 52 >> 2] = i2;
  i1 = HEAP32[i17 + 40 >> 2] | 0;
 }
 HEAP32[i17 + 56 >> 2] = i1;
 HEAP32[i17 + 60 >> 2] = i2;
 HEAP32[i17 + 44 >> 2] = 0;
 HEAP32[i17 + 48 >> 2] = 0;
 if (!(i14 & 1)) {
  i4 = HEAP32[i16 + 16 >> 2] | 0;
  i3 = HEAP32[i16 + 20 >> 2] | 0;
  if ((HEAP16[i17 + 110 >> 1] | 0) > 0) {
   i1 = 0;
   i2 = HEAP32[i17 + 112 >> 2] | 0;
   while (1) {
    HEAP32[i2 >> 2] = _FT_MulFix(HEAP32[i2 >> 2] | 0, i4) | 0;
    i20 = i2 + 4 | 0;
    HEAP32[i20 >> 2] = _FT_MulFix(HEAP32[i20 >> 2] | 0, i3) | 0;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (HEAP16[i17 + 110 >> 1] | 0)) break; else i2 = i2 + 8 | 0;
   }
   i1 = HEAP32[i17 + 40 >> 2] | 0;
  }
  HEAP32[i17 + 40 >> 2] = _FT_MulFix(i1, i4) | 0;
  HEAP32[i17 + 52 >> 2] = _FT_MulFix(HEAP32[i17 + 52 >> 2] | 0, i3) | 0;
 }
 _FT_Outline_Get_CBox(i17 + 108 | 0, i21);
 i19 = HEAP32[i21 >> 2] | 0;
 HEAP32[i17 + 24 >> 2] = (HEAP32[i21 + 8 >> 2] | 0) - i19;
 i20 = HEAP32[i21 + 4 >> 2] | 0;
 HEAP32[i17 + 28 >> 2] = (HEAP32[i21 + 12 >> 2] | 0) - i20;
 HEAP32[i17 + 32 >> 2] = i19;
 HEAP32[i17 + 36 >> 2] = i20;
 i20 = 0;
 STACKTOP = i21;
 return i20 | 0;
}

function _sfnt_load_face(i6, i14, i1, i4, i5) {
 i6 = i6 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = HEAP32[i14 + 532 >> 2] | 0;
 if ((i4 | 0) > 0) {
  i3 = 0;
  i1 = 0;
  i2 = 0;
  do {
   i16 = HEAP32[i5 + (i3 << 3) >> 2] | 0;
   i2 = (i16 | 0) == 1768386662 ? i2 : (i16 | 0) == 1768386675 ? 1 : i2;
   i1 = (i16 | 0) == 1768386662 ? 1 : i1;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i4 | 0));
  i4 = i1;
  i5 = i2;
 } else {
  i4 = 0;
  i5 = 0;
 }
 L5 : do if (!(HEAP32[(HEAP32[i14 + 128 >> 2] | 0) + 52 >> 2] | 0)) {
  i2 = HEAP16[i14 + 152 >> 1] | 0;
  i3 = HEAP32[i14 + 156 >> 2] | 0;
  if (i2 << 16 >> 16) {
   i1 = i3;
   do {
    if ((HEAP32[i1 >> 2] | 0) == 1735162214 ? (HEAP32[i1 + 12 >> 2] | 0) != 0 : 0) {
     i2 = 1;
     i12 = 14;
     break L5;
    }
    i1 = i1 + 16 | 0;
   } while (i1 >>> 0 < (i3 + ((i2 & 65535) << 4) | 0) >>> 0);
   if (i2 << 16 >> 16) {
    i1 = i3;
    do {
     if ((HEAP32[i1 >> 2] | 0) == 1128678944 ? (HEAP32[i1 + 12 >> 2] | 0) != 0 : 0) {
      i2 = 1;
      i12 = 14;
      break L5;
     }
     i1 = i1 + 16 | 0;
    } while (i1 >>> 0 < (i3 + ((i2 & 65535) << 4) | 0) >>> 0);
   }
  }
  i1 = HEAP32[i13 + 84 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i16 = FUNCTION_TABLE_iii[i1 & 255](i14, i6) | 0, HEAP32[i15 + 28 >> 2] = i16, (i16 | 0) == 0) : 0) {
   i1 = 1;
   i2 = 0;
  } else {
   i2 = 0;
   i12 = 14;
  }
 } else {
  i2 = 1;
  i12 = 14;
 } while (0);
 if ((i12 | 0) == 14) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i13 + 32 >> 2] & 255](i14, i6) | 0;
  HEAP32[i15 + 28 >> 2] = i1;
  if (!i1) i1 = 0; else {
   i16 = i1;
   STACKTOP = i15;
   return i16 | 0;
  }
 }
 if (!(HEAP16[i14 + 178 >> 1] | 0)) {
  HEAP32[i15 + 28 >> 2] = 8;
  i16 = 8;
  STACKTOP = i15;
  return i16 | 0;
 }
 FUNCTION_TABLE_iii[HEAP32[i13 + 44 >> 2] & 255](i14, i6) | 0;
 FUNCTION_TABLE_iii[HEAP32[i13 + 40 >> 2] & 255](i14, i6) | 0;
 FUNCTION_TABLE_iii[HEAP32[i13 + 56 >> 2] & 255](i14, i6) | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[i13 + 52 >> 2] & 255](i14, i6) | 0;
 HEAP32[i15 + 28 >> 2] = i3;
 if (!i1) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 36 >> 2] & 127](i14, i6, 0) | 0;
  HEAP32[i15 + 28 >> 2] = i1;
  L31 : do switch (i1 | 0) {
  case 0:
   {
    i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 136 >> 2] & 127](i14, i6, 0) | 0;
    HEAP32[i15 + 28 >> 2] = i1;
    if ((i1 | 0) == 142) {
     HEAP32[i15 + 28 >> 2] = 147;
     i1 = HEAP32[(HEAP32[i14 + 128 >> 2] | 0) + 52 >> 2] | 0;
     if (!i1) {
      i16 = 147;
      STACKTOP = i15;
      return i16 | 0;
     }
     if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0)) {
      i16 = 147;
      STACKTOP = i15;
      return i16 | 0;
     } else {
      HEAP16[i14 + 250 >> 1] = 0;
      HEAP32[i15 + 28 >> 2] = 0;
      break L31;
     }
    } else i12 = 28;
    break;
   }
  case 142:
   {
    if ((HEAP32[i14 + 148 >> 2] | 0) == 1953658213) {
     HEAP32[i15 + 28 >> 2] = 0;
     i2 = 0;
     break L31;
    }
    HEAP32[i15 + 28 >> 2] = 143;
    i1 = HEAP32[(HEAP32[i14 + 128 >> 2] | 0) + 52 >> 2] | 0;
    if (!i1) {
     i16 = 143;
     STACKTOP = i15;
     return i16 | 0;
    }
    if (!(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0)) {
     i16 = 143;
     STACKTOP = i15;
     return i16 | 0;
    } else {
     HEAP16[i14 + 250 >> 1] = 0;
     HEAP32[i15 + 28 >> 2] = 0;
     break L31;
    }
   }
  default:
   i12 = 28;
  } while (0);
  if ((i12 | 0) == 28) if (i1) {
   i16 = i1;
   STACKTOP = i15;
   return i16 | 0;
  }
  i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 36 >> 2] & 127](i14, i6, 1) | 0;
  HEAP32[i15 + 28 >> 2] = i1;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 136 >> 2] & 127](i14, i6, 1) | 0;
   HEAP32[i15 + 28 >> 2] = i1;
   if (!i1) HEAP8[i14 + 296 >> 0] = 1; else i12 = 32;
  } else i12 = 32;
  L57 : do if ((i12 | 0) == 32) {
   switch (i1 | 0) {
   case 0:
   case 142:
    break L57;
   default:
    {}
   }
   STACKTOP = i15;
   return i1 | 0;
  } while (0);
  i16 = FUNCTION_TABLE_iii[HEAP32[i13 + 48 >> 2] & 255](i14, i6) | 0;
  HEAP32[i15 + 28 >> 2] = i16;
  if (i16) HEAP16[i14 + 368 >> 1] = -1;
 }
 i1 = HEAP32[i13 + 140 >> 2] | 0;
 L63 : do if (i1) {
  i1 = FUNCTION_TABLE_iii[i1 & 255](i14, i6) | 0;
  HEAP32[i15 + 28 >> 2] = i1;
  switch (i1 | 0) {
  case 0:
   break L63;
  case 142:
   {
    HEAP32[i15 + 28 >> 2] = 0;
    break L63;
   }
  default:
   {
    i16 = i1;
    STACKTOP = i15;
    return i16 | 0;
   }
  }
 } while (0);
 i1 = FUNCTION_TABLE_iii[HEAP32[i13 + 80 >> 2] & 255](i14, i6) | 0;
 HEAP32[i15 + 28 >> 2] = i1;
 switch (i1 | 0) {
 case 0:
  break;
 case 142:
  {
   HEAP32[i14 + 556 >> 2] = 0;
   break;
  }
 default:
  {
   i16 = i1;
   STACKTOP = i15;
   return i16 | 0;
  }
 }
 FUNCTION_TABLE_iii[HEAP32[i13 + 76 >> 2] & 255](i14, i6) | 0;
 HEAP32[i15 + 28 >> 2] = FUNCTION_TABLE_iii[HEAP32[i13 + 72 >> 2] & 255](i14, i6) | 0;
 HEAP32[i14 + 16 >> 2] = HEAPU16[i14 + 264 >> 1];
 HEAP32[i14 + 20 >> 2] = 0;
 HEAP32[i14 + 24 >> 2] = 0;
 if ((HEAP16[i14 + 368 >> 1] | 0) != -1 ? (HEAP16[i14 + 432 >> 1] & 256) != 0 : 0) {
  do if (!(i4 << 24 >> 24)) {
   i1 = _tt_face_get_name(i14, 16, i14 + 20 | 0) | 0;
   HEAP32[i15 + 28 >> 2] = i1;
   if (!i1) if (!(HEAP32[i14 + 20 >> 2] | 0)) {
    i12 = 45;
    break;
   } else break; else {
    i16 = i1;
    STACKTOP = i15;
    return i16 | 0;
   }
  } else i12 = 45; while (0);
  if ((i12 | 0) == 45 ? (i7 = _tt_face_get_name(i14, 1, i14 + 20 | 0) | 0, HEAP32[i15 + 28 >> 2] = i7, (i7 | 0) != 0) : 0) {
   i16 = i7;
   STACKTOP = i15;
   return i16 | 0;
  }
  if (i5 << 24 >> 24 == 0 ? (i8 = _tt_face_get_name(i14, 17, i14 + 24 | 0) | 0, HEAP32[i15 + 28 >> 2] = i8, (i8 | 0) != 0) : 0) {
   i16 = i8;
   STACKTOP = i15;
   return i16 | 0;
  }
  if ((HEAP32[i14 + 24 >> 2] | 0) == 0 ? (i9 = _tt_face_get_name(i14, 2, i14 + 24 | 0) | 0, HEAP32[i15 + 28 >> 2] = i9, (i9 | 0) != 0) : 0) {
   i16 = i9;
   STACKTOP = i15;
   return i16 | 0;
  }
 } else {
  i1 = _tt_face_get_name(i14, 21, i14 + 20 | 0) | 0;
  HEAP32[i15 + 28 >> 2] = i1;
  if (i1) {
   i16 = i1;
   STACKTOP = i15;
   return i16 | 0;
  }
  i1 = HEAP32[i14 + 20 >> 2] | 0;
  do if (!(i4 << 24 >> 24 != 0 | (i1 | 0) != 0)) {
   i1 = _tt_face_get_name(i14, 16, i14 + 20 | 0) | 0;
   HEAP32[i15 + 28 >> 2] = i1;
   if (!i1) {
    i1 = HEAP32[i14 + 20 >> 2] | 0;
    break;
   } else {
    i16 = i1;
    STACKTOP = i15;
    return i16 | 0;
   }
  } while (0);
  if ((i1 | 0) == 0 ? (i10 = _tt_face_get_name(i14, 1, i14 + 20 | 0) | 0, HEAP32[i15 + 28 >> 2] = i10, (i10 | 0) != 0) : 0) {
   i16 = i10;
   STACKTOP = i15;
   return i16 | 0;
  }
  i1 = _tt_face_get_name(i14, 22, i14 + 24 | 0) | 0;
  HEAP32[i15 + 28 >> 2] = i1;
  if (i1) {
   i16 = i1;
   STACKTOP = i15;
   return i16 | 0;
  }
  i1 = HEAP32[i14 + 24 >> 2] | 0;
  do if (!(i5 << 24 >> 24 != 0 | (i1 | 0) != 0)) {
   i1 = _tt_face_get_name(i14, 17, i14 + 24 | 0) | 0;
   HEAP32[i15 + 28 >> 2] = i1;
   if (!i1) {
    i1 = HEAP32[i14 + 24 >> 2] | 0;
    break;
   } else {
    i16 = i1;
    STACKTOP = i15;
    return i16 | 0;
   }
  } while (0);
  if ((i1 | 0) == 0 ? (i11 = _tt_face_get_name(i14, 2, i14 + 24 | 0) | 0, HEAP32[i15 + 28 >> 2] = i11, (i11 | 0) != 0) : 0) {
   i16 = i11;
   STACKTOP = i15;
   return i16 | 0;
  }
 }
 i5 = i2 << 24 >> 24 == 1;
 i1 = HEAP32[i14 + 8 >> 2] | i5 & 1;
 if (!i3) i1 = (HEAP32[i14 + 468 >> 2] | 0) == 196608 ? i1 | 24 : i1 | 536; else i1 = i1 | 24;
 i1 = (HEAP32[i14 + 480 >> 2] | 0) == 0 ? i1 : i1 | 4;
 i1 = (HEAP8[i14 + 296 >> 0] | 0) == 0 ? i1 : i1 | 32;
 i1 = (HEAP32[i14 + 784 >> 2] | 0) == 0 ? i1 : i1 | 64;
 i3 = HEAP16[i14 + 152 >> 1] | 0;
 i4 = HEAP32[i14 + 156 >> 2] | 0;
 L121 : do if (i3 << 16 >> 16) {
  i2 = i4;
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) == 1735162214 ? (HEAP32[i2 + 12 >> 2] | 0) != 0 : 0) {
    i2 = i4;
    break;
   }
   i2 = i2 + 16 | 0;
   if (i2 >>> 0 >= (i4 + ((i3 & 65535) << 4) | 0) >>> 0) break L121;
  }
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) == 1719034226 ? (HEAP32[i2 + 12 >> 2] | 0) != 0 : 0) {
    i2 = i4;
    break;
   }
   i2 = i2 + 16 | 0;
   if (i2 >>> 0 >= (i4 + ((i3 & 65535) << 4) | 0) >>> 0) break L121;
  }
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) == 1735811442 ? (HEAP32[i2 + 12 >> 2] | 0) != 0 : 0) break;
   i2 = i2 + 16 | 0;
   if (i2 >>> 0 >= (i4 + ((i3 & 65535) << 4) | 0) >>> 0) {
    i2 = 0;
    break;
   }
  }
  i1 = (i2 | 0) == 0 ? i1 : i1 | 256;
 } while (0);
 HEAP32[i14 + 8 >> 2] = i1;
 if (i5 ? (HEAP16[i14 + 368 >> 1] | 0) != -1 : 0) {
  i1 = HEAP16[i14 + 432 >> 1] | 0;
  i1 = (i1 & 65535) >>> 4 & 2 | ((i1 & 512 | 0) == 0 ? i1 & 1 : 1);
 } else {
  i1 = HEAP16[i14 + 204 >> 1] | 0;
  i1 = (i1 & 65535) >>> 1 & 1 | (i1 & 1) << 1;
 }
 HEAP32[i14 + 12 >> 2] = i1;
 _tt_face_build_cmaps(i14);
 i3 = HEAP32[i14 + 36 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i4 = HEAP32[i14 + 40 >> 2] | 0;
  i6 = 0;
  do {
   i5 = HEAP32[i4 + (i6 << 2) >> 2] | 0;
   i1 = HEAP16[i5 + 8 >> 1] | 0;
   i2 = HEAP16[i5 + 10 >> 1] | 0;
   L149 : do if (i1 << 16 >> 16 != 2) {
    switch (i1 & 65535 | 0) {
    case 0:
     {
      i1 = 273092;
      i12 = 82;
      break L149;
     }
    case 1:
     if (!(i2 << 16 >> 16)) {
      i1 = 273104;
      i12 = 82;
      break L149;
     } else {
      i1 = 0;
      break L149;
     }
    case 3:
     break;
    default:
     {
      i1 = 0;
      break L149;
     }
    }
    if (i2 << 16 >> 16) if (i2 << 16 >> 16 != 10) if (i2 << 16 >> 16 != 1) if (i2 << 16 >> 16 != 2) if (i2 << 16 >> 16 != 3) if (i2 << 16 >> 16 != 4) {
     if (i2 << 16 >> 16 == 5) {
      i1 = 273188;
      i12 = 82;
      break;
     }
     if (i2 << 16 >> 16 == 6) {
      i1 = 273200;
      i12 = 82;
     } else i1 = 0;
    } else {
     i1 = 273176;
     i12 = 82;
    } else {
     i1 = 273164;
     i12 = 82;
    } else {
     i1 = 273152;
     i12 = 82;
    } else {
     i1 = 273140;
     i12 = 82;
    } else {
     i1 = 273128;
     i12 = 82;
    } else {
     i1 = 273116;
     i12 = 82;
    }
   } else {
    i1 = 273080;
    i12 = 82;
   } while (0);
   if ((i12 | 0) == 82) {
    i12 = 0;
    i1 = HEAP32[i1 + 8 >> 2] | 0;
   }
   HEAP32[i5 + 4 >> 2] = i1;
   i6 = i6 + 1 | 0;
  } while ((i6 | 0) < (i3 | 0));
 }
 i8 = HEAP32[i14 + 612 >> 2] | 0;
 do if (i8) {
  i2 = HEAP32[(HEAP32[i14 + 104 >> 2] | 0) + 28 >> 2] | 0;
  i1 = HEAP16[i14 + 178 >> 1] | 0;
  if (i1 << 16 >> 16 != 0 ? (HEAP16[i14 + 368 >> 1] | 0) != -1 : 0) i3 = HEAP16[i14 + 370 >> 1] | 0; else {
   i3 = 0;
   i1 = 1;
  }
  i4 = _ft_mem_realloc(i2, 16, 0, i8, 0, i15 + 28 | 0) | 0;
  HEAP32[i14 + 32 >> 2] = i4;
  i2 = HEAP32[i15 + 28 >> 2] | 0;
  if (i2) {
   i16 = i2;
   STACKTOP = i15;
   return i16 | 0;
  }
  i6 = i3 << 16 >> 16;
  i7 = i1 & 65535;
  i5 = (i1 & 65535) >>> 1 & 65535;
  i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 152 >> 2] & 127](i14, 0, i15) | 0;
  HEAP32[i15 + 28 >> 2] = i1;
  if (i1) {
   i16 = i1;
   STACKTOP = i15;
   return i16 | 0;
  }
  i2 = i4;
  i3 = 0;
  while (1) {
   HEAP16[i2 + (i3 << 4) >> 1] = (HEAP32[i15 + 20 >> 2] | 0) >>> 6;
   i16 = HEAP32[i15 >> 2] | 0;
   HEAP16[i2 + (i3 << 4) + 2 >> 1] = ((Math_imul(i16 & 65535, i6) | 0) + i5 | 0) / (i7 | 0) | 0;
   HEAP32[i2 + (i3 << 4) + 8 >> 2] = (i16 & 65535) << 6;
   HEAP32[i2 + (i3 << 4) + 12 >> 2] = i16 >>> 16 << 6;
   HEAP32[i2 + (i3 << 4) + 4 >> 2] = i16 >>> 16 << 6;
   i3 = i3 + 1 | 0;
   if (i3 >>> 0 >= i8 >>> 0) {
    i12 = 104;
    break;
   }
   i2 = HEAP32[i14 + 32 >> 2] | 0;
   i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 152 >> 2] & 127](i14, i3, i15) | 0;
   HEAP32[i15 + 28 >> 2] = i1;
   if (i1) {
    i12 = 117;
    break;
   }
  }
  if ((i12 | 0) == 104) {
   i1 = HEAP32[i14 + 8 >> 2] | 2;
   HEAP32[i14 + 8 >> 2] = i1;
   HEAP32[i14 + 28 >> 2] = i8;
   break;
  } else if ((i12 | 0) == 117) {
   STACKTOP = i15;
   return i1 | 0;
  }
 } else i1 = HEAP32[i14 + 8 >> 2] | 0; while (0);
 if (!(i1 & 3)) {
  i1 = i1 | 1;
  HEAP32[i14 + 8 >> 2] = i1;
 }
 if (!(i1 & 1)) {
  i16 = 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 HEAP32[i14 + 52 >> 2] = HEAP16[i14 + 196 >> 1];
 HEAP32[i14 + 56 >> 2] = HEAP16[i14 + 198 >> 1];
 HEAP32[i14 + 60 >> 2] = HEAP16[i14 + 200 >> 1];
 HEAP32[i14 + 64 >> 2] = HEAP16[i14 + 202 >> 1];
 HEAP16[i14 + 68 >> 1] = HEAP16[i14 + 178 >> 1] | 0;
 i13 = HEAP16[i14 + 220 >> 1] | 0;
 HEAP16[i14 + 70 >> 1] = i13;
 i16 = HEAP16[i14 + 222 >> 1] | 0;
 HEAP16[i14 + 72 >> 1] = i16;
 i1 = (i13 & 65535) - (i16 & 65535) + (HEAPU16[i14 + 224 >> 1] | 0) | 0;
 HEAP16[i14 + 74 >> 1] = i1;
 do if ((i13 | i16) << 16 >> 16 == 0 ? (HEAP16[i14 + 368 >> 1] | 0) != -1 : 0) {
  i1 = HEAP16[i14 + 438 >> 1] | 0;
  i2 = HEAP16[i14 + 440 >> 1] | 0;
  if (!((i1 | i2) << 16 >> 16)) {
   i16 = HEAP16[i14 + 444 >> 1] | 0;
   HEAP16[i14 + 70 >> 1] = i16;
   i1 = HEAPU16[i14 + 446 >> 1] | 0;
   HEAP16[i14 + 72 >> 1] = 0 - i1;
   HEAP16[i14 + 74 >> 1] = (i16 & 65535) + i1;
   i1 = (i16 & 65535) + i1 | 0;
   break;
  } else {
   HEAP16[i14 + 70 >> 1] = i1;
   HEAP16[i14 + 72 >> 1] = i2;
   i1 = (i1 & 65535) - (i2 & 65535) + (HEAPU16[i14 + 442 >> 1] | 0) | 0;
   HEAP16[i14 + 74 >> 1] = i1;
   break;
  }
 } while (0);
 HEAP16[i14 + 76 >> 1] = HEAP16[i14 + 226 >> 1] | 0;
 if (!(HEAP8[i14 + 296 >> 0] | 0)) i1 = i1 << 16 >> 16; else i1 = HEAPU16[i14 + 310 >> 1] | 0;
 HEAP16[i14 + 78 >> 1] = i1;
 i16 = HEAP16[i14 + 478 >> 1] | 0;
 HEAP16[i14 + 80 >> 1] = (HEAPU16[i14 + 476 >> 1] | 0) - ((i16 << 16 >> 16 | 0) / 2 | 0);
 HEAP16[i14 + 82 >> 1] = i16;
 i16 = 0;
 STACKTOP = i15;
 return i16 | 0;
}

function _T42_Face_Init(i1, i17, i11, i13, i14) {
 i1 = i1 | 0;
 i17 = i17 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i15 = 0, i16 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 HEAP32[i17 + 500 >> 2] = 0;
 HEAP32[i17 >> 2] = 1;
 i15 = _ft_module_get_service(HEAP32[i17 + 96 >> 2] | 0, 327387) | 0;
 HEAP32[i17 + 484 >> 2] = i15;
 i16 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i17 + 96 >> 2] | 0) + 4 >> 2] | 0, 326535) | 0;
 HEAP32[i17 + 488 >> 2] = i16;
 if (!i16) {
  i17 = 11;
  STACKTOP = i18;
  return i17 | 0;
 }
 i9 = HEAP32[i17 + 100 >> 2] | 0;
 _memset(i18 + 48 | 0, 0, 304) | 0;
 HEAP32[i17 + 492 >> 2] = _ft_mem_alloc(i9, 12, i18 + 12 | 0) | 0;
 L4 : do if (!(HEAP32[i18 + 12 >> 2] | 0)) {
  i4 = HEAP32[i17 + 104 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[HEAP32[i16 + 4 >> 2] >> 2] & 15](i18 + 48 | 0, 0, 0, i9);
  HEAP32[i18 + 48 + 72 >> 2] = i4;
  i7 = i18 + 48 + 80 | 0;
  HEAP32[i7 >> 2] = 0;
  i6 = i18 + 48 + 76 | 0;
  HEAP32[i6 >> 2] = 0;
  HEAP8[i18 + 48 + 84 >> 0] = 0;
  i1 = _FT_Stream_Seek(i4, 0) | 0;
  HEAP32[i18 + 364 >> 2] = i1;
  do if (!i1) {
   i1 = _FT_Stream_EnterFrame(i4, 17) | 0;
   HEAP32[i18 + 364 >> 2] = i1;
   if (!i1) {
    if (_memcmp(HEAP32[i4 + 32 >> 2] | 0, 323936, 17) | 0) {
     HEAP32[i18 + 364 >> 2] = 2;
     _FT_Stream_ExitFrame(i4);
     i1 = 2;
     i12 = 15;
     break;
    }
    _FT_Stream_ExitFrame(i4);
    i1 = _FT_Stream_Seek(i4, 0) | 0;
    HEAP32[i18 + 364 >> 2] = i1;
    if (!i1) {
     i3 = HEAP32[i4 + 4 >> 2] | 0;
     if (!(HEAP32[i4 + 20 >> 2] | 0)) {
      HEAP32[i6 >> 2] = (HEAP32[i4 >> 2] | 0) + (HEAP32[i4 + 8 >> 2] | 0);
      HEAP32[i7 >> 2] = i3;
      HEAP8[i18 + 48 + 84 >> 0] = 1;
      i1 = _FT_Stream_Skip(i4, i3) | 0;
      HEAP32[i18 + 364 >> 2] = i1;
      if (i1) {
       i12 = 15;
       break;
      }
      i1 = HEAP32[i7 >> 2] | 0;
     } else {
      i2 = _ft_mem_alloc(i9, i3, i18 + 364 | 0) | 0;
      HEAP32[i6 >> 2] = i2;
      i1 = HEAP32[i18 + 364 >> 2] | 0;
      if (i1) {
       i12 = 15;
       break;
      }
      i1 = _FT_Stream_Read(i4, i2, i3) | 0;
      HEAP32[i18 + 364 >> 2] = i1;
      if (i1) {
       i12 = 15;
       break;
      }
      HEAP32[i7 >> 2] = i3;
      i1 = i3;
     }
     i2 = HEAP32[i6 >> 2] | 0;
     HEAP32[i18 + 48 + 4 >> 2] = i2;
     HEAP32[i18 + 48 >> 2] = i2;
     HEAP32[i18 + 48 + 8 >> 2] = i2 + i1;
     HEAP32[i18 + 12 >> 2] = 0;
     i10 = i18 + 48 | 0;
     i3 = i18 + 48 + 8 | 0;
    } else i12 = 15;
   } else i12 = 15;
  } else i12 = 15; while (0);
  if ((i12 | 0) == 15) {
   if (HEAP8[i18 + 48 + 84 >> 0] | 0) {
    HEAP32[i18 + 12 >> 2] = i1;
    break;
   }
   _ft_mem_free(i9, HEAP32[i6 >> 2] | 0);
   HEAP32[i6 >> 2] = 0;
   i10 = HEAP32[i18 + 364 >> 2] | 0;
   HEAP32[i18 + 12 >> 2] = i10;
   if (i10) break;
   i10 = i18 + 48 | 0;
   i3 = i18 + 48 + 8 | 0;
   i2 = 0;
   i1 = HEAP32[i7 >> 2] | 0;
  }
  HEAP32[i10 >> 2] = i2;
  i8 = i2 + i1 | 0;
  HEAP32[i3 >> 2] = i8;
  i9 = i18 + 48 + 12 | 0;
  HEAP32[i9 >> 2] = 0;
  FUNCTION_TABLE_vi[HEAP32[i18 + 48 + 28 >> 2] & 127](i18 + 48 | 0);
  i1 = HEAP32[i10 >> 2] | 0;
  L27 : do if (i1 >>> 0 < i8 >>> 0) {
   i7 = i18 + 48 + 32 | 0;
   L29 : while (1) {
    i2 = HEAP8[i1 >> 0] | 0;
    if ((i1 + 25 | 0) >>> 0 < i8 >>> 0 & i2 << 24 >> 24 == 70 ? (_strncmp(i1, 323954, 13) | 0) == 0 : 0) {
     FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i18 + 48 | 0);
     FUNCTION_TABLE_vi[HEAP32[i18 + 48 + 28 >> 2] & 127](i18 + 48 | 0);
     i2 = HEAP32[i10 >> 2] | 0;
     L34 : do if (i2 >>> 0 < i8 >>> 0) {
      i1 = i2;
      while (1) {
       if ((i1 + 5 | 0) >>> 0 < i8 >>> 0 & (HEAP8[i1 >> 0] | 0) == 107 ? (_strncmp(i1, 323968, 5) | 0) == 0 : 0) break;
       FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i18 + 48 | 0);
       i1 = HEAP32[i9 >> 2] | 0;
       if (i1) {
        i12 = 49;
        break L29;
       }
       FUNCTION_TABLE_vi[HEAP32[i18 + 48 + 28 >> 2] & 127](i18 + 48 | 0);
       i1 = HEAP32[i10 >> 2] | 0;
       if (i1 >>> 0 >= i8 >>> 0) {
        i1 = i2;
        break L34;
       }
      }
      FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i18 + 48 | 0);
      FUNCTION_TABLE_vii[HEAP32[i18 + 48 + 56 >> 2] & 31](i18 + 48 | 0, i18 + 352 | 0);
      i1 = (HEAP32[i18 + 352 + 8 >> 2] | 0) == 3 ? HEAP32[i10 >> 2] | 0 : i2;
     } else i1 = i2; while (0);
     HEAP32[i10 >> 2] = i1;
    } else i12 = 30;
    L43 : do if ((i12 | 0) == 30) {
     i12 = 0;
     if (!((i1 + 2 | 0) >>> 0 < i8 >>> 0 & i2 << 24 >> 24 == 47)) {
      FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i18 + 48 | 0);
      i1 = HEAP32[i9 >> 2] | 0;
      if (!i1) break; else {
       i12 = 50;
       break L29;
      }
     }
     i4 = i1 + 1 | 0;
     HEAP32[i10 >> 2] = i4;
     FUNCTION_TABLE_vi[HEAP32[i7 >> 2] & 127](i18 + 48 | 0);
     i1 = HEAP32[i9 >> 2] | 0;
     if (i1) {
      i12 = 50;
      break L29;
     }
     i2 = HEAP32[i10 >> 2] | 0;
     if (i2 >>> 0 < i8 >>> 0 & (i2 - i4 + -1 | 0) >>> 0 < 21) {
      i1 = 0;
      while (1) {
       i6 = 269688 + (i1 * 36 | 0) | 0;
       i3 = HEAP32[i6 >> 2] | 0;
       if ((((i3 | 0) != 0 ? (HEAP8[i4 >> 0] | 0) == (HEAP8[i3 >> 0] | 0) : 0) ? (i2 - i4 | 0) == (_strlen(i3) | 0) : 0) ? (_memcmp(i4, i3, i2 - i4 | 0) | 0) == 0 : 0) break;
       i1 = i1 + 1 | 0;
       if ((i1 | 0) >= 20) break L43;
      }
      if ((i1 + -15 | 0) >>> 0 < 4) {
       FUNCTION_TABLE_vii[HEAP32[269688 + (i1 * 36 | 0) + 12 >> 2] & 31](i17, i18 + 48 | 0);
       i1 = HEAP32[i9 >> 2] | 0;
      } else {
       switch (HEAP32[269688 + (i1 * 36 | 0) + 4 >> 2] | 0) {
       case 3:
        {
         HEAP32[i18 + 364 >> 2] = i17 + 132;
         break;
        }
       case 2:
        {
         HEAP32[i18 + 364 >> 2] = i17 + 164;
         break;
        }
       case 5:
        {
         HEAP32[i18 + 364 >> 2] = i17 + 460;
         break;
        }
       default:
        HEAP32[i18 + 364 >> 2] = i17 + 132;
       }
       i1 = FUNCTION_TABLE_iiiiii[HEAP32[i18 + 48 + 64 >> 2] & 63](i18 + 48 | 0, i6, i18 + 364 | 0, 0, 0) | 0;
      }
      HEAP32[i9 >> 2] = i1;
      if (i1) {
       i12 = 49;
       break L29;
      }
     }
    } while (0);
    FUNCTION_TABLE_vi[HEAP32[i18 + 48 + 28 >> 2] & 127](i18 + 48 | 0);
    i1 = HEAP32[i10 >> 2] | 0;
    if (i1 >>> 0 >= i8 >>> 0) break L27;
   }
   if ((i12 | 0) == 49) {
    HEAP32[i18 + 12 >> 2] = i1;
    break L4;
   } else if ((i12 | 0) == 50) {
    HEAP32[i18 + 12 >> 2] = i1;
    break L4;
   }
  } while (0);
  i10 = HEAP32[i9 >> 2] | 0;
  HEAP32[i18 + 12 >> 2] = i10;
  if (!i10) {
   if ((HEAP8[i17 + 433 >> 0] | 0) != 42) {
    HEAP32[i18 + 12 >> 2] = 2;
    break;
   }
   i8 = HEAP32[i18 + 48 + 144 >> 2] | 0;
   HEAP32[i17 + 416 >> 2] = i8;
   if (!(HEAP32[i18 + 48 + 212 >> 2] | 0)) HEAP32[i18 + 12 >> 2] = 3;
   HEAP32[i18 + 48 + 212 >> 2] = 0;
   HEAP32[i17 + 396 >> 2] = HEAP32[i18 + 48 + 200 >> 2];
   HEAP32[i17 + 424 >> 2] = HEAP32[i18 + 48 + 224 >> 2];
   HEAP32[i17 + 428 >> 2] = HEAP32[i18 + 48 + 228 >> 2];
   HEAP32[i17 + 400 >> 2] = HEAP32[i18 + 48 + 148 >> 2];
   HEAP32[i17 + 420 >> 2] = HEAP32[i18 + 48 + 172 >> 2];
   HEAP32[i18 + 48 + 148 >> 2] = 0;
   HEAP32[i18 + 48 + 172 >> 2] = 0;
   if ((HEAP32[i17 + 368 >> 2] | 0) == 1) {
    i10 = HEAP32[i18 + 48 + 108 >> 2] | 0;
    L80 : do if ((i10 | 0) > 0) {
     if ((i8 | 0) < 1) {
      i1 = 0;
      while (1) {
       HEAP16[(HEAP32[i17 + 384 >> 2] | 0) + (i1 << 1) >> 1] = 0;
       HEAP32[(HEAP32[i17 + 388 >> 2] | 0) + (i1 << 2) >> 2] = 323974;
       i1 = i1 + 1 | 0;
       if ((i1 | 0) == (i10 | 0)) {
        i2 = 0;
        i1 = 0;
        break L80;
       }
      }
     } else {
      i9 = 0;
      i2 = 0;
      i1 = 0;
     }
     do {
      HEAP16[(HEAP32[i17 + 384 >> 2] | 0) + (i9 << 1) >> 1] = 0;
      HEAP32[(HEAP32[i17 + 388 >> 2] | 0) + (i9 << 2) >> 2] = 323974;
      i4 = HEAP32[(HEAP32[i18 + 48 + 116 >> 2] | 0) + (i9 << 2) >> 2] | 0;
      L87 : do if (i4) {
       i6 = HEAP32[i17 + 420 >> 2] | 0;
       i3 = 0;
       while (1) {
        i7 = HEAP32[i6 + (i3 << 2) >> 2] | 0;
        if (!(_strcmp(i4, i7) | 0)) break;
        i3 = i3 + 1 | 0;
        if ((i3 | 0) >= (i8 | 0)) break L87;
       }
       HEAP16[(HEAP32[i17 + 384 >> 2] | 0) + (i9 << 1) >> 1] = i3;
       HEAP32[(HEAP32[i17 + 388 >> 2] | 0) + (i9 << 2) >> 2] = i7;
       if (_strcmp(323974, i7) | 0) {
        i2 = (i9 | 0) < (i2 | 0) ? i2 : i9 + 1 | 0;
        i1 = (i9 | 0) < (i1 | 0) ? i9 : i1;
       }
      } while (0);
      i9 = i9 + 1 | 0;
     } while ((i9 | 0) != (i10 | 0));
    } else {
     i2 = 0;
     i1 = 0;
    } while (0);
    HEAP32[i17 + 376 >> 2] = i1;
    HEAP32[i17 + 380 >> 2] = i2;
    HEAP32[i17 + 372 >> 2] = HEAP32[i18 + 48 + 88 >> 2];
   }
  }
 } while (0);
 i1 = HEAP32[i18 + 48 + 140 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i18 + 48 + 92 | 0);
 i1 = HEAP32[i18 + 48 + 248 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i18 + 48 + 200 | 0);
 i1 = HEAP32[i18 + 48 + 196 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i18 + 48 + 148 | 0);
 i1 = HEAP32[i18 + 48 + 300 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i18 + 48 + 252 | 0);
 if (!(HEAP8[i18 + 48 + 84 >> 0] | 0)) {
  _ft_mem_free(HEAP32[i18 + 48 + 16 >> 2] | 0, HEAP32[i18 + 48 + 76 >> 2] | 0);
  HEAP32[i18 + 48 + 76 >> 2] = 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i18 + 48 + 24 >> 2] & 127](i18 + 48 | 0);
 i1 = HEAP32[i18 + 12 >> 2] | 0;
 if ((i11 | 0) < 0 | (i1 | 0) != 0) {
  i17 = i1;
  STACKTOP = i18;
  return i17 | 0;
 }
 if ((i11 | 0) > 0) {
  i17 = 6;
  STACKTOP = i18;
  return i17 | 0;
 }
 HEAP32[i17 + 16 >> 2] = HEAP32[i17 + 416 >> 2];
 HEAP32[i17 + 36 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = (HEAP8[i17 + 156 >> 0] | 0) == 0 ? 2577 : 2581;
 i2 = HEAP32[i17 + 144 >> 2] | 0;
 HEAP32[i17 + 20 >> 2] = i2;
 HEAP32[i17 + 24 >> 2] = 324290;
 L118 : do if (!i2) {
  i1 = HEAP32[i17 + 364 >> 2] | 0;
  if (i1) HEAP32[i17 + 20 >> 2] = i1;
 } else {
  i1 = HEAP32[i17 + 140 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i5 = HEAP8[i1 >> 0] | 0, i5 << 24 >> 24 != 0) : 0) {
   L123 : while (1) {
    i4 = i5 << 24 >> 24 == 0;
    L125 : while (1) {
     i3 = HEAP8[i2 >> 0] | 0;
     if (i5 << 24 >> 24 == i3 << 24 >> 24) {
      i12 = 85;
      break;
     }
     switch (i5 << 24 >> 24) {
     case 45:
     case 32:
      break L125;
     default:
      {}
     }
     switch (i3 << 24 >> 24) {
     case 0:
      break L123;
     case 45:
     case 32:
      break;
     default:
      break L118;
     }
     if (i4) break L118; else i2 = i2 + 1 | 0;
    }
    if ((i12 | 0) == 85) {
     i12 = 0;
     i2 = i2 + 1 | 0;
    }
    i1 = i1 + 1 | 0;
    i5 = HEAP8[i1 >> 0] | 0;
    if (!(i5 << 24 >> 24)) break L118;
   }
   HEAP32[i17 + 24 >> 2] = i1;
  }
 } while (0);
 HEAP32[i17 + 28 >> 2] = 0;
 HEAP32[i17 + 32 >> 2] = 0;
 HEAP32[i18 + 16 >> 2] = 1;
 HEAP32[i18 + 16 + 4 >> 2] = HEAP32[i17 + 492 >> 2];
 HEAP32[i18 + 16 + 8 >> 2] = HEAP32[i17 + 496 >> 2];
 if (i13) {
  HEAP32[i18 + 16 >> 2] = 17;
  HEAP32[i18 + 16 + 24 >> 2] = i13;
  HEAP32[i18 + 16 + 28 >> 2] = i14;
 }
 i1 = _FT_Open_Face(HEAP32[(HEAP32[i17 + 96 >> 2] | 0) + 4 >> 2] | 0, i18 + 16 | 0, 0, i17 + 500 | 0) | 0;
 if (i1) {
  i17 = i1;
  STACKTOP = i18;
  return i17 | 0;
 }
 _FT_Done_Size(HEAP32[(HEAP32[i17 + 500 >> 2] | 0) + 88 >> 2] | 0) | 0;
 i2 = HEAP32[i17 + 500 >> 2] | 0;
 HEAP32[i17 + 52 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i17 + 52 + 4 >> 2] = HEAP32[i2 + 52 + 4 >> 2];
 HEAP32[i17 + 52 + 8 >> 2] = HEAP32[i2 + 52 + 8 >> 2];
 HEAP32[i17 + 52 + 12 >> 2] = HEAP32[i2 + 52 + 12 >> 2];
 HEAP16[i17 + 68 >> 1] = HEAP16[i2 + 68 >> 1] | 0;
 HEAP16[i17 + 70 >> 1] = HEAP16[i2 + 70 >> 1] | 0;
 HEAP16[i17 + 72 >> 1] = HEAP16[i2 + 72 >> 1] | 0;
 HEAP16[i17 + 74 >> 1] = HEAP16[i2 + 74 >> 1] | 0;
 HEAP16[i17 + 76 >> 1] = HEAP16[i2 + 76 >> 1] | 0;
 HEAP16[i17 + 78 >> 1] = HEAP16[i2 + 78 >> 1] | 0;
 HEAP16[i17 + 80 >> 1] = HEAP16[i17 + 132 + 26 >> 1] | 0;
 HEAP16[i17 + 82 >> 1] = HEAP16[i17 + 160 >> 1] | 0;
 i1 = (HEAP32[i17 + 152 >> 2] | 0) != 0 & 1;
 HEAP32[i17 + 12 >> 2] = i1;
 if (HEAP32[i2 + 12 >> 2] & 2) HEAP32[i17 + 12 >> 2] = i1 | 2;
 if (HEAP32[i2 + 8 >> 2] & 32) HEAP32[i17 + 8 >> 2] = HEAP32[i17 + 8 >> 2] | 32;
 if (!i15) {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i1 = HEAP32[i16 + 20 >> 2] | 0;
 HEAP32[i18 >> 2] = i17;
 HEAP16[i18 + 8 >> 1] = 3;
 HEAP16[i18 + 10 >> 1] = 1;
 HEAP32[i18 + 4 >> 2] = 1970170211;
 i2 = _FT_CMap_New(HEAP32[i1 + 12 >> 2] | 0, 0, i18, 0) | 0;
 switch (i2 | 0) {
 case 0:
 case 163:
  break;
 default:
  {
   i17 = i2;
   STACKTOP = i18;
   return i17 | 0;
  }
 }
 HEAP16[i18 + 8 >> 1] = 7;
 switch (HEAP32[i17 + 368 >> 2] | 0) {
 case 2:
  {
   HEAP32[i18 + 4 >> 2] = 1094995778;
   HEAP16[i18 + 10 >> 1] = 0;
   break;
  }
 case 4:
  {
   HEAP32[i18 + 4 >> 2] = 1094992453;
   HEAP16[i18 + 10 >> 1] = 1;
   i1 = i1 + 4 | 0;
   break;
  }
 case 1:
  {
   HEAP32[i18 + 4 >> 2] = 1094992451;
   HEAP16[i18 + 10 >> 1] = 2;
   i1 = i1 + 8 | 0;
   break;
  }
 case 3:
  {
   HEAP32[i18 + 4 >> 2] = 1818326065;
   HEAP16[i18 + 10 >> 1] = 3;
   i1 = i1 + 12 | 0;
   break;
  }
 default:
  {
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i17 = _FT_CMap_New(i1, 0, i18, 0) | 0;
 STACKTOP = i18;
 return i17 | 0;
}

function __bdf_add_property(i12, i11, i9) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = HEAP32[i12 + 278664 >> 2] | 0;
 HEAP32[i14 >> 2] = 0;
 i4 = HEAP32[i12 + 128 >> 2] | 0;
 i5 = HEAP32[i4 + 12 >> 2] | 0;
 i6 = HEAP8[i11 >> 0] | 0;
 if (!(i6 << 24 >> 24)) i1 = 0; else {
  i2 = i6;
  i3 = i11;
  i1 = 0;
  do {
   i3 = i3 + 1 | 0;
   i1 = (i1 * 31 | 0) + (i2 << 24 >> 24) | 0;
   i2 = HEAP8[i3 >> 0] | 0;
  } while (i2 << 24 >> 24 != 0);
 }
 i4 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i5 + (((i1 >>> 0) % (i4 >>> 0) | 0) << 2) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L5 : do if (i1) {
  while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP8[i3 >> 0] | 0) == i6 << 24 >> 24 ? (_strcmp(i3, i11) | 0) == 0 : 0) break;
   i1 = i2 + -4 | 0;
   i2 = i1 >>> 0 < i5 >>> 0 ? i5 + (i4 + -1 << 2) | 0 : i1;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) break L5;
  }
  i7 = HEAP32[i12 + 80 >> 2] | 0;
  i6 = HEAP32[i1 + 4 >> 2] | 0;
  switch (HEAP32[i7 + (i6 << 4) + 4 >> 2] | 0) {
  case 1:
   {
    _ft_mem_free(i13, HEAP32[i7 + (i6 << 4) + 12 >> 2] | 0);
    HEAP32[i7 + (i6 << 4) + 12 >> 2] = 0;
    if (!i9) {
     i13 = HEAP32[i14 >> 2] | 0;
     STACKTOP = i14;
     return i13 | 0;
    }
    if (!(HEAP8[i9 >> 0] | 0)) {
     i13 = HEAP32[i14 >> 2] | 0;
     STACKTOP = i14;
     return i13 | 0;
    }
    HEAP32[i7 + (i6 << 4) + 12 >> 2] = _ft_mem_strdup(i13, i9, i14) | 0;
    i13 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
  case 2:
   {
    if ((i9 | 0) != 0 ? (i8 = HEAP8[i9 >> 0] | 0, i8 << 24 >> 24 != 0) : 0) {
     i1 = i8 << 24 >> 24 == 45 ? i9 + 1 | 0 : i9;
     i2 = HEAP8[i1 >> 0] | 0;
     L26 : do if (i2 << 24 >> 24 == 48) {
      switch (HEAP8[i1 + 1 >> 0] | 0) {
      case 88:
      case 120:
       break;
      default:
       {
        i5 = 10;
        i3 = i1;
        i2 = 48;
        i4 = 324442;
        break L26;
       }
      }
      i5 = 16;
      i3 = i1 + 2 | 0;
      i2 = HEAP8[i1 + 2 >> 0] | 0;
      i4 = 324410;
     } else {
      i5 = 10;
      i3 = i1;
      i4 = 324442;
     } while (0);
     i1 = i2 << 24 >> 24;
     if (!(HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7))) i1 = 0; else {
      i2 = i1;
      i1 = 0;
      do {
       i1 = Math_imul(i1, i5) | 0;
       i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
       i3 = i3 + 1 | 0;
       i13 = HEAP8[i3 >> 0] | 0;
       i2 = i13 << 24 >> 24;
      } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i13 & 255) >>> 3) >> 0] | 0) != 0);
     }
     i1 = i8 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1;
    } else i1 = 0;
    HEAP32[i7 + (i6 << 4) + 12 >> 2] = i1;
    i13 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
  case 3:
   {
    L37 : do if (i9) {
     i1 = HEAP8[i9 >> 0] | 0;
     L39 : do switch (i1 << 24 >> 24) {
     case 0:
      {
       i1 = 0;
       break L37;
      }
     case 48:
      {
       switch (HEAP8[i9 + 1 >> 0] | 0) {
       case 88:
       case 120:
        break;
       default:
        {
         i3 = i9;
         i5 = 10;
         i1 = 48;
         i4 = 324442;
         break L39;
        }
       }
       i3 = i9 + 2 | 0;
       i5 = 16;
       i1 = HEAP8[i9 + 2 >> 0] | 0;
       i4 = 324410;
       break;
      }
     default:
      {
       i3 = i9;
       i5 = 10;
       i4 = 324442;
      }
     } while (0);
     i2 = i1 << 24 >> 24;
     if (HEAPU8[i4 + ((i1 & 255) >>> 3) >> 0] & 1 << (i2 & 7)) {
      i1 = 0;
      do {
       i1 = Math_imul(i1, i5) | 0;
       i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
       i3 = i3 + 1 | 0;
       i13 = HEAP8[i3 >> 0] | 0;
       i2 = i13 << 24 >> 24;
      } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i13 & 255) >>> 3) >> 0] | 0) != 0);
     } else i1 = 0;
    } else i1 = 0; while (0);
    HEAP32[i7 + (i6 << 4) + 12 >> 2] = i1;
    i13 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
  default:
   {
    i13 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
  }
 } while (0);
 i5 = HEAP32[i12 + 278688 >> 2] | 0;
 if (!(i6 << 24 >> 24)) i1 = 0; else {
  i2 = i6;
  i3 = i11;
  i1 = 0;
  do {
   i3 = i3 + 1 | 0;
   i1 = (i1 * 31 | 0) + (i2 << 24 >> 24) | 0;
   i2 = HEAP8[i3 >> 0] | 0;
  } while (i2 << 24 >> 24 != 0);
 }
 i4 = HEAP32[i12 + 278680 >> 2] | 0;
 i2 = i5 + (((i1 >>> 0) % (i4 >>> 0) | 0) << 2) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L53 : do if (!i1) i7 = 35; else while (1) {
  i3 = HEAP32[i1 >> 2] | 0;
  if ((HEAP8[i3 >> 0] | 0) == i6 << 24 >> 24 ? (_strcmp(i3, i11) | 0) == 0 : 0) {
   i2 = i1;
   break L53;
  }
  i1 = i2 + -4 | 0;
  i2 = i1 >>> 0 < i5 >>> 0 ? i5 + (i4 + -1 << 2) | 0 : i1;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   i7 = 35;
   break;
  }
 } while (0);
 L60 : do if ((i7 | 0) == 35) {
  HEAP32[i14 + 4 >> 2] = 0;
  if (!(i6 << 24 >> 24)) i1 = 0; else {
   i2 = i6;
   i3 = i11;
   i1 = 0;
   do {
    i3 = i3 + 1 | 0;
    i1 = (i1 * 31 | 0) + (i2 << 24 >> 24) | 0;
    i2 = HEAP8[i3 >> 0] | 0;
   } while (i2 << 24 >> 24 != 0);
  }
  i2 = i5 + (((i1 >>> 0) % (i4 >>> 0) | 0) << 2) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  L66 : do if (!i1) i7 = 42; else while (1) {
   i1 = HEAP32[i1 >> 2] | 0;
   if ((HEAP8[i1 >> 0] | 0) == i6 << 24 >> 24 ? (_strcmp(i1, i11) | 0) == 0 : 0) break L66;
   i1 = i2 + -4 | 0;
   i2 = i1 >>> 0 < i5 >>> 0 ? i5 + (i4 + -1 << 2) | 0 : i1;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i7 = 42;
    break;
   }
  } while (0);
  do if ((i7 | 0) == 42) {
   i5 = HEAP32[i12 + 278672 >> 2] | 0;
   i5 = _ft_mem_realloc(i13, 16, i5, i5 + 1 | 0, HEAP32[i12 + 278668 >> 2] | 0, i14 + 4 | 0) | 0;
   HEAP32[i12 + 278668 >> 2] = i5;
   i1 = HEAP32[i14 + 4 >> 2] | 0;
   if (!i1) {
    i2 = HEAP32[i12 + 278672 >> 2] | 0;
    HEAP32[i5 + (i2 << 4) >> 2] = 0;
    HEAP32[i5 + (i2 << 4) + 4 >> 2] = 0;
    HEAP32[i5 + (i2 << 4) + 8 >> 2] = 0;
    HEAP32[i5 + (i2 << 4) + 12 >> 2] = 0;
    i3 = (_strlen(i11) | 0) + 1 | 0;
    i4 = _ft_mem_realloc(i13, 1, 0, i3, 0, i14 + 4 | 0) | 0;
    HEAP32[i5 + (i2 << 4) >> 2] = i4;
    i1 = HEAP32[i14 + 4 >> 2] | 0;
    if (!i1) {
     _memcpy(i4 | 0, i11 | 0, i3 | 0) | 0;
     HEAP32[i5 + (i2 << 4) + 4 >> 2] = 1;
     HEAP32[i5 + (i2 << 4) + 8 >> 2] = 0;
     i1 = _hash_insert(HEAP32[i5 + (i2 << 4) >> 2] | 0, (HEAP32[i12 + 278672 >> 2] | 0) + 83 | 0, i12 + 278676 | 0, i13) | 0;
     HEAP32[i14 + 4 >> 2] = i1;
     if (!i1) {
      HEAP32[i12 + 278672 >> 2] = (HEAP32[i12 + 278672 >> 2] | 0) + 1;
      i6 = HEAP8[i11 >> 0] | 0;
      i5 = HEAP32[i12 + 278688 >> 2] | 0;
      break;
     }
    }
   }
   HEAP32[i14 >> 2] = i1;
   i13 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  } while (0);
  HEAP32[i14 >> 2] = 0;
  if (!(i6 << 24 >> 24)) i1 = 0; else {
   i2 = i6;
   i3 = i11;
   i1 = 0;
   do {
    i3 = i3 + 1 | 0;
    i1 = (i1 * 31 | 0) + (i2 << 24 >> 24) | 0;
    i2 = HEAP8[i3 >> 0] | 0;
   } while (i2 << 24 >> 24 != 0);
  }
  i2 = HEAP32[i12 + 278680 >> 2] | 0;
  i3 = i5 + (((i1 >>> 0) % (i2 >>> 0) | 0) << 2) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) i2 = 0; else {
   i4 = i5 + (i2 + -1 << 2) | 0;
   while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if ((HEAP8[i2 >> 0] | 0) == i6 << 24 >> 24 ? (_strcmp(i2, i11) | 0) == 0 : 0) {
     i2 = i1;
     break L60;
    }
    i1 = i3 + -4 | 0;
    i3 = i1 >>> 0 < i5 >>> 0 ? i4 : i1;
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i2 = 0;
     break;
    }
   }
  }
 } while (0);
 i1 = HEAP32[i12 + 76 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i12 + 72 >> 2] | 0)) {
  if (!i1) {
   i1 = _ft_mem_realloc(i13, 16, 0, 1, 0, i14) | 0;
   HEAP32[i12 + 80 >> 2] = i1;
   if (HEAP32[i14 >> 2] | 0) {
    i13 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
  } else {
   i1 = _ft_mem_realloc(i13, 16, i1, i1 + 1 | 0, HEAP32[i12 + 80 >> 2] | 0, i14) | 0;
   HEAP32[i12 + 80 >> 2] = i1;
   if (HEAP32[i14 >> 2] | 0) {
    i13 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
  }
  i8 = i1 + (HEAP32[i12 + 72 >> 2] << 4) | 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  HEAP32[i12 + 72 >> 2] = (HEAP32[i12 + 72 >> 2] | 0) + 1;
 }
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (i1 >>> 0 > 82) i1 = (HEAP32[i12 + 278668 >> 2] | 0) + (i1 + -83 << 4) | 0; else i1 = 270972 + (i1 << 4) | 0;
 i6 = HEAP32[i12 + 80 >> 2] | 0;
 i7 = HEAP32[i12 + 76 >> 2] | 0;
 HEAP32[i6 + (i7 << 4) >> 2] = HEAP32[i1 >> 2];
 i8 = i1 + 4 | 0;
 HEAP32[i6 + (i7 << 4) + 4 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i6 + (i7 << 4) + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 switch (HEAP32[i8 >> 2] | 0) {
 case 1:
  {
   HEAP32[i6 + (i7 << 4) + 12 >> 2] = 0;
   if (((i9 | 0) != 0 ? (HEAP8[i9 >> 0] | 0) != 0 : 0) ? (HEAP32[i6 + (i7 << 4) + 12 >> 2] = _ft_mem_strdup(i13, i9, i14) | 0, (HEAP32[i14 >> 2] | 0) != 0) : 0) {
    i13 = HEAP32[i14 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   break;
  }
 case 2:
  {
   if ((i9 | 0) != 0 ? (i10 = HEAP8[i9 >> 0] | 0, i10 << 24 >> 24 != 0) : 0) {
    i1 = i10 << 24 >> 24 == 45 ? i9 + 1 | 0 : i9;
    i2 = HEAP8[i1 >> 0] | 0;
    L115 : do if (i2 << 24 >> 24 == 48) {
     switch (HEAP8[i1 + 1 >> 0] | 0) {
     case 88:
     case 120:
      break;
     default:
      {
       i5 = 10;
       i3 = i1;
       i2 = 48;
       i4 = 324442;
       break L115;
      }
     }
     i5 = 16;
     i3 = i1 + 2 | 0;
     i2 = HEAP8[i1 + 2 >> 0] | 0;
     i4 = 324410;
    } else {
     i5 = 10;
     i3 = i1;
     i4 = 324442;
    } while (0);
    i1 = i2 << 24 >> 24;
    if (!(HEAPU8[i4 + ((i2 & 255) >>> 3) >> 0] & 1 << (i1 & 7))) i1 = 0; else {
     i2 = i1;
     i1 = 0;
     do {
      i1 = Math_imul(i1, i5) | 0;
      i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
      i3 = i3 + 1 | 0;
      i8 = HEAP8[i3 >> 0] | 0;
      i2 = i8 << 24 >> 24;
     } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i8 & 255) >>> 3) >> 0] | 0) != 0);
    }
    i1 = i10 << 24 >> 24 == 45 ? 0 - i1 | 0 : i1;
   } else i1 = 0;
   HEAP32[i6 + (i7 << 4) + 12 >> 2] = i1;
   break;
  }
 case 3:
  {
   L125 : do if (i9) {
    i1 = HEAP8[i9 >> 0] | 0;
    L127 : do switch (i1 << 24 >> 24) {
    case 0:
     {
      i1 = 0;
      break L125;
     }
    case 48:
     {
      switch (HEAP8[i9 + 1 >> 0] | 0) {
      case 88:
      case 120:
       break;
      default:
       {
        i3 = i9;
        i5 = 10;
        i1 = 48;
        i4 = 324442;
        break L127;
       }
      }
      i3 = i9 + 2 | 0;
      i5 = 16;
      i1 = HEAP8[i9 + 2 >> 0] | 0;
      i4 = 324410;
      break;
     }
    default:
     {
      i3 = i9;
      i5 = 10;
      i4 = 324442;
     }
    } while (0);
    i2 = i1 << 24 >> 24;
    if (HEAPU8[i4 + ((i1 & 255) >>> 3) >> 0] & 1 << (i2 & 7)) {
     i1 = 0;
     do {
      i1 = Math_imul(i1, i5) | 0;
      i1 = (HEAPU8[324474 + i2 >> 0] | 0) + i1 | 0;
      i3 = i3 + 1 | 0;
      i10 = HEAP8[i3 >> 0] | 0;
      i2 = i10 << 24 >> 24;
     } while ((1 << (i2 & 7) & HEAPU8[i4 + ((i10 & 255) >>> 3) >> 0] | 0) != 0);
    } else i1 = 0;
   } else i1 = 0; while (0);
   HEAP32[i6 + (i7 << 4) + 12 >> 2] = i1;
   break;
  }
 default:
  {}
 }
 if ((_memcmp(i11, 324373, 7) | 0) != 0 ? (i13 = _hash_insert(HEAP32[i6 + (i7 << 4) >> 2] | 0, HEAP32[i12 + 76 >> 2] | 0, HEAP32[i12 + 128 >> 2] | 0, i13) | 0, HEAP32[i14 >> 2] = i13, (i13 | 0) != 0) : 0) {
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 HEAP32[i12 + 76 >> 2] = (HEAP32[i12 + 76 >> 2] | 0) + 1;
 if (!(_memcmp(i11, 324733, 12) | 0)) {
  HEAP32[i12 + 36 >> 2] = HEAP32[i6 + (i7 << 4) + 12 >> 2];
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!(_memcmp(i11, 324640, 11) | 0)) {
  HEAP32[i12 + 40 >> 2] = HEAP32[i6 + (i7 << 4) + 12 >> 2];
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!(_memcmp(i11, 324652, 12) | 0)) {
  HEAP32[i12 + 44 >> 2] = HEAP32[i6 + (i7 << 4) + 12 >> 2];
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (_memcmp(i11, 324203, 7) | 0) {
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i1 = HEAP32[i6 + (i7 << 4) + 12 >> 2] | 0;
 if (!i1) {
  HEAP32[i14 >> 2] = 3;
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 switch (HEAP8[i1 >> 0] | 0) {
 case 80:
 case 112:
  {
   HEAP32[i12 + 28 >> 2] = 8;
   i13 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 case 77:
 case 109:
  {
   HEAP32[i12 + 28 >> 2] = 16;
   i13 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 case 67:
 case 99:
  {
   HEAP32[i12 + 28 >> 2] = 32;
   i13 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 default:
  {
   i13 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 }
 return 0;
}
function _af_latin_hints_apply(i22, i23, i13) {
 i22 = i22 | 0;
 i23 = i23 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i24 = 0, i25 = 0;
 i1 = _af_glyph_hints_reload(i22, i23) | 0;
 if (i1) {
  i23 = i1;
  return i23 | 0;
 }
 i1 = HEAP32[i22 + 100 >> 2] | 0;
 do if (!(i1 & 1)) {
  i1 = _af_latin_hints_detect_features(i22, 0) | 0;
  if (!i1) {
   i1 = HEAP32[i22 + 100 >> 2] | 0;
   break;
  } else {
   i23 = i1;
   return i23 | 0;
  }
 } while (0);
 if (!(i1 & 2)) {
  i1 = _af_latin_hints_detect_features(i22, 1) | 0;
  if (i1) {
   i23 = i1;
   return i23 | 0;
  }
  i7 = HEAP32[i22 + 92 >> 2] | 0;
  i8 = HEAP32[i22 + 84 >> 2] | 0;
  i10 = HEAP32[i13 + 436 >> 2] | 0;
  if ((i8 | 0) > 0) {
   i11 = i7;
   do {
    i2 = _FT_MulFix(((HEAP32[i13 + 36 >> 2] | 0) >>> 0) / 40 | 0, i10) | 0;
    i5 = i11 + 13 | 0;
    i6 = i11 + 12 | 0;
    i9 = 0;
    i1 = 0;
    i2 = (i2 | 0) > 32 ? 32 : i2;
    do {
     i3 = i13 + 656 + (i9 * 28 | 0) | 0;
     i4 = HEAP32[i13 + 656 + (i9 * 28 | 0) + 24 >> 2] | 0;
     if ((i4 & 1 | 0) != 0 ? (i4 & 2 | 0) != 0 ^ (HEAP8[i5 >> 0] | 0) == (HEAP32[i22 + 96 >> 2] | 0) : 0) {
      i24 = (HEAP16[i11 >> 1] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
      i24 = _FT_MulFix((i24 | 0) < 0 ? 0 - i24 | 0 : i24, i10) | 0;
      i25 = (i24 | 0) < (i2 | 0);
      i2 = i25 ? i24 : i2;
      i1 = i25 ? i3 : i1;
      if ((i24 | 0) != 0 & (HEAP8[i6 >> 0] & 1) != 0 ? (i12 = HEAP16[i11 >> 1] | 0, (i4 & 2 | 0) != 0 ^ (i12 | 0) < (HEAP32[i3 >> 2] | 0)) : 0) {
       i24 = i13 + 656 + (i9 * 28 | 0) + 12 | 0;
       i25 = i12 - (HEAP32[i24 >> 2] | 0) | 0;
       i25 = _FT_MulFix((i25 | 0) < 0 ? 0 - i25 | 0 : i25, i10) | 0;
       i1 = (i25 | 0) < (i2 | 0) ? i24 : i1;
       i2 = (i25 | 0) < (i2 | 0) ? i25 : i2;
      }
     }
     i9 = i9 + 1 | 0;
    } while ((i9 | 0) != 6);
    if (i1) HEAP32[i11 + 20 >> 2] = i1;
    i11 = i11 + 48 | 0;
   } while (i11 >>> 0 < (i7 + (i8 * 48 | 0) | 0) >>> 0);
  }
 }
 i13 = 0;
 L31 : while (1) {
  switch (i13 | 0) {
  case 0:
   {
    if (HEAP32[i22 + 100 >> 2] & 1) {
     i13 = 1;
     continue L31;
    }
    i11 = HEAP32[i22 + 64 >> 2] | 0;
    i9 = HEAP32[i22 + 56 >> 2] | 0;
    i12 = i11;
    i11 = i11 + (i9 * 48 | 0) | 0;
    i1 = 0;
    i14 = 25;
    break;
   }
  case 1:
   {
    if (HEAP32[i22 + 100 >> 2] & 2) break L31;
    i8 = HEAP32[i22 + 92 >> 2] | 0;
    i9 = HEAP32[i22 + 84 >> 2] | 0;
    if ((i9 | 0) > 0) {
     i1 = 0;
     i7 = i8;
     do {
      i3 = HEAP8[i7 + 12 >> 0] | 0;
      do if (!(i3 & 4)) {
       i2 = HEAP32[i7 + 20 >> 2] | 0;
       i5 = HEAP32[i7 + 24 >> 2] | 0;
       if (!i2) {
        if (!i5) break;
        i2 = HEAP32[i5 + 20 >> 2] | 0;
        if (!i2) break;
        i3 = HEAP8[i5 + 12 >> 0] | 0;
        i6 = i5;
        i5 = i7;
       } else i6 = i7;
       i4 = HEAP32[i2 + 8 >> 2] | 0;
       HEAP32[i6 + 8 >> 2] = i4;
       i2 = i3 & 255 | 4;
       HEAP8[i6 + 12 >> 0] = i2;
       if ((i5 | 0) != 0 ? (HEAP32[i5 + 20 >> 2] | 0) == 0 : 0) {
        i25 = i5 + 12 | 0;
        i24 = HEAPU8[i25 >> 0] | 0;
        HEAP32[i5 + 8 >> 2] = (_af_latin_compute_stem_width(i22, 1, (HEAP32[i5 + 4 >> 2] | 0) - (HEAP32[i6 + 4 >> 2] | 0) | 0, i2, i24) | 0) + i4;
        HEAP8[i25 >> 0] = i24 | 4;
       }
       i1 = (i1 | 0) == 0 ? i7 : i1;
      } while (0);
      i7 = i7 + 48 | 0;
     } while (i7 >>> 0 < (i8 + (i9 * 48 | 0) | 0) >>> 0);
     i12 = i8;
     i11 = i8 + (i9 * 48 | 0) | 0;
     i14 = 25;
    } else i14 = 91;
    break;
   }
  default:
   {}
  }
  if ((i14 | 0) == 25) {
   i14 = 0;
   if ((i9 | 0) > 0) {
    i10 = i12;
    i2 = 0;
    do {
     i6 = i10 + 12 | 0;
     i7 = HEAPU8[i6 >> 0] | 0;
     do if (!(i7 & 4)) {
      i8 = HEAP32[i10 + 24 >> 2] | 0;
      if (!i8) {
       i2 = i2 + 1 | 0;
       break;
      }
      if (HEAP32[i8 + 20 >> 2] | 0) {
       i25 = HEAP32[i8 + 8 >> 2] | 0;
       HEAP32[i10 + 8 >> 2] = (_af_latin_compute_stem_width(i22, i13, (HEAP32[i10 + 4 >> 2] | 0) - (HEAP32[i8 + 4 >> 2] | 0) | 0, HEAPU8[i8 + 12 >> 0] | 0, i7) | 0) + i25;
       HEAP8[i6 >> 0] = i7 | 4;
       break;
      }
      if (!i1) {
       i4 = HEAP32[i10 + 4 >> 2] | 0;
       i5 = (HEAP32[i8 + 4 >> 2] | 0) - i4 | 0;
       i1 = _af_latin_compute_stem_width(i22, i13, i5, i7, HEAPU8[i8 + 12 >> 0] | 0) | 0;
       if ((i1 | 0) < 96) {
        i25 = ((i5 >> 1) + i4 + 32 & -64) - ((i1 | 0) < 65 ? 32 : 38) | 0;
        i3 = (i5 >> 1) + i4 + 32 & -64 | ((i1 | 0) < 65 ? 32 : 26);
        i3 = (((((i5 >> 1) + i4 - i25 | 0) < 0 ? 0 - ((i5 >> 1) + i4 - i25) | 0 : (i5 >> 1) + i4 - i25 | 0) | 0) < ((((i5 >> 1) + i4 - i3 | 0) < 0 ? 0 - ((i5 >> 1) + i4 - i3) | 0 : (i5 >> 1) + i4 - i3 | 0) | 0) ? i25 : i3) - ((i1 | 0) / 2 | 0) | 0;
        i25 = i10 + 8 | 0;
        HEAP32[i25 >> 2] = i3;
        HEAP32[i8 + 8 >> 2] = i3 + i1;
        i3 = i8 + 8 | 0;
        i1 = HEAP32[i25 >> 2] | 0;
       } else {
        HEAP32[i10 + 8 >> 2] = i4 + 32 & -64;
        i3 = i8 + 8 | 0;
        i1 = i4 + 32 & -64;
       }
       HEAP8[i6 >> 0] = i7 | 4;
       HEAP32[i3 >> 2] = (_af_latin_compute_stem_width(i22, i13, i5, i7 | 4, HEAPU8[i8 + 12 >> 0] | 0) | 0) + i1;
       i1 = i10;
       break;
      }
      i4 = HEAP32[i10 + 4 >> 2] | 0;
      i3 = i4 - (HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i1 + 8 >> 2] | 0) | 0;
      i4 = (HEAP32[i8 + 4 >> 2] | 0) - i4 | 0;
      i25 = HEAPU8[i8 + 12 >> 0] | 0;
      i5 = _af_latin_compute_stem_width(i22, i13, i4, i7, i25) | 0;
      do if (!(i25 & 4)) if ((i5 | 0) < 96) {
       i24 = ((i4 >> 1) + i3 + 32 & -64) - ((i5 | 0) < 65 ? 32 : 38) | 0;
       i25 = (i4 >> 1) + i3 + 32 & -64 | ((i5 | 0) < 65 ? 32 : 26);
       i25 = ((((i4 >> 1) + i3 - i24 | 0) < 0 ? 0 - ((i4 >> 1) + i3 - i24) | 0 : (i4 >> 1) + i3 - i24 | 0) | 0) < ((((i4 >> 1) + i3 - i25 | 0) < 0 ? 0 - ((i4 >> 1) + i3 - i25) | 0 : (i4 >> 1) + i3 - i25 | 0) | 0) ? i24 : i25;
       HEAP32[i10 + 8 >> 2] = i25 - ((i5 | 0) / 2 | 0);
       HEAP32[i8 + 8 >> 2] = ((i5 | 0) / 2 | 0) + i25;
       break;
      } else {
       i24 = (i3 + 32 & -64) + (i5 >> 1) - ((i4 >> 1) + i3) | 0;
       i25 = (i4 + 32 + i3 & -64) - i5 + ((i5 >> 1) - ((i4 >> 1) + i3)) | 0;
       i25 = (((i24 | 0) < 0 ? 0 - i24 | 0 : i24) | 0) < (((i25 | 0) < 0 ? 0 - i25 | 0 : i25) | 0) ? i3 + 32 & -64 : (i4 + 32 + i3 & -64) - i5 | 0;
       HEAP32[i10 + 8 >> 2] = i25;
       HEAP32[i8 + 8 >> 2] = i25 + i5;
       break;
      } else HEAP32[i10 + 8 >> 2] = (HEAP32[i8 + 8 >> 2] | 0) - i5; while (0);
      HEAP8[i6 >> 0] = i7 | 4;
      HEAP8[i8 + 12 >> 0] = HEAPU8[i8 + 12 >> 0] | 4;
      if (i10 >>> 0 > i12 >>> 0 ? (i15 = i10 + 8 | 0, i16 = HEAP32[i10 + -40 >> 2] | 0, (HEAP32[i15 >> 2] | 0) < (i16 | 0)) : 0) HEAP32[i15 >> 2] = i16;
     } while (0);
     i10 = i10 + 48 | 0;
    } while (i10 >>> 0 < i11 >>> 0);
    i7 = 0;
    i6 = i2;
   } else {
    i7 = 1;
    i6 = 0;
   }
   i4 = i9 * 48 | 0;
   L83 : do if (!i13) {
    switch (i4 | 0) {
    case 288:
     {
      i2 = 2;
      i5 = 4;
      i3 = i12;
      break;
     }
    case 576:
     {
      i2 = 5;
      i5 = 9;
      i3 = i12 + 48 | 0;
      break;
     }
    default:
     break L83;
    }
    i25 = HEAP32[i12 + (i2 * 48 | 0) + 4 >> 2] | 0;
    i25 = i25 - (HEAP32[i12 + (i5 * 48 | 0) + 4 >> 2] | 0) + (i25 - (HEAP32[i3 + 4 >> 2] | 0)) | 0;
    if ((((i25 | 0) < 0 ? 0 - i25 | 0 : i25) | 0) < 8) {
     i25 = i12 + (i5 * 48 | 0) + 8 | 0;
     i3 = (HEAP32[i12 + (i2 * 48 | 0) + 8 >> 2] << 1) - (HEAP32[i3 + 8 >> 2] | 0) | 0;
     i2 = (HEAP32[i25 >> 2] | 0) - i3 | 0;
     HEAP32[i25 >> 2] = i3;
     i3 = HEAP32[i12 + (i5 * 48 | 0) + 24 >> 2] | 0;
     if (i3) HEAP32[i3 + 8 >> 2] = (HEAP32[i3 + 8 >> 2] | 0) - i2;
     if ((i4 | 0) == 576) {
      i25 = i12 + 392 | 0;
      HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) - i2;
      i25 = i12 + 536 | 0;
      HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) - i2;
     }
     i25 = i12 + (i5 * 48 | 0) + 12 | 0;
     HEAP8[i25 >> 0] = HEAPU8[i25 >> 0] | 4;
     if (i3) HEAP8[i3 + 12 >> 0] = HEAPU8[i3 + 12 >> 0] | 4;
    }
   } while (0);
   if ((i1 | 0) != 0 & (i6 | 0) == 0 | i7) i14 = 91; else {
    i2 = i12;
    do {
     i8 = i2 + 12 | 0;
     i9 = HEAP8[i8 >> 0] | 0;
     if (!(i9 & 4)) {
      i3 = HEAP32[i2 + 28 >> 2] | 0;
      if ((i3 | 0) != 0 ? (i17 = HEAP32[i3 + 4 >> 2] | 0, i18 = HEAP32[i2 + 4 >> 2] | 0, (((i17 - i18 | 0) < 0 ? 0 - (i17 - i18) | 0 : i17 - i18 | 0) | 0) < 80) : 0) {
       i4 = (HEAP32[i3 + 8 >> 2] | 0) - i17 + i18 | 0;
       HEAP32[i2 + 8 >> 2] = i4;
       i3 = i9;
      } else i14 = 71;
      do if ((i14 | 0) == 71) {
       i14 = 0;
       if (!i1) {
        i4 = (HEAP32[i2 + 4 >> 2] | 0) + 32 & -64;
        HEAP32[i2 + 8 >> 2] = i4;
        i3 = i9;
        i1 = i2;
        break;
       } else i4 = i2;
       while (1) {
        i3 = i4 + -48 | 0;
        if (i3 >>> 0 < i12 >>> 0) {
         i7 = 0;
         break;
        }
        if (!(HEAP8[i4 + -36 >> 0] & 4)) i4 = i3; else {
         i7 = 1;
         break;
        }
       }
       i6 = i2;
       while (1) {
        i5 = i6 + 48 | 0;
        if (i5 >>> 0 >= i11 >>> 0) break;
        if (!(HEAP8[i6 + 60 >> 0] & 4)) i6 = i5; else {
         i21 = i6;
         i14 = 78;
         break;
        }
       }
       if ((i14 | 0) == 78 ? (i14 = 0, i3 >>> 0 < i2 >>> 0 & i7 & i5 >>> 0 > i2 >>> 0) : 0) {
        i3 = HEAP32[i21 + 52 >> 2] | 0;
        i5 = HEAP32[i4 + -44 >> 2] | 0;
        i4 = HEAP32[i4 + -40 >> 2] | 0;
        if ((i3 | 0) == (i5 | 0)) {
         HEAP32[i2 + 8 >> 2] = i4;
         i3 = i9;
         break;
        } else {
         i4 = (_FT_MulDiv((HEAP32[i2 + 4 >> 2] | 0) - i5 | 0, (HEAP32[i21 + 56 >> 2] | 0) - i4 | 0, i3 - i5 | 0) | 0) + i4 | 0;
         HEAP32[i2 + 8 >> 2] = i4;
         i3 = HEAP8[i8 >> 0] | 0;
         break;
        }
       }
       i4 = ((HEAP32[i2 + 4 >> 2] | 0) + 16 - (HEAP32[i1 + 4 >> 2] | 0) & -32) + (HEAP32[i1 + 8 >> 2] | 0) | 0;
       HEAP32[i2 + 8 >> 2] = i4;
       i3 = i9;
      } while (0);
      HEAP8[i8 >> 0] = i3 & 255 | 4;
      if (i2 >>> 0 > i12 >>> 0 ? (i19 = HEAP32[i2 + -40 >> 2] | 0, (i4 | 0) < (i19 | 0)) : 0) {
       HEAP32[i2 + 8 >> 2] = i19;
       i4 = i19;
      }
      i3 = i2 + 48 | 0;
      if ((i3 >>> 0 < i11 >>> 0 ? (HEAP8[i2 + 60 >> 0] & 4) != 0 : 0) ? (i20 = HEAP32[i2 + 56 >> 2] | 0, (i4 | 0) > (i20 | 0)) : 0) {
       HEAP32[i2 + 8 >> 2] = i20;
       i2 = i3;
      } else i2 = i3;
     } else i2 = i2 + 48 | 0;
    } while (i2 >>> 0 < i11 >>> 0);
    i14 = 91;
   }
  }
  if ((i14 | 0) == 91) {
   i14 = 0;
   i5 = HEAP32[i22 + 44 + (i13 * 28 | 0) + 8 >> 2] | 0;
   i6 = HEAP32[i22 + 44 + (i13 * 28 | 0) >> 2] | 0;
   if (!i13) {
    if ((i6 | 0) > 0) {
     i4 = i5;
     do {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if (i1) {
       i3 = HEAP32[i4 + 44 >> 2] | 0;
       i2 = HEAP32[i1 + 8 >> 2] | 0;
       i1 = i4 + 40 | 0;
       while (1) {
        i1 = HEAP32[i1 >> 2] | 0;
        HEAP32[i1 + 16 >> 2] = i2;
        HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | 64;
        if ((i1 | 0) == (i3 | 0)) break; else i1 = i1 + 32 | 0;
       }
      }
      i4 = i4 + 48 | 0;
     } while (i4 >>> 0 < (i5 + (i6 * 48 | 0) | 0) >>> 0);
    }
   } else if ((i6 | 0) > 0) {
    i4 = i5;
    do {
     i1 = HEAP32[i4 + 12 >> 2] | 0;
     if (i1) {
      i3 = HEAP32[i4 + 44 >> 2] | 0;
      i2 = HEAP32[i1 + 8 >> 2] | 0;
      i1 = i4 + 40 | 0;
      while (1) {
       i1 = HEAP32[i1 >> 2] | 0;
       HEAP32[i1 + 20 >> 2] = i2;
       HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | 128;
       if ((i1 | 0) == (i3 | 0)) break; else i1 = i1 + 32 | 0;
      }
     }
     i4 = i4 + 48 | 0;
    } while (i4 >>> 0 < (i5 + (i6 * 48 | 0) | 0) >>> 0);
   }
   _af_glyph_hints_align_strong_points(i22, i13);
   _af_glyph_hints_align_weak_points(i22, i13);
  }
  i13 = i13 + 1 | 0;
  if ((i13 | 0) == 2) break;
 }
 i6 = HEAP32[i22 + 24 >> 2] | 0;
 i3 = HEAP32[i22 + 28 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  i25 = 0;
  return i25 | 0;
 }
 i4 = i3;
 i5 = HEAP32[i23 + 8 >> 2] | 0;
 i2 = HEAP32[i23 + 4 >> 2] | 0;
 while (1) {
  HEAP32[i2 >> 2] = HEAP32[i4 + 16 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 20 >> 2];
  i1 = HEAPU16[i4 >> 1] | 0;
  do if (!(i1 & 1)) if (!(i1 & 2)) {
   HEAP8[i5 >> 0] = 1;
   break;
  } else {
   HEAP8[i5 >> 0] = 2;
   break;
  } else HEAP8[i5 >> 0] = 0; while (0);
  i4 = i4 + 40 | 0;
  if (i4 >>> 0 >= (i3 + (i6 * 40 | 0) | 0) >>> 0) {
   i1 = 0;
   break;
  } else {
   i5 = i5 + 1 | 0;
   i2 = i2 + 8 | 0;
  }
 }
 return i1 | 0;
}

function _af_latin_metrics_init(i22, i21) {
 i22 = i22 | 0;
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0, i25 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 i20 = HEAP32[i21 + 92 >> 2] | 0;
 HEAP32[i22 + 36 >> 2] = HEAPU16[i21 + 68 >> 1];
 if ((((_FT_Select_Charmap(i21, 1970170211) | 0) != 0 ? (_FT_Select_Charmap(i21, 1634889070) | 0) != 0 : 0) ? (_FT_Select_Charmap(i21, 1094995778) | 0) != 0 : 0) ? (_FT_Select_Charmap(i21, 1818326065) | 0) != 0 : 0) {
  _FT_Set_Charmap(i21, i20) | 0;
  STACKTOP = i23;
  return 0;
 }
 i1 = HEAP32[i21 + 100 >> 2] | 0;
 i2 = i23 + 832 | 0;
 i3 = i2 + 120 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i23 + 832 >> 2] = i1;
 HEAP32[i22 + 48 >> 2] = 0;
 HEAP32[i22 + 444 >> 2] = 0;
 i1 = _FT_Get_Char_Index(i21, 111) | 0;
 if (((((i1 | 0) != 0 ? (_FT_Load_Glyph(i21, i1, 1) | 0) == 0 : 0) ? (i4 = HEAP32[i21 + 84 >> 2] | 0, (HEAP16[i4 + 110 >> 1] | 0) >= 1) : 0) ? (_memset(i23 | 0, 0, 832) | 0, HEAP32[i23 + 36 >> 2] = HEAP32[i22 + 36 >> 2], HEAP32[i23 + 8 >> 2] = 65536, HEAP32[i23 + 12 >> 2] = 65536, HEAP32[i23 + 16 >> 2] = 0, HEAP32[i23 + 20 >> 2] = 0, HEAP32[i23 + 4 >> 2] = i21, HEAP32[i23 + 24 >> 2] = 0, HEAP32[i23 + 28 >> 2] = 0, HEAP32[i23 + 832 + 108 >> 2] = i23, HEAP32[i23 + 832 + 100 >> 2] = 0, (_af_glyph_hints_reload(i23 + 832 | 0, i4 + 108 | 0) | 0) == 0) : 0) ? (_af_latin_hints_compute_segments(i23 + 832 | 0, 0) | 0) == 0 : 0) {
  _af_latin_hints_link_segments(i23 + 832 | 0, 0);
  i3 = HEAP32[i23 + 832 + 52 >> 2] | 0;
  i4 = HEAP32[i23 + 832 + 44 >> 2] | 0;
  if ((i4 | 0) > 0) {
   i1 = 0;
   i5 = i3;
   do {
    i2 = HEAP32[i5 + 20 >> 2] | 0;
    if (((i2 | 0) != 0 ? (i2 >>> 0 > i5 >>> 0 ? (HEAP32[i2 + 20 >> 2] | 0) == (i5 | 0) : 0) : 0) ? (i6 = (HEAP16[i5 + 2 >> 1] | 0) - (HEAP16[i2 + 2 >> 1] | 0) | 0, i1 >>> 0 < 16) : 0) {
     HEAP32[i22 + 52 + (i1 * 12 | 0) >> 2] = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
     i1 = i1 + 1 | 0;
    }
    i5 = i5 + 48 | 0;
   } while (i5 >>> 0 < (i3 + (i4 * 48 | 0) | 0) >>> 0);
   if (i1 >>> 0 > 1) {
    i4 = 1;
    do {
     i5 = i4;
     do {
      i2 = i22 + 52 + (i5 * 12 | 0) | 0;
      i5 = i5 + -1 | 0;
      i3 = i22 + 52 + (i5 * 12 | 0) | 0;
      if ((HEAP32[i2 >> 2] | 0) > (HEAP32[i3 >> 2] | 0)) break;
      HEAP32[i23 + 952 >> 2] = HEAP32[i2 >> 2];
      HEAP32[i23 + 952 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
      HEAP32[i23 + 952 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
      HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
      HEAP32[i3 >> 2] = HEAP32[i23 + 952 >> 2];
      HEAP32[i3 + 4 >> 2] = HEAP32[i23 + 952 + 4 >> 2];
      HEAP32[i3 + 8 >> 2] = HEAP32[i23 + 952 + 8 >> 2];
     } while ((i5 | 0) != 0);
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i1 | 0));
   }
  } else i1 = 0;
  HEAP32[i22 + 48 >> 2] = i1;
  if (!(_af_latin_hints_compute_segments(i23 + 832 | 0, 1) | 0)) {
   _af_latin_hints_link_segments(i23 + 832 | 0, 1);
   i3 = HEAP32[i23 + 832 + 80 >> 2] | 0;
   i4 = HEAP32[i23 + 832 + 72 >> 2] | 0;
   if ((i4 | 0) > 0) {
    i1 = 0;
    i5 = i3;
    do {
     i2 = HEAP32[i5 + 20 >> 2] | 0;
     if (((i2 | 0) != 0 ? (i2 >>> 0 > i5 >>> 0 ? (HEAP32[i2 + 20 >> 2] | 0) == (i5 | 0) : 0) : 0) ? (i9 = (HEAP16[i5 + 2 >> 1] | 0) - (HEAP16[i2 + 2 >> 1] | 0) | 0, i1 >>> 0 < 16) : 0) {
      HEAP32[i22 + 448 + (i1 * 12 | 0) >> 2] = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
      i1 = i1 + 1 | 0;
     }
     i5 = i5 + 48 | 0;
    } while (i5 >>> 0 < (i3 + (i4 * 48 | 0) | 0) >>> 0);
    if (i1 >>> 0 > 1) {
     i4 = 1;
     do {
      i5 = i4;
      do {
       i2 = i22 + 448 + (i5 * 12 | 0) | 0;
       i5 = i5 + -1 | 0;
       i3 = i22 + 448 + (i5 * 12 | 0) | 0;
       if ((HEAP32[i2 >> 2] | 0) > (HEAP32[i3 >> 2] | 0)) break;
       HEAP32[i23 + 952 >> 2] = HEAP32[i2 >> 2];
       HEAP32[i23 + 952 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
       HEAP32[i23 + 952 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
       HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
       HEAP32[i3 >> 2] = HEAP32[i23 + 952 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i23 + 952 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i23 + 952 + 8 >> 2];
      } while ((i5 | 0) != 0);
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i1 | 0));
    }
   } else i1 = 0;
   HEAP32[i22 + 444 >> 2] = i1;
  }
 }
 if (!(HEAP32[i22 + 48 >> 2] | 0)) i1 = ((HEAP32[i22 + 36 >> 2] | 0) * 50 | 0) / 2048 | 0; else i1 = HEAP32[i22 + 52 >> 2] | 0;
 HEAP32[i22 + 244 >> 2] = (i1 | 0) / 5 | 0;
 HEAP32[i22 + 248 >> 2] = i1;
 HEAP8[i22 + 252 >> 0] = 0;
 if (!(HEAP32[i22 + 444 >> 2] | 0)) i1 = ((HEAP32[i22 + 36 >> 2] | 0) * 50 | 0) / 2048 | 0; else i1 = HEAP32[i22 + 448 >> 2] | 0;
 HEAP32[i22 + 640 >> 2] = (i1 | 0) / 5 | 0;
 HEAP32[i22 + 644 >> 2] = i1;
 HEAP8[i22 + 648 >> 0] = 0;
 i1 = HEAP32[i23 + 832 >> 2] | 0;
 if (i1) {
  HEAP32[i23 + 832 + 44 >> 2] = 0;
  HEAP32[i23 + 832 + 48 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i23 + 832 + 52 >> 2] | 0);
  HEAP32[i23 + 832 + 52 >> 2] = 0;
  HEAP32[i23 + 832 + 56 >> 2] = 0;
  HEAP32[i23 + 832 + 60 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i23 + 832 + 64 >> 2] | 0);
  HEAP32[i23 + 832 + 64 >> 2] = 0;
  HEAP32[i23 + 832 + 72 >> 2] = 0;
  HEAP32[i23 + 832 + 76 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i23 + 832 + 80 >> 2] | 0);
  HEAP32[i23 + 832 + 80 >> 2] = 0;
  HEAP32[i23 + 832 + 84 >> 2] = 0;
  HEAP32[i23 + 832 + 88 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i23 + 832 + 92 >> 2] | 0);
  HEAP32[i23 + 832 + 92 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i23 + 832 + 40 >> 2] | 0);
  HEAP32[i23 + 832 + 40 >> 2] = 0;
  HEAP32[i23 + 832 + 32 >> 2] = 0;
  HEAP32[i23 + 832 + 36 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i23 + 832 + 28 >> 2] | 0);
  HEAP32[i23 + 832 + 28 >> 2] = 0;
  HEAP32[i23 + 832 + 24 >> 2] = 0;
  HEAP32[i23 + 832 + 20 >> 2] = 0;
  HEAP32[i23 + 832 >> 2] = 0;
 }
 i17 = HEAP32[i21 + 84 >> 2] | 0;
 i19 = 0;
 while (1) {
  i15 = 325906 + (i19 * 13 | 0) + 12 | 0;
  i18 = (i19 | 0) == 3;
  i14 = 0;
  i2 = 0;
  i16 = 325906 + (i19 * 13 | 0) | 0;
  while (1) {
   i1 = HEAP8[i16 >> 0] | 0;
   if (!(i1 << 24 >> 24)) {
    i1 = i14;
    i10 = i2;
    break;
   }
   i1 = _FT_Get_Char_Index(i21, i1 << 24 >> 24) | 0;
   L65 : do if (((i1 | 0) != 0 ? (_FT_Load_Glyph(i21, i1, 1) | 0) == 0 : 0) ? (HEAP16[i17 + 110 >> 1] | 0) >= 1 : 0) {
    i13 = HEAP32[i17 + 112 >> 2] | 0;
    i11 = HEAP16[i17 + 108 >> 1] | 0;
    do if (i11 << 16 >> 16 > 0) {
     i12 = HEAP32[i17 + 120 >> 2] | 0;
     if (i18) {
      i9 = 0;
      i7 = 0;
      i6 = -1;
      i1 = 0;
      i5 = 0;
      i10 = 0;
      while (1) {
       i8 = HEAP16[i12 + (i10 << 1) >> 1] | 0;
       if ((i8 | 0) > (i5 | 0)) {
        if ((i5 | 0) > (i8 | 0)) i3 = i6; else {
         i3 = i6;
         i4 = i5;
         while (1) {
          i24 = HEAP32[i13 + (i4 << 3) + 4 >> 2] | 0;
          i25 = (i3 | 0) < 0 | (i24 | 0) > (i1 | 0);
          i3 = i25 ? i4 : i3;
          i1 = i25 ? i24 : i1;
          if ((i4 | 0) < (i8 | 0)) i4 = i4 + 1 | 0; else break;
         }
        }
        i6 = (i3 | 0) == (i6 | 0);
        i9 = i6 ? i9 : i5;
        i7 = i6 ? i7 : i8;
        i6 = i3;
       }
       i10 = i10 + 1 | 0;
       if ((i10 | 0) == (i11 << 16 >> 16 | 0)) break; else i5 = i8 + 1 | 0;
      }
     } else {
      i9 = 0;
      i7 = 0;
      i6 = -1;
      i1 = 0;
      i5 = 0;
      i10 = 0;
      while (1) {
       i8 = HEAP16[i12 + (i10 << 1) >> 1] | 0;
       if ((i8 | 0) > (i5 | 0)) {
        L85 : do switch (i19 | 0) {
        case 0:
        case 2:
        case 3:
         {
          if ((i5 | 0) > (i8 | 0)) {
           i3 = i6;
           break L85;
          } else {
           i3 = i6;
           i4 = i5;
          }
          while (1) {
           i25 = HEAP32[i13 + (i4 << 3) + 4 >> 2] | 0;
           i24 = (i3 | 0) < 0 | (i25 | 0) > (i1 | 0);
           i3 = i24 ? i4 : i3;
           i1 = i24 ? i25 : i1;
           if ((i4 | 0) < (i8 | 0)) i4 = i4 + 1 | 0; else break;
          }
          break;
         }
        default:
         {
          if ((i5 | 0) > (i8 | 0)) {
           i3 = i6;
           break L85;
          } else {
           i3 = i6;
           i4 = i5;
          }
          while (1) {
           i25 = HEAP32[i13 + (i4 << 3) + 4 >> 2] | 0;
           i24 = (i3 | 0) < 0 | (i25 | 0) < (i1 | 0);
           i3 = i24 ? i4 : i3;
           i1 = i24 ? i25 : i1;
           if ((i4 | 0) < (i8 | 0)) i4 = i4 + 1 | 0; else break;
          }
         }
        } while (0);
        i6 = (i3 | 0) == (i6 | 0);
        i9 = i6 ? i9 : i5;
        i7 = i6 ? i7 : i8;
        i6 = i3;
       }
       i10 = i10 + 1 | 0;
       if ((i10 | 0) == (i11 << 16 >> 16 | 0)) break; else i5 = i8 + 1 | 0;
      }
     }
     if ((i6 | 0) > -1) {
      i5 = 5 - i1 | 0;
      i3 = i6;
      do i3 = (i3 | 0) > (i9 | 0) ? i3 + -1 | 0 : i7; while (!((i3 | 0) == (i6 | 0) ? 1 : ((HEAP32[i13 + (i3 << 3) + 4 >> 2] | 0) + i5 | 0) >>> 0 > 10));
      i4 = i6;
      do i4 = (i4 | 0) < (i7 | 0) ? i4 + 1 | 0 : i9; while (!((i4 | 0) == (i6 | 0) ? 1 : ((HEAP32[i13 + (i4 << 3) + 4 >> 2] | 0) + i5 | 0) >>> 0 > 10));
      i25 = HEAP32[i17 + 116 >> 2] | 0;
      if ((HEAP8[i25 + i3 >> 0] & 3) == 1 ? (HEAP8[i25 + i4 >> 0] & 3) == 1 : 0) break;
      HEAP32[i23 + 832 + (i2 << 2) >> 2] = i1;
      i1 = i14;
      i2 = i2 + 1 | 0;
      break L65;
     }
    } else i1 = 0; while (0);
    HEAP32[i23 + 952 + (i14 << 2) >> 2] = i1;
    i1 = i14 + 1 | 0;
   } else i1 = i14; while (0);
   i16 = i16 + 1 | 0;
   if (i16 >>> 0 >= i15 >>> 0) {
    i10 = i2;
    break;
   } else i14 = i1;
  }
  i9 = (i10 | 0) == 0;
  if (i10 | i1) {
   i8 = (i1 | 0) == 0;
   if (i10 >>> 0 > 1) {
    i5 = 1;
    do {
     i2 = HEAP32[i23 + 832 + (i5 << 2) >> 2] | 0;
     i6 = i5;
     do {
      i7 = i6;
      i6 = i6 + -1 | 0;
      i3 = i23 + 832 + (i6 << 2) | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if ((i2 | 0) > (i4 | 0)) break;
      HEAP32[i23 + 832 + (i7 << 2) >> 2] = i4;
      HEAP32[i3 >> 2] = i2;
     } while ((i6 | 0) != 0);
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != (i10 | 0));
   }
   if (i1 >>> 0 > 1) {
    i5 = 1;
    do {
     i2 = HEAP32[i23 + 952 + (i5 << 2) >> 2] | 0;
     i6 = i5;
     do {
      i7 = i6;
      i6 = i6 + -1 | 0;
      i3 = i23 + 952 + (i6 << 2) | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if ((i2 | 0) > (i4 | 0)) break;
      HEAP32[i23 + 952 + (i7 << 2) >> 2] = i4;
      HEAP32[i3 >> 2] = i2;
     } while ((i6 | 0) != 0);
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != (i1 | 0));
   }
   i3 = HEAP32[i22 + 652 >> 2] | 0;
   HEAP32[i22 + 652 >> 2] = i3 + 1;
   do if (!i8) {
    i2 = HEAP32[i23 + 952 + (((i1 | 0) / 2 | 0) << 2) >> 2] | 0;
    if (i9) {
     HEAP32[i22 + 656 + (i3 * 28 | 0) + 12 >> 2] = i2;
     HEAP32[i22 + 656 + (i3 * 28 | 0) >> 2] = i2;
     break;
    }
    HEAP32[i22 + 656 + (i3 * 28 | 0) >> 2] = i2;
    i1 = HEAP32[i23 + 832 + (((i10 | 0) / 2 | 0) << 2) >> 2] | 0;
    HEAP32[i22 + 656 + (i3 * 28 | 0) + 12 >> 2] = i1;
    if ((i1 | 0) != (i2 | 0) ? (i18 | (i19 & -3 | 0) == 0) ^ (i1 | 0) > (i2 | 0) : 0) {
     HEAP32[i22 + 656 + (i3 * 28 | 0) + 12 >> 2] = (i1 + i2 | 0) / 2 | 0;
     HEAP32[i22 + 656 + (i3 * 28 | 0) >> 2] = (i1 + i2 | 0) / 2 | 0;
    }
   } else {
    i25 = HEAP32[i23 + 832 + (((i10 | 0) / 2 | 0) << 2) >> 2] | 0;
    HEAP32[i22 + 656 + (i3 * 28 | 0) + 12 >> 2] = i25;
    HEAP32[i22 + 656 + (i3 * 28 | 0) >> 2] = i25;
   } while (0);
   switch (i19 | 0) {
   case 0:
   case 2:
   case 3:
    {
     i1 = 2;
     break;
    }
   default:
    i1 = 0;
   }
   HEAP32[i22 + 656 + (i3 * 28 | 0) + 24 >> 2] = i1;
   if (i18) {
    HEAP32[i22 + 656 + (i3 * 28 | 0) + 24 >> 2] = i1 | 4;
    i19 = 4;
    continue;
   }
  }
  i19 = i19 + 1 | 0;
  if ((i19 | 0) == 6) break;
 }
 i4 = 48;
 i3 = 0;
 i2 = 0;
 while (1) {
  i1 = _FT_Get_Char_Index(i21, i4) | 0;
  if ((i1 | 0) != 0 ? (_FT_Get_Advance(i21, i1, 2051, i23 + 952 | 0) | 0) == 0 : 0) {
   i1 = HEAP32[i23 + 952 >> 2] | 0;
   if (i2 << 24 >> 24) if ((i1 | 0) == (i3 | 0)) i1 = i3; else {
    i1 = 0;
    break;
   } else i2 = 1;
  } else i1 = i3;
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 >= 58) {
   i1 = 1;
   break;
  } else i3 = i1;
 }
 HEAP8[i22 + 32 >> 0] = i1;
 _FT_Set_Charmap(i21, i20) | 0;
 STACKTOP = i23;
 return 0;
}

function __ZN7Texture9CreateNewEiiii11TextureType13TextureFormat13ResourceUsagemPKhjPKc(i17, i13, i16, i11, i9, i12, i14, i10, i15, i8, i2, i1, i18) {
 i17 = i17 | 0;
 i13 = i13 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i15 = i15 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i19 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 __ZN7Texture6DeinitEv(i13);
 if (!i2) if ((i15 & -2 | 0) == 4) {
  __ZN7Texture16CreateMainMemoryEiiii11TextureType13TextureFormatPK5ImageiPKc(i17, i13, i16, i11, i9, i12, i14, i10, 0, 0, i18);
  STACKTOP = i21;
  return;
 } else {
  __ZN7Texture9CreateGPUEiiii11TextureType13TextureFormat13ResourceUsagemPK5ImageiPKc(i17, i13, i16, i11, i9, i12, i14, i10, i15, i8, 0, 0, i18);
  STACKTOP = i21;
  return;
 }
 HEAP32[i21 + 72 >> 2] = 0;
 i20 = i21 + 72 + 4 | 0;
 HEAP32[i20 >> 2] = 0;
 HEAP32[i21 + 72 + 8 >> 2] = 0;
 __ZNSt3__16vectorI5ImageNS_9allocatorIS1_EEE7reserveEj(i21 + 72 | 0, i12);
 L9 : do if ((i12 | 0) > 0) {
  i7 = 0;
  i6 = i2;
  while (1) {
   i4 = i16 >> i7;
   i4 = (i4 | 0) > 1 ? i4 : 1;
   i5 = i11 >> i7;
   i5 = (i5 | 0) > 1 ? i5 : 1;
   L13 : do if ((i10 | 0) >= 59) {
    L19 : do if ((i10 | 0) >= 88) {
     if ((i10 | 0) >= 1048578) {
      if ((i10 | 0) < 4194324) switch (i10 | 0) {
      case 1048582:
       {
        i19 = 9;
        break L13;
       }
      case 1048583:
      case 1048579:
      case 1048578:
      case 1048580:
       {
        i19 = 11;
        break L13;
       }
      case 1048584:
      case 1048581:
       {
        i19 = 12;
        break L19;
       }
      default:
       {
        i19 = 14;
        break L13;
       }
      }
      switch (i10 | 0) {
      case 4194339:
      case 4194337:
       {
        i19 = 9;
        break L13;
       }
      case 4194334:
      case 4194333:
       {
        i19 = 11;
        break L13;
       }
      case 4194356:
      case 4194354:
      case 4194331:
       {
        i19 = 12;
        break L19;
       }
      case 4194324:
       break;
      default:
       {
        i19 = 14;
        break L13;
       }
      }
      i2 = 24;
      i19 = 15;
      break L13;
     }
     if ((i10 | 0) < 95) switch (i10 | 0) {
     case 93:
     case 92:
     case 91:
     case 90:
     case 89:
     case 88:
      {
       i19 = 9;
       break L13;
      }
     case 94:
      {
       i19 = 6;
       break L19;
      }
     default:
      {
       i19 = 14;
       break L13;
      }
     }
     if ((i10 | 0) < 99) switch (i10 | 0) {
     case 98:
     case 97:
     case 96:
     case 95:
      {
       i19 = 6;
       break L19;
      }
     default:
      {
       i19 = 14;
       break L13;
      }
     }
     if ((i10 | 0) < 1048576) switch (i10 | 0) {
     case 115:
      {
       i19 = 11;
       break L13;
      }
     case 99:
      {
       i19 = 6;
       break L19;
      }
     default:
      {
       i19 = 14;
       break L13;
      }
     } else switch (i10 | 0) {
     case 1048577:
      {
       i19 = 11;
       break L13;
      }
     case 1048576:
      {
       i19 = 5;
       break L19;
      }
     default:
      {
       i19 = 14;
       break L13;
      }
     }
    } else {
     switch (i10 | 0) {
     case 87:
     case 69:
     case 68:
     case 67:
      {
       i19 = 9;
       break L13;
      }
     case 86:
     case 85:
     case 59:
      {
       i19 = 11;
       break L13;
      }
     case 72:
     case 71:
     case 70:
      {
       i19 = 5;
       break L19;
      }
     case 84:
     case 83:
     case 82:
     case 81:
     case 80:
     case 79:
     case 78:
     case 77:
     case 76:
     case 75:
     case 74:
     case 73:
      {
       i19 = 6;
       break L19;
      }
     case 65:
     case 64:
     case 63:
     case 62:
     case 61:
     case 60:
      {
       i19 = 12;
       break L19;
      }
     case 66:
      break;
     default:
      {
       i19 = 14;
       break L13;
      }
     }
     i2 = 1;
     i19 = 15;
     break L13;
    } while (0);
    if ((i19 | 0) == 5) {
     i2 = Math_imul(((i4 + 3 | 0) / 4 | 0) << 3, (i5 + 3 | 0) / 4 | 0) | 0;
     i19 = 16;
     break;
    } else if ((i19 | 0) == 6) {
     i2 = Math_imul(((i4 + 3 | 0) / 4 | 0) << 4, (i5 + 3 | 0) / 4 | 0) | 0;
     i19 = 16;
     break;
    } else if ((i19 | 0) == 12) {
     i2 = 8;
     i19 = 15;
     break;
    }
   } else switch (i10 | 0) {
   case 0:
    {
     i2 = 0;
     i3 = 0;
     break L13;
    }
   case 4:
   case 3:
   case 2:
   case 1:
    {
     i2 = 128;
     i19 = 15;
     break L13;
    }
   case 47:
   case 46:
   case 45:
   case 44:
   case 43:
   case 42:
   case 41:
   case 40:
   case 39:
   case 38:
   case 37:
   case 36:
   case 35:
   case 34:
   case 33:
   case 32:
   case 31:
   case 30:
   case 29:
   case 28:
   case 27:
   case 26:
   case 25:
   case 24:
   case 23:
    {
     i19 = 9;
     break L13;
    }
   case 58:
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
    {
     i19 = 11;
     break L13;
    }
   case 8:
   case 7:
   case 6:
   case 5:
    {
     i2 = 96;
     i19 = 15;
     break L13;
    }
   case 22:
   case 21:
   case 20:
   case 19:
   case 18:
   case 17:
   case 16:
   case 15:
   case 14:
   case 13:
   case 12:
   case 11:
   case 10:
   case 9:
    {
     i2 = 64;
     i19 = 15;
     break L13;
    }
   default:
    {
     i19 = 14;
     break L13;
    }
   } while (0);
   if ((i19 | 0) == 9) {
    i2 = 32;
    i19 = 15;
   } else if ((i19 | 0) == 11) {
    i2 = 16;
    i19 = 15;
   } else if ((i19 | 0) == 14) {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i21);
    i2 = 0;
    i19 = 15;
   }
   if ((i19 | 0) == 15) {
    i2 = ((Math_imul(Math_imul(i5, i4) | 0, i2) | 0) + 7 | 0) / 8 | 0;
    i19 = 16;
   }
   L49 : do if ((i19 | 0) == 16) {
    i19 = 0;
    L51 : do if ((i10 | 0) >= 59) {
     L57 : do if ((i10 | 0) >= 88) {
      if ((i10 | 0) >= 1048578) {
       if ((i10 | 0) < 4194324) switch (i10 | 0) {
       case 1048582:
        {
         i19 = 21;
         break L51;
        }
       case 1048583:
       case 1048579:
       case 1048578:
       case 1048580:
        {
         i19 = 23;
         break L51;
        }
       case 1048584:
       case 1048581:
        {
         i19 = 24;
         break L57;
        }
       default:
        {
         i19 = 26;
         break L51;
        }
       }
       switch (i10 | 0) {
       case 4194339:
       case 4194337:
        {
         i19 = 21;
         break L51;
        }
       case 4194334:
       case 4194333:
        {
         i19 = 23;
         break L51;
        }
       case 4194356:
       case 4194354:
       case 4194331:
        {
         i19 = 24;
         break L57;
        }
       case 4194324:
        break;
       default:
        {
         i19 = 26;
         break L51;
        }
       }
       i3 = 24;
       break L51;
      }
      if ((i10 | 0) < 95) switch (i10 | 0) {
      case 93:
      case 92:
      case 91:
      case 90:
      case 89:
      case 88:
       {
        i19 = 21;
        break L51;
       }
      case 94:
       {
        i19 = 18;
        break L57;
       }
      default:
       {
        i19 = 26;
        break L51;
       }
      }
      if ((i10 | 0) < 99) switch (i10 | 0) {
      case 98:
      case 97:
      case 96:
      case 95:
       {
        i19 = 18;
        break L57;
       }
      default:
       {
        i19 = 26;
        break L51;
       }
      }
      if ((i10 | 0) < 1048576) switch (i10 | 0) {
      case 115:
       {
        i19 = 23;
        break L51;
       }
      case 99:
       {
        i19 = 18;
        break L57;
       }
      default:
       {
        i19 = 26;
        break L51;
       }
      } else switch (i10 | 0) {
      case 1048577:
       {
        i19 = 23;
        break L51;
       }
      case 1048576:
       {
        i19 = 17;
        break L57;
       }
      default:
       {
        i19 = 26;
        break L51;
       }
      }
     } else {
      switch (i10 | 0) {
      case 87:
      case 69:
      case 68:
      case 67:
       {
        i19 = 21;
        break L51;
       }
      case 86:
      case 85:
      case 59:
       {
        i19 = 23;
        break L51;
       }
      case 72:
      case 71:
      case 70:
       {
        i19 = 17;
        break L57;
       }
      case 84:
      case 83:
      case 82:
      case 81:
      case 80:
      case 79:
      case 78:
      case 77:
      case 76:
      case 75:
      case 74:
      case 73:
       {
        i19 = 18;
        break L57;
       }
      case 65:
      case 64:
      case 63:
      case 62:
      case 61:
      case 60:
       {
        i19 = 24;
        break L57;
       }
      case 66:
       break;
      default:
       {
        i19 = 26;
        break L51;
       }
      }
      i3 = 1;
      break L51;
     } while (0);
     if ((i19 | 0) == 17) {
      i19 = 0;
      i3 = ((i4 + 3 | 0) / 4 | 0) << 3;
      break L49;
     } else if ((i19 | 0) == 18) {
      i19 = 0;
      i3 = ((i4 + 3 | 0) / 4 | 0) << 4;
      break L49;
     } else if ((i19 | 0) == 24) {
      i19 = 0;
      i3 = 8;
      break;
     }
    } else switch (i10 | 0) {
    case 0:
     {
      i3 = 0;
      break L49;
     }
    case 4:
    case 3:
    case 2:
    case 1:
     {
      i3 = 128;
      break L51;
     }
    case 47:
    case 46:
    case 45:
    case 44:
    case 43:
    case 42:
    case 41:
    case 40:
    case 39:
    case 38:
    case 37:
    case 36:
    case 35:
    case 34:
    case 33:
    case 32:
    case 31:
    case 30:
    case 29:
    case 28:
    case 27:
    case 26:
    case 25:
    case 24:
    case 23:
     {
      i19 = 21;
      break L51;
     }
    case 58:
    case 57:
    case 56:
    case 55:
    case 54:
    case 53:
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
     {
      i19 = 23;
      break L51;
     }
    case 8:
    case 7:
    case 6:
    case 5:
     {
      i3 = 96;
      break L51;
     }
    case 22:
    case 21:
    case 20:
    case 19:
    case 18:
    case 17:
    case 16:
    case 15:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
     {
      i3 = 64;
      break L51;
     }
    default:
     {
      i19 = 26;
      break L51;
     }
    } while (0);
    if ((i19 | 0) == 21) {
     i19 = 0;
     i3 = 32;
    } else if ((i19 | 0) == 23) {
     i19 = 0;
     i3 = 16;
    } else if ((i19 | 0) == 26) {
     i19 = 0;
     __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i21 + 8 | 0);
     i3 = 0;
    }
    i3 = ((Math_imul(i3, i4) | 0) + 7 | 0) / 8 | 0;
   } while (0);
   if ((i1 | 0) < (i2 | 0)) break;
   __ZN5ImageC2EPvjbiii13TextureFormat(i21 + 36 | 0, i6, i2, 0, i4, i5, i3, i10);
   i3 = HEAP32[i20 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i21 + 72 + 8 >> 2] | 0)) __ZNSt3__16vectorI5ImageNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i21 + 72 | 0, i21 + 36 | 0); else {
    __ZN5ImageC2ERKS_(i3, i21 + 36 | 0);
    HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 36;
   }
   __ZN5ImageD2Ev(i21 + 36 | 0);
   i7 = i7 + 1 | 0;
   if ((i7 | 0) >= (i12 | 0)) {
    i19 = 34;
    break L9;
   } else {
    i1 = i1 - i2 | 0;
    i6 = i6 + i2 | 0;
   }
  }
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 304429, i21 + 16 | 0);
  HEAP32[i21 + 24 >> 2] = i18;
  HEAP32[i21 + 24 + 4 >> 2] = i2;
  HEAP32[i21 + 24 + 8 >> 2] = i1;
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i17, 304558, 304390, 592, -1610579966, 304694, i21 + 24 | 0);
 } else i19 = 34; while (0);
 if ((i19 | 0) == 34) {
  i19 = HEAP32[i21 + 72 >> 2] | 0;
  __ZN7Texture18CreateBestMatchingEiiii11TextureType13TextureFormat13ResourceUsagemPK5ImageiPKc(i17, i13, i16, i11, i9, i12, i14, i10, i15, i8, i19, ((HEAP32[i20 >> 2] | 0) - i19 | 0) / 36 | 0, i18);
 }
 i1 = HEAP32[i21 + 72 >> 2] | 0;
 if (!i1) {
  STACKTOP = i21;
  return;
 }
 while (1) {
  i2 = HEAP32[i20 >> 2] | 0;
  if ((i2 | 0) == (i1 | 0)) break;
  HEAP32[i20 >> 2] = i2 + -36;
  __ZN5ImageD2Ev(i2 + -36 | 0);
 }
 __ZdlPv(HEAP32[i21 + 72 >> 2] | 0);
 STACKTOP = i21;
 return;
}

function __Z14DumpShaderInfoj(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 HEAP32[i8 >> 2] = i7;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296522, i8);
 if ((_glIsShader(i7 | 0) | 0) << 24 >> 24) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296536, i8 + 8 | 0);
  HEAP32[i8 + 1036 >> 2] = 0;
  _glGetShaderiv(i7 | 0, 35663, i8 + 1036 | 0);
  i1 = HEAP32[i8 + 1036 >> 2] | 0;
  switch (i1 | 0) {
  case 35633:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296553, i8 + 16 | 0);
    break;
   }
  case 35632:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296586, i8 + 24 | 0);
    break;
   }
  default:
   {
    HEAP32[i8 + 32 >> 2] = i1;
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 296621, i8 + 32 | 0);
   }
  }
  _glGetShaderiv(i7 | 0, 35712, i8 + 1036 | 0);
  HEAP32[i8 + 40 >> 2] = HEAP32[i8 + 1036 >> 2];
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296651, i8 + 40 | 0);
  _glGetShaderiv(i7 | 0, 35713, i8 + 1036 | 0);
  HEAP32[i8 + 48 >> 2] = HEAP32[i8 + 1036 >> 2];
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296672, i8 + 48 | 0);
  _glGetShaderiv(i7 | 0, 35716, i8 + 1036 | 0);
  HEAP32[i8 + 56 >> 2] = HEAP32[i8 + 1036 >> 2];
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296694, i8 + 56 | 0);
  STACKTOP = i8;
  return;
 }
 if (!((_glIsProgram(i7 | 0) | 0) << 24 >> 24)) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296717, i8 + 64 | 0);
  STACKTOP = i8;
  return;
 }
 _glGetProgramiv(i7 | 0, 35712, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 72 >> 2] = 296779;
 HEAP32[i8 + 72 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 72 | 0);
 _glGetProgramiv(i7 | 0, 35714, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 80 >> 2] = 296796;
 HEAP32[i8 + 80 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 80 | 0);
 _glGetProgramiv(i7 | 0, 35715, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 88 >> 2] = 296811;
 HEAP32[i8 + 88 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 88 | 0);
 _glGetProgramiv(i7 | 0, 35716, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 96 >> 2] = 296830;
 HEAP32[i8 + 96 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 96 | 0);
 _glGetProgramiv(i7 | 0, 35717, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 104 >> 2] = 296849;
 HEAP32[i8 + 104 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 104 | 0);
 _glGetProgramiv(i7 | 0, 35721, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 112 >> 2] = 296869;
 HEAP32[i8 + 112 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 112 | 0);
 _glGetProgramiv(i7 | 0, 35722, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 120 >> 2] = 296890;
 HEAP32[i8 + 120 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 120 | 0);
 _glGetProgramiv(i7 | 0, 35718, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 128 >> 2] = 296921;
 HEAP32[i8 + 128 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 128 | 0);
 _glGetProgramiv(i7 | 0, 35719, i8 + 1032 | 0);
 i5 = HEAP32[i8 + 1032 >> 2] | 0;
 HEAP32[i8 + 136 >> 2] = 296940;
 HEAP32[i8 + 136 + 4 >> 2] = i5;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296772, i8 + 136 | 0);
 HEAP32[i8 + 1028 >> 2] = -1;
 _glGetProgramiv(i7 | 0, 35721, i8 + 1028 | 0);
 if ((HEAP32[i8 + 1028 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   HEAP8[i8 + 136 >> 0] = 0;
   HEAP8[i8 + 136 + 256 >> 0] = 0;
   HEAP32[i8 + 136 + 260 >> 2] = 0;
   _glGetActiveAttrib(i7 | 0, i3 | 0, 255, 0, i8 + 1024 | 0, i8 + 1020 | 0, i8 + 136 | 0);
   i2 = _glGetAttribLocation(i7 | 0, i8 + 136 | 0) | 0;
   i1 = HEAP32[i8 + 1020 >> 2] | 0;
   L18 : do if ((i1 | 0) < 35667) {
    if ((i1 | 0) < 5125) switch (i1 | 0) {
    case 5120:
     {
      i1 = 296514;
      break L18;
     }
    case 5121:
     {
      i1 = 296215;
      break L18;
     }
    case 5122:
     {
      i1 = 296232;
      break L18;
     }
    case 5123:
     {
      i1 = 296241;
      break L18;
     }
    case 5124:
     {
      i1 = 296259;
      break L18;
     }
    default:
     {
      i6 = 34;
      break L18;
     }
    }
    if ((i1 | 0) < 35664) switch (i1 | 0) {
    case 5125:
     {
      i1 = 296266;
      break L18;
     }
    case 5126:
     {
      i1 = 296282;
      break L18;
     }
    case 5132:
     {
      i1 = 296291;
      break L18;
     }
    default:
     {
      i6 = 34;
      break L18;
     }
    } else switch (i1 | 0) {
    case 35664:
     {
      i1 = 296300;
      break L18;
     }
    case 35665:
     {
      i1 = 296314;
      break L18;
     }
    case 35666:
     {
      i1 = 296328;
      break L18;
     }
    default:
     {
      i6 = 34;
      break L18;
     }
    }
   } else do switch (i1 | 0) {
   case 35667:
    {
     i1 = 296342;
     break L18;
    }
   case 35668:
    {
     i1 = 296354;
     break L18;
    }
   case 35669:
    {
     i1 = 296366;
     break L18;
    }
   case 35670:
    {
     i1 = 296378;
     break L18;
    }
   case 35671:
    {
     i1 = 296386;
     break L18;
    }
   case 35672:
    {
     i1 = 296399;
     break L18;
    }
   case 35673:
    {
     i1 = 296412;
     break L18;
    }
   case 35674:
    {
     i1 = 296425;
     break L18;
    }
   case 35675:
    {
     i1 = 296439;
     break L18;
    }
   case 35676:
    {
     i1 = 296453;
     break L18;
    }
   case 35678:
    {
     i1 = 296467;
     break L18;
    }
   case 35680:
    {
     i1 = 296481;
     break L18;
    }
   default:
    {
     i6 = 34;
     break L18;
    }
   } while (0); while (0);
   if ((i6 | 0) == 34) {
    i6 = 0;
    i1 = 296497;
   }
   i5 = HEAP32[i8 + 1024 >> 2] | 0;
   HEAP32[i8 + 400 >> 2] = i3;
   HEAP32[i8 + 400 + 4 >> 2] = i8 + 136;
   HEAP32[i8 + 400 + 8 >> 2] = i1;
   HEAP32[i8 + 400 + 12 >> 2] = i5;
   HEAP32[i8 + 400 + 16 >> 2] = i2;
   __ZN4math22PrintToConsoleVariadicEjPKcz(1, 296969, i8 + 400 | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i8 + 1028 >> 2] | 0));
 }
 HEAP32[i8 + 1016 >> 2] = -1;
 _glGetProgramiv(i7 | 0, 35718, i8 + 1016 | 0);
 if ((HEAP32[i8 + 1016 >> 2] | 0) > 0) {
  i3 = 0;
  do {
   HEAP8[i8 + 136 >> 0] = 0;
   HEAP8[i8 + 136 + 256 >> 0] = 0;
   HEAP32[i8 + 136 + 260 >> 2] = 0;
   _glGetActiveUniform(i7 | 0, i3 | 0, 255, 0, i8 + 1012 | 0, i8 + 1008 | 0, i8 + 136 | 0);
   i2 = _glGetUniformLocation(i7 | 0, i8 + 136 | 0) | 0;
   i1 = HEAP32[i8 + 1008 >> 2] | 0;
   L61 : do if ((i1 | 0) < 35667) {
    if ((i1 | 0) < 5125) switch (i1 | 0) {
    case 5120:
     {
      i1 = 296514;
      break L61;
     }
    case 5121:
     {
      i1 = 296215;
      break L61;
     }
    case 5122:
     {
      i1 = 296232;
      break L61;
     }
    case 5123:
     {
      i1 = 296241;
      break L61;
     }
    case 5124:
     {
      i1 = 296259;
      break L61;
     }
    default:
     {
      i6 = 61;
      break L61;
     }
    }
    if ((i1 | 0) < 35664) switch (i1 | 0) {
    case 5125:
     {
      i1 = 296266;
      break L61;
     }
    case 5126:
     {
      i1 = 296282;
      break L61;
     }
    case 5132:
     {
      i1 = 296291;
      break L61;
     }
    default:
     {
      i6 = 61;
      break L61;
     }
    } else switch (i1 | 0) {
    case 35664:
     {
      i1 = 296300;
      break L61;
     }
    case 35665:
     {
      i1 = 296314;
      break L61;
     }
    case 35666:
     {
      i1 = 296328;
      break L61;
     }
    default:
     {
      i6 = 61;
      break L61;
     }
    }
   } else do switch (i1 | 0) {
   case 35667:
    {
     i1 = 296342;
     break L61;
    }
   case 35668:
    {
     i1 = 296354;
     break L61;
    }
   case 35669:
    {
     i1 = 296366;
     break L61;
    }
   case 35670:
    {
     i1 = 296378;
     break L61;
    }
   case 35671:
    {
     i1 = 296386;
     break L61;
    }
   case 35672:
    {
     i1 = 296399;
     break L61;
    }
   case 35673:
    {
     i1 = 296412;
     break L61;
    }
   case 35674:
    {
     i1 = 296425;
     break L61;
    }
   case 35675:
    {
     i1 = 296439;
     break L61;
    }
   case 35676:
    {
     i1 = 296453;
     break L61;
    }
   case 35678:
    {
     i1 = 296467;
     break L61;
    }
   case 35680:
    {
     i1 = 296481;
     break L61;
    }
   default:
    {
     i6 = 61;
     break L61;
    }
   } while (0); while (0);
   if ((i6 | 0) == 61) {
    i6 = 0;
    i1 = 296497;
   }
   i5 = HEAP32[i8 + 1012 >> 2] | 0;
   HEAP32[i8 + 424 >> 2] = i3;
   HEAP32[i8 + 424 + 4 >> 2] = i8 + 136;
   HEAP32[i8 + 424 + 8 >> 2] = i1;
   HEAP32[i8 + 424 + 12 >> 2] = i5;
   HEAP32[i8 + 424 + 16 >> 2] = i2;
   __ZN4math22PrintToConsoleVariadicEjPKcz(1, 297044, i8 + 424 | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i8 + 1016 >> 2] | 0));
 }
 _glValidateProgram(i7 | 0);
 i2 = __Znaj(4096) | 0;
 HEAP8[i2 >> 0] = 0;
 _glGetProgramInfoLog(i7 | 0, 4095, 0, i2 | 0);
 HEAP32[i8 + 448 >> 2] = i2;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 297118, i8 + 448 | 0);
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 297149, i8 + 456 | 0);
 if ((HEAP32[i8 + 1016 >> 2] | 0) > 0) {
  i5 = 0;
  do {
   _memset(i8 + 456 | 0, 0, 512) | 0;
   HEAP32[i8 + 1004 >> 2] = 0;
   HEAP32[i8 + 1e3 >> 2] = 0;
   _glGetActiveUniform(i7 | 0, i5 | 0, 510, 0, i8 + 1004 | 0, i8 + 1e3 | 0, i8 + 456 | 0);
   i3 = HEAP32[i8 + 1004 >> 2] | 0;
   i4 = HEAP32[i8 + 1e3 >> 2] | 0;
   L104 : do if ((i4 | 0) < 35667) {
    if ((i4 | 0) < 5125) switch (i4 | 0) {
    case 5120:
     {
      i1 = 296514;
      break L104;
     }
    case 5121:
     {
      i1 = 296215;
      break L104;
     }
    case 5122:
     {
      i1 = 296232;
      break L104;
     }
    case 5123:
     {
      i1 = 296241;
      break L104;
     }
    case 5124:
     {
      i1 = 296259;
      break L104;
     }
    default:
     {
      i6 = 88;
      break L104;
     }
    }
    if ((i4 | 0) < 35664) switch (i4 | 0) {
    case 5125:
     {
      i1 = 296266;
      break L104;
     }
    case 5126:
     {
      i1 = 296282;
      break L104;
     }
    case 5132:
     {
      i1 = 296291;
      break L104;
     }
    default:
     {
      i6 = 88;
      break L104;
     }
    } else switch (i4 | 0) {
    case 35664:
     {
      i1 = 296300;
      break L104;
     }
    case 35665:
     {
      i1 = 296314;
      break L104;
     }
    case 35666:
     {
      i1 = 296328;
      break L104;
     }
    default:
     {
      i6 = 88;
      break L104;
     }
    }
   } else do switch (i4 | 0) {
   case 35667:
    {
     i1 = 296342;
     break L104;
    }
   case 35668:
    {
     i1 = 296354;
     break L104;
    }
   case 35669:
    {
     i1 = 296366;
     break L104;
    }
   case 35670:
    {
     i1 = 296378;
     break L104;
    }
   case 35671:
    {
     i1 = 296386;
     break L104;
    }
   case 35672:
    {
     i1 = 296399;
     break L104;
    }
   case 35673:
    {
     i1 = 296412;
     break L104;
    }
   case 35674:
    {
     i1 = 296425;
     break L104;
    }
   case 35675:
    {
     i1 = 296439;
     break L104;
    }
   case 35676:
    {
     i1 = 296453;
     break L104;
    }
   case 35678:
    {
     i1 = 296467;
     break L104;
    }
   case 35680:
    {
     i1 = 296481;
     break L104;
    }
   default:
    {
     i6 = 88;
     break L104;
    }
   } while (0); while (0);
   if ((i6 | 0) == 88) {
    i6 = 0;
    i1 = 296497;
   }
   i9 = _glGetUniformLocation(i7 | 0, i8 + 456 | 0) | 0;
   HEAP32[i8 + 968 >> 2] = i8 + 456;
   HEAP32[i8 + 968 + 4 >> 2] = i3;
   HEAP32[i8 + 968 + 8 >> 2] = i1;
   HEAP32[i8 + 968 + 12 >> 2] = i4;
   HEAP32[i8 + 968 + 16 >> 2] = i9;
   __ZN4math22PrintToConsoleVariadicEjPKcz(1, 297186, i8 + 968 | 0);
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (HEAP32[i8 + 1016 >> 2] | 0));
 }
 _glGetProgramiv(i7 | 0, 35721, i8 + 996 | 0);
 HEAP32[i8 + 992 >> 2] = HEAP32[i8 + 996 >> 2];
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 297234, i8 + 992 | 0);
 __ZdaPv(i2);
 STACKTOP = i8;
 return;
}

function _tt_face_init(i10, i12, i3, i4, i5) {
 i10 = i10 | 0;
 i12 = i12 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i2 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i12 + 96 >> 2] | 0) + 4 >> 2] | 0, 325800) | 0;
 if (!i2) {
  i12 = 11;
  STACKTOP = i13;
  return i12 | 0;
 }
 i1 = _FT_Stream_Seek(i10, 0) | 0;
 if (i1) {
  i12 = i1;
  STACKTOP = i13;
  return i12 | 0;
 }
 i1 = FUNCTION_TABLE_iiiiii[HEAP32[i2 + 4 >> 2] & 63](i10, i12, i3, i4, i5) | 0;
 if (i1) {
  i12 = i1;
  STACKTOP = i13;
  return i12 | 0;
 }
 i1 = HEAP32[i12 + 148 >> 2] | 0;
 L10 : do if ((i1 | 0) >= 131072) if ((i1 | 0) < 1953658213) {
  switch (i1 | 0) {
  case 131072:
   break L10;
  default:
   i1 = 2;
  }
  STACKTOP = i13;
  return i1 | 0;
 } else {
  switch (i1 | 0) {
  case 1953658213:
   break L10;
  default:
   i1 = 2;
  }
  STACKTOP = i13;
  return i1 | 0;
 } else {
  switch (i1 | 0) {
  case 65536:
   break L10;
  default:
   i1 = 2;
  }
  STACKTOP = i13;
  return i1 | 0;
 } while (0);
 HEAP32[i12 + 8 >> 2] = HEAP32[i12 + 8 >> 2] | 2048;
 if ((i3 | 0) < 0) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i1 = FUNCTION_TABLE_iiiiii[HEAP32[i2 + 8 >> 2] & 63](i10, i12, i3, i4, i5) | 0;
 if (i1) {
  i12 = i1;
  STACKTOP = i13;
  return i12 | 0;
 }
 i1 = HEAP32[i12 + 20 >> 2] | 0;
 if (i1) if ((((((((_strstr(i1, 323043) | 0) == 0 ? (_strstr(i1, 323060) | 0) == 0 : 0) ? (_strstr(i1, 323077) | 0) == 0 : 0) ? (_strstr(i1, 323094) | 0) == 0 : 0) ? (_strstr(i1, 323111) | 0) == 0 : 0) ? (_strstr(i1, 323128) | 0) == 0 : 0) ? (_strstr(i1, 323145) | 0) == 0 : 0) ? (_strstr(i1, 323162) | 0) == 0 : 0) i11 = 16; else i11 = 64; else i11 = 16;
 L35 : do if ((i11 | 0) == 16) {
  i1 = i13 + 8 | 0;
  i2 = i1 + 68 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  i1 = HEAP16[i12 + 152 >> 1] | 0;
  L37 : do if (i1 << 16 >> 16) {
   i8 = 0;
   i3 = 0;
   i9 = 0;
   while (1) {
    i4 = HEAP32[i12 + 156 >> 2] | 0;
    i2 = HEAP32[i4 + (i8 << 4) >> 2] | 0;
    L41 : do if ((i2 | 0) >= 1718642541) if ((i2 | 0) < 1886545264) {
     switch (i2 | 0) {
     case 1718642541:
      break;
     default:
      break L41;
     }
     i7 = 1;
     i11 = 23;
     break;
    } else {
     switch (i2 | 0) {
     case 1886545264:
      break;
     default:
      break L41;
     }
     i7 = 2;
     i11 = 23;
     break;
    } else switch (i2 | 0) {
    case 1668707360:
     {
      i3 = 1;
      i7 = 0;
      i11 = 23;
      break;
     }
    default:
     {}
    } while (0);
    if ((i11 | 0) == 23) {
     i11 = 0;
     i2 = 0;
     i6 = 0;
     while (1) {
      if ((HEAP32[i4 + (i8 << 4) + 12 >> 2] | 0) == (HEAP32[263220 + (i6 * 24 | 0) + (i7 << 3) + 4 >> 2] | 0)) {
       do if (!i2) {
        i1 = HEAP32[i12 + 508 >> 2] | 0;
        if ((i1 | 0) != 0 ? (FUNCTION_TABLE_iiiii[i1 & 63](i12, HEAP32[i4 + (i8 << 4) >> 2] | 0, HEAP32[i12 + 104 >> 2] | 0, 0) | 0) == 0 : 0) {
         i5 = HEAP32[i12 + 104 >> 2] | 0;
         i2 = HEAP32[(HEAP32[i12 + 156 >> 2] | 0) + (i8 << 4) + 12 >> 2] | 0;
         if (_FT_Stream_EnterFrame(i5, i2) | 0) {
          i4 = 0;
          break;
         }
         if (i2 >>> 0 > 3) {
          i4 = i2;
          i1 = 0;
          do {
           i1 = (_FT_Stream_GetULong(i5) | 0) + i1 | 0;
           i4 = i4 + -4 | 0;
          } while (i4 >>> 0 > 3);
          i2 = i2 & 3;
         } else i1 = 0;
         if (i2) {
          i4 = 3;
          while (1) {
           i1 = (((_FT_Stream_GetChar(i5) | 0) & 255) << (i4 << 3)) + i1 | 0;
           i2 = i2 + -1 | 0;
           if (!i2) break; else i4 = i4 + -1 | 0;
          }
         }
         _FT_Stream_ExitFrame(i5);
         i4 = i1;
        } else i4 = 0;
       } else i4 = i2; while (0);
       i2 = i13 + 8 + (i6 << 2) | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if ((HEAP32[263220 + (i6 * 24 | 0) + (i7 << 3) >> 2] | 0) == (i4 | 0)) {
        HEAP32[i2 >> 2] = i1 + 1;
        i1 = i1 + 1 | 0;
       }
       if ((i1 | 0) == 3) break L37; else i2 = i4;
      }
      i1 = i6 + 1 | 0;
      if ((i1 | 0) >= 17) break;
      i4 = HEAP32[i12 + 156 >> 2] | 0;
      i6 = i1;
     }
     i1 = HEAP16[i12 + 152 >> 1] | 0;
    }
    i2 = i9 + 1 << 16 >> 16;
    if ((i2 & 65535) < (i1 & 65535)) {
     i8 = i2 & 65535;
     i9 = i2;
    } else {
     i1 = i3;
     break;
    }
   }
   if (i1 << 24 >> 24) {
    if (((((((((HEAP32[i13 + 8 >> 2] | 0) != 3 ? (HEAP32[i13 + 8 + 4 >> 2] | 0) != 3 : 0) ? (HEAP32[i13 + 8 + 8 >> 2] | 0) != 3 : 0) ? (HEAP32[i13 + 8 + 12 >> 2] | 0) != 3 : 0) ? (HEAP32[i13 + 8 + 16 >> 2] | 0) != 3 : 0) ? (HEAP32[i13 + 8 + 20 >> 2] | 0) != 3 : 0) ? (HEAP32[i13 + 8 + 24 >> 2] | 0) != 3 : 0) ? (HEAP32[i13 + 8 + 28 >> 2] | 0) != 3 : 0) ? (HEAP32[i13 + 8 + 32 >> 2] | 0) != 3 : 0) {
     if ((HEAP32[i13 + 8 + 36 >> 2] | 0) == 3) break;
     if ((HEAP32[i13 + 8 + 40 >> 2] | 0) == 3) break;
     if ((HEAP32[i13 + 8 + 44 >> 2] | 0) == 3) break;
     if ((HEAP32[i13 + 8 + 48 >> 2] | 0) == 3) break;
     if ((HEAP32[i13 + 8 + 52 >> 2] | 0) == 3) break;
     if ((HEAP32[i13 + 8 + 56 >> 2] | 0) == 3) break;
     if ((HEAP32[i13 + 8 + 60 >> 2] | 0) == 3) break;
     if ((HEAP32[i13 + 8 + 64 >> 2] | 0) == 3) {
      i11 = 64;
      break L35;
     } else break L35;
    }
   } else {
    i3 = 0;
    i11 = 44;
   }
  } else {
   i3 = 0;
   i11 = 44;
  } while (0);
  L95 : do if ((i11 | 0) == 44) {
   while (1) {
    i11 = 0;
    i2 = i13 + 8 + (i3 << 2) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (i3 >>> 0 >= 5) {
     HEAP32[i2 >> 2] = i1 + 1;
     i1 = i1 + 1 | 0;
    }
    i3 = i3 + 1 | 0;
    if ((i1 | 0) == 3) break L95;
    if ((i3 | 0) >= 17) break; else i11 = 44;
   }
   break L35;
  } while (0);
  i11 = 64;
 } while (0);
 if ((i11 | 0) == 64) HEAP32[i12 + 8 >> 2] = HEAP32[i12 + 8 >> 2] | 8192;
 i3 = HEAP32[i10 + 28 >> 2] | 0;
 i8 = FUNCTION_TABLE_iiiii[HEAP32[i12 + 508 >> 2] & 63](i12, 1751412088, i10, i13) | 0;
 HEAP32[i13 + 8 >> 2] = i8;
 i1 = HEAP32[i13 >> 2] | 0;
 if (!((i8 | 0) != 0 | i1 >>> 0 < 8)) {
  i1 = _FT_Stream_ExtractFrame(i10, i1, i12 + 740 | 0) | 0;
  HEAP32[i13 + 8 >> 2] = i1;
  if (i1) {
   i12 = i1;
   STACKTOP = i13;
   return i12 | 0;
  }
  i2 = HEAP32[i12 + 740 >> 2] | 0;
  i4 = i2 + (HEAP32[i13 >> 2] | 0) | 0;
  i5 = HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
  i6 = HEAPU8[i2 + 5 >> 0] << 16 | HEAPU8[i2 + 4 >> 0] << 24 | HEAPU8[i2 + 6 >> 0] << 8 | HEAPU8[i2 + 7 >> 0];
  i6 = i6 >>> 0 > 4294901759 ? i6 & 65535 : i6;
  if (!((i5 >>> 0 > 255 ? 1 : (HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0] | 0) != 0) | i6 >>> 0 > 65537)) {
   HEAP32[i12 + 756 >> 2] = _ft_mem_realloc(i3, 1, 0, i5, 0, i13 + 8 | 0) | 0;
   if (!(HEAP32[i13 + 8 >> 2] | 0)) {
    L118 : do if (!i5) i1 = 0; else {
     i1 = 0;
     i3 = i2 + 8 | 0;
     do {
      i2 = i3;
      i3 = i3 + i6 | 0;
      if (i3 >>> 0 > i4 >>> 0) break L118;
      HEAP8[(HEAP32[i12 + 756 >> 2] | 0) + i1 >> 0] = HEAP8[i2 >> 0] | 0;
      i1 = i1 + 1 | 0;
     } while (i1 >>> 0 < i5 >>> 0);
    } while (0);
    HEAP32[i12 + 748 >> 2] = i1;
    HEAP32[i12 + 744 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i12 + 752 >> 2] = i6;
   } else i11 = 77;
  } else {
   HEAP32[i13 + 8 >> 2] = 3;
   i11 = 77;
  }
  if ((i11 | 0) == 77) {
   _FT_Stream_ReleaseFrame(i10, i12 + 740 | 0);
   HEAP32[i12 + 744 >> 2] = 0;
  }
  i1 = HEAP32[i13 + 8 >> 2] | 0;
  if (i1) {
   i12 = i1;
   STACKTOP = i13;
   return i12 | 0;
  }
 }
 if (HEAP32[i12 + 8 >> 2] & 1) {
  L131 : do if (!(HEAP32[(HEAP32[i12 + 128 >> 2] | 0) + 52 >> 2] | 0)) {
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i12 + 508 >> 2] & 63](i12, 1735162214, i10, i12 + 704 | 0) | 0;
   switch (i1 | 0) {
   case 142:
    {
     HEAP32[i12 + 704 >> 2] = 0;
     i11 = 83;
     break;
    }
   case 0:
    {
     i11 = 83;
     break;
    }
   default:
    {}
   }
   do if ((i11 | 0) == 83) if (!(FUNCTION_TABLE_iiiii[HEAP32[i12 + 508 >> 2] & 63](i12, 1819239265, i10, i13 + 8 | 0) | 0)) {
    i1 = HEAP32[i13 + 8 >> 2] | 0;
    if (!(HEAP16[i12 + 210 >> 1] | 0)) {
     if (i1 >>> 0 > 131071) {
      i1 = 8;
      break;
     }
     HEAP32[i12 + 732 >> 2] = i1 >>> 1;
     i8 = i12 + 732 | 0;
     i3 = i1 >>> 1;
     i4 = 1;
    } else {
     if (i1 >>> 0 > 262143) {
      i1 = 8;
      break;
     }
     HEAP32[i12 + 732 >> 2] = i1 >>> 2;
     i8 = i12 + 732 | 0;
     i3 = i1 >>> 2;
     i4 = 2;
    }
    i2 = HEAP32[i12 + 16 >> 2] | 0;
    do if (!(i3 >>> 0 > i2 >>> 0 | (i3 | 0) == (i2 + 1 | 0))) {
     i1 = i2 + 1 << i4;
     i5 = HEAP32[i12 + 156 >> 2] | 0;
     i6 = HEAP16[i12 + 152 >> 1] | 0;
     i7 = _FT_Stream_Pos(i10) | 0;
     if (!(i6 << 16 >> 16)) {
      i2 = 2147483647;
      i3 = i5;
     } else {
      i4 = (((i5 + ((i6 & 65535) << 4) | 0) >>> 0 > (i5 + 16 | 0) >>> 0 ? i5 + ((i6 & 65535) << 4) | 0 : i5 + 16 | 0) + ~i5 | 0) >>> 4;
      i2 = 2147483647;
      i3 = i5;
      do {
       i9 = (HEAP32[i3 + 8 >> 2] | 0) - i7 | 0;
       i2 = (i9 | 0) > 0 & (i9 | 0) < (i2 | 0) ? i9 : i2;
       i3 = i3 + 16 | 0;
      } while (i3 >>> 0 < (i5 + ((i6 & 65535) << 4) | 0) >>> 0);
      i3 = i5 + (i4 + 1 << 4) | 0;
     }
     if ((i3 | 0) == (i5 + ((i6 & 65535) << 4) | 0)) i2 = (HEAP32[i10 + 4 >> 2] | 0) - i7 | 0;
     if ((i1 | 0) > (i2 | 0)) {
      i1 = HEAP32[i13 + 8 >> 2] | 0;
      break;
     } else {
      HEAP32[i8 >> 2] = (HEAP32[i12 + 16 >> 2] | 0) + 1;
      HEAP32[i13 + 8 >> 2] = i1;
      break;
     }
    } while (0);
    i1 = _FT_Stream_ExtractFrame(i10, i1, i12 + 736 | 0) | 0;
    if (!i1) {
     i11 = 101;
     break L131;
    } else break L131;
   } else i1 = 144; while (0);
  } else i11 = 101; while (0);
  do if ((i11 | 0) == 101) {
   i1 = _tt_face_load_cvt(i12, i10) | 0;
   if (!i1) {
    if (!(FUNCTION_TABLE_iiiii[HEAP32[i12 + 508 >> 2] & 63](i12, 1718642541, i10, i13 + 8 | 0) | 0)) {
     i1 = HEAP32[i13 + 8 >> 2] | 0;
     HEAP32[i12 + 652 >> 2] = i1;
     i1 = _FT_Stream_ExtractFrame(i10, i1, i12 + 656 | 0) | 0;
     if (i1) break;
    } else {
     HEAP32[i12 + 656 >> 2] = 0;
     HEAP32[i12 + 652 >> 2] = 0;
    }
    if (!(FUNCTION_TABLE_iiiii[HEAP32[i12 + 508 >> 2] & 63](i12, 1886545264, i10, i13 + 8 | 0) | 0)) {
     i1 = HEAP32[i13 + 8 >> 2] | 0;
     HEAP32[i12 + 660 >> 2] = i1;
     i1 = _FT_Stream_ExtractFrame(i10, i1, i12 + 664 | 0) | 0;
    } else {
     HEAP32[i12 + 664 >> 2] = 0;
     HEAP32[i12 + 660 >> 2] = 0;
     i1 = 0;
    }
   }
  } while (0);
  if (((HEAP32[(HEAP32[i12 + 128 >> 2] | 0) + 52 >> 2] | 0) == 0 ? (HEAP32[i12 + 28 >> 2] | 0) != 0 : 0) ? (HEAP32[i12 + 736 >> 2] | 0) != 0 : 0) {
   L175 : do if (HEAP32[i12 + 732 >> 2] | 0) {
    i2 = 0;
    i3 = 0;
    i4 = 0;
    do {
     _tt_face_get_location(i12, i4, i13 + 8 | 0) | 0;
     if (HEAP32[i13 + 8 >> 2] | 0) {
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 > 1) {
       i2 = 0;
       i11 = 120;
       break L175;
      } else i3 = i4;
     }
     i4 = i4 + 1 | 0;
    } while (i4 >>> 0 < (HEAP32[i12 + 732 >> 2] | 0) >>> 0);
    if ((i2 | 0) == 1) if (i3) {
     i10 = (_FT_Get_Glyph_Name(i12, i3, i13, 8) | 0) == 0;
     if (i10 & (HEAP8[i13 >> 0] | 0) == 46) i2 = (_strncmp(i13, 323974, 8) | 0) == 0 & 1; else {
      i2 = 0;
      i11 = 120;
     }
    } else {
     i2 = 1;
     i11 = 120;
    } else {
     i2 = 0;
     i11 = 120;
    }
   } else {
    i2 = 0;
    i11 = 120;
   } while (0);
   if (i2 << 24 >> 24) HEAP32[i12 + 8 >> 2] = HEAP32[i12 + 8 >> 2] & -2;
  }
 } else i1 = 0;
 HEAP32[i12 + 512 >> 2] = 36;
 HEAP32[i12 + 520 >> 2] = 54;
 HEAP32[i12 + 524 >> 2] = 55;
 HEAP32[i12 + 528 >> 2] = 56;
 HEAP32[i12 + 516 >> 2] = 73;
 i12 = i1;
 STACKTOP = i13;
 return i12 | 0;
}

function __ZNK4math4AABB11TriangulateEiiiPNS_6float3ES2_PNS_6float2Eb(i29, i23, i24, i25, i27, i26, i28, i21) {
 i29 = i29 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i27 = i27 | 0;
 i26 = i26 | 0;
 i28 = i28 | 0;
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, f3 = f0, f4 = f0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, f12 = f0, f13 = f0, i14 = 0, i15 = 0, f16 = f0, f17 = f0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if (!i27) {
  STACKTOP = i30;
  return;
 }
 i22 = 0;
 i1 = 0;
 do {
  i14 = (i22 + -1 | 0) >>> 0 < 2;
  i20 = (i22 | 0) == 5;
  i14 = i21 ? (i20 | i14) ^ 1 : i20 | i14;
  if (i22 >>> 0 < 2) {
   i19 = i24;
   i20 = i25;
  } else {
   i19 = i23;
   i20 = (i22 & -2 | 0) == 2 ? i25 : i24;
  }
  if ((i19 | 0) > 0) {
   i15 = (i20 | 0) > 0;
   f16 = Math_fround(i19 | 0);
   f17 = Math_fround(i20 | 0);
   i18 = i20 * 6 | 0;
   i2 = 0;
   do if (i15) {
    f13 = Math_fround(Math_fround(i2 | 0) / f16);
    i2 = i2 + 1 | 0;
    f12 = Math_fround(Math_fround(i2 | 0) / f16);
    if (i14) {
     i10 = i1;
     i11 = 0;
     while (1) {
      f3 = Math_fround(Math_fround(i11 | 0) / f17);
      i11 = i11 + 1 | 0;
      f4 = Math_fround(Math_fround(i11 | 0) / f17);
      i9 = i27 + (i10 * 12 | 0) | 0;
      __ZNK4math4AABB9FacePointEiff(i30 + 80 | 0, i29, i22, f13, f3);
      HEAP32[i9 >> 2] = HEAP32[i30 + 80 >> 2];
      HEAP32[i9 + 4 >> 2] = HEAP32[i30 + 80 + 4 >> 2];
      HEAP32[i9 + 8 >> 2] = HEAP32[i30 + 80 + 8 >> 2];
      i9 = i10 + 1 | 0;
      __ZNK4math4AABB9FacePointEiff(i30 + 68 | 0, i29, i22, f13, f4);
      HEAP32[i27 + (i9 * 12 | 0) >> 2] = HEAP32[i30 + 68 >> 2];
      HEAP32[i27 + (i9 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 68 + 4 >> 2];
      HEAP32[i27 + (i9 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 68 + 8 >> 2];
      i5 = i10 + 2 | 0;
      __ZNK4math4AABB9FacePointEiff(i30 + 56 | 0, i29, i22, f12, f3);
      HEAP32[i27 + (i5 * 12 | 0) >> 2] = HEAP32[i30 + 56 >> 2];
      HEAP32[i27 + (i5 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 56 + 4 >> 2];
      HEAP32[i27 + (i5 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 56 + 8 >> 2];
      HEAP32[i30 + 92 >> 2] = HEAP32[i27 + (i9 * 12 | 0) >> 2];
      HEAP32[i30 + 92 + 4 >> 2] = HEAP32[i27 + (i9 * 12 | 0) + 4 >> 2];
      HEAP32[i30 + 92 + 8 >> 2] = HEAP32[i27 + (i9 * 12 | 0) + 8 >> 2];
      HEAP32[i27 + (i9 * 12 | 0) >> 2] = HEAP32[i27 + (i5 * 12 | 0) >> 2];
      HEAP32[i27 + (i9 * 12 | 0) + 4 >> 2] = HEAP32[i27 + (i5 * 12 | 0) + 4 >> 2];
      HEAP32[i27 + (i9 * 12 | 0) + 8 >> 2] = HEAP32[i27 + (i5 * 12 | 0) + 8 >> 2];
      HEAP32[i27 + (i5 * 12 | 0) >> 2] = HEAP32[i30 + 92 >> 2];
      HEAP32[i27 + (i5 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 92 + 4 >> 2];
      HEAP32[i27 + (i5 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 92 + 8 >> 2];
      i6 = i10 + 3 | 0;
      HEAP32[i27 + (i6 * 12 | 0) >> 2] = HEAP32[i27 + (i5 * 12 | 0) >> 2];
      HEAP32[i27 + (i6 * 12 | 0) + 4 >> 2] = HEAP32[i27 + (i5 * 12 | 0) + 4 >> 2];
      HEAP32[i27 + (i6 * 12 | 0) + 8 >> 2] = HEAP32[i27 + (i5 * 12 | 0) + 8 >> 2];
      i7 = i10 + 4 | 0;
      HEAP32[i27 + (i7 * 12 | 0) >> 2] = HEAP32[i27 + (i9 * 12 | 0) >> 2];
      HEAP32[i27 + (i7 * 12 | 0) + 4 >> 2] = HEAP32[i27 + (i9 * 12 | 0) + 4 >> 2];
      HEAP32[i27 + (i7 * 12 | 0) + 8 >> 2] = HEAP32[i27 + (i9 * 12 | 0) + 8 >> 2];
      i8 = i10 + 5 | 0;
      __ZNK4math4AABB9FacePointEiff(i30 + 44 | 0, i29, i22, f12, f4);
      HEAP32[i27 + (i8 * 12 | 0) >> 2] = HEAP32[i30 + 44 >> 2];
      HEAP32[i27 + (i8 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 44 + 4 >> 2];
      HEAP32[i27 + (i8 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 44 + 8 >> 2];
      if (i28) {
       __ZN4math6float2C2Eff(i30 + 24 | 0, f13, f3);
       i31 = HEAP32[i30 + 24 + 4 >> 2] | 0;
       i32 = i28 + (i10 << 3) | 0;
       HEAP32[i32 >> 2] = HEAP32[i30 + 24 >> 2];
       HEAP32[i32 + 4 >> 2] = i31;
       __ZN4math6float2C2Eff(i30 + 16 | 0, f13, f4);
       i32 = HEAP32[i30 + 16 + 4 >> 2] | 0;
       HEAP32[i28 + (i9 << 3) >> 2] = HEAP32[i30 + 16 >> 2];
       HEAP32[i28 + (i9 << 3) + 4 >> 2] = i32;
       __ZN4math6float2C2Eff(i30 + 8 | 0, f12, f3);
       i32 = HEAP32[i30 + 8 >> 2] | 0;
       i31 = HEAP32[i30 + 8 + 4 >> 2] | 0;
       i34 = HEAP32[i28 + (i9 << 3) >> 2] | 0;
       i33 = HEAP32[i28 + (i9 << 3) + 4 >> 2] | 0;
       HEAP32[i28 + (i9 << 3) >> 2] = i32;
       HEAP32[i28 + (i9 << 3) + 4 >> 2] = i31;
       HEAP32[i28 + (i5 << 3) >> 2] = i34;
       HEAP32[i28 + (i5 << 3) + 4 >> 2] = i33;
       HEAP32[i28 + (i6 << 3) >> 2] = i34;
       HEAP32[i28 + (i6 << 3) + 4 >> 2] = i33;
       HEAP32[i28 + (i7 << 3) >> 2] = i32;
       HEAP32[i28 + (i7 << 3) + 4 >> 2] = i31;
       __ZN4math6float2C2Eff(i30, f12, f4);
       i31 = HEAP32[i30 + 4 >> 2] | 0;
       HEAP32[i28 + (i8 << 3) >> 2] = HEAP32[i30 >> 2];
       HEAP32[i28 + (i8 << 3) + 4 >> 2] = i31;
      }
      if (i26) {
       i34 = i26 + (i10 * 12 | 0) | 0;
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i34 >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i34 + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i34 + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i9 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i9 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i9 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i5 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i5 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i5 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i6 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i6 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i6 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i7 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i7 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i7 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i8 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i8 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i8 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
      }
      if ((i11 | 0) == (i20 | 0)) break; else i10 = i10 + 6 | 0;
     }
    } else {
     i10 = i1;
     i11 = 0;
     while (1) {
      f3 = Math_fround(Math_fround(i11 | 0) / f17);
      i11 = i11 + 1 | 0;
      f4 = Math_fround(Math_fround(i11 | 0) / f17);
      i5 = i27 + (i10 * 12 | 0) | 0;
      __ZNK4math4AABB9FacePointEiff(i30 + 80 | 0, i29, i22, f13, f3);
      HEAP32[i5 >> 2] = HEAP32[i30 + 80 >> 2];
      HEAP32[i5 + 4 >> 2] = HEAP32[i30 + 80 + 4 >> 2];
      HEAP32[i5 + 8 >> 2] = HEAP32[i30 + 80 + 8 >> 2];
      i5 = i10 + 1 | 0;
      __ZNK4math4AABB9FacePointEiff(i30 + 68 | 0, i29, i22, f13, f4);
      HEAP32[i27 + (i5 * 12 | 0) >> 2] = HEAP32[i30 + 68 >> 2];
      HEAP32[i27 + (i5 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 68 + 4 >> 2];
      HEAP32[i27 + (i5 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 68 + 8 >> 2];
      i6 = i10 + 2 | 0;
      __ZNK4math4AABB9FacePointEiff(i30 + 56 | 0, i29, i22, f12, f3);
      HEAP32[i27 + (i6 * 12 | 0) >> 2] = HEAP32[i30 + 56 >> 2];
      HEAP32[i27 + (i6 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 56 + 4 >> 2];
      HEAP32[i27 + (i6 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 56 + 8 >> 2];
      i7 = i10 + 3 | 0;
      HEAP32[i27 + (i7 * 12 | 0) >> 2] = HEAP32[i27 + (i6 * 12 | 0) >> 2];
      HEAP32[i27 + (i7 * 12 | 0) + 4 >> 2] = HEAP32[i27 + (i6 * 12 | 0) + 4 >> 2];
      HEAP32[i27 + (i7 * 12 | 0) + 8 >> 2] = HEAP32[i27 + (i6 * 12 | 0) + 8 >> 2];
      i8 = i10 + 4 | 0;
      HEAP32[i27 + (i8 * 12 | 0) >> 2] = HEAP32[i27 + (i5 * 12 | 0) >> 2];
      HEAP32[i27 + (i8 * 12 | 0) + 4 >> 2] = HEAP32[i27 + (i5 * 12 | 0) + 4 >> 2];
      HEAP32[i27 + (i8 * 12 | 0) + 8 >> 2] = HEAP32[i27 + (i5 * 12 | 0) + 8 >> 2];
      i9 = i10 + 5 | 0;
      __ZNK4math4AABB9FacePointEiff(i30 + 44 | 0, i29, i22, f12, f4);
      HEAP32[i27 + (i9 * 12 | 0) >> 2] = HEAP32[i30 + 44 >> 2];
      HEAP32[i27 + (i9 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 44 + 4 >> 2];
      HEAP32[i27 + (i9 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 44 + 8 >> 2];
      if (i28) {
       __ZN4math6float2C2Eff(i30 + 24 | 0, f13, f3);
       i34 = HEAP32[i30 + 24 + 4 >> 2] | 0;
       i33 = i28 + (i10 << 3) | 0;
       HEAP32[i33 >> 2] = HEAP32[i30 + 24 >> 2];
       HEAP32[i33 + 4 >> 2] = i34;
       __ZN4math6float2C2Eff(i30 + 16 | 0, f13, f4);
       i33 = HEAP32[i30 + 16 + 4 >> 2] | 0;
       HEAP32[i28 + (i5 << 3) >> 2] = HEAP32[i30 + 16 >> 2];
       HEAP32[i28 + (i5 << 3) + 4 >> 2] = i33;
       __ZN4math6float2C2Eff(i30 + 8 | 0, f12, f3);
       i33 = HEAP32[i30 + 8 >> 2] | 0;
       i34 = HEAP32[i30 + 8 + 4 >> 2] | 0;
       HEAP32[i28 + (i6 << 3) >> 2] = i33;
       HEAP32[i28 + (i6 << 3) + 4 >> 2] = i34;
       HEAP32[i28 + (i7 << 3) >> 2] = i33;
       HEAP32[i28 + (i7 << 3) + 4 >> 2] = i34;
       i34 = HEAP32[i28 + (i5 << 3) + 4 >> 2] | 0;
       HEAP32[i28 + (i8 << 3) >> 2] = HEAP32[i28 + (i5 << 3) >> 2];
       HEAP32[i28 + (i8 << 3) + 4 >> 2] = i34;
       __ZN4math6float2C2Eff(i30, f12, f4);
       i34 = HEAP32[i30 + 4 >> 2] | 0;
       HEAP32[i28 + (i9 << 3) >> 2] = HEAP32[i30 >> 2];
       HEAP32[i28 + (i9 << 3) + 4 >> 2] = i34;
      }
      if (i26) {
       i34 = i26 + (i10 * 12 | 0) | 0;
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i34 >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i34 + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i34 + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i5 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i5 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i5 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i6 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i6 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i6 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i7 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i7 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i7 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i8 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i8 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i8 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
       __ZNK4math4AABB10FaceNormalEi(i30 + 32 | 0, 0, i22);
       HEAP32[i26 + (i9 * 12 | 0) >> 2] = HEAP32[i30 + 32 >> 2];
       HEAP32[i26 + (i9 * 12 | 0) + 4 >> 2] = HEAP32[i30 + 32 + 4 >> 2];
       HEAP32[i26 + (i9 * 12 | 0) + 8 >> 2] = HEAP32[i30 + 32 + 8 >> 2];
      }
      if ((i11 | 0) == (i20 | 0)) break; else i10 = i10 + 6 | 0;
     }
    }
    i1 = i18 + i1 | 0;
   } else i2 = i2 + 1 | 0; while ((i2 | 0) != (i19 | 0));
  }
  i22 = i22 + 1 | 0;
 } while ((i22 | 0) != 6);
 STACKTOP = i30;
 return;
}

function _af_cjk_hints_detect_features(i29, i28) {
 i29 = i29 | 0;
 i28 = i28 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 8 >> 2] | 0;
 i7 = HEAP32[i29 + 44 + (i28 * 28 | 0) >> 2] | 0;
 i1 = _af_latin_hints_compute_segments(i29, i28) | 0;
 if (i1) {
  i29 = i1;
  STACKTOP = i30;
  return i29 | 0;
 }
 if ((i7 | 0) > 0) {
  i5 = i6;
  do {
   i1 = HEAP32[i5 + 40 >> 2] | 0;
   i3 = HEAP32[i5 + 44 >> 2] | 0;
   i9 = HEAP16[i1 >> 1] | 0;
   i4 = HEAPU8[i5 >> 0] | 0;
   HEAP8[i5 >> 0] = i4 & 254;
   L7 : do if ((i1 | 0) != (i3 | 0)) {
    i2 = i9 & 3;
    i9 = i1;
    do {
     i9 = HEAP32[i9 + 32 >> 2] | 0;
     i19 = i2;
     i2 = HEAPU16[i9 >> 1] & 3;
     if (!(i2 | i19)) break L7;
    } while ((i9 | 0) != (i3 | 0));
    HEAP8[i5 >> 0] = i4 | 1;
   } while (0);
   i5 = i5 + 48 | 0;
  } while (i5 >>> 0 < (i6 + (i7 * 48 | 0) | 0) >>> 0);
 }
 i16 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 8 >> 2] | 0;
 i17 = HEAP32[i29 + 44 + (i28 * 28 | 0) >> 2] | 0;
 i3 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 24 >> 2] | 0;
 i4 = (HEAP32[(HEAP32[i29 + 108 >> 2] | 0) + 36 >> 2] | 0) / 256 | 0;
 i19 = (i28 | 0) == 0 ? i29 + 4 | 0 : i29 + 12 | 0;
 i18 = _FT_DivFix(192, HEAP32[i19 >> 2] | 0) | 0;
 if ((i17 | 0) > 0) {
  i12 = i16;
  do {
   if ((HEAP32[i12 + 40 >> 2] | 0) != (HEAP32[i12 + 44 >> 2] | 0) ? (HEAP8[i12 + 1 >> 0] | 0) == (i3 | 0) : 0) {
    i5 = i12 + 2 | 0;
    i6 = i12 + 4 | 0;
    i7 = i12 + 6 | 0;
    i8 = i12 + 32 | 0;
    i10 = i12 + 36 | 0;
    i11 = i12 + 20 | 0;
    i13 = i16;
    do {
     do if ((((i13 | 0) != (i12 | 0) ? (i3 | 0) == (0 - (HEAP8[i13 + 1 >> 0] | 0) | 0) : 0) ? (i14 = (HEAP16[i13 + 2 >> 1] | 0) - (HEAP16[i5 >> 1] | 0) | 0, (i14 | 0) >= 0) : 0) ? (i15 = HEAP16[i6 >> 1] | 0, i1 = HEAP16[i7 >> 1] | 0, i2 = HEAP16[i13 + 4 >> 1] | 0, i9 = HEAP16[i13 + 6 >> 1] | 0, i15 = ((i1 << 16 >> 16 > i9 << 16 >> 16 ? i9 : i1) << 16 >> 16) - ((i15 << 16 >> 16 < i2 << 16 >> 16 ? i2 : i15) << 16 >> 16) | 0, (i15 | 0) >= (i4 | 0)) : 0) {
      i9 = HEAP32[i8 >> 2] | 0;
      do if ((i14 << 3 | 0) < (i9 * 9 | 0)) {
       if ((i14 << 3 | 0) >= (i9 * 7 | 0) ? (HEAP32[i10 >> 2] | 0) >= (i15 | 0) : 0) break;
       HEAP32[i8 >> 2] = i14;
       HEAP32[i10 >> 2] = i15;
       HEAP32[i11 >> 2] = i13;
      } while (0);
      i1 = i13 + 32 | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if ((i14 << 3 | 0) < (i2 * 9 | 0)) {
       i9 = i13 + 36 | 0;
       if ((i14 << 3 | 0) >= (i2 * 7 | 0) ? (HEAP32[i9 >> 2] | 0) >= (i15 | 0) : 0) break;
       HEAP32[i1 >> 2] = i14;
       HEAP32[i9 >> 2] = i15;
       HEAP32[i13 + 20 >> 2] = i12;
      }
     } while (0);
     i13 = i13 + 48 | 0;
    } while (i13 >>> 0 < (i16 + (i17 * 48 | 0) | 0) >>> 0);
   }
   i12 = i12 + 48 | 0;
  } while (i12 >>> 0 < (i16 + (i17 * 48 | 0) | 0) >>> 0);
  i6 = i16;
  while (1) {
   i3 = i6 + 20 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   L42 : do if ((((i4 | 0) != 0 ? (HEAP32[i4 + 20 >> 2] | 0) == (i6 | 0) : 0) ? (i20 = HEAP16[i4 + 2 >> 1] | 0, i21 = HEAP16[i6 + 2 >> 1] | 0, i20 << 16 >> 16 > i21 << 16 >> 16) : 0) ? (i22 = HEAP32[i6 + 32 >> 2] | 0, (i22 | 0) < (i18 | 0)) : 0) {
    i5 = i6 + 36 | 0;
    i7 = i16;
    while (1) {
     i9 = HEAP16[i7 + 2 >> 1] | 0;
     if (((((!((i6 | 0) == (i7 | 0) ? 1 : i9 << 16 >> 16 > i21 << 16 >> 16) ? (i23 = HEAP32[i7 + 20 >> 2] | 0, (i23 | 0) != 0) : 0) ? (HEAP32[i23 + 20 >> 2] | 0) == (i7 | 0) : 0) ? (i24 = HEAP16[i23 + 2 >> 1] | 0, i24 << 16 >> 16 >= i20 << 16 >> 16) : 0) ? !(i21 << 16 >> 16 == i9 << 16 >> 16 ? i20 << 16 >> 16 == i24 << 16 >> 16 : 0) : 0) ? (i15 = HEAP32[i7 + 32 >> 2] | 0, (i15 | 0) > (i22 | 0) & (i22 << 2 | 0) > (i15 | 0)) : 0) {
      if ((HEAP32[i5 >> 2] | 0) < ((HEAP32[i7 + 36 >> 2] | 0) * 3 | 0)) break; else i2 = i16;
      do {
       i9 = i2 + 20 | 0;
       i1 = HEAP32[i9 >> 2] | 0;
       do if ((i1 | 0) == (i7 | 0)) {
        HEAP32[i9 >> 2] = 0;
        HEAP32[i2 + 24 >> 2] = i4;
       } else {
        if ((i1 | 0) != (i23 | 0)) break;
        HEAP32[i9 >> 2] = 0;
        HEAP32[i2 + 24 >> 2] = i6;
       } while (0);
       i2 = i2 + 48 | 0;
      } while (i2 >>> 0 < (i16 + (i17 * 48 | 0) | 0) >>> 0);
     }
     i7 = i7 + 48 | 0;
     if (i7 >>> 0 >= (i16 + (i17 * 48 | 0) | 0) >>> 0) break L42;
    }
    HEAP32[i4 + 20 >> 2] = 0;
    HEAP32[i3 >> 2] = 0;
   } while (0);
   i6 = i6 + 48 | 0;
   if (i6 >>> 0 >= (i16 + (i17 * 48 | 0) | 0) >>> 0) {
    i3 = i16;
    break;
   }
  }
  do {
   i1 = i3 + 20 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   do if ((i2 | 0) != 0 ? (i25 = HEAP32[i2 + 28 >> 2] | 0, HEAP32[i2 + 28 >> 2] = i25 + 1, (HEAP32[i2 + 20 >> 2] | 0) != (i3 | 0)) : 0) {
    HEAP32[i1 >> 2] = 0;
    i24 = HEAP32[i2 + 32 >> 2] | 0;
    if ((i24 | 0) >= (i18 | 0) ? (HEAP32[i3 + 32 >> 2] | 0) >= (i24 << 2 | 0) : 0) {
     HEAP32[i2 + 28 >> 2] = i25;
     break;
    }
    HEAP32[i3 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
   } while (0);
   i3 = i3 + 48 | 0;
  } while (i3 >>> 0 < (i16 + (i17 * 48 | 0) | 0) >>> 0);
 }
 i20 = HEAP32[i29 >> 2] | 0;
 i1 = HEAP32[i29 + 108 >> 2] | 0;
 i21 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 8 >> 2] | 0;
 i22 = HEAP32[i29 + 44 + (i28 * 28 | 0) >> 2] | 0;
 HEAP32[i29 + 44 + (i28 * 28 | 0) + 12 >> 2] = 0;
 i18 = HEAP32[i19 >> 2] | 0;
 if ((_FT_MulFix(HEAP32[i1 + 40 + (i28 * 340 | 0) + 204 >> 2] | 0, i18) | 0) > 16) i16 = _FT_DivFix(16, i18) | 0; else i16 = HEAP32[i1 + 40 + (i28 * 340 | 0) + 204 >> 2] | 0;
 L81 : do if ((i22 | 0) > 0) {
  i17 = i21;
  while (1) {
   i15 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 12 >> 2] | 0;
   if ((i15 | 0) > 0) {
    i10 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 20 >> 2] | 0;
    i13 = i17 + 1 | 0;
    i1 = HEAP8[i13 >> 0] | 0;
    i14 = i17 + 2 | 0;
    i11 = i17 + 20 | 0;
    i9 = 65535;
    i12 = 0;
    i2 = 0;
    do {
     i8 = i10 + (i12 * 48 | 0) | 0;
     do if ((HEAP8[i10 + (i12 * 48 | 0) + 13 >> 0] | 0) == i1 << 24 >> 24 ? (i26 = (HEAP16[i14 >> 1] | 0) - (HEAP16[i8 >> 1] | 0) | 0, i26 = (i26 | 0) < 0 ? 0 - i26 | 0 : i26, (i26 | 0) < (i16 | 0) & (i26 | 0) < (i9 | 0)) : 0) {
      i5 = HEAP32[i11 >> 2] | 0;
      if (i5) {
       i6 = HEAP32[i10 + (i12 * 48 | 0) + 40 >> 2] | 0;
       i3 = 0;
       i7 = i6;
       do {
        i4 = HEAP32[i7 + 20 >> 2] | 0;
        if (i4) {
         i3 = HEAP16[i5 + 2 >> 1] | 0;
         i25 = HEAP16[i4 + 2 >> 1] | 0;
         i3 = i3 << 16 >> 16 > i25 << 16 >> 16 ? (i3 << 16 >> 16) - (i25 << 16 >> 16) | 0 : (i25 << 16 >> 16) - (i3 << 16 >> 16) | 0;
         if ((i3 | 0) >= (i16 | 0)) break;
        }
        i7 = HEAP32[i7 + 16 >> 2] | 0;
       } while ((i7 | 0) != (i6 | 0));
       if ((i3 | 0) >= (i16 | 0)) break;
      }
      i9 = i26;
      i2 = i8;
     } while (0);
     i12 = i12 + 1 | 0;
    } while ((i12 | 0) != (i15 | 0));
    if (!i2) i27 = 74; else {
     HEAP32[i17 + 16 >> 2] = HEAP32[i2 + 40 >> 2];
     HEAP32[(HEAP32[i2 + 44 >> 2] | 0) + 16 >> 2] = i17;
     HEAP32[i2 + 44 >> 2] = i17;
    }
   } else {
    i1 = i17 + 1 | 0;
    i13 = i1;
    i14 = i17 + 2 | 0;
    i1 = HEAP8[i1 >> 0] | 0;
    i27 = 74;
   }
   if ((i27 | 0) == 74) {
    i27 = 0;
    i8 = HEAP16[i14 >> 1] | 0;
    i7 = i1 << 24 >> 24;
    HEAP32[i30 >> 2] = 0;
    i1 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 16 >> 2] | 0;
    if ((i15 | 0) < (i1 | 0)) {
     i6 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 20 >> 2] | 0;
     i2 = i15;
    } else {
     if ((i1 | 0) > 44739241) {
      i27 = 77;
      break;
     }
     i9 = (i1 >> 2 | 0) < -4 | (i1 + 4 + (i1 >> 2) | 0) > 44739242 ? 44739242 : i1 + 4 + (i1 >> 2) | 0;
     i2 = _ft_mem_realloc(i20, 48, i1, i9, HEAP32[i29 + 44 + (i28 * 28 | 0) + 20 >> 2] | 0, i30) | 0;
     HEAP32[i29 + 44 + (i28 * 28 | 0) + 20 >> 2] = i2;
     i1 = HEAP32[i30 >> 2] | 0;
     if (i1) break;
     HEAP32[i29 + 44 + (i28 * 28 | 0) + 16 >> 2] = i9;
     i6 = i2;
     i2 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 12 >> 2] | 0;
    }
    i1 = i6 + (i2 * 48 | 0) | 0;
    if ((i2 | 0) > 0) {
     while (1) {
      i3 = i1 + -48 | 0;
      i2 = HEAP16[i3 >> 1] | 0;
      if (i2 << 16 >> 16 < i8 << 16 >> 16) break;
      if (i2 << 16 >> 16 == i8 << 16 >> 16 ? (HEAP32[i29 + 44 + (i28 * 28 | 0) + 24 >> 2] | 0) == (i7 | 0) : 0) break;
      i4 = i1;
      i9 = i3;
      i5 = i4 + 48 | 0;
      do {
       HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
       i4 = i4 + 4 | 0;
       i9 = i9 + 4 | 0;
      } while ((i4 | 0) < (i5 | 0));
      if (i3 >>> 0 > i6 >>> 0) i1 = i3; else {
       i1 = i3;
       break;
      }
     }
     i2 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 12 >> 2] | 0;
    }
    HEAP32[i29 + 44 + (i28 * 28 | 0) + 12 >> 2] = i2 + 1;
    i2 = i1 + 13 | 0;
    i4 = i1;
    i5 = i4 + 40 | 0;
    do {
     HEAP32[i4 >> 2] = 0;
     i4 = i4 + 4 | 0;
    } while ((i4 | 0) < (i5 | 0));
    HEAP32[i1 + 40 >> 2] = i17;
    HEAP32[i1 + 44 >> 2] = i17;
    i25 = HEAP16[i14 >> 1] | 0;
    HEAP16[i1 >> 1] = i25;
    i25 = _FT_MulFix(i25 << 16 >> 16, i18) | 0;
    HEAP32[i1 + 8 >> 2] = i25;
    HEAP32[i1 + 4 >> 2] = i25;
    HEAP32[i17 + 16 >> 2] = i17;
    HEAP8[i2 >> 0] = HEAP8[i13 >> 0] | 0;
   }
   i17 = i17 + 48 | 0;
   if (i17 >>> 0 >= (i21 + (i22 * 48 | 0) | 0) >>> 0) {
    i1 = i29 + 44 + (i28 * 28 | 0) + 20 | 0;
    break L81;
   }
  }
  if ((i27 | 0) == 77) {
   HEAP32[i30 >> 2] = 64;
   i1 = 64;
  }
  i29 = i1;
  STACKTOP = i30;
  return i29 | 0;
 } else i1 = i29 + 44 + (i28 * 28 | 0) + 20 | 0; while (0);
 i12 = HEAP32[i1 >> 2] | 0;
 i11 = HEAP32[i29 + 44 + (i28 * 28 | 0) + 12 >> 2] | 0;
 if ((i11 | 0) > 0) i2 = i12; else {
  i29 = 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 do {
  i1 = HEAP32[i2 + 40 >> 2] | 0;
  if (i1) {
   i3 = i1;
   do {
    HEAP32[i3 + 12 >> 2] = i2;
    i3 = HEAP32[i3 + 16 >> 2] | 0;
   } while ((i3 | 0) != (i1 | 0));
  }
  i2 = i2 + 48 | 0;
 } while (i2 >>> 0 < (i12 + (i11 * 48 | 0) | 0) >>> 0);
 i9 = i12;
 do {
  i6 = HEAP32[i9 + 40 >> 2] | 0;
  i7 = i9 + 24 | 0;
  i8 = i9 + 28 | 0;
  i1 = 0;
  i2 = 0;
  i10 = i6;
  do {
   i4 = (HEAP8[i10 >> 0] & 1 ^ 1) & 255;
   i1 = (i4 ^ 1) + i1 | 0;
   i2 = i4 + i2 | 0;
   i4 = i10 + 24 | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if (!i3) i5 = 0; else i5 = (HEAP32[i3 + 12 >> 2] | 0) != (i9 | 0);
   i3 = i10 + 20 | 0;
   do if (i5 | (HEAP32[i3 >> 2] | 0) != 0) {
    i4 = HEAP32[(i5 ? i4 : i3) >> 2] | 0;
    i3 = HEAP32[(i5 ? i8 : i7) >> 2] | 0;
    if (!((i3 | 0) != 0 ? (i29 = (HEAP16[i9 >> 1] | 0) - (HEAP16[i3 >> 1] | 0) | 0, i28 = HEAP16[i10 + 2 >> 1] | 0, i27 = HEAP16[i4 + 2 >> 1] | 0, ((i28 << 16 >> 16 > i27 << 16 >> 16 ? (i28 << 16 >> 16) - (i27 << 16 >> 16) | 0 : (i27 << 16 >> 16) - (i28 << 16 >> 16) | 0) | 0) >= (((i29 | 0) < 0 ? 0 - i29 | 0 : i29) | 0)) : 0)) i3 = HEAP32[i4 + 12 >> 2] | 0;
    if (i5) {
     HEAP32[i8 >> 2] = i3;
     i29 = i3 + 12 | 0;
     HEAP8[i29 >> 0] = HEAPU8[i29 >> 0] | 2;
     break;
    } else {
     HEAP32[i7 >> 2] = i3;
     break;
    }
   } while (0);
   i10 = HEAP32[i10 + 16 >> 2] | 0;
  } while ((i10 | 0) != (i6 | 0));
  HEAP8[i9 + 12 >> 0] = ((i1 | 0) < 1 | (i1 | 0) < (i2 | 0)) & 1 ^ 1;
  if ((HEAP32[i8 >> 2] | 0) != 0 ? (HEAP32[i7 >> 2] | 0) != 0 : 0) HEAP32[i8 >> 2] = 0;
  i9 = i9 + 48 | 0;
 } while (i9 >>> 0 < (i12 + (i11 * 48 | 0) | 0) >>> 0);
 i1 = 0;
 STACKTOP = i30;
 return i1 | 0;
}

function _free(i17) {
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 L1 : do if (i17) {
  i7 = HEAP32[70416] | 0;
  L3 : do if ((i17 + -8 | 0) >>> 0 >= i7 >>> 0 ? (i15 = HEAP32[i17 + -4 >> 2] | 0, (i15 & 3 | 0) != 1) : 0) {
   i14 = i17 + ((i15 & -8) + -8) | 0;
   do if (!(i15 & 1)) {
    i9 = HEAP32[i17 + -8 >> 2] | 0;
    if (!(i15 & 3)) break L1;
    i10 = i17 + (-8 - i9) | 0;
    i11 = i9 + (i15 & -8) | 0;
    if (i10 >>> 0 < i7 >>> 0) break L3;
    if ((i10 | 0) == (HEAP32[70417] | 0)) {
     i1 = HEAP32[i17 + ((i15 & -8) + -4) >> 2] | 0;
     if ((i1 & 3 | 0) != 3) {
      i20 = i10;
      i5 = i11;
      break;
     }
     HEAP32[70414] = i11;
     HEAP32[i17 + ((i15 & -8) + -4) >> 2] = i1 & -2;
     HEAP32[i17 + (-8 - i9 + 4) >> 2] = i11 | 1;
     HEAP32[i14 >> 2] = i11;
     break L1;
    }
    if (i9 >>> 0 < 256) {
     i1 = HEAP32[i17 + (-8 - i9 + 8) >> 2] | 0;
     i2 = HEAP32[i17 + (-8 - i9 + 12) >> 2] | 0;
     do if ((i1 | 0) != (281688 + (i9 >>> 3 << 1 << 2) | 0)) {
      if (i1 >>> 0 >= i7 >>> 0 ? (HEAP32[i1 + 12 >> 2] | 0) == (i10 | 0) : 0) break;
      _abort();
     } while (0);
     if ((i2 | 0) == (i1 | 0)) {
      HEAP32[70412] = HEAP32[70412] & ~(1 << (i9 >>> 3));
      i20 = i10;
      i5 = i11;
      break;
     }
     do if ((i2 | 0) == (281688 + (i9 >>> 3 << 1 << 2) | 0)) i3 = i2 + 8 | 0; else {
      if (i2 >>> 0 >= i7 >>> 0 ? (HEAP32[i2 + 8 >> 2] | 0) == (i10 | 0) : 0) {
       i3 = i2 + 8 | 0;
       break;
      }
      _abort();
     } while (0);
     HEAP32[i1 + 12 >> 2] = i2;
     HEAP32[i3 >> 2] = i1;
     i20 = i10;
     i5 = i11;
     break;
    }
    i6 = HEAP32[i17 + (-8 - i9 + 24) >> 2] | 0;
    i1 = HEAP32[i17 + (-8 - i9 + 12) >> 2] | 0;
    do if ((i1 | 0) == (i10 | 0)) {
     i1 = HEAP32[i17 + (-8 - i9 + 20) >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i17 + (-8 - i9 + 16) >> 2] | 0;
      if (!i1) {
       i8 = 0;
       break;
      } else i2 = i17 + (-8 - i9 + 16) | 0;
     } else i2 = i17 + (-8 - i9 + 20) | 0;
     while (1) {
      i3 = i1 + 20 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4) {
       i1 = i4;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (!i4) break; else {
       i1 = i4;
       i2 = i3;
      }
     }
     if (i2 >>> 0 < i7 >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = 0;
      i8 = i1;
      break;
     }
    } else {
     i2 = HEAP32[i17 + (-8 - i9 + 8) >> 2] | 0;
     if ((i2 >>> 0 >= i7 >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i10 | 0) : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (i10 | 0) : 0) {
      HEAP32[i2 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i2;
      i8 = i1;
      break;
     }
     _abort();
    } while (0);
    if (i6) {
     i1 = HEAP32[i17 + (-8 - i9 + 28) >> 2] | 0;
     if ((i10 | 0) == (HEAP32[281952 + (i1 << 2) >> 2] | 0)) {
      HEAP32[281952 + (i1 << 2) >> 2] = i8;
      if (!i8) {
       HEAP32[70413] = HEAP32[70413] & ~(1 << i1);
       i20 = i10;
       i5 = i11;
       break;
      }
     } else {
      if (i6 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort();
      if ((HEAP32[i6 + 16 >> 2] | 0) == (i10 | 0)) HEAP32[i6 + 16 >> 2] = i8; else HEAP32[i6 + 20 >> 2] = i8;
      if (!i8) {
       i20 = i10;
       i5 = i11;
       break;
      }
     }
     i2 = HEAP32[70416] | 0;
     if (i8 >>> 0 < i2 >>> 0) _abort();
     HEAP32[i8 + 24 >> 2] = i6;
     i1 = HEAP32[i17 + (-8 - i9 + 16) >> 2] | 0;
     do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
      HEAP32[i8 + 16 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i8;
      break;
     } while (0);
     i1 = HEAP32[i17 + (-8 - i9 + 20) >> 2] | 0;
     if (i1) if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
      HEAP32[i8 + 20 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i8;
      i20 = i10;
      i5 = i11;
      break;
     } else {
      i20 = i10;
      i5 = i11;
     }
    } else {
     i20 = i10;
     i5 = i11;
    }
   } else {
    i20 = i17 + -8 | 0;
    i5 = i15 & -8;
   } while (0);
   if (i20 >>> 0 < i14 >>> 0 ? (i13 = HEAP32[i17 + ((i15 & -8) + -4) >> 2] | 0, (i13 & 1 | 0) != 0) : 0) {
    if (!(i13 & 2)) {
     if ((i14 | 0) == (HEAP32[70418] | 0)) {
      i21 = (HEAP32[70415] | 0) + i5 | 0;
      HEAP32[70415] = i21;
      HEAP32[70418] = i20;
      HEAP32[i20 + 4 >> 2] = i21 | 1;
      if ((i20 | 0) != (HEAP32[70417] | 0)) break L1;
      HEAP32[70417] = 0;
      HEAP32[70414] = 0;
      break L1;
     }
     if ((i14 | 0) == (HEAP32[70417] | 0)) {
      i21 = (HEAP32[70414] | 0) + i5 | 0;
      HEAP32[70414] = i21;
      HEAP32[70417] = i20;
      HEAP32[i20 + 4 >> 2] = i21 | 1;
      HEAP32[i20 + i21 >> 2] = i21;
      break L1;
     }
     i5 = (i13 & -8) + i5 | 0;
     do if (i13 >>> 0 >= 256) {
      i6 = HEAP32[i17 + ((i15 & -8) + 16) >> 2] | 0;
      i1 = HEAP32[i17 + (i15 & -8 | 4) >> 2] | 0;
      do if ((i1 | 0) == (i14 | 0)) {
       i1 = HEAP32[i17 + ((i15 & -8) + 12) >> 2] | 0;
       if (!i1) {
        i1 = HEAP32[i17 + ((i15 & -8) + 8) >> 2] | 0;
        if (!i1) {
         i16 = 0;
         break;
        } else i2 = i17 + ((i15 & -8) + 8) | 0;
       } else i2 = i17 + ((i15 & -8) + 12) | 0;
       while (1) {
        i3 = i1 + 20 | 0;
        i4 = HEAP32[i3 >> 2] | 0;
        if (i4) {
         i1 = i4;
         i2 = i3;
         continue;
        }
        i3 = i1 + 16 | 0;
        i4 = HEAP32[i3 >> 2] | 0;
        if (!i4) break; else {
         i1 = i4;
         i2 = i3;
        }
       }
       if (i2 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
        HEAP32[i2 >> 2] = 0;
        i16 = i1;
        break;
       }
      } else {
       i2 = HEAP32[i17 + (i15 & -8) >> 2] | 0;
       if ((i2 >>> 0 >= (HEAP32[70416] | 0) >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i14 | 0) : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (i14 | 0) : 0) {
        HEAP32[i2 + 12 >> 2] = i1;
        HEAP32[i1 + 8 >> 2] = i2;
        i16 = i1;
        break;
       }
       _abort();
      } while (0);
      if (i6) {
       i1 = HEAP32[i17 + ((i15 & -8) + 20) >> 2] | 0;
       if ((i14 | 0) == (HEAP32[281952 + (i1 << 2) >> 2] | 0)) {
        HEAP32[281952 + (i1 << 2) >> 2] = i16;
        if (!i16) {
         HEAP32[70413] = HEAP32[70413] & ~(1 << i1);
         break;
        }
       } else {
        if (i6 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort();
        if ((HEAP32[i6 + 16 >> 2] | 0) == (i14 | 0)) HEAP32[i6 + 16 >> 2] = i16; else HEAP32[i6 + 20 >> 2] = i16;
        if (!i16) break;
       }
       i2 = HEAP32[70416] | 0;
       if (i16 >>> 0 < i2 >>> 0) _abort();
       HEAP32[i16 + 24 >> 2] = i6;
       i1 = HEAP32[i17 + ((i15 & -8) + 8) >> 2] | 0;
       do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
        HEAP32[i16 + 16 >> 2] = i1;
        HEAP32[i1 + 24 >> 2] = i16;
        break;
       } while (0);
       i1 = HEAP32[i17 + ((i15 & -8) + 12) >> 2] | 0;
       if (i1) if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
        HEAP32[i16 + 20 >> 2] = i1;
        HEAP32[i1 + 24 >> 2] = i16;
        break;
       }
      }
     } else {
      i2 = HEAP32[i17 + (i15 & -8) >> 2] | 0;
      i1 = HEAP32[i17 + (i15 & -8 | 4) >> 2] | 0;
      do if ((i2 | 0) != (281688 + (i13 >>> 3 << 1 << 2) | 0)) {
       if (i2 >>> 0 >= (HEAP32[70416] | 0) >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i14 | 0) : 0) break;
       _abort();
      } while (0);
      if ((i1 | 0) == (i2 | 0)) {
       HEAP32[70412] = HEAP32[70412] & ~(1 << (i13 >>> 3));
       break;
      }
      do if ((i1 | 0) == (281688 + (i13 >>> 3 << 1 << 2) | 0)) i12 = i1 + 8 | 0; else {
       if (i1 >>> 0 >= (HEAP32[70416] | 0) >>> 0 ? (HEAP32[i1 + 8 >> 2] | 0) == (i14 | 0) : 0) {
        i12 = i1 + 8 | 0;
        break;
       }
       _abort();
      } while (0);
      HEAP32[i2 + 12 >> 2] = i1;
      HEAP32[i12 >> 2] = i2;
     } while (0);
     HEAP32[i20 + 4 >> 2] = i5 | 1;
     HEAP32[i20 + i5 >> 2] = i5;
     if ((i20 | 0) == (HEAP32[70417] | 0)) {
      HEAP32[70414] = i5;
      break L1;
     }
    } else {
     HEAP32[i17 + ((i15 & -8) + -4) >> 2] = i13 & -2;
     HEAP32[i20 + 4 >> 2] = i5 | 1;
     HEAP32[i20 + i5 >> 2] = i5;
    }
    i2 = i5 >>> 3;
    if (i5 >>> 0 < 256) {
     i1 = HEAP32[70412] | 0;
     if (i1 & 1 << i2) {
      i1 = HEAP32[281688 + ((i2 << 1) + 2 << 2) >> 2] | 0;
      if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
       i18 = 281688 + ((i2 << 1) + 2 << 2) | 0;
       i19 = i1;
      }
     } else {
      HEAP32[70412] = i1 | 1 << i2;
      i18 = 281688 + ((i2 << 1) + 2 << 2) | 0;
      i19 = 281688 + (i2 << 1 << 2) | 0;
     }
     HEAP32[i18 >> 2] = i20;
     HEAP32[i19 + 12 >> 2] = i20;
     HEAP32[i20 + 8 >> 2] = i19;
     HEAP32[i20 + 12 >> 2] = 281688 + (i2 << 1 << 2);
     break L1;
    }
    i1 = i5 >>> 8;
    if (i1) if (i5 >>> 0 > 16777215) i4 = 31; else {
     i4 = i1 << ((i1 + 1048320 | 0) >>> 16 & 8) << (((i1 << ((i1 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4);
     i4 = 14 - (((i1 << ((i1 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4 | (i1 + 1048320 | 0) >>> 16 & 8 | (i4 + 245760 | 0) >>> 16 & 2) + (i4 << ((i4 + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
     i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
    } else i4 = 0;
    i1 = 281952 + (i4 << 2) | 0;
    HEAP32[i20 + 28 >> 2] = i4;
    HEAP32[i20 + 20 >> 2] = 0;
    HEAP32[i20 + 16 >> 2] = 0;
    i2 = HEAP32[70413] | 0;
    i3 = 1 << i4;
    L168 : do if (i2 & i3) {
     i1 = HEAP32[i1 >> 2] | 0;
     L171 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
      i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i2 = HEAP32[i3 >> 2] | 0;
       if (!i2) break;
       if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
        i21 = i2;
        break L171;
       } else {
        i4 = i4 << 1;
        i1 = i2;
       }
      }
      if (i3 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
       HEAP32[i3 >> 2] = i20;
       HEAP32[i20 + 24 >> 2] = i1;
       HEAP32[i20 + 12 >> 2] = i20;
       HEAP32[i20 + 8 >> 2] = i20;
       break L168;
      }
     } else i21 = i1; while (0);
     i1 = i21 + 8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     i19 = HEAP32[70416] | 0;
     if (i2 >>> 0 >= i19 >>> 0 & i21 >>> 0 >= i19 >>> 0) {
      HEAP32[i2 + 12 >> 2] = i20;
      HEAP32[i1 >> 2] = i20;
      HEAP32[i20 + 8 >> 2] = i2;
      HEAP32[i20 + 12 >> 2] = i21;
      HEAP32[i20 + 24 >> 2] = 0;
      break;
     } else _abort();
    } else {
     HEAP32[70413] = i2 | i3;
     HEAP32[i1 >> 2] = i20;
     HEAP32[i20 + 24 >> 2] = i1;
     HEAP32[i20 + 12 >> 2] = i20;
     HEAP32[i20 + 8 >> 2] = i20;
    } while (0);
    i21 = (HEAP32[70420] | 0) + -1 | 0;
    HEAP32[70420] = i21;
    if (!i21) i1 = 282104; else break L1;
    while (1) {
     i1 = HEAP32[i1 >> 2] | 0;
     if (!i1) break; else i1 = i1 + 8 | 0;
    }
    HEAP32[70420] = -1;
    break L1;
   }
  } while (0);
  _abort();
 } while (0);
 return;
}

function __ZN5Image23ConvertToFormatInternalE13TextureFormat(i10, i9) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP32[i10 + 28 >> 2] | 0) == (i9 | 0)) {
  i11 = 1;
  STACKTOP = i12;
  return i11 | 0;
 }
 i5 = HEAP32[i10 + 16 >> 2] | 0;
 i2 = HEAP32[i10 + 20 >> 2] | 0;
 L4 : do if ((i9 | 0) >= 59) {
  L10 : do if ((i9 | 0) >= 88) {
   if ((i9 | 0) >= 1048578) {
    if ((i9 | 0) < 4194324) switch (i9 | 0) {
    case 1048582:
     {
      i11 = 7;
      break L4;
     }
    case 1048583:
    case 1048579:
    case 1048578:
    case 1048580:
     {
      i11 = 9;
      break L4;
     }
    case 1048584:
    case 1048581:
     {
      i11 = 10;
      break L10;
     }
    default:
     {
      i11 = 12;
      break L4;
     }
    }
    switch (i9 | 0) {
    case 4194339:
    case 4194337:
     {
      i11 = 7;
      break L4;
     }
    case 4194334:
    case 4194333:
     {
      i11 = 9;
      break L4;
     }
    case 4194356:
    case 4194354:
    case 4194331:
     {
      i11 = 10;
      break L10;
     }
    case 4194324:
     break;
    default:
     {
      i11 = 12;
      break L4;
     }
    }
    i1 = 24;
    i3 = i5;
    i11 = 13;
    break L4;
   }
   if ((i9 | 0) < 95) switch (i9 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
    {
     i11 = 7;
     break L4;
    }
   case 94:
    {
     i11 = 4;
     break L10;
    }
   default:
    {
     i11 = 12;
     break L4;
    }
   }
   if ((i9 | 0) < 99) switch (i9 | 0) {
   case 98:
   case 97:
   case 96:
   case 95:
    {
     i11 = 4;
     break L10;
    }
   default:
    {
     i11 = 12;
     break L4;
    }
   }
   if ((i9 | 0) < 1048576) switch (i9 | 0) {
   case 115:
    {
     i11 = 9;
     break L4;
    }
   case 99:
    {
     i11 = 4;
     break L10;
    }
   default:
    {
     i11 = 12;
     break L4;
    }
   } else switch (i9 | 0) {
   case 1048577:
    {
     i11 = 9;
     break L4;
    }
   case 1048576:
    {
     i11 = 3;
     break L10;
    }
   default:
    {
     i11 = 12;
     break L4;
    }
   }
  } else {
   switch (i9 | 0) {
   case 87:
   case 69:
   case 68:
   case 67:
    {
     i11 = 7;
     break L4;
    }
   case 86:
   case 85:
   case 59:
    {
     i11 = 9;
     break L4;
    }
   case 72:
   case 71:
   case 70:
    {
     i11 = 3;
     break L10;
    }
   case 84:
   case 83:
   case 82:
   case 81:
   case 80:
   case 79:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
    {
     i11 = 4;
     break L10;
    }
   case 65:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
    {
     i11 = 10;
     break L10;
    }
   case 66:
    break;
   default:
    {
     i11 = 12;
     break L4;
    }
   }
   i1 = 1;
   i3 = i5;
   i11 = 13;
   break L4;
  } while (0);
  if ((i11 | 0) == 3) {
   i4 = Math_imul(((i5 + 3 | 0) / 4 | 0) << 3, (i2 + 3 | 0) / 4 | 0) | 0;
   i3 = i5;
   i11 = 14;
   break;
  } else if ((i11 | 0) == 4) {
   i4 = Math_imul(((i5 + 3 | 0) / 4 | 0) << 4, (i2 + 3 | 0) / 4 | 0) | 0;
   i3 = i5;
   i11 = 14;
   break;
  } else if ((i11 | 0) == 10) {
   i1 = 8;
   i3 = i5;
   i11 = 13;
   break;
  }
 } else switch (i9 | 0) {
 case 0:
  {
   i7 = 0;
   i4 = 0;
   i3 = i5;
   break L4;
  }
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i1 = 128;
   i3 = i5;
   i11 = 13;
   break L4;
  }
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
  {
   i11 = 7;
   break L4;
  }
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
  {
   i11 = 9;
   break L4;
  }
 case 8:
 case 7:
 case 6:
 case 5:
  {
   i1 = 96;
   i3 = i5;
   i11 = 13;
   break L4;
  }
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
  {
   i1 = 64;
   i3 = i5;
   i11 = 13;
   break L4;
  }
 default:
  {
   i11 = 12;
   break L4;
  }
 } while (0);
 if ((i11 | 0) == 7) {
  i1 = 32;
  i3 = i5;
  i11 = 13;
 } else if ((i11 | 0) == 9) {
  i1 = 16;
  i3 = i5;
  i11 = 13;
 } else if ((i11 | 0) == 12) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i12);
  i1 = 0;
  i3 = HEAP32[i10 + 16 >> 2] | 0;
  i11 = 13;
 }
 if ((i11 | 0) == 13) {
  i4 = ((Math_imul(Math_imul(i2, i5) | 0, i1) | 0) + 7 | 0) / 8 | 0;
  i11 = 14;
 }
 L40 : do if ((i11 | 0) == 14) {
  L42 : do if ((i9 | 0) >= 59) {
   L48 : do if ((i9 | 0) >= 88) {
    if ((i9 | 0) >= 1048578) {
     if ((i9 | 0) < 4194324) switch (i9 | 0) {
     case 1048582:
      {
       i11 = 19;
       break L42;
      }
     case 1048583:
     case 1048579:
     case 1048578:
     case 1048580:
      {
       i11 = 21;
       break L42;
      }
     case 1048584:
     case 1048581:
      {
       i11 = 22;
       break L48;
      }
     default:
      {
       i11 = 24;
       break L42;
      }
     }
     switch (i9 | 0) {
     case 4194339:
     case 4194337:
      {
       i11 = 19;
       break L42;
      }
     case 4194334:
     case 4194333:
      {
       i11 = 21;
       break L42;
      }
     case 4194356:
     case 4194354:
     case 4194331:
      {
       i11 = 22;
       break L48;
      }
     case 4194324:
      break;
     default:
      {
       i11 = 24;
       break L42;
      }
     }
     i1 = 24;
     i2 = i3;
     break L42;
    }
    if ((i9 | 0) < 95) switch (i9 | 0) {
    case 93:
    case 92:
    case 91:
    case 90:
    case 89:
    case 88:
     {
      i11 = 19;
      break L42;
     }
    case 94:
     {
      i11 = 16;
      break L48;
     }
    default:
     {
      i11 = 24;
      break L42;
     }
    }
    if ((i9 | 0) < 99) switch (i9 | 0) {
    case 98:
    case 97:
    case 96:
    case 95:
     {
      i11 = 16;
      break L48;
     }
    default:
     {
      i11 = 24;
      break L42;
     }
    }
    if ((i9 | 0) < 1048576) switch (i9 | 0) {
    case 115:
     {
      i11 = 21;
      break L42;
     }
    case 99:
     {
      i11 = 16;
      break L48;
     }
    default:
     {
      i11 = 24;
      break L42;
     }
    } else switch (i9 | 0) {
    case 1048577:
     {
      i11 = 21;
      break L42;
     }
    case 1048576:
     {
      i11 = 15;
      break L48;
     }
    default:
     {
      i11 = 24;
      break L42;
     }
    }
   } else {
    switch (i9 | 0) {
    case 87:
    case 69:
    case 68:
    case 67:
     {
      i11 = 19;
      break L42;
     }
    case 86:
    case 85:
    case 59:
     {
      i11 = 21;
      break L42;
     }
    case 72:
    case 71:
    case 70:
     {
      i11 = 15;
      break L48;
     }
    case 84:
    case 83:
    case 82:
    case 81:
    case 80:
    case 79:
    case 78:
    case 77:
    case 76:
    case 75:
    case 74:
    case 73:
     {
      i11 = 16;
      break L48;
     }
    case 65:
    case 64:
    case 63:
    case 62:
    case 61:
    case 60:
     {
      i11 = 22;
      break L48;
     }
    case 66:
     break;
    default:
     {
      i11 = 24;
      break L42;
     }
    }
    i1 = 1;
    i2 = i3;
    break L42;
   } while (0);
   if ((i11 | 0) == 15) {
    i7 = ((i3 + 3 | 0) / 4 | 0) << 3;
    break L40;
   } else if ((i11 | 0) == 16) {
    i7 = ((i3 + 3 | 0) / 4 | 0) << 4;
    break L40;
   } else if ((i11 | 0) == 22) {
    i1 = 8;
    i2 = i3;
    break;
   }
  } else switch (i9 | 0) {
  case 0:
   {
    i7 = 0;
    break L40;
   }
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i1 = 128;
    i2 = i3;
    break L42;
   }
  case 47:
  case 46:
  case 45:
  case 44:
  case 43:
  case 42:
  case 41:
  case 40:
  case 39:
  case 38:
  case 37:
  case 36:
  case 35:
  case 34:
  case 33:
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
  case 26:
  case 25:
  case 24:
  case 23:
   {
    i11 = 19;
    break L42;
   }
  case 58:
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
  case 48:
   {
    i11 = 21;
    break L42;
   }
  case 8:
  case 7:
  case 6:
  case 5:
   {
    i1 = 96;
    i2 = i3;
    break L42;
   }
  case 22:
  case 21:
  case 20:
  case 19:
  case 18:
  case 17:
  case 16:
  case 15:
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i1 = 64;
    i2 = i3;
    break L42;
   }
  default:
   {
    i11 = 24;
    break L42;
   }
  } while (0);
  if ((i11 | 0) == 19) {
   i1 = 32;
   i2 = i3;
  } else if ((i11 | 0) == 21) {
   i1 = 16;
   i2 = i3;
  } else if ((i11 | 0) == 24) {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i12 + 8 | 0);
   i1 = 0;
   i2 = HEAP32[i10 + 16 >> 2] | 0;
  }
  i7 = ((Math_imul(i1, i3) | 0) + 7 | 0) / 8 | 0;
  i3 = i2;
 } while (0);
 i2 = HEAP32[i10 + 20 >> 2] | 0;
 i5 = HEAP32[i10 + 32 >> 2] | 0;
 i6 = __Znaj(i4) | 0;
 i1 = HEAP32[i10 + 28 >> 2] | 0;
 L78 : do if ((i1 | 0) >= 81) {
  if ((i1 | 0) < 95) switch (i1 | 0) {
  case 94:
  case 84:
  case 83:
  case 82:
  case 81:
   {
    i11 = 27;
    break L78;
   }
  default:
   {
    i11 = 28;
    break L78;
   }
  }
  if ((i1 | 0) < 98) switch (i1 | 0) {
  case 97:
  case 96:
  case 95:
   {
    i11 = 27;
    break L78;
   }
  default:
   {
    i11 = 28;
    break L78;
   }
  }
  if ((i1 | 0) < 99) switch (i1 | 0) {
  case 98:
   {
    i11 = 27;
    break L78;
   }
  default:
   {
    i11 = 28;
    break L78;
   }
  }
  if ((i1 | 0) < 1048576) switch (i1 | 0) {
  case 99:
   {
    i11 = 27;
    break L78;
   }
  default:
   {
    i11 = 28;
    break L78;
   }
  } else switch (i1 | 0) {
  case 1048576:
   {
    i11 = 27;
    break L78;
   }
  default:
   {
    i11 = 28;
    break L78;
   }
  }
 } else switch (i1 | 0) {
 case 78:
 case 77:
 case 76:
 case 75:
 case 74:
 case 73:
 case 80:
 case 79:
 case 72:
 case 71:
 case 70:
  {
   i11 = 27;
   break;
  }
 default:
  i11 = 28;
 } while (0);
 if ((i11 | 0) == 27) if (__Z21DecodeCompressedImagePKv13TextureFormatiiPhjS1_(HEAP32[i10 >> 2] | 0, i1, i3, i2, i6, i4, i9) | 0) i1 = i10; else i11 = 33; else if ((i11 | 0) == 28) if (__Z21ConvertRawImageFormat13TextureFormatPKhjiiS_Phj(i1, HEAP32[i10 >> 2] | 0, HEAP32[i10 + 4 >> 2] | 0, i3, i2, i9, i6, i4) | 0) i1 = i10; else i11 = 33;
 if ((i11 | 0) == 33) {
  __ZdaPv(i6);
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 if ((HEAP8[i10 + 8 >> 0] | 0) != 0 ? (i8 = HEAP32[i1 >> 2] | 0, (i8 | 0) != 0) : 0) __ZdaPv(i8);
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 12 + 4 >> 2] = 0;
 HEAP32[i10 + 12 + 8 >> 2] = 0;
 HEAP32[i10 + 12 + 12 >> 2] = 0;
 HEAP32[i10 + 12 + 16 >> 2] = 0;
 HEAP32[i1 >> 2] = i6;
 HEAP32[i10 + 4 >> 2] = i4;
 HEAP8[i10 + 8 >> 0] = 1;
 HEAP32[i10 + 12 >> 2] = i7;
 HEAP32[i10 + 16 >> 2] = i3;
 HEAP32[i10 + 20 >> 2] = i2;
 HEAP32[i10 + 24 >> 2] = 1;
 HEAP32[i10 + 28 >> 2] = i9;
 HEAP32[i10 + 32 >> 2] = i5;
 i11 = 1;
 STACKTOP = i12;
 return i11 | 0;
}

function _af_loader_load_g(i18, i16, i17, i14, i15) {
 i18 = i18 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i19 = HEAP32[i18 + 8 >> 2] | 0;
 i20 = HEAP32[i18 + 132 >> 2] | 0;
 i21 = HEAP32[i1 + 84 >> 2] | 0;
 i22 = HEAP32[i21 + 156 >> 2] | 0;
 i1 = _FT_Load_Glyph(i1, i17, i14 | 8192) | 0;
 if (i1) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 i12 = HEAP8[i22 + 8 >> 0] | 0;
 HEAP8[i18 + 136 >> 0] = i12;
 if (i12 << 24 >> 24) {
  HEAP32[i18 + 140 >> 2] = HEAP32[i22 + 12 >> 2];
  HEAP32[i18 + 140 + 4 >> 2] = HEAP32[i22 + 12 + 4 >> 2];
  HEAP32[i18 + 140 + 8 >> 2] = HEAP32[i22 + 12 + 8 >> 2];
  HEAP32[i18 + 140 + 12 >> 2] = HEAP32[i22 + 12 + 12 >> 2];
  i12 = HEAP32[i22 + 28 + 4 >> 2] | 0;
  HEAP32[i18 + 156 >> 2] = HEAP32[i22 + 28 >> 2];
  HEAP32[i18 + 156 + 4 >> 2] = i12;
  HEAP32[i24 + 48 >> 2] = HEAP32[i18 + 140 >> 2];
  HEAP32[i24 + 48 + 4 >> 2] = HEAP32[i18 + 140 + 4 >> 2];
  HEAP32[i24 + 48 + 8 >> 2] = HEAP32[i18 + 140 + 8 >> 2];
  HEAP32[i24 + 48 + 12 >> 2] = HEAP32[i18 + 140 + 12 >> 2];
  _FT_Matrix_Invert(i24 + 48 | 0) | 0;
  _FT_Vector_Transform(i18 + 156 | 0, i24 + 48 | 0);
 }
 i1 = HEAP32[i21 + 72 >> 2] | 0;
 L7 : do if ((i1 | 0) < 1869968492) {
  switch (i1 | 0) {
  case 1668246896:
   break;
  default:
   {
    i1 = 7;
    break L7;
   }
  }
  i11 = HEAP32[i21 + 128 >> 2] | 0;
  i12 = HEAP16[i19 + 22 >> 1] | 0;
  i1 = _FT_GlyphLoader_CheckSubGlyphs(i19, i11) | 0;
  if (i1) {
   i23 = i1;
   STACKTOP = i24;
   return i23 | 0;
  }
  _memcpy(HEAP32[i19 + 88 >> 2] | 0, HEAP32[i21 + 132 >> 2] | 0, i11 << 5 | 0) | 0;
  HEAP32[i19 + 84 >> 2] = i11;
  i8 = HEAP32[i19 + 48 >> 2] | 0;
  if (i11) {
   i10 = 0;
   while (1) {
    i7 = i10 + i8 | 0;
    i2 = HEAP32[i18 + 164 >> 2] | 0;
    i3 = HEAP32[i18 + 164 + 4 >> 2] | 0;
    i4 = HEAP32[i18 + 172 >> 2] | 0;
    i5 = HEAP32[i18 + 172 + 4 >> 2] | 0;
    i9 = HEAP16[i19 + 22 >> 1] | 0;
    i1 = _af_loader_load_g(i18, i16, HEAP32[(HEAP32[i19 + 52 >> 2] | 0) + (i7 << 5) >> 2] | 0, i14, i15 + 1 | 0) | 0;
    if (i1) {
     i23 = 59;
     break;
    }
    i6 = HEAP32[i19 + 52 >> 2] | 0;
    i1 = HEAP16[i6 + (i7 << 5) + 4 >> 1] | 0;
    if (!(i1 & 512)) {
     HEAP32[i18 + 164 >> 2] = i2;
     HEAP32[i18 + 164 + 4 >> 2] = i3;
     HEAP32[i18 + 172 >> 2] = i4;
     HEAP32[i18 + 172 + 4 >> 2] = i5;
     i1 = HEAP16[i6 + (i7 << 5) + 4 >> 1] | 0;
    }
    i4 = HEAP16[i19 + 22 >> 1] | 0;
    if ((i1 & 200) != 0 ? (i13 = HEAP32[i19 + 24 >> 2] | 0, i4 << 16 >> 16 > i9 << 16 >> 16) : 0) {
     i1 = i13 + (i9 << 16 >> 16 << 3) | 0;
     do {
      _FT_Vector_Transform(i1, i6 + (i7 << 5) + 16 | 0);
      i1 = i1 + 8 | 0;
     } while (i1 >>> 0 < (i13 + (i4 << 16 >> 16 << 3) | 0) >>> 0);
     i1 = HEAP16[i6 + (i7 << 5) + 4 >> 1] | 0;
    }
    i3 = HEAP32[i6 + (i7 << 5) + 8 >> 2] | 0;
    if (!(i1 & 2)) {
     i1 = HEAP32[i6 + (i7 << 5) + 12 >> 2] | 0;
     if (!((i3 + i12 | 0) >>> 0 < i9 << 16 >> 16 >>> 0 ? i1 >>> 0 < ((i4 << 16 >> 16) - (i9 << 16 >> 16) | 0) >>> 0 : 0)) {
      i1 = 21;
      i23 = 59;
      break;
     }
     i7 = HEAP32[i19 + 24 >> 2] | 0;
     i2 = (HEAP32[i7 + (i3 + i12 << 3) >> 2] | 0) - (HEAP32[i7 + ((i9 << 16 >> 16) + i12 + i1 << 3) >> 2] | 0) | 0;
     i1 = (HEAP32[i7 + (i3 + i12 << 3) + 4 >> 2] | 0) - (HEAP32[i7 + ((i9 << 16 >> 16) + i12 + i1 << 3) + 4 >> 2] | 0) | 0;
    } else {
     i5 = _FT_MulFix(i3, HEAP32[i18 + 16 >> 2] | 0) | 0;
     i2 = HEAP32[i18 + 20 >> 2] | 0;
     i1 = _FT_MulFix(HEAP32[i6 + (i7 << 5) + 12 >> 2] | 0, HEAP32[i18 + 24 >> 2] | 0) | 0;
     i2 = i5 + 32 + i2 & -64;
     i1 = i1 + 32 + (HEAP32[i18 + 28 >> 2] | 0) & -64;
    };
    HEAP32[i24 + 24 >> 2] = HEAP32[i19 + 20 >> 2];
    HEAP32[i24 + 24 + 4 >> 2] = HEAP32[i19 + 20 + 4 >> 2];
    HEAP32[i24 + 24 + 8 >> 2] = HEAP32[i19 + 20 + 8 >> 2];
    HEAP32[i24 + 24 + 12 >> 2] = HEAP32[i19 + 20 + 12 >> 2];
    HEAP32[i24 + 24 + 16 >> 2] = HEAP32[i19 + 20 + 16 >> 2];
    HEAP32[i24 + 24 + 4 >> 2] = (HEAP32[i24 + 24 + 4 >> 2] | 0) + (i9 << 16 >> 16 << 3);
    HEAP16[i24 + 24 + 2 >> 1] = (i4 << 16 >> 16) - (i9 << 16 >> 16);
    _FT_Outline_Translate(i24 + 24 | 0, i2, i1);
    i10 = i10 + 1 | 0;
    if (i10 >>> 0 >= i11 >>> 0) {
     i1 = 0;
     break L7;
    }
   }
   if ((i23 | 0) == 59) {
    STACKTOP = i24;
    return i1 | 0;
   }
  } else i1 = 0;
 } else {
  switch (i1 | 0) {
  case 1869968492:
   break;
  default:
   {
    i1 = 7;
    break L7;
   }
  }
  if (HEAP8[i18 + 136 >> 0] | 0) _FT_Outline_Translate(i21 + 108 | 0, HEAP32[i18 + 156 >> 2] | 0, HEAP32[i18 + 160 >> 2] | 0);
  i1 = HEAP16[i21 + 110 >> 1] | 0;
  if (((i1 << 16 >> 16) + 4 | 0) != 0 ? ((HEAP16[i19 + 22 >> 1] | 0) + ((i1 << 16 >> 16) + 4) + (HEAP16[i19 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i19 + 4 >> 2] | 0) >>> 0 : 0) {
   i2 = i21 + 108 | 0;
   i3 = HEAP16[i21 + 108 >> 1] | 0;
   i23 = 12;
  } else {
   i3 = HEAP16[i21 + 108 >> 1] | 0;
   if (i3 << 16 >> 16 != 0 ? ((HEAP16[i19 + 20 >> 1] | 0) + (i3 << 16 >> 16) + (HEAP16[i19 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i19 + 8 >> 2] | 0) >>> 0 : 0) {
    i2 = i21 + 108 | 0;
    i23 = 12;
   } else i2 = i21 + 108 | 0;
  }
  do if ((i23 | 0) == 12) {
   i1 = _FT_GlyphLoader_CheckPoints(i19, (i1 << 16 >> 16) + 4 | 0, i3 << 16 >> 16) | 0;
   if (!i1) {
    i1 = HEAP16[i21 + 110 >> 1] | 0;
    break;
   } else {
    i23 = i1;
    STACKTOP = i24;
    return i23 | 0;
   }
  } while (0);
  _memcpy(HEAP32[i19 + 60 >> 2] | 0, HEAP32[i21 + 112 >> 2] | 0, i1 << 16 >> 16 << 3 | 0) | 0;
  _memcpy(HEAP32[i19 + 68 >> 2] | 0, HEAP32[i21 + 120 >> 2] | 0, HEAP16[i2 >> 1] << 1 | 0) | 0;
  _memcpy(HEAP32[i19 + 64 >> 2] | 0, HEAP32[i21 + 116 >> 2] | 0, HEAP16[i21 + 110 >> 1] | 0) | 0;
  HEAP16[i19 + 58 >> 1] = HEAP16[i21 + 110 >> 1] | 0;
  HEAP16[i19 + 56 >> 1] = HEAP16[i2 >> 1] | 0;
  HEAP32[i18 + 164 >> 2] = HEAP32[i18 + 20 >> 2];
  HEAP32[i18 + 168 >> 2] = HEAP32[i18 + 28 >> 2];
  i14 = _FT_MulFix(HEAP32[i21 + 40 >> 2] | 0, HEAP32[i18 + 16 >> 2] | 0) | 0;
  HEAP32[i18 + 172 >> 2] = (HEAP32[i18 + 20 >> 2] | 0) + i14;
  HEAP32[i18 + 176 >> 2] = HEAP32[i18 + 28 >> 2];
  if (!(HEAP16[i21 + 110 >> 1] | 0)) i1 = 0; else {
   i1 = HEAP32[(HEAP32[i20 >> 2] | 0) + 28 >> 2] | 0;
   if (i1) FUNCTION_TABLE_viii[i1 & 31](i18 + 12 | 0, i19 + 56 | 0, i20);
   do if ((HEAP32[i16 + 20 >> 2] | 0) == 1) {
    i12 = HEAP32[i18 + 164 >> 2] | 0;
    i14 = HEAP32[i18 + 172 >> 2] | 0;
    i11 = i12 + 32 + (HEAP32[i18 + 124 >> 2] | 0) & -64;
    HEAP32[i18 + 164 >> 2] = i11;
    i13 = i14 + 32 + (HEAP32[i18 + 128 >> 2] | 0) & -64;
    HEAP32[i18 + 172 >> 2] = i13;
    HEAP32[i21 + 144 >> 2] = i11 - i12;
    HEAP32[i21 + 148 >> 2] = i13 - i14;
   } else {
    i1 = HEAP32[i18 + 76 >> 2] | 0;
    i2 = HEAP32[i18 + 68 >> 2] | 0;
    if ((i2 | 0) > 1 ? (HEAP32[i18 + 112 >> 2] & 4 | 0) == 0 : 0) {
     i5 = (HEAP32[i18 + 172 >> 2] | 0) - (HEAP32[i1 + ((i2 + -1 | 0) * 48 | 0) + 4 >> 2] | 0) | 0;
     i13 = HEAP32[i1 + 4 >> 2] | 0;
     i14 = HEAP32[i1 + 8 >> 2] | 0;
     i1 = HEAP32[i1 + ((i2 + -1 | 0) * 48 | 0) + 8 >> 2] | 0;
     i2 = (i13 | 0) < 24 ? i14 - i13 + -8 | 0 : i14 - i13 | 0;
     i4 = (i5 | 0) < 24 ? i1 + i5 + 8 | 0 : i1 + i5 | 0;
     HEAP32[i18 + 164 >> 2] = i2 + 32 & -64;
     HEAP32[i18 + 172 >> 2] = i4 + 32 & -64;
     if ((i13 | 0) > 0 & (i2 + 32 & -64 | 0) >= (i14 | 0)) {
      HEAP32[i18 + 164 >> 2] = (i2 + 32 & -64) + -64;
      i3 = (i2 + 32 & -64) + -64 | 0;
     } else i3 = i2 + 32 & -64;
     if ((i5 | 0) > 0 & (i4 + 32 & -64 | 0) <= (i1 | 0)) {
      HEAP32[i18 + 172 >> 2] = (i4 + 32 & -64) + 64;
      i1 = (i4 + 32 & -64) + 64 | 0;
     } else i1 = i4 + 32 & -64;
     HEAP32[i21 + 144 >> 2] = i3 - i2;
     HEAP32[i21 + 148 >> 2] = i1 - i4;
     break;
    }
    i13 = HEAP32[i18 + 164 >> 2] | 0;
    i14 = HEAP32[i18 + 172 >> 2] | 0;
    HEAP32[i18 + 164 >> 2] = i13 + 32 & -64;
    HEAP32[i18 + 172 >> 2] = i14 + 32 & -64;
    HEAP32[i21 + 144 >> 2] = (i13 + 32 & -64) - i13;
    HEAP32[i21 + 148 >> 2] = (i14 + 32 & -64) - i14;
   } while (0);
   _FT_GlyphLoader_Add(i19);
   i1 = 0;
  }
 } while (0);
 if (i15) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 i15 = (HEAP32[i21 + 48 >> 2] | 0) - (HEAP32[i21 + 36 >> 2] | 0) | 0;
 HEAP32[i24 >> 2] = _FT_MulFix((HEAP32[i21 + 44 >> 2] | 0) - (HEAP32[i21 + 32 >> 2] | 0) | 0, HEAP32[i20 + 8 >> 2] | 0) | 0;
 HEAP32[i24 + 4 >> 2] = _FT_MulFix(i15, HEAP32[i20 + 12 >> 2] | 0) | 0;
 if (HEAP8[i18 + 136 >> 0] | 0) {
  _FT_Outline_Transform(i19 + 20 | 0, i18 + 140 | 0);
  _FT_Vector_Transform(i24, i18 + 140 | 0);
 }
 i1 = HEAP32[i18 + 164 >> 2] | 0;
 if (i1) _FT_Outline_Translate(i19 + 20 | 0, 0 - i1 | 0, 0);
 _FT_Outline_Get_CBox(i19 + 20 | 0, i24 + 8 | 0);
 i14 = HEAP32[i24 + 8 >> 2] & -64;
 HEAP32[i24 + 8 >> 2] = i14;
 i13 = HEAP32[i24 + 8 + 4 >> 2] & -64;
 HEAP32[i24 + 8 + 4 >> 2] = i13;
 i12 = (HEAP32[i24 + 8 + 8 >> 2] | 0) + 63 & -64;
 HEAP32[i24 + 8 + 8 >> 2] = i12;
 i15 = (HEAP32[i24 + 8 + 12 >> 2] | 0) + 63 & -64;
 HEAP32[i24 + 8 + 12 >> 2] = i15;
 HEAP32[i21 + 24 >> 2] = i12 - i14;
 HEAP32[i21 + 28 >> 2] = i15 - i13;
 HEAP32[i21 + 32 >> 2] = i14;
 HEAP32[i21 + 36 >> 2] = i15;
 HEAP32[i21 + 44 >> 2] = (HEAP32[i24 >> 2] | 0) + i14 & -64;
 HEAP32[i21 + 48 >> 2] = (HEAP32[i24 + 4 >> 2] | 0) + i15 & -64;
 do if ((HEAP32[i16 + 20 >> 2] | 0) == 1) i23 = 55; else {
  if (!(HEAP32[(HEAP32[i21 + 4 >> 2] | 0) + 8 >> 2] & 4)) {
   i1 = HEAP32[i18 + 4 >> 2] | 0;
   if ((HEAP32[i1 + 4 >> 2] | 0) >>> 0 <= i17 >>> 0) {
    i23 = 55;
    break;
   }
   if ((HEAP8[(HEAP32[i1 + 8 >> 2] | 0) + i17 >> 0] | 0) > -1) {
    i23 = 55;
    break;
   }
   if (!(HEAP8[i20 + 32 >> 0] | 0)) {
    i23 = 55;
    break;
   }
  }
  HEAP32[i21 + 40 >> 2] = _FT_MulFix(HEAP32[i21 + 40 >> 2] | 0, HEAP32[i20 + 8 >> 2] | 0) | 0;
  HEAP32[i21 + 144 >> 2] = 0;
  HEAP32[i21 + 148 >> 2] = 0;
  i1 = i21 + 40 | 0;
 } while (0);
 if ((i23 | 0) == 55) if (!(HEAP32[i21 + 40 >> 2] | 0)) i1 = i21 + 40 | 0; else {
  HEAP32[i21 + 40 >> 2] = (HEAP32[i18 + 172 >> 2] | 0) - (HEAP32[i18 + 164 >> 2] | 0);
  i1 = i21 + 40 | 0;
 }
 i23 = _FT_MulFix(HEAP32[i21 + 52 >> 2] | 0, HEAP32[i20 + 12 >> 2] | 0) | 0;
 HEAP32[i21 + 52 >> 2] = i23;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 32 & -64;
 HEAP32[i21 + 52 >> 2] = i23 + 32 & -64;
 _FT_GlyphLoader_Rewind(HEAP32[i22 >> 2] | 0);
 i1 = _FT_GlyphLoader_CopyPoints(HEAP32[i22 >> 2] | 0, i19) | 0;
 if (i1) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 i23 = HEAP32[i22 >> 2] | 0;
 HEAP16[i21 + 108 >> 1] = HEAP16[i23 + 20 >> 1] | 0;
 HEAP16[i21 + 110 >> 1] = HEAP16[i23 + 22 >> 1] | 0;
 HEAP32[i21 + 112 >> 2] = HEAP32[i23 + 24 >> 2];
 HEAP32[i21 + 116 >> 2] = HEAP32[i23 + 28 >> 2];
 HEAP32[i21 + 120 >> 2] = HEAP32[i23 + 32 >> 2];
 HEAP32[i21 + 72 >> 2] = 1869968492;
 i23 = 0;
 STACKTOP = i24;
 return i23 | 0;
}

function _gray_raster_render(i9, i11) {
 i9 = i9 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i8 = HEAP32[i11 + 4 >> 2] | 0;
 i10 = HEAP32[i11 >> 2] | 0;
 if (!i9) {
  i17 = 6;
  STACKTOP = i18;
  return i17 | 0;
 }
 i7 = HEAP32[i9 >> 2] | 0;
 if (!i7) {
  i17 = 6;
  STACKTOP = i18;
  return i17 | 0;
 }
 i3 = HEAP32[i9 + 4 >> 2] | 0;
 if (!i3) {
  i17 = 6;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (!i8) {
  i17 = 20;
  STACKTOP = i18;
  return i17 | 0;
 }
 i4 = HEAP16[i8 + 2 >> 1] | 0;
 if (!(i4 << 16 >> 16)) {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i5 = HEAP16[i8 >> 1] | 0;
 if (i5 << 16 >> 16 < 1) {
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i6 = HEAP32[i8 + 12 >> 2] | 0;
 if (!i6) {
  i17 = 20;
  STACKTOP = i18;
  return i17 | 0;
 }
 if (!(HEAP32[i8 + 4 >> 2] | 0)) {
  i17 = 20;
  STACKTOP = i18;
  return i17 | 0;
 }
 if ((i4 << 16 >> 16 | 0) != ((HEAP16[i6 + ((i5 << 16 >> 16) + -1 << 1) >> 1] | 0) + 1 | 0)) {
  i17 = 20;
  STACKTOP = i18;
  return i17 | 0;
 }
 i16 = HEAP32[i9 + 16 >> 2] | 0;
 i4 = HEAP32[i11 + 8 >> 2] | 0;
 if (!(i4 & 2)) {
  if (!i10) {
   i17 = 6;
   STACKTOP = i18;
   return i17 | 0;
  }
  if (!(HEAP32[i10 + 4 >> 2] | 0)) {
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
  if (!(HEAP32[i10 >> 2] | 0)) {
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
  if (!(HEAP32[i10 + 12 >> 2] | 0)) {
   i17 = 6;
   STACKTOP = i18;
   return i17 | 0;
  }
 }
 if (!(i4 & 1)) {
  i17 = 19;
  STACKTOP = i18;
  return i17 | 0;
 }
 do if (i4 & 2) if (!(i4 & 4)) {
  HEAP32[i16 + 1024 >> 2] = -32768;
  HEAP32[i16 + 1028 >> 2] = -32768;
  HEAP32[i16 + 1032 >> 2] = 32767;
  HEAP32[i16 + 1036 >> 2] = 32767;
  i4 = i7;
  break;
 } else {
  HEAP32[i16 + 1024 >> 2] = HEAP32[i11 + 32 >> 2];
  HEAP32[i16 + 1024 + 4 >> 2] = HEAP32[i11 + 32 + 4 >> 2];
  HEAP32[i16 + 1024 + 8 >> 2] = HEAP32[i11 + 32 + 8 >> 2];
  HEAP32[i16 + 1024 + 12 >> 2] = HEAP32[i11 + 32 + 12 >> 2];
  i4 = HEAP32[i9 >> 2] | 0;
  i3 = HEAP32[i9 + 4 >> 2] | 0;
  break;
 } else {
  HEAP32[i16 + 1024 >> 2] = 0;
  HEAP32[i16 + 1028 >> 2] = 0;
  HEAP32[i16 + 1032 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i16 + 1036 >> 2] = HEAP32[i10 >> 2];
  i4 = i7;
 } while (0);
 HEAP32[i16 + 1412 >> 2] = i4;
 HEAP32[i16 + 1416 >> 2] = i3;
 HEAP32[i16 + 1420 >> 2] = i4;
 HEAP32[i16 + 44 >> 2] = 0;
 HEAP32[i16 + 48 >> 2] = 0;
 HEAP32[i16 + 52 >> 2] = 0;
 HEAP32[i16 + 32 >> 2] = 0;
 HEAP32[i16 + 36 >> 2] = 0;
 HEAP32[i16 + 40 >> 2] = 1;
 HEAP32[i16 + 980 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i16 + 980 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i16 + 980 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i16 + 980 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i16 + 980 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i16 + 52 >> 2] = 0;
 HEAP32[i16 + 40 >> 2] = 1;
 i14 = HEAP32[i9 + 8 >> 2] | 0;
 HEAP32[i16 + 1248 >> 2] = i14;
 HEAP32[i16 + 1232 >> 2] = 0;
 if (!(HEAP32[i11 + 8 >> 2] & 2)) {
  HEAP32[i16 + 1e3 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i16 + 1e3 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i16 + 1e3 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i16 + 1e3 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
  HEAP32[i16 + 1e3 + 16 >> 2] = HEAP32[i10 + 16 >> 2];
  HEAP32[i16 + 1e3 + 20 >> 2] = HEAP32[i10 + 20 >> 2];
  HEAP32[i16 + 1236 >> 2] = 15;
  HEAP32[i16 + 1240 >> 2] = i16;
 } else {
  HEAP32[i16 + 1236 >> 2] = HEAP32[i11 + 12 >> 2];
  HEAP32[i16 + 1240 >> 2] = HEAP32[i11 + 28 >> 2];
 }
 i12 = HEAP32[i16 + 984 >> 2] | 0;
 i13 = HEAP16[i16 + 982 >> 1] | 0;
 if (i13 << 16 >> 16 < 1) {
  HEAP32[i16 + 8 >> 2] = 0;
  HEAP32[i16 + 8 + 4 >> 2] = 0;
  HEAP32[i16 + 8 + 8 >> 2] = 0;
  HEAP32[i16 + 8 + 12 >> 2] = 0;
  i6 = i16 + 12 | 0;
  i7 = 0;
  i4 = 0;
  i8 = 0;
  i5 = 0;
 } else {
  i3 = HEAP32[i12 >> 2] | 0;
  HEAP32[i16 + 12 >> 2] = i3;
  HEAP32[i16 + 8 >> 2] = i3;
  i7 = HEAP32[i12 + 4 >> 2] | 0;
  HEAP32[i16 + 20 >> 2] = i7;
  HEAP32[i16 + 16 >> 2] = i7;
  if (i13 << 16 >> 16 > 1) {
   i8 = i12;
   i6 = i3;
   i4 = i3;
   i5 = i7;
   i10 = i7;
   i11 = i12 + 8 | 0;
   while (1) {
    i7 = HEAP32[i8 + 8 >> 2] | 0;
    i3 = HEAP32[i8 + 12 >> 2] | 0;
    if ((i7 | 0) < (i6 | 0)) {
     HEAP32[i16 + 8 >> 2] = i7;
     i6 = i7;
    }
    if ((i7 | 0) > (i4 | 0)) {
     HEAP32[i16 + 12 >> 2] = i7;
     i4 = i7;
    }
    if ((i3 | 0) < (i5 | 0)) {
     HEAP32[i16 + 16 >> 2] = i3;
     i5 = i3;
    }
    if ((i3 | 0) > (i10 | 0)) HEAP32[i16 + 20 >> 2] = i3; else i3 = i10;
    i9 = i11 + 8 | 0;
    if (i9 >>> 0 < (i12 + (i13 << 16 >> 16 << 3) | 0) >>> 0) {
     i8 = i11;
     i10 = i3;
     i11 = i9;
    } else break;
   }
  } else {
   i6 = i3;
   i5 = i7;
   i4 = i3;
   i3 = i7;
  }
  i13 = i6 >> 6;
  HEAP32[i16 + 8 >> 2] = i13;
  i5 = i5 >> 6;
  HEAP32[i16 + 16 >> 2] = i5;
  i7 = i4 + 63 >> 6;
  HEAP32[i16 + 12 >> 2] = i7;
  i8 = i3 + 63 >> 6;
  HEAP32[i16 + 20 >> 2] = i8;
  i6 = i16 + 12 | 0;
  i4 = i13;
 }
 i3 = HEAP32[i16 + 1024 >> 2] | 0;
 L76 : do if ((((i7 | 0) > (i3 | 0) ? (i2 = HEAP32[i16 + 1032 >> 2] | 0, (i4 | 0) < (i2 | 0)) : 0) ? (i15 = HEAP32[i16 + 1028 >> 2] | 0, (i8 | 0) > (i15 | 0)) : 0) ? (i1 = HEAP32[i16 + 1036 >> 2] | 0, (i5 | 0) < (i1 | 0)) : 0) {
  if ((i4 | 0) < (i3 | 0)) HEAP32[i16 + 8 >> 2] = i3; else i3 = i4;
  if ((i5 | 0) < (i15 | 0)) {
   HEAP32[i16 + 16 >> 2] = i15;
   i4 = i15;
  } else i4 = i5;
  if ((i7 | 0) > (i2 | 0)) HEAP32[i6 >> 2] = i2; else i2 = i7;
  if ((i8 | 0) > (i1 | 0)) HEAP32[i16 + 20 >> 2] = i1; else i1 = i8;
  HEAP32[i16 + 24 >> 2] = i2 - i3;
  i15 = i1 - i4 | 0;
  HEAP32[i16 + 28 >> 2] = i15;
  HEAP32[i18 + 12 >> 2] = (i15 | 0) / (i14 | 0) | 0;
  if (!(HEAP32[i18 + 12 >> 2] | 0)) HEAP32[i18 + 12 >> 2] = 1;
  if ((HEAP32[i18 + 12 >> 2] | 0) > 38) HEAP32[i18 + 12 >> 2] = 39;
  HEAP32[i16 + 1252 >> 2] = 0;
  HEAP32[i18 + 8 >> 2] = HEAP32[i16 + 16 >> 2];
  HEAP32[i18 >> 2] = HEAP32[i16 + 20 >> 2];
  HEAP32[i18 + 16 >> 2] = 0;
  if ((HEAP32[i18 + 16 >> 2] | 0) < (HEAP32[i18 + 12 >> 2] | 0)) do {
   HEAP32[i18 + 4 >> 2] = (HEAP32[i16 + 1248 >> 2] | 0) + (HEAP32[i18 + 8 >> 2] | 0);
   if (!((HEAP32[i18 + 16 >> 2] | 0) != ((HEAP32[i18 + 12 >> 2] | 0) + -1 | 0) ? (HEAP32[i18 + 4 >> 2] | 0) <= (HEAP32[i18 >> 2] | 0) : 0)) HEAP32[i18 + 4 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i18 + 24 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAP32[i18 + 24 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
   HEAP32[i18 + 20 >> 2] = i18 + 24;
   if ((HEAP32[i18 + 20 >> 2] | 0) >>> 0 >= (i18 + 24 | 0) >>> 0) do {
    i1 = HEAP32[i16 + 1412 >> 2] | 0;
    HEAP32[i16 + 1420 >> 2] = i1;
    i4 = (HEAP32[(HEAP32[i18 + 20 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[HEAP32[i18 + 20 >> 2] >> 2] | 0) | 0;
    HEAP32[i16 + 1424 >> 2] = i4;
    i3 = ((i4 << 2 & 12 | 0) == 0 ? 0 : 16 - (i4 << 2 & 12) | 0) + (i4 << 2) | 0;
    i2 = HEAP32[i16 + 1416 >> 2] & -16;
    HEAP32[i16 + 44 >> 2] = i1 + i3;
    L111 : do if ((i2 | 0) > (i3 | 0)) {
     HEAP32[i16 + 48 >> 2] = i2 - i3 >> 4;
     if ((i2 - i3 | 0) < 32) {
      i17 = 83;
      break;
     }
     do if ((i4 | 0) > 0) {
      HEAP32[i1 >> 2] = 0;
      if ((i4 | 0) > 1) i1 = 1; else break;
      do {
       HEAP32[(HEAP32[i16 + 1420 >> 2] | 0) + (i1 << 2) >> 2] = 0;
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != (i4 | 0));
     } while (0);
     HEAP32[i16 + 52 >> 2] = 0;
     HEAP32[i16 + 40 >> 2] = 1;
     HEAP32[i16 + 16 >> 2] = HEAP32[HEAP32[i18 + 20 >> 2] >> 2];
     HEAP32[i16 + 20 >> 2] = HEAP32[(HEAP32[i18 + 20 >> 2] | 0) + 4 >> 2];
     HEAP32[i16 + 28 >> 2] = (HEAP32[(HEAP32[i18 + 20 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[HEAP32[i18 + 20 >> 2] >> 2] | 0);
     switch (_gray_convert_glyph_inner(i16) | 0) {
     case 64:
      {
       i17 = 83;
       break L111;
      }
     case 0:
      break;
     default:
      {
       i1 = 1;
       break L76;
      }
     }
     do if (HEAP32[i16 + 52 >> 2] | 0) {
      HEAP32[i16 + 1232 >> 2] = 0;
      if ((HEAP32[i16 + 1424 >> 2] | 0) > 0) {
       i5 = 0;
       do {
        i1 = HEAP32[(HEAP32[i16 + 1420 >> 2] | 0) + (i5 << 2) >> 2] | 0;
        do if (i1) {
         i4 = 0;
         i3 = 0;
         while (1) {
          i2 = HEAP32[i1 >> 2] | 0;
          if ((i4 | 0) != 0 & (i2 | 0) > (i3 | 0)) _gray_hline(i16, i3, i5, i4 << 9, i2 - i3 | 0);
          i4 = (HEAP32[i1 + 4 >> 2] | 0) + i4 | 0;
          i2 = HEAP32[i1 + 8 >> 2] | 0;
          do if ((i4 << 9 | 0) != (i2 | 0)) {
           i3 = HEAP32[i1 >> 2] | 0;
           if ((i3 | 0) <= -1) break;
           _gray_hline(i16, i3, i5, (i4 << 9) - i2 | 0, 1);
          } while (0);
          i2 = (HEAP32[i1 >> 2] | 0) + 1 | 0;
          i1 = HEAP32[i1 + 12 >> 2] | 0;
          if (!i1) break; else i3 = i2;
         }
         if (!i4) break;
         _gray_hline(i16, i2, i5, i4 << 9, (HEAP32[i16 + 24 >> 2] | 0) - i2 | 0);
        } while (0);
        i5 = i5 + 1 | 0;
       } while ((i5 | 0) < (HEAP32[i16 + 1424 >> 2] | 0));
      }
      i1 = HEAP32[i16 + 1236 >> 2] | 0;
      if (!i1) break;
      i2 = HEAP32[i16 + 1232 >> 2] | 0;
      if ((i2 | 0) <= 0) break;
      FUNCTION_TABLE_viiii[i1 & 15](HEAP32[i16 + 1244 >> 2] | 0, i2, i16 + 1040 | 0, HEAP32[i16 + 1240 >> 2] | 0);
     } while (0);
     HEAP32[i18 + 20 >> 2] = (HEAP32[i18 + 20 >> 2] | 0) + -8;
    } else i17 = 83; while (0);
    if ((i17 | 0) == 83) {
     i17 = 0;
     i1 = HEAP32[HEAP32[i18 + 20 >> 2] >> 2] | 0;
     i2 = HEAP32[(HEAP32[i18 + 20 >> 2] | 0) + 4 >> 2] | 0;
     if (!(i2 - i1 >> 1)) {
      i1 = 1;
      break L76;
     }
     if ((i1 - i2 | 0) >= (HEAP32[i16 + 1248 >> 2] | 0)) HEAP32[i16 + 1252 >> 2] = (HEAP32[i16 + 1252 >> 2] | 0) + 1;
     HEAP32[(HEAP32[i18 + 20 >> 2] | 0) + 8 >> 2] = i1;
     HEAP32[(HEAP32[i18 + 20 >> 2] | 0) + 12 >> 2] = (i2 - i1 >> 1) + i1;
     HEAP32[HEAP32[i18 + 20 >> 2] >> 2] = (i2 - i1 >> 1) + i1;
     HEAP32[(HEAP32[i18 + 20 >> 2] | 0) + 4 >> 2] = i2;
     HEAP32[i18 + 20 >> 2] = (HEAP32[i18 + 20 >> 2] | 0) + 8;
    }
   } while ((HEAP32[i18 + 20 >> 2] | 0) >>> 0 >= (i18 + 24 | 0) >>> 0);
   HEAP32[i18 + 16 >> 2] = (HEAP32[i18 + 16 >> 2] | 0) + 1;
   HEAP32[i18 + 8 >> 2] = HEAP32[i18 + 4 >> 2];
  } while ((HEAP32[i18 + 16 >> 2] | 0) < (HEAP32[i18 + 12 >> 2] | 0));
  if ((HEAP32[i16 + 1252 >> 2] | 0) <= 8) {
   i1 = 0;
   break;
  }
  i1 = HEAP32[i16 + 1248 >> 2] | 0;
  if ((i1 | 0) <= 16) {
   i1 = 0;
   break;
  }
  HEAP32[i16 + 1248 >> 2] = (i1 | 0) / 2 | 0;
  i1 = 0;
 } else i1 = 0; while (0);
 i17 = i1;
 STACKTOP = i18;
 return i17 | 0;
}

function _dispose_chunk(i13, i14) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i13 + 4 >> 2] | 0;
 do if (!(i1 & 1)) {
  i9 = HEAP32[i13 >> 2] | 0;
  if (i1 & 3) {
   i6 = HEAP32[70416] | 0;
   if ((i13 + (0 - i9) | 0) >>> 0 < i6 >>> 0) _abort();
   if ((i13 + (0 - i9) | 0) == (HEAP32[70417] | 0)) {
    i1 = HEAP32[i13 + (i14 + 4) >> 2] | 0;
    if ((i1 & 3 | 0) != 3) {
     i11 = i13 + (0 - i9) | 0;
     i1 = i9 + i14 | 0;
     i8 = 54;
     break;
    }
    HEAP32[70414] = i9 + i14;
    HEAP32[i13 + (i14 + 4) >> 2] = i1 & -2;
    HEAP32[i13 + (4 - i9) >> 2] = i9 + i14 | 1;
    HEAP32[i13 + i14 >> 2] = i9 + i14;
    break;
   }
   if (i9 >>> 0 < 256) {
    i1 = HEAP32[i13 + (8 - i9) >> 2] | 0;
    i2 = HEAP32[i13 + (12 - i9) >> 2] | 0;
    do if ((i1 | 0) != (281688 + (i9 >>> 3 << 1 << 2) | 0)) {
     if (i1 >>> 0 >= i6 >>> 0 ? (HEAP32[i1 + 12 >> 2] | 0) == (i13 + (0 - i9) | 0) : 0) break;
     _abort();
    } while (0);
    if ((i2 | 0) == (i1 | 0)) {
     HEAP32[70412] = HEAP32[70412] & ~(1 << (i9 >>> 3));
     i11 = i13 + (0 - i9) | 0;
     i1 = i9 + i14 | 0;
     i8 = 54;
     break;
    }
    do if ((i2 | 0) == (281688 + (i9 >>> 3 << 1 << 2) | 0)) i3 = i2 + 8 | 0; else {
     if (i2 >>> 0 >= i6 >>> 0 ? (HEAP32[i2 + 8 >> 2] | 0) == (i13 + (0 - i9) | 0) : 0) {
      i3 = i2 + 8 | 0;
      break;
     }
     _abort();
    } while (0);
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i3 >> 2] = i1;
    i11 = i13 + (0 - i9) | 0;
    i1 = i9 + i14 | 0;
    i8 = 54;
    break;
   }
   i5 = HEAP32[i13 + (24 - i9) >> 2] | 0;
   i1 = HEAP32[i13 + (12 - i9) >> 2] | 0;
   do if ((i1 | 0) == (i13 + (0 - i9) | 0)) {
    i1 = HEAP32[i13 + (16 - i9 + 4) >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i13 + (16 - i9) >> 2] | 0;
     if (!i1) {
      i7 = 0;
      break;
     } else i2 = i13 + (16 - i9) | 0;
    } else i2 = i13 + (16 - i9 + 4) | 0;
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    if (i2 >>> 0 < i6 >>> 0) _abort(); else {
     HEAP32[i2 >> 2] = 0;
     i7 = i1;
     break;
    }
   } else {
    i2 = HEAP32[i13 + (8 - i9) >> 2] | 0;
    if ((i2 >>> 0 >= i6 >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i13 + (0 - i9) | 0) : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (i13 + (0 - i9) | 0) : 0) {
     HEAP32[i2 + 12 >> 2] = i1;
     HEAP32[i1 + 8 >> 2] = i2;
     i7 = i1;
     break;
    }
    _abort();
   } while (0);
   if (i5) {
    i1 = HEAP32[i13 + (28 - i9) >> 2] | 0;
    if ((i13 + (0 - i9) | 0) == (HEAP32[281952 + (i1 << 2) >> 2] | 0)) {
     HEAP32[281952 + (i1 << 2) >> 2] = i7;
     if (!i7) {
      HEAP32[70413] = HEAP32[70413] & ~(1 << i1);
      i11 = i13 + (0 - i9) | 0;
      i1 = i9 + i14 | 0;
      i8 = 54;
      break;
     }
    } else {
     if (i5 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort();
     if ((HEAP32[i5 + 16 >> 2] | 0) == (i13 + (0 - i9) | 0)) HEAP32[i5 + 16 >> 2] = i7; else HEAP32[i5 + 20 >> 2] = i7;
     if (!i7) {
      i11 = i13 + (0 - i9) | 0;
      i1 = i9 + i14 | 0;
      i8 = 54;
      break;
     }
    }
    i2 = HEAP32[70416] | 0;
    if (i7 >>> 0 < i2 >>> 0) _abort();
    HEAP32[i7 + 24 >> 2] = i5;
    i1 = HEAP32[i13 + (16 - i9) >> 2] | 0;
    do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
     HEAP32[i7 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i7;
     break;
    } while (0);
    i1 = HEAP32[i13 + (16 - i9 + 4) >> 2] | 0;
    if (i1) if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
     HEAP32[i7 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i7;
     i11 = i13 + (0 - i9) | 0;
     i1 = i9 + i14 | 0;
     i8 = 54;
     break;
    } else {
     i11 = i13 + (0 - i9) | 0;
     i1 = i9 + i14 | 0;
     i8 = 54;
    }
   } else {
    i11 = i13 + (0 - i9) | 0;
    i1 = i9 + i14 | 0;
    i8 = 54;
   }
  }
 } else {
  i11 = i13;
  i1 = i14;
  i8 = 54;
 } while (0);
 L74 : do if ((i8 | 0) == 54) {
  i7 = HEAP32[70416] | 0;
  if ((i13 + i14 | 0) >>> 0 < i7 >>> 0) _abort();
  i3 = HEAP32[i13 + (i14 + 4) >> 2] | 0;
  if (!(i3 & 2)) {
   if ((i13 + i14 | 0) == (HEAP32[70418] | 0)) {
    i17 = (HEAP32[70415] | 0) + i1 | 0;
    HEAP32[70415] = i17;
    HEAP32[70418] = i11;
    HEAP32[i11 + 4 >> 2] = i17 | 1;
    if ((i11 | 0) != (HEAP32[70417] | 0)) break;
    HEAP32[70417] = 0;
    HEAP32[70414] = 0;
    break;
   }
   if ((i13 + i14 | 0) == (HEAP32[70417] | 0)) {
    i17 = (HEAP32[70414] | 0) + i1 | 0;
    HEAP32[70414] = i17;
    HEAP32[70417] = i11;
    HEAP32[i11 + 4 >> 2] = i17 | 1;
    HEAP32[i11 + i17 >> 2] = i17;
    break;
   }
   i5 = (i3 & -8) + i1 | 0;
   do if (i3 >>> 0 >= 256) {
    i6 = HEAP32[i13 + (i14 + 24) >> 2] | 0;
    i1 = HEAP32[i13 + (i14 + 12) >> 2] | 0;
    do if ((i1 | 0) == (i13 + i14 | 0)) {
     i1 = HEAP32[i13 + (i14 + 20) >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i13 + (i14 + 16) >> 2] | 0;
      if (!i1) {
       i12 = 0;
       break;
      } else i2 = i13 + (i14 + 16) | 0;
     } else i2 = i13 + (i14 + 20) | 0;
     while (1) {
      i3 = i1 + 20 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4) {
       i1 = i4;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (!i4) break; else {
       i1 = i4;
       i2 = i3;
      }
     }
     if (i2 >>> 0 < i7 >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = 0;
      i12 = i1;
      break;
     }
    } else {
     i2 = HEAP32[i13 + (i14 + 8) >> 2] | 0;
     if ((i2 >>> 0 >= i7 >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i13 + i14 | 0) : 0) ? (HEAP32[i1 + 8 >> 2] | 0) == (i13 + i14 | 0) : 0) {
      HEAP32[i2 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i2;
      i12 = i1;
      break;
     }
     _abort();
    } while (0);
    if (i6) {
     i1 = HEAP32[i13 + (i14 + 28) >> 2] | 0;
     if ((i13 + i14 | 0) == (HEAP32[281952 + (i1 << 2) >> 2] | 0)) {
      HEAP32[281952 + (i1 << 2) >> 2] = i12;
      if (!i12) {
       HEAP32[70413] = HEAP32[70413] & ~(1 << i1);
       break;
      }
     } else {
      if (i6 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort();
      if ((HEAP32[i6 + 16 >> 2] | 0) == (i13 + i14 | 0)) HEAP32[i6 + 16 >> 2] = i12; else HEAP32[i6 + 20 >> 2] = i12;
      if (!i12) break;
     }
     i2 = HEAP32[70416] | 0;
     if (i12 >>> 0 < i2 >>> 0) _abort();
     HEAP32[i12 + 24 >> 2] = i6;
     i1 = HEAP32[i13 + (i14 + 16) >> 2] | 0;
     do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
      HEAP32[i12 + 16 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i12;
      break;
     } while (0);
     i1 = HEAP32[i13 + (i14 + 20) >> 2] | 0;
     if (i1) if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
      HEAP32[i12 + 20 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i12;
      break;
     }
    }
   } else {
    i1 = HEAP32[i13 + (i14 + 8) >> 2] | 0;
    i2 = HEAP32[i13 + (i14 + 12) >> 2] | 0;
    do if ((i1 | 0) != (281688 + (i3 >>> 3 << 1 << 2) | 0)) {
     if (i1 >>> 0 >= i7 >>> 0 ? (HEAP32[i1 + 12 >> 2] | 0) == (i13 + i14 | 0) : 0) break;
     _abort();
    } while (0);
    if ((i2 | 0) == (i1 | 0)) {
     HEAP32[70412] = HEAP32[70412] & ~(1 << (i3 >>> 3));
     break;
    }
    do if ((i2 | 0) == (281688 + (i3 >>> 3 << 1 << 2) | 0)) i10 = i2 + 8 | 0; else {
     if (i2 >>> 0 >= i7 >>> 0 ? (HEAP32[i2 + 8 >> 2] | 0) == (i13 + i14 | 0) : 0) {
      i10 = i2 + 8 | 0;
      break;
     }
     _abort();
    } while (0);
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i10 >> 2] = i1;
   } while (0);
   HEAP32[i11 + 4 >> 2] = i5 | 1;
   HEAP32[i11 + i5 >> 2] = i5;
   if ((i11 | 0) == (HEAP32[70417] | 0)) {
    HEAP32[70414] = i5;
    break;
   }
  } else {
   HEAP32[i13 + (i14 + 4) >> 2] = i3 & -2;
   HEAP32[i11 + 4 >> 2] = i1 | 1;
   HEAP32[i11 + i1 >> 2] = i1;
   i5 = i1;
  }
  i2 = i5 >>> 3;
  if (i5 >>> 0 < 256) {
   i1 = HEAP32[70412] | 0;
   if (i1 & 1 << i2) {
    i1 = HEAP32[281688 + ((i2 << 1) + 2 << 2) >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
     i15 = 281688 + ((i2 << 1) + 2 << 2) | 0;
     i16 = i1;
    }
   } else {
    HEAP32[70412] = i1 | 1 << i2;
    i15 = 281688 + ((i2 << 1) + 2 << 2) | 0;
    i16 = 281688 + (i2 << 1 << 2) | 0;
   }
   HEAP32[i15 >> 2] = i11;
   HEAP32[i16 + 12 >> 2] = i11;
   HEAP32[i11 + 8 >> 2] = i16;
   HEAP32[i11 + 12 >> 2] = 281688 + (i2 << 1 << 2);
   break;
  }
  i1 = i5 >>> 8;
  if (i1) if (i5 >>> 0 > 16777215) i4 = 31; else {
   i4 = i1 << ((i1 + 1048320 | 0) >>> 16 & 8) << (((i1 << ((i1 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4);
   i4 = 14 - (((i1 << ((i1 + 1048320 | 0) >>> 16 & 8)) + 520192 | 0) >>> 16 & 4 | (i1 + 1048320 | 0) >>> 16 & 8 | (i4 + 245760 | 0) >>> 16 & 2) + (i4 << ((i4 + 245760 | 0) >>> 16 & 2) >>> 15) | 0;
   i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
  } else i4 = 0;
  i1 = 281952 + (i4 << 2) | 0;
  HEAP32[i11 + 28 >> 2] = i4;
  HEAP32[i11 + 20 >> 2] = 0;
  HEAP32[i11 + 16 >> 2] = 0;
  i2 = HEAP32[70413] | 0;
  i3 = 1 << i4;
  if (!(i2 & i3)) {
   HEAP32[70413] = i2 | i3;
   HEAP32[i1 >> 2] = i11;
   HEAP32[i11 + 24 >> 2] = i1;
   HEAP32[i11 + 12 >> 2] = i11;
   HEAP32[i11 + 8 >> 2] = i11;
   break;
  }
  i1 = HEAP32[i1 >> 2] | 0;
  L170 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
   i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
   while (1) {
    i3 = i1 + 16 + (i4 >>> 31 << 2) | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) break;
    if ((HEAP32[i2 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
     i17 = i2;
     break L170;
    } else {
     i4 = i4 << 1;
     i1 = i2;
    }
   }
   if (i3 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
    HEAP32[i3 >> 2] = i11;
    HEAP32[i11 + 24 >> 2] = i1;
    HEAP32[i11 + 12 >> 2] = i11;
    HEAP32[i11 + 8 >> 2] = i11;
    break L74;
   }
  } else i17 = i1; while (0);
  i1 = i17 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i16 = HEAP32[70416] | 0;
  if (i2 >>> 0 >= i16 >>> 0 & i17 >>> 0 >= i16 >>> 0) {
   HEAP32[i2 + 12 >> 2] = i11;
   HEAP32[i1 >> 2] = i11;
   HEAP32[i11 + 8 >> 2] = i2;
   HEAP32[i11 + 12 >> 2] = i17;
   HEAP32[i11 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 return;
}

function _ps_parser_to_token(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 i1 = HEAP32[i9 + 8 >> 2] | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 L1 : do if (i3 >>> 0 < i1 >>> 0) {
  i2 = i3;
  while (1) {
   switch (HEAP8[i3 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    break;
   case 37:
    {
     i4 = 37;
     i2 = i3;
     L5 : while (1) {
      switch (i4 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= i1 >>> 0) break;
      i4 = HEAP8[i2 >> 0] | 0;
     }
     break;
    }
   default:
    break L1;
   }
   i3 = i2 + 1 | 0;
   i2 = i3;
   if (i3 >>> 0 >= i1 >>> 0) break L1;
  }
 } else i2 = i3; while (0);
 HEAP32[i9 >> 2] = i2;
 i3 = i2;
 if (i3 >>> 0 >= i1 >>> 0) return;
 L15 : do switch (HEAPU8[i3 >> 0] | 0) {
 case 40:
  {
   HEAP32[i8 + 8 >> 2] = 2;
   HEAP32[i8 >> 2] = i2;
   i2 = i3;
   i3 = 0;
   L19 : while (1) {
    i5 = i2;
    L21 : while (1) {
     i2 = i5 + 1 | 0;
     L23 : do switch (HEAP8[i5 >> 0] | 0) {
     case 40:
      {
       i7 = 20;
       break L21;
      }
     case 41:
      {
       i7 = 22;
       break L21;
      }
     case 92:
      {
       if ((i2 | 0) == (i1 | 0)) {
        i7 = 23;
        break L19;
       }
       i4 = HEAP8[i2 >> 0] | 0;
       switch (i4 & 255 | 0) {
       case 41:
       case 40:
       case 92:
       case 102:
       case 98:
       case 116:
       case 114:
       case 110:
        {
         i2 = i5 + 2 | 0;
         break L23;
        }
       default:
        {}
       }
       if (i2 >>> 0 < i1 >>> 0 & (i4 & -8) << 24 >> 24 == 48) {
        i4 = 0;
        do {
         i2 = i2 + 1 | 0;
         i4 = i4 + 1 | 0;
         if (!(i2 >>> 0 < i1 >>> 0 & i4 >>> 0 < 3)) break L23;
        } while ((HEAP8[i2 >> 0] & -8) << 24 >> 24 == 48);
       }
       break;
      }
     default:
      {}
     } while (0);
     if (i2 >>> 0 < i1 >>> 0) i5 = i2; else {
      i1 = i2;
      i7 = 23;
      break L19;
     }
    }
    if ((i7 | 0) == 20) i3 = i3 + 1 | 0; else if ((i7 | 0) == 22) {
     i3 = i3 + -1 | 0;
     if (!i3) {
      i7 = 24;
      break;
     }
    }
    if (i2 >>> 0 >= i1 >>> 0) {
     i1 = i2;
     i7 = 23;
     break;
    }
   }
   if ((i7 | 0) == 23) {
    i7 = 91;
    break L15;
   } else if ((i7 | 0) == 24) {
    HEAP32[i8 + 4 >> 2] = i2;
    i1 = i2;
    break L15;
   }
   break;
  }
 case 123:
  {
   HEAP32[i8 + 8 >> 2] = 3;
   HEAP32[i8 >> 2] = i2;
   i5 = i3;
   i3 = 0;
   L41 : while (1) {
    i4 = HEAP8[i5 >> 0] | 0;
    switch (i4 & 255 | 0) {
    case 123:
     {
      i3 = i3 + 1 | 0;
      i4 = 0;
      break;
     }
    case 125:
     {
      i3 = i3 + -1 | 0;
      if (!i3) {
       i1 = i5;
       i7 = 29;
       break L41;
      } else i4 = 0;
      break;
     }
    case 40:
     {
      L47 : do if (i2 >>> 0 < i1 >>> 0) {
       i4 = 0;
       while (1) {
        i6 = i2;
        L50 : while (1) {
         i2 = i6 + 1 | 0;
         L52 : do switch (HEAP8[i6 >> 0] | 0) {
         case 40:
          {
           i7 = 40;
           break L50;
          }
         case 41:
          {
           i7 = 42;
           break L50;
          }
         case 92:
          {
           if ((i2 | 0) == (i1 | 0)) {
            i2 = i1;
            i4 = 3;
            break L47;
           }
           i5 = HEAP8[i2 >> 0] | 0;
           switch (i5 & 255 | 0) {
           case 41:
           case 40:
           case 92:
           case 102:
           case 98:
           case 116:
           case 114:
           case 110:
            {
             i2 = i6 + 2 | 0;
             break L52;
            }
           default:
            {}
           }
           if (i2 >>> 0 < i1 >>> 0 & (i5 & -8) << 24 >> 24 == 48) {
            i5 = 0;
            do {
             i2 = i2 + 1 | 0;
             i5 = i5 + 1 | 0;
             if (!(i2 >>> 0 < i1 >>> 0 & i5 >>> 0 < 3)) break L52;
            } while ((HEAP8[i2 >> 0] & -8) << 24 >> 24 == 48);
           }
           break;
          }
         default:
          {}
         } while (0);
         if (i2 >>> 0 < i1 >>> 0) i6 = i2; else {
          i4 = 3;
          break L47;
         }
        }
        if ((i7 | 0) == 40) {
         i7 = 0;
         i4 = i4 + 1 | 0;
        } else if ((i7 | 0) == 42) {
         i7 = 0;
         i4 = i4 + -1 | 0;
         if (!i4) {
          i4 = 0;
          break L47;
         }
        }
        if (i2 >>> 0 >= i1 >>> 0) {
         i4 = 3;
         break;
        }
       }
      } else i4 = 3; while (0);
      break;
     }
    case 60:
     {
      i2 = i2 + 1 | 0;
      L68 : do if (i2 >>> 0 < i1 >>> 0) {
       i4 = i2;
       i5 = i2;
       while (1) {
        L71 : do if (i5 >>> 0 < i1 >>> 0) {
         i2 = i4;
         while (1) {
          switch (HEAP8[i5 >> 0] | 0) {
          case 0:
          case 12:
          case 9:
          case 10:
          case 13:
          case 32:
           break;
          case 37:
           {
            i4 = 37;
            i2 = i5;
            L75 : while (1) {
             switch (i4 << 24 >> 24) {
             case 10:
             case 13:
              break L75;
             default:
              {}
             }
             i2 = i2 + 1 | 0;
             if (i2 >>> 0 >= i1 >>> 0) break;
             i4 = HEAP8[i2 >> 0] | 0;
            }
            break;
           }
          default:
           break L71;
          }
          i5 = i2 + 1 | 0;
          i2 = i5;
          if (i5 >>> 0 >= i1 >>> 0) break L71;
         }
        } else i2 = i4; while (0);
        i4 = i2;
        if (i4 >>> 0 >= i1 >>> 0) break L68;
        i5 = HEAP8[i4 >> 0] | 0;
        if ((i5 + -48 & 255) >= 10) switch (i5 << 24 >> 24) {
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
         break;
        default:
         break L68;
        }
        i5 = i4 + 1 | 0;
        i2 = i5;
        if (i5 >>> 0 >= i1 >>> 0) break; else i4 = i2;
       }
      } while (0);
      if (i2 >>> 0 < i1 >>> 0 ? (HEAP8[i2 >> 0] | 0) != 62 : 0) {
       i7 = 58;
       break L41;
      }
      i2 = i2 + 1 | 0;
      i4 = 0;
      break;
     }
    case 37:
     {
      i2 = i5;
      L90 : while (1) {
       switch (i4 << 24 >> 24) {
       case 10:
       case 13:
        break L90;
       default:
        {}
       }
       i2 = i2 + 1 | 0;
       if (i2 >>> 0 >= i1 >>> 0) break;
       i4 = HEAP8[i2 >> 0] | 0;
      }
      i4 = 0;
      break;
     }
    default:
     i4 = 0;
    }
    i5 = i2 + 1 | 0;
    i2 = i5;
    if (!((i4 | 0) == 0 & i5 >>> 0 < i1 >>> 0)) {
     i1 = i2;
     i2 = i4;
     break;
    }
   }
   if ((i7 | 0) == 29) {
    i1 = i1 + 1 | 0;
    i3 = 0;
    i2 = 0;
   } else if ((i7 | 0) == 58) {
    i1 = i2 + 1 | 0;
    i2 = 3;
   }
   if (!(i3 | i2)) {
    HEAP32[i8 + 4 >> 2] = i1;
    i2 = i1;
    i7 = 92;
   } else i7 = 91;
   break;
  }
 case 91:
  {
   HEAP32[i8 + 8 >> 2] = 3;
   HEAP32[i8 >> 2] = i3;
   HEAP32[i9 >> 2] = i3 + 1;
   L102 : do if ((i3 + 1 | 0) >>> 0 < i1 >>> 0) {
    i4 = i3 + 1 | 0;
    i2 = i3 + 1 | 0;
    while (1) {
     switch (HEAP8[i4 >> 0] | 0) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break;
     case 37:
      {
       i3 = 37;
       i2 = i4;
       L106 : while (1) {
        switch (i3 << 24 >> 24) {
        case 10:
        case 13:
         break L106;
        default:
         {}
        }
        i2 = i2 + 1 | 0;
        if (i2 >>> 0 >= i1 >>> 0) break;
        i3 = HEAP8[i2 >> 0] | 0;
       }
       break;
      }
     default:
      break L102;
     }
     i4 = i2 + 1 | 0;
     i2 = i4;
     if (i4 >>> 0 >= i1 >>> 0) break L102;
    }
   } else i2 = i3 + 1 | 0; while (0);
   HEAP32[i9 >> 2] = i2;
   i3 = i2;
   if (i3 >>> 0 < i1 >>> 0) {
    i4 = 1;
    L114 : while (1) {
     if (HEAP32[i9 + 12 >> 2] | 0) {
      i1 = i2;
      i7 = 91;
      break L15;
     }
     switch (HEAP8[i3 >> 0] | 0) {
     case 91:
      {
       i4 = i4 + 1 | 0;
       break;
      }
     case 93:
      {
       if ((i4 | 0) < 2) {
        i1 = i3;
        break L114;
       } else i4 = i4 + -1 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i9 >> 2] = i2;
     _ps_parser_skip_PS_token(i9);
     i6 = HEAP32[i9 + 8 >> 2] | 0;
     i2 = HEAP32[i9 >> 2] | 0;
     L121 : do if (i2 >>> 0 < i6 >>> 0) {
      i5 = i2;
      while (1) {
       switch (HEAP8[i5 >> 0] | 0) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        break;
       case 37:
        {
         i3 = 37;
         i2 = i5;
         L125 : while (1) {
          switch (i3 << 24 >> 24) {
          case 10:
          case 13:
           break L125;
          default:
           {}
          }
          i2 = i2 + 1 | 0;
          if (i2 >>> 0 >= i6 >>> 0) break;
          i3 = HEAP8[i2 >> 0] | 0;
         }
         break;
        }
       default:
        break L121;
       }
       i5 = i2 + 1 | 0;
       i2 = i5;
       if (i5 >>> 0 >= i6 >>> 0) break L121;
      }
     } while (0);
     HEAP32[i9 >> 2] = i2;
     i3 = i2;
     if (i3 >>> 0 >= i1 >>> 0) {
      i1 = i2;
      i7 = 91;
      break L15;
     }
    }
    HEAP32[i8 + 4 >> 2] = i1 + 1;
    i1 = i1 + 1 | 0;
   } else {
    i1 = i2;
    i7 = 91;
   }
   break;
  }
 default:
  {
   HEAP32[i8 >> 2] = i3;
   HEAP32[i8 + 8 >> 2] = (HEAP8[i3 >> 0] | 0) == 47 ? 4 : 1;
   _ps_parser_skip_PS_token(i9);
   i1 = HEAP32[i9 >> 2] | 0;
   if (!(HEAP32[i9 + 12 >> 2] | 0)) {
    HEAP32[i8 + 4 >> 2] = i1;
    i2 = i1;
    i7 = 92;
   } else i7 = 91;
  }
 } while (0);
 if ((i7 | 0) == 91) {
  i2 = HEAP32[i8 + 4 >> 2] | 0;
  i7 = 92;
 }
 if ((i7 | 0) == 92) if (!i2) {
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
 }
 HEAP32[i9 >> 2] = i1;
 return;
}

function _FT_Open_Face(i12, i13, i14, i19) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 if (!((i13 | 0) != 0 & ((i14 | 0) > -1 & (i19 | 0) == 0 ^ 1))) {
  i24 = 6;
  STACKTOP = i25;
  return i24 | 0;
 }
 if (!(HEAP32[i13 >> 2] & 2)) i18 = 0; else i18 = (HEAP32[i13 + 16 >> 2] | 0) != 0;
 i1 = _FT_Stream_New(i12, i13, i25 + 8 | 0) | 0;
 HEAP32[i25 + 12 >> 2] = i1;
 L7 : do if (!i1) {
  i7 = HEAP32[i12 >> 2] | 0;
  i1 = HEAP32[i13 >> 2] | 0;
  do if ((i1 & 8 | 0) != 0 ? (i4 = HEAP32[i13 + 20 >> 2] | 0, (i4 | 0) != 0) : 0) {
   if (HEAP32[HEAP32[i4 >> 2] >> 2] & 1) {
    if (!(i1 & 16)) {
     i3 = 0;
     i2 = 0;
    } else {
     i3 = HEAP32[i13 + 24 >> 2] | 0;
     i2 = HEAP32[i13 + 28 >> 2] | 0;
    }
    i1 = HEAP32[i25 + 8 >> 2] | 0;
    i17 = _open_face(i4, i1, i14, i3, i2, i25 + 4 | 0) | 0;
    HEAP32[i25 + 12 >> 2] = i17;
    if (!i17) break;
   } else {
    HEAP32[i25 + 12 >> 2] = 32;
    i1 = HEAP32[i25 + 8 >> 2] | 0;
   }
   if (!i1) {
    i20 = 102;
    break L7;
   }
   i2 = HEAP32[i1 + 28 >> 2] | 0;
   _FT_Stream_Close(i1);
   if (i18) {
    i20 = 102;
    break L7;
   }
   _ft_mem_free(i2, i1);
   i20 = 102;
   break L7;
  } else i20 = 15; while (0);
  L21 : do if ((i20 | 0) == 15) {
   i5 = HEAP32[i12 + 16 >> 2] | 0;
   if ((i5 | 0) <= 0) {
    i20 = 30;
    break L7;
   }
   i1 = 0;
   i6 = i12 + 20 | 0;
   while (1) {
    i3 = HEAP32[i6 >> 2] | 0;
    if (HEAP32[HEAP32[i3 >> 2] >> 2] & 1) {
     if (!(HEAP32[i13 >> 2] & 16)) {
      i1 = 0;
      i2 = 0;
     } else {
      i1 = HEAP32[i13 + 24 >> 2] | 0;
      i2 = HEAP32[i13 + 28 >> 2] | 0;
     }
     i4 = HEAP32[i25 + 8 >> 2] | 0;
     i1 = _open_face(i3, i4, i14, i1, i2, i25 + 4 | 0) | 0;
     HEAP32[i25 + 12 >> 2] = i1;
     if (!i1) break L21;
     if ((i1 & 255 | 0) == 142 & (_strcmp(HEAP32[(HEAP32[HEAP32[i6 >> 2] >> 2] | 0) + 8 >> 2] | 0, 324153) | 0) == 0) {
      if (_FT_Stream_Seek(i4, 0) | 0) {
       i20 = 29;
       break L7;
      }
      i1 = _open_face_PS_from_sfnt_stream(i12, i4, i14, 0, 0, i19) | 0;
      HEAP32[i25 + 12 >> 2] = i1;
      if (!i1) break;
     }
     if ((i1 & 255 | 0) != 2) {
      i20 = 29;
      break L7;
     }
    }
    i6 = i6 + 4 | 0;
    if (i6 >>> 0 >= (i12 + 20 + (i5 << 2) | 0) >>> 0) {
     i20 = 29;
     break L7;
    }
   }
   if (!i4) {
    i24 = 0;
    STACKTOP = i25;
    return i24 | 0;
   }
   i1 = HEAP32[i4 + 28 >> 2] | 0;
   _FT_Stream_Close(i4);
   if (i18) {
    i24 = 0;
    STACKTOP = i25;
    return i24 | 0;
   }
   _ft_mem_free(i1, i4);
   i24 = 0;
   STACKTOP = i25;
   return i24 | 0;
  } while (0);
  if (i18) {
   i18 = (HEAP32[i25 + 4 >> 2] | 0) + 8 | 0;
   HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 1024;
  }
  i1 = _ft_mem_alloc(i7, 12, i25 + 12 | 0) | 0;
  if (!(HEAP32[i25 + 12 >> 2] | 0)) {
   i2 = HEAP32[i25 + 4 >> 2] | 0;
   HEAP32[i1 + 8 >> 2] = i2;
   _FT_List_Add((HEAP32[i2 + 96 >> 2] | 0) + 16 | 0, i1);
   if ((i14 | 0) > -1) {
    i18 = _FT_New_GlyphSlot(i2, 0) | 0;
    HEAP32[i25 + 12 >> 2] = i18;
    if (i18) {
     i20 = 102;
     break;
    }
    i18 = _FT_New_Size(i2, i25) | 0;
    HEAP32[i25 + 12 >> 2] = i18;
    if (i18) {
     i20 = 102;
     break;
    }
    HEAP32[i2 + 88 >> 2] = HEAP32[i25 >> 2];
    i2 = HEAP32[i25 + 4 >> 2] | 0;
   }
   if (HEAP32[i2 + 8 >> 2] & 1) {
    i1 = i2 + 74 | 0;
    i3 = HEAP16[i1 >> 1] | 0;
    if (i3 << 16 >> 16 < 0) HEAP16[i1 >> 1] = 0 - (i3 & 65535);
    if (!(HEAP32[i2 + 8 >> 2] & 32)) HEAP16[i2 + 78 >> 1] = HEAP16[i2 + 74 >> 1] | 0;
   }
   if ((HEAP32[i2 + 8 >> 2] & 2 | 0) != 0 ? (HEAP32[i2 + 28 >> 2] | 0) > 0 : 0) {
    i4 = HEAP32[i2 + 28 >> 2] | 0;
    i5 = HEAP32[i2 + 32 >> 2] | 0;
    i6 = 0;
    do {
     i1 = i5 + (i6 << 4) | 0;
     i3 = HEAP16[i1 >> 1] | 0;
     if (i3 << 16 >> 16 < 0) HEAP16[i1 >> 1] = 0 - (i3 & 65535);
     i1 = i5 + (i6 << 4) + 8 | 0;
     i3 = HEAP32[i1 >> 2] | 0;
     if ((i3 | 0) < 0) HEAP32[i1 >> 2] = 0 - i3 << 16 >> 16;
     i1 = i5 + (i6 << 4) + 12 | 0;
     i3 = HEAP32[i1 >> 2] | 0;
     if ((i3 | 0) < 0) HEAP32[i1 >> 2] = 0 - i3;
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) < (i4 | 0));
   }
   i18 = HEAP32[i2 + 128 >> 2] | 0;
   HEAP32[i18 + 4 >> 2] = 65536;
   HEAP32[i18 + 8 >> 2] = 0;
   HEAP32[i18 + 12 >> 2] = 0;
   HEAP32[i18 + 16 >> 2] = 65536;
   HEAP32[i18 + 20 >> 2] = 0;
   HEAP32[i18 + 24 >> 2] = 0;
   HEAP32[i18 + 60 >> 2] = 1;
   if (i19) {
    HEAP32[i19 >> 2] = i2;
    break;
   }
   if ((((i2 | 0) != 0 ? (i9 = HEAP32[i2 + 96 >> 2] | 0, (i9 | 0) != 0) : 0) ? (i18 = (HEAP32[i2 + 128 >> 2] | 0) + 60 | 0, i19 = (HEAP32[i18 >> 2] | 0) + -1 | 0, HEAP32[i18 >> 2] = i19, (i19 | 0) == 0) : 0) ? (i10 = HEAP32[i9 + 8 >> 2] | 0, i11 = _FT_List_Find(i9 + 16 | 0, i2) | 0, (i11 | 0) != 0) : 0) {
    _FT_List_Remove(i9 + 16 | 0, i11);
    _ft_mem_free(i10, i11);
    _destroy_face(i10, i2, i9);
   }
  } else i20 = 102;
 } else i20 = 29; while (0);
 L84 : do if ((i20 | 0) == 29) {
  switch (i1 & 255 | 0) {
  case 85:
  case 2:
  case 81:
   break;
  default:
   {
    i20 = 30;
    break L84;
   }
  }
  i1 = HEAP32[i25 + 8 >> 2] | 0;
  if (!i1) {
   i2 = 85;
   i20 = 46;
  } else {
   i2 = _FT_Stream_Seek(i1, 0) | 0;
   do if (!i2) {
    i2 = _FT_Stream_Read(i1, i25 + 128 | 0, 128) | 0;
    if (!i2) {
     if ((((((HEAP8[i25 + 128 >> 0] | 0) == 0 ? (HEAP8[i25 + 128 + 74 >> 0] | 0) == 0 : 0) ? (HEAP8[i25 + 128 + 82 >> 0] | 0) == 0 : 0) ? (i8 = HEAP8[i25 + 128 + 1 >> 0] | 0, (i8 + -1 & 255) <= 32) : 0) ? (HEAP8[i25 + 128 + 63 >> 0] | 0) == 0 : 0) ? (HEAP8[i25 + 128 + ((i8 & 255) + 2) >> 0] | 0) == 0 : 0) {
      i2 = _IsMacResource(i12, i1, (HEAPU8[i25 + 128 + 84 >> 0] << 16 | HEAPU8[i25 + 128 + 83 >> 0] << 24 | HEAPU8[i25 + 128 + 85 >> 0] << 8 | HEAPU8[i25 + 128 + 86 >> 0]) + 255 & -128, i14, i19) | 0;
      i20 = 43;
      break;
     }
     i20 = 44;
    } else i20 = 43;
   } else i20 = 43; while (0);
   if ((i20 | 0) == 43) if ((i2 & 255 | 0) == 2) i20 = 44;
   if ((i20 | 0) == 44) i2 = _IsMacResource(i12, i1, 0, i14, i19) | 0;
   switch (i2 & 255 | 0) {
   case 85:
   case 2:
    {
     i20 = 46;
     break;
    }
   default:
    {
     i16 = i2;
     i20 = 63;
    }
   }
  }
  do if ((i20 | 0) == 46) if (HEAP32[i13 >> 2] & 4) {
   i7 = HEAP32[i12 >> 2] | 0;
   HEAP32[i25 + 16 >> 2] = 0;
   _FT_Raccess_Guess(i12, i1, HEAP32[i13 + 12 >> 2] | 0, i25 + 128 | 0, i25 + 92 | 0, i25 + 56 | 0);
   i3 = 2;
   i6 = 0;
   i4 = 0;
   while (1) {
    i5 = _ft_raccess_rule_by_darwin_vfs(i12, i6) | 0;
    if (i4 << 24 >> 24 == 0 | i5 << 24 >> 24 != 0 ^ 1 ? (HEAP32[i25 + 56 + (i6 << 2) >> 2] | 0) == 0 : 0) {
     HEAP32[i25 + 24 >> 2] = 4;
     i2 = HEAP32[i25 + 128 + (i6 << 2) >> 2] | 0;
     if (!i2) i2 = HEAP32[i13 + 12 >> 2] | 0;
     HEAP32[i25 + 24 + 12 >> 2] = i2;
     i3 = _FT_Stream_New(i12, i25 + 24 | 0, i25 + 16 | 0) | 0;
     i2 = i5 << 24 >> 24 != 0 & (i3 | 0) == 81 ? 1 : i4;
     if (!i3) {
      i4 = HEAP32[i25 + 16 >> 2] | 0;
      i3 = _IsMacResource(i12, i4, HEAP32[i25 + 92 + (i6 << 2) >> 2] | 0, i14, i19) | 0;
      if (i4) {
       i11 = HEAP32[i4 + 28 >> 2] | 0;
       _FT_Stream_Close(i4);
       _ft_mem_free(i11, i4);
      }
      if (!i3) {
       i3 = 0;
       break;
      }
      i2 = i5 << 24 >> 24 == 0 ? i2 : 1;
     }
    } else i2 = i4;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) >= 9) break; else i4 = i2;
   }
   i2 = HEAP32[i25 + 128 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 >> 2] = 0;
   }
   i2 = HEAP32[i25 + 128 + 4 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 + 4 >> 2] = 0;
   }
   i2 = HEAP32[i25 + 128 + 8 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 + 8 >> 2] = 0;
   }
   i2 = HEAP32[i25 + 128 + 12 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 + 12 >> 2] = 0;
   }
   i2 = HEAP32[i25 + 128 + 16 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 + 16 >> 2] = 0;
   }
   i2 = HEAP32[i25 + 128 + 20 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 + 20 >> 2] = 0;
   }
   i2 = HEAP32[i25 + 128 + 24 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 + 24 >> 2] = 0;
   }
   i2 = HEAP32[i25 + 128 + 28 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 + 28 >> 2] = 0;
   }
   i2 = HEAP32[i25 + 128 + 32 >> 2] | 0;
   if (i2) {
    _ft_mem_free(i7, i2);
    HEAP32[i25 + 128 + 32 >> 2] = 0;
   }
   if (!i3) {
    HEAP32[i25 + 12 >> 2] = 0;
    break;
   } else {
    HEAP32[i25 + 12 >> 2] = 2;
    i20 = 69;
    break;
   }
  } else {
   i16 = i2;
   i20 = 63;
  } while (0);
  if ((i20 | 0) == 63 ? (HEAP32[i25 + 12 >> 2] = i16, (i16 | 0) != 0) : 0) if ((i16 & 255 | 0) == 2) i20 = 69; else {
   i20 = 70;
   break;
  }
  if ((i20 | 0) == 69) {
   HEAP32[i25 + 12 >> 2] = 2;
   i20 = 70;
   break;
  }
  if ((i1 | 0) != 0 ? (i15 = HEAP32[i1 + 28 >> 2] | 0, _FT_Stream_Close(i1), !i18) : 0) _ft_mem_free(i15, i1);
  i24 = HEAP32[i25 + 12 >> 2] | 0;
  STACKTOP = i25;
  return i24 | 0;
 } while (0);
 if ((i20 | 0) == 30) {
  i1 = HEAP32[i25 + 8 >> 2] | 0;
  i20 = 70;
 }
 if ((i20 | 0) == 70) if ((i1 | 0) != 0 ? (i17 = HEAP32[i1 + 28 >> 2] | 0, _FT_Stream_Close(i1), !i18) : 0) {
  _ft_mem_free(i17, i1);
  i20 = 102;
 } else i20 = 102;
 if (((((i20 | 0) == 102 ? (i21 = HEAP32[i25 + 4 >> 2] | 0, (i21 | 0) != 0) : 0) ? (i22 = HEAP32[i21 + 96 >> 2] | 0, (i22 | 0) != 0) : 0) ? (i19 = (HEAP32[i21 + 128 >> 2] | 0) + 60 | 0, i20 = (HEAP32[i19 >> 2] | 0) + -1 | 0, HEAP32[i19 >> 2] = i20, (i20 | 0) == 0) : 0) ? (i23 = HEAP32[i22 + 8 >> 2] | 0, i24 = _FT_List_Find(i22 + 16 | 0, i21) | 0, (i24 | 0) != 0) : 0) {
  _FT_List_Remove(i22 + 16 | 0, i24);
  _ft_mem_free(i23, i24);
  _destroy_face(i23, i21, i22);
 }
 i24 = HEAP32[i25 + 12 >> 2] | 0;
 STACKTOP = i25;
 return i24 | 0;
}

function _af_cjk_hints_apply(i19, i20, i2) {
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0;
 i1 = _af_glyph_hints_reload(i19, i20) | 0;
 if (i1) {
  i20 = i1;
  return i20 | 0;
 }
 i1 = HEAP32[i19 + 100 >> 2] | 0;
 do if (!(i1 & 1)) {
  i1 = _af_cjk_hints_detect_features(i19, 0) | 0;
  if (!i1) {
   _af_cjk_hints_compute_blue_edges(i19, i2, 0);
   i1 = HEAP32[i19 + 100 >> 2] | 0;
   break;
  } else {
   i20 = i1;
   return i20 | 0;
  }
 } while (0);
 do if (!(i1 & 2)) {
  i1 = _af_cjk_hints_detect_features(i19, 1) | 0;
  if (!i1) {
   _af_cjk_hints_compute_blue_edges(i19, i2, 1);
   break;
  } else {
   i20 = i1;
   return i20 | 0;
  }
 } while (0);
 i15 = 0;
 L16 : while (1) {
  switch (i15 | 0) {
  case 0:
   {
    if (!(HEAP32[i19 + 100 >> 2] & 1)) i18 = 12; else {
     i15 = 1;
     continue L16;
    }
    break;
   }
  case 1:
   {
    if (!(HEAP32[i19 + 100 >> 2] & 2)) i18 = 12; else break L16;
    break;
   }
  default:
   {}
  }
  if ((i18 | 0) == 12) {
   i18 = 0;
   i11 = i19 + 44 + (i15 * 28 | 0) + 20 | 0;
   i12 = HEAP32[i11 >> 2] | 0;
   i14 = i19 + 44 + (i15 * 28 | 0) + 12 | 0;
   i13 = HEAP32[i14 >> 2] | 0;
   if ((i13 | 0) > 0) {
    i1 = 0;
    i6 = i12;
    do {
     i2 = HEAP8[i6 + 12 >> 0] | 0;
     do if (!(i2 & 4)) {
      i3 = HEAP32[i6 + 20 >> 2] | 0;
      i4 = HEAP32[i6 + 24 >> 2] | 0;
      if (!i3) {
       if (!i4) break;
       i3 = HEAP32[i4 + 20 >> 2] | 0;
       if (!i3) break;
       i2 = HEAP8[i4 + 12 >> 0] | 0;
       i5 = i4;
       i4 = i6;
      } else i5 = i6;
      i3 = HEAP32[i3 + 8 >> 2] | 0;
      HEAP32[i5 + 8 >> 2] = i3;
      HEAP8[i5 + 12 >> 0] = i2 & 255 | 4;
      if ((i4 | 0) != 0 ? (HEAP32[i4 + 20 >> 2] | 0) == 0 : 0) {
       HEAP32[i4 + 8 >> 2] = (_af_cjk_compute_stem_width(i19, i15, (HEAP32[i4 + 4 >> 2] | 0) - (HEAP32[i5 + 4 >> 2] | 0) | 0) | 0) + i3;
       i10 = i4 + 12 | 0;
       HEAP8[i10 >> 0] = HEAPU8[i10 >> 0] | 4;
      }
      i1 = (i1 | 0) == 0 ? i6 : i1;
     } while (0);
     i6 = i6 + 48 | 0;
    } while (i6 >>> 0 < (i12 + (i13 * 48 | 0) | 0) >>> 0);
    i10 = (i15 | 0) == 1;
    i2 = 0;
    i8 = i12;
    i5 = 0;
    i6 = 0;
    i7 = 0;
    while (1) {
     i4 = i8 + 12 | 0;
     i3 = HEAP8[i4 >> 0] | 0;
     L41 : do if (!(i3 & 4)) {
      i9 = HEAP32[i8 + 24 >> 2] | 0;
      if (!i9) {
       i3 = i6;
       i4 = i7 + 1 | 0;
       break;
      }
      do if (i5 << 24 >> 24) {
       i21 = i6 + 64 | 0;
       if ((HEAP32[i8 + 8 >> 2] | 0) >= (i21 | 0) ? (HEAP32[i9 + 8 >> 2] | 0) >= (i21 | 0) : 0) break;
       i3 = i6;
       i4 = i7 + 1 | 0;
       break L41;
      } while (0);
      if (HEAP32[i9 + 20 >> 2] | 0) {
       i21 = HEAP32[i9 + 8 >> 2] | 0;
       HEAP32[i8 + 8 >> 2] = (_af_cjk_compute_stem_width(i19, i15, (HEAP32[i8 + 4 >> 2] | 0) - (HEAP32[i9 + 4 >> 2] | 0) | 0) | 0) + i21;
       HEAP8[i4 >> 0] = i3 & 255 | 4;
       i3 = i6;
       i4 = i7;
       break;
      }
      if (i9 >>> 0 < i8 >>> 0) {
       i21 = HEAP32[i9 + 8 >> 2] | 0;
       i21 = (_af_cjk_compute_stem_width(i19, i15, (HEAP32[i8 + 4 >> 2] | 0) - (HEAP32[i9 + 4 >> 2] | 0) | 0) | 0) + i21 | 0;
       HEAP32[i8 + 8 >> 2] = i21;
       HEAP8[i4 >> 0] = i3 & 255 | 4;
       i5 = 1;
       i3 = i21;
       i4 = i7;
       break;
      }
      if (i10 | (i1 | 0) != 0) _af_hint_normal_stem(i19, i8, i9, i2, i15) | 0; else i2 = _af_hint_normal_stem(i19, i8, i9, 0, 0) | 0;
      HEAP8[i4 >> 0] = HEAPU8[i4 >> 0] | 4;
      HEAP8[i9 + 12 >> 0] = HEAPU8[i9 + 12 >> 0] | 4;
      i1 = i8;
      i5 = 1;
      i3 = HEAP32[i9 + 8 >> 2] | 0;
      i4 = i7;
     } else {
      i3 = i6;
      i4 = i7;
     } while (0);
     i8 = i8 + 48 | 0;
     if (i8 >>> 0 >= (i12 + (i13 * 48 | 0) | 0) >>> 0) {
      i1 = i4;
      break;
     } else {
      i6 = i3;
      i7 = i4;
     }
    }
   } else i1 = 0;
   i10 = (i15 | 0) == 0;
   L64 : do if (i10) {
    switch (i13 * 48 | 0) {
    case 288:
     {
      i3 = 2;
      i7 = 4;
      i4 = 3;
      i5 = 5;
      i6 = i12;
      break;
     }
    case 576:
     {
      i3 = 5;
      i7 = 9;
      i4 = 6;
      i5 = 10;
      i6 = i12 + 48 | 0;
      break;
     }
    default:
     break L64;
    }
    i2 = HEAP32[i12 + (i3 * 48 | 0) + 4 >> 2] | 0;
    i2 = i2 - (HEAP32[i12 + (i7 * 48 | 0) + 4 >> 2] | 0) + (i2 - (HEAP32[i6 + 4 >> 2] | 0)) | 0;
    i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
    if (((HEAP32[i6 + 24 >> 2] | 0) == (i6 + 48 | 0) ? (HEAP32[i12 + (i3 * 48 | 0) + 24 >> 2] | 0) == (i12 + (i4 * 48 | 0) | 0) : 0) ? (i16 = HEAP32[i12 + (i7 * 48 | 0) + 24 >> 2] | 0, (i2 | 0) < 8 & (i16 | 0) == (i12 + (i5 * 48 | 0) | 0)) : 0) {
     i21 = i12 + (i7 * 48 | 0) + 8 | 0;
     i8 = (HEAP32[i12 + (i3 * 48 | 0) + 8 >> 2] << 1) - (HEAP32[i6 + 8 >> 2] | 0) | 0;
     i2 = (HEAP32[i21 >> 2] | 0) - i8 | 0;
     HEAP32[i21 >> 2] = i8;
     if (i16) HEAP32[i16 + 8 >> 2] = (HEAP32[i16 + 8 >> 2] | 0) - i2;
     if ((i13 * 48 | 0) == 576) {
      HEAP32[i12 + 392 >> 2] = (HEAP32[i12 + 392 >> 2] | 0) - i2;
      HEAP32[i12 + 536 >> 2] = (HEAP32[i12 + 536 >> 2] | 0) - i2;
     }
     i21 = i12 + (i7 * 48 | 0) + 12 | 0;
     HEAP8[i21 >> 0] = HEAPU8[i21 >> 0] | 4;
     if (i16) HEAP8[i16 + 12 >> 0] = HEAPU8[i16 + 12 >> 0] | 4;
    }
   } while (0);
   if (!((i1 | 0) == 0 | (i13 | 0) > 0 ^ 1)) {
    i4 = i12;
    do {
     i2 = i4 + 12 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
     if ((i3 & 4) == 0 ? (i17 = HEAP32[i4 + 28 >> 2] | 0, (i17 | 0) != 0) : 0) {
      HEAP32[i4 + 8 >> 2] = (HEAP32[i17 + 8 >> 2] | 0) - (HEAP32[i17 + 4 >> 2] | 0) + (HEAP32[i4 + 4 >> 2] | 0);
      HEAP8[i2 >> 0] = i3 & 255 | 4;
      i1 = i1 + -1 | 0;
     }
     i4 = i4 + 48 | 0;
    } while (i4 >>> 0 < (i12 + (i13 * 48 | 0) | 0) >>> 0);
    if (i1) {
     i6 = i12;
     do {
      do if (!(HEAP8[i6 + 12 >> 0] & 4)) {
       i2 = i6;
       while (1) {
        i1 = i2 + -48 | 0;
        if (i1 >>> 0 < i12 >>> 0) {
         i5 = 1;
         i3 = 0;
         i9 = i2;
         break;
        }
        if (!(HEAP8[i2 + -36 >> 0] & 4)) i2 = i1; else {
         i5 = 0;
         i3 = 1;
         i9 = i2;
         break;
        }
       }
       i4 = i6;
       while (1) {
        i2 = i4 + 48 | 0;
        if (i2 >>> 0 >= (i12 + (i13 * 48 | 0) | 0) >>> 0) {
         i18 = 64;
         break;
        }
        if (!(HEAP8[i4 + 60 >> 0] & 4)) i4 = i2; else {
         i3 = 1;
         break;
        }
       }
       if ((i18 | 0) == 64) {
        i18 = 0;
        if (i3) i3 = 0; else break;
       }
       if (i5) {
        HEAP32[i6 + 8 >> 2] = (HEAP32[i4 + 56 >> 2] | 0) - (HEAP32[i4 + 52 >> 2] | 0) + (HEAP32[i6 + 4 >> 2] | 0);
        break;
       }
       if (!i3) {
        HEAP32[i6 + 8 >> 2] = (HEAP32[i9 + -40 >> 2] | 0) - (HEAP32[i9 + -44 >> 2] | 0) + (HEAP32[i6 + 4 >> 2] | 0);
        break;
       }
       i3 = HEAP16[i2 >> 1] | 0;
       i2 = HEAP16[i1 >> 1] | 0;
       i1 = HEAP32[i9 + -40 >> 2] | 0;
       if (i3 << 16 >> 16 == i2 << 16 >> 16) {
        HEAP32[i6 + 8 >> 2] = i1;
        break;
       } else {
        HEAP32[i6 + 8 >> 2] = (_FT_MulDiv((HEAP16[i6 >> 1] | 0) - (i2 << 16 >> 16) | 0, (HEAP32[i4 + 56 >> 2] | 0) - i1 | 0, (i3 << 16 >> 16) - (i2 << 16 >> 16) | 0) | 0) + i1;
        break;
       }
      } while (0);
      i6 = i6 + 48 | 0;
     } while (i6 >>> 0 < (i12 + (i13 * 48 | 0) | 0) >>> 0);
    }
   }
   i9 = HEAP32[i11 >> 2] | 0;
   i8 = HEAP32[i14 >> 2] | 0;
   if (!i10) if ((i15 | 0) == 1) i1 = (HEAP32[i19 + 104 >> 2] | 0) >>> 1 & 1; else i1 = 0; else i1 = HEAP32[i19 + 104 >> 2] & 1;
   if ((i8 | 0) > 0) {
    i5 = i1 << 24 >> 24 == 0;
    i7 = i9;
    do {
     i6 = HEAP32[i7 + 40 >> 2] | 0;
     i2 = HEAP32[i7 + 8 >> 2] | 0;
     if (i5) {
      i2 = i2 - (HEAP32[i7 + 4 >> 2] | 0) | 0;
      i4 = i6;
      do {
       i3 = i4 + 44 | 0;
       i1 = i4 + 40 | 0;
       while (1) {
        i1 = HEAP32[i1 >> 2] | 0;
        if (i10) {
         HEAP32[i1 + 16 >> 2] = (HEAP32[i1 + 16 >> 2] | 0) + i2;
         HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | 64;
        } else {
         HEAP32[i1 + 20 >> 2] = (HEAP32[i1 + 20 >> 2] | 0) + i2;
         HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | 128;
        }
        if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) break; else i1 = i1 + 32 | 0;
       }
       i4 = HEAP32[i4 + 16 >> 2] | 0;
      } while ((i4 | 0) != (i6 | 0));
     } else {
      i4 = i6;
      do {
       i3 = i4 + 44 | 0;
       i1 = i4 + 40 | 0;
       while (1) {
        i1 = HEAP32[i1 >> 2] | 0;
        if (i10) {
         HEAP32[i1 + 16 >> 2] = i2;
         HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | 64;
        } else {
         HEAP32[i1 + 20 >> 2] = i2;
         HEAP16[i1 >> 1] = HEAPU16[i1 >> 1] | 128;
        }
        if ((i1 | 0) == (HEAP32[i3 >> 2] | 0)) break; else i1 = i1 + 32 | 0;
       }
       i4 = HEAP32[i4 + 16 >> 2] | 0;
      } while ((i4 | 0) != (i6 | 0));
     }
     i7 = i7 + 48 | 0;
    } while (i7 >>> 0 < (i9 + (i8 * 48 | 0) | 0) >>> 0);
   }
   _af_glyph_hints_align_strong_points(i19, i15);
   _af_glyph_hints_align_weak_points(i19, i15);
  }
  i15 = i15 + 1 | 0;
  if ((i15 | 0) == 2) break;
 }
 i6 = HEAP32[i19 + 24 >> 2] | 0;
 i3 = HEAP32[i19 + 28 >> 2] | 0;
 if ((i6 | 0) <= 0) {
  i21 = 0;
  return i21 | 0;
 }
 i4 = i3;
 i5 = HEAP32[i20 + 8 >> 2] | 0;
 i2 = HEAP32[i20 + 4 >> 2] | 0;
 while (1) {
  HEAP32[i2 >> 2] = HEAP32[i4 + 16 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i4 + 20 >> 2];
  i1 = HEAPU16[i4 >> 1] | 0;
  do if (!(i1 & 1)) if (!(i1 & 2)) {
   HEAP8[i5 >> 0] = 1;
   break;
  } else {
   HEAP8[i5 >> 0] = 2;
   break;
  } else HEAP8[i5 >> 0] = 0; while (0);
  i4 = i4 + 40 | 0;
  if (i4 >>> 0 >= (i3 + (i6 * 40 | 0) | 0) >>> 0) {
   i1 = 0;
   break;
  } else {
   i5 = i5 + 1 | 0;
   i2 = i2 + 8 | 0;
  }
 }
 return i1 | 0;
}

function _ps_parser_skip_PS_token(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = HEAP32[i9 >> 2] | 0;
 i8 = HEAP32[i9 + 8 >> 2] | 0;
 L1 : do if (i7 >>> 0 < i8 >>> 0) {
  i1 = i7;
  i2 = i7;
  while (1) {
   switch (HEAP8[i2 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    break;
   case 37:
    {
     i3 = 37;
     i1 = i2;
     L5 : while (1) {
      switch (i3 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i8 >>> 0) break;
      i3 = HEAP8[i1 >> 0] | 0;
     }
     break;
    }
   default:
    break L1;
   }
   i2 = i1 + 1 | 0;
   i1 = i2;
   if (i2 >>> 0 >= i8 >>> 0) break L1;
  }
 } else i1 = i7; while (0);
 i3 = i1;
 L12 : do if (i3 >>> 0 < i8 >>> 0) {
  switch (HEAP8[i3 >> 0] | 0) {
  case 93:
  case 91:
   {
    i1 = i3 + 1 | 0;
    i2 = 0;
    break L12;
   }
  case 123:
   {
    i4 = 123;
    i5 = 0;
    L16 : while (1) {
     switch (i4 & 255 | 0) {
     case 123:
      {
       i2 = i5 + 1 | 0;
       i3 = 0;
       break;
      }
     case 125:
      {
       i2 = i5 + -1 | 0;
       if (!i2) {
        i1 = i3;
        i6 = 14;
        break L16;
       } else i3 = 0;
       break;
      }
     case 40:
      {
       L22 : do if (i1 >>> 0 < i8 >>> 0) {
        i2 = 0;
        while (1) {
         L25 : while (1) {
          i4 = i1 + 1 | 0;
          L27 : do switch (HEAP8[i1 >> 0] | 0) {
          case 40:
           {
            i6 = 25;
            break L25;
           }
          case 41:
           {
            i6 = 27;
            break L25;
           }
          case 92:
           {
            if ((i4 | 0) == (i8 | 0)) {
             i1 = i8;
             i3 = 3;
             break L22;
            }
            i3 = HEAP8[i4 >> 0] | 0;
            switch (i3 & 255 | 0) {
            case 41:
            case 40:
            case 92:
            case 102:
            case 98:
            case 116:
            case 114:
            case 110:
             {
              i1 = i1 + 2 | 0;
              break L27;
             }
            default:
             {}
            }
            if (i4 >>> 0 < i8 >>> 0 & (i3 & -8) << 24 >> 24 == 48) {
             i1 = i4;
             i3 = 0;
             do {
              i1 = i1 + 1 | 0;
              i3 = i3 + 1 | 0;
              if (!(i1 >>> 0 < i8 >>> 0 & i3 >>> 0 < 3)) break L27;
             } while ((HEAP8[i1 >> 0] & -8) << 24 >> 24 == 48);
            } else i1 = i4;
            break;
           }
          default:
           i1 = i4;
          } while (0);
          if (i1 >>> 0 >= i8 >>> 0) {
           i3 = 3;
           break L22;
          }
         }
         if ((i6 | 0) == 25) {
          i6 = 0;
          i1 = i4;
          i2 = i2 + 1 | 0;
         } else if ((i6 | 0) == 27) {
          i6 = 0;
          i2 = i2 + -1 | 0;
          if (!i2) {
           i1 = i4;
           i3 = 0;
           break L22;
          } else i1 = i4;
         }
         if (i1 >>> 0 >= i8 >>> 0) {
          i3 = 3;
          break;
         }
        }
       } else i3 = 3; while (0);
       i2 = i5;
       break;
      }
     case 60:
      {
       i2 = i1 + 1 | 0;
       L43 : do if (i2 >>> 0 < i8 >>> 0) {
        i1 = i2;
        do {
         L46 : do if (i2 >>> 0 < i8 >>> 0) while (1) {
          switch (HEAP8[i2 >> 0] | 0) {
          case 0:
          case 12:
          case 9:
          case 10:
          case 13:
          case 32:
           break;
          case 37:
           {
            i3 = 37;
            i1 = i2;
            L50 : while (1) {
             switch (i3 << 24 >> 24) {
             case 10:
             case 13:
              break L50;
             default:
              {}
             }
             i1 = i1 + 1 | 0;
             if (i1 >>> 0 >= i8 >>> 0) break;
             i3 = HEAP8[i1 >> 0] | 0;
            }
            break;
           }
          default:
           break L46;
          }
          i2 = i1 + 1 | 0;
          i1 = i2;
          if (i2 >>> 0 >= i8 >>> 0) break L46;
         } while (0);
         i2 = i1;
         if (i2 >>> 0 >= i8 >>> 0) break L43;
         i3 = HEAP8[i2 >> 0] | 0;
         if ((i3 + -48 & 255) >= 10) switch (i3 << 24 >> 24) {
         case 65:
         case 66:
         case 67:
         case 68:
         case 69:
         case 70:
         case 97:
         case 98:
         case 99:
         case 100:
         case 101:
         case 102:
          break;
         default:
          break L43;
         }
         i2 = i2 + 1 | 0;
         i1 = i2;
        } while (i2 >>> 0 < i8 >>> 0);
       } else i1 = i2; while (0);
       if (i1 >>> 0 < i8 >>> 0 ? (HEAP8[i1 >> 0] | 0) != 62 : 0) {
        i2 = i5;
        i6 = 43;
        break L16;
       }
       i1 = i1 + 1 | 0;
       i2 = i5;
       i3 = 0;
       break;
      }
     case 37:
      {
       i2 = i4;
       i1 = i3;
       L65 : while (1) {
        switch (i2 << 24 >> 24) {
        case 10:
        case 13:
         break L65;
        default:
         {}
        }
        i1 = i1 + 1 | 0;
        if (i1 >>> 0 >= i8 >>> 0) break;
        i2 = HEAP8[i1 >> 0] | 0;
       }
       i2 = i5;
       i3 = 0;
       break;
      }
     default:
      {
       i2 = i5;
       i3 = 0;
      }
     }
     i1 = i1 + 1 | 0;
     if (!((i3 | 0) == 0 & i1 >>> 0 < i8 >>> 0)) break;
     i3 = i1;
     i4 = HEAP8[i1 >> 0] | 0;
     i5 = i2;
    }
    if ((i6 | 0) == 14) {
     i1 = i1 + 1 | 0;
     i2 = 0;
     i3 = 0;
    } else if ((i6 | 0) == 43) {
     i1 = i1 + 1 | 0;
     i3 = 3;
    }
    i2 = (i2 | 0) == 0 ? i3 : 3;
    break L12;
   }
  case 40:
   {
    i1 = i3;
    i2 = 0;
    L76 : while (1) {
     i4 = i1;
     L78 : while (1) {
      i1 = i4 + 1 | 0;
      L80 : do switch (HEAP8[i4 >> 0] | 0) {
      case 40:
       {
        i6 = 61;
        break L78;
       }
      case 41:
       {
        i6 = 63;
        break L78;
       }
      case 92:
       {
        if ((i1 | 0) == (i8 | 0)) {
         i1 = i8;
         i2 = 3;
         break L76;
        }
        i3 = HEAP8[i1 >> 0] | 0;
        switch (i3 & 255 | 0) {
        case 41:
        case 40:
        case 92:
        case 102:
        case 98:
        case 116:
        case 114:
        case 110:
         {
          i1 = i4 + 2 | 0;
          break L80;
         }
        default:
         {}
        }
        if (i1 >>> 0 < i8 >>> 0 & (i3 & -8) << 24 >> 24 == 48) {
         i3 = 0;
         do {
          i1 = i1 + 1 | 0;
          i3 = i3 + 1 | 0;
          if (!(i1 >>> 0 < i8 >>> 0 & i3 >>> 0 < 3)) break L80;
         } while ((HEAP8[i1 >> 0] & -8) << 24 >> 24 == 48);
        }
        break;
       }
      default:
       {}
      } while (0);
      if (i1 >>> 0 < i8 >>> 0) i4 = i1; else {
       i2 = 3;
       break L76;
      }
     }
     if ((i6 | 0) == 61) i2 = i2 + 1 | 0; else if ((i6 | 0) == 63) {
      i2 = i2 + -1 | 0;
      if (!i2) {
       i2 = 0;
       break;
      }
     }
     if (i1 >>> 0 >= i8 >>> 0) {
      i2 = 3;
      break;
     }
    }
    break L12;
   }
  case 60:
   {
    L96 : do if ((i3 + 1 | 0) >>> 0 < i8 >>> 0) {
     if ((HEAP8[i3 + 1 >> 0] | 0) == 60) {
      i1 = i3 + 2 | 0;
      i2 = 0;
      break L12;
     }
     i2 = i3 + 1 | 0;
     i1 = i3 + 1 | 0;
     do {
      L103 : do if (i2 >>> 0 < i8 >>> 0) while (1) {
       switch (HEAP8[i2 >> 0] | 0) {
       case 0:
       case 12:
       case 9:
       case 10:
       case 13:
       case 32:
        break;
       case 37:
        {
         i3 = 37;
         i1 = i2;
         L107 : while (1) {
          switch (i3 << 24 >> 24) {
          case 10:
          case 13:
           break L107;
          default:
           {}
          }
          i1 = i1 + 1 | 0;
          if (i1 >>> 0 >= i8 >>> 0) break;
          i3 = HEAP8[i1 >> 0] | 0;
         }
         break;
        }
       default:
        break L103;
       }
       i2 = i1 + 1 | 0;
       i1 = i2;
       if (i2 >>> 0 >= i8 >>> 0) break L103;
      } while (0);
      i2 = i1;
      if (i2 >>> 0 >= i8 >>> 0) break L96;
      i3 = HEAP8[i2 >> 0] | 0;
      if ((i3 + -48 & 255) >= 10) switch (i3 << 24 >> 24) {
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
       break;
      default:
       break L96;
      }
      i2 = i2 + 1 | 0;
      i1 = i2;
     } while (i2 >>> 0 < i8 >>> 0);
    } else i1 = i3 + 1 | 0; while (0);
    i2 = i1;
    if (i2 >>> 0 < i8 >>> 0 ? (HEAP8[i2 >> 0] | 0) != 62 : 0) {
     i2 = 3;
     break L12;
    }
    i1 = i2 + 1 | 0;
    i2 = 0;
    break L12;
   }
  case 62:
   {
    if ((i3 + 1 | 0) >>> 0 >= i8 >>> 0) {
     i1 = i3 + 1 | 0;
     i2 = 3;
     break L12;
    }
    if ((HEAP8[i3 + 1 >> 0] | 0) != 62) {
     i1 = i3 + 1 | 0;
     i2 = 3;
     break L12;
    }
    i1 = i3 + 2 | 0;
    i2 = 0;
    break L12;
   }
  case 47:
   {
    i1 = i3 + 1 | 0;
    break;
   }
  default:
   {}
  }
  i2 = i1;
  if (i2 >>> 0 < i8 >>> 0) while (1) {
   switch (HEAP8[i2 >> 0] | 0) {
   case 37:
   case 125:
   case 123:
   case 93:
   case 91:
   case 62:
   case 60:
   case 41:
   case 40:
   case 47:
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i2 = 0;
     break L12;
    }
   default:
    {}
   }
   i2 = i2 + 1 | 0;
   i1 = i2;
   if (i2 >>> 0 >= i8 >>> 0) {
    i2 = 0;
    break L12;
   }
  } else i2 = 0;
 } else i2 = 0; while (0);
 i6 = i1;
 HEAP32[i9 + 12 >> 2] = i6 >>> 0 < i8 >>> 0 & (i6 | 0) == (i7 | 0) ? 3 : i2;
 HEAP32[i9 >> 2] = i1;
 return;
}

function __ZN6Shader19ReflectShaderStringERK6StringPNS_19UniformBufferObjectE(i9, i8, i10) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i2 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298356, 0) | 0;
 if ((i2 | 0) == -1) {
  STACKTOP = i11;
  return;
 }
 i7 = i11 + 168 + 16 | 0;
 while (1) {
  i6 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298364, i2) | 0;
  if ((i6 | 0) == -1) {
   i1 = 83;
   break;
  }
  i5 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298366, i2) | 0;
  i1 = i1 + i2 | 0;
  if ((i5 | 0) < (i6 | 0) & ((i10 | 0) == 0 & (i5 | 0) != -1)) {
   HEAP32[i11 + 216 >> 2] = 0;
   HEAP32[i11 + 216 + 4 >> 2] = 0;
   HEAP32[i11 + 216 + 8 >> 2] = 0;
   HEAP32[i11 + 216 + 12 >> 2] = 0;
   __ZN6String3SetEPKci(i11 + 216 | 0, i1, i5 - i2 | 0);
   __ZNK6String7TrimmedEv(i11 + 136 | 0, i11 + 216 | 0);
   __ZNK6String5SplitEPKc(i11 + 152 | 0, i11 + 136 | 0, 298368);
   i1 = HEAP32[i11 + 136 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 136 >> 2] = 0;
   i1 = i11 + 168 | 0;
   i2 = i1 + 44 | 0;
   do {
    HEAP32[i1 >> 2] = 0;
    i1 = i1 + 4 | 0;
   } while ((i1 | 0) < (i2 | 0));
   __ZN6StringaSERKS_(i11 + 168 | 0, (HEAP32[i11 + 152 >> 2] | 0) + 16 | 0) | 0;
   i6 = __Z15FindClosingCharRK6Stringi(i8, i5) | 0;
   __ZNK6String9SubStringEii(i11 + 104 | 0, i8, i6 + 1 | 0, (__ZN6String12FirstIndexOfEPKhS1_i(HEAP32[i8 >> 2] | 0, 298364, i6) | 0) + ~i6 | 0);
   __ZNK6String7TrimmedEv(i11 + 120 | 0, i11 + 104 | 0);
   i3 = HEAP32[i11 + 120 >> 2] | 0;
   if (!i3) {
    HEAP32[i11 + 168 + 24 >> 2] = 0;
    HEAP32[i11 + 168 + 20 >> 2] = 0;
    i1 = HEAP32[i7 >> 2] | 0;
    if (i1) HEAP8[i1 >> 0] = 0;
   } else {
    i4 = HEAP32[i11 + 120 + 8 >> 2] | 0;
    do if ((HEAP32[i11 + 168 + 28 >> 2] | 0) < (i4 + 1 | 0)) {
     if (!(i4 + 1 | 0)) {
      i1 = HEAP32[i7 >> 2] | 0;
      if (i1) __ZdaPv(i1);
      HEAP32[i7 >> 2] = 0;
      i1 = 0;
      break;
     }
     i1 = __Znaj((i4 + 1 | 0) > -1 ? i4 + 1 | 0 : -1) | 0;
     HEAP32[i11 + 168 + 28 >> 2] = i4 + 1;
     if ((i4 | 0) > -1) HEAP8[i1 >> 0] = 0;
     i2 = HEAP32[i7 >> 2] | 0;
     if (i2) __ZdaPv(i2);
     HEAP32[i7 >> 2] = i1;
    } else i1 = HEAP32[i7 >> 2] | 0; while (0);
    _memcpy(i1 | 0, i3 | 0, i4 + 1 | 0) | 0;
    HEAP32[i11 + 168 + 24 >> 2] = i4;
    HEAP32[i11 + 168 + 20 >> 2] = HEAP32[i11 + 120 + 4 >> 2];
    __ZdaPv(i3);
   }
   HEAP32[i11 + 120 >> 2] = 0;
   i1 = HEAP32[i11 + 104 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 104 >> 2] = 0;
   __ZNK6String9SubStringEii(i11 + 88 | 0, i8, i5 + 1 | 0, i6 + ~i5 | 0);
   __ZN6Shader19ReflectShaderStringERK6StringPNS_19UniformBufferObjectE(i9, i11 + 88 | 0, i11 + 168 | 0);
   i1 = HEAP32[i9 + 76 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i9 + 80 >> 2] | 0)) __ZNSt3__16vectorIN6Shader19UniformBufferObjectENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i9 + 72 | 0, i11 + 168 | 0); else {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i1, HEAP32[i11 + 168 >> 2] | 0);
    HEAP32[i1 + 16 >> 2] = 0;
    HEAP32[i1 + 16 + 4 >> 2] = 0;
    HEAP32[i1 + 16 + 8 >> 2] = 0;
    HEAP32[i1 + 16 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i1 + 16 | 0, HEAP32[i11 + 168 + 16 >> 2] | 0);
    __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEEC2ERKS5_(i1 + 32 | 0, i11 + 168 + 32 | 0);
    HEAP32[i9 + 76 >> 2] = (HEAP32[i9 + 76 >> 2] | 0) + 44;
   }
   i1 = HEAP32[i11 + 88 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 88 >> 2] = 0;
   i1 = HEAP32[i11 + 168 + 32 >> 2] | 0;
   if (i1) {
    i2 = HEAP32[i11 + 168 + 36 >> 2] | 0;
    if ((i2 | 0) != (i1 | 0)) {
     do {
      i5 = i2 + -48 | 0;
      HEAP32[i11 + 168 + 36 >> 2] = i5;
      i3 = i2 + -16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4) __ZdaPv(i4);
      HEAP32[i3 >> 2] = 0;
      i2 = i2 + -32 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if (i3) __ZdaPv(i3);
      HEAP32[i2 >> 2] = 0;
      i2 = HEAP32[i5 >> 2] | 0;
      if (i2) __ZdaPv(i2);
      HEAP32[i5 >> 2] = 0;
      i2 = HEAP32[i11 + 168 + 36 >> 2] | 0;
     } while ((i2 | 0) != (i1 | 0));
     i1 = HEAP32[i11 + 168 + 32 >> 2] | 0;
    }
    __ZdlPv(i1);
   }
   i1 = HEAP32[i11 + 168 + 16 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 168 + 16 >> 2] = 0;
   i1 = HEAP32[i11 + 168 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   __ZN5ArrayI6String9StdCAllocED2Ev(i11 + 152 | 0);
   i1 = HEAP32[i11 + 216 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 216 >> 2] = 0;
   i2 = i6 + 1 | 0;
  } else {
   HEAP32[i11 + 72 >> 2] = 0;
   HEAP32[i11 + 72 + 4 >> 2] = 0;
   HEAP32[i11 + 72 + 8 >> 2] = 0;
   HEAP32[i11 + 72 + 12 >> 2] = 0;
   __ZN6String3SetEPKci(i11 + 72 | 0, i1, i6 - i2 | 0);
   __ZNK6String7TrimmedEv(i11 + 40 | 0, i11 + 72 | 0);
   __ZNK6String5SplitEPKc(i11 + 56 | 0, i11 + 40 | 0, 298368);
   i1 = HEAP32[i11 + 40 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 40 >> 2] = 0;
   if ((HEAP32[i11 + 56 + 12 >> 2] | 0) == 3) {
    i1 = i11 + 168 | 0;
    i2 = i1 + 48 | 0;
    do {
     HEAP32[i1 >> 2] = 0;
     i1 = i1 + 4 | 0;
    } while ((i1 | 0) < (i2 | 0));
    i4 = HEAP32[i11 + 56 >> 2] | 0;
    __ZNK6String7TrimmedEv(i11 + 24 | 0, i4 + 16 | 0);
    i3 = HEAP32[i11 + 24 >> 2] | 0;
    do if (!i3) {
     HEAP32[i11 + 168 + 8 >> 2] = 0;
     HEAP32[i11 + 168 + 4 >> 2] = 0;
     i5 = 0;
    } else {
     i2 = HEAP32[i11 + 24 + 8 >> 2] | 0;
     if ((i2 | 0) > -1) {
      if (!(i2 + 1 | 0)) i1 = 0; else {
       i1 = __Znaj((i2 + 1 | 0) > -1 ? i2 + 1 | 0 : -1) | 0;
       HEAP32[i11 + 168 + 12 >> 2] = i2 + 1;
       HEAP8[i1 >> 0] = 0;
      }
      HEAP32[i11 + 168 >> 2] = i1;
      _memcpy(i1 | 0, i3 | 0, i2 + 1 | 0) | 0;
      HEAP32[i11 + 168 + 8 >> 2] = i2;
      HEAP32[i11 + 168 + 4 >> 2] = HEAP32[i11 + 24 + 4 >> 2];
      if (!i3) {
       i5 = i1;
       break;
      }
     } else {
      _memcpy(0, i3 | 0, i2 + 1 | 0) | 0;
      HEAP32[i11 + 168 + 8 >> 2] = i2;
      HEAP32[i11 + 168 + 4 >> 2] = HEAP32[i11 + 24 + 4 >> 2];
      i1 = 0;
     }
     __ZdaPv(i3);
     i5 = i1;
    } while (0);
    HEAP32[i11 + 24 >> 2] = 0;
    __ZNK6String7TrimmedEv(i11 + 8 | 0, i4 + 32 | 0);
    i3 = HEAP32[i11 + 8 >> 2] | 0;
    do if (!i3) {
     HEAP32[i11 + 168 + 24 >> 2] = 0;
     HEAP32[i11 + 168 + 20 >> 2] = 0;
     i2 = 0;
    } else {
     i2 = HEAP32[i11 + 8 + 8 >> 2] | 0;
     if ((i2 | 0) > -1) {
      if (!(i2 + 1 | 0)) i1 = 0; else {
       i1 = __Znaj((i2 + 1 | 0) > -1 ? i2 + 1 | 0 : -1) | 0;
       HEAP32[i11 + 168 + 28 >> 2] = i2 + 1;
       HEAP8[i1 >> 0] = 0;
      }
      HEAP32[i11 + 168 + 16 >> 2] = i1;
      _memcpy(i1 | 0, i3 | 0, i2 + 1 | 0) | 0;
      HEAP32[i11 + 168 + 24 >> 2] = i2;
      HEAP32[i11 + 168 + 20 >> 2] = HEAP32[i11 + 8 + 4 >> 2];
      if (!i3) {
       i2 = i1;
       break;
      }
     } else {
      _memcpy(0, i3 | 0, i2 + 1 | 0) | 0;
      HEAP32[i11 + 168 + 24 >> 2] = i2;
      HEAP32[i11 + 168 + 20 >> 2] = HEAP32[i11 + 8 + 4 >> 2];
      i1 = 0;
     }
     __ZdaPv(i3);
     i2 = i1;
    } while (0);
    HEAP32[i11 + 8 >> 2] = 0;
    do if (!i10) {
     i1 = HEAP32[i9 + 64 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i9 + 68 >> 2] | 0)) {
      __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i9 + 60 | 0, i11 + 168 | 0);
      break;
     } else {
      HEAP32[i1 >> 2] = 0;
      HEAP32[i1 + 4 >> 2] = 0;
      HEAP32[i1 + 8 >> 2] = 0;
      HEAP32[i1 + 12 >> 2] = 0;
      __ZN6String3SetEPKc(i1, i5);
      HEAP32[i1 + 16 >> 2] = 0;
      HEAP32[i1 + 16 + 4 >> 2] = 0;
      HEAP32[i1 + 16 + 8 >> 2] = 0;
      HEAP32[i1 + 16 + 12 >> 2] = 0;
      __ZN6String3SetEPKc(i1 + 16 | 0, i2);
      HEAP32[i1 + 32 >> 2] = 0;
      HEAP32[i1 + 32 + 4 >> 2] = 0;
      HEAP32[i1 + 32 + 8 >> 2] = 0;
      HEAP32[i1 + 32 + 12 >> 2] = 0;
      __ZN6String3SetEPKc(i1 + 32 | 0, 0);
      HEAP32[i9 + 64 >> 2] = (HEAP32[i9 + 64 >> 2] | 0) + 48;
      break;
     }
    } else {
     i1 = HEAP32[i10 + 36 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i10 + 40 >> 2] | 0)) {
      __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i10 + 32 | 0, i11 + 168 | 0);
      break;
     } else {
      HEAP32[i1 >> 2] = 0;
      HEAP32[i1 + 4 >> 2] = 0;
      HEAP32[i1 + 8 >> 2] = 0;
      HEAP32[i1 + 12 >> 2] = 0;
      __ZN6String3SetEPKc(i1, i5);
      HEAP32[i1 + 16 >> 2] = 0;
      HEAP32[i1 + 16 + 4 >> 2] = 0;
      HEAP32[i1 + 16 + 8 >> 2] = 0;
      HEAP32[i1 + 16 + 12 >> 2] = 0;
      __ZN6String3SetEPKc(i1 + 16 | 0, i2);
      HEAP32[i1 + 32 >> 2] = 0;
      HEAP32[i1 + 32 + 4 >> 2] = 0;
      HEAP32[i1 + 32 + 8 >> 2] = 0;
      HEAP32[i1 + 32 + 12 >> 2] = 0;
      __ZN6String3SetEPKc(i1 + 32 | 0, 0);
      HEAP32[i10 + 36 >> 2] = (HEAP32[i10 + 36 >> 2] | 0) + 48;
      break;
     }
    } while (0);
    HEAP32[i11 + 168 + 32 >> 2] = 0;
    if (i2) __ZdaPv(i2);
    HEAP32[i11 + 168 + 16 >> 2] = 0;
    if (i5) __ZdaPv(i5);
   } else {
    HEAP32[i11 >> 2] = HEAP32[i11 + 72 >> 2];
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298370, i11);
   }
   __ZN5ArrayI6String9StdCAllocED2Ev(i11 + 56 | 0);
   i1 = HEAP32[i11 + 72 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 72 >> 2] = 0;
   i2 = i6 + 1 | 0;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  i2 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298356, i2) | 0;
  if ((i2 | 0) == -1) {
   i1 = 83;
   break;
  }
 }
 if ((i1 | 0) == 83) {
  STACKTOP = i11;
  return;
 }
}

function _t1_ps_get_font_value(i2, i1, i3, i5, i4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 do switch (i1 | 0) {
 case 0:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 132 + 301 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 1:
  {
   if (i3 >>> 0 < 4) if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    switch (i3 | 0) {
    case 0:
     {
      i1 = HEAP32[i2 + 436 >> 2] | 0;
      break;
     }
    case 1:
     {
      i1 = HEAP32[i2 + 436 + 4 >> 2] | 0;
      break;
     }
    case 2:
     {
      i1 = HEAP32[i2 + 436 + 8 >> 2] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP32[i2 + 436 + 12 >> 2] | 0;
      break;
     }
    default:
     i1 = 0;
    }
    HEAP32[i5 >> 2] = i1;
    i1 = 4;
   } else i1 = 4; else i1 = -1;
   break;
  }
 case 2:
  {
   if (i3 >>> 0 < 4) if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    switch (i3 | 0) {
    case 0:
     {
      i1 = HEAP32[i2 + 460 >> 2] | 0;
      break;
     }
    case 1:
     {
      i1 = HEAP32[i2 + 460 + 4 >> 2] | 0;
      break;
     }
    case 2:
     {
      i1 = HEAP32[i2 + 460 + 8 >> 2] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP32[i2 + 460 + 12 >> 2] | 0;
      break;
     }
    default:
     i1 = 0;
    }
    HEAP32[i5 >> 2] = i1;
    i1 = 4;
   } else i1 = 4; else i1 = -1;
   break;
  }
 case 3:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 432 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 4:
  {
   i2 = HEAP32[i2 + 364 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i5 | 0) == 0 | (i1 | 0) > (i4 | 0))) _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 5:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 168 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 6:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 416 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 7:
  {
   if ((HEAP32[i2 + 416 >> 2] | 0) >>> 0 > i3 >>> 0) {
    i1 = HEAP32[(HEAP32[i2 + 420 >> 2] | 0) + (i3 << 2) >> 2] | 0;
    i2 = _strlen(i1) | 0;
    if ((i5 | 0) == 0 | (i2 + 1 | 0) > (i4 | 0)) i1 = i2 + 1 | 0; else {
     _memcpy(i5 | 0, i1 | 0, i2 + 1 | 0) | 0;
     HEAP8[i5 + i2 >> 0] = 0;
     i1 = i2 + 1 | 0;
    }
   } else i1 = -1;
   break;
  }
 case 8:
  {
   if ((HEAP32[i2 + 416 >> 2] | 0) >>> 0 > i3 >>> 0) {
    i1 = HEAP32[(HEAP32[i2 + 428 >> 2] | 0) + (i3 << 2) >> 2] | 0;
    if ((i5 | 0) != 0 & (i1 | 0) < (i4 | 0)) {
     _memcpy(i5 | 0, HEAP32[(HEAP32[i2 + 424 >> 2] | 0) + (i3 << 2) >> 2] | 0, i1 | 0) | 0;
     HEAP8[i5 + i1 >> 0] = 0;
     i1 = i1 + 1 | 0;
    } else i1 = i1 + 1 | 0;
   } else i1 = -1;
   break;
  }
 case 9:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 368 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 10:
  {
   if ((HEAP32[i2 + 368 >> 2] | 0) == 1 ? (HEAP32[i2 + 372 >> 2] | 0) >>> 0 > i3 >>> 0 : 0) {
    i1 = HEAP32[(HEAP32[i2 + 372 + 16 >> 2] | 0) + (i3 << 2) >> 2] | 0;
    i2 = _strlen(i1) | 0;
    if ((i5 | 0) == 0 | (i2 + 1 | 0) > (i4 | 0)) i1 = i2 + 1 | 0; else {
     _memcpy(i5 | 0, i1 | 0, i2 | 0) | 0;
     HEAP8[i5 + i2 >> 0] = 0;
     i1 = i2 + 1 | 0;
    }
   } else i1 = -1;
   break;
  }
 case 11:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 404 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 12:
  {
   if ((HEAP32[i2 + 404 >> 2] | 0) >>> 0 > i3 >>> 0) {
    i1 = HEAP32[(HEAP32[i2 + 412 >> 2] | 0) + (i3 << 2) >> 2] | 0;
    if ((i5 | 0) != 0 & (i1 | 0) < (i4 | 0)) {
     _memcpy(i5 | 0, HEAP32[(HEAP32[i2 + 408 >> 2] | 0) + (i3 << 2) >> 2] | 0, i1 | 0) | 0;
     HEAP8[i5 + i1 >> 0] = 0;
     i1 = i1 + 1 | 0;
    } else i1 = i1 + 1 | 0;
   } else i1 = -1;
   break;
  }
 case 13:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 120 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 14:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 122 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 15:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 168 + 8 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 16:
  {
   if ((HEAPU8[i2 + 168 + 8 >> 0] | 0) >>> 0 > i3 >>> 0) if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 12 + (i3 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = -1;
   break;
  }
 case 24:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 168 + 108 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 17:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 168 + 116 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 25:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 168 + 112 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 18:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 168 + 9 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 19:
  {
   if ((HEAPU8[i2 + 168 + 9 >> 0] | 0) >>> 0 > i3 >>> 0) if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 40 + (i3 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = -1;
   break;
  }
 case 20:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 168 + 10 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 21:
  {
   if ((HEAPU8[i2 + 168 + 10 >> 0] | 0) >>> 0 > i3 >>> 0) if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 60 + (i3 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = -1;
   break;
  }
 case 22:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 168 + 11 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 23:
  {
   if ((HEAPU8[i2 + 168 + 11 >> 0] | 0) >>> 0 > i3 >>> 0) if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 88 + (i3 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = -1;
   break;
  }
 case 26:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 168 + 124 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 27:
  {
   if ((HEAPU8[i2 + 168 + 124 >> 0] | 0) >>> 0 > i3 >>> 0) if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 128 + (i3 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = -1;
   break;
  }
 case 28:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 168 + 125 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 29:
  {
   if ((HEAPU8[i2 + 168 + 125 >> 0] | 0) >>> 0 > i3 >>> 0) if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 154 + (i3 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = -1;
   break;
  }
 case 31:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 168 + 127 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 30:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 168 + 126 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 32:
  {
   if (i3 >>> 0 < 2) if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 168 + 192 + (i3 << 1) >> 1] | 0;
    i1 = 2;
   } else i1 = 2; else i1 = -1;
   break;
  }
 case 33:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 168 + 4 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 34:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 168 + 188 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 35:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 168 + 184 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 case 41:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 0) {
    HEAP8[i5 >> 0] = HEAP8[i2 + 156 >> 0] | 0;
    i1 = 1;
   } else i1 = 1;
   break;
  }
 case 42:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 132 + 26 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 43:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 160 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 44:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 1) {
    HEAP16[i5 >> 1] = HEAP16[i2 + 164 >> 1] | 0;
    i1 = 2;
   } else i1 = 2;
   break;
  }
 case 36:
  {
   i2 = HEAP32[i2 + 132 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i5 | 0) == 0 | (i1 | 0) > (i4 | 0))) _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 37:
  {
   i2 = HEAP32[i2 + 136 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i5 | 0) == 0 | (i1 | 0) > (i4 | 0))) _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 38:
  {
   i2 = HEAP32[i2 + 140 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i5 | 0) == 0 | (i1 | 0) > (i4 | 0))) _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 39:
  {
   i2 = HEAP32[i2 + 144 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i5 | 0) == 0 | (i1 | 0) > (i4 | 0))) _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 40:
  {
   i2 = HEAP32[i2 + 148 >> 2] | 0;
   i1 = (_strlen(i2) | 0) + 1 | 0;
   if (!((i5 | 0) == 0 | (i1 | 0) > (i4 | 0))) _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
   break;
  }
 case 45:
  {
   if ((i5 | 0) != 0 & (i4 | 0) > 3) {
    HEAP32[i5 >> 2] = HEAP32[i2 + 152 >> 2];
    i1 = 4;
   } else i1 = 4;
   break;
  }
 default:
  i1 = -1;
 } while (0);
 return i1 | 0;
}

function __ZN8Graphics23SetupDefaultDeviceStateEv(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _glGetIntegerv(34921, i19 + 312 | 0);
 _glDisable(2884);
 _glDisable(3042);
 _glDisable(3089);
 _glCullFace(1029);
 _glFrontFace(2305);
 _glDisable(2929);
 _glDepthMask(1);
 _glDepthFunc(513);
 _glStencilMask(-1);
 _glColorMask(1, 1, 1, 1);
 _glClearDepthf(1.0);
 _glClearStencil(0);
 HEAP32[i19 + 68 >> 2] = 0;
 HEAP32[i19 + 72 >> 2] = 0;
 HEAP32[i19 + 76 >> 2] = 1;
 HEAP8[i19 + 80 >> 0] = 0;
 HEAPF32[i19 + 84 >> 2] = Math_fround(0.0);
 HEAP32[i19 + 88 >> 2] = 0;
 HEAP32[i19 + 100 >> 2] = 0;
 HEAP32[i19 + 104 >> 2] = -1;
 HEAP8[i19 + 108 >> 0] = 0;
 HEAP32[i19 + 112 >> 2] = 0;
 HEAP32[i19 + 112 + 4 >> 2] = 0;
 HEAP32[i19 + 112 + 8 >> 2] = 0;
 HEAP32[i19 + 112 + 12 >> 2] = 0;
 HEAP32[i19 + 112 + 16 >> 2] = 0;
 HEAP32[i19 + 112 + 20 >> 2] = 0;
 HEAP32[i19 + 112 + 24 >> 2] = 0;
 HEAP16[i19 + 140 >> 1] = -1;
 HEAP8[i19 + 142 >> 0] = 0;
 HEAP8[i19 + 143 >> 0] = 1;
 HEAP32[i19 + 144 >> 2] = 2;
 HEAP32[i19 + 288 >> 2] = 0;
 HEAP32[i19 + 292 >> 2] = 1029;
 HEAP32[i19 + 296 >> 2] = 0;
 HEAP32[i19 + 304 >> 2] = 0;
 HEAP32[i19 + 308 >> 2] = 0;
 HEAP32[i19 + 96 >> 2] = 0;
 HEAPF32[i19 + 92 >> 2] = Math_fround(1.0);
 _glViewport(0, 0, HEAP32[i19 + 24 >> 2] | 0, HEAP32[i19 + 28 >> 2] | 0);
 HEAP32[i19 + 56 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = -1;
 _glGetIntegerv(34466, i20 + 4 | 0);
 i6 = HEAP32[i20 + 4 >> 2] | 0;
 if ((i6 | 0) > 0) {
  i7 = __Znaj(i6 >>> 0 > 1073741823 ? -1 : i6 << 2) | 0;
  _glGetIntegerv(34467, i7 | 0);
  i10 = 0;
  do {
   i8 = __Z21GLEnumToTextureFormatj(HEAP32[i7 + (i10 << 2) >> 2] | 0) | 0;
   if (i8) {
    i1 = HEAP32[i19 + 56 >> 2] | 0;
    i2 = HEAP32[i19 + 52 >> 2] | 0;
    if (i1 >>> 0 >= i2 >>> 0 ? (i9 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i9 >>> 0 >= i2 >>> 0) : 0) {
     i5 = __Znaj(i9 >>> 0 > 1073741823 ? -1 : i9 << 2) | 0;
     i4 = HEAP32[i19 + 44 >> 2] | 0;
     if (!i1) if (!i4) i1 = 0; else i16 = 9; else {
      i2 = 0;
      do {
       HEAP32[i5 + (i2 << 2) >> 2] = HEAP32[i4 + (i2 << 2) >> 2];
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) != (i1 | 0));
      i16 = 9;
     }
     if ((i16 | 0) == 9) {
      i16 = 0;
      __ZdaPv(i4);
      i1 = HEAP32[i19 + 56 >> 2] | 0;
     }
     HEAP32[i19 + 44 >> 2] = i5;
     HEAP32[i19 + 52 >> 2] = i9;
    }
    HEAP32[(HEAP32[i19 + 44 >> 2] | 0) + (i1 << 2) >> 2] = i8;
    HEAP32[i19 + 56 >> 2] = i1 + 1;
   }
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) != (i6 | 0));
  __ZdaPv(i7);
 }
 if ((__Z15WWWGlGetVersionv() | 0) > 299) i1 = 1; else i1 = (__Z24WWWGLSupportsGLExtensionPKc(290732) | 0) & 1;
 HEAP8[i19 + 152 >> 0] = i1;
 HEAP32[i20 >> 2] = i1 << 24 >> 24 != 0 ? 290755 : 290759;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 290762, i20);
 if (__Z24WWWGLSupportsGLExtensionPKc(290798) | 0) {
  i1 = HEAP32[i19 + 56 >> 2] | 0;
  i2 = HEAP32[i19 + 52 >> 2] | 0;
  if (i1 >>> 0 >= i2 >>> 0 ? (i11 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i11 >>> 0 >= i2 >>> 0) : 0) {
   i5 = __Znaj(i11 >>> 0 > 1073741823 ? -1 : i11 << 2) | 0;
   i4 = HEAP32[i19 + 44 >> 2] | 0;
   if (!i1) if (!i4) i1 = 0; else i16 = 22; else {
    i2 = 0;
    do {
     HEAP32[i5 + (i2 << 2) >> 2] = HEAP32[i4 + (i2 << 2) >> 2];
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i1 | 0));
    i16 = 22;
   }
   if ((i16 | 0) == 22) {
    __ZdaPv(i4);
    i1 = HEAP32[i19 + 56 >> 2] | 0;
   }
   HEAP32[i19 + 44 >> 2] = i5;
   HEAP32[i19 + 52 >> 2] = i11;
  }
  HEAP32[(HEAP32[i19 + 44 >> 2] | 0) + (i1 << 2) >> 2] = 87;
  HEAP32[i19 + 56 >> 2] = i1 + 1;
 }
 if (__Z24WWWGLSupportsGLExtensionPKc(290810) | 0) {
  i1 = HEAP32[i19 + 56 >> 2] | 0;
  i4 = HEAP32[i19 + 52 >> 2] | 0;
  if (i1 >>> 0 >= i4 >>> 0 ? (i12 = i4 << 1 >>> 0 < 32 ? 32 : i4 << 1, i12 >>> 0 >= i4 >>> 0) : 0) {
   i5 = __Znaj(i12 >>> 0 > 1073741823 ? -1 : i12 << 2) | 0;
   i4 = HEAP32[i19 + 44 >> 2] | 0;
   if (!i1) if (!i4) i1 = 0; else i16 = 31; else {
    i2 = 0;
    do {
     HEAP32[i5 + (i2 << 2) >> 2] = HEAP32[i4 + (i2 << 2) >> 2];
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i1 | 0));
    i16 = 31;
   }
   if ((i16 | 0) == 31) {
    __ZdaPv(i4);
    i1 = HEAP32[i19 + 56 >> 2] | 0;
   }
   HEAP32[i19 + 44 >> 2] = i5;
   HEAP32[i19 + 52 >> 2] = i12;
   i4 = i12;
  }
  i2 = HEAP32[i19 + 44 >> 2] | 0;
  HEAP32[i2 + (i1 << 2) >> 2] = 55;
  i1 = i1 + 1 | 0;
  HEAP32[i19 + 56 >> 2] = i1;
  if (i1 >>> 0 >= i4 >>> 0 ? (i13 = i4 << 1, i13 = i13 >>> 0 < 32 ? 32 : i13, i13 >>> 0 >= i4 >>> 0) : 0) {
   i5 = __Znaj(i13 >>> 0 > 1073741823 ? -1 : i13 << 2) | 0;
   if (!i1) if (!i2) i1 = 0; else i16 = 38; else {
    i4 = 0;
    do {
     HEAP32[i5 + (i4 << 2) >> 2] = HEAP32[i2 + (i4 << 2) >> 2];
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i1 | 0));
    i16 = 38;
   }
   if ((i16 | 0) == 38) {
    __ZdaPv(i2);
    i1 = HEAP32[i19 + 56 >> 2] | 0;
   }
   HEAP32[i19 + 44 >> 2] = i5;
   HEAP32[i19 + 52 >> 2] = i13;
   i2 = i5;
  }
  HEAP32[i2 + (i1 << 2) >> 2] = 1048582;
  HEAP32[i19 + 56 >> 2] = i1 + 1;
 }
 if (!((!(__Z24WWWGLSupportsGLExtensionPKc(290831) | 0) ? !(__Z24WWWGLSupportsGLExtensionPKc(290858) | 0) : 0) ? !(__Z24WWWGLSupportsGLExtensionPKc(290882) | 0) : 0)) {
  i1 = HEAP32[i19 + 56 >> 2] | 0;
  i2 = HEAP32[i19 + 52 >> 2] | 0;
  if (i1 >>> 0 >= i2 >>> 0 ? (i14 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i14 >>> 0 >= i2 >>> 0) : 0) {
   i5 = __Znaj(i14 >>> 0 > 1073741823 ? -1 : i14 << 2) | 0;
   i4 = HEAP32[i19 + 44 >> 2] | 0;
   if (!i1) if (!i4) i1 = 0; else i16 = 49; else {
    i2 = 0;
    do {
     HEAP32[i5 + (i2 << 2) >> 2] = HEAP32[i4 + (i2 << 2) >> 2];
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i1 | 0));
    i16 = 49;
   }
   if ((i16 | 0) == 49) {
    __ZdaPv(i4);
    i1 = HEAP32[i19 + 56 >> 2] | 0;
   }
   HEAP32[i19 + 44 >> 2] = i5;
   HEAP32[i19 + 52 >> 2] = i14;
   i4 = i14;
  } else i4 = i2;
  i2 = HEAP32[i19 + 44 >> 2] | 0;
  HEAP32[i2 + (i1 << 2) >> 2] = 55;
  i1 = i1 + 1 | 0;
  HEAP32[i19 + 56 >> 2] = i1;
  if (i1 >>> 0 >= i4 >>> 0 ? (i3 = i4 << 1, i3 = i3 >>> 0 < 32 ? 32 : i3, i3 >>> 0 >= i4 >>> 0) : 0) {
   i5 = __Znaj(i3 >>> 0 > 1073741823 ? -1 : i3 << 2) | 0;
   if (!i1) if (!i2) i1 = 0; else i16 = 56; else {
    i4 = 0;
    do {
     HEAP32[i5 + (i4 << 2) >> 2] = HEAP32[i2 + (i4 << 2) >> 2];
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i1 | 0));
    i16 = 56;
   }
   if ((i16 | 0) == 56) {
    __ZdaPv(i2);
    i1 = HEAP32[i19 + 56 >> 2] | 0;
   }
   HEAP32[i19 + 44 >> 2] = i5;
   HEAP32[i19 + 52 >> 2] = i3;
   i2 = i5;
  } else i3 = i4;
  HEAP32[i2 + (i1 << 2) >> 2] = 1048582;
  i1 = i1 + 1 | 0;
  HEAP32[i19 + 56 >> 2] = i1;
  if (i1 >>> 0 >= i3 >>> 0 ? (i15 = i3 << 1, i15 = i15 >>> 0 < 32 ? 32 : i15, i15 >>> 0 >= i3 >>> 0) : 0) {
   i4 = __Znaj(i15 >>> 0 > 1073741823 ? -1 : i15 << 2) | 0;
   if (!i1) if (!i2) i1 = 0; else i16 = 63; else {
    i3 = 0;
    do {
     HEAP32[i4 + (i3 << 2) >> 2] = HEAP32[i2 + (i3 << 2) >> 2];
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i1 | 0));
    i16 = 63;
   }
   if ((i16 | 0) == 63) {
    __ZdaPv(i2);
    i1 = HEAP32[i19 + 56 >> 2] | 0;
   }
   HEAP32[i19 + 44 >> 2] = i4;
   HEAP32[i19 + 52 >> 2] = i15;
   i2 = i4;
  }
  HEAP32[i2 + (i1 << 2) >> 2] = 45;
  HEAP32[i19 + 56 >> 2] = i1 + 1;
 }
 if (__Z24WWWGLSupportsGLExtensionPKc(290902) | 0) {
  i1 = HEAP32[i19 + 56 >> 2] | 0;
  i2 = HEAP32[i19 + 52 >> 2] | 0;
  if (i1 >>> 0 >= i2 >>> 0 ? (i17 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i17 >>> 0 >= i2 >>> 0) : 0) {
   i4 = __Znaj(i17 >>> 0 > 1073741823 ? -1 : i17 << 2) | 0;
   i3 = HEAP32[i19 + 44 >> 2] | 0;
   if (!i1) if (!i3) i1 = 0; else i16 = 72; else {
    i2 = 0;
    do {
     HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i3 + (i2 << 2) >> 2];
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i1 | 0));
    i16 = 72;
   }
   if ((i16 | 0) == 72) {
    __ZdaPv(i3);
    i1 = HEAP32[i19 + 56 >> 2] | 0;
   }
   HEAP32[i19 + 44 >> 2] = i4;
   HEAP32[i19 + 52 >> 2] = i17;
  }
  HEAP32[(HEAP32[i19 + 44 >> 2] | 0) + (i1 << 2) >> 2] = 2;
  HEAP32[i19 + 56 >> 2] = i1 + 1;
 }
 if (__Z24WWWGLSupportsGLExtensionPKc(290920) | 0) {
  i1 = HEAP32[i19 + 56 >> 2] | 0;
  i2 = HEAP32[i19 + 52 >> 2] | 0;
  if (i1 >>> 0 >= i2 >>> 0 ? (i18 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i18 >>> 0 >= i2 >>> 0) : 0) {
   i4 = __Znaj(i18 >>> 0 > 1073741823 ? -1 : i18 << 2) | 0;
   i3 = HEAP32[i19 + 44 >> 2] | 0;
   if (!i1) if (!i3) i1 = 0; else i16 = 81; else {
    i2 = 0;
    do {
     HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i3 + (i2 << 2) >> 2];
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i1 | 0));
    i16 = 81;
   }
   if ((i16 | 0) == 81) {
    __ZdaPv(i3);
    i1 = HEAP32[i19 + 56 >> 2] | 0;
   }
   HEAP32[i19 + 44 >> 2] = i4;
   HEAP32[i19 + 52 >> 2] = i18;
  }
  HEAP32[(HEAP32[i19 + 44 >> 2] | 0) + (i1 << 2) >> 2] = 10;
  HEAP32[i19 + 56 >> 2] = i1 + 1;
 }
 HEAP32[i19 + 60 >> 2] = 1;
 if (__Z24WWWGLSupportsGLExtensionPKc(290943) | 0) _glGetIntegerv(34047, i19 + 60 | 0);
 if (HEAP32[i19 + 284 >> 2] | 0) {
  STACKTOP = i20;
  return;
 }
 _glGenFramebuffers(1, i19 + 284 | 0);
 STACKTOP = i20;
 return;
}

function _parse_charstrings(i16, i17) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = HEAP32[i17 + 16 >> 2] | 0;
 i14 = HEAP32[i16 + 488 >> 2] | 0;
 i15 = HEAP32[i17 + 8 >> 2] | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[i17 + 36 >> 2] & 63](i17) | 0;
 if (!i12) {
  STACKTOP = i18;
  return;
 }
 if (HEAP32[i17 + 12 >> 2] | 0) {
  STACKTOP = i18;
  return;
 }
 if (!(HEAP32[i17 + 152 >> 2] | 0)) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i14 >> 2] >> 2] & 127](i17 + 208 | 0, i12 + 6 | 0, i13) | 0;
  HEAP32[i18 >> 2] = i1;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i14 >> 2] >> 2] & 127](i17 + 156 | 0, i12 + 6 | 0, i13) | 0;
   HEAP32[i18 >> 2] = i1;
   if (!i1) {
    i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i14 >> 2] >> 2] & 127](i17 + 260 | 0, 4, i13) | 0;
    HEAP32[i18 >> 2] = i1;
    if (!i1) i4 = 7;
   }
  }
 } else i4 = 7;
 L11 : do if ((i4 | 0) == 7) {
  FUNCTION_TABLE_vi[HEAP32[i17 + 28 >> 2] & 127](i17);
  i1 = HEAP32[i17 >> 2] | 0;
  do if (i1 >>> 0 < i15 >>> 0) {
   i2 = 0;
   i11 = 0;
   i3 = 0;
   L15 : while (1) {
    i8 = (i2 | 0) != 0;
    while (1) {
     i4 = i1 + 3 | 0;
     L19 : do if (i4 >>> 0 < i15 >>> 0) {
      switch (HEAP8[i4 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       break L19;
      }
      switch (HEAP8[i1 >> 0] | 0) {
      case 100:
       {
        if ((HEAP8[i1 + 1 >> 0] | 0) != 101) break L19;
        if (i8 & (HEAP8[i1 + 2 >> 0] | 0) == 102) {
         i1 = i11;
         i4 = 42;
         break L15;
        } else break L19;
       }
      case 101:
       {
        if ((HEAP8[i1 + 1 >> 0] | 0) != 110) break L19;
        if ((HEAP8[i1 + 2 >> 0] | 0) == 100) {
         i1 = i11;
         i4 = 42;
         break L15;
        } else break L19;
       }
      default:
       break L19;
      }
     } while (0);
     FUNCTION_TABLE_vi[HEAP32[i17 + 32 >> 2] & 127](i17);
     if (HEAP32[i17 + 12 >> 2] | 0) {
      i4 = 60;
      break L15;
     }
     if ((HEAP8[i1 >> 0] | 0) == 47) {
      i6 = i1 + 1 | 0;
      if (i6 >>> 0 >= i15 >>> 0) {
       i4 = 22;
       break L15;
      }
      i7 = HEAP32[i17 >> 2] | 0;
      i1 = HEAP32[(HEAP32[i16 + 128 >> 2] | 0) + 52 >> 2] | 0;
      i5 = HEAP32[i17 + 8 >> 2] | 0;
      FUNCTION_TABLE_vi[HEAP32[i17 + 28 >> 2] & 127](i17);
      i4 = HEAP32[i17 >> 2] | 0;
      if (i4 >>> 0 >= i5 >>> 0) {
       i4 = 27;
       break L15;
      }
      if (((HEAPU8[i4 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       i4 = 27;
       break L15;
      }
      i9 = FUNCTION_TABLE_ii[HEAP32[i17 + 36 >> 2] & 63](i17) | 0;
      FUNCTION_TABLE_vi[HEAP32[i17 + 32 >> 2] & 127](i17);
      i10 = HEAP32[i17 >> 2] | 0;
      if ((i9 | 0) <= -1) {
       i4 = 27;
       break L15;
      }
      if ((i9 | 0) >= (i5 - (i10 + 1) | 0)) {
       i4 = 27;
       break L15;
      }
      HEAP32[i17 >> 2] = i10 + (i9 + 1);
      if (HEAP32[i17 + 12 >> 2] | 0) {
       i4 = 60;
       break L15;
      }
      if (!(HEAP32[i17 + 152 >> 2] | 0)) break;
     }
     FUNCTION_TABLE_vi[HEAP32[i17 + 28 >> 2] & 127](i17);
     i1 = HEAP32[i17 >> 2] | 0;
     if (i1 >>> 0 >= i15 >>> 0) {
      i1 = i11;
      i4 = 42;
      break L15;
     }
    }
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 200 >> 2] & 63](i17 + 156 | 0, i2, i6, i7 - i6 + 1 | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    HEAP8[(HEAP32[(HEAP32[i17 + 180 >> 2] | 0) + (i2 << 2) >> 2] | 0) + (i7 - i6) >> 0] = 0;
    if ((HEAP8[i6 >> 0] | 0) == 46) {
     i8 = (_strcmp(323974, HEAP32[(HEAP32[i17 + 180 >> 2] | 0) + (i2 << 2) >> 2] | 0) | 0) == 0;
     i5 = i8 ? 1 : i11;
     i3 = i8 ? i2 : i3;
    } else i5 = i11;
    i1 = HEAP32[i16 + 172 >> 2] | 0;
    if ((i2 | 0) < (i12 + 5 | 0) & (i1 | 0) > -1) {
     if ((i9 | 0) <= (i1 | 0)) {
      i4 = 36;
      break;
     }
     i4 = _ft_mem_alloc(i13, i9, i18) | 0;
     i1 = HEAP32[i18 >> 2] | 0;
     if (i1) break L11;
     _memcpy(i4 | 0, i10 + 1 | 0, i9 | 0) | 0;
     FUNCTION_TABLE_viii[HEAP32[i14 + 16 >> 2] & 31](i4, i9, 4330);
     i1 = HEAP32[i16 + 172 >> 2] | 0;
     HEAP32[i18 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[i17 + 252 >> 2] & 63](i17 + 208 | 0, i2, i4 + i1 | 0, i9 - i1 | 0) | 0;
     _ft_mem_free(i13, i4);
     i1 = HEAP32[i18 >> 2] | 0;
    } else {
     i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 252 >> 2] & 63](i17 + 208 | 0, i2, i10 + 1 | 0, i9) | 0;
     HEAP32[i18 >> 2] = i1;
    }
    if (i1) break L11;
    i2 = i2 + 1 | 0;
    FUNCTION_TABLE_vi[HEAP32[i17 + 28 >> 2] & 127](i17);
    i1 = HEAP32[i17 >> 2] | 0;
    if (i1 >>> 0 >= i15 >>> 0) {
     i1 = i5;
     i4 = 42;
     break;
    } else i11 = i5;
   }
   if ((i4 | 0) == 22) {
    HEAP32[i18 >> 2] = 3;
    i1 = 3;
    break L11;
   } else if ((i4 | 0) == 27) {
    if (i1) {
     STACKTOP = i18;
     return;
    }
    HEAP32[i17 + 12 >> 2] = 3;
    STACKTOP = i18;
    return;
   } else if ((i4 | 0) == 36) {
    HEAP32[i18 >> 2] = 3;
    i1 = 3;
    break L11;
   } else if ((i4 | 0) == 42) {
    HEAP32[i17 + 152 >> 2] = i2;
    if (!(i1 << 24 >> 24)) break;
    i1 = HEAP32[HEAP32[i17 + 180 >> 2] >> 2] | 0;
    if (!(_strcmp(323974, i1) | 0)) {
     STACKTOP = i18;
     return;
    }
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 304 >> 2] & 63](i17 + 260 | 0, 0, i1, HEAP32[HEAP32[i17 + 184 >> 2] >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 304 >> 2] & 63](i17 + 260 | 0, 1, HEAP32[HEAP32[i17 + 232 >> 2] >> 2] | 0, HEAP32[HEAP32[i17 + 236 >> 2] >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 304 >> 2] & 63](i17 + 260 | 0, 2, HEAP32[(HEAP32[i17 + 180 >> 2] | 0) + (i3 << 2) >> 2] | 0, HEAP32[(HEAP32[i17 + 184 >> 2] | 0) + (i3 << 2) >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 304 >> 2] & 63](i17 + 260 | 0, 3, HEAP32[(HEAP32[i17 + 232 >> 2] | 0) + (i3 << 2) >> 2] | 0, HEAP32[(HEAP32[i17 + 236 >> 2] | 0) + (i3 << 2) >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 200 >> 2] & 63](i17 + 156 | 0, i3, HEAP32[HEAP32[i17 + 284 >> 2] >> 2] | 0, HEAP32[HEAP32[i17 + 288 >> 2] >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 252 >> 2] & 63](i17 + 208 | 0, i3, HEAP32[(HEAP32[i17 + 284 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i17 + 288 >> 2] | 0) + 4 >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 200 >> 2] & 63](i17 + 156 | 0, 0, HEAP32[(HEAP32[i17 + 284 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[i17 + 288 >> 2] | 0) + 8 >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 252 >> 2] & 63](i17 + 208 | 0, 0, HEAP32[(HEAP32[i17 + 284 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[i17 + 288 >> 2] | 0) + 12 >> 2] | 0) | 0;
    HEAP32[i18 >> 2] = i1;
    if (i1) break L11;
    STACKTOP = i18;
    return;
   } else if ((i4 | 0) == 60) {
    STACKTOP = i18;
    return;
   }
  } else {
   HEAP32[i17 + 152 >> 2] = 0;
   i2 = 0;
  } while (0);
  HEAP8[i18 + 4 >> 0] = HEAP8[323316] | 0;
  HEAP8[i18 + 4 + 1 >> 0] = HEAP8[323317] | 0;
  HEAP8[i18 + 4 + 2 >> 0] = HEAP8[323318] | 0;
  HEAP8[i18 + 4 + 3 >> 0] = HEAP8[323319] | 0;
  HEAP8[i18 + 4 + 4 >> 0] = HEAP8[323320] | 0;
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 304 >> 2] & 63](i17 + 260 | 0, 0, HEAP32[HEAP32[i17 + 180 >> 2] >> 2] | 0, HEAP32[HEAP32[i17 + 184 >> 2] >> 2] | 0) | 0;
  HEAP32[i18 >> 2] = i1;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 304 >> 2] & 63](i17 + 260 | 0, 1, HEAP32[HEAP32[i17 + 232 >> 2] >> 2] | 0, HEAP32[HEAP32[i17 + 236 >> 2] >> 2] | 0) | 0;
   HEAP32[i18 >> 2] = i1;
   if (!i1) {
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 200 >> 2] & 63](i17 + 156 | 0, 0, 323974, 8) | 0;
    HEAP32[i18 >> 2] = i1;
    if (!i1) {
     i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 252 >> 2] & 63](i17 + 208 | 0, 0, i18 + 4 | 0, 5) | 0;
     HEAP32[i18 >> 2] = i1;
     if (!i1) {
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 200 >> 2] & 63](i17 + 156 | 0, i2, HEAP32[HEAP32[i17 + 284 >> 2] >> 2] | 0, HEAP32[HEAP32[i17 + 288 >> 2] >> 2] | 0) | 0;
      HEAP32[i18 >> 2] = i1;
      if (!i1) {
       i1 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 252 >> 2] & 63](i17 + 208 | 0, i2, HEAP32[(HEAP32[i17 + 284 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i17 + 288 >> 2] | 0) + 4 >> 2] | 0) | 0;
       HEAP32[i18 >> 2] = i1;
       if (!i1) {
        HEAP32[i17 + 152 >> 2] = (HEAP32[i17 + 152 >> 2] | 0) + 1;
        STACKTOP = i18;
        return;
       }
      }
     }
    }
   }
  }
 } while (0);
 HEAP32[i17 + 12 >> 2] = i1;
 STACKTOP = i18;
 return;
}

function __ZN11Application10AddObjectsEi(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 __ZNK4math7Frustum11CenterPointEv(i12 + 360 | 0, i11 + 2288 | 0);
 __ZN4math6float39RandomDirERNS_3LCGEf(i12 + 336 | 0, i11 + 1788 | 0, Math_fround(1.0));
 __ZNK4math6float33AbsEv(i12 + 348 | 0, i12 + 336 | 0);
 __ZN4math6float39RandomDirERNS_3LCGEf(i12 + 312 | 0, i11 + 1788 | 0, Math_fround(1.0));
 __ZNK4math6float33AbsEv(i12 + 324 | 0, i12 + 312 | 0);
 i6 = (HEAP32[i11 + 2596 >> 2] | 0) == 2 ? i10 : 1;
 if ((i10 | 0) > 0) {
  i9 = 0;
  do {
   __ZN4math6float39RandomDirERNS_3LCGEf(i12 + 276 | 0, i11 + 1788 | 0, Math_fround(1.0));
   __ZN4mathmlEfRKNS_6float3E(i12 + 288 | 0, Math_fround(250.0), i12 + 276 | 0);
   __ZNK4math6float3plERKS0_(i12 + 300 | 0, i12 + 360 | 0, i12 + 288 | 0);
   HEAP32[i12 + 264 >> 2] = HEAP32[i12 + 300 >> 2];
   HEAP32[i12 + 264 + 4 >> 2] = HEAP32[i12 + 300 + 4 >> 2];
   HEAP32[i12 + 264 + 8 >> 2] = HEAP32[i12 + 300 + 8 >> 2];
   i1 = HEAP32[i11 + 1816 >> 2] | 0;
   i2 = HEAP32[i11 + 1812 >> 2] | 0;
   if (i1 >>> 0 >= i2 >>> 0 ? (i7 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i7 >>> 0 >= i2 >>> 0) : 0) {
    i4 = __Znaj(i7 >>> 0 > 357913941 ? -1 : i7 * 12 | 0) | 0;
    i3 = HEAP32[i11 + 1804 >> 2] | 0;
    if (!i1) if (!i3) i1 = 0; else i5 = 9; else {
     i2 = 0;
     do {
      i5 = i4 + (i2 * 12 | 0) | 0;
      i13 = i3 + (i2 * 12 | 0) | 0;
      HEAP32[i5 >> 2] = HEAP32[i13 >> 2];
      HEAP32[i5 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
      HEAP32[i5 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i1 | 0));
     i5 = 9;
    }
    if ((i5 | 0) == 9) {
     i5 = 0;
     __ZdaPv(i3);
     i1 = HEAP32[i11 + 1816 >> 2] | 0;
    }
    HEAP32[i11 + 1804 >> 2] = i4;
    HEAP32[i11 + 1812 >> 2] = i7;
   }
   i1 = (HEAP32[i11 + 1804 >> 2] | 0) + (i1 * 12 | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i12 + 264 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 264 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 264 + 8 >> 2];
   HEAP32[i11 + 1816 >> 2] = (HEAP32[i11 + 1816 >> 2] | 0) + 1;
   HEAP32[i12 + 360 >> 2] = HEAP32[i12 + 300 >> 2];
   HEAP32[i12 + 360 + 4 >> 2] = HEAP32[i12 + 300 + 4 >> 2];
   HEAP32[i12 + 360 + 8 >> 2] = HEAP32[i12 + 300 + 8 >> 2];
   __ZN4math4Quat14RandomRotationERNS_3LCGE(i12 + 248 | 0, i11 + 1788 | 0);
   i1 = HEAP32[i11 + 1832 >> 2] | 0;
   i2 = HEAP32[i11 + 1828 >> 2] | 0;
   if (i1 >>> 0 >= i2 >>> 0 ? (i8 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i8 >>> 0 >= i2 >>> 0) : 0) {
    i4 = __Znaj(i8 >>> 0 > 268435455 ? -1 : i8 << 4) | 0;
    i3 = HEAP32[i11 + 1820 >> 2] | 0;
    if (!i1) if (!i3) i1 = 0; else i5 = 16; else {
     i2 = 0;
     do {
      i13 = i4 + (i2 << 4) | 0;
      i5 = i3 + (i2 << 4) | 0;
      HEAP32[i13 >> 2] = HEAP32[i5 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
      HEAP32[i13 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i1 | 0));
     i5 = 16;
    }
    if ((i5 | 0) == 16) {
     i5 = 0;
     __ZdaPv(i3);
     i1 = HEAP32[i11 + 1832 >> 2] | 0;
    }
    HEAP32[i11 + 1820 >> 2] = i4;
    HEAP32[i11 + 1828 >> 2] = i8;
   }
   i1 = (HEAP32[i11 + 1820 >> 2] | 0) + (i1 << 4) | 0;
   HEAP32[i1 >> 2] = HEAP32[i12 + 248 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 248 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 248 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i12 + 248 + 12 >> 2];
   HEAP32[i11 + 1832 >> 2] = (HEAP32[i11 + 1832 >> 2] | 0) + 1;
   __ZN4math6float39RandomDirERNS_3LCGEf(i12 + 208 | 0, i11 + 1788 | 0, Math_fround(1.0));
   __ZNK4math6float3mlEf(i12 + 220 | 0, i12 + 208 | 0, Math_fround(.100000001));
   __ZNK4math6float3plERKS0_(i12 + 232 | 0, i12 + 348 | 0, i12 + 220 | 0);
   __ZN4math6float39RandomDirERNS_3LCGEf(i12 + 172 | 0, i11 + 1788 | 0, Math_fround(1.0));
   __ZNK4math6float3mlEf(i12 + 184 | 0, i12 + 172 | 0, Math_fround(.100000001));
   __ZNK4math6float3plERKS0_(i12 + 196 | 0, i12 + 324 | 0, i12 + 184 | 0);
   __ZNK4math6float3miERKS0_(i12 + 148 | 0, 664, i12 + 232 | 0);
   __ZNK4math6float33MinERKS0_(i12 + 160 | 0, i12 + 232 | 0, i12 + 148 | 0);
   HEAP32[i12 + 232 >> 2] = HEAP32[i12 + 160 >> 2];
   HEAP32[i12 + 232 + 4 >> 2] = HEAP32[i12 + 160 + 4 >> 2];
   HEAP32[i12 + 232 + 8 >> 2] = HEAP32[i12 + 160 + 8 >> 2];
   __ZNK4math6float3ngEv(i12 + 124 | 0, i12 + 232 | 0);
   __ZNK4math6float33MaxERKS0_(i12 + 136 | 0, i12 + 232 | 0, i12 + 124 | 0);
   HEAP32[i12 + 232 >> 2] = HEAP32[i12 + 136 >> 2];
   HEAP32[i12 + 232 + 4 >> 2] = HEAP32[i12 + 136 + 4 >> 2];
   HEAP32[i12 + 232 + 8 >> 2] = HEAP32[i12 + 136 + 8 >> 2];
   __ZNK4math6float3miERKS0_(i12 + 100 | 0, 664, i12 + 196 | 0);
   __ZNK4math6float33MinERKS0_(i12 + 112 | 0, i12 + 196 | 0, i12 + 100 | 0);
   HEAP32[i12 + 196 >> 2] = HEAP32[i12 + 112 >> 2];
   HEAP32[i12 + 196 + 4 >> 2] = HEAP32[i12 + 112 + 4 >> 2];
   HEAP32[i12 + 196 + 8 >> 2] = HEAP32[i12 + 112 + 8 >> 2];
   __ZNK4math6float3ngEv(i12 + 76 | 0, i12 + 196 | 0);
   __ZNK4math6float33MaxERKS0_(i12 + 88 | 0, i12 + 196 | 0, i12 + 76 | 0);
   HEAP32[i12 + 196 >> 2] = HEAP32[i12 + 88 >> 2];
   HEAP32[i12 + 348 >> 2] = HEAP32[i12 + 232 >> 2];
   HEAP32[i12 + 348 + 4 >> 2] = HEAP32[i12 + 232 + 4 >> 2];
   HEAP32[i12 + 348 + 8 >> 2] = HEAP32[i12 + 232 + 8 >> 2];
   HEAP32[i12 + 324 >> 2] = HEAP32[i12 + 88 >> 2];
   HEAP32[i12 + 324 + 4 >> 2] = HEAP32[i12 + 88 + 4 >> 2];
   HEAP32[i12 + 324 + 8 >> 2] = HEAP32[i12 + 88 + 8 >> 2];
   HEAP32[i12 + 232 >> 2] = HEAP32[i12 + 196 >> 2];
   HEAPF32[i12 + 232 + 8 >> 2] = Math_fround(0.0);
   HEAPF32[i12 + 196 + 8 >> 2] = Math_fround(.5);
   HEAPF32[i12 + 232 + 4 >> 2] = Math_fround(.5);
   HEAPF32[i12 + 196 + 4 >> 2] = Math_fround(.5);
   __Z7HSL2RGBRKN4math6float3E(i12 + 64 | 0, i12 + 232 | 0);
   i1 = HEAP32[i11 + 1840 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i11 + 1844 >> 2] | 0)) __ZNSt3__16vectorIN4math6float3ENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i11 + 1836 | 0, i12 + 64 | 0); else {
    HEAP32[i1 >> 2] = HEAP32[i12 + 64 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 64 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 64 + 8 >> 2];
    HEAP32[i11 + 1840 >> 2] = (HEAP32[i11 + 1840 >> 2] | 0) + 12;
   }
   __Z7HSL2RGBRKN4math6float3E(i12 + 52 | 0, i12 + 196 | 0);
   i1 = HEAP32[i11 + 1852 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i11 + 1856 >> 2] | 0)) __ZNSt3__16vectorIN4math6float3ENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i11 + 1848 | 0, i12 + 52 | 0); else {
    HEAP32[i1 >> 2] = HEAP32[i12 + 52 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 52 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 52 + 8 >> 2];
    HEAP32[i11 + 1852 >> 2] = (HEAP32[i11 + 1852 >> 2] | 0) + 12;
   }
   do if (((HEAP32[i11 + 2280 >> 2] | 0) - (HEAP32[i11 + 2276 >> 2] | 0) >> 2 | 0) < (i6 | 0)) {
    i1 = __Znwj(36) | 0;
    __ZN20ShaderConstantBufferC2Ev(i1);
    HEAP32[i12 + 48 >> 2] = i1;
    __ZN20ShaderConstantBuffer6CreateEPK14ShaderConstanti(i1, 0, 0);
    __ZN20ShaderConstantBuffer14BindToMaterialE10ShaderTypePKcPK8Material(i1, 2, 0, i11 + 2176 | 0);
    HEAP32[i11 + 1860 >> 2] = __ZN20ShaderConstantBuffer13ConstantIndexEPKc(i1, 289010) | 0;
    HEAP32[i11 + 1864 >> 2] = __ZN20ShaderConstantBuffer13ConstantIndexEPKc(i1, 289017) | 0;
    __ZN20ShaderConstantBuffer9SetFloat3EiRKN4math6float3E(i1, HEAP32[i11 + 1860 >> 2] | 0, (HEAP32[i11 + 1836 >> 2] | 0) + (i9 * 12 | 0) | 0);
    __ZN20ShaderConstantBuffer9SetFloat3EiRKN4math6float3E(i1, HEAP32[i11 + 1864 >> 2] | 0, (HEAP32[i11 + 1848 >> 2] | 0) + (i9 * 12 | 0) | 0);
    i2 = HEAP32[i11 + 2280 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i11 + 2284 >> 2] | 0)) {
     __ZNSt3__16vectorIP20ShaderConstantBufferNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i11 + 2276 | 0, i12 + 48 | 0);
     break;
    } else {
     HEAP32[i2 >> 2] = i1;
     HEAP32[i11 + 2280 >> 2] = (HEAP32[i11 + 2280 >> 2] | 0) + 4;
     break;
    }
   } while (0);
   i9 = i9 + 1 | 0;
  } while ((i9 | 0) < (i10 | 0));
  i2 = i11 + 1816 | 0;
 } else i2 = i11 + 1816 | 0;
 HEAP32[i12 + 36 >> 2] = HEAP32[163];
 HEAP32[i12 + 36 + 4 >> 2] = HEAP32[164];
 HEAP32[i12 + 36 + 8 >> 2] = HEAP32[165];
 if (HEAP32[i2 >> 2] | 0) {
  i1 = 0;
  do {
   __ZN4math6float3pLERKS0_(i12 + 36 | 0, (HEAP32[i11 + 1804 >> 2] | 0) + (i1 * 12 | 0) | 0) | 0;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (HEAP32[i2 >> 2] | 0) >>> 0);
 }
 __ZNK4math7Frustum11CenterPointEv(i12 + 12 | 0, i11 + 2288 | 0);
 __ZNK4math6float3dvEf(i12, i12 + 36 | 0, Math_fround((HEAP32[i2 >> 2] | 0) >>> 0));
 __ZNK4math6float3miERKS0_(i12 + 24 | 0, i12 + 12 | 0, i12);
 if (!(HEAP32[i2 >> 2] | 0)) {
  __ZN11Application20CreateInstanceBufferEv(i11);
  STACKTOP = i12;
  return;
 }
 i1 = 0;
 do {
  __ZN4math6float3pLERKS0_((HEAP32[i11 + 1804 >> 2] | 0) + (i1 * 12 | 0) | 0, i12 + 24 | 0) | 0;
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < (HEAP32[i2 >> 2] | 0) >>> 0);
 __ZN11Application20CreateInstanceBufferEv(i11);
 STACKTOP = i12;
 return;
}

function __ZN5Image9CreateNewEii13TextureFormat(i5, i4, i3, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((HEAP8[i5 + 8 >> 0] | 0) != 0 ? (i1 = HEAP32[i5 >> 2] | 0, (i1 | 0) != 0) : 0) __ZdaPv(i1);
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP8[i5 + 8 >> 0] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 12 + 4 >> 2] = 0;
 HEAP32[i5 + 12 + 8 >> 2] = 0;
 HEAP32[i5 + 12 + 12 >> 2] = 0;
 HEAP32[i5 + 12 + 16 >> 2] = 0;
 HEAP32[i5 + 12 + 20 >> 2] = 0;
 L5 : do if ((i2 | 0) >= 59) {
  L11 : do if ((i2 | 0) >= 88) {
   if ((i2 | 0) >= 1048578) {
    if ((i2 | 0) < 4194324) switch (i2 | 0) {
    case 1048582:
     {
      i6 = 9;
      break L5;
     }
    case 1048583:
    case 1048579:
    case 1048578:
    case 1048580:
     {
      i6 = 11;
      break L5;
     }
    case 1048584:
    case 1048581:
     {
      i6 = 12;
      break L11;
     }
    default:
     {
      i6 = 14;
      break L5;
     }
    }
    switch (i2 | 0) {
    case 4194339:
    case 4194337:
     {
      i6 = 9;
      break L5;
     }
    case 4194334:
    case 4194333:
     {
      i6 = 11;
      break L5;
     }
    case 4194356:
    case 4194354:
    case 4194331:
     {
      i6 = 12;
      break L11;
     }
    case 4194324:
     break;
    default:
     {
      i6 = 14;
      break L5;
     }
    }
    i1 = 24;
    i6 = 15;
    break L5;
   }
   if ((i2 | 0) < 95) switch (i2 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
    {
     i6 = 9;
     break L5;
    }
   case 94:
    {
     i6 = 6;
     break L11;
    }
   default:
    {
     i6 = 14;
     break L5;
    }
   }
   if ((i2 | 0) < 99) switch (i2 | 0) {
   case 98:
   case 97:
   case 96:
   case 95:
    {
     i6 = 6;
     break L11;
    }
   default:
    {
     i6 = 14;
     break L5;
    }
   }
   if ((i2 | 0) < 1048576) switch (i2 | 0) {
   case 115:
    {
     i6 = 11;
     break L5;
    }
   case 99:
    {
     i6 = 6;
     break L11;
    }
   default:
    {
     i6 = 14;
     break L5;
    }
   } else switch (i2 | 0) {
   case 1048577:
    {
     i6 = 11;
     break L5;
    }
   case 1048576:
    {
     i6 = 5;
     break L11;
    }
   default:
    {
     i6 = 14;
     break L5;
    }
   }
  } else {
   switch (i2 | 0) {
   case 87:
   case 69:
   case 68:
   case 67:
    {
     i6 = 9;
     break L5;
    }
   case 86:
   case 85:
   case 59:
    {
     i6 = 11;
     break L5;
    }
   case 72:
   case 71:
   case 70:
    {
     i6 = 5;
     break L11;
    }
   case 84:
   case 83:
   case 82:
   case 81:
   case 80:
   case 79:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
    {
     i6 = 6;
     break L11;
    }
   case 65:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
    {
     i6 = 12;
     break L11;
    }
   case 66:
    break;
   default:
    {
     i6 = 14;
     break L5;
    }
   }
   i1 = 1;
   i6 = 15;
   break L5;
  } while (0);
  if ((i6 | 0) == 5) {
   i1 = Math_imul(((i4 + 3 | 0) / 4 | 0) << 3, (i3 + 3 | 0) / 4 | 0) | 0;
   break;
  } else if ((i6 | 0) == 6) {
   i1 = Math_imul(((i4 + 3 | 0) / 4 | 0) << 4, (i3 + 3 | 0) / 4 | 0) | 0;
   break;
  } else if ((i6 | 0) == 12) {
   i1 = 8;
   i6 = 15;
   break;
  }
 } else switch (i2 | 0) {
 case 0:
  {
   i1 = 0;
   break L5;
  }
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i1 = 128;
   i6 = 15;
   break L5;
  }
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
  {
   i6 = 9;
   break L5;
  }
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
  {
   i6 = 11;
   break L5;
  }
 case 8:
 case 7:
 case 6:
 case 5:
  {
   i1 = 96;
   i6 = 15;
   break L5;
  }
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
  {
   i1 = 64;
   i6 = 15;
   break L5;
  }
 default:
  {
   i6 = 14;
   break L5;
  }
 } while (0);
 if ((i6 | 0) == 9) {
  i1 = 32;
  i6 = 15;
 } else if ((i6 | 0) == 11) {
  i1 = 16;
  i6 = 15;
 } else if ((i6 | 0) == 14) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i7);
  i1 = 0;
  i6 = 15;
 }
 if ((i6 | 0) == 15) i1 = ((Math_imul(Math_imul(i3, i4) | 0, i1) | 0) + 7 | 0) / 8 | 0;
 HEAP32[i5 + 4 >> 2] = i1;
 if ((i3 | 0) > 16384 | ((i4 | 0) > 16384 | ((i3 | i4 | 0) < 0 | (i2 | 0) == 0))) {
  i6 = __Z21TextureFormatToString13TextureFormat(i2) | 0;
  HEAP32[i7 + 8 >> 2] = i4;
  HEAP32[i7 + 8 + 4 >> 2] = i3;
  HEAP32[i7 + 8 + 8 >> 2] = i6;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303344, i7 + 8 | 0);
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!i1) i1 = 0; else i1 = __Znaj(i1) | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP8[i5 + 8 >> 0] = 1;
 HEAP32[i5 + 16 >> 2] = i4;
 HEAP32[i5 + 20 >> 2] = i3;
 HEAP32[i5 + 24 >> 2] = 1;
 HEAP32[i5 + 28 >> 2] = i2;
 HEAP32[i5 + 32 >> 2] = 2;
 L49 : do if ((i2 | 0) >= 59) {
  L55 : do if ((i2 | 0) >= 88) {
   if ((i2 | 0) >= 1048578) {
    if ((i2 | 0) < 4194324) switch (i2 | 0) {
    case 1048582:
     {
      i6 = 25;
      break L49;
     }
    case 1048583:
    case 1048579:
    case 1048578:
    case 1048580:
     {
      i6 = 27;
      break L49;
     }
    case 1048584:
    case 1048581:
     {
      i6 = 28;
      break L55;
     }
    default:
     {
      i6 = 30;
      break L49;
     }
    }
    switch (i2 | 0) {
    case 4194339:
    case 4194337:
     {
      i6 = 25;
      break L49;
     }
    case 4194334:
    case 4194333:
     {
      i6 = 27;
      break L49;
     }
    case 4194356:
    case 4194354:
    case 4194331:
     {
      i6 = 28;
      break L55;
     }
    case 4194324:
     break;
    default:
     {
      i6 = 30;
      break L49;
     }
    }
    i1 = 24;
    i6 = 31;
    break L49;
   }
   if ((i2 | 0) < 95) switch (i2 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
    {
     i6 = 25;
     break L49;
    }
   case 94:
    {
     i6 = 22;
     break L55;
    }
   default:
    {
     i6 = 30;
     break L49;
    }
   }
   if ((i2 | 0) < 99) switch (i2 | 0) {
   case 98:
   case 97:
   case 96:
   case 95:
    {
     i6 = 22;
     break L55;
    }
   default:
    {
     i6 = 30;
     break L49;
    }
   }
   if ((i2 | 0) < 1048576) switch (i2 | 0) {
   case 115:
    {
     i6 = 27;
     break L49;
    }
   case 99:
    {
     i6 = 22;
     break L55;
    }
   default:
    {
     i6 = 30;
     break L49;
    }
   } else switch (i2 | 0) {
   case 1048577:
    {
     i6 = 27;
     break L49;
    }
   case 1048576:
    {
     i6 = 21;
     break L55;
    }
   default:
    {
     i6 = 30;
     break L49;
    }
   }
  } else {
   switch (i2 | 0) {
   case 87:
   case 69:
   case 68:
   case 67:
    {
     i6 = 25;
     break L49;
    }
   case 86:
   case 85:
   case 59:
    {
     i6 = 27;
     break L49;
    }
   case 72:
   case 71:
   case 70:
    {
     i6 = 21;
     break L55;
    }
   case 84:
   case 83:
   case 82:
   case 81:
   case 80:
   case 79:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
    {
     i6 = 22;
     break L55;
    }
   case 65:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
    {
     i6 = 28;
     break L55;
    }
   case 66:
    break;
   default:
    {
     i6 = 30;
     break L49;
    }
   }
   i1 = 1;
   i6 = 31;
   break L49;
  } while (0);
  if ((i6 | 0) == 21) {
   i1 = ((i4 + 3 | 0) / 4 | 0) << 3;
   break;
  } else if ((i6 | 0) == 22) {
   i1 = ((i4 + 3 | 0) / 4 | 0) << 4;
   break;
  } else if ((i6 | 0) == 28) {
   i1 = 8;
   i6 = 31;
   break;
  }
 } else switch (i2 | 0) {
 case 0:
  {
   i1 = 0;
   break L49;
  }
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i1 = 128;
   i6 = 31;
   break L49;
  }
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
  {
   i6 = 25;
   break L49;
  }
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
  {
   i6 = 27;
   break L49;
  }
 case 8:
 case 7:
 case 6:
 case 5:
  {
   i1 = 96;
   i6 = 31;
   break L49;
  }
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
  {
   i1 = 64;
   i6 = 31;
   break L49;
  }
 default:
  {
   i6 = 30;
   break L49;
  }
 } while (0);
 if ((i6 | 0) == 25) {
  i1 = 32;
  i6 = 31;
 } else if ((i6 | 0) == 27) {
  i1 = 16;
  i6 = 31;
 } else if ((i6 | 0) == 30) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i7 + 24 | 0);
  i1 = 0;
  i6 = 31;
 }
 if ((i6 | 0) == 31) i1 = ((Math_imul(i1, i4) | 0) + 7 | 0) / 8 | 0;
 HEAP32[i5 + 12 >> 2] = i1;
 i6 = 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _huft_build(i9, i8, i28, i24, i25, i29, i4, i27, i26, i30) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i28 = i28 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i29 = i29 | 0;
 i4 = i4 | 0;
 i27 = i27 | 0;
 i26 = i26 | 0;
 i30 = i30 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i31 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i1 = i31 + 128 | 0;
 i2 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = i8;
 i2 = i9;
 while (1) {
  i23 = i31 + 128 + (HEAP32[i2 >> 2] << 2) | 0;
  HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + 1;
  i1 = i1 + -1 | 0;
  if (!i1) break; else i2 = i2 + 4 | 0;
 }
 if ((HEAP32[i31 + 128 >> 2] | 0) == (i8 | 0)) {
  HEAP32[i29 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i30 = 0;
  STACKTOP = i31;
  return i30 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = (HEAP32[i31 + 128 + 4 >> 2] | 0) == 0;
 do if (i2) if (!(HEAP32[i31 + 128 + 8 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 12 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 16 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 20 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 24 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 28 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 32 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 36 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 40 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 44 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 48 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 52 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 56 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 60 >> 2] | 0)) {
  i1 = i1 >>> 0 < 16 ? 16 : i1;
  i5 = 16;
  i6 = 9;
  break;
 } else {
  i3 = 15;
  i1 = i1 >>> 0 < 15 ? 15 : i1;
  i2 = 15;
  i6 = 10;
  break;
 } else {
  i3 = 14;
  i6 = 7;
 } else {
  i3 = 13;
  i6 = 7;
 } else {
  i3 = 12;
  i6 = 7;
 } else {
  i3 = 11;
  i6 = 7;
 } else {
  i3 = 10;
  i6 = 7;
 } else {
  i3 = 9;
  i6 = 7;
 } else {
  i3 = 8;
  i6 = 7;
 } else {
  i3 = 7;
  i6 = 7;
 } else {
  i3 = 6;
  i6 = 7;
 } else {
  i3 = 5;
  i6 = 7;
 } else {
  i3 = 4;
  i6 = 7;
 } else {
  i3 = 3;
  i6 = 7;
 } else {
  i3 = 2;
  i6 = 7;
 } else {
  i3 = 1;
  i6 = 7;
 } while (0);
 if ((i6 | 0) == 7) {
  i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  if (!(HEAP32[i31 + 128 + 60 >> 2] | 0)) {
   i5 = i3;
   i6 = 9;
  } else {
   i2 = i1 >>> 0 > 15 ? 15 : i1;
   HEAP32[i4 >> 2] = i2;
   i4 = 15;
   i5 = i3;
   i1 = 1 << i3;
   i6 = 12;
  }
 }
 do if ((i6 | 0) == 9) {
  if (!(HEAP32[i31 + 128 + 56 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 52 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 48 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 44 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 40 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 36 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 32 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 28 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 24 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 20 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 16 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 12 >> 2] | 0)) if (!(HEAP32[i31 + 128 + 8 >> 2] | 0)) {
   i3 = i2 & 1 ^ 1;
   i2 = i5;
   i6 = 10;
   break;
  } else i3 = 2; else i3 = 3; else i3 = 4; else i3 = 5; else i3 = 6; else i3 = 7; else i3 = 8; else i3 = 9; else i3 = 10; else i3 = 11; else i3 = 12; else i3 = 13; else i3 = 14;
  i2 = i1 >>> 0 > i3 >>> 0 ? i3 : i1;
  HEAP32[i4 >> 2] = i2;
  i1 = 1 << i5;
  if (i5 >>> 0 < i3 >>> 0) {
   i4 = i3;
   i6 = 12;
  } else {
   i23 = i2;
   i22 = i3;
   i7 = i5;
  }
 } while (0);
 L46 : do if ((i6 | 0) == 10) {
  i23 = i1 >>> 0 > i3 >>> 0 ? i3 : i1;
  HEAP32[i4 >> 2] = i23;
  i22 = i3;
  i7 = i2;
  i1 = 1 << i2;
 } else if ((i6 | 0) == 12) {
  i3 = i5;
  while (1) {
   i1 = i1 - (HEAP32[i31 + 128 + (i3 << 2) >> 2] | 0) | 0;
   if ((i1 | 0) < 0) {
    i1 = -3;
    break;
   }
   i3 = i3 + 1 | 0;
   if (i3 >>> 0 >= i4 >>> 0) {
    i23 = i2;
    i22 = i4;
    i7 = i5;
    i1 = i1 << 1;
    break L46;
   } else i1 = i1 << 1;
  }
  STACKTOP = i31;
  return i1 | 0;
 } while (0);
 i2 = i31 + 128 + (i22 << 2) | 0;
 i21 = HEAP32[i2 >> 2] | 0;
 if ((i1 - i21 | 0) < 0) {
  i30 = -3;
  STACKTOP = i31;
  return i30 | 0;
 }
 HEAP32[i2 >> 2] = i1;
 HEAP32[i31 + 4 >> 2] = 0;
 i2 = i22 + -1 | 0;
 if (!i2) {
  i4 = 0;
  i3 = i9;
 } else {
  i3 = 0;
  i4 = i31 + 128 + 4 | 0;
  i5 = i31 + 8 | 0;
  while (1) {
   i3 = (HEAP32[i4 >> 2] | 0) + i3 | 0;
   HEAP32[i5 >> 2] = i3;
   i2 = i2 + -1 | 0;
   if (!i2) {
    i4 = 0;
    i3 = i9;
    break;
   } else {
    i4 = i4 + 4 | 0;
    i5 = i5 + 4 | 0;
   }
  }
 }
 while (1) {
  i2 = HEAP32[i3 >> 2] | 0;
  if (i2) {
   i20 = HEAP32[i31 + (i2 << 2) >> 2] | 0;
   HEAP32[i31 + (i2 << 2) >> 2] = i20 + 1;
   HEAP32[i30 + (i20 << 2) >> 2] = i4;
  }
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 >= i8 >>> 0) break; else i3 = i3 + 4 | 0;
 }
 i19 = HEAP32[i31 + (i22 << 2) >> 2] | 0;
 HEAP32[i31 >> 2] = 0;
 HEAP32[i31 + 64 >> 2] = 0;
 L67 : do if (i7 >>> 0 <= i22 >>> 0) {
  i20 = i23 & 255;
  i9 = -1;
  i10 = 0;
  i18 = i7;
  i8 = i30;
  i7 = 0;
  i5 = 0;
  i3 = 0 - i23 | 0;
  i6 = 0;
  L69 : while (1) {
   i16 = i31 + 128 + (i18 << 2) | 0;
   i2 = HEAP32[i16 >> 2] | 0;
   if (!i2) {
    i2 = i9;
    i4 = i6;
   } else {
    i17 = 1 << i18 + -1;
    i15 = i2;
    i2 = i9;
    i14 = i8;
    i4 = i3;
    while (1) {
     i3 = i4 + i23 | 0;
     L75 : do if ((i18 | 0) > (i3 | 0)) {
      i13 = i5;
      while (1) {
       i11 = i4;
       while (1) {
        i12 = i2 + 1 | 0;
        i9 = i22 - i3 | 0;
        i9 = i9 >>> 0 > i23 >>> 0 ? i23 : i9;
        i4 = i18 - i3 | 0;
        L80 : do if (1 << i4 >>> 0 > i15 >>> 0 & i4 >>> 0 < i9 >>> 0) if ((i4 + 1 | 0) >>> 0 < i9 >>> 0) {
         i5 = i4 + 1 | 0;
         i4 = (1 << i4) - i15 | 0;
         i8 = i16;
         while (1) {
          i7 = i4 << 1;
          i8 = i8 + 4 | 0;
          i6 = HEAP32[i8 >> 2] | 0;
          if (i7 >>> 0 <= i6 >>> 0) break L80;
          i4 = i5 + 1 | 0;
          if (i4 >>> 0 >= i9 >>> 0) {
           i5 = i4;
           break;
          } else {
           i5 = i4;
           i4 = i7 - i6 | 0;
          }
         }
        } else i5 = i4 + 1 | 0; else i5 = i4; while (0);
        i6 = 1 << i5;
        i9 = HEAP32[i26 >> 2] | 0;
        if ((i9 + i6 | 0) >>> 0 > 1440) {
         i1 = -3;
         break L69;
        }
        HEAP32[i31 + 64 + (i12 << 2) >> 2] = i27 + (i9 << 3);
        HEAP32[i26 >> 2] = i9 + i6;
        if (i12) {
         i4 = i3;
         i3 = i11;
         break;
        }
        HEAP32[i29 >> 2] = i27 + (i9 << 3);
        i2 = i3 + i23 | 0;
        if ((i18 | 0) > (i2 | 0)) {
         i11 = i3;
         i3 = i2;
         i2 = 0;
        } else {
         i2 = 0;
         i12 = i27 + (i9 << 3) | 0;
         i5 = i13;
         break L75;
        }
       }
       HEAP32[i31 + (i12 << 2) >> 2] = i10;
       i8 = i10 >>> i3;
       i7 = HEAP32[i31 + 64 + (i2 << 2) >> 2] | 0;
       HEAP8[i7 + (i8 << 3) >> 0] = i5;
       HEAP8[i7 + (i8 << 3) + 1 >> 0] = i20;
       HEAP32[i7 + (i8 << 3) + 4 >> 2] = (i27 + (i9 << 3) - i7 >> 3) - i8;
       i3 = i4 + i23 | 0;
       if ((i18 | 0) <= (i3 | 0)) {
        i2 = i12;
        i12 = i27 + (i9 << 3) | 0;
        i5 = (i27 + (i9 << 3) - i7 >> 3) - i8 | 0;
        i3 = i4;
        break;
       } else {
        i2 = i12;
        i13 = (i27 + (i9 << 3) - i7 >> 3) - i8 | 0;
       }
      }
     } else {
      i12 = i7;
      i3 = i4;
     } while (0);
     i15 = i15 + -1 | 0;
     i8 = i18 - i3 | 0;
     do if (i14 >>> 0 < (i30 + (i19 << 2) | 0) >>> 0) {
      i4 = HEAP32[i14 >> 2] | 0;
      if (i4 >>> 0 < i28 >>> 0) {
       i9 = i14 + 4 | 0;
       i7 = i4 >>> 0 < 256 ? 0 : 96;
       i11 = i4;
       break;
      } else {
       i9 = i14 + 4 | 0;
       i7 = (HEAP32[i25 + (i4 - i28 << 2) >> 2] | 0) + 80 & 255;
       i11 = HEAP32[i24 + (i4 - i28 << 2) >> 2] | 0;
       break;
      }
     } else {
      i9 = i14;
      i7 = -64;
      i11 = i5;
     } while (0);
     i4 = i10 >>> i3;
     if (i4 >>> 0 < i6 >>> 0) {
      do {
       i14 = i12 + (i4 << 3) | 0;
       HEAP8[i14 >> 0] = i7;
       HEAP8[i14 + 1 >> 0] = i8;
       HEAP32[i12 + (i4 << 3) + 4 >> 2] = i11;
       i4 = i4 + (1 << i8) | 0;
      } while (i4 >>> 0 < i6 >>> 0);
      i4 = i10;
      i5 = i17;
     } else {
      i4 = i10;
      i5 = i17;
     }
     while (1) {
      i10 = i5 ^ i4;
      if (!(i5 & i4)) break; else {
       i4 = i10;
       i5 = i5 >>> 1;
      }
     }
     if (((1 << i3) + -1 & i10 | 0) != (HEAP32[i31 + (i2 << 2) >> 2] | 0)) do {
      i2 = i2 + -1 | 0;
      i3 = i3 - i23 | 0;
     } while (((1 << i3) + -1 & i10 | 0) != (HEAP32[i31 + (i2 << 2) >> 2] | 0));
     if (!i15) {
      i8 = i9;
      i7 = i12;
      i5 = i11;
      i4 = i6;
      break;
     } else {
      i14 = i9;
      i7 = i12;
      i5 = i11;
      i4 = i3;
     }
    }
   }
   if ((i18 | 0) < (i22 | 0)) {
    i9 = i2;
    i18 = i18 + 1 | 0;
    i6 = i4;
   } else break L67;
  }
  STACKTOP = i31;
  return i1 | 0;
 } while (0);
 i30 = (i22 | 0) != 1 & (i1 | 0) != (i21 | 0) ? -5 : 0;
 STACKTOP = i31;
 return i30 | 0;
}

function _cff_parser_run(i11, i1, i10) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 HEAP32[i11 + 404 >> 2] = i11 + 16;
 HEAP32[i11 + 4 >> 2] = i1;
 HEAP32[i11 + 8 >> 2] = i10;
 HEAP32[i11 + 12 >> 2] = i1;
 if (i1 >>> 0 >= i10 >>> 0) {
  i12 = 0;
  return i12 | 0;
 }
 i3 = i11 + 16 | 0;
 L4 : while (1) {
  i2 = HEAP8[i1 >> 0] | 0;
  i4 = i3 - (i11 + 16) | 0;
  L6 : do if ((i2 & 255) > 26 & i2 << 24 >> 24 != 31) {
   if ((i4 | 0) > 380) {
    i1 = 6;
    i12 = 94;
    break L4;
   }
   HEAP32[i11 + 404 >> 2] = i3 + 4;
   HEAP32[i3 >> 2] = i1;
   switch (i2 << 24 >> 24) {
   case 30:
    {
     do {
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i10 >>> 0) {
       i1 = 0;
       i12 = 94;
       break L4;
      }
      i8 = HEAPU8[i1 >> 0] | 0;
     } while (!((i8 & 240 | 0) == 240 | (i8 & 15 | 0) == 15));
     break;
    }
   case 28:
    {
     i1 = i1 + 2 | 0;
     break L6;
    }
   case 29:
    {
     i1 = i1 + 4 | 0;
     break L6;
    }
   default:
    {
     i1 = (i2 & 255) > 246 ? i1 + 1 | 0 : i1;
     break L6;
    }
   }
  } else {
   HEAP32[i3 >> 2] = i1;
   if (i2 << 24 >> 24 == 12) {
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i10 >>> 0) {
     i1 = 6;
     i12 = 94;
     break L4;
    }
    i2 = HEAPU8[i1 >> 0] | 0 | 256;
    i9 = i1;
   } else {
    i2 = i2 & 255;
    i9 = i1;
   }
   i2 = HEAP32[i11 + 408 >> 2] | i2;
   i1 = 4;
   i3 = 265788;
   do {
    if ((HEAP32[i3 + 4 >> 2] | 0) == (i2 | 0)) {
     i8 = i3;
     i12 = 16;
     break;
    }
    i3 = i3 + 28 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
   } while ((i1 | 0) != 0);
   L24 : do if ((i12 | 0) == 16) {
    i12 = 0;
    i2 = HEAP32[i11 + 412 >> 2] | 0;
    i5 = i2 + (HEAP32[i8 + 8 >> 2] | 0) | 0;
    if ((i4 >> 2 | 0) == 0 & (i1 | 0) != 6) {
     i1 = 6;
     i12 = 94;
     break L4;
    }
    L27 : do switch (i1 | 0) {
    case 1:
    case 4:
    case 5:
     {
      i2 = HEAP32[i11 + 16 >> 2] | 0;
      i1 = HEAP32[i11 + 20 >> 2] | 0;
      i3 = HEAP8[i2 >> 0] | 0;
      if (i3 << 24 >> 24 == 30) {
       i1 = (_cff_parse_real(i2, i1, 0, 0) | 0) >> 16;
       break L27;
      }
      switch (i3 << 24 >> 24) {
      case 28:
       {
        if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) {
         i1 = 0;
         break L27;
        }
        i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
        break L27;
       }
      case 29:
       {
        if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) {
         i1 = 0;
         break L27;
        }
        i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 1 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
        break L27;
       }
      default:
       {
        if ((i3 & 255) < 247) {
         i1 = (i3 & 255) + -139 | 0;
         break L27;
        }
        if ((i3 & 255) < 251) {
         if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
          i1 = 0;
          break L27;
         }
         i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
         break L27;
        } else {
         if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
          i1 = 0;
          break L27;
         }
         i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
         break L27;
        }
       }
      }
     }
    case 2:
     {
      i2 = HEAP32[i11 + 16 >> 2] | 0;
      i1 = HEAP32[i11 + 20 >> 2] | 0;
      i3 = HEAP8[i2 >> 0] | 0;
      if (i3 << 24 >> 24 == 30) {
       i1 = _cff_parse_real(i2, i1, 0, 0) | 0;
       break L27;
      }
      L51 : do switch (i3 << 24 >> 24) {
      case 28:
       {
        if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
        break;
       }
      case 29:
       {
        if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
        break;
       }
      default:
       {
        if ((i3 & 255) < 247) {
         i1 = (i3 & 255) + -139 | 0;
         break L51;
        }
        if ((i3 & 255) < 251) {
         if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
          i1 = 0;
          break L51;
         }
         i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
         break L51;
        } else {
         if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
          i1 = 0;
          break L51;
         }
         i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
         break L51;
        }
       }
      } while (0);
      i1 = i1 << 16;
      break;
     }
    case 3:
     {
      i2 = HEAP32[i11 + 16 >> 2] | 0;
      i1 = HEAP32[i11 + 20 >> 2] | 0;
      i3 = HEAP8[i2 >> 0] | 0;
      if (i3 << 24 >> 24 == 30) {
       i1 = _cff_parse_real(i2, i1, 3, 0) | 0;
       break L27;
      }
      L70 : do switch (i3 << 24 >> 24) {
      case 28:
       {
        if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
        break;
       }
      case 29:
       {
        if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 1 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
        break;
       }
      default:
       {
        if ((i3 & 255) < 247) {
         i1 = (i3 & 255) + -139 | 0;
         break L70;
        }
        if ((i3 & 255) < 251) {
         if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
          i1 = 0;
          break L70;
         }
         i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
         break L70;
        } else {
         if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
          i1 = 0;
          break L70;
         }
         i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
         break L70;
        }
       }
      } while (0);
      i1 = Math_imul(i1, 65536e3) | 0;
      break;
     }
    case 6:
     {
      i1 = HEAP32[i8 + 20 >> 2] | 0;
      i1 = i4 >> 2 >>> 0 > i1 >>> 0 ? i1 : i4 >> 2;
      HEAP8[i2 + (HEAP32[i8 + 24 >> 2] | 0) >> 0] = i1;
      if (!i1) break L24;
      i7 = i11 + 16 | 0;
      i6 = 0;
      while (1) {
       i4 = HEAP32[i7 >> 2] | 0;
       i7 = i7 + 4 | 0;
       i3 = HEAP32[i7 >> 2] | 0;
       i2 = HEAP8[i4 >> 0] | 0;
       L89 : do if (i2 << 24 >> 24 == 30) i2 = (_cff_parse_real(i4, i3, 0, 0) | 0) >> 16; else switch (i2 << 24 >> 24) {
       case 28:
        {
         if ((i4 + 3 | 0) >>> 0 > i3 >>> 0) {
          i2 = 0;
          break L89;
         }
         i2 = ((HEAPU8[i4 + 1 >> 0] | 0) << 8 | (HEAPU8[i4 + 2 >> 0] | 0)) << 16 >> 16;
         break L89;
        }
       case 29:
        {
         if ((i4 + 5 | 0) >>> 0 > i3 >>> 0) {
          i2 = 0;
          break L89;
         }
         i2 = (HEAPU8[i4 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 + 1 >> 0] | 0) << 24 | (HEAPU8[i4 + 3 >> 0] | 0) << 8 | (HEAPU8[i4 + 4 >> 0] | 0);
         break L89;
        }
       default:
        {
         if ((i2 & 255) < 247) {
          i2 = (i2 & 255) + -139 | 0;
          break L89;
         }
         if ((i2 & 255) < 251) {
          if ((i4 + 2 | 0) >>> 0 > i3 >>> 0) {
           i2 = 0;
           break L89;
          }
          i2 = (HEAPU8[i4 + 1 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
          break L89;
         } else {
          if ((i4 + 2 | 0) >>> 0 > i3 >>> 0) {
           i2 = 0;
           break L89;
          }
          i2 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i4 + 1 >> 0] | 0) | 0;
          break L89;
         }
        }
       } while (0);
       i6 = i2 + i6 | 0;
       i2 = HEAP8[i8 + 12 >> 0] | 0;
       switch (i2 & 255 | 0) {
       case 1:
        {
         HEAP8[i5 >> 0] = i6;
         i2 = HEAP8[i8 + 12 >> 0] | 0;
         break;
        }
       case 2:
        {
         HEAP16[i5 >> 1] = i6;
         break;
        }
       case 4:
        {
         HEAP32[i5 >> 2] = i6;
         break;
        }
       default:
        HEAP32[i5 >> 2] = i6;
       }
       i1 = i1 + -1 | 0;
       if (!i1) break L24; else i5 = i5 + (i2 & 255) | 0;
      }
     }
    default:
     {
      i1 = FUNCTION_TABLE_ii[HEAP32[i8 + 16 >> 2] & 63](i11) | 0;
      if (!i1) break L24; else {
       i12 = 94;
       break L4;
      }
     }
    } while (0);
    switch (HEAPU8[i8 + 12 >> 0] | 0 | 0) {
    case 1:
     {
      HEAP8[i5 >> 0] = i1;
      break L24;
     }
    case 2:
     {
      HEAP16[i5 >> 1] = i1;
      break L24;
     }
    case 4:
     {
      HEAP32[i5 >> 2] = i1;
      break L24;
     }
    default:
     {
      HEAP32[i5 >> 2] = i1;
      break L24;
     }
    }
   } while (0);
   HEAP32[i11 + 404 >> 2] = i11 + 16;
   i1 = i9;
  } while (0);
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= i10 >>> 0) {
   i1 = 0;
   i12 = 94;
   break;
  }
  i3 = HEAP32[i11 + 404 >> 2] | 0;
 }
 if ((i12 | 0) == 94) return i1 | 0;
 return 0;
}

function _parse_dict(i8, i11, i7, i9) {
 i8 = i8 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i11 >> 2] = i7;
 HEAP32[i11 + 8 >> 2] = i7 + i9;
 HEAP32[i11 + 12 >> 2] = 0;
 FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
 i1 = HEAP32[i11 >> 2] | 0;
 L1 : do if (i1 >>> 0 < (i7 + i9 | 0) >>> 0) {
  i5 = 0;
  i3 = 0;
  L3 : while (1) {
   i4 = HEAP8[i1 >> 0] | 0;
   L5 : do switch (i4 << 24 >> 24) {
   case 101:
    {
     i2 = i1 + 6 | 0;
     if ((i2 | 0) != (i7 + i9 | 0)) {
      if (i2 >>> 0 >= (i7 + i9 | 0) >>> 0) {
       i10 = 19;
       break L5;
      }
      switch (HEAP8[i1 + 5 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       {
        i10 = 19;
        break L5;
       }
      }
     }
     if (!(_strncmp(i1, 323250, 5) | 0)) break L1; else i10 = 19;
     break;
    }
   case 99:
    {
     i2 = i1 + 10 | 0;
     if ((i2 | 0) != (i7 + i9 | 0)) {
      if (i2 >>> 0 >= (i7 + i9 | 0) >>> 0) {
       i10 = 19;
       break L5;
      }
      switch (HEAP8[i1 + 9 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       {
        i10 = 19;
        break L5;
       }
      }
     }
     if (!(_strncmp(i1, 323256, 9) | 0)) break L1; else i10 = 19;
     break;
    }
   case 70:
    {
     i2 = i1 + 14 | 0;
     if ((i2 | 0) != (i7 + i9 | 0)) {
      if (i2 >>> 0 >= (i7 + i9 | 0) >>> 0) {
       i10 = 19;
       break L5;
      }
      switch (HEAP8[i1 + 13 >> 0] | 0) {
      case 37:
      case 125:
      case 123:
      case 93:
      case 91:
      case 62:
      case 60:
      case 41:
      case 40:
      case 47:
      case 0:
      case 12:
      case 9:
      case 10:
      case 13:
      case 32:
       break;
      default:
       {
        i10 = 19;
        break L5;
       }
      }
     }
     if (!(_strncmp(i1, 323954, 13) | 0)) {
      i2 = HEAP32[i11 + 372 >> 2] | 0;
      if (i2 & 1) HEAP32[i11 + 372 >> 2] = i2 | 2;
      HEAP32[i11 >> 2] = i1 + 13;
      i2 = i5;
     } else i10 = 19;
     break;
    }
   default:
    i10 = 19;
   } while (0);
   L25 : do if ((i10 | 0) == 19) {
    i10 = 0;
    if (((i4 & 255) + -48 | 0) >>> 0 < 10) {
     FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
     if (!(HEAP32[i11 + 12 >> 2] | 0)) {
      i2 = 1;
      i3 = i1;
      break;
     } else break L1;
    }
    i2 = (i1 + 6 | 0) >>> 0 < (i7 + i9 | 0) >>> 0;
    if (i2 & i4 << 24 >> 24 == 82 ? !(i5 << 24 >> 24 == 0 | (HEAP8[i1 + 1 >> 0] | 0) != 68) : 0) {
     HEAP32[i11 >> 2] = i3;
     i1 = HEAP32[(HEAP32[i8 + 128 >> 2] | 0) + 52 >> 2] | 0;
     i5 = HEAP32[i11 + 8 >> 2] | 0;
     FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
     i2 = HEAP32[i11 >> 2] | 0;
     if (i2 >>> 0 >= i5 >>> 0) {
      i10 = 27;
      break L3;
     }
     if (((HEAPU8[i2 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      i10 = 27;
      break L3;
     }
     i2 = FUNCTION_TABLE_ii[HEAP32[i11 + 36 >> 2] & 63](i11) | 0;
     FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
     i4 = HEAP32[i11 >> 2] | 0;
     if ((i2 | 0) <= -1) {
      i10 = 27;
      break L3;
     }
     if ((i2 | 0) >= (i5 - (i4 + 1) | 0)) {
      i10 = 27;
      break L3;
     }
     HEAP32[i11 >> 2] = i4 + (i2 + 1);
     if (!(HEAP32[i11 + 12 >> 2] | 0)) {
      i2 = 0;
      break;
     } else {
      i1 = 3;
      i10 = 77;
      break L3;
     }
    }
    if (i2 & i4 << 24 >> 24 == 45 ? !(i5 << 24 >> 24 == 0 | (HEAP8[i1 + 1 >> 0] | 0) != 124) : 0) {
     HEAP32[i11 >> 2] = i3;
     i1 = HEAP32[(HEAP32[i8 + 128 >> 2] | 0) + 52 >> 2] | 0;
     i5 = HEAP32[i11 + 8 >> 2] | 0;
     FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
     i2 = HEAP32[i11 >> 2] | 0;
     if (i2 >>> 0 >= i5 >>> 0) {
      i10 = 36;
      break L3;
     }
     if (((HEAPU8[i2 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      i10 = 36;
      break L3;
     }
     i2 = FUNCTION_TABLE_ii[HEAP32[i11 + 36 >> 2] & 63](i11) | 0;
     FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
     i4 = HEAP32[i11 >> 2] | 0;
     if ((i2 | 0) <= -1) {
      i10 = 36;
      break L3;
     }
     if ((i2 | 0) >= (i5 - (i4 + 1) | 0)) {
      i10 = 36;
      break L3;
     }
     HEAP32[i11 >> 2] = i4 + (i2 + 1);
     if (!(HEAP32[i11 + 12 >> 2] | 0)) {
      i2 = 0;
      break;
     } else {
      i1 = 3;
      i10 = 77;
      break L3;
     }
    }
    if (!((i1 + 2 | 0) >>> 0 < (i7 + i9 | 0) >>> 0 & i4 << 24 >> 24 == 47)) {
     FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
     if (!(HEAP32[i11 + 12 >> 2] | 0)) {
      i2 = 0;
      break;
     } else break L1;
    }
    i1 = i1 + 1 | 0;
    HEAP32[i11 >> 2] = i1;
    FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
    if (HEAP32[i11 + 12 >> 2] | 0) break L1;
    i4 = HEAP32[i11 >> 2] | 0;
    if (i4 >>> 0 < (i7 + i9 | 0) >>> 0 & (i4 - i1 + -1 | 0) >>> 0 < 21) {
     i5 = HEAP8[i1 >> 0] | 0;
     i2 = 323982;
     i6 = 263800;
     while (1) {
      if ((i5 << 24 >> 24 == (HEAP8[i2 >> 0] | 0) ? (i4 - i1 | 0) == (_strlen(i2) | 0) : 0) ? (_memcmp(i1, i2, i4 - i1 | 0) | 0) == 0 : 0) break;
      i6 = i6 + 36 | 0;
      i2 = HEAP32[i6 >> 2] | 0;
      if (!i2) {
       i2 = 0;
       break L25;
      }
     }
     i1 = HEAP32[i11 + 372 >> 2] | 0;
     if ((i1 & 1) + 1 & HEAP32[i6 + 32 >> 2]) {
      if ((i1 & 2 | 0) != 0 ? (_strcmp(i2, 324061) | 0) != 0 : 0) {
       i2 = 0;
       break;
      }
      i1 = HEAP32[i8 + 532 >> 2] | 0;
      if (!i1) i2 = 0; else i2 = (HEAP32[i1 >> 2] | 0) == 0 ? 0 : i1;
      i5 = HEAP32[i6 + 8 >> 2] | 0;
      do if ((i5 | 0) != 10) {
       switch (HEAP32[i6 + 4 >> 2] | 0) {
       case 3:
        {
         HEAP32[i12 >> 2] = i8 + 132;
         if (!i2) {
          i4 = 0;
          i1 = i12;
         } else {
          i4 = HEAP32[i2 >> 2] | 0;
          i1 = i2 + 144 | 0;
         }
         break;
        }
       case 2:
        {
         HEAP32[i12 >> 2] = i8 + 164;
         i4 = 0;
         i1 = i12;
         break;
        }
       case 4:
        {
         HEAP32[i12 >> 2] = i8 + 168;
         if (!i2) {
          i4 = 0;
          i1 = i12;
         } else {
          i4 = HEAP32[i2 >> 2] | 0;
          i1 = i2 + 212 | 0;
         }
         break;
        }
       case 5:
        {
         HEAP32[i12 >> 2] = i8 + 460;
         if (!i2) {
          i4 = 0;
          i1 = i12;
         } else {
          i4 = HEAP32[i2 >> 2] | 0;
          i1 = i2 + 284 | 0;
         }
         break;
        }
       case 6:
        {
         HEAP32[i12 >> 2] = i11;
         i4 = 0;
         i1 = i12;
         break;
        }
       case 7:
        {
         HEAP32[i12 >> 2] = i8;
         i4 = 0;
         i1 = i12;
         break;
        }
       case 8:
        {
         HEAP32[i12 >> 2] = i1;
         i4 = 0;
         i1 = i12;
         break;
        }
       default:
        {
         HEAP32[i12 >> 2] = i8 + 132;
         i4 = 0;
         i1 = i12;
        }
       }
       if (!(HEAP32[i1 >> 2] | 0)) {
        HEAP32[i11 + 12 >> 2] = 0;
        i2 = 0;
        break L25;
       }
       if ((i5 & -2 | 0) == 8) {
        i1 = FUNCTION_TABLE_iiiiii[HEAP32[i11 + 68 >> 2] & 63](i11, i6, i1, i4, 0) | 0;
        break;
       } else {
        i1 = FUNCTION_TABLE_iiiiii[HEAP32[i11 + 64 >> 2] & 63](i11, i6, i1, i4, 0) | 0;
        break;
       }
      } else {
       FUNCTION_TABLE_vii[HEAP32[i6 + 12 >> 2] & 31](i8, i11);
       i1 = HEAP32[i11 + 12 >> 2] | 0;
      } while (0);
      HEAP32[i11 + 12 >> 2] = i1;
      if (i1) {
       if ((i1 & 255 | 0) != 162) {
        i10 = 77;
        break L3;
       }
       HEAP32[i11 + 12 >> 2] = 0;
       i2 = 0;
      } else i2 = 0;
     } else i2 = 0;
    } else i2 = 0;
   } while (0);
   FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
   i1 = HEAP32[i11 >> 2] | 0;
   if (i1 >>> 0 >= (i7 + i9 | 0) >>> 0) break L1; else i5 = i2;
  }
  if ((i10 | 0) == 27) {
   if (i1) {
    i11 = 3;
    STACKTOP = i12;
    return i11 | 0;
   }
   HEAP32[i11 + 12 >> 2] = 3;
   i11 = 3;
   STACKTOP = i12;
   return i11 | 0;
  } else if ((i10 | 0) == 36) {
   if (i1) {
    i11 = 3;
    STACKTOP = i12;
    return i11 | 0;
   }
   HEAP32[i11 + 12 >> 2] = 3;
   i11 = 3;
   STACKTOP = i12;
   return i11 | 0;
  } else if ((i10 | 0) == 77) {
   STACKTOP = i12;
   return i1 | 0;
  }
 } while (0);
 i11 = HEAP32[i11 + 12 >> 2] | 0;
 STACKTOP = i12;
 return i11 | 0;
}

function __ZN8Graphics15SetRenderTargetEiPP7TextureS1_S1_(i10, i5, i4, i7, i2, i3) {
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 L1 : do if ((i2 | 0) != 0 & (i3 | 0) != 0) {
  i1 = HEAP32[i2 + 36 >> 2] | 0;
  L3 : do if ((i1 | 0) >= 45) if ((i1 | 0) < 1048584) switch (i1 | 0) {
  case 45:
   break L3;
  default:
   break L1;
  } else switch (i1 | 0) {
  case 1048584:
   break L3;
  default:
   break L1;
  } else switch (i1 | 0) {
  case 20:
   break;
  default:
   break L1;
  } while (0);
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i10, 291865, 290210, 2093, -1610579966, 291937, i11);
  STACKTOP = i11;
  return;
 } while (0);
 L12 : do if (i3) {
  i1 = HEAP32[i3 + 36 >> 2] | 0;
  L14 : do if ((i1 | 0) >= 45) {
   if ((i1 | 0) < 55) switch (i1 | 0) {
   case 45:
    break L14;
   default:
    break L12;
   }
   if ((i1 | 0) < 1048582) switch (i1 | 0) {
   case 55:
    break L14;
   default:
    break L12;
   } else switch (i1 | 0) {
   case 1048582:
    break L14;
   default:
    break L12;
   }
  } else switch (i1 | 0) {
  case 40:
  case 20:
   break;
  default:
   break L12;
  } while (0);
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i10, 291865, 290210, 2096, -1610579966, 292040, i11 + 8 | 0);
  STACKTOP = i11;
  return;
 } while (0);
 i1 = (i2 | 0) == 0 & (i3 | 0) != 0 ? 0 : i3;
 i8 = (i2 | 0) == 0 & (i3 | 0) != 0 ? i3 : i2;
 i1 = (i1 | 0) == 0 ? i8 : i1;
 if ((i8 | 0) != (i1 | 0)) {
  i7 = __Z21TextureFormatToString13TextureFormat(HEAP32[i8 + 36 >> 2] | 0) | 0;
  i8 = __Z21TextureFormatToString13TextureFormat(HEAP32[i1 + 36 >> 2] | 0) | 0;
  HEAP32[i11 + 16 >> 2] = i7;
  HEAP32[i11 + 16 + 4 >> 2] = i8;
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i10, 291865, 290210, 2112, -1610579966, 292108, i11 + 16 | 0);
  STACKTOP = i11;
  return;
 }
 if ((i4 | 0) != 0 & (i7 | 0) != 0) {
  if (!((i8 | 0) != 0 | (HEAP32[i7 >> 2] | 0) != 0)) i9 = 12;
 } else if (!i8) i9 = 12;
 if ((i9 | 0) == 12) {
  _glBindFramebuffer(36160, 0);
  i8 = __ZNK8Graphics11ScreenWidthEv(i5) | 0;
  _glViewport(0, 0, i8 | 0, __ZNK8Graphics12ScreenHeightEv(i5) | 0);
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  HEAP32[i10 + 12 >> 2] = 0;
  HEAP32[i10 + 16 >> 2] = 0;
  STACKTOP = i11;
  return;
 }
 _glBindFramebuffer(36160, HEAP32[i5 + 284 >> 2] | 0);
 if ((i7 | 0) != 0 ? (i6 = HEAP32[i7 >> 2] | 0, (i4 | 0) > 0 & (i6 | 0) != 0) : 0) {
  i1 = HEAP32[i6 + 36 >> 2] | 0;
  L40 : do if ((i1 | 0) >= 48) {
   if ((i1 | 0) < 87) switch (i1 | 0) {
   case 66:
   case 65:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
   case 86:
   case 85:
   case 59:
   case 58:
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
   case 69:
   case 68:
   case 67:
    break L40;
   default:
    {
     i9 = 16;
     break L40;
    }
   }
   if ((i1 | 0) >= 1048581) {
    if ((i1 | 0) >= 4194333) switch (i1 | 0) {
    case 4194356:
    case 4194354:
    case 4194339:
    case 4194337:
    case 4194334:
    case 4194333:
     break L40;
    default:
     {
      i9 = 16;
      break L40;
     }
    }
    if ((i1 | 0) < 1048584) switch (i1 | 0) {
    case 1048583:
    case 1048582:
    case 1048581:
     break L40;
    default:
     {
      i9 = 16;
      break L40;
     }
    }
    if ((i1 | 0) < 4194324) switch (i1 | 0) {
    case 1048584:
     break L40;
    default:
     {
      i9 = 16;
      break L40;
     }
    } else switch (i1 | 0) {
    case 4194324:
    case 4194331:
     break L40;
    default:
     {
      i9 = 16;
      break L40;
     }
    }
   }
   if ((i1 | 0) < 93) switch (i1 | 0) {
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
   case 87:
    break L40;
   default:
    {
     i9 = 16;
     break L40;
    }
   }
   if ((i1 | 0) >= 1048578) switch (i1 | 0) {
   case 1048579:
   case 1048578:
   case 1048580:
    break L40;
   default:
    {
     i9 = 16;
     break L40;
    }
   }
   if ((i1 | 0) < 115) switch (i1 | 0) {
   case 93:
    break L40;
   default:
    {
     i9 = 16;
     break L40;
    }
   }
   if ((i1 | 0) < 1048577) switch (i1 | 0) {
   case 115:
    break L40;
   default:
    {
     i9 = 16;
     break L40;
    }
   } else switch (i1 | 0) {
   case 1048577:
    break L40;
   default:
    {
     i9 = 16;
     break L40;
    }
   }
  } else switch (i1 | 0) {
  case 47:
  case 46:
  case 45:
  case 44:
  case 43:
  case 42:
  case 41:
  case 40:
  case 39:
  case 38:
  case 37:
  case 36:
  case 35:
  case 34:
  case 33:
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
  case 26:
  case 25:
  case 24:
  case 23:
  case 22:
  case 21:
  case 20:
  case 19:
  case 18:
  case 17:
  case 16:
  case 15:
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
  case 8:
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   break;
  default:
   i9 = 16;
  } while (0);
  if ((i9 | 0) == 16) {
   HEAP32[i11 + 24 >> 2] = __Z21TextureFormatToString13TextureFormat(i1) | 0;
   __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i10, 291865, 290210, 2156, -1610579966, 292289, i11 + 24 | 0);
   STACKTOP = i11;
   return;
  }
  i1 = HEAP32[i6 + 52 >> 2] | 0;
  if (!(HEAP8[i6 + 56 >> 0] | 0)) _glFramebufferTexture2D(36160, 36064, 3553, i1 | 0, 0); else _glFramebufferRenderbuffer(36160, 36064, 36161, i1 | 0);
  i2 = __ZNK7Texture5WidthEv(HEAP32[i7 >> 2] | 0) | 0;
  i1 = __ZNK7Texture6HeightEv(HEAP32[i7 >> 2] | 0) | 0;
  i2 = (i2 | 0) > 0 ? i2 : 0;
  i1 = (i1 | 0) > 0 ? i1 : 0;
 } else {
  _glFramebufferTexture2D(36160, 36064, 3553, 0, 0);
  i2 = 0;
  i1 = 0;
 }
 if (!i8) {
  _glFramebufferTexture2D(36160, 36096, 3553, 0, 0);
  _glFramebufferTexture2D(36160, 36128, 3553, 0, 0);
 } else {
  i4 = HEAP32[i8 + 36 >> 2] | 0;
  L84 : do if ((i4 | 0) >= 45) {
   if ((i4 | 0) < 55) switch (i4 | 0) {
   case 45:
    {
     i9 = 28;
     break L84;
    }
   default:
    {
     i9 = 24;
     break L84;
    }
   }
   if ((i4 | 0) < 1048582) switch (i4 | 0) {
   case 55:
    {
     i9 = 31;
     break L84;
    }
   default:
    {
     i9 = 24;
     break L84;
    }
   } else switch (i4 | 0) {
   case 1048582:
    {
     i3 = 32;
     i9 = 25;
     break L84;
    }
   default:
    {
     i9 = 24;
     break L84;
    }
   }
  } else switch (i4 | 0) {
  case 40:
  case 20:
   {
    i3 = 32;
    i9 = 25;
    break;
   }
  default:
   i9 = 24;
  } while (0);
  if ((i9 | 0) == 24) {
   i3 = 0;
   i9 = 25;
  }
  do if ((i9 | 0) == 25) {
   L97 : do if ((i4 | 0) >= 45) if ((i4 | 0) < 1048584) switch (i4 | 0) {
   case 45:
    break L97;
   default:
    {
     i9 = 26;
     break L97;
    }
   } else switch (i4 | 0) {
   case 1048584:
    break L97;
   default:
    {
     i9 = 26;
     break L97;
    }
   } else switch (i4 | 0) {
   case 20:
    break;
   default:
    i9 = 26;
   } while (0);
   if ((i9 | 0) == 26) {
    if (i3) {
     i9 = 31;
     break;
    }
    HEAP32[i11 + 32 >> 2] = __Z21TextureFormatToString13TextureFormat(i4) | 0;
    __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i10, 291865, 290210, 2219, -1610579966, 292359, i11 + 32 | 0);
    STACKTOP = i11;
    return;
   }
   if (!i3) {
    _glFramebufferTexture2D(36160, 33306, 3553, 0, 0);
    _glFramebufferTexture2D(36160, 36096, 3553, 0, 0);
    i3 = HEAP32[i8 + 52 >> 2] | 0;
    if (!(HEAP8[i8 + 56 >> 0] | 0)) {
     _glFramebufferTexture2D(36160, 36128, 3553, i3 | 0, 0);
     break;
    } else {
     _glFramebufferRenderbuffer(36160, 36128, 36161, i3 | 0);
     break;
    }
   } else i9 = 28;
  } while (0);
  do if ((i9 | 0) == 28) {
   _glFramebufferTexture2D(36160, 36096, 3553, 0, 0);
   _glFramebufferTexture2D(36160, 36128, 3553, 0, 0);
   i3 = HEAP32[i8 + 52 >> 2] | 0;
   if (!(HEAP8[i8 + 56 >> 0] | 0)) {
    _glFramebufferTexture2D(36160, 33306, 3553, i3 | 0, 0);
    break;
   } else {
    _glFramebufferRenderbuffer(36160, 33306, 36161, i3 | 0);
    break;
   }
  } else if ((i9 | 0) == 31) {
   _glFramebufferTexture2D(36160, 33306, 3553, 0, 0);
   _glFramebufferTexture2D(36160, 36128, 3553, 0, 0);
   i3 = HEAP32[i8 + 52 >> 2] | 0;
   if (!(HEAP8[i8 + 56 >> 0] | 0)) {
    _glFramebufferTexture2D(36160, 36096, 3553, i3 | 0, 0);
    break;
   } else {
    _glFramebufferRenderbuffer(36160, 36096, 36161, i3 | 0);
    break;
   }
  } while (0);
  i7 = __ZNK7Texture5WidthEv(i8) | 0;
  i8 = __ZNK7Texture6HeightEv(i8) | 0;
  i2 = (i2 | 0) < (i7 | 0) ? i7 : i2;
  i1 = (i1 | 0) < (i8 | 0) ? i8 : i1;
 }
 _glViewport(0, 0, i2 | 0, i1 | 0);
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i10 + 16 >> 2] = 0;
 STACKTOP = i11;
 return;
}

function __ZN12FTGlyphCache14CacheCharacterEP6FTFontmiRKN4math6float3Eb(i26, i30, i29, i31, i24, i25) {
 i26 = i26 | 0;
 i30 = i30 | 0;
 i29 = i29 | 0;
 i31 = i31 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i27 = 0, i28 = 0, i32 = 0;
 i32 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i2 = HEAP32[i30 + 24 >> 2] | 0;
 L1 : do if ((i2 | 0) != 0 ? (i1 = HEAP32[i2 + ((HEAP32[i30 + 28 >> 2] & (i31 ^ i29)) << 2) >> 2] | 0, (i1 | 0) != 0) : 0) {
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i29 | 0) ? (HEAP32[i1 + 4 >> 2] | 0) == (i31 | 0) : 0) break;
   i1 = HEAP32[i1 + 64 >> 2] | 0;
   if (!i1) break L1;
  }
  i31 = i1;
  STACKTOP = i32;
  return i31 | 0;
 } while (0);
 _FT_Set_Char_Size(HEAP32[i30 + 20 >> 2] | 0, 0, i31, 300, 300) | 0;
 i1 = _FT_Get_Char_Index(HEAP32[i30 + 20 >> 2] | 0, i29) | 0;
 if (!i1) {
  HEAP32[i32 + 64 >> 2] = HEAP32[i30 >> 2];
  HEAP32[i32 + 64 + 4 >> 2] = i29;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 289836, i32 + 64 | 0);
 }
 _FT_Load_Glyph(HEAP32[i30 + 20 >> 2] | 0, i1, 0) | 0;
 _FT_Render_Glyph(HEAP32[(HEAP32[i30 + 20 >> 2] | 0) + 84 >> 2] | 0, 0) | 0;
 i18 = HEAP32[(HEAP32[i30 + 20 >> 2] | 0) + 84 >> 2] | 0;
 i28 = HEAP32[i18 + 76 >> 2] | 0;
 i27 = HEAP32[i18 + 80 >> 2] | 0;
 __ZN15MaxRectsBinPack6InsertEiiNS_23FreeRectChoiceHeuristicE(i32 + 96 | 0, i26 + 164 | 0, i27 + 4 | 0, i28 + 4 | 0, 4);
 i23 = HEAP32[i32 + 96 + 8 >> 2] | 0;
 if (!i23) {
  i31 = 0;
  STACKTOP = i32;
  return i31 | 0;
 }
 __ZN7Texture9BeginDrawEi8LockType(i32 + 112 | 0, i26 + 28 | 0, 0, 3);
 i19 = HEAP32[i32 + 112 >> 2] | 0;
 i20 = HEAP32[i32 + 112 + 16 >> 2] | 0;
 i21 = HEAP32[i32 + 112 + 20 >> 2] | 0;
 i22 = HEAP32[i32 + 112 + 12 >> 2] | 0;
 i1 = HEAP32[i32 + 96 + 12 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i10 = HEAP32[i32 + 96 + 8 >> 2] | 0;
  i2 = HEAP32[i32 + 96 >> 2] | 0;
  i11 = HEAP32[i32 + 96 + 4 >> 2] | 0;
  i15 = 0;
  do {
   if ((i10 | 0) > 0) {
    i3 = i11 + i15 | 0;
    i12 = Math_imul(i3, i22) | 0;
    i14 = 0;
    do {
     i13 = i2 + i14 | 0;
     if ((i19 | 0) != 0 & i20 >>> 0 > i13 >>> 0 & i21 >>> 0 > i3 >>> 0) HEAP32[i19 + (i12 + (i13 << 2)) >> 2] = 0;
     i14 = i14 + 1 | 0;
    } while ((i14 | 0) < (i10 | 0));
   }
   i15 = i15 + 1 | 0;
  } while ((i15 | 0) < (i1 | 0));
 }
 if ((i28 | 0) > 0) {
  i17 = 0;
  do {
   if ((i27 | 0) > 0) {
    i14 = i17 + 2 | 0;
    i13 = HEAP32[i18 + 88 >> 2] | 0;
    i15 = Math_imul(HEAP32[i18 + 84 >> 2] | 0, i17) | 0;
    i16 = 0;
    do {
     i1 = HEAP8[i13 + (i15 + i16) >> 0] | 0;
     if (i25) {
      f9 = Math_fround(i1 & 255 | 0);
      i10 = ~~Math_fround(f9 * Math_fround(HEAPF32[i24 >> 2])) & 255;
      i2 = ~~Math_fround(f9 * Math_fround(HEAPF32[i24 + 4 >> 2])) & 255;
      i1 = i1 & 255;
      i11 = ~~Math_fround(f9 * Math_fround(HEAPF32[i24 + 8 >> 2])) & 255;
     } else {
      i1 = i1 & 255;
      i10 = -1;
      i2 = -1;
      i11 = -1;
     }
     i3 = HEAP32[i32 + 96 >> 2] | 0;
     i12 = HEAP32[i32 + 96 + 4 >> 2] | 0;
     i10 = (i2 & 255) << 8 | i1 << 24 | (i10 & 255) << 16 | i11 & 255;
     if ((i23 | 0) != (i27 + 4 | 0)) {
      i1 = i27 + 2 - i16 + i12 | 0;
      if ((i19 | 0) != 0 & i20 >>> 0 > (i14 + i3 | 0) >>> 0 & i21 >>> 0 > i1 >>> 0) HEAP32[i19 + ((Math_imul(i1, i22) | 0) + (i14 + i3 << 2)) >> 2] = i10;
     } else {
      i1 = i16 + 2 + i3 | 0;
      if ((i19 | 0) != 0 & i20 >>> 0 > i1 >>> 0 & i21 >>> 0 > (i14 + i12 | 0) >>> 0) HEAP32[i19 + ((Math_imul(i14 + i12 | 0, i22) | 0) + (i1 << 2)) >> 2] = i10;
     }
     i16 = i16 + 1 | 0;
    } while ((i16 | 0) != (i27 | 0));
   }
   i17 = i17 + 1 | 0;
  } while ((i17 | 0) != (i28 | 0));
 }
 i25 = HEAP32[i32 + 96 >> 2] | 0;
 i2 = i32 + 96 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 __ZN7Texture12CopyRegion2DERS_iiiS0_iiiii(i32 + 72 | 0, i26 + 96 | 0, 0, i25, i1, i26 + 28 | 0, 0, i25, i1, HEAP32[i32 + 96 + 8 >> 2] | 0, HEAP32[i32 + 96 + 12 >> 2] | 0);
 i1 = HEAP32[i32 + 72 + 4 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i32 + 72 + 4 >> 2] = 0;
 f4 = Math_fround((HEAP32[i32 + 96 >> 2] | 0) + 2 | 0);
 f4 = Math_fround(f4 / Math_fround(HEAP32[i26 + 164 >> 2] | 0));
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i23 | 0) != (i27 + 4 | 0)) {
  f8 = Math_fround(i27 + 2 + i1 | 0);
  __ZN4math6float2C2Eff(i32 + 56 | 0, f4, Math_fround(f8 / Math_fround(HEAP32[i26 + 168 >> 2] | 0)));
  i10 = HEAP32[i32 + 56 >> 2] | 0;
  i11 = HEAP32[i32 + 56 + 4 >> 2] | 0;
  f8 = Math_fround((HEAP32[i32 + 96 >> 2] | 0) + 2 | 0);
  f8 = Math_fround(f8 / Math_fround(HEAP32[i26 + 164 >> 2] | 0));
  f9 = Math_fround((HEAP32[i2 >> 2] | 0) + 2 | 0);
  __ZN4math6float2C2Eff(i32 + 48 | 0, f8, Math_fround(f9 / Math_fround(HEAP32[i26 + 168 >> 2] | 0)));
  i12 = HEAP32[i32 + 48 >> 2] | 0;
  i13 = HEAP32[i32 + 48 + 4 >> 2] | 0;
  f9 = Math_fround(i28 + 2 + (HEAP32[i32 + 96 >> 2] | 0) | 0);
  f9 = Math_fround(f9 / Math_fround(HEAP32[i26 + 164 >> 2] | 0));
  f8 = Math_fround(i27 + 2 + (HEAP32[i2 >> 2] | 0) | 0);
  __ZN4math6float2C2Eff(i32 + 40 | 0, f9, Math_fround(f8 / Math_fround(HEAP32[i26 + 168 >> 2] | 0)));
  i14 = HEAP32[i32 + 40 >> 2] | 0;
  i15 = HEAP32[i32 + 40 + 4 >> 2] | 0;
  f8 = Math_fround(i28 + 2 + (HEAP32[i32 + 96 >> 2] | 0) | 0);
  f8 = Math_fround(f8 / Math_fround(HEAP32[i26 + 164 >> 2] | 0));
  f9 = Math_fround((HEAP32[i2 >> 2] | 0) + 2 | 0);
  __ZN4math6float2C2Eff(i32 + 32 | 0, f8, Math_fround(f9 / Math_fround(HEAP32[i26 + 168 >> 2] | 0)));
  i1 = i32 + 32 | 0;
 } else {
  f8 = Math_fround(i1 + 2 | 0);
  __ZN4math6float2C2Eff(i32 + 24 | 0, f4, Math_fround(f8 / Math_fround(HEAP32[i26 + 168 >> 2] | 0)));
  i10 = HEAP32[i32 + 24 >> 2] | 0;
  i11 = HEAP32[i32 + 24 + 4 >> 2] | 0;
  f8 = Math_fround(i27 + 2 + (HEAP32[i32 + 96 >> 2] | 0) | 0);
  f8 = Math_fround(f8 / Math_fround(HEAP32[i26 + 164 >> 2] | 0));
  f9 = Math_fround((HEAP32[i2 >> 2] | 0) + 2 | 0);
  __ZN4math6float2C2Eff(i32 + 16 | 0, f8, Math_fround(f9 / Math_fround(HEAP32[i26 + 168 >> 2] | 0)));
  i12 = HEAP32[i32 + 16 >> 2] | 0;
  i13 = HEAP32[i32 + 16 + 4 >> 2] | 0;
  f9 = Math_fround((HEAP32[i32 + 96 >> 2] | 0) + 2 | 0);
  f9 = Math_fround(f9 / Math_fround(HEAP32[i26 + 164 >> 2] | 0));
  f8 = Math_fround(i28 + 2 + (HEAP32[i2 >> 2] | 0) | 0);
  __ZN4math6float2C2Eff(i32 + 8 | 0, f9, Math_fround(f8 / Math_fround(HEAP32[i26 + 168 >> 2] | 0)));
  i14 = HEAP32[i32 + 8 >> 2] | 0;
  i15 = HEAP32[i32 + 8 + 4 >> 2] | 0;
  f8 = Math_fround(i27 + 2 + (HEAP32[i32 + 96 >> 2] | 0) | 0);
  f8 = Math_fround(f8 / Math_fround(HEAP32[i26 + 164 >> 2] | 0));
  f9 = Math_fround(i28 + 2 + (HEAP32[i2 >> 2] | 0) | 0);
  __ZN4math6float2C2Eff(i32, f8, Math_fround(f9 / Math_fround(HEAP32[i26 + 168 >> 2] | 0)));
  i1 = i32;
 }
 i3 = i1;
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i30 + 20 >> 2] | 0) + 84 >> 2] | 0;
 f8 = Math_fround(HEAP32[i1 + 100 >> 2] | 0);
 f9 = Math_fround(0 - (HEAP32[i1 + 104 >> 2] | 0) | 0);
 f7 = Math_fround(i27 | 0);
 f4 = Math_fround(i28 | 0);
 f5 = Math_fround(Math_fround(HEAP32[i1 + 64 >> 2] | 0) * Math_fround(.015625));
 f6 = Math_fround(Math_fround(HEAP32[i1 + 68 >> 2] | 0) * Math_fround(.015625));
 i28 = (HEAP32[i30 + 32 >> 2] | 0) + 1 | 0;
 HEAP32[i30 + 32 >> 2] = i28;
 i1 = HEAP32[i30 + 28 >> 2] | 0;
 if (i28 >>> 0 > ((i1 | 0) == 0 ? 0 : i1 + 1 | 0) >>> 0) {
  __ZN12DynHashTableI15GlyphCacheEntry4HashE11SetCapacityEm(i30 + 24 | 0, (i1 << 1) + 2 | 0);
  i1 = HEAP32[i30 + 28 >> 2] | 0;
 }
 i16 = __Znwj(68) | 0;
 HEAP32[i16 >> 2] = i29;
 HEAP32[i16 + 4 >> 2] = i31;
 HEAP32[i16 + 8 >> 2] = i10;
 HEAP32[i16 + 8 + 4 >> 2] = i11;
 HEAP32[i16 + 16 >> 2] = i12;
 HEAP32[i16 + 16 + 4 >> 2] = i13;
 HEAP32[i16 + 24 >> 2] = i14;
 HEAP32[i16 + 24 + 4 >> 2] = i15;
 HEAP32[i16 + 32 >> 2] = i2;
 HEAP32[i16 + 32 + 4 >> 2] = i3;
 HEAPF32[i16 + 40 >> 2] = f5;
 HEAPF32[i16 + 44 >> 2] = f6;
 HEAPF32[i16 + 48 >> 2] = f7;
 HEAPF32[i16 + 52 >> 2] = f4;
 HEAPF32[i16 + 56 >> 2] = f8;
 HEAPF32[i16 + 60 >> 2] = f9;
 HEAP32[i16 + 64 >> 2] = 0;
 i3 = (HEAP32[i30 + 24 >> 2] | 0) + ((i1 & (i31 ^ i29)) << 2) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  HEAP32[i3 >> 2] = i16;
  HEAP32[i16 + 64 >> 2] = 0;
 } else {
  i2 = HEAP32[i1 + 64 >> 2] | 0;
  if (!i2) i1 = i1 + 64 | 0; else do {
   HEAP32[i3 >> 2] = i2;
   i1 = i2 + 64 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while ((i2 | 0) != 0);
  HEAP32[i1 >> 2] = i16;
  HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 64 >> 2] | 0) + 64 >> 2] = 0;
 }
 __ZN5ImageD2Ev(i32 + 112 | 0);
 i31 = i16;
 STACKTOP = i32;
 return i31 | 0;
}

function _Load_SBit_Image(i8, i3, i7, i1, i11, i10, i14, i16, i9, i6) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 i16 = i16 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i12 = 0, i13 = 0, i15 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = HEAP32[i16 + 28 >> 2] | 0;
 i1 = _FT_Stream_Seek(i16, i1 + i7 | 0) | 0;
 HEAP32[i17 + 8 >> 2] = i1;
 if (i1) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 L4 : do switch (HEAPU16[i3 + 6 >> 1] | 0) {
 case 8:
 case 2:
 case 1:
  {
   i1 = _FT_Stream_ReadFields(i16, 285568, i17 + 24 | 0) | 0;
   if (!i1) {
    HEAP8[i9 >> 0] = HEAP8[i17 + 24 >> 0] | 0;
    HEAP8[i9 + 1 >> 0] = HEAP8[i17 + 24 + 1 >> 0] | 0;
    HEAP8[i9 + 2 >> 0] = HEAP8[i17 + 24 + 2 >> 0] | 0;
    HEAP8[i9 + 3 >> 0] = HEAP8[i17 + 24 + 3 >> 0] | 0;
    HEAP8[i9 + 4 >> 0] = HEAP8[i17 + 24 + 4 >> 0] | 0;
    HEAP8[i9 + 5 >> 0] = 0;
    HEAP8[i9 + 6 >> 0] = 0;
    HEAP8[i9 + 7 >> 0] = 0;
    i2 = 7;
   } else i2 = 8;
   break;
  }
 case 9:
 case 7:
 case 6:
  {
   i1 = _FT_Stream_ReadFields(i16, 285480, i9) | 0;
   HEAP32[i17 + 8 >> 2] = i1;
   if (i1) {
    i16 = i1;
    STACKTOP = i17;
    return i16 | 0;
   }
   break;
  }
 default:
  {
   switch (HEAP16[i3 + 4 >> 1] | 0) {
   case 5:
   case 2:
    break;
   default:
    {
     i1 = 3;
     i2 = 8;
     break L4;
    }
   }
   i15 = HEAPU8[i3 + 16 >> 0] | HEAPU8[i3 + 16 + 1 >> 0] << 8 | HEAPU8[i3 + 16 + 2 >> 0] << 16 | HEAPU8[i3 + 16 + 3 >> 0] << 24;
   i2 = HEAPU8[i3 + 16 + 4 >> 0] | HEAPU8[i3 + 16 + 4 + 1 >> 0] << 8 | HEAPU8[i3 + 16 + 4 + 2 >> 0] << 16 | HEAPU8[i3 + 16 + 4 + 3 >> 0] << 24;
   HEAP8[i9 >> 0] = i15;
   HEAP8[i9 + 1 >> 0] = i15 >> 8;
   HEAP8[i9 + 2 >> 0] = i15 >> 16;
   HEAP8[i9 + 3 >> 0] = i15 >> 24;
   HEAP8[i9 + 4 >> 0] = i2;
   HEAP8[i9 + 4 + 1 >> 0] = i2 >> 8;
   HEAP8[i9 + 4 + 2 >> 0] = i2 >> 16;
   HEAP8[i9 + 4 + 3 >> 0] = i2 >> 24;
   i2 = 7;
  }
 } while (0);
 if ((i2 | 0) == 7) HEAP32[i17 + 8 >> 2] = 0; else if ((i2 | 0) == 8) {
  HEAP32[i17 + 8 >> 2] = i1;
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 if (!i6) {
  i1 = HEAPU8[i9 + 1 >> 0] | 0;
  HEAP32[i11 + 80 >> 2] = i1;
  i2 = HEAPU8[i9 >> 0] | 0;
  HEAP32[i11 + 76 >> 2] = i2;
  switch (HEAPU8[i8 + 46 >> 0] | 0) {
  case 1:
   {
    HEAP8[i11 + 94 >> 0] = 1;
    HEAP32[i11 + 84 >> 2] = (i1 + 7 | 0) >>> 3;
    i1 = (i1 + 7 | 0) >>> 3;
    break;
   }
  case 2:
   {
    HEAP8[i11 + 94 >> 0] = 3;
    HEAP32[i11 + 84 >> 2] = (i1 + 3 | 0) >>> 2;
    i1 = (i1 + 3 | 0) >>> 2;
    break;
   }
  case 4:
   {
    HEAP8[i11 + 94 >> 0] = 4;
    HEAP32[i11 + 84 >> 2] = (i1 + 1 | 0) >>> 1;
    i1 = (i1 + 1 | 0) >>> 1;
    break;
   }
  case 8:
   {
    HEAP8[i11 + 94 >> 0] = 2;
    HEAP32[i11 + 84 >> 2] = i1;
    break;
   }
  default:
   {
    i16 = 3;
    STACKTOP = i17;
    return i16 | 0;
   }
  }
  i1 = Math_imul(i1, i2) | 0;
  if (!i1) {
   i16 = 0;
   STACKTOP = i17;
   return i16 | 0;
  }
  i1 = _ft_glyphslot_alloc_bitmap(i11, i1) | 0;
  HEAP32[i17 + 8 >> 2] = i1;
  if (i1) {
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  }
 }
 i3 = HEAPU16[i3 + 6 >> 1] | 0;
 switch (i3 | 0) {
 case 7:
 case 6:
 case 5:
 case 2:
 case 1:
  {
   i4 = HEAPU8[i8 + 46 >> 0] | 0;
   if ((i10 | 0) < 0) {
    i16 = 6;
    STACKTOP = i17;
    return i16 | 0;
   }
   i1 = HEAPU8[i9 + 1 >> 0] | 0;
   if ((i14 | 0) < 0 ? 1 : (i1 + i10 | 0) > (HEAP32[i11 + 80 >> 2] | 0)) {
    i16 = 6;
    STACKTOP = i17;
    return i16 | 0;
   }
   i2 = HEAPU8[i9 >> 0] | 0;
   if ((i2 + i14 | 0) > (HEAP32[i11 + 76 >> 2] | 0)) {
    i16 = 6;
    STACKTOP = i17;
    return i16 | 0;
   }
   i15 = Math_imul(i1, i4) | 0;
   switch (i3 | 0) {
   case 6:
   case 1:
    {
     switch (i4 | 0) {
     case 1:
      {
       i1 = (i1 + 7 | 0) >>> 3;
       break;
      }
     case 2:
      {
       i1 = (i1 + 3 | 0) >>> 2;
       break;
      }
     case 4:
      {
       i1 = (i1 + 1 | 0) >>> 1;
       break;
      }
     default:
      {}
     }
     i1 = Math_imul(i1, i2) | 0;
     i3 = 1;
     break;
    }
   case 7:
   case 5:
   case 2:
    {
     i1 = ((Math_imul(i2, i15) | 0) + 7 | 0) >>> 3;
     i3 = 0;
     break;
    }
   default:
    {
     i16 = 3;
     STACKTOP = i17;
     return i16 | 0;
    }
   }
   i1 = _FT_Stream_EnterFrame(i16, i1) | 0;
   if (i1) {
    i16 = i1;
    STACKTOP = i17;
    return i16 | 0;
   }
   i13 = Math_imul(i4, i10) | 0;
   i2 = HEAP8[i9 >> 0] | 0;
   i12 = HEAP32[i11 + 84 >> 2] | 0;
   i1 = HEAP32[i11 + 88 >> 2] | 0;
   if ((i12 | 0) < 0) i1 = i1 + (Math_imul((HEAP32[i11 + 76 >> 2] | 0) + -1 | 0, 0 - i12 | 0) | 0) | 0;
   if (i2 << 24 >> 24) {
    i9 = Math_imul(i12, i14) | 0;
    i11 = i3 << 24 >> 24 == 0;
    i3 = HEAP32[i16 + 32 >> 2] | 0;
    i4 = 0;
    i8 = i2 & 255;
    i10 = i1 + ((i13 >> 3) + 1 + ((i15 + -8 | 0) >>> 3) + i9) | 0;
    i9 = i1 + (i9 + (i13 >> 3)) | 0;
    i1 = 0;
    while (1) {
     if (i15 >>> 0 > 7) {
      i6 = i3;
      i2 = i4;
      i7 = i15 + -8 | 0;
      i5 = i9;
      while (1) {
       if (i1 >>> 0 < 8) {
        i3 = i6 + 1 | 0;
        i4 = (HEAPU8[i6 >> 0] << 8 - i1 | i2 & 65535) & 65535;
        i1 = i1 + 8 | 0;
       } else {
        i3 = i6;
        i4 = i2;
       }
       i2 = (i4 & 65535) >>> 8 & 65535;
       if (!(i13 & 7)) {
        HEAP8[i5 >> 0] = HEAPU8[i5 >> 0] | i2;
        i5 = i5 + 1 | 0;
       } else {
        HEAP8[i5 >> 0] = HEAPU8[i5 >> 0] | i2 >>> (i13 & 7);
        i5 = i5 + 1 | 0;
        HEAP8[i5 >> 0] = HEAPU8[i5 >> 0] | i2 << 8 - (i13 & 7);
       }
       i2 = (i4 & 65535) << 8 & 65535;
       i1 = i1 + -8 | 0;
       i7 = i7 + -8 | 0;
       if ((i7 | 0) <= -1) {
        i7 = i15 + -8 - ((i15 + -8 | 0) >>> 3 << 3) | 0;
        i6 = i10;
        break;
       } else i6 = i3;
      }
     } else {
      i2 = i4;
      i7 = i15;
      i6 = i9;
     }
     if ((i7 | 0) > 0) {
      if ((i1 | 0) < (i7 | 0)) {
       i5 = i3 + 1 | 0;
       i4 = (HEAPU8[i3 >> 0] << 8 - i1 | i2 & 65535) & 65535;
       i1 = i1 + 8 | 0;
      } else {
       i5 = i3;
       i4 = i2;
      }
      i2 = (i4 & 65535) >>> 8 & 65535 & (255 >>> i7 ^ 255);
      HEAP8[i6 >> 0] = i2 >>> (i13 & 7) | HEAPU8[i6 >> 0];
      if ((i7 | 0) > (8 - (i13 & 7) | 0)) {
       i14 = i6 + 1 | 0;
       HEAP8[i14 >> 0] = HEAPU8[i14 >> 0] | i2 << 8 - (i13 & 7);
      }
      i3 = i5;
      i2 = (i4 & 65535) << i7 & 65535;
      i1 = i1 - i7 | 0;
     }
     if ((i8 | 0) > 1) {
      i4 = i11 ? i2 : 0;
      i8 = i8 + -1 | 0;
      i10 = i10 + i12 | 0;
      i9 = i9 + i12 | 0;
      i1 = i11 ? i1 : 0;
     } else break;
    }
   }
   _FT_Stream_ExitFrame(i16);
   i16 = 0;
   STACKTOP = i17;
   return i16 | 0;
  }
 case 8:
  {
   i15 = _FT_Stream_Skip(i16, 1) | 0;
   HEAP32[i17 + 8 >> 2] = i15;
   if (i15) {
    HEAP32[i17 + 8 >> 2] = 83;
    i16 = 83;
    STACKTOP = i17;
    return i16 | 0;
   }
   break;
  }
 case 9:
  break;
 default:
  {
   i16 = 3;
   STACKTOP = i17;
   return i16 | 0;
  }
 }
 i3 = _FT_Stream_ReadUShort(i16, i17 + 8 | 0) | 0;
 i1 = HEAP32[i17 + 8 >> 2] | 0;
 if (i1) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 i4 = _ft_mem_realloc(i5, 4, 0, i3 & 65535, 0, i17 + 8 | 0) | 0;
 i1 = HEAP32[i17 + 8 >> 2] | 0;
 if (i1) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 i15 = _FT_Stream_EnterFrame(i16, (i3 & 65535) << 2) | 0;
 HEAP32[i17 + 8 >> 2] = i15;
 L94 : do if (!i15) {
  if (!(i3 << 16 >> 16)) {
   _FT_Stream_ExitFrame(i16);
   break;
  } else {
   i1 = i4;
   i2 = i3;
  }
  while (1) {
   HEAP16[i1 >> 1] = _FT_Stream_GetUShort(i16) | 0;
   HEAP8[i1 + 2 >> 0] = _FT_Stream_GetChar(i16) | 0;
   HEAP8[i1 + 3 >> 0] = _FT_Stream_GetChar(i16) | 0;
   i2 = i2 + -1 << 16 >> 16;
   if (!(i2 << 16 >> 16)) break; else i1 = i1 + 4 | 0;
  }
  _FT_Stream_ExitFrame(i16);
  if (i3 << 16 >> 16) {
   i2 = i4;
   i1 = i3;
   while (1) {
    i15 = _find_sbit_range(HEAPU16[i2 >> 1] | 0, i8, i17 + 4 | 0, i17) | 0;
    HEAP32[i17 + 8 >> 2] = i15;
    if (i15) break L94;
    i15 = _Load_SBit_Image(i8, HEAP32[i17 + 4 >> 2] | 0, i7, HEAP32[i17 >> 2] | 0, i11, (HEAP8[i2 + 2 >> 0] | 0) + i10 | 0, (HEAP8[i2 + 3 >> 0] | 0) + i14 | 0, i16, i17 + 16 | 0, i6 + 1 | 0) | 0;
    HEAP32[i17 + 8 >> 2] = i15;
    if (i15) break L94;
    i1 = i1 + -1 << 16 >> 16;
    if (!(i1 << 16 >> 16)) break; else i2 = i2 + 4 | 0;
   }
  }
 } while (0);
 _ft_mem_free(i5, i4);
 i16 = HEAP32[i17 + 8 >> 2] | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i15, i9, i8, i13, i1, i2, i3) {
 i15 = i15 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i15 + 4 >> 2] = 0;
 HEAP32[i15 + 4 + 4 >> 2] = 0;
 HEAP32[i15 + 4 + 8 >> 2] = 0;
 HEAP32[i15 + 4 + 12 >> 2] = 0;
 i14 = __Znaj(2048) | 0;
 HEAP32[i15 + 16 >> 2] = 2048;
 HEAP8[i14 >> 0] = 0;
 HEAP32[i15 + 4 >> 2] = i14;
 HEAP32[i16 + 152 >> 2] = i3;
 _vsnprintf(HEAP32[i15 + 4 >> 2] | 0, HEAP32[i15 + 16 >> 2] | 0, i2, i16 + 152 | 0) | 0;
 i2 = HEAP32[i15 + 4 >> 2] | 0;
 HEAP32[i15 + 12 >> 2] = _strlen(i2) | 0;
 if ((i2 | 0) != 0 ? (i4 = HEAP8[i2 >> 0] | 0, i4 << 24 >> 24 != 0) : 0) {
  i1 = 0;
  do {
   i14 = (i4 & 255) >>> 7 & 255;
   i1 = (i14 ^ 1) + i1 + ((i4 & 255) >>> 6 & i14) | 0;
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
  } while (i4 << 24 >> 24 != 0);
 } else i1 = 0;
 HEAP32[i15 + 8 >> 2] = i1;
 HEAP32[i16 + 24 >> 2] = 0;
 HEAP32[i16 + 24 + 4 >> 2] = 0;
 HEAP32[i16 + 24 + 8 >> 2] = 0;
 HEAP32[i16 + 24 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i16 + 24 | 0, 322383);
 HEAP32[i16 + 40 >> 2] = 0;
 HEAP32[i16 + 40 + 4 >> 2] = 0;
 HEAP32[i16 + 40 + 8 >> 2] = 0;
 HEAP32[i16 + 40 + 12 >> 2] = 0;
 i14 = HEAP32[i16 + 24 >> 2] | 0;
 __ZN6String3SetEPKc(i16 + 40 | 0, i14);
 if (!i9) {
  i12 = i16 + 40 | 0;
  i3 = HEAP32[i16 + 40 >> 2] | 0;
 } else {
  i5 = _strlen(i9) | 0;
  i1 = HEAP8[i9 >> 0] | 0;
  if (!(i1 << 24 >> 24)) i2 = 0; else {
   i2 = 0;
   i3 = i9;
   do {
    i12 = (i1 & 255) >>> 7 & 255;
    i2 = (i12 ^ 1) + i2 + ((i1 & 255) >>> 6 & i12) | 0;
    i3 = i3 + 1 | 0;
    i1 = HEAP8[i3 >> 0] | 0;
   } while (i1 << 24 >> 24 != 0);
  }
  i4 = HEAP32[i16 + 40 + 8 >> 2] | 0;
  if ((HEAP32[i16 + 40 + 12 >> 2] | 0) < (i4 + i5 + 1 | 0)) {
   i3 = __Znaj((i4 + i5 + 1 | 0) > -1 ? i4 + i5 + 1 | 0 : -1) | 0;
   HEAP32[i16 + 40 + 12 >> 2] = i4 + i5 + 1;
   i1 = HEAP32[i16 + 40 >> 2] | 0;
   if (!i1) {
    if ((i4 + i5 | 0) > -1) HEAP8[i3 >> 0] = 0;
   } else {
    _memcpy(i3 | 0, i1 | 0, i4 + 1 | 0) | 0;
    __ZdaPv(i1);
   }
   HEAP32[i16 + 40 >> 2] = i3;
   i1 = i16 + 40 | 0;
  } else {
   i1 = i16 + 40 | 0;
   i3 = HEAP32[i16 + 40 >> 2] | 0;
  }
  _memcpy(i3 + i4 | 0, i9 | 0, i5 + 1 | 0) | 0;
  HEAP32[i16 + 40 + 8 >> 2] = i4 + i5;
  HEAP32[i16 + 40 + 4 >> 2] = (HEAP32[i16 + 40 + 4 >> 2] | 0) + i2;
  i12 = i1;
 };
 HEAP32[i16 + 56 >> 2] = 0;
 HEAP32[i16 + 56 + 4 >> 2] = 0;
 HEAP32[i16 + 56 + 8 >> 2] = 0;
 HEAP32[i16 + 56 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i16 + 56 | 0, i3);
 i4 = HEAP32[i16 + 56 + 8 >> 2] | 0;
 if ((HEAP32[i16 + 56 + 12 >> 2] | 0) < (i4 + 7 | 0)) {
  i2 = __Znaj((i4 + 7 | 0) > -1 ? i4 + 7 | 0 : -1) | 0;
  HEAP32[i16 + 56 + 12 >> 2] = i4 + 7;
  i1 = HEAP32[i16 + 56 >> 2] | 0;
  if (!i1) {
   if ((i4 + 6 | 0) > -1) HEAP8[i2 >> 0] = 0;
  } else {
   _memcpy(i2 | 0, i1 | 0, i4 + 1 | 0) | 0;
   __ZdaPv(i1);
  }
  HEAP32[i16 + 56 >> 2] = i2;
  i11 = i16 + 56 | 0;
 } else {
  i11 = i16 + 56 | 0;
  i2 = HEAP32[i16 + 56 >> 2] | 0;
 }
 i10 = i2 + i4 | 0;
 HEAP8[i10 >> 0] = HEAP8[322396] | 0;
 HEAP8[i10 + 1 >> 0] = HEAP8[322397] | 0;
 HEAP8[i10 + 2 >> 0] = HEAP8[322398] | 0;
 HEAP8[i10 + 3 >> 0] = HEAP8[322399] | 0;
 HEAP8[i10 + 4 >> 0] = HEAP8[322400] | 0;
 HEAP8[i10 + 5 >> 0] = HEAP8[322401] | 0;
 HEAP8[i10 + 6 >> 0] = HEAP8[322402] | 0;
 HEAP32[i16 + 56 + 8 >> 2] = i4 + 6;
 HEAP32[i16 + 56 + 4 >> 2] = (HEAP32[i16 + 56 + 4 >> 2] | 0) + 6;
 HEAP32[i16 + 72 >> 2] = 0;
 HEAP32[i16 + 72 + 4 >> 2] = 0;
 HEAP32[i16 + 72 + 8 >> 2] = 0;
 HEAP32[i16 + 72 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i16 + 72 | 0, i2);
 if (!i8) {
  i10 = i16 + 72 | 0;
  i9 = HEAP32[i16 + 72 >> 2] | 0;
 } else {
  i7 = _strlen(i8) | 0;
  i1 = HEAP8[i8 >> 0] | 0;
  if (!(i1 << 24 >> 24)) i4 = 0; else {
   i4 = 0;
   i5 = i8;
   do {
    i10 = (i1 & 255) >>> 7 & 255;
    i4 = (i10 ^ 1) + i4 + ((i1 & 255) >>> 6 & i10) | 0;
    i5 = i5 + 1 | 0;
    i1 = HEAP8[i5 >> 0] | 0;
   } while (i1 << 24 >> 24 != 0);
  }
  i6 = HEAP32[i16 + 72 + 8 >> 2] | 0;
  if ((HEAP32[i16 + 72 + 12 >> 2] | 0) < (i6 + i7 + 1 | 0)) {
   i5 = __Znaj((i6 + i7 + 1 | 0) > -1 ? i6 + i7 + 1 | 0 : -1) | 0;
   HEAP32[i16 + 72 + 12 >> 2] = i6 + i7 + 1;
   i1 = HEAP32[i16 + 72 >> 2] | 0;
   if (!i1) {
    if ((i6 + i7 | 0) > -1) HEAP8[i5 >> 0] = 0;
   } else {
    _memcpy(i5 | 0, i1 | 0, i6 + 1 | 0) | 0;
    __ZdaPv(i1);
   }
   HEAP32[i16 + 72 >> 2] = i5;
   i1 = i16 + 72 | 0;
  } else {
   i1 = i16 + 72 | 0;
   i5 = HEAP32[i16 + 72 >> 2] | 0;
  }
  _memcpy(i5 + i6 | 0, i8 | 0, i7 + 1 | 0) | 0;
  HEAP32[i16 + 72 + 8 >> 2] = i6 + i7;
  HEAP32[i16 + 72 + 4 >> 2] = (HEAP32[i16 + 72 + 4 >> 2] | 0) + i4;
  i10 = i1;
  i9 = i5;
 };
 HEAP32[i16 + 88 >> 2] = 0;
 HEAP32[i16 + 88 + 4 >> 2] = 0;
 HEAP32[i16 + 88 + 8 >> 2] = 0;
 HEAP32[i16 + 88 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i16 + 88 | 0, i9);
 i5 = HEAP32[i16 + 88 + 8 >> 2] | 0;
 if ((HEAP32[i16 + 88 + 12 >> 2] | 0) < (i5 + 2 | 0)) {
  i1 = __Znaj((i5 + 2 | 0) > -1 ? i5 + 2 | 0 : -1) | 0;
  HEAP32[i16 + 88 + 12 >> 2] = i5 + 2;
  i4 = HEAP32[i16 + 88 >> 2] | 0;
  if (!i4) {
   if ((i5 | 0) > -2) HEAP8[i1 >> 0] = 0;
  } else {
   _memcpy(i1 | 0, i4 | 0, i5 + 1 | 0) | 0;
   __ZdaPv(i4);
  }
  HEAP32[i16 + 88 >> 2] = i1;
  i8 = i1;
 } else i8 = HEAP32[i16 + 88 >> 2] | 0;
 i7 = i8 + i5 | 0;
 HEAP8[i7 >> 0] = 58;
 HEAP8[i7 + 1 >> 0] = 0;
 HEAP32[i16 + 88 + 8 >> 2] = i5 + 1;
 HEAP32[i16 + 88 + 4 >> 2] = (HEAP32[i16 + 88 + 4 >> 2] | 0) + 1;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 8 + 4 >> 2] = 0;
 HEAP32[i16 + 8 + 8 >> 2] = 0;
 HEAP32[i16 + 8 + 12 >> 2] = 0;
 i7 = __Znaj(23) | 0;
 HEAP32[i16 + 8 + 12 >> 2] = 23;
 HEAP8[i7 >> 0] = 0;
 HEAP32[i16 + 8 >> 2] = i7;
 HEAP32[i16 >> 2] = i13;
 __ZN6String7SPrintfEPKcz(i16 + 8 | 0, 322403, i16) | 0;
 __ZNK6StringplERKS_(i16 + 104 | 0, i16 + 88 | 0, i16 + 8 | 0);
 HEAP32[i16 + 120 >> 2] = 0;
 HEAP32[i16 + 120 + 4 >> 2] = 0;
 HEAP32[i16 + 120 + 8 >> 2] = 0;
 HEAP32[i16 + 120 + 12 >> 2] = 0;
 i7 = HEAP32[i16 + 104 >> 2] | 0;
 __ZN6String3SetEPKc(i16 + 120 | 0, i7);
 i5 = HEAP32[i16 + 120 + 8 >> 2] | 0;
 if ((HEAP32[i16 + 120 + 12 >> 2] | 0) < (i5 + 3 | 0)) {
  i1 = __Znaj((i5 + 3 | 0) > -1 ? i5 + 3 | 0 : -1) | 0;
  HEAP32[i16 + 120 + 12 >> 2] = i5 + 3;
  i4 = HEAP32[i16 + 120 >> 2] | 0;
  if (!i4) {
   if ((i5 + 2 | 0) > -1) HEAP8[i1 >> 0] = 0;
  } else {
   _memcpy(i1 | 0, i4 | 0, i5 + 1 | 0) | 0;
   __ZdaPv(i4);
  }
  HEAP32[i16 + 120 >> 2] = i1;
  i6 = i1;
 } else i6 = HEAP32[i16 + 120 >> 2] | 0;
 i13 = i6 + i5 | 0;
 HEAP8[i13 >> 0] = HEAP8[322406] | 0;
 HEAP8[i13 + 1 >> 0] = HEAP8[322407] | 0;
 HEAP8[i13 + 2 >> 0] = HEAP8[322408] | 0;
 HEAP32[i16 + 120 + 8 >> 2] = i5 + 2;
 HEAP32[i16 + 120 + 4 >> 2] = (HEAP32[i16 + 120 + 4 >> 2] | 0) + 2;
 __ZNK6StringplERKS_(i16 + 136 | 0, i16 + 120 | 0, i15 + 4 | 0);
 do if ((i15 + 4 | 0) != (i16 + 136 | 0)) {
  if (!(HEAP32[i16 + 136 >> 2] | 0)) {
   HEAP32[i15 + 12 >> 2] = 0;
   HEAP32[i15 + 8 >> 2] = 0;
   i1 = HEAP32[i15 + 4 >> 2] | 0;
   if (!i1) break;
   HEAP8[i1 >> 0] = 0;
   break;
  }
  i4 = HEAP32[i16 + 136 + 8 >> 2] | 0;
  do if ((HEAP32[i15 + 16 >> 2] | 0) < (i4 + 1 | 0)) {
   if (!(i4 + 1 | 0)) {
    i1 = HEAP32[i15 + 4 >> 2] | 0;
    if (i1) __ZdaPv(i1);
    HEAP32[i15 + 4 >> 2] = 0;
    i1 = 0;
    break;
   }
   i1 = __Znaj((i4 + 1 | 0) > -1 ? i4 + 1 | 0 : -1) | 0;
   HEAP32[i15 + 16 >> 2] = i4 + 1;
   if ((i4 | 0) > -1) HEAP8[i1 >> 0] = 0;
   i4 = HEAP32[i15 + 4 >> 2] | 0;
   if (i4) __ZdaPv(i4);
   HEAP32[i15 + 4 >> 2] = i1;
  } else i1 = HEAP32[i15 + 4 >> 2] | 0; while (0);
  _memcpy(i1 | 0, HEAP32[i16 + 136 >> 2] | 0, (HEAP32[i16 + 136 + 8 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[i15 + 12 >> 2] = HEAP32[i16 + 136 + 8 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i16 + 136 + 4 >> 2];
 } while (0);
 i1 = HEAP32[i16 + 136 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i16 + 136 >> 2] = 0;
 if (i6) __ZdaPv(i6);
 HEAP32[i16 + 120 >> 2] = 0;
 if (i7) __ZdaPv(i7);
 HEAP32[i16 + 104 >> 2] = 0;
 i1 = HEAP32[i16 + 8 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i16 + 8 >> 2] = 0;
 if (i8) __ZdaPv(i8);
 HEAP32[i16 + 88 >> 2] = 0;
 if (i9) __ZdaPv(i9);
 HEAP32[i10 >> 2] = 0;
 if (i2) __ZdaPv(i2);
 HEAP32[i11 >> 2] = 0;
 if (i3) __ZdaPv(i3);
 HEAP32[i12 >> 2] = 0;
 if (!i14) {
  STACKTOP = i16;
  return;
 }
 __ZdaPv(i14);
 STACKTOP = i16;
 return;
}

function _cff_parse_font_matrix(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = HEAP32[i7 + 412 >> 2] | 0;
 if ((HEAP32[i7 + 404 >> 2] | 0) >>> 0 < (i7 + 40 | 0) >>> 0) {
  i8 = 161;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP8[i8 + 64 >> 0] = 1;
 i2 = HEAP32[i7 + 16 >> 2] | 0;
 i1 = HEAP32[i7 + 20 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 do if (i3 << 24 >> 24 == 30) i1 = _cff_parse_real(i2, i1, 0, i9) | 0; else {
  L7 : do switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else {
     i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 1 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
     i4 = 16;
    }
    break;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i1 = (i3 & 255) + -139 | 0;
     break L7;
    }
    if ((i3 & 255) < 251) {
     if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L7;
     }
     i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
     i4 = 16;
     break L7;
    } else {
     if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L7;
     }
     i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
     i4 = 16;
     break L7;
    }
   }
  } while (0);
  if ((i4 | 0) == 16) if ((i1 | 0) > 32767) {
   if ((i1 | 0) >= 1e5) if ((i1 | 0) >= 1e6) if ((i1 | 0) >= 1e7) if ((i1 | 0) < 1e8) i4 = 8; else i4 = (i1 | 0) < 1e9 ? 9 : 10; else i4 = 7; else i4 = 6; else i4 = 5;
   i2 = i4 + -5 | 0;
   i3 = HEAP32[267244 + (i2 << 2) >> 2] | 0;
   if (((i1 | 0) / (i3 | 0) | 0 | 0) > 32767) {
    i6 = i4 + -4 | 0;
    HEAP32[i9 >> 2] = i6;
    i1 = _FT_DivFix(i1, HEAP32[267244 + (i6 << 2) >> 2] | 0) | 0;
    break;
   } else {
    HEAP32[i9 >> 2] = i2;
    i1 = _FT_DivFix(i1, i3) | 0;
    break;
   }
  }
  HEAP32[i9 >> 2] = 0;
  i1 = i1 << 16;
 } while (0);
 HEAP32[i8 + 48 >> 2] = i1;
 i4 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = 0 - i4;
 if ((i4 + 9 | 0) >>> 0 > 9) {
  HEAP32[i8 + 48 >> 2] = 65536;
  HEAP32[i8 + 56 >> 2] = 0;
  HEAP32[i8 + 52 >> 2] = 0;
  HEAP32[i8 + 60 >> 2] = 65536;
  HEAP32[i8 + 72 >> 2] = 0;
  HEAP32[i8 + 76 >> 2] = 0;
  HEAP32[i8 + 68 >> 2] = 1;
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i1 = HEAP32[i7 + 20 >> 2] | 0;
 i3 = HEAP32[i7 + 24 >> 2] | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 if (i2 << 24 >> 24 == 30) {
  i1 = _cff_parse_real(i1, i3, 0 - i4 | 0, 0) | 0;
  i3 = HEAP32[i7 + 24 >> 2] | 0;
 } else {
  L42 : do switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i1 + 3 | 0) >>> 0 > i3 >>> 0) i1 = 0; else i1 = ((HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i1 + 5 | 0) >>> 0 > i3 >>> 0) i1 = 0; else i1 = (HEAPU8[i1 + 3 >> 0] | 0) << 8 | (HEAPU8[i1 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = (i2 & 255) + -139 | 0;
     break L42;
    }
    if ((i2 & 255) < 251) {
     if ((i1 + 2 | 0) >>> 0 > i3 >>> 0) {
      i1 = 0;
      break L42;
     }
     i1 = (HEAPU8[i1 + 1 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
     break L42;
    } else {
     if ((i1 + 2 | 0) >>> 0 > i3 >>> 0) {
      i1 = 0;
      break L42;
     }
     i1 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i1 + 1 >> 0] | 0) | 0;
     break L42;
    }
   }
  } while (0);
  i1 = Math_imul(i1 << 16, HEAP32[267244 + (0 - i4 << 2) >> 2] | 0) | 0;
 }
 HEAP32[i8 + 56 >> 2] = i1;
 i6 = HEAP32[i9 >> 2] | 0;
 i5 = HEAP32[i7 + 28 >> 2] | 0;
 i2 = HEAP8[i3 >> 0] | 0;
 if (i2 << 24 >> 24 == 30) {
  i1 = _cff_parse_real(i3, i5, i6, 0) | 0;
  i5 = HEAP32[i7 + 28 >> 2] | 0;
 } else {
  i4 = i3 + 1 | 0;
  L61 : do switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i3 + 3 | 0) >>> 0 > i5 >>> 0) i1 = 0; else i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i3 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i3 + 5 | 0) >>> 0 > i5 >>> 0) i1 = 0; else i1 = (HEAPU8[i3 + 3 >> 0] | 0) << 8 | (HEAPU8[i3 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = (i2 & 255) + -139 | 0;
     break L61;
    }
    i1 = (i3 + 2 | 0) >>> 0 > i5 >>> 0;
    if ((i2 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L61;
     }
     i1 = (HEAPU8[i4 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
     break L61;
    } else {
     if (i1) {
      i1 = 0;
      break L61;
     }
     i1 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     break L61;
    }
   }
  } while (0);
  i1 = Math_imul(i1 << 16, HEAP32[267244 + (i6 << 2) >> 2] | 0) | 0;
 }
 HEAP32[i8 + 52 >> 2] = i1;
 i6 = HEAP32[i9 >> 2] | 0;
 i4 = HEAP32[i7 + 32 >> 2] | 0;
 i2 = HEAP8[i5 >> 0] | 0;
 if (i2 << 24 >> 24 == 30) {
  i1 = _cff_parse_real(i5, i4, i6, 0) | 0;
  i5 = HEAP32[i7 + 32 >> 2] | 0;
 } else {
  i3 = i5 + 1 | 0;
  L80 : do switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i5 + 3 | 0) >>> 0 > i4 >>> 0) i1 = 0; else i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i5 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i5 + 5 | 0) >>> 0 > i4 >>> 0) i1 = 0; else i1 = (HEAPU8[i5 + 3 >> 0] | 0) << 8 | (HEAPU8[i5 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = (i2 & 255) + -139 | 0;
     break L80;
    }
    i1 = (i5 + 2 | 0) >>> 0 > i4 >>> 0;
    if ((i2 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L80;
     }
     i1 = (HEAPU8[i3 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
     break L80;
    } else {
     if (i1) {
      i1 = 0;
      break L80;
     }
     i1 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
     break L80;
    }
   }
  } while (0);
  i5 = i4;
  i1 = Math_imul(i1 << 16, HEAP32[267244 + (i6 << 2) >> 2] | 0) | 0;
 }
 HEAP32[i8 + 60 >> 2] = i1;
 i6 = HEAP32[i9 >> 2] | 0;
 i4 = HEAP32[i7 + 36 >> 2] | 0;
 i2 = HEAP8[i5 >> 0] | 0;
 if (i2 << 24 >> 24 == 30) {
  i1 = _cff_parse_real(i5, i4, i6, 0) | 0;
  i4 = HEAP32[i7 + 36 >> 2] | 0;
 } else {
  i3 = i5 + 1 | 0;
  L99 : do switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i5 + 3 | 0) >>> 0 > i4 >>> 0) i1 = 0; else i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i5 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i5 + 5 | 0) >>> 0 > i4 >>> 0) i1 = 0; else i1 = (HEAPU8[i5 + 3 >> 0] | 0) << 8 | (HEAPU8[i5 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = (i2 & 255) + -139 | 0;
     break L99;
    }
    i1 = (i5 + 2 | 0) >>> 0 > i4 >>> 0;
    if ((i2 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L99;
     }
     i1 = (HEAPU8[i3 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
     break L99;
    } else {
     if (i1) {
      i1 = 0;
      break L99;
     }
     i1 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
     break L99;
    }
   }
  } while (0);
  i1 = Math_imul(i1 << 16, HEAP32[267244 + (i6 << 2) >> 2] | 0) | 0;
 }
 HEAP32[i8 + 72 >> 2] = i1;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i7 + 40 >> 2] | 0;
 i2 = HEAP8[i4 >> 0] | 0;
 if (i2 << 24 >> 24 == 30) i1 = _cff_parse_real(i4, i1, i5, 0) | 0; else {
  i3 = i4 + 1 | 0;
  L118 : do switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i4 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i4 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i4 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = (HEAPU8[i4 + 3 >> 0] | 0) << 8 | (HEAPU8[i4 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = (i2 & 255) + -139 | 0;
     break L118;
    }
    i1 = (i4 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i2 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L118;
     }
     i1 = (HEAPU8[i3 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
     break L118;
    } else {
     if (i1) {
      i1 = 0;
      break L118;
     }
     i1 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
     break L118;
    }
   }
  } while (0);
  i1 = Math_imul(i1 << 16, HEAP32[267244 + (i5 << 2) >> 2] | 0) | 0;
 }
 HEAP32[i8 + 76 >> 2] = i1;
 HEAP32[i8 + 68 >> 2] = HEAP32[267244 + (HEAP32[i9 >> 2] << 2) >> 2];
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function __ZN7Texture12CopyRegion2DERS_iiiS0_iiiii(i8, i5, i9, i10, i11, i6, i13, i14, i15, i16, i12) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i1 = HEAP32[i5 + 52 >> 2] | 0;
 if (!i1) {
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i8, 301483, 299561, 996, -2147467259, 301581, i17);
  STACKTOP = i17;
  return;
 }
 i2 = HEAP32[i6 + 52 >> 2] | 0;
 i3 = HEAP8[i5 + 56 >> 0] | 0;
 if (i2) {
  __ZN7Texture16CopyRegion2D_GPUEjbiiijbiiiii(i1, i3 << 24 >> 24 != 0, i9, 0, 0, i2, (HEAP8[i6 + 56 >> 0] | 0) != 0, 0, 0, 0, 0, 0);
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  HEAP32[i8 + 16 >> 2] = 0;
  STACKTOP = i17;
  return;
 }
 if (i3 << 24 >> 24) {
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i8, 301483, 299561, 999, -2147467259, 301622, i17 + 8 | 0);
  STACKTOP = i17;
  return;
 }
 if (!(HEAP32[i6 + 64 >> 2] | 0)) {
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i8, 301483, 299561, 1003, -2147467259, 301744, i17 + 16 | 0);
  STACKTOP = i17;
  return;
 }
 i1 = HEAP32[i6 + 36 >> 2] | 0;
 if ((i1 | 0) != (HEAP32[i5 + 36 >> 2] | 0)) {
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i8, 301483, 299561, 1006, -2147467259, 301788, i17 + 24 | 0);
  STACKTOP = i17;
  return;
 }
 L21 : do if ((i1 | 0) >= 74) {
  L35 : do if ((i1 | 0) < 1048578) {
   if ((i1 | 0) < 87) {
    switch (i1 | 0) {
    case 74:
     {
      i7 = 14;
      break L35;
     }
    case 77:
     {
      i7 = 15;
      break L35;
     }
    case 85:
     break;
    default:
     {
      i7 = 31;
      break L21;
     }
    }
    i3 = 6407;
    i4 = 33635;
    break L21;
   }
   if ((i1 | 0) < 1048576) {
    switch (i1 | 0) {
    case 87:
     break;
    default:
     {
      i7 = 31;
      break L21;
     }
    }
    i3 = 32993;
    i4 = 5121;
    break L21;
   }
   switch (i1 | 0) {
   case 1048576:
    {
     i3 = 36196;
     i4 = 0;
     break L21;
    }
   case 1048577:
    {
     i3 = 6408;
     i4 = 32820;
     break L21;
    }
   default:
    {
     i7 = 31;
     break L21;
    }
   }
  } else switch (i1 | 0) {
  case 1048586:
   {
    i3 = 0;
    i4 = 0;
    break L21;
   }
  case 1048650:
   {
    i7 = 14;
    break L35;
   }
  case 1048653:
   {
    i7 = 15;
    break L35;
   }
  case 1048578:
   {
    i3 = 6408;
    i4 = 32819;
    break L21;
   }
  case 1048579:
   {
    i3 = 6410;
    i4 = 5121;
    break L21;
   }
  case 1048582:
   {
    i3 = 6402;
    i4 = 5125;
    break L21;
   }
  default:
   {
    i7 = 31;
    break L21;
   }
  } while (0);
  if ((i7 | 0) == 14) {
   i3 = 33778;
   i4 = 0;
   break;
  } else if ((i7 | 0) == 15) {
   i3 = 33779;
   i4 = 0;
   break;
  }
 } else do switch (i1 | 0) {
 case 0:
  {
   i3 = 0;
   i4 = 0;
   break L21;
  }
 case 71:
  {
   i3 = 33777;
   i4 = 0;
   break L21;
  }
 case 61:
  {
   i3 = 6409;
   i4 = 5121;
   break L21;
  }
 case 65:
  {
   i3 = 6406;
   i4 = 5121;
   break L21;
  }
 case 28:
  {
   i3 = 6408;
   i4 = 5121;
   break L21;
  }
 case 2:
  {
   i3 = 6408;
   i4 = 5126;
   break L21;
  }
 case 10:
  {
   i3 = 6408;
   i4 = 36193;
   break L21;
  }
 case 55:
  {
   i3 = 6402;
   i4 = 5123;
   break L21;
  }
 case 40:
  {
   i3 = 6402;
   i4 = 5126;
   break L21;
  }
 case 20:
  {
   i3 = 34041;
   i4 = 36269;
   break L21;
  }
 case 45:
  {
   i3 = 34041;
   i4 = 34042;
   break L21;
  }
 default:
  {
   i7 = 31;
   break L21;
  }
 } while (0); while (0);
 if ((i7 | 0) == 31) {
  HEAP32[i17 + 32 >> 2] = __Z21TextureFormatToString13TextureFormat(i1) | 0;
  __ZN4math22PrintToConsoleVariadicEjPKcz(4, 299208, i17 + 32 | 0);
  i3 = 0;
  i4 = 0;
 }
 i2 = __Z30WWWGLGetActiveMultitextureUnitv() | 0;
 _glActiveTexture(33999);
 _glBindTexture(3553, HEAP32[i5 + 52 >> 2] | 0);
 i1 = HEAP32[i6 + 36 >> 2] | 0;
 L59 : do if ((i1 | 0) >= 59) {
  L65 : do if ((i1 | 0) < 88) switch (i1 | 0) {
  case 87:
  case 69:
  case 68:
  case 67:
   {
    i7 = 35;
    break L59;
   }
  case 86:
  case 85:
  case 59:
   {
    i7 = 37;
    break L59;
   }
  case 65:
  case 64:
  case 63:
  case 62:
  case 61:
  case 60:
   {
    i7 = 38;
    break L65;
   }
  case 84:
  case 83:
  case 82:
  case 78:
  case 77:
  case 76:
  case 75:
  case 74:
  case 73:
   {
    i7 = 41;
    break L65;
   }
  case 66:
   {
    i1 = 1;
    break L59;
   }
  case 81:
  case 80:
  case 79:
  case 72:
  case 71:
  case 70:
   {
    i1 = 4;
    break L59;
   }
  default:
   {
    i7 = 43;
    break L59;
   }
  } else {
   if ((i1 | 0) >= 1048578) {
    if ((i1 | 0) < 4194324) switch (i1 | 0) {
    case 1048582:
     {
      i7 = 35;
      break L59;
     }
    case 1048583:
    case 1048579:
    case 1048578:
    case 1048580:
     {
      i7 = 37;
      break L59;
     }
    case 1048584:
    case 1048581:
     {
      i7 = 38;
      break L65;
     }
    default:
     {
      i7 = 43;
      break L59;
     }
    }
    switch (i1 | 0) {
    case 4194339:
    case 4194337:
     {
      i7 = 35;
      break L59;
     }
    case 4194334:
    case 4194333:
     {
      i7 = 37;
      break L59;
     }
    case 4194356:
    case 4194354:
    case 4194331:
     {
      i7 = 38;
      break L65;
     }
    case 4194324:
     break;
    default:
     {
      i7 = 43;
      break L59;
     }
    }
    i1 = 24;
    break L59;
   }
   if ((i1 | 0) < 95) switch (i1 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
    {
     i7 = 35;
     break L59;
    }
   case 94:
    {
     i7 = 41;
     break L65;
    }
   default:
    {
     i7 = 43;
     break L59;
    }
   }
   if ((i1 | 0) < 99) switch (i1 | 0) {
   case 98:
   case 97:
   case 96:
   case 95:
    {
     i7 = 41;
     break L65;
    }
   default:
    {
     i7 = 43;
     break L59;
    }
   }
   if ((i1 | 0) < 1048576) switch (i1 | 0) {
   case 115:
    {
     i7 = 37;
     break L59;
    }
   case 99:
    {
     i7 = 41;
     break L65;
    }
   default:
    {
     i7 = 43;
     break L59;
    }
   }
   switch (i1 | 0) {
   case 1048577:
    {
     i7 = 37;
     break L59;
    }
   case 1048576:
    break;
   default:
    {
     i7 = 43;
     break L59;
    }
   }
   i1 = 4;
   break L59;
  } while (0);
  if ((i7 | 0) == 38) {
   i1 = 8;
   break;
  } else if ((i7 | 0) == 41) {
   i1 = 8;
   break;
  }
 } else switch (i1 | 0) {
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i1 = 128;
   break L59;
  }
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
  {
   i7 = 35;
   break L59;
  }
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
  {
   i7 = 37;
   break L59;
  }
 case 8:
 case 7:
 case 6:
 case 5:
  {
   i1 = 96;
   break L59;
  }
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
  {
   i1 = 64;
   break L59;
  }
 default:
  {
   i7 = 43;
   break L59;
  }
 } while (0);
 if ((i7 | 0) == 35) i1 = 32; else if ((i7 | 0) == 37) i1 = 16; else if ((i7 | 0) == 43) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i17 + 40 | 0);
  i1 = 0;
 }
 i7 = (Math_imul(i1, i16) | 0) + 7 >> 3;
 i1 = HEAP32[i6 + 64 >> 2] | 0;
 if ((HEAP32[i1 + (i13 * 36 | 0) + 12 >> 2] | 0) == (i7 | 0)) _glTexSubImage2D(3553, i9 | 0, i10 | 0, i11 | 0, i16 | 0, i12 | 0, i3 | 0, i4 | 0, __ZN5Image5PtrAtEii(i1 + (i13 * 36 | 0) | 0, i14, i15) | 0); else {
  __ZNK5Image11CroppedCopyEiiii(i17 + 44 | 0, i1 + (i13 * 36 | 0) | 0, i14, (HEAP32[i1 + (i13 * 36 | 0) + 16 >> 2] | 0) - (i16 + i14) | 0, i15, (HEAP32[i1 + (i13 * 36 | 0) + 20 >> 2] | 0) - (i12 + i15) | 0);
  _glTexSubImage2D(3553, i9 | 0, i10 | 0, i11 | 0, i16 | 0, i12 | 0, i3 | 0, i4 | 0, HEAP32[i17 + 44 >> 2] | 0);
  __ZN5ImageD2Ev(i17 + 44 | 0);
 };
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 _glActiveTexture(i2 | 0);
 STACKTOP = i17;
 return;
}

function _ft_lzwstate_io(i14, i13, i2) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = HEAP32[i14 + 68 >> 2] | 0;
 i6 = HEAP32[i14 + 64 >> 2] | 0;
 i1 = HEAP32[i14 + 72 >> 2] | 0;
 if (!i2) {
  i12 = i1;
  i11 = i4;
  i10 = i6;
  i13 = 0;
  HEAP32[i14 + 64 >> 2] = i10;
  HEAP32[i14 + 68 >> 2] = i11;
  HEAP32[i14 + 72 >> 2] = i12;
  STACKTOP = i15;
  return i13 | 0;
 }
 L4 : do switch (HEAP32[i14 >> 2] | 0) {
 case 0:
  {
   if (((_FT_Stream_Seek(HEAP32[i14 + 164 >> 2] | 0, 2) | 0) == 0 ? (_FT_Stream_TryRead(HEAP32[i14 + 164 >> 2] | 0, i15 + 4 | 0, 1) | 0) == 1 : 0) ? (i3 = HEAPU8[i15 + 4 >> 0] | 0, HEAP32[i14 + 40 >> 2] = i3 & 31, HEAP32[i14 + 44 >> 2] = i3 & 128, HEAP32[i14 + 48 >> 2] = (1 << (i3 & 31)) + -256, (i3 & 31) >>> 0 <= 16) : 0) {
    HEAP32[i14 + 52 >> 2] = 9;
    HEAP32[i14 + 56 >> 2] = i3 >>> 7;
    HEAP32[i14 + 60 >> 2] = (i3 & 31) >>> 0 > 9 ? 256 : (1 << (i3 & 31)) + -255 | 0;
    i1 = _ft_lzwstate_get_code(i14) | 0;
    if (i1 >>> 0 <= 255) {
     if (i13) HEAP8[i13 >> 0] = i1;
     if (i2 >>> 0 < 2) {
      i12 = 0;
      i11 = i1;
      i10 = i1;
      i13 = 1;
      HEAP32[i14 + 64 >> 2] = i10;
      HEAP32[i14 + 68 >> 2] = i11;
      HEAP32[i14 + 72 >> 2] = i12;
      STACKTOP = i15;
      return i13 | 0;
     } else {
      HEAP32[i14 >> 2] = 1;
      i7 = 0;
      i5 = i1;
      i3 = i1;
      i12 = 1;
      i11 = 12;
      break L4;
     }
    } else {
     i1 = 0;
     i5 = i4;
     i3 = i6;
     i2 = 0;
     i11 = 64;
    }
   } else {
    i5 = i4;
    i3 = i6;
    i2 = 0;
    i11 = 64;
   }
   break;
  }
 case 1:
  {
   i7 = i1;
   i5 = i4;
   i3 = i6;
   i12 = 0;
   i11 = 12;
   break;
  }
 case 2:
  {
   i7 = i14 + 88 | 0;
   i8 = i14 + 92 | 0;
   i10 = i4;
   i3 = i6;
   i4 = 0;
   i11 = 49;
   break;
  }
 default:
  {
   i12 = i1;
   i11 = i4;
   i10 = i6;
   i13 = 0;
   HEAP32[i14 + 64 >> 2] = i10;
   HEAP32[i14 + 68 >> 2] = i11;
   HEAP32[i14 + 72 >> 2] = i12;
   STACKTOP = i15;
   return i13 | 0;
  }
 } while (0);
 L18 : while (1) if ((i11 | 0) == 12) {
  i1 = _ft_lzwstate_get_code(i14) | 0;
  if ((i1 | 0) < 0) {
   i1 = i7;
   i2 = i12;
   i11 = 64;
   continue;
  }
  i4 = i5;
  while (1) {
   if ((i1 | 0) != 256) {
    i11 = 17;
    break;
   }
   if (!(HEAP32[i14 + 44 >> 2] | 0)) {
    i1 = 256;
    i9 = i4;
    i11 = 18;
    break;
   }
   HEAP32[i14 + 56 >> 2] = 0;
   HEAP8[i14 + 32 >> 0] = 1;
   i1 = _ft_lzwstate_get_code(i14) | 0;
   if ((i1 | 0) < 0) {
    i1 = i7;
    i5 = 0;
    i3 = 0;
    i2 = i12;
    i11 = 64;
    continue L18;
   } else {
    i4 = 0;
    i3 = 0;
   }
  }
  if ((i11 | 0) == 17) {
   i11 = 0;
   if (i1 >>> 0 > 255) {
    i9 = i4;
    i11 = 18;
   } else {
    i9 = i1;
    i10 = i1;
   }
  }
  L29 : do if ((i11 | 0) == 18) {
   i11 = 0;
   i4 = i1 + -256 | 0;
   i5 = HEAP32[i14 + 56 >> 2] | 0;
   if (i4 >>> 0 >= i5 >>> 0) {
    if (i4 >>> 0 > i5 >>> 0) {
     i5 = i9;
     i2 = i12;
     i11 = 64;
     continue L18;
    }
    i4 = HEAP32[i14 + 92 >> 2] | 0;
    i5 = HEAP32[i14 + 96 >> 2] | 0;
    do if (i4 >>> 0 >= i5 >>> 0) {
     i7 = HEAP32[i14 + 168 >> 2] | 0;
     i4 = HEAP32[i14 + 88 >> 2] | 0;
     if ((i4 | 0) == (i14 + 100 | 0)) {
      HEAP32[i14 + 88 >> 2] = 0;
      i4 = 0;
      i6 = 0;
     } else i6 = i5;
     if ((i5 + 4 + (i5 >>> 1) | 0) >>> 0 > 65536) if ((i6 | 0) == 65536) i2 = i9; else {
      i5 = 65536;
      i11 = 25;
     } else {
      i5 = i5 + 4 + (i5 >>> 1) | 0;
      i11 = 25;
     }
     if ((i11 | 0) == 25) {
      i11 = 0;
      HEAP32[i14 + 88 >> 2] = _ft_mem_realloc(i7, 1, i6, i5, i4, i15) | 0;
      if (!(HEAP32[i15 >> 2] | 0)) {
       HEAP32[i14 + 96 >> 2] = i5;
       i4 = HEAP32[i14 + 92 >> 2] | 0;
       break;
      } else i2 = i9;
     }
     i5 = i2;
     i2 = i12;
     i11 = 64;
     continue L18;
    } while (0);
    HEAP32[i14 + 92 >> 2] = i4 + 1;
    HEAP8[(HEAP32[i14 + 88 >> 2] | 0) + i4 >> 0] = i9;
    if (i3 >>> 0 > 255) i4 = i3; else {
     i9 = i1;
     i10 = i3;
     break;
    }
   } else i4 = i1;
   i5 = HEAP32[i14 + 76 >> 2] | 0;
   i8 = i4;
   while (1) {
    if (!i5) {
     i5 = i9;
     i2 = i12;
     i11 = 64;
     continue L18;
    }
    i4 = HEAP32[i14 + 92 >> 2] | 0;
    i5 = HEAP32[i14 + 96 >> 2] | 0;
    if (i4 >>> 0 >= i5 >>> 0) {
     i7 = HEAP32[i14 + 168 >> 2] | 0;
     i4 = HEAP32[i14 + 88 >> 2] | 0;
     if ((i4 | 0) == (i14 + 100 | 0)) {
      HEAP32[i14 + 88 >> 2] = 0;
      i4 = 0;
      i6 = 0;
     } else i6 = i5;
     if ((i5 + 4 + (i5 >>> 1) | 0) >>> 0 > 65536) if ((i6 | 0) == 65536) {
      i2 = i9;
      break;
     } else i5 = 65536; else i5 = i5 + 4 + (i5 >>> 1) | 0;
     HEAP32[i14 + 88 >> 2] = _ft_mem_realloc(i7, 1, i6, i5, i4, i15) | 0;
     if (HEAP32[i15 >> 2] | 0) {
      i2 = i9;
      break;
     }
     HEAP32[i14 + 96 >> 2] = i5;
     i4 = HEAP32[i14 + 92 >> 2] | 0;
    }
    i10 = i8 + -256 | 0;
    i5 = HEAP8[(HEAP32[i14 + 80 >> 2] | 0) + i10 >> 0] | 0;
    HEAP32[i14 + 92 >> 2] = i4 + 1;
    HEAP8[(HEAP32[i14 + 88 >> 2] | 0) + i4 >> 0] = i5;
    i5 = HEAP32[i14 + 76 >> 2] | 0;
    i4 = HEAP16[i5 + (i10 << 1) >> 1] | 0;
    if ((i4 & 65535) <= 255) {
     i9 = i1;
     i10 = i4 & 65535;
     break L29;
    } else i8 = i4 & 65535;
   }
   i5 = i2;
   i2 = i12;
   i11 = 64;
   continue L18;
  } while (0);
  i1 = HEAP32[i14 + 92 >> 2] | 0;
  i4 = HEAP32[i14 + 96 >> 2] | 0;
  do if (i1 >>> 0 >= i4 >>> 0) {
   i6 = HEAP32[i14 + 168 >> 2] | 0;
   i1 = HEAP32[i14 + 88 >> 2] | 0;
   if ((i1 | 0) == (i14 + 100 | 0)) {
    HEAP32[i14 + 88 >> 2] = 0;
    i1 = 0;
    i5 = 0;
   } else i5 = i4;
   if ((i4 + 4 + (i4 >>> 1) | 0) >>> 0 > 65536) {
    if ((i5 | 0) != 65536) {
     i4 = 65536;
     i11 = 45;
    }
   } else {
    i4 = i4 + 4 + (i4 >>> 1) | 0;
    i11 = 45;
   }
   if ((i11 | 0) == 45) {
    HEAP32[i14 + 88 >> 2] = _ft_mem_realloc(i6, 1, i5, i4, i1, i15) | 0;
    if (!(HEAP32[i15 >> 2] | 0)) {
     HEAP32[i14 + 96 >> 2] = i4;
     i1 = HEAP32[i14 + 92 >> 2] | 0;
     break;
    }
   }
   i1 = i9;
   i5 = i10;
   i2 = i12;
   i11 = 64;
   continue L18;
  } while (0);
  HEAP32[i14 + 92 >> 2] = i1 + 1;
  HEAP8[(HEAP32[i14 + 88 >> 2] | 0) + i1 >> 0] = i10;
  HEAP32[i14 >> 2] = 2;
  i7 = i14 + 88 | 0;
  i8 = i14 + 92 | 0;
  i1 = i9;
  i4 = i12;
  i11 = 49;
  continue;
 } else if ((i11 | 0) == 49) {
  L75 : do if (!i13) {
   i5 = HEAP32[i8 >> 2] | 0;
   while (1) {
    if (!i5) break L75;
    i5 = i5 + -1 | 0;
    HEAP32[i8 >> 2] = i5;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i2 | 0)) {
     i4 = i10;
     i11 = 63;
     break L18;
    }
   }
  } else while (1) {
   i5 = HEAP32[i8 >> 2] | 0;
   if (!i5) break L75;
   HEAP32[i8 >> 2] = i5 + -1;
   HEAP8[i13 + i4 >> 0] = HEAP8[(HEAP32[i7 >> 2] | 0) + (i5 + -1) >> 0] | 0;
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == (i2 | 0)) {
    i4 = i10;
    i11 = 63;
    break L18;
   }
  } while (0);
  i5 = HEAP32[i14 + 56 >> 2] | 0;
  if (i5 >>> 0 < (HEAP32[i14 + 48 >> 2] | 0) >>> 0) {
   i7 = HEAP32[i14 + 84 >> 2] | 0;
   do if (i5 >>> 0 >= i7 >>> 0) {
    i6 = (i7 | 0) == 0 ? 512 : (i7 >>> 2) + i7 | 0;
    i5 = _ft_mem_realloc(HEAP32[i14 + 168 >> 2] | 0, 3, i7, i6, HEAP32[i14 + 76 >> 2] | 0, i15) | 0;
    HEAP32[i14 + 76 >> 2] = i5;
    if (!(HEAP32[i15 >> 2] | 0)) {
     HEAP32[i14 + 80 >> 2] = i5 + (i6 << 1);
     _memmove(i5 + (i6 << 1) | 0, i5 + (i7 << 1) | 0, i7 | 0) | 0;
     HEAP32[i14 + 84 >> 2] = i6;
     i6 = i14 + 76 | 0;
     i7 = i14 + 80 | 0;
     i5 = HEAP32[i14 + 56 >> 2] | 0;
     break;
    } else {
     i5 = i10;
     i2 = i4;
     i11 = 64;
     continue L18;
    }
   } else {
    i6 = i14 + 76 | 0;
    i7 = i14 + 80 | 0;
   } while (0);
   HEAP16[(HEAP32[i6 >> 2] | 0) + (i5 << 1) >> 1] = i3;
   HEAP8[(HEAP32[i7 >> 2] | 0) + i5 >> 0] = i10;
   HEAP32[i14 + 56 >> 2] = (HEAP32[i14 + 56 >> 2] | 0) + 1;
  }
  HEAP32[i14 >> 2] = 1;
  i7 = i1;
  i5 = i10;
  i3 = i1;
  i12 = i4;
  i11 = 12;
  continue;
 } else if ((i11 | 0) == 64) {
  HEAP32[i14 >> 2] = 3;
  i4 = i5;
  i11 = 63;
  break;
 }
 if ((i11 | 0) == 63) {
  HEAP32[i14 + 64 >> 2] = i3;
  HEAP32[i14 + 68 >> 2] = i4;
  HEAP32[i14 + 72 >> 2] = i1;
  STACKTOP = i15;
  return i2 | 0;
 }
 return 0;
}

function _strstr(i1, i14) {
 i1 = i1 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 i8 = HEAP8[i14 >> 0] | 0;
 do if (i8 << 24 >> 24) {
  i13 = _strchr(i1, i8 << 24 >> 24) | 0;
  if (i13) {
   i7 = HEAP8[i14 + 1 >> 0] | 0;
   if (i7 << 24 >> 24) {
    i5 = HEAP8[i13 + 1 >> 0] | 0;
    if (i5 << 24 >> 24) {
     i6 = HEAP8[i14 + 2 >> 0] | 0;
     if (!(i6 << 24 >> 24)) {
      i4 = i13 + 1 | 0;
      i1 = i5;
      i2 = i13;
      i3 = HEAPU8[i13 >> 0] << 8 | i5 & 255;
      while (1) {
       i3 = i3 & 65535;
       if ((i3 | 0) == (i7 & 255 | (i8 & 255) << 8 | 0)) break;
       i1 = i4 + 1 | 0;
       i2 = HEAP8[i1 >> 0] | 0;
       if (!(i2 << 24 >> 24)) {
        i2 = i4;
        i1 = 0;
        break;
       } else {
        i14 = i4;
        i4 = i1;
        i1 = i2;
        i3 = i2 & 255 | i3 << 8;
        i2 = i14;
       }
      }
      i1 = i1 << 24 >> 24 != 0 ? i2 : 0;
      break;
     }
     i3 = HEAP8[i13 + 2 >> 0] | 0;
     if (i3 << 24 >> 24) {
      i4 = HEAP8[i14 + 3 >> 0] | 0;
      if (!(i4 << 24 >> 24)) {
       i1 = (i3 & 255) << 8 | (i5 & 255) << 16 | HEAPU8[i13 >> 0] << 24;
       if ((i1 | 0) == ((i7 & 255) << 16 | (i8 & 255) << 24 | (i6 & 255) << 8 | 0)) {
        i2 = i13 + 2 | 0;
        i1 = i3;
       } else {
        i2 = i13 + 2 | 0;
        i3 = i1;
        do {
         i2 = i2 + 1 | 0;
         i1 = HEAP8[i2 >> 0] | 0;
         i3 = (i1 & 255 | i3) << 8;
        } while (!(i1 << 24 >> 24 == 0 ? 1 : (i3 | 0) == ((i7 & 255) << 16 | (i8 & 255) << 24 | (i6 & 255) << 8 | 0)));
       }
       i1 = i1 << 24 >> 24 != 0 ? i2 + -2 | 0 : 0;
       break;
      }
      i1 = HEAP8[i13 + 3 >> 0] | 0;
      if (i1 << 24 >> 24) {
       if (!(HEAP8[i14 + 4 >> 0] | 0)) {
        i3 = (i3 & 255) << 8 | (i5 & 255) << 16 | i1 & 255 | HEAPU8[i13 >> 0] << 24;
        if ((i3 | 0) == ((i7 & 255) << 16 | (i8 & 255) << 24 | (i6 & 255) << 8 | i4 & 255 | 0)) i2 = i13 + 3 | 0; else {
         i2 = i13 + 3 | 0;
         do {
          i2 = i2 + 1 | 0;
          i1 = HEAP8[i2 >> 0] | 0;
          i3 = i1 & 255 | i3 << 8;
         } while (!(i1 << 24 >> 24 == 0 ? 1 : (i3 | 0) == ((i7 & 255) << 16 | (i8 & 255) << 24 | (i6 & 255) << 8 | i4 & 255 | 0)));
        }
        i1 = i1 << 24 >> 24 != 0 ? i2 + -3 | 0 : 0;
        break;
       };
       HEAP32[i15 + 1024 >> 2] = 0;
       HEAP32[i15 + 1024 + 4 >> 2] = 0;
       HEAP32[i15 + 1024 + 8 >> 2] = 0;
       HEAP32[i15 + 1024 + 12 >> 2] = 0;
       HEAP32[i15 + 1024 + 16 >> 2] = 0;
       HEAP32[i15 + 1024 + 20 >> 2] = 0;
       HEAP32[i15 + 1024 + 24 >> 2] = 0;
       HEAP32[i15 + 1024 + 28 >> 2] = 0;
       i1 = i8;
       i2 = 0;
       while (1) {
        if (!(HEAP8[i13 + i2 >> 0] | 0)) {
         i1 = 0;
         break;
        }
        i12 = i15 + 1024 + (((i1 & 255) >>> 5 & 255) << 2) | 0;
        HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 1 << (i1 & 31);
        i12 = i2 + 1 | 0;
        HEAP32[i15 + ((i1 & 255) << 2) >> 2] = i12;
        i1 = HEAP8[i14 + i12 >> 0] | 0;
        if (!(i1 << 24 >> 24)) {
         i9 = 23;
         break;
        } else i2 = i12;
       }
       L32 : do if ((i9 | 0) == 23) {
        L34 : do if (i12 >>> 0 > 1) {
         i1 = 1;
         i9 = -1;
         i3 = 0;
         L35 : while (1) {
          i5 = 1;
          while (1) {
           L39 : while (1) {
            i4 = 1;
            while (1) {
             i6 = HEAP8[i14 + (i4 + i9) >> 0] | 0;
             i7 = HEAP8[i14 + i1 >> 0] | 0;
             if (i6 << 24 >> 24 != i7 << 24 >> 24) {
              i4 = i1;
              break L39;
             }
             if ((i4 | 0) == (i5 | 0)) break;
             i4 = i4 + 1 | 0;
             i1 = i4 + i3 | 0;
             if (i1 >>> 0 >= i12 >>> 0) {
              i3 = i9;
              break L35;
             }
            }
            i3 = i3 + i5 | 0;
            i1 = i3 + 1 | 0;
            if (i1 >>> 0 >= i12 >>> 0) {
             i3 = i9;
             break L35;
            }
           }
           i5 = i4 - i9 | 0;
           if ((i6 & 255) <= (i7 & 255)) break;
           if ((i4 + 1 | 0) >>> 0 < i12 >>> 0) {
            i1 = i4 + 1 | 0;
            i3 = i4;
           } else {
            i3 = i9;
            break L35;
           }
          }
          i1 = i3 + 2 | 0;
          if (i1 >>> 0 >= i12 >>> 0) {
           i5 = 1;
           break;
          } else {
           i9 = i3;
           i3 = i3 + 1 | 0;
          }
         }
         i1 = 1;
         i10 = -1;
         i4 = 0;
         while (1) {
          i6 = i1;
          i1 = 1;
          while (1) {
           L54 : while (1) {
            i7 = 1;
            while (1) {
             i8 = HEAP8[i14 + (i7 + i10) >> 0] | 0;
             i9 = HEAP8[i14 + i6 >> 0] | 0;
             if (i8 << 24 >> 24 != i9 << 24 >> 24) {
              i7 = i6;
              break L54;
             }
             if ((i7 | 0) == (i1 | 0)) break;
             i7 = i7 + 1 | 0;
             i6 = i7 + i4 | 0;
             if (i6 >>> 0 >= i12 >>> 0) {
              i4 = i10;
              break L34;
             }
            }
            i4 = i4 + i1 | 0;
            i6 = i4 + 1 | 0;
            if (i6 >>> 0 >= i12 >>> 0) {
             i4 = i10;
             break L34;
            }
           }
           i1 = i7 - i10 | 0;
           if ((i8 & 255) >= (i9 & 255)) break;
           if ((i7 + 1 | 0) >>> 0 < i12 >>> 0) {
            i6 = i7 + 1 | 0;
            i4 = i7;
           } else {
            i4 = i10;
            break L34;
           }
          }
          i1 = i4 + 2 | 0;
          if (i1 >>> 0 >= i12 >>> 0) {
           i1 = 1;
           break;
          } else {
           i10 = i4;
           i4 = i4 + 1 | 0;
          }
         }
        } else {
         i3 = -1;
         i4 = -1;
         i5 = 1;
         i1 = 1;
        } while (0);
        i10 = (i4 + 1 | 0) >>> 0 > (i3 + 1 | 0) >>> 0;
        i1 = i10 ? i1 : i5;
        i10 = i10 ? i4 : i3;
        if (!(_memcmp(i14, i14 + i1 | 0, i10 + 1 | 0) | 0)) {
         i11 = i12 - i1 | 0;
         i8 = i1;
        } else {
         i11 = 0;
         i8 = (i10 >>> 0 > (i12 - i10 + -1 | 0) >>> 0 ? i10 : i12 - i10 + -1 | 0) + 1 | 0;
        }
        i6 = (i11 | 0) != 0;
        i7 = i12 - i8 | 0;
        i1 = i13;
        i9 = 0;
        i5 = i13;
        L69 : while (1) {
         i3 = i1;
         do if ((i5 - i3 | 0) >>> 0 < i12 >>> 0) {
          i4 = _memchr(i5, 0, i12 | 63) | 0;
          if (i4) if ((i4 - i3 | 0) >>> 0 < i12 >>> 0) {
           i1 = 0;
           break L32;
          } else break; else {
           i4 = i5 + (i12 | 63) | 0;
           break;
          }
         } else i4 = i5; while (0);
         i3 = HEAP8[i1 + i2 >> 0] | 0;
         if (!(1 << (i3 & 31) & HEAP32[i15 + 1024 + (((i3 & 255) >>> 5 & 255) << 2) >> 2])) {
          i1 = i1 + i12 | 0;
          i9 = 0;
          i5 = i4;
          continue;
         }
         i3 = HEAP32[i15 + ((i3 & 255) << 2) >> 2] | 0;
         if ((i12 | 0) != (i3 | 0)) {
          i1 = i1 + (i6 & (i9 | 0) != 0 & (i12 - i3 | 0) >>> 0 < i8 >>> 0 ? i7 : i12 - i3 | 0) | 0;
          i9 = 0;
          i5 = i4;
          continue;
         }
         i3 = (i10 + 1 | 0) >>> 0 > i9 >>> 0 ? i10 + 1 | 0 : i9;
         i5 = HEAP8[i14 + i3 >> 0] | 0;
         L83 : do if (!(i5 << 24 >> 24)) i3 = i10 + 1 | 0; else {
          while (1) {
           if (i5 << 24 >> 24 != (HEAP8[i1 + i3 >> 0] | 0)) break;
           i3 = i3 + 1 | 0;
           i5 = HEAP8[i14 + i3 >> 0] | 0;
           if (!(i5 << 24 >> 24)) {
            i3 = i10 + 1 | 0;
            break L83;
           }
          }
          i1 = i1 + (i3 - i10) | 0;
          i9 = 0;
          i5 = i4;
          continue L69;
         } while (0);
         do {
          if (i3 >>> 0 <= i9 >>> 0) break L32;
          i3 = i3 + -1 | 0;
         } while ((HEAP8[i14 + i3 >> 0] | 0) == (HEAP8[i1 + i3 >> 0] | 0));
         i1 = i1 + i8 | 0;
         i9 = i11;
         i5 = i4;
        }
       } while (0);
      } else i1 = 0;
     } else i1 = 0;
    } else i1 = 0;
   } else i1 = i13;
  } else i1 = 0;
 } while (0);
 STACKTOP = i15;
 return i1 | 0;
}

function __ZN20ShaderConstantBuffer18BindToUniformBlockEPK8MaterialRKN6Shader19UniformBufferObjectE(i12, i11, i1) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 __ZN8Graphics20ApplyMaterialShadersEPK8Material(HEAP32[122] | 0, i11);
 HEAP32[i13 + 112 >> 2] = 0;
 _glGetProgramiv(HEAP32[i11 >> 2] | 0, 35718, i13 + 112 | 0);
 i10 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i10 | 0) != 0 ? (HEAP8[i10 >> 0] | 0) != 0 : 0) __ZNK6StringplEc(i13 + 96 | 0, i1 + 16 | 0, 46); else {
  HEAP32[i13 + 96 >> 2] = 0;
  HEAP32[i13 + 96 + 4 >> 2] = 0;
  HEAP32[i13 + 96 + 8 >> 2] = 0;
  HEAP32[i13 + 96 + 12 >> 2] = 0;
 }
 i10 = HEAP32[i1 >> 2] | 0;
 if ((i10 | 0) != 0 ? (HEAP8[i10 >> 0] | 0) != 0 : 0) __ZNK6StringplEc(i13 + 80 | 0, i1, 46); else {
  HEAP32[i13 + 80 >> 2] = 0;
  HEAP32[i13 + 80 + 4 >> 2] = 0;
  HEAP32[i13 + 80 + 8 >> 2] = 0;
  HEAP32[i13 + 80 + 12 >> 2] = 0;
 }
 if ((HEAP32[i13 + 112 >> 2] | 0) > 0) {
  i1 = 0;
  i10 = 0;
  do {
   i2 = i13 + 120 | 0;
   i3 = i2 + 128 | 0;
   do {
    HEAP8[i2 >> 0] = 0;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (i3 | 0));
   HEAP32[i13 + 76 >> 2] = 0;
   HEAP32[i13 + 72 >> 2] = 0;
   _glGetActiveUniform(HEAP32[i11 >> 2] | 0, i10 | 0, 127, 0, i13 + 76 | 0, i13 + 72 | 0, i13 + 120 | 0);
   L17 : do if (HEAP32[i12 + 24 >> 2] | 0) {
    i5 = 0;
    while (1) {
     i8 = (HEAP32[i12 + 12 >> 2] | 0) + (i5 * 156 | 0) | 0;
     HEAP32[i13 + 40 >> 2] = 0;
     HEAP32[i13 + 40 + 4 >> 2] = 0;
     HEAP32[i13 + 40 + 8 >> 2] = 0;
     HEAP32[i13 + 40 + 12 >> 2] = 0;
     __ZN6String3SetEPKc(i13 + 40 | 0, i8);
     __ZNK6StringplERKS_(i13 + 56 | 0, i13 + 96 | 0, i13 + 40 | 0);
     i8 = HEAP32[i13 + 56 >> 2] | 0;
     do if ((i8 | 0) != (i13 + 120 | 0)) {
      i2 = HEAP8[i13 + 120 >> 0] | 0;
      if (!(i2 << 24 >> 24)) {
       if (!i8) {
        i3 = 1;
        break;
       }
       if (!(HEAP8[i8 >> 0] | 0)) {
        i3 = i8;
        i2 = 1;
        i9 = 38;
        break;
       } else {
        i3 = 0;
        i9 = 17;
       }
      } else if (!i8) i9 = 22; else {
       i3 = i2;
       i9 = 17;
      }
      L26 : do if ((i9 | 0) == 17) {
       i9 = 0;
       i4 = HEAP8[i8 >> 0] | 0;
       i2 = i3 << 24 >> 24 == 0;
       if (i4 << 24 >> 24) {
        i7 = i13 + 120 | 0;
        i6 = i8;
        do {
         if (i2) {
          i9 = 22;
          break L26;
         }
         i7 = i7 + 1 | 0;
         if (i4 << 24 >> 24 != i3 << 24 >> 24) {
          i9 = 22;
          break L26;
         }
         i6 = i6 + 1 | 0;
         i3 = HEAP8[i7 >> 0] | 0;
         i4 = HEAP8[i6 >> 0] | 0;
         i2 = i3 << 24 >> 24 == 0;
        } while (i4 << 24 >> 24 != 0);
       }
       if (i2) i2 = 1; else i9 = 22;
      } while (0);
      if ((i9 | 0) == 22) {
       i9 = 0;
       i7 = (HEAP32[i12 + 12 >> 2] | 0) + (i5 * 156 | 0) | 0;
       HEAP32[i13 + 8 >> 2] = 0;
       HEAP32[i13 + 8 + 4 >> 2] = 0;
       HEAP32[i13 + 8 + 8 >> 2] = 0;
       HEAP32[i13 + 8 + 12 >> 2] = 0;
       __ZN6String3SetEPKc(i13 + 8 | 0, i7);
       __ZNK6StringplERKS_(i13 + 24 | 0, i13 + 80 | 0, i13 + 8 | 0);
       i7 = HEAP32[i13 + 24 >> 2] | 0;
       L36 : do if ((i7 | 0) == (i13 + 120 | 0)) {
        i2 = 1;
        i9 = 32;
       } else {
        i2 = HEAP8[i13 + 120 >> 0] | 0;
        if (!(i2 << 24 >> 24)) {
         if (!i7) {
          i2 = 1;
          break;
         }
         if (!(HEAP8[i7 >> 0] | 0)) {
          i2 = 1;
          i9 = 33;
          break;
         } else i2 = 0;
        } else if (!i7) {
         i2 = 0;
         break;
        }
        i3 = HEAP8[i7 >> 0] | 0;
        L43 : do if (!(i3 << 24 >> 24)) i3 = 0; else {
         i6 = i13 + 120 | 0;
         i4 = i7;
         while (1) {
          if (!(i2 << 24 >> 24)) {
           i2 = 0;
           break L43;
          }
          i6 = i6 + 1 | 0;
          if (i3 << 24 >> 24 != i2 << 24 >> 24) {
           i2 = 0;
           i9 = 32;
           break L36;
          }
          i4 = i4 + 1 | 0;
          i2 = HEAP8[i6 >> 0] | 0;
          i3 = HEAP8[i4 >> 0] | 0;
          if (!(i3 << 24 >> 24)) {
           i3 = 0;
           break;
          }
         }
        } while (0);
        i2 = i3 << 24 >> 24 == i2 << 24 >> 24;
        i9 = 32;
       } while (0);
       if ((i9 | 0) == 32) {
        i9 = 0;
        if (i7) i9 = 33;
       }
       if ((i9 | 0) == 33) {
        i9 = 0;
        __ZdaPv(i7);
       }
       HEAP32[i13 + 24 >> 2] = 0;
       i3 = HEAP32[i13 + 8 >> 2] | 0;
       if (i3) __ZdaPv(i3);
       HEAP32[i13 + 8 >> 2] = 0;
      }
      if (!i8) i3 = i2; else {
       i3 = i8;
       i9 = 38;
      }
     } else {
      i3 = i13 + 120 | 0;
      i2 = 1;
      i9 = 38;
     } while (0);
     if ((i9 | 0) == 38) {
      i9 = 0;
      __ZdaPv(i3);
      i3 = i2;
     }
     HEAP32[i13 + 56 >> 2] = 0;
     i2 = HEAP32[i13 + 40 >> 2] | 0;
     if (i2) __ZdaPv(i2);
     HEAP32[i13 + 40 >> 2] = 0;
     if (i3) break;
     i5 = i5 + 1 | 0;
     if (i5 >>> 0 >= (HEAP32[i12 + 24 >> 2] | 0) >>> 0) break L17;
    }
    i4 = HEAP32[i12 + 12 >> 2] | 0;
    HEAP32[i4 + (i5 * 156 | 0) + 152 >> 2] = HEAP32[i13 + 76 >> 2];
    i2 = HEAP32[i13 + 72 >> 2] | 0;
    L66 : do if ((i2 | 0) < 35671) {
     if ((i2 | 0) >= 35667) switch (i2 | 0) {
     case 35670:
      {
       i3 = 4;
       i2 = i4;
       break L66;
      }
     case 35667:
      {
       i3 = 8;
       i2 = i4;
       break L66;
      }
     case 35668:
      {
       i3 = 12;
       i2 = i4;
       break L66;
      }
     case 35669:
      {
       i3 = 16;
       i2 = i4;
       break L66;
      }
     default:
      {
       i9 = 56;
       break L66;
      }
     }
     if ((i2 | 0) >= 35665) switch (i2 | 0) {
     case 35665:
      {
       i3 = 12;
       i2 = i4;
       break L66;
      }
     case 35666:
      {
       i3 = 16;
       i2 = i4;
       break L66;
      }
     default:
      {
       i9 = 56;
       break L66;
      }
     }
     if ((i2 | 0) < 35664) switch (i2 | 0) {
     case 5126:
      {
       i3 = 4;
       i2 = i4;
       break L66;
      }
     default:
      {
       i9 = 56;
       break L66;
      }
     }
     switch (i2 | 0) {
     case 35664:
      break;
     default:
      {
       i9 = 56;
       break L66;
      }
     }
     i3 = 8;
     i2 = i4;
    } else switch (i2 | 0) {
    case 35671:
     {
      i3 = 8;
      i2 = i4;
      break L66;
     }
    case 35672:
     {
      i3 = 12;
      i2 = i4;
      break L66;
     }
    case 35673:
     {
      i3 = 16;
      i2 = i4;
      break L66;
     }
    case 35674:
     {
      i3 = 16;
      i2 = i4;
      break L66;
     }
    case 35675:
     {
      i3 = 36;
      i2 = i4;
      break L66;
     }
    case 35676:
     {
      i3 = 64;
      i2 = i4;
      break L66;
     }
    case 35680:
    case 35678:
     {
      i3 = 0;
      i2 = i4;
      break L66;
     }
    default:
     {
      i9 = 56;
      break L66;
     }
    } while (0);
    if ((i9 | 0) == 56) {
     i9 = 0;
     HEAP32[i13 >> 2] = i2;
     __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298996, i13);
     i3 = 0;
     i2 = HEAP32[i12 + 12 >> 2] | 0;
    }
    HEAP32[i2 + (i5 * 156 | 0) + 140 >> 2] = Math_imul(HEAP32[i13 + 76 >> 2] | 0, i3) | 0;
    i7 = __Z34GLConstantTypeToShaderConstantTypej(HEAP32[i13 + 72 >> 2] | 0) | 0;
    i8 = HEAP32[i12 + 12 >> 2] | 0;
    HEAP32[i8 + (i5 * 156 | 0) + 144 >> 2] = i7;
    HEAP32[i8 + (i5 * 156 | 0) + 136 >> 2] = i1;
    i1 = (HEAP32[i8 + (i5 * 156 | 0) + 140 >> 2] | 0) + i1 | 0;
   } while (0);
   i10 = i10 + 1 | 0;
  } while ((i10 | 0) < (HEAP32[i13 + 112 >> 2] | 0));
 }
 i1 = HEAP32[i13 + 80 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i13 + 80 >> 2] = 0;
 i1 = HEAP32[i13 + 96 >> 2] | 0;
 if (!i1) {
  STACKTOP = i13;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i13;
 return;
}

function __ZN11Application15GenerateSolidVBEN4math8GeomTypeE(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 880 | 0;
 __ZN17VertexDeclarationC2E13PrimitiveType18PrimitiveIndexType(i6 + 696 | 0, 4, 0);
 HEAP32[i6 + 616 >> 2] = 2;
 HEAP32[i6 + 616 + 4 >> 2] = 2;
 HEAP8[i6 + 616 + 8 >> 0] = 3;
 HEAP8[i6 + 616 + 12 >> 0] = 110;
 HEAP8[i6 + 616 + 13 >> 0] = 111;
 HEAP8[i6 + 616 + 14 >> 0] = 114;
 HEAP8[i6 + 616 + 15 >> 0] = 109;
 HEAP8[i6 + 616 + 16 >> 0] = 97;
 HEAP8[i6 + 616 + 17 >> 0] = 108;
 HEAP8[i6 + 616 + 18 >> 0] = 0;
 HEAP32[i6 + 616 + 48 >> 2] = 6;
 i1 = i6 + 816 | 0;
 i2 = i6 + 616 | 0;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN17VertexDeclarationC2E13VertexElement(i6 + 668 | 0, i6 + 816 | 0);
 __ZplRK17VertexDeclarationS1_(i6 + 760 | 0, i6 + 696 | 0, i6 + 668 | 0);
 HEAP32[i6 + 536 >> 2] = 1;
 HEAP32[i6 + 536 + 4 >> 2] = 2;
 HEAP8[i6 + 536 + 8 >> 0] = 3;
 HEAP8[i6 + 536 + 12 >> 0] = 112;
 HEAP8[i6 + 536 + 13 >> 0] = 111;
 HEAP8[i6 + 536 + 14 >> 0] = 115;
 HEAP8[i6 + 536 + 15 >> 0] = 0;
 HEAP32[i6 + 536 + 48 >> 2] = 3;
 i1 = i6 + 816 | 0;
 i2 = i6 + 536 | 0;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN17VertexDeclarationC2E13VertexElement(i6 + 588 | 0, i6 + 816 | 0);
 __ZplRK17VertexDeclarationS1_(i6 + 788 | 0, i6 + 760 | 0, i6 + 588 | 0);
 i1 = HEAP32[i6 + 588 >> 2] | 0;
 if (HEAP32[i6 + 588 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i6 + 588 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i6 + 588 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i6 + 588 >> 2] = 0;
 HEAP32[i6 + 588 + 4 >> 2] = 0;
 HEAP32[i6 + 588 + 8 >> 2] = 0;
 HEAP32[i6 + 588 + 12 >> 2] = 0;
 i1 = HEAP32[i6 + 760 >> 2] | 0;
 if (HEAP32[i6 + 760 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i6 + 760 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i6 + 760 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i6 + 760 >> 2] = 0;
 HEAP32[i6 + 760 + 4 >> 2] = 0;
 HEAP32[i6 + 760 + 8 >> 2] = 0;
 HEAP32[i6 + 760 + 12 >> 2] = 0;
 i1 = HEAP32[i6 + 668 >> 2] | 0;
 if (HEAP32[i6 + 668 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i6 + 668 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i6 + 668 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i6 + 668 >> 2] = 0;
 HEAP32[i6 + 668 + 4 >> 2] = 0;
 HEAP32[i6 + 668 + 8 >> 2] = 0;
 HEAP32[i6 + 668 + 12 >> 2] = 0;
 i1 = HEAP32[i6 + 696 >> 2] | 0;
 if (HEAP32[i6 + 696 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i6 + 696 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i6 + 696 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i6 + 696 >> 2] = 0;
 HEAP32[i6 + 696 + 4 >> 2] = 0;
 HEAP32[i6 + 696 + 8 >> 2] = 0;
 HEAP32[i6 + 696 + 12 >> 2] = 0;
 switch (i4 | 0) {
 case 12:
  {
   __ZN4math6float310FromScalarEf(i6 + 508 | 0, Math_fround(0.0));
   __ZN4math6SphereC2ERKNS_6float3Ef(i6 + 520 | 0, i6 + 508 | 0, Math_fround(100.0));
   __ZN12VertexBufferC2EbbRK17VertexDeclarationi13ResourceUsagebb(i6 + 376 | 0, 1, 0, i6 + 788 | 0, 1536, 1, 0, 0);
   __ZN12VertexBufferaSERKS_(i5 + 2e3 | 0, i6 + 376 | 0) | 0;
   __ZN12VertexBufferD2Ev(i6 + 376 | 0);
   __ZN12VertexBuffer14SetNumVerticesEib(i5 + 2e3 | 0, 0, 1);
   __ZNK4math6Sphere11TriangulateER12VertexBufferib(i6 + 520 | 0, i5 + 2e3 | 0, 1536, 1);
   i1 = i5 + 2e3 | 0;
   break;
  }
 case 1:
  {
   __ZN4math6float310FromScalarEf(i6 + 336 | 0, Math_fround(-100.0));
   __ZN4math6float310FromScalarEf(i6 + 324 | 0, Math_fround(100.0));
   __ZN4math4AABBC2ERKNS_6float3ES3_(i6 + 352 | 0, i6 + 336 | 0, i6 + 324 | 0);
   HEAP32[i5 + 2528 >> 2] = HEAP32[i6 + 352 >> 2];
   HEAP32[i5 + 2528 + 4 >> 2] = HEAP32[i6 + 352 + 4 >> 2];
   HEAP32[i5 + 2528 + 8 >> 2] = HEAP32[i6 + 352 + 8 >> 2];
   HEAP32[i5 + 2528 + 12 >> 2] = HEAP32[i6 + 352 + 12 >> 2];
   HEAP32[i5 + 2528 + 16 >> 2] = HEAP32[i6 + 352 + 16 >> 2];
   HEAP32[i5 + 2528 + 20 >> 2] = HEAP32[i6 + 352 + 20 >> 2];
   __ZN12VertexBufferC2EbbRK17VertexDeclarationi13ResourceUsagebb(i6 + 192 | 0, 1, 0, i6 + 788 | 0, 36, 1, 0, 0);
   __ZN12VertexBufferaSERKS_(i5 + 2e3 | 0, i6 + 192 | 0) | 0;
   __ZN12VertexBufferD2Ev(i6 + 192 | 0);
   __ZN12VertexBuffer14SetNumVerticesEib(i5 + 2e3 | 0, 0, 1);
   __ZNK4math4AABB11TriangulateER12VertexBufferiiib(i6 + 352 | 0, i5 + 2e3 | 0, 1, 1, 1, 1);
   i1 = i5 + 2e3 | 0;
   break;
  }
 case 7:
  {
   __ZN4math8float3x314RandomRotationERNS_3LCGE(i6 + 724 | 0, i5 + 1788 | 0);
   __ZNK4math8float3x33ColEi(i6 + 180 | 0, i6 + 724 | 0, 0);
   HEAP32[i6 + 816 + 24 >> 2] = HEAP32[i6 + 180 >> 2];
   HEAP32[i6 + 816 + 24 + 4 >> 2] = HEAP32[i6 + 180 + 4 >> 2];
   HEAP32[i6 + 816 + 24 + 8 >> 2] = HEAP32[i6 + 180 + 8 >> 2];
   __ZNK4math8float3x33ColEi(i6 + 168 | 0, i6 + 724 | 0, 1);
   HEAP32[i6 + 816 + 36 >> 2] = HEAP32[i6 + 168 >> 2];
   HEAP32[i6 + 816 + 36 + 4 >> 2] = HEAP32[i6 + 168 + 4 >> 2];
   HEAP32[i6 + 816 + 36 + 8 >> 2] = HEAP32[i6 + 168 + 8 >> 2];
   __ZNK4math8float3x33ColEi(i6 + 156 | 0, i6 + 724 | 0, 2);
   HEAP32[i6 + 816 + 48 >> 2] = HEAP32[i6 + 156 >> 2];
   HEAP32[i6 + 816 + 48 + 4 >> 2] = HEAP32[i6 + 156 + 4 >> 2];
   HEAP32[i6 + 816 + 48 + 8 >> 2] = HEAP32[i6 + 156 + 8 >> 2];
   __ZN4math6float310FromScalarEf(i6 + 144 | 0, Math_fround(0.0));
   HEAP32[i6 + 816 >> 2] = HEAP32[i6 + 144 >> 2];
   HEAP32[i6 + 816 + 4 >> 2] = HEAP32[i6 + 144 + 4 >> 2];
   HEAP32[i6 + 816 + 8 >> 2] = HEAP32[i6 + 144 + 8 >> 2];
   __ZN4math6float3C2Efff(i6 + 132 | 0, Math_fround(200.0), Math_fround(100.0), Math_fround(50.0));
   HEAP32[i6 + 816 + 12 >> 2] = HEAP32[i6 + 132 >> 2];
   HEAP32[i6 + 816 + 12 + 4 >> 2] = HEAP32[i6 + 132 + 4 >> 2];
   HEAP32[i6 + 816 + 12 + 8 >> 2] = HEAP32[i6 + 132 + 8 >> 2];
   __ZN12VertexBufferC2EbbRK17VertexDeclarationi13ResourceUsagebb(i6, 1, 0, i6 + 788 | 0, 36, 1, 0, 0);
   __ZN12VertexBufferaSERKS_(i5 + 2e3 | 0, i6) | 0;
   __ZN12VertexBufferD2Ev(i6);
   __ZN12VertexBuffer14SetNumVerticesEib(i5 + 2e3 | 0, 0, 1);
   __ZNK4math3OBB11TriangulateER12VertexBufferiiib(i6 + 816 | 0, i5 + 2e3 | 0, 1, 1, 1, 1);
   i1 = i5 + 2e3 | 0;
   break;
  }
 default:
  i1 = i5 + 2e3 | 0;
 }
 __Z19GenerateFlatNormalsR12VertexBufferb(i1, 1);
 __ZN12VertexBuffer17AllocateGpuMemoryE13ResourceUsagebb(i1, HEAP32[i5 + 2072 >> 2] | 0, (HEAP8[i5 + 2076 >> 0] | 0) != 0, (HEAP8[i5 + 2077 >> 0] | 0) != 0);
 i1 = HEAP32[i6 + 788 >> 2] | 0;
 if (HEAP32[i6 + 788 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i6 + 788 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i6 + 788 + 12 >> 2] | 0) >>> 0);
 }
 if (!i1) {
  STACKTOP = i6;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i6;
 return;
}

function ___intscan(i14, i3, i9, i1, i2) {
 i14 = i14 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 L1 : do if (i3 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i2 = 0;
  i1 = 0;
 } else {
  do {
   i4 = HEAP32[i14 + 4 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
    HEAP32[i14 + 4 >> 2] = i4 + 1;
    i4 = HEAPU8[i4 >> 0] | 0;
   } else i4 = ___shgetc(i14) | 0;
  } while ((_isspace(i4) | 0) != 0);
  L11 : do switch (i4 | 0) {
  case 43:
  case 45:
   {
    i5 = HEAP32[i14 + 4 >> 2] | 0;
    if (i5 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
     HEAP32[i14 + 4 >> 2] = i5 + 1;
     i5 = HEAPU8[i5 >> 0] | 0;
     i13 = ((i4 | 0) == 45) << 31 >> 31;
     break L11;
    } else {
     i5 = ___shgetc(i14) | 0;
     i13 = ((i4 | 0) == 45) << 31 >> 31;
     break L11;
    }
   }
  default:
   {
    i5 = i4;
    i13 = 0;
   }
  } while (0);
  do if ((i3 & -17 | 0) == 0 & (i5 | 0) == 48) {
   i4 = HEAP32[i14 + 4 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
    HEAP32[i14 + 4 >> 2] = i4 + 1;
    i5 = HEAPU8[i4 >> 0] | 0;
   } else i5 = ___shgetc(i14) | 0;
   if ((i5 | 32 | 0) != 120) if (!i3) {
    i3 = 8;
    i10 = 46;
    break;
   } else {
    i10 = 32;
    break;
   }
   i3 = HEAP32[i14 + 4 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
    HEAP32[i14 + 4 >> 2] = i3 + 1;
    i4 = HEAPU8[i3 >> 0] | 0;
   } else i4 = ___shgetc(i14) | 0;
   if ((HEAPU8[389850 + (i4 + 1) >> 0] | 0) > 15) {
    i1 = (HEAP32[i14 + 100 >> 2] | 0) == 0;
    if (!i1) HEAP32[i14 + 4 >> 2] = (HEAP32[i14 + 4 >> 2] | 0) + -1;
    if (!i9) {
     ___shlim(i14, 0);
     i2 = 0;
     i1 = 0;
     break L1;
    }
    if (i1) {
     i2 = 0;
     i1 = 0;
     break L1;
    }
    HEAP32[i14 + 4 >> 2] = (HEAP32[i14 + 4 >> 2] | 0) + -1;
    i2 = 0;
    i1 = 0;
    break L1;
   } else {
    i3 = 16;
    i5 = i4;
    i10 = 46;
   }
  } else {
   i3 = (i3 | 0) == 0 ? 10 : i3;
   if ((HEAPU8[389850 + (i5 + 1) >> 0] | 0) >>> 0 < i3 >>> 0) i10 = 32; else {
    if (HEAP32[i14 + 100 >> 2] | 0) HEAP32[i14 + 4 >> 2] = (HEAP32[i14 + 4 >> 2] | 0) + -1;
    ___shlim(i14, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    i2 = 0;
    i1 = 0;
    break L1;
   }
  } while (0);
  if ((i10 | 0) == 32) if ((i3 | 0) == 10) {
   i3 = i5 + -48 | 0;
   if (i3 >>> 0 < 10) {
    i4 = 0;
    do {
     i4 = (i4 * 10 | 0) + i3 | 0;
     i3 = HEAP32[i14 + 4 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
      HEAP32[i14 + 4 >> 2] = i3 + 1;
      i5 = HEAPU8[i3 >> 0] | 0;
     } else i5 = ___shgetc(i14) | 0;
     i3 = i5 + -48 | 0;
    } while (i3 >>> 0 < 10 & i4 >>> 0 < 429496729);
    i6 = 0;
   } else {
    i4 = 0;
    i6 = 0;
   }
   i3 = i5 + -48 | 0;
   if (i3 >>> 0 < 10) {
    do {
     i7 = ___muldi3(i4 | 0, i6 | 0, 10, 0) | 0;
     i8 = tempRet0;
     i9 = ((i3 | 0) < 0) << 31 >> 31;
     if (i8 >>> 0 > ~i9 >>> 0 | (i8 | 0) == (~i9 | 0) & i7 >>> 0 > ~i3 >>> 0) break;
     i4 = _i64Add(i7 | 0, i8 | 0, i3 | 0, i9 | 0) | 0;
     i6 = tempRet0;
     i3 = HEAP32[i14 + 4 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
      HEAP32[i14 + 4 >> 2] = i3 + 1;
      i5 = HEAPU8[i3 >> 0] | 0;
     } else i5 = ___shgetc(i14) | 0;
     i3 = i5 + -48 | 0;
    } while (i3 >>> 0 < 10 & (i6 >>> 0 < 429496729 | (i6 | 0) == 429496729 & i4 >>> 0 < 2576980378));
    if (i3 >>> 0 > 9) {
     i5 = i6;
     i3 = i13;
    } else {
     i3 = 10;
     i10 = 72;
    }
   } else {
    i5 = i6;
    i3 = i13;
   }
  } else i10 = 46;
  L63 : do if ((i10 | 0) == 46) {
   if (!(i3 + -1 & i3)) {
    i10 = HEAP8[390107 + ((i3 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i4 = HEAP8[389850 + (i5 + 1) >> 0] | 0;
    if ((i4 & 255) >>> 0 < i3 >>> 0) {
     i6 = i4 & 255;
     i4 = 0;
     do {
      i4 = i6 | i4 << i10;
      i5 = HEAP32[i14 + 4 >> 2] | 0;
      if (i5 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
       HEAP32[i14 + 4 >> 2] = i5 + 1;
       i5 = HEAPU8[i5 >> 0] | 0;
      } else i5 = ___shgetc(i14) | 0;
      i7 = HEAP8[389850 + (i5 + 1) >> 0] | 0;
      i6 = i7 & 255;
     } while (i4 >>> 0 < 134217728 & i6 >>> 0 < i3 >>> 0);
     i6 = 0;
    } else {
     i7 = i4;
     i6 = 0;
     i4 = 0;
    }
    i9 = _bitshift64Lshr(-1, -1, i10 | 0) | 0;
    i8 = tempRet0;
    if ((i7 & 255) >>> 0 >= i3 >>> 0 | (i6 >>> 0 > i8 >>> 0 | (i6 | 0) == (i8 | 0) & i4 >>> 0 > i9 >>> 0)) {
     i10 = 72;
     break;
    } else i5 = i6;
    while (1) {
     i4 = _bitshift64Shl(i4 | 0, i5 | 0, i10 | 0) | 0;
     i6 = tempRet0;
     i4 = i7 & 255 | i4;
     i5 = HEAP32[i14 + 4 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
      HEAP32[i14 + 4 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i14) | 0;
     i7 = HEAP8[389850 + (i5 + 1) >> 0] | 0;
     if ((i7 & 255) >>> 0 >= i3 >>> 0 | (i6 >>> 0 > i8 >>> 0 | (i6 | 0) == (i8 | 0) & i4 >>> 0 > i9 >>> 0)) {
      i10 = 72;
      break L63;
     } else i5 = i6;
    }
   }
   i4 = HEAP8[389850 + (i5 + 1) >> 0] | 0;
   if ((i4 & 255) >>> 0 < i3 >>> 0) {
    i6 = i4 & 255;
    i4 = 0;
    while (1) {
     i7 = i6 + (Math_imul(i4, i3) | 0) | 0;
     i4 = HEAP32[i14 + 4 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
      HEAP32[i14 + 4 >> 2] = i4 + 1;
      i5 = HEAPU8[i4 >> 0] | 0;
     } else i5 = ___shgetc(i14) | 0;
     i4 = HEAP8[389850 + (i5 + 1) >> 0] | 0;
     i6 = i4 & 255;
     if (!(i7 >>> 0 < 119304647 & i6 >>> 0 < i3 >>> 0)) break; else i4 = i7;
    }
    i6 = 0;
   } else {
    i7 = 0;
    i6 = 0;
   }
   if ((i4 & 255) >>> 0 < i3 >>> 0) {
    i11 = ___udivdi3(-1, -1, i3 | 0, 0) | 0;
    i12 = tempRet0;
    while (1) {
     if (i6 >>> 0 > i12 >>> 0 | (i6 | 0) == (i12 | 0) & i7 >>> 0 > i11 >>> 0) {
      i4 = i7;
      i10 = 72;
      break L63;
     }
     i8 = ___muldi3(i7 | 0, i6 | 0, i3 | 0, 0) | 0;
     i10 = tempRet0;
     i9 = i4 & 255;
     if (i10 >>> 0 > 4294967295 | (i10 | 0) == -1 & i8 >>> 0 > ~i9 >>> 0) {
      i4 = i7;
      i10 = 72;
      break L63;
     }
     i7 = _i64Add(i9 | 0, 0, i8 | 0, i10 | 0) | 0;
     i6 = tempRet0;
     i4 = HEAP32[i14 + 4 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
      HEAP32[i14 + 4 >> 2] = i4 + 1;
      i5 = HEAPU8[i4 >> 0] | 0;
     } else i5 = ___shgetc(i14) | 0;
     i4 = HEAP8[389850 + (i5 + 1) >> 0] | 0;
     if ((i4 & 255) >>> 0 >= i3 >>> 0) {
      i4 = i7;
      i10 = 72;
      break;
     }
    }
   } else {
    i4 = i7;
    i10 = 72;
   }
  } while (0);
  if ((i10 | 0) == 72) if ((HEAPU8[389850 + (i5 + 1) >> 0] | 0) >>> 0 < i3 >>> 0) {
   do {
    i4 = HEAP32[i14 + 4 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i14 + 100 >> 2] | 0) >>> 0) {
     HEAP32[i14 + 4 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i14) | 0;
   } while ((HEAPU8[389850 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   i5 = i2;
   i4 = i1;
   i3 = (i1 & 1 | 0) == 0 & 0 == 0 ? i13 : 0;
  } else {
   i5 = i6;
   i3 = i13;
  }
  if (HEAP32[i14 + 100 >> 2] | 0) HEAP32[i14 + 4 >> 2] = (HEAP32[i14 + 4 >> 2] | 0) + -1;
  if (!(i5 >>> 0 < i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 < i1 >>> 0)) {
   if (!((i1 & 1 | 0) != 0 | 0 != 0 | (i3 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    i1 = _i64Add(i1 | 0, i2 | 0, -1, -1) | 0;
    i2 = tempRet0;
    break;
   }
   if (i5 >>> 0 > i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 > i1 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    break;
   }
  }
  i1 = ((i3 | 0) < 0) << 31 >> 31;
  i1 = _i64Subtract(i4 ^ i3 | 0, i5 ^ i1 | 0, i3 | 0, i1 | 0) | 0;
  i2 = tempRet0;
 } while (0);
 tempRet0 = i2;
 return i1 | 0;
}

function __ZN5Input15OnNewInputEventER10InputEvent(i14, i13) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, i15 = 0, f16 = f0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 d12 = +__ZN4math5Clock4TickEv();
 switch (HEAP32[i13 >> 2] | 0) {
 case 2:
  {
   if ((HEAP32[i13 + 4 >> 2] | 0) > 0) {
    i6 = 0;
    do {
     i5 = i13 + 8 + (i6 * 20 | 0) + 8 | 0;
     i2 = HEAP32[i5 >> 2] | 0;
     i1 = HEAP32[i14 + 644 >> 2] | 0;
     i4 = HEAP32[i14 + 640 >> 2] | 0;
     L6 : do if ((i1 | 0) != (i4 | 0)) {
      i3 = 0;
      while (1) {
       if ((HEAP32[i4 + (i3 * 24 | 0) + 16 >> 2] | 0) == (i2 | 0)) break;
       i3 = i3 + 1 | 0;
       if (i3 >>> 0 >= ((i1 - i4 | 0) / 24 | 0) >>> 0) break L6;
      }
      i1 = i1 - (i4 + ((((i3 * 24 | 0) / 24 | 0) + 1 | 0) * 24 | 0)) | 0;
      _memmove(i4 + (i3 * 24 | 0) | 0, i4 + ((((i3 * 24 | 0) / 24 | 0) + 1 | 0) * 24 | 0) | 0, i1 | 0) | 0;
      i2 = HEAP32[i14 + 644 >> 2] | 0;
      if ((i2 | 0) == (i4 + ((((i1 | 0) / 24 | 0) + i3 | 0) * 24 | 0) | 0)) i1 = i4 + ((((i1 | 0) / 24 | 0) + i3 | 0) * 24 | 0) | 0; else {
       i1 = i2 + (~(((i2 + -24 - (i4 + ((((i1 | 0) / 24 | 0) + i3 | 0) * 24 | 0)) | 0) >>> 0) / 24 | 0) * 24 | 0) | 0;
       HEAP32[i14 + 644 >> 2] = i1;
      }
     } while (0);
     do if ((HEAP32[i13 + 8 + (i6 * 20 | 0) + 16 >> 2] | 0) == 1) {
      HEAP32[i15 >> 2] = HEAP32[i13 + 8 + (i6 * 20 | 0) + 12 >> 2];
      HEAP32[i15 + 16 >> 2] = HEAP32[i5 >> 2];
      HEAP32[i15 + 4 >> 2] = HEAP32[i14 + 720 >> 2];
      HEAPF64[i15 + 8 >> 3] = d12;
      if ((i1 | 0) == (HEAP32[i14 + 648 >> 2] | 0)) {
       __ZNSt3__16vectorIN5Input13KeyPressEventENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i14 + 640 | 0, i15);
       break;
      } else {
       HEAP32[i1 >> 2] = HEAP32[i15 >> 2];
       HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
       HEAP32[i1 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
       HEAP32[i1 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
       HEAP32[i1 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
       HEAP32[i1 + 20 >> 2] = HEAP32[i15 + 20 >> 2];
       HEAP32[i14 + 644 >> 2] = (HEAP32[i14 + 644 >> 2] | 0) + 24;
       break;
      }
     } while (0);
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) < (HEAP32[i13 + 4 >> 2] | 0));
   }
   break;
  }
 case 3:
  {
   L21 : do if ((HEAP32[i13 + 4 >> 2] | 0) > 0) {
    i7 = 0;
    while (1) {
     i3 = i13 + 8 + (i7 * 20 | 0) | 0;
     i4 = i13 + 8 + (i7 * 20 | 0) + 4 | 0;
     i6 = HEAP32[i4 >> 2] | 0;
     HEAP32[i14 + 376 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i14 + 376 + 4 >> 2] = i6;
     i6 = i13 + 8 + (i7 * 20 | 0) + 12 | 0;
     i1 = HEAP32[i6 >> 2] | 0;
     switch (i1 | 0) {
     case 6:
     case 0:
      break;
     default:
      {
       i5 = (i1 + -1 | 0) > 4 ? 4 : (i1 + -1 | 0) < 0 ? 0 : i1 + -1 | 0;
       i2 = HEAP32[i4 >> 2] | 0;
       HEAP32[i14 + 400 + (i5 * 48 | 0) + 32 >> 2] = HEAP32[i3 >> 2];
       HEAP32[i14 + 400 + (i5 * 48 | 0) + 32 + 4 >> 2] = i2;
       i2 = i13 + 8 + (i7 * 20 | 0) + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if ((i1 | 0) == 1) {
        i11 = HEAP32[i3 >> 2] | 0;
        i1 = HEAP32[i4 >> 2] | 0;
        HEAP32[i14 + 400 + (i5 * 48 | 0) + 24 >> 2] = i11;
        HEAP32[i14 + 400 + (i5 * 48 | 0) + 24 + 4 >> 2] = i1;
        HEAP32[i14 + 400 + (i5 * 48 | 0) + 40 >> 2] = i11;
        HEAP32[i14 + 400 + (i5 * 48 | 0) + 40 + 4 >> 2] = i1;
        HEAP32[i14 + 400 + (i5 * 48 | 0) + 12 >> 2] = HEAP32[i14 + 720 >> 2];
        i1 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i14 + 400 + (i5 * 48 | 0) + 4 >> 2] = i1;
       HEAP32[i14 + 400 + (i5 * 48 | 0) + 8 >> 2] = HEAP32[i6 >> 2];
       HEAPF64[i14 + 400 + (i5 * 48 | 0) + 16 >> 3] = d12;
       HEAP32[i14 + 400 + (i5 * 48 | 0) >> 2] = 3;
      }
     }
     i7 = i7 + 1 | 0;
     if ((i7 | 0) >= (HEAP32[i13 + 4 >> 2] | 0)) break L21;
    }
   } while (0);
   f16 = Math_fround(HEAPF32[i13 + 328 >> 2]);
   HEAPF32[i14 + 384 >> 2] = Math_fround(f16 + Math_fround(HEAPF32[i14 + 384 >> 2]));
   f16 = Math_fround(HEAPF32[i13 + 332 >> 2]);
   HEAPF32[i14 + 388 >> 2] = Math_fround(f16 + Math_fround(HEAPF32[i14 + 388 >> 2]));
   f16 = Math_fround(HEAPF32[i13 + 336 >> 2]);
   HEAPF32[i14 + 392 >> 2] = Math_fround(f16 + Math_fround(HEAPF32[i14 + 392 >> 2]));
   break;
  }
 case 1:
  {
   if ((HEAP32[i13 + 4 >> 2] | 0) <= 0) {
    STACKTOP = i15;
    return;
   }
   i7 = i15 + 24 + 24 | 0;
   i10 = 0;
   i6 = 1;
   while (1) {
    i8 = i13 + 8 + (i10 * 20 | 0) | 0;
    i9 = i13 + 8 + (i10 * 20 | 0) + 12 | 0;
    i5 = HEAP32[i9 >> 2] | 0;
    i1 = HEAP32[i14 + 656 >> 2] | 0;
    i3 = HEAP32[i14 + 652 >> 2] | 0;
    L38 : do if ((i1 - i3 | 0) > 0) {
     i2 = 0;
     while (1) {
      if ((HEAP32[i3 + (i2 * 48 | 0) + 8 >> 2] | 0) == (i5 | 0)) break;
      i2 = i2 + 1 | 0;
      if ((i2 | 0) >= ((i1 - i3 | 0) / 48 | 0 | 0)) {
       i11 = 31;
       break L38;
      }
     }
     if (!((i2 | 0) == -1 | (i3 + (i2 * 48 | 0) | 0) == 0)) {
      i4 = i13 + 8 + (i10 * 20 | 0) + 16 | 0;
      i3 = i3 + (i2 * 48 | 0) | 0;
     } else i11 = 31;
    } else i11 = 31; while (0);
    if ((i11 | 0) == 31) {
     i11 = 0;
     i4 = i13 + 8 + (i10 * 20 | 0) + 16 | 0;
     i2 = HEAP32[i4 >> 2] | 0;
     if ((i2 | 0) != 1) {
      i1 = HEAP32[492 + ((i2 >>> 0 > 3 ? 0 : i2) << 2) >> 2] | 0;
      HEAP32[i15 + 72 >> 2] = i5;
      HEAP32[i15 + 72 + 4 >> 2] = i1;
      __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303909, i15 + 72 | 0);
      i1 = HEAP32[i14 + 656 >> 2] | 0;
     }
     HEAP32[i15 + 24 >> 2] = 0;
     HEAP32[i15 + 24 + 4 >> 2] = 0;
     HEAP32[i15 + 24 + 8 >> 2] = -1;
     HEAP32[i15 + 24 + 12 >> 2] = -1;
     HEAPF64[i15 + 24 + 16 >> 3] = 0.0;
     HEAP32[i7 >> 2] = -1;
     HEAP32[i7 + 4 >> 2] = -1;
     HEAP32[i7 + 8 >> 2] = -1;
     HEAP32[i7 + 12 >> 2] = -1;
     HEAP32[i7 + 16 >> 2] = -1;
     HEAP32[i7 + 20 >> 2] = -1;
     if ((i1 | 0) == (HEAP32[i14 + 660 >> 2] | 0)) {
      __ZNSt3__16vectorIN5Input12PointerEventENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i14 + 652 | 0, i15 + 24 | 0);
      i1 = HEAP32[i14 + 656 >> 2] | 0;
     } else {
      i2 = i15 + 24 | 0;
      i3 = i1 + 48 | 0;
      do {
       HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
       i1 = i1 + 4 | 0;
       i2 = i2 + 4 | 0;
      } while ((i1 | 0) < (i3 | 0));
      i1 = (HEAP32[i14 + 656 >> 2] | 0) + 48 | 0;
      HEAP32[i14 + 656 >> 2] = i1;
     }
     i3 = i1 + -48 | 0;
    }
    i1 = HEAP32[i4 >> 2] | 0;
    if ((i1 | 0) == 1) {
     HEAP32[i3 + 12 >> 2] = HEAP32[i14 + 720 >> 2];
     i1 = HEAP32[i8 >> 2] | 0;
     i5 = HEAP32[i13 + 8 + (i10 * 20 | 0) + 4 >> 2] | 0;
     i2 = i3 + 24 | 0;
     HEAP32[i2 >> 2] = i1;
     HEAP32[i2 + 4 >> 2] = i5;
     i2 = i3 + 40 | 0;
     HEAP32[i2 >> 2] = i1;
     HEAP32[i2 + 4 >> 2] = i5;
     i2 = HEAP32[i4 >> 2] | 0;
    } else i2 = i1;
    if (((i2 | 0) == 2 ? (HEAP32[i3 + 32 >> 2] | 0) == (HEAP32[i3 + 40 >> 2] | 0) : 0) ? (HEAP32[i3 + 36 >> 2] | 0) == (HEAP32[i3 + 44 >> 2] | 0) : 0) i1 = i6; else i1 = 0;
    HEAP32[i3 + 4 >> 2] = i2;
    i5 = HEAP32[i13 + 8 + (i10 * 20 | 0) + 4 >> 2] | 0;
    i6 = i3 + 32 | 0;
    HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i6 + 4 >> 2] = i5;
    HEAPF64[i3 + 16 >> 3] = d12;
    HEAP32[i3 >> 2] = 1;
    HEAP32[i3 + 8 >> 2] = HEAP32[i9 >> 2];
    i10 = i10 + 1 | 0;
    if ((i10 | 0) >= (HEAP32[i13 + 4 >> 2] | 0)) break; else i6 = i1;
   }
   if (i1) {
    STACKTOP = i15;
    return;
   }
   break;
  }
 default:
  {}
 }
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 if (!i1) {
  STACKTOP = i15;
  return;
 }
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 31](i1, HEAP32[i14 >> 2] | 0, i13);
 STACKTOP = i15;
 return;
}

function __Z21TextureFormatToString13TextureFormat(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 L1 : do if ((i1 | 0) >= 66) {
  if ((i1 | 0) < 99) do switch (i1 | 0) {
  case 66:
   {
    i1 = 294193;
    break L1;
   }
  case 67:
   {
    i1 = 294160;
    break L1;
   }
  case 68:
   {
    i1 = 294130;
    break L1;
   }
  case 69:
   {
    i1 = 294100;
    break L1;
   }
  case 70:
   {
    i1 = 294073;
    break L1;
   }
  case 71:
   {
    i1 = 294049;
    break L1;
   }
  case 72:
   {
    i1 = 294020;
    break L1;
   }
  case 73:
   {
    i1 = 293993;
    break L1;
   }
  case 74:
   {
    i1 = 293969;
    break L1;
   }
  case 75:
   {
    i1 = 293940;
    break L1;
   }
  case 76:
   {
    i1 = 293913;
    break L1;
   }
  case 77:
   {
    i1 = 293889;
    break L1;
   }
  case 78:
   {
    i1 = 293860;
    break L1;
   }
  case 79:
   {
    i1 = 293833;
    break L1;
   }
  case 80:
   {
    i1 = 293809;
    break L1;
   }
  case 81:
   {
    i1 = 293785;
    break L1;
   }
  case 82:
   {
    i1 = 293758;
    break L1;
   }
  case 83:
   {
    i1 = 293734;
    break L1;
   }
  case 84:
   {
    i1 = 293710;
    break L1;
   }
  case 85:
   {
    i1 = 293683;
    break L1;
   }
  case 86:
   {
    i1 = 293654;
    break L1;
   }
  case 87:
   {
    i1 = 293625;
    break L1;
   }
  case 88:
   {
    i1 = 293596;
    break L1;
   }
  case 89:
   {
    i1 = 293555;
    break L1;
   }
  case 90:
   {
    i1 = 293523;
    break L1;
   }
  case 91:
   {
    i1 = 293489;
    break L1;
   }
  case 92:
   {
    i1 = 293457;
    break L1;
   }
  case 93:
   {
    i1 = 293423;
    break L1;
   }
  case 94:
   {
    i1 = 293395;
    break L1;
   }
  case 95:
   {
    i1 = 293371;
    break L1;
   }
  case 96:
   {
    i1 = 293347;
    break L1;
   }
  case 97:
   {
    i1 = 293320;
    break L1;
   }
  case 98:
   {
    i1 = 293296;
    break L1;
   }
  default:
   {
    i2 = 134;
    break L1;
   }
  } while (0);
  if ((i1 | 0) < 1048576) do switch (i1 | 0) {
  case 99:
   {
    i1 = 293267;
    break L1;
   }
  case 100:
   {
    i1 = 293248;
    break L1;
   }
  case 101:
   {
    i1 = 293229;
    break L1;
   }
  case 102:
   {
    i1 = 293210;
    break L1;
   }
  case 103:
   {
    i1 = 293191;
    break L1;
   }
  case 104:
   {
    i1 = 293172;
    break L1;
   }
  case 105:
   {
    i1 = 293153;
    break L1;
   }
  case 106:
   {
    i1 = 293128;
    break L1;
   }
  case 107:
   {
    i1 = 293109;
    break L1;
   }
  case 108:
   {
    i1 = 293090;
    break L1;
   }
  case 109:
   {
    i1 = 293071;
    break L1;
   }
  case 110:
   {
    i1 = 293052;
    break L1;
   }
  case 111:
   {
    i1 = 293033;
    break L1;
   }
  case 112:
   {
    i1 = 293014;
    break L1;
   }
  case 113:
   {
    i1 = 292997;
    break L1;
   }
  case 114:
   {
    i1 = 292978;
    break L1;
   }
  case 115:
   {
    i1 = 292863;
    break L1;
   }
  default:
   {
    i2 = 134;
    break L1;
   }
  } while (0);
  if ((i1 | 0) < 1048584) switch (i1 | 0) {
  case 1048576:
   {
    i1 = 292950;
    break L1;
   }
  case 1048577:
   {
    i1 = 292921;
    break L1;
   }
  case 1048578:
   {
    i1 = 292892;
    break L1;
   }
  case 1048579:
   {
    i1 = 292838;
    break L1;
   }
  case 1048580:
   {
    i1 = 292809;
    break L1;
   }
  case 1048581:
   {
    i1 = 292782;
    break L1;
   }
  case 1048582:
   {
    i1 = 292758;
    break L1;
   }
  case 1048583:
   {
    i1 = 292729;
    break L1;
   }
  default:
   {
    i2 = 134;
    break L1;
   }
  }
  if ((i1 | 0) >= 4194334) switch (i1 | 0) {
  case 4194334:
   {
    i1 = 292595;
    break L1;
   }
  case 4194337:
   {
    i1 = 292566;
    break L1;
   }
  case 4194339:
   {
    i1 = 292534;
    break L1;
   }
  case 4194354:
   {
    i1 = 292511;
    break L1;
   }
  case 4194356:
   {
    i1 = 292486;
    break L1;
   }
  default:
   {
    i2 = 134;
    break L1;
   }
  }
  if ((i1 | 0) >= 4194331) switch (i1 | 0) {
  case 4194331:
   {
    i1 = 292653;
    break L1;
   }
  case 4194333:
   {
    i1 = 292624;
    break L1;
   }
  default:
   {
    i2 = 134;
    break L1;
   }
  }
  if ((i1 | 0) < 4194324) {
   switch (i1 | 0) {
   case 1048584:
    break;
   default:
    {
     i2 = 134;
     break L1;
    }
   }
   i1 = 292707;
   break;
  } else {
   switch (i1 | 0) {
   case 4194324:
    break;
   default:
    {
     i2 = 134;
     break L1;
    }
   }
   i1 = 292680;
   break;
  }
 } else do switch (i1 | 0) {
 case 0:
  {
   i1 = 296080;
   break L1;
  }
 case 1:
  {
   i1 = 296044;
   break L1;
  }
 case 2:
  {
   i1 = 296011;
   break L1;
  }
 case 3:
  {
   i1 = 295979;
   break L1;
  }
 case 4:
  {
   i1 = 295947;
   break L1;
  }
 case 5:
  {
   i1 = 295914;
   break L1;
  }
 case 6:
  {
   i1 = 295884;
   break L1;
  }
 case 7:
  {
   i1 = 295855;
   break L1;
  }
 case 8:
  {
   i1 = 295826;
   break L1;
  }
 case 9:
  {
   i1 = 295790;
   break L1;
  }
 case 10:
  {
   i1 = 295757;
   break L1;
  }
 case 11:
  {
   i1 = 295724;
   break L1;
  }
 case 12:
  {
   i1 = 295692;
   break L1;
  }
 case 13:
  {
   i1 = 295659;
   break L1;
  }
 case 14:
  {
   i1 = 295627;
   break L1;
  }
 case 15:
  {
   i1 = 295597;
   break L1;
  }
 case 16:
  {
   i1 = 295570;
   break L1;
  }
 case 17:
  {
   i1 = 295544;
   break L1;
  }
 case 18:
  {
   i1 = 295518;
   break L1;
  }
 case 19:
  {
   i1 = 295486;
   break L1;
  }
 case 20:
  {
   i1 = 295451;
   break L1;
  }
 case 21:
  {
   i1 = 295412;
   break L1;
  }
 case 22:
  {
   i1 = 295374;
   break L1;
  }
 case 23:
  {
   i1 = 295339;
   break L1;
  }
 case 24:
  {
   i1 = 295307;
   break L1;
  }
 case 25:
  {
   i1 = 295276;
   break L1;
  }
 case 26:
  {
   i1 = 295246;
   break L1;
  }
 case 27:
  {
   i1 = 295214;
   break L1;
  }
 case 28:
  {
   i1 = 295185;
   break L1;
  }
 case 29:
  {
   i1 = 295151;
   break L1;
  }
 case 30:
  {
   i1 = 295123;
   break L1;
  }
 case 31:
  {
   i1 = 295094;
   break L1;
  }
 case 32:
  {
   i1 = 295066;
   break L1;
  }
 case 33:
  {
   i1 = 295036;
   break L1;
  }
 case 34:
  {
   i1 = 295009;
   break L1;
  }
 case 35:
  {
   i1 = 294982;
   break L1;
  }
 case 36:
  {
   i1 = 294956;
   break L1;
  }
 case 37:
  {
   i1 = 294929;
   break L1;
  }
 case 38:
  {
   i1 = 294903;
   break L1;
  }
 case 39:
  {
   i1 = 294876;
   break L1;
  }
 case 40:
  {
   i1 = 294852;
   break L1;
  }
 case 41:
  {
   i1 = 294828;
   break L1;
  }
 case 42:
  {
   i1 = 294805;
   break L1;
  }
 case 43:
  {
   i1 = 294782;
   break L1;
  }
 case 44:
  {
   i1 = 294753;
   break L1;
  }
 case 45:
  {
   i1 = 294721;
   break L1;
  }
 case 46:
  {
   i1 = 294685;
   break L1;
  }
 case 47:
  {
   i1 = 294650;
   break L1;
  }
 case 48:
  {
   i1 = 294622;
   break L1;
  }
 case 49:
  {
   i1 = 294597;
   break L1;
  }
 case 50:
  {
   i1 = 294573;
   break L1;
  }
 case 51:
  {
   i1 = 294548;
   break L1;
  }
 case 52:
  {
   i1 = 294524;
   break L1;
  }
 case 53:
  {
   i1 = 294497;
   break L1;
  }
 case 54:
  {
   i1 = 294473;
   break L1;
  }
 case 55:
  {
   i1 = 294449;
   break L1;
  }
 case 56:
  {
   i1 = 294425;
   break L1;
  }
 case 57:
  {
   i1 = 294402;
   break L1;
  }
 case 58:
  {
   i1 = 294378;
   break L1;
  }
 case 59:
  {
   i1 = 294355;
   break L1;
  }
 case 60:
  {
   i1 = 294329;
   break L1;
  }
 case 61:
  {
   i1 = 294306;
   break L1;
  }
 case 62:
  {
   i1 = 294284;
   break L1;
  }
 case 63:
  {
   i1 = 294261;
   break L1;
  }
 case 64:
  {
   i1 = 294239;
   break L1;
  }
 case 65:
  {
   i1 = 294216;
   break L1;
  }
 default:
  {
   i2 = 134;
   break L1;
  }
 } while (0); while (0);
 if ((i2 | 0) == 134) i1 = 292452;
 return i1 | 0;
}

function __ZN11Application6UpdateERK4Time(i12, i1) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, f4 = f0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0, i11 = 0, d13 = 0.0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 d2 = +__ZN4math5Clock4TickEv();
 d13 = (d2 - +HEAPF64[i12 + 2608 >> 3]) * 1.0e3;
 f10 = Math_fround(d13 / +__ZN4math5Clock11TicksPerSecEv());
 HEAPF64[i12 + 2608 >> 3] = d2;
 HEAP32[i12 + 2572 >> 2] = (HEAP32[i12 + 2572 >> 2] | 0) + 1;
 d13 = d2 - +HEAPF64[i12 + 2584 >> 3];
 if (d13 >= +__ZN4math5Clock11TicksPerSecEv() * 2.0) {
  d13 = d2 - +HEAPF64[i12 + 2584 >> 3];
  f4 = Math_fround(d13 / +Math_fround(+__ZN4math5Clock11TicksPerSecEv()));
  HEAPF32[i12 + 2576 >> 2] = Math_fround(Math_fround(HEAP32[i12 + 2572 >> 2] | 0) / f4);
  HEAP32[i12 + 2572 >> 2] = 0;
  HEAPF64[i12 + 2584 >> 3] = d2;
 }
 if (!(HEAP8[i12 + 2552 >> 0] | 0)) {
  if (__ZN5Input12IsKeyPressedE7KeyCode(i12 + 448 | 0, 38) | 0) {
   i7 = HEAP32[i12 + 1816 >> 2] | 0;
   i8 = i7 >>> 0 > 99 ? 100 : 10;
   L8 : do if (i7) {
    i6 = i7;
    i1 = i7;
    do {
     if ((i6 | 0) <= 0) break L8;
     i6 = i6 + -1 | 0;
     i1 = i1 + -1 | 0;
     HEAP32[i12 + 1816 >> 2] = i1;
     HEAP32[i12 + 1832 >> 2] = (HEAP32[i12 + 1832 >> 2] | 0) + -1;
     HEAP32[i12 + 1840 >> 2] = (HEAP32[i12 + 1840 >> 2] | 0) + -12;
     HEAP32[i12 + 1852 >> 2] = (HEAP32[i12 + 1852 >> 2] | 0) + -12;
     i3 = HEAP32[i12 + 2280 >> 2] | 0;
     if (i3 - (HEAP32[i12 + 2276 >> 2] | 0) >> 2 >>> 0 > i1 >>> 0) {
      i5 = HEAP32[i3 + -4 >> 2] | 0;
      if (i5) {
       __ZN20ShaderConstantBufferD2Ev(i5);
       __ZdlPv(i5);
       i1 = HEAP32[i12 + 1816 >> 2] | 0;
       i3 = HEAP32[i12 + 2280 >> 2] | 0;
      }
      HEAP32[i12 + 2280 >> 2] = i3 + -4;
     }
    } while ((i1 | 0) != 0);
   } while (0);
   __ZN4math3LCG4SeedEmmmm(i11 + 128 | 0, i8 + i7 | 0, 69621, 0, 2147483647);
   HEAP32[i12 + 1788 >> 2] = HEAP32[i11 + 128 >> 2];
   HEAP32[i12 + 1788 + 4 >> 2] = HEAP32[i11 + 128 + 4 >> 2];
   HEAP32[i12 + 1788 + 8 >> 2] = HEAP32[i11 + 128 + 8 >> 2];
   HEAP32[i12 + 1788 + 12 >> 2] = HEAP32[i11 + 128 + 12 >> 2];
   __ZN11Application10AddObjectsEi(i12, i8 + i7 | 0);
   HEAP32[i11 >> 2] = HEAP32[i12 + 1816 >> 2];
   __ZN4math22PrintToConsoleVariadicEjPKcz(1, 289209, i11);
  }
  if (__ZN5Input12IsKeyPressedE7KeyCode(i12 + 448 | 0, 40) | 0 ? (i9 = HEAP32[i12 + 1816 >> 2] | 0, i9 >>> 0 > 10) : 0) {
   i7 = i9 >>> 0 < 101 ? 10 : 100;
   i6 = i9;
   i1 = i9;
   do {
    if ((i6 | 0) <= 0) break;
    i6 = i6 + -1 | 0;
    i1 = i1 + -1 | 0;
    HEAP32[i12 + 1816 >> 2] = i1;
    HEAP32[i12 + 1832 >> 2] = (HEAP32[i12 + 1832 >> 2] | 0) + -1;
    HEAP32[i12 + 1840 >> 2] = (HEAP32[i12 + 1840 >> 2] | 0) + -12;
    HEAP32[i12 + 1852 >> 2] = (HEAP32[i12 + 1852 >> 2] | 0) + -12;
    i3 = HEAP32[i12 + 2280 >> 2] | 0;
    if (i3 - (HEAP32[i12 + 2276 >> 2] | 0) >> 2 >>> 0 > i1 >>> 0) {
     i5 = HEAP32[i3 + -4 >> 2] | 0;
     if (i5) {
      __ZN20ShaderConstantBufferD2Ev(i5);
      __ZdlPv(i5);
      i1 = HEAP32[i12 + 1816 >> 2] | 0;
      i3 = HEAP32[i12 + 2280 >> 2] | 0;
     }
     HEAP32[i12 + 2280 >> 2] = i3 + -4;
    }
   } while ((i1 | 0) != 0);
   __ZN4math3LCG4SeedEmmmm(i11 + 112 | 0, i9 - i7 | 0, 69621, 0, 2147483647);
   HEAP32[i12 + 1788 >> 2] = HEAP32[i11 + 112 >> 2];
   HEAP32[i12 + 1788 + 4 >> 2] = HEAP32[i11 + 112 + 4 >> 2];
   HEAP32[i12 + 1788 + 8 >> 2] = HEAP32[i11 + 112 + 8 >> 2];
   HEAP32[i12 + 1788 + 12 >> 2] = HEAP32[i11 + 112 + 12 >> 2];
   __ZN11Application10AddObjectsEi(i12, i9 - i7 | 0);
   HEAP32[i11 + 8 >> 2] = HEAP32[i12 + 1816 >> 2];
   __ZN4math22PrintToConsoleVariadicEjPKcz(1, 289209, i11 + 8 | 0);
  }
  if (__ZN5Input12IsKeyPressedE7KeyCode(i12 + 448 | 0, 70) | 0) HEAP8[i12 + 2592 >> 0] = HEAP8[i12 + 2592 >> 0] ^ 1;
  if (__ZN5Input12IsKeyPressedE7KeyCode(i12 + 448 | 0, 86) | 0) {
   i8 = (__ZNK8Graphics20PresentationIntervalEv(i12 + 4 | 0) | 0) + -1 | 0;
   __ZN8Graphics23SetPresentationIntervalEi(i12 + 4 | 0, (i8 | 0) > 0 ? i8 : 0);
  }
  if (__ZN5Input12IsKeyPressedE7KeyCode(i12 + 448 | 0, 66) | 0) __ZN8Graphics23SetPresentationIntervalEi(i12 + 4 | 0, (__ZNK8Graphics20PresentationIntervalEv(i12 + 4 | 0) | 0) + 1 | 0);
 }
 __ZN12VertexBuffer14SetNumVerticesEib(i12 + 1328 | 0, 0, 1);
 HEAP32[i11 + 96 >> 2] = 0;
 HEAP32[i11 + 96 + 4 >> 2] = 0;
 HEAP32[i11 + 96 + 8 >> 2] = 0;
 HEAP32[i11 + 96 + 12 >> 2] = 0;
 i1 = __Znaj(512) | 0;
 HEAP32[i11 + 96 + 12 >> 2] = 512;
 HEAP8[i1 >> 0] = 0;
 HEAP32[i11 + 96 >> 2] = i1;
 f4 = Math_fround(Math_fround(Math_fround(19.0) / Math_fround(__ZNK8Graphics12ScreenHeightEv(i12 + 4 | 0) | 0)) * Math_fround(2.0));
 i1 = HEAP32[i12 + 1816 >> 2] | 0;
 do if (i1) {
  i3 = HEAP32[i12 + 2616 >> 2] | 0;
  d2 = +Math_fround(Math_fround(Math_fround(i3 | 0) * Math_fround(100.0)) / Math_fround(i1 >>> 0));
  if (!(HEAP8[i12 + 2552 >> 0] | 0)) {
   HEAP32[i11 + 32 >> 2] = i1;
   HEAP32[i11 + 32 + 4 >> 2] = i3;
   HEAPF64[i11 + 32 + 8 >> 3] = d2;
   __ZN6String7SPrintfEPKcz(i11 + 96 | 0, 289268, i11 + 32 | 0) | 0;
   break;
  } else {
   HEAP32[i11 + 16 >> 2] = i1;
   HEAP32[i11 + 16 + 4 >> 2] = i3;
   HEAPF64[i11 + 16 + 8 >> 3] = d2;
   __ZN6String7SPrintfEPKcz(i11 + 96 | 0, 289236, i11 + 16 | 0) | 0;
   break;
  }
 } else __ZN6String3SetEPKc(i11 + 96 | 0, 289225); while (0);
 __ZN11Application8DrawTextEPKcffmf(i12, HEAP32[i11 + 96 >> 2] | 0, Math_fround(-.949999988), Math_fround(Math_fround(1.0) - f4), -26215, Math_fround(8.0));
 HEAPF64[i11 + 48 >> 3] = +f10;
 __ZN6String7SPrintfEPKcz(i11 + 96 | 0, 289331, i11 + 48 | 0) | 0;
 __ZN11Application8DrawTextEPKcffmf(i12, HEAP32[i11 + 96 >> 2] | 0, Math_fround(-.949999988), Math_fround(Math_fround(1.0) - Math_fround(f4 * Math_fround(2.0))), -1, Math_fround(8.0));
 HEAPF64[i11 + 56 >> 3] = +Math_fround(HEAPF32[i12 + 2600 >> 2]);
 __ZN6String7SPrintfEPKcz(i11 + 96 | 0, 289354, i11 + 56 | 0) | 0;
 __ZN11Application8DrawTextEPKcffmf(i12, HEAP32[i11 + 96 >> 2] | 0, Math_fround(-.949999988), Math_fround(Math_fround(1.0) - Math_fround(f4 * Math_fround(3.0))), -1, Math_fround(8.0));
 HEAPF64[i11 + 64 >> 3] = +Math_fround(HEAPF32[i12 + 2604 >> 2]);
 __ZN6String7SPrintfEPKcz(i11 + 96 | 0, 289378, i11 + 64 | 0) | 0;
 __ZN11Application8DrawTextEPKcffmf(i12, HEAP32[i11 + 96 >> 2] | 0, Math_fround(-.949999988), Math_fround(Math_fround(1.0) - Math_fround(f4 * Math_fround(4.0))), -1, Math_fround(8.0));
 HEAPF64[i11 + 72 >> 3] = +Math_fround(HEAPF32[i12 + 2576 >> 2]);
 __ZN6String7SPrintfEPKcz(i11 + 96 | 0, 289403, i11 + 72 | 0) | 0;
 i1 = HEAP32[i11 + 96 >> 2] | 0;
 __ZN11Application8DrawTextEPKcffmf(i12, i1, Math_fround(-.949999988), Math_fround(Math_fround(1.0) - Math_fround(f4 * Math_fround(5.0))), -6684775, Math_fround(8.0));
 if (!(HEAP8[i12 + 2552 >> 0] | 0)) {
  HEAP32[i11 + 80 >> 2] = (HEAP8[i12 + 2592 >> 0] | 0) != 0 ? 289455 : 289463;
  __ZN6String7SPrintfEPKcz(i11 + 96 | 0, 289414, i11 + 80 | 0) | 0;
  __ZN11Application8DrawTextEPKcffmf(i12, HEAP32[i11 + 96 >> 2] | 0, Math_fround(-.949999988), Math_fround(Math_fround(1.0) - Math_fround(f4 * Math_fround(8.0))), -6710785, Math_fround(8.0));
  HEAP32[i11 + 88 >> 2] = __ZNK8Graphics20PresentationIntervalEv(i12 + 4 | 0) | 0;
  __ZN6String7SPrintfEPKcz(i11 + 96 | 0, 289472, i11 + 88 | 0) | 0;
  i1 = HEAP32[i11 + 96 >> 2] | 0;
  __ZN11Application8DrawTextEPKcffmf(i12, i1, Math_fround(-.949999988), Math_fround(Math_fround(1.0) - Math_fround(f4 * Math_fround(9.0))), -6710785, Math_fround(8.0));
 }
 __ZN12VertexBuffer11UpdateToGpuEv(i12 + 1328 | 0);
 if (!i1) {
  STACKTOP = i11;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i11;
 return;
}

function _tt_cmap14_variant_chars(i6, i9, i5) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = HEAP32[i6 + 16 >> 2] | 0;
 i1 = (HEAPU8[i10 + 7 >> 0] | 0) << 16 | (HEAPU8[i10 + 6 >> 0] | 0) << 24 | (HEAPU8[i10 + 8 >> 0] | 0) << 8 | (HEAPU8[i10 + 9 >> 0] | 0);
 if (!i1) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 } else i2 = 0;
 L3 : while (1) {
  while (1) {
   i4 = (i2 + i1 | 0) >>> 1;
   i3 = (HEAPU8[i10 + ((i4 * 11 | 0) + 11) >> 0] | 0) << 8 | (HEAPU8[i10 + ((i4 * 11 | 0) + 10) >> 0] | 0) << 16 | (HEAPU8[i10 + ((i4 * 11 | 0) + 12) >> 0] | 0);
   if (i3 >>> 0 > i5 >>> 0) break;
   if (i3 >>> 0 >= i5 >>> 0) {
    i1 = i4 * 11 | 0;
    i2 = 7;
    break L3;
   }
   i2 = i4 + 1 | 0;
   if (i2 >>> 0 >= i1 >>> 0) {
    i1 = 0;
    i2 = 62;
    break L3;
   }
  }
  if (i2 >>> 0 < i4 >>> 0) i1 = i4; else {
   i1 = 0;
   i2 = 62;
   break;
  }
 }
 if ((i2 | 0) == 7) {
  if (!(i10 + (i1 + 13) | 0)) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i4 = (HEAPU8[i10 + (i1 + 14) >> 0] | 0) << 16 | (HEAPU8[i10 + (i1 + 13) >> 0] | 0) << 24 | (HEAPU8[i10 + (i1 + 15) >> 0] | 0) << 8 | (HEAPU8[i10 + (i1 + 16) >> 0] | 0);
  i5 = (HEAPU8[i10 + (i1 + 18) >> 0] | 0) << 16 | (HEAPU8[i10 + (i1 + 17) >> 0] | 0) << 24 | (HEAPU8[i10 + (i1 + 19) >> 0] | 0) << 8 | (HEAPU8[i10 + (i1 + 20) >> 0] | 0);
  if (!(i5 | i4)) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  if (!i4) {
   i1 = (HEAPU8[i10 + (i5 + 1) >> 0] | 0) << 16 | (HEAPU8[i10 + i5 >> 0] | 0) << 24 | (HEAPU8[i10 + (i5 + 2) >> 0] | 0) << 8 | (HEAPU8[i10 + (i5 + 3) >> 0] | 0);
   i2 = HEAP32[i6 + 28 >> 2] | 0;
   HEAP32[i14 >> 2] = 0;
   do if (i2 >>> 0 < (i1 + 1 | 0) >>> 0) {
    HEAP32[i6 + 36 >> 2] = i9;
    i2 = _ft_mem_realloc(i9, 4, i2, i1 + 1 | 0, HEAP32[i6 + 32 >> 2] | 0, i14) | 0;
    HEAP32[i6 + 32 >> 2] = i2;
    if (!(HEAP32[i14 >> 2] | 0)) {
     HEAP32[i6 + 28 >> 2] = i1 + 1;
     i4 = i2;
     break;
    }
    i13 = 0;
    STACKTOP = i14;
    return i13 | 0;
   } else i4 = HEAP32[i6 + 32 >> 2] | 0; while (0);
   if (!i1) i1 = 0; else {
    i2 = i10 + (i5 + 4) | 0;
    i3 = 0;
    while (1) {
     HEAP32[i4 + (i3 << 2) >> 2] = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i1 | 0)) break; else i2 = i2 + 5 | 0;
    }
   }
   HEAP32[i4 + (i1 << 2) >> 2] = 0;
   i13 = i4;
   STACKTOP = i14;
   return i13 | 0;
  }
  if (!i5) {
   i13 = _tt_cmap14_get_def_chars(i6, i10 + i4 | 0, i9) | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i12 = (HEAPU8[i10 + (i5 + 1) >> 0] | 0) << 16 | (HEAPU8[i10 + i5 >> 0] | 0) << 24 | (HEAPU8[i10 + (i5 + 2) >> 0] | 0) << 8 | (HEAPU8[i10 + (i5 + 3) >> 0] | 0);
  i13 = (HEAPU8[i10 + (i4 + 1) >> 0] | 0) << 16 | (HEAPU8[i10 + i4 >> 0] | 0) << 24 | (HEAPU8[i10 + (i4 + 2) >> 0] | 0) << 8 | (HEAPU8[i10 + (i4 + 3) >> 0] | 0);
  if (!i13) i1 = 0; else {
   i2 = i10 + (i4 + 7) | 0;
   i3 = i13;
   i1 = 0;
   while (1) {
    i1 = i1 + 1 + (HEAPU8[i2 >> 0] | 0) | 0;
    i3 = i3 + -1 | 0;
    if (!i3) break; else i2 = i2 + 4 | 0;
   }
  }
  if (!i12) {
   i13 = _tt_cmap14_get_def_chars(i6, i10 + i4 | 0, i9) | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  if (!i1) {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   HEAP32[i14 >> 2] = 0;
   do if (i1 >>> 0 < (i12 + 1 | 0) >>> 0) {
    HEAP32[i6 + 36 >> 2] = i9;
    i1 = _ft_mem_realloc(i9, 4, i1, i12 + 1 | 0, HEAP32[i6 + 32 >> 2] | 0, i14) | 0;
    HEAP32[i6 + 32 >> 2] = i1;
    if (!(HEAP32[i14 >> 2] | 0)) {
     HEAP32[i6 + 28 >> 2] = i12 + 1;
     i3 = i1;
     break;
    }
    i13 = 0;
    STACKTOP = i14;
    return i13 | 0;
   } else i3 = HEAP32[i6 + 32 >> 2] | 0; while (0);
   i1 = i10 + (i5 + 4) | 0;
   i2 = 0;
   while (1) {
    HEAP32[i3 + (i2 << 2) >> 2] = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) << 16 | (HEAPU8[i1 + 2 >> 0] | 0);
    i2 = i2 + 1 | 0;
    if ((i2 | 0) == (i12 | 0)) break; else i1 = i1 + 5 | 0;
   }
   HEAP32[i3 + (i12 << 2) >> 2] = 0;
   i13 = i3;
   STACKTOP = i14;
   return i13 | 0;
  }
  i2 = i12 + 1 + i1 | 0;
  i1 = HEAP32[i6 + 28 >> 2] | 0;
  HEAP32[i14 >> 2] = 0;
  do if (i1 >>> 0 < i2 >>> 0) {
   HEAP32[i6 + 36 >> 2] = i9;
   i1 = _ft_mem_realloc(i9, 4, i1, i2, HEAP32[i6 + 32 >> 2] | 0, i14) | 0;
   HEAP32[i6 + 32 >> 2] = i1;
   if (!(HEAP32[i14 >> 2] | 0)) {
    HEAP32[i6 + 28 >> 2] = i2;
    i11 = i1;
    break;
   }
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  } else i11 = HEAP32[i6 + 32 >> 2] | 0; while (0);
  i3 = HEAPU8[i10 + (i4 + 7) >> 0] | 0;
  i7 = 1;
  i6 = i10 + (i4 + 8) | 0;
  i4 = (HEAPU8[i10 + (i4 + 5) >> 0] | 0) << 8 | (HEAPU8[i10 + (i4 + 4) >> 0] | 0) << 16 | (HEAPU8[i10 + (i4 + 6) >> 0] | 0);
  i1 = 0;
  i8 = 1;
  i2 = (HEAPU8[i10 + (i5 + 5) >> 0] | 0) << 8 | (HEAPU8[i10 + (i5 + 4) >> 0] | 0) << 16 | (HEAPU8[i10 + (i5 + 6) >> 0] | 0);
  i5 = i10 + (i5 + 9) | 0;
  L73 : while (1) {
   if (i2 >>> 0 > (i3 + i4 | 0) >>> 0) {
    i9 = i3;
    while (1) {
     i3 = 0;
     while (1) {
      i10 = i1 + 1 | 0;
      HEAP32[i11 + (i1 << 2) >> 2] = i3 + i4;
      i3 = i3 + 1 | 0;
      if (i3 >>> 0 > i9 >>> 0) break; else i1 = i10;
     }
     i7 = i7 + 1 | 0;
     if (i7 >>> 0 > i13 >>> 0) {
      i1 = i10;
      break L73;
     }
     i4 = (HEAPU8[i6 + 1 >> 0] | 0) << 8 | (HEAPU8[i6 >> 0] | 0) << 16 | (HEAPU8[i6 + 2 >> 0] | 0);
     i3 = i6 + 4 | 0;
     i1 = HEAPU8[i6 + 3 >> 0] | 0;
     if (i2 >>> 0 > (i1 + i4 | 0) >>> 0) {
      i9 = i1;
      i6 = i3;
      i1 = i10;
     } else {
      i9 = i1;
      i6 = i3;
      i1 = i10;
      break;
     }
    }
   } else i9 = i3;
   if (i2 >>> 0 < i4 >>> 0) {
    HEAP32[i11 + (i1 << 2) >> 2] = i2;
    i1 = i1 + 1 | 0;
   }
   i8 = i8 + 1 | 0;
   if (i8 >>> 0 > i12 >>> 0) break;
   i3 = i9;
   i2 = (HEAPU8[i5 + 1 >> 0] | 0) << 8 | (HEAPU8[i5 >> 0] | 0) << 16 | (HEAPU8[i5 + 2 >> 0] | 0);
   i5 = i5 + 5 | 0;
  }
  if (i8 >>> 0 > i12 >>> 0) {
   if (i7 >>> 0 <= i13 >>> 0) {
    i2 = 0;
    while (1) {
     i3 = i1 + 1 | 0;
     HEAP32[i11 + (i1 << 2) >> 2] = i2 + i4;
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 > i9 >>> 0) break; else i1 = i3;
    }
    if (i7 >>> 0 < i13 >>> 0) {
     i1 = i3;
     while (1) {
      i2 = (HEAPU8[i6 + 1 >> 0] | 0) << 8 | (HEAPU8[i6 >> 0] | 0) << 16 | (HEAPU8[i6 + 2 >> 0] | 0);
      i3 = HEAPU8[i6 + 3 >> 0] | 0;
      i4 = i1;
      i5 = 0;
      while (1) {
       HEAP32[i11 + (i4 << 2) >> 2] = i5 + i2;
       if ((i5 | 0) == (i3 | 0)) break; else {
        i4 = i4 + 1 | 0;
        i5 = i5 + 1 | 0;
       }
      }
      i1 = i1 + 1 + i3 | 0;
      i7 = i7 + 1 | 0;
      if ((i7 | 0) == (i13 | 0)) break; else i6 = i6 + 4 | 0;
     }
    } else i1 = i3;
   }
  } else {
   HEAP32[i11 + (i1 << 2) >> 2] = i2;
   i2 = i1 + 1 | 0;
   if (i8 >>> 0 < i12 >>> 0) {
    i4 = i1 + i12 + 1 | 0;
    i3 = i8;
    i1 = i5;
    while (1) {
     HEAP32[i11 + (i2 << 2) >> 2] = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) << 16 | (HEAPU8[i1 + 2 >> 0] | 0);
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i12 | 0)) break; else {
      i2 = i2 + 1 | 0;
      i1 = i1 + 5 | 0;
     }
    }
    i1 = i4 - i8 | 0;
   } else i1 = i2;
  }
  HEAP32[i11 + (i1 << 2) >> 2] = 0;
  i13 = i11;
  STACKTOP = i14;
  return i13 | 0;
 } else if ((i2 | 0) == 62) {
  STACKTOP = i14;
  return i1 | 0;
 }
 return 0;
}

function _TT_Get_MM_Var(i12, i13) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = HEAP32[i12 + 104 >> 2] | 0;
 i10 = HEAP32[i12 + 100 >> 2] | 0;
 HEAP32[i14 + 40 >> 2] = 0;
 L1 : do if (!(HEAP32[i12 + 712 >> 2] | 0)) {
  i7 = FUNCTION_TABLE_iiiii[HEAP32[i12 + 508 >> 2] & 63](i12, 1735811442, i8, i14 + 44 | 0) | 0;
  HEAP32[i14 + 40 >> 2] = i7;
  if (i7) {
   i13 = HEAP32[i14 + 40 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i7 = FUNCTION_TABLE_iiiii[HEAP32[i12 + 508 >> 2] & 63](i12, 1719034226, i8, i14 + 44 | 0) | 0;
  HEAP32[i14 + 40 >> 2] = i7;
  if (i7) {
   i13 = HEAP32[i14 + 40 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i6 = _FT_Stream_Pos(i8) | 0;
  i7 = _FT_Stream_ReadFields(i8, 282520, i14 + 24 | 0) | 0;
  HEAP32[i14 + 40 >> 2] = i7;
  if (i7) {
   i13 = HEAP32[i14 + 40 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  if (((((((HEAP32[i14 + 24 >> 2] | 0) == 65536 ? (HEAP16[i14 + 24 + 6 >> 1] | 0) == 2 : 0) ? (HEAP16[i14 + 24 + 10 >> 1] | 0) == 20 : 0) ? (i9 = i14 + 24 + 8 | 0, i1 = HEAP16[i9 >> 1] | 0, (i1 & 65535) <= 16382) : 0) ? (i2 = HEAPU16[i14 + 24 + 14 >> 1] | 0, (i2 | 0) == (((i1 & 65535) << 2) + 4 | 0)) : 0) ? (i11 = i14 + 24 + 12 | 0, i3 = HEAP16[i11 >> 1] | 0, (i3 & 65535) <= 32511) : 0) ? (i7 = (Math_imul(i3 & 65535, i2) | 0) + ((i1 & 65535) * 20 | 0) + (HEAPU16[i14 + 24 + 4 >> 1] | 0) | 0, i7 >>> 0 <= (HEAP32[i14 + 44 >> 2] | 0) >>> 0) : 0) {
   i1 = _ft_mem_alloc(i10, 40, i14 + 40 | 0) | 0;
   HEAP32[i12 + 712 >> 2] = i1;
   if (HEAP32[i14 + 40 >> 2] | 0) {
    i13 = HEAP32[i14 + 40 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   i7 = HEAPU16[i11 >> 1] | 0;
   i7 = (i7 << 3) + 20 + (Math_imul((i7 << 2) + 29 | 0, HEAPU16[i9 >> 1] | 0) | 0) | 0;
   HEAP32[i1 + 12 >> 2] = i7;
   i7 = _ft_mem_alloc(i10, i7, i14 + 40 | 0) | 0;
   if (HEAP32[i14 + 40 >> 2] | 0) {
    i13 = HEAP32[i14 + 40 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   HEAP32[(HEAP32[i12 + 712 >> 2] | 0) + 8 >> 2] = i7;
   i5 = HEAP16[i9 >> 1] | 0;
   HEAP32[i7 >> 2] = i5 & 65535;
   HEAP32[i7 + 4 >> 2] = -1;
   i2 = HEAP16[i11 >> 1] | 0;
   HEAP32[i7 + 8 >> 2] = i2 & 65535;
   HEAP32[i7 + 12 >> 2] = i7 + 20;
   HEAP32[i7 + 16 >> 2] = i7 + 20 + ((i5 & 65535) * 24 | 0);
   i1 = i7 + 20 + ((i5 & 65535) * 24 | 0) + ((i2 & 65535) << 3) | 0;
   if (i2 << 16 >> 16) {
    i4 = i7 + (((Math_imul((i2 & 65535) >>> 0 > 1 ? i2 & 65535 : 1, i5 & 65535) | 0) << 2) + ((i5 & 65535) * 24 | 0) + ((i2 & 65535) << 3) + 20) | 0;
    i3 = 0;
    while (1) {
     HEAP32[i7 + 20 + ((i5 & 65535) * 24 | 0) + (i3 << 3) >> 2] = i1;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) >= (i2 & 65535 | 0)) break; else i1 = i1 + ((i5 & 65535) << 2) | 0;
    }
    i1 = i4;
   }
   if (i5 << 16 >> 16) {
    i2 = 0;
    while (1) {
     HEAP32[i7 + 20 + (i2 * 24 | 0) >> 2] = i1;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) >= (i5 & 65535 | 0)) break; else i1 = i1 + 5 | 0;
    }
   }
   i6 = _FT_Stream_Seek(i8, (HEAPU16[i14 + 24 + 4 >> 1] | 0) + i6 | 0) | 0;
   HEAP32[i14 + 40 >> 2] = i6;
   if (i6) {
    i13 = HEAP32[i14 + 40 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   L40 : do if (!(HEAP16[i9 >> 1] | 0)) i2 = 0; else {
    i1 = HEAP32[i7 + 12 >> 2] | 0;
    i3 = 0;
    while (1) {
     i6 = _FT_Stream_ReadFields(i8, 282556, i14) | 0;
     HEAP32[i14 + 40 >> 2] = i6;
     if (i6) break;
     i6 = HEAP32[i14 >> 2] | 0;
     i2 = i1 + 16 | 0;
     HEAP32[i2 >> 2] = i6;
     HEAP32[i1 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
     HEAP32[i1 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
     HEAP32[i1 + 12 >> 2] = HEAP32[i14 + 12 >> 2];
     HEAP32[i1 + 20 >> 2] = HEAPU16[i14 + 18 >> 1];
     HEAP8[HEAP32[i1 >> 2] >> 0] = i6 >>> 24;
     HEAP8[(HEAP32[i1 >> 2] | 0) + 1 >> 0] = (HEAP32[i2 >> 2] | 0) >>> 16;
     HEAP8[(HEAP32[i1 >> 2] | 0) + 2 >> 0] = (HEAP32[i2 >> 2] | 0) >>> 8;
     HEAP8[(HEAP32[i1 >> 2] | 0) + 3 >> 0] = HEAP32[i2 >> 2];
     HEAP8[(HEAP32[i1 >> 2] | 0) + 4 >> 0] = 0;
     i3 = i3 + 1 | 0;
     i2 = HEAP16[i9 >> 1] | 0;
     if ((i3 | 0) >= (i2 & 65535 | 0)) break L40; else i1 = i1 + 24 | 0;
    }
    i13 = HEAP32[i14 + 40 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   } while (0);
   if (!(HEAP16[i11 >> 1] | 0)) break;
   i1 = HEAP32[i7 + 16 >> 2] | 0;
   i7 = _FT_Stream_EnterFrame(i8, ((i2 & 65535) << 2) + 4 | 0) | 0;
   HEAP32[i14 + 40 >> 2] = i7;
   if (!i7) i3 = 0; else {
    i13 = HEAP32[i14 + 40 >> 2] | 0;
    STACKTOP = i14;
    return i13 | 0;
   }
   while (1) {
    HEAP32[i1 + 4 >> 2] = (_FT_Stream_GetUShort(i8) | 0) & 65535;
    _FT_Stream_GetUShort(i8) | 0;
    if (HEAP16[i9 >> 1] | 0) {
     i2 = 0;
     do {
      i7 = _FT_Stream_GetULong(i8) | 0;
      HEAP32[(HEAP32[i1 >> 2] | 0) + (i2 << 2) >> 2] = i7;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) < (HEAPU16[i9 >> 1] | 0));
    }
    _FT_Stream_ExitFrame(i8);
    i3 = i3 + 1 | 0;
    if ((i3 | 0) >= (HEAPU16[i11 >> 1] | 0)) break L1;
    i7 = _FT_Stream_EnterFrame(i8, (HEAPU16[i9 >> 1] << 2) + 4 | 0) | 0;
    HEAP32[i14 + 40 >> 2] = i7;
    if (i7) break; else i1 = i1 + 8 | 0;
   }
   i13 = HEAP32[i14 + 40 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  HEAP32[i14 + 40 >> 2] = 8;
  i13 = HEAP32[i14 + 40 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 } while (0);
 if (!i13) {
  i13 = HEAP32[i14 + 40 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i6 = _ft_mem_alloc(i10, HEAP32[(HEAP32[i12 + 712 >> 2] | 0) + 12 >> 2] | 0, i14 + 40 | 0) | 0;
 if (HEAP32[i14 + 40 >> 2] | 0) {
  i13 = HEAP32[i14 + 40 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i5 = HEAP32[i12 + 712 >> 2] | 0;
 _memcpy(i6 | 0, HEAP32[i5 + 8 >> 2] | 0, HEAP32[i5 + 12 >> 2] | 0) | 0;
 HEAP32[i6 + 12 >> 2] = i6 + 20;
 i5 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 + 16 >> 2] = i6 + 20 + (i5 * 24 | 0);
 i2 = HEAP32[i6 + 8 >> 2] | 0;
 if (!i2) i1 = i6 + 20 + (i5 * 24 | 0) + (i2 << 3) | 0; else {
  i1 = i6 + (((Math_imul(i5, i2 >>> 0 > 1 ? i2 : 1) | 0) << 2) + (i5 * 24 | 0) + (i2 << 3) + 20) | 0;
  i3 = 0;
  i4 = i6 + 20 + (i5 * 24 | 0) + (i2 << 3) | 0;
  while (1) {
   HEAP32[i6 + 20 + (i5 * 24 | 0) + (i3 << 3) >> 2] = i4;
   i3 = i3 + 1 | 0;
   if (i3 >>> 0 >= i2 >>> 0) break; else i4 = i4 + (i5 << 2) | 0;
  }
 }
 if (i5) {
  i3 = i6 + 20 | 0;
  i4 = 0;
  while (1) {
   HEAP32[i3 >> 2] = i1;
   i2 = HEAP32[i3 + 16 >> 2] | 0;
   L78 : do if ((i2 | 0) < 2003072104) if ((i2 | 0) < 1936486004) {
    switch (i2 | 0) {
    case 1869640570:
     break;
    default:
     break L78;
    }
    HEAP32[i3 >> 2] = 323364;
    break;
   } else {
    switch (i2 | 0) {
    case 1936486004:
     break;
    default:
     break L78;
    }
    HEAP32[i3 >> 2] = 323212;
    break;
   } else if ((i2 | 0) < 2003265652) {
    switch (i2 | 0) {
    case 2003072104:
     break;
    default:
     break L78;
    }
    HEAP32[i3 >> 2] = 323358;
    break;
   } else {
    switch (i2 | 0) {
    case 2003265652:
     break;
    default:
     break L78;
    }
    HEAP32[i3 >> 2] = 327351;
    break;
   } while (0);
   i4 = i4 + 1 | 0;
   if (i4 >>> 0 >= i5 >>> 0) break; else {
    i3 = i3 + 24 | 0;
    i1 = i1 + 5 | 0;
   }
  }
 }
 HEAP32[i13 >> 2] = i6;
 i13 = HEAP32[i14 + 40 >> 2] | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _ps_parser_load_field(i16, i14, i15, i2, i1) {
 i16 = i16 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 _ps_parser_to_token(i16, i17 + 36 | 0);
 i12 = HEAP32[i17 + 36 + 8 >> 2] | 0;
 L1 : do if (i12) {
  i1 = HEAP32[i17 + 36 >> 2] | 0;
  HEAP32[i17 + 32 >> 2] = i1;
  i3 = HEAP32[i17 + 36 + 4 >> 2] | 0;
  if ((HEAP32[i14 + 8 >> 2] | 0) == 7) {
   i10 = HEAP32[i16 >> 2] | 0;
   i11 = HEAP32[i16 + 8 >> 2] | 0;
   HEAP32[i16 >> 2] = i1 + 1;
   HEAP32[i16 + 8 >> 2] = i3 + -1;
   _ps_parser_to_token(i16, i17 + 16 | 0);
   HEAP32[i16 >> 2] = i10;
   HEAP32[i16 + 8 >> 2] = i11;
   if ((HEAP32[i17 + 16 + 8 >> 2] | 0) == 3) i13 = 5; else {
    i2 = 1;
    i4 = 0;
   }
  } else if ((i12 | 0) == 3) i13 = 5; else {
   i2 = 1;
   i4 = 0;
  }
  if ((i13 | 0) == 5) {
   if (!i2) break;
   HEAP32[i17 + 32 >> 2] = i1 + 1;
   i1 = i1 + 1 | 0;
   i4 = 1;
   i3 = i3 + -1 | 0;
  }
  i11 = i3;
  i10 = i4;
  L10 : while (1) {
   i8 = HEAP32[i15 + (i10 << 2) >> 2] | 0;
   i9 = HEAP32[i14 + 16 >> 2] | 0;
   i4 = i1;
   L12 : do if (i4 >>> 0 < i3 >>> 0) while (1) {
    switch (HEAP8[i4 >> 0] | 0) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     break;
    case 37:
     {
      i5 = 37;
      i1 = i4;
      L16 : while (1) {
       switch (i5 << 24 >> 24) {
       case 10:
       case 13:
        break L16;
       default:
        {}
       }
       i1 = i1 + 1 | 0;
       if (i1 >>> 0 >= i3 >>> 0) break;
       i5 = HEAP8[i1 >> 0] | 0;
      }
      break;
     }
    default:
     break L12;
    }
    i4 = i1 + 1 | 0;
    i1 = i4;
    if (i4 >>> 0 >= i3 >>> 0) break L12;
   } while (0);
   HEAP32[i17 + 32 >> 2] = i1;
   i4 = i1;
   switch (HEAP32[i14 + 8 >> 2] | 0) {
   case 1:
    {
     if (((((i4 + 3 | 0) >>> 0 < i3 >>> 0 ? (HEAP8[i4 >> 0] | 0) == 116 : 0) ? (HEAP8[i4 + 1 >> 0] | 0) == 114 : 0) ? (HEAP8[i4 + 2 >> 0] | 0) == 117 : 0) ? (HEAP8[i4 + 3 >> 0] | 0) == 101 : 0) {
      i1 = i4 + 5 | 0;
      i4 = 1;
     } else if (((((i4 + 4 | 0) >>> 0 < i3 >>> 0 ? (HEAP8[i4 >> 0] | 0) == 102 : 0) ? (HEAP8[i4 + 1 >> 0] | 0) == 97 : 0) ? (HEAP8[i4 + 2 >> 0] | 0) == 108 : 0) ? (HEAP8[i4 + 3 >> 0] | 0) == 115 : 0) {
      i1 = (HEAP8[i4 + 4 >> 0] | 0) == 101 ? i4 + 6 | 0 : i4;
      i4 = 0;
     } else {
      i1 = i4;
      i4 = 0;
     }
     HEAP32[i17 + 32 >> 2] = i1;
     i13 = 32;
     break;
    }
   case 3:
    {
     i4 = _PS_Conv_ToFixed(i17 + 32 | 0, i3, 0) | 0;
     i13 = 32;
     break;
    }
   case 4:
    {
     i4 = _PS_Conv_ToFixed(i17 + 32 | 0, i3, 3) | 0;
     i13 = 32;
     break;
    }
   case 2:
    {
     i4 = _PS_Conv_ToInt(i17 + 32 | 0, i3) | 0;
     i13 = 32;
     break;
    }
   case 6:
   case 5:
    {
     i6 = HEAP32[i16 + 16 >> 2] | 0;
     i1 = i11 - i1 | 0;
     if (i4 >>> 0 < i3 >>> 0) {
      switch (i12 | 0) {
      case 4:
       {
        HEAP32[i17 + 32 >> 2] = i4 + 1;
        i7 = i4 + 1 | 0;
        i5 = i1 + -1 | 0;
        break;
       }
      case 2:
       {
        HEAP32[i17 + 32 >> 2] = i4 + 1;
        i7 = i4 + 1 | 0;
        i5 = i1 + -2 | 0;
        break;
       }
      default:
       {
        i13 = 41;
        break L10;
       }
      }
      i1 = HEAP32[i8 + i9 >> 2] | 0;
      if (i1) {
       _ft_mem_free(i6, i1);
       HEAP32[i8 + i9 >> 2] = 0;
      }
      i4 = _ft_mem_alloc(i6, i5 + 1 | 0, i17 + 28 | 0) | 0;
      i1 = HEAP32[i17 + 28 >> 2] | 0;
      if (i1) {
       i13 = 71;
       break L10;
      }
      _memcpy(i4 | 0, i7 | 0, i5 | 0) | 0;
      HEAP8[i4 + i5 >> 0] = 0;
      HEAP32[i8 + i9 >> 2] = i4;
     }
     break;
    }
   case 7:
    {
     HEAP32[i17 + 48 >> 2] = i4;
     L53 : do if (i4 >>> 0 < i3 >>> 0) {
      i7 = HEAP8[i4 >> 0] | 0;
      i7 = i7 << 24 >> 24 == 91 ? 93 : i7 << 24 >> 24 == 123 ? 125 : 0;
      if (i7 << 24 >> 24) {
       HEAP32[i17 + 48 >> 2] = i4 + 1;
       i6 = i4 + 1 | 0;
       i1 = i4 + 1 | 0;
       i4 = 0;
      } else {
       i6 = i4;
       i4 = 0;
      }
      do {
       if (i6 >>> 0 >= i3 >>> 0) break;
       i5 = i1;
       L60 : do if (i5 >>> 0 < i3 >>> 0) while (1) {
        switch (HEAP8[i5 >> 0] | 0) {
        case 0:
        case 12:
        case 9:
        case 10:
        case 13:
        case 32:
         break;
        case 37:
         {
          i6 = 37;
          i1 = i5;
          L64 : while (1) {
           switch (i6 << 24 >> 24) {
           case 10:
           case 13:
            break L64;
           default:
            {}
           }
           i1 = i1 + 1 | 0;
           if (i1 >>> 0 >= i3 >>> 0) break;
           i6 = HEAP8[i1 >> 0] | 0;
          }
          break;
         }
        default:
         break L60;
        }
        i5 = i1 + 1 | 0;
        i1 = i5;
        if (i5 >>> 0 >= i3 >>> 0) break L60;
       } while (0);
       HEAP32[i17 + 48 >> 2] = i1;
       i5 = i1;
       if (i5 >>> 0 >= i3 >>> 0) break;
       if ((HEAP8[i5 >> 0] | 0) == i7 << 24 >> 24) {
        i13 = 59;
        break;
       }
       if ((i4 | 0) >= 4) {
        i13 = 64;
        break L53;
       }
       HEAP32[i17 + (i4 << 2) >> 2] = _PS_Conv_ToFixed(i17 + 48 | 0, i3, 0) | 0;
       i6 = HEAP32[i17 + 48 >> 2] | 0;
       i1 = i6;
       if ((i5 | 0) == (i6 | 0)) {
        i13 = 62;
        break L10;
       }
       i4 = i4 + 1 | 0;
      } while (i7 << 24 >> 24 != 0);
      if ((i13 | 0) == 59) {
       i13 = 0;
       HEAP32[i17 + 48 >> 2] = i5 + 1;
       i1 = i5 + 1 | 0;
      }
      HEAP32[i17 + 32 >> 2] = i1;
      if ((i4 | 0) < 0) break L10;
     } else i13 = 64; while (0);
     if ((i13 | 0) == 64) {
      i13 = 0;
      HEAP32[i17 + 32 >> 2] = i1;
     }
     HEAP32[i8 + i9 >> 2] = _FT_RoundFix(HEAP32[i17 >> 2] | 0) | 0;
     HEAP32[i8 + (i9 + 4) >> 2] = _FT_RoundFix(HEAP32[i17 + 4 >> 2] | 0) | 0;
     HEAP32[i8 + (i9 + 8) >> 2] = _FT_RoundFix(HEAP32[i17 + 8 >> 2] | 0) | 0;
     HEAP32[i8 + (i9 + 12) >> 2] = _FT_RoundFix(HEAP32[i17 + 12 >> 2] | 0) | 0;
     break;
    }
   default:
    break L1;
   }
   L81 : do if ((i13 | 0) == 32) {
    i13 = 0;
    switch (HEAPU8[i14 + 20 >> 0] | 0) {
    case 1:
     {
      HEAP8[i8 + i9 >> 0] = i4;
      break L81;
     }
    case 2:
     {
      HEAP16[i8 + i9 >> 1] = i4;
      break L81;
     }
    case 4:
     {
      HEAP32[i8 + i9 >> 2] = i4;
      break L81;
     }
    default:
     {
      HEAP32[i8 + i9 >> 2] = i4;
      break L81;
     }
    }
   } while (0);
   i2 = i2 + -1 | 0;
   if (!i2) {
    i13 = 70;
    break;
   }
   i1 = HEAP32[i17 + 32 >> 2] | 0;
   i10 = i10 + 1 | 0;
  }
  if ((i13 | 0) == 41) {
   HEAP32[i17 + 28 >> 2] = 3;
   i16 = 3;
   STACKTOP = i17;
   return i16 | 0;
  } else if ((i13 | 0) == 62) HEAP32[i17 + 32 >> 2] = i1; else if ((i13 | 0) == 70) {
   HEAP32[i17 + 28 >> 2] = 0;
   i16 = 0;
   STACKTOP = i17;
   return i16 | 0;
  } else if ((i13 | 0) == 71) {
   STACKTOP = i17;
   return i1 | 0;
  }
  HEAP32[i17 + 28 >> 2] = 3;
  i16 = 3;
  STACKTOP = i17;
  return i16 | 0;
 } while (0);
 HEAP32[i17 + 28 >> 2] = 3;
 i16 = 3;
 STACKTOP = i17;
 return i16 | 0;
}

function __ZN5Image9CreateNewEPvjbiii13TextureFormat(i9, i6, i5, i8, i10, i4, i7, i3) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((HEAP8[i9 + 8 >> 0] | 0) != 0 ? (i1 = HEAP32[i9 >> 2] | 0, (i1 | 0) != 0) : 0) __ZdaPv(i1);
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP8[i9 + 8 >> 0] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i9 + 12 + 4 >> 2] = 0;
 HEAP32[i9 + 12 + 8 >> 2] = 0;
 HEAP32[i9 + 12 + 12 >> 2] = 0;
 HEAP32[i9 + 12 + 16 >> 2] = 0;
 HEAP32[i9 + 12 + 20 >> 2] = 0;
 if (!((i3 | 0) == 0 | (i5 >>> 0 > 536870912 | ((i4 | 0) > 16384 | ((i10 | 0) > 16384 | ((i6 | 0) == 0 & (i5 | 0) != 0 | (i4 | i10 | 0) < 0)))))) {
  L7 : do if ((i3 | 0) >= 59) {
   L13 : do if ((i3 | 0) >= 88) {
    if ((i3 | 0) >= 1048578) {
     if ((i3 | 0) < 4194324) switch (i3 | 0) {
     case 1048582:
      {
       i11 = 10;
       break L7;
      }
     case 1048583:
     case 1048579:
     case 1048578:
     case 1048580:
      {
       i11 = 12;
       break L7;
      }
     case 1048584:
     case 1048581:
      {
       i11 = 13;
       break L13;
      }
     default:
      {
       i11 = 15;
       break L7;
      }
     }
     switch (i3 | 0) {
     case 4194339:
     case 4194337:
      {
       i11 = 10;
       break L7;
      }
     case 4194334:
     case 4194333:
      {
       i11 = 12;
       break L7;
      }
     case 4194356:
     case 4194354:
     case 4194331:
      {
       i11 = 13;
       break L13;
      }
     case 4194324:
      break;
     default:
      {
       i11 = 15;
       break L7;
      }
     }
     i1 = 24;
     i11 = 16;
     break L7;
    }
    if ((i3 | 0) < 95) switch (i3 | 0) {
    case 93:
    case 92:
    case 91:
    case 90:
    case 89:
    case 88:
     {
      i11 = 10;
      break L7;
     }
    case 94:
     {
      i11 = 7;
      break L13;
     }
    default:
     {
      i11 = 15;
      break L7;
     }
    }
    if ((i3 | 0) < 99) switch (i3 | 0) {
    case 98:
    case 97:
    case 96:
    case 95:
     {
      i11 = 7;
      break L13;
     }
    default:
     {
      i11 = 15;
      break L7;
     }
    }
    if ((i3 | 0) < 1048576) switch (i3 | 0) {
    case 115:
     {
      i11 = 12;
      break L7;
     }
    case 99:
     {
      i11 = 7;
      break L13;
     }
    default:
     {
      i11 = 15;
      break L7;
     }
    } else switch (i3 | 0) {
    case 1048577:
     {
      i11 = 12;
      break L7;
     }
    case 1048576:
     {
      i11 = 6;
      break L13;
     }
    default:
     {
      i11 = 15;
      break L7;
     }
    }
   } else {
    switch (i3 | 0) {
    case 87:
    case 69:
    case 68:
    case 67:
     {
      i11 = 10;
      break L7;
     }
    case 86:
    case 85:
    case 59:
     {
      i11 = 12;
      break L7;
     }
    case 72:
    case 71:
    case 70:
     {
      i11 = 6;
      break L13;
     }
    case 84:
    case 83:
    case 82:
    case 81:
    case 80:
    case 79:
    case 78:
    case 77:
    case 76:
    case 75:
    case 74:
    case 73:
     {
      i11 = 7;
      break L13;
     }
    case 65:
    case 64:
    case 63:
    case 62:
    case 61:
    case 60:
     {
      i11 = 13;
      break L13;
     }
    case 66:
     break;
    default:
     {
      i11 = 15;
      break L7;
     }
    }
    i1 = 1;
    i11 = 16;
    break L7;
   } while (0);
   if ((i11 | 0) == 6) {
    i1 = ((i10 + 3 | 0) / 4 | 0) << 3;
    break;
   } else if ((i11 | 0) == 7) {
    i1 = ((i10 + 3 | 0) / 4 | 0) << 4;
    break;
   } else if ((i11 | 0) == 13) {
    i1 = 8;
    i11 = 16;
    break;
   }
  } else switch (i3 | 0) {
  case 0:
   {
    i1 = 0;
    break L7;
   }
  case 4:
  case 3:
  case 2:
  case 1:
   {
    i1 = 128;
    i11 = 16;
    break L7;
   }
  case 47:
  case 46:
  case 45:
  case 44:
  case 43:
  case 42:
  case 41:
  case 40:
  case 39:
  case 38:
  case 37:
  case 36:
  case 35:
  case 34:
  case 33:
  case 32:
  case 31:
  case 30:
  case 29:
  case 28:
  case 27:
  case 26:
  case 25:
  case 24:
  case 23:
   {
    i11 = 10;
    break L7;
   }
  case 58:
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
  case 48:
   {
    i11 = 12;
    break L7;
   }
  case 8:
  case 7:
  case 6:
  case 5:
   {
    i1 = 96;
    i11 = 16;
    break L7;
   }
  case 22:
  case 21:
  case 20:
  case 19:
  case 18:
  case 17:
  case 16:
  case 15:
  case 14:
  case 13:
  case 12:
  case 11:
  case 10:
  case 9:
   {
    i1 = 64;
    i11 = 16;
    break L7;
   }
  default:
   {
    i11 = 15;
    break L7;
   }
  } while (0);
  if ((i11 | 0) == 10) {
   i1 = 32;
   i11 = 16;
  } else if ((i11 | 0) == 12) {
   i1 = 16;
   i11 = 16;
  } else if ((i11 | 0) == 15) {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i12);
   i1 = 0;
   i11 = 16;
  }
  if ((i11 | 0) == 16) i1 = ((Math_imul(i1, i10) | 0) + 7 | 0) / 8 | 0;
  if ((i1 | 0) <= (i7 | 0)) {
   L45 : do if ((i3 | 0) >= 81) {
    if ((i3 | 0) < 95) switch (i3 | 0) {
    case 94:
    case 84:
    case 83:
    case 82:
    case 81:
     break L45;
    default:
     {
      i11 = 20;
      break L45;
     }
    }
    if ((i3 | 0) < 98) switch (i3 | 0) {
    case 97:
    case 96:
    case 95:
     break L45;
    default:
     {
      i11 = 20;
      break L45;
     }
    }
    if ((i3 | 0) < 99) switch (i3 | 0) {
    case 98:
     break L45;
    default:
     {
      i11 = 20;
      break L45;
     }
    }
    if ((i3 | 0) < 1048576) switch (i3 | 0) {
    case 99:
     break L45;
    default:
     {
      i11 = 20;
      break L45;
     }
    } else switch (i3 | 0) {
    case 1048576:
     break L45;
    default:
     {
      i11 = 20;
      break L45;
     }
    }
   } else switch (i3 | 0) {
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
   case 80:
   case 79:
   case 72:
   case 71:
   case 70:
    break;
   default:
    i11 = 20;
   } while (0);
   if ((i11 | 0) == 20 ? (i2 = Math_imul(i7, i4) | 0, (i2 | 0) != (i5 | 0)) : 0) {
    HEAP32[i12 + 32 >> 2] = i7;
    HEAP32[i12 + 32 + 4 >> 2] = i4;
    HEAP32[i12 + 32 + 8 >> 2] = i5;
    HEAP32[i12 + 32 + 12 >> 2] = i2;
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303513, i12 + 32 | 0);
    i11 = 0;
    STACKTOP = i12;
    return i11 | 0;
   }
   HEAP32[i9 >> 2] = i6;
   HEAP32[i9 + 4 >> 2] = i5;
   HEAP8[i9 + 8 >> 0] = i8 & 1;
   HEAP32[i9 + 16 >> 2] = i10;
   HEAP32[i9 + 20 >> 2] = i4;
   HEAP32[i9 + 24 >> 2] = 1;
   HEAP32[i9 + 28 >> 2] = i3;
   HEAP32[i9 + 32 >> 2] = 2;
   HEAP32[i9 + 12 >> 2] = i7;
   i11 = 1;
   STACKTOP = i12;
   return i11 | 0;
  }
 }
 i11 = __Z21TextureFormatToString13TextureFormat(i3) | 0;
 HEAP32[i12 + 8 >> 2] = i6;
 HEAP32[i12 + 8 + 4 >> 2] = i5;
 HEAP32[i12 + 8 + 8 >> 2] = i10;
 HEAP32[i12 + 8 + 12 >> 2] = i4;
 HEAP32[i12 + 8 + 16 >> 2] = i7;
 HEAP32[i12 + 8 + 20 >> 2] = i11;
 __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303410, i12 + 8 | 0);
 i11 = 0;
 STACKTOP = i12;
 return i11 | 0;
}

function __bdf_parse_properties(i14, i13, i3, i10, i16) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if (!(_memcmp(i14, 324746, 13) | 0)) {
  i4 = HEAP32[i16 + 32 >> 2] | 0;
  L3 : do if (((i4 | 0) != 0 ? (HEAP32[i4 + 72 >> 2] | 0) != 0 : 0) ? (i7 = HEAP32[i4 + 128 >> 2] | 0, i6 = HEAP32[i7 + 12 >> 2] | 0, i7 = HEAP32[i7 + 4 >> 2] | 0, i2 = HEAP32[i6 + ((1895527114 % (i7 >>> 0) | 0) << 2) >> 2] | 0, (i2 | 0) != 0) : 0) {
   i5 = i6 + ((1895527114 % (i7 >>> 0) | 0) << 2) | 0;
   while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    if ((HEAP8[i3 >> 0] | 0) == 70 ? (_strcmp(i3, 324640) | 0) == 0 : 0) break;
    i2 = i5 + -4 | 0;
    i5 = i2 >>> 0 < i6 >>> 0 ? i6 + (i7 + -1 << 2) | 0 : i2;
    i2 = HEAP32[i5 >> 2] | 0;
    if (!i2) {
     i12 = 10;
     break L3;
    }
   }
   if (!((HEAP32[i4 + 80 >> 2] | 0) + (HEAP32[i2 + 4 >> 2] << 4) | 0)) i12 = 10;
  } else i12 = 10; while (0);
  do if ((i12 | 0) == 10) {
   i2 = HEAP16[i4 + 12 >> 1] | 0;
   HEAP32[i4 + 40 >> 2] = i2;
   HEAP32[i15 >> 2] = i2;
   _sprintf(i15 + 16 | 0, 324636, i15) | 0;
   i2 = __bdf_add_property(HEAP32[i16 + 32 >> 2] | 0, 324640, i15 + 16 | 0) | 0;
   if (!i2) {
    i4 = HEAP32[i16 + 32 >> 2] | 0;
    HEAP16[i4 + 278660 >> 1] = 1;
    break;
   } else {
    i16 = i2;
    STACKTOP = i15;
    return i16 | 0;
   }
  } while (0);
  L19 : do if ((HEAP32[i4 + 72 >> 2] | 0) != 0 ? (i8 = HEAP32[i4 + 128 >> 2] | 0, i9 = HEAP32[i8 + 12 >> 2] | 0, i8 = HEAP32[i8 + 4 >> 2] | 0, i1 = HEAP32[i9 + ((908209322 % (i8 >>> 0) | 0) << 2) >> 2] | 0, (i1 | 0) != 0) : 0) {
   i3 = i9 + ((908209322 % (i8 >>> 0) | 0) << 2) | 0;
   while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if ((HEAP8[i2 >> 0] | 0) == 70 ? (_strcmp(i2, 324652) | 0) == 0 : 0) break;
    i1 = i3 + -4 | 0;
    i3 = i1 >>> 0 < i9 >>> 0 ? i9 + (i8 + -1 << 2) | 0 : i1;
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i12 = 19;
     break L19;
    }
   }
   if (!((HEAP32[i4 + 80 >> 2] | 0) + (HEAP32[i1 + 4 >> 2] << 4) | 0)) i12 = 19;
  } else i12 = 19; while (0);
  do if ((i12 | 0) == 19) {
   i1 = HEAP16[i4 + 14 >> 1] | 0;
   HEAP32[i4 + 44 >> 2] = i1;
   HEAP32[i15 + 8 >> 2] = i1;
   _sprintf(i15 + 16 | 0, 324636, i15 + 8 | 0) | 0;
   i1 = __bdf_add_property(HEAP32[i16 + 32 >> 2] | 0, 324652, i15 + 16 | 0) | 0;
   if (!i1) {
    HEAP16[(HEAP32[i16 + 32 >> 2] | 0) + 278660 >> 1] = 1;
    break;
   } else {
    i16 = i1;
    STACKTOP = i15;
    return i16 | 0;
   }
  } while (0);
  HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -17;
  HEAP32[i10 >> 2] = 36;
  i16 = 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 if (!(_memcmp(i14, 324760, 21) | 0)) {
  i16 = 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 if (!(_memcmp(i14, 324373, 7) | 0)) {
  if (!(HEAP8[i14 + 7 >> 0] | 0)) i1 = i14 + 7 | 0; else {
   HEAP8[i14 + 7 >> 0] = 0;
   i1 = i14 + 8 | 0;
  }
  i16 = __bdf_add_property(HEAP32[i16 + 32 >> 2] | 0, i14, i1) | 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 i9 = HEAP32[i16 + 32 >> 2] | 0;
 i1 = i14;
 L46 : while (1) {
  i2 = HEAP8[i1 >> 0] | 0;
  switch (i2 << 24 >> 24) {
  case 0:
   {
    i8 = -1;
    break L46;
   }
  case 32:
  case 9:
   {
    i12 = 30;
    break L46;
   }
  default:
   {}
  }
  i1 = i1 + 1 | 0;
 }
 if ((i12 | 0) == 30) {
  HEAP8[i1 >> 0] = 0;
  i8 = i2 << 24 >> 24;
 }
 L52 : do if ((i14 | 0) != 0 ? (i11 = HEAP8[i14 >> 0] | 0, i11 << 24 >> 24 != 0) : 0) {
  i7 = HEAP32[i9 + 278688 >> 2] | 0;
  i3 = i11;
  i4 = i14;
  i2 = 0;
  while (1) {
   i4 = i4 + 1 | 0;
   i5 = (i2 * 31 | 0) + (i3 << 24 >> 24) | 0;
   i3 = HEAP8[i4 >> 0] | 0;
   if (!(i3 << 24 >> 24)) break; else i2 = i5;
  }
  i6 = HEAP32[i9 + 278680 >> 2] | 0;
  i2 = HEAP32[i7 + (((i5 >>> 0) % (i6 >>> 0) | 0) << 2) >> 2] | 0;
  if (i2) {
   i4 = i7 + (((i5 >>> 0) % (i6 >>> 0) | 0) << 2) | 0;
   while (1) {
    i3 = HEAP32[i2 >> 2] | 0;
    if ((HEAP8[i3 >> 0] | 0) == i11 << 24 >> 24 ? (_strcmp(i3, i14) | 0) == 0 : 0) break;
    i2 = i4 + -4 | 0;
    i4 = i2 >>> 0 < i7 >>> 0 ? i7 + (i6 + -1 << 2) | 0 : i2;
    i2 = HEAP32[i4 >> 2] | 0;
    if (!i2) {
     i3 = 0;
     break L52;
    }
   }
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   if (i2 >>> 0 > 82) {
    i3 = (HEAP32[i9 + 278668 >> 2] | 0) + (i2 + -83 << 4) | 0;
    break;
   } else {
    i3 = 270972 + (i2 << 4) | 0;
    break;
   }
  } else i3 = 0;
 } else i3 = 0; while (0);
 if ((i8 | 0) == -1) i2 = 0; else {
  i2 = i8 & 255;
  HEAP8[i1 >> 0] = i2;
 }
 if ((i3 | 0) != 0 ? (HEAP32[i3 + 4 >> 2] | 0) != 1 : 0) {
  i1 = __bdf_list_split(i16 + 139304 | 0, 324407, i14, i13) | 0;
  if (i1) {
   i16 = i1;
   STACKTOP = i15;
   return i16 | 0;
  }
  i1 = HEAP32[i16 + 139304 >> 2] | 0;
  i9 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i16 + 139312 >> 2] | 0;
  do if (i3) {
   if (i3 >>> 0 < 2) {
    HEAP32[i16 + 139312 >> 2] = 0;
    i1 = 0;
    break;
   }
   HEAP32[i1 >> 2] = HEAP32[i1 + 4 >> 2];
   if ((i3 + -1 | 0) != 1) {
    i1 = 1;
    i2 = 1;
    do {
     i2 = i2 + 1 | 0;
     i14 = HEAP32[i16 + 139304 >> 2] | 0;
     HEAP32[i14 + (i1 << 2) >> 2] = HEAP32[i14 + (i2 << 2) >> 2];
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i3 + -1 | 0));
   }
   HEAP32[i16 + 139312 >> 2] = i3 + -1;
   if (i3 + -1 | 0) {
    i1 = HEAP32[HEAP32[i16 + 139304 >> 2] >> 2] | 0;
    i5 = i1;
    i6 = i3 + -1 | 0;
    i7 = 0;
    i2 = 0;
    while (1) {
     i3 = HEAP8[i5 >> 0] | 0;
     if (!(i3 << 24 >> 24)) i3 = i6; else {
      while (1) {
       i5 = i5 + 1 | 0;
       i4 = i2 + 1 | 0;
       HEAP8[i1 + i2 >> 0] = i3;
       i3 = HEAP8[i5 >> 0] | 0;
       if (!(i3 << 24 >> 24)) break; else i2 = i4;
      }
      i3 = HEAP32[i16 + 139312 >> 2] | 0;
      i2 = i4;
     }
     i4 = i7 + 1 | 0;
     if (i4 >>> 0 < i3 >>> 0) {
      HEAP8[i1 + i2 >> 0] = 32;
      i3 = HEAP32[i16 + 139312 >> 2] | 0;
      i2 = i2 + 1 | 0;
     }
     if (i4 >>> 0 >= i3 >>> 0) break;
     i5 = HEAP32[(HEAP32[i16 + 139304 >> 2] | 0) + (i4 << 2) >> 2] | 0;
     i6 = i3;
     i7 = i4;
    }
    if ((i1 | 0) == 298501) i1 = 298501; else HEAP8[i1 + i2 >> 0] = 0;
   } else i1 = 0;
  } else i1 = 0; while (0);
  i16 = __bdf_add_property(HEAP32[i16 + 32 >> 2] | 0, i9, i1) | 0;
  STACKTOP = i15;
  return i16 | 0;
 }
 if (i2 << 24 >> 24) {
  HEAP8[i1 >> 0] = 0;
  i1 = i1 + 1 | 0;
 }
 L106 : while (1) {
  i2 = HEAP8[i1 >> 0] | 0;
  switch (i2 << 24 >> 24) {
  case 32:
  case 9:
   break;
  default:
   break L106;
  }
  i1 = i1 + 1 | 0;
 }
 i2 = i2 << 24 >> 24 == 34 ? i1 + 1 | 0 : i1;
 L110 : do if ((i14 + i13 | 0) >>> 0 > i2 >>> 0) {
  i1 = i14 + i13 | 0;
  L111 : while (1) {
   i1 = i1 + -1 | 0;
   switch (HEAP8[i1 >> 0] | 0) {
   case 34:
    break L111;
   case 9:
   case 32:
    break;
   default:
    break L110;
   }
   HEAP8[i1 >> 0] = 0;
   if (i1 >>> 0 <= i2 >>> 0) break L110;
  }
  HEAP8[i1 >> 0] = 0;
 } while (0);
 i16 = __bdf_add_property(HEAP32[i16 + 32 >> 2] | 0, i14, i2) | 0;
 STACKTOP = i15;
 return i16 | 0;
}

function __Z20AppendTextVertexDataIN4math6float4EEvR12VertexBufferR12FTGlyphCacheNS0_6float3ERK6StringP6FTFontiRKT_RKS6_SG_f(i6, i9, i11, i1, i8, i10, i7, i12, i13, f3) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 f3 = Math_fround(f3);
 var i2 = 0, i4 = 0, i5 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  STACKTOP = i14;
  return;
 }
 if (!(HEAP8[i1 >> 0] | 0)) {
  STACKTOP = i14;
  return;
 }
 if (f3 < Math_fround(-9.0e3)) f3 = Math_fround(Math_fround(Math_fround(i10 | 0) * Math_fround(4.0)) * Math_fround(.015625));
 HEAP32[i14 + 156 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i14 + 156 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i14 + 156 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 i2 = HEAP8[i1 >> 0] | 0;
 if (!(i2 << 24 >> 24)) i2 = 0; else {
  i4 = 0;
  i5 = i1;
  do {
   i4 = ((i2 & 255) > 32 ? 6 : 0) + i4 | 0;
   i2 = i2 & 255;
   do if (i2 & 128) {
    if ((i2 & 224 | 0) == 192) {
     i5 = i5 + 2 | 0;
     break;
    }
    if ((i2 & 240 | 0) == 224) {
     i5 = i5 + 3 | 0;
     break;
    }
    if ((i2 & 248 | 0) == 240) {
     i5 = i5 + 4 | 0;
     break;
    }
    if ((i2 & 252 | 0) == 248) {
     i5 = i5 + 5 | 0;
     break;
    } else {
     i5 = i5 + 6 | 0;
     break;
    }
   } else i5 = i5 + 1 | 0; while (0);
   i2 = HEAP8[i5 >> 0] | 0;
  } while (i2 << 24 >> 24 != 0);
  i2 = i4;
 }
 i4 = __ZN12VertexBuffer14AppendVerticesEi(i6, i2) | 0;
 i4 = (HEAP32[i6 + 60 >> 2] | 0) + (i4 * 36 | 0) | 0;
 L30 : while (1) {
  L32 : while (1) {
   switch (HEAP8[i1 >> 0] | 0) {
   case 0:
    {
     i1 = 37;
     break L30;
    }
   case 10:
    break;
   default:
    break L32;
   }
   __ZNK4math6float3mlEf(i14 + 144 | 0, i13, f3);
   __ZN4math6float3pLERKS0_(i14 + 156 | 0, i14 + 144 | 0) | 0;
   HEAP32[i11 >> 2] = HEAP32[i14 + 156 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i14 + 156 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i14 + 156 + 8 >> 2];
   i1 = i1 + ((HEAP8[i1 >> 0] | 0) == 10 ? 1 : 2) | 0;
  }
  i5 = __Z7ToUtf32PKh(i1) | 0;
  __ZN4math6float3C2Efff(i14 + 132 | 0, Math_fround(1.0), Math_fround(1.0), Math_fround(1.0));
  i5 = __ZN12FTGlyphCache14CacheCharacterEP6FTFontmiRKN4math6float3Eb(i9, i8, i5, i10, i14 + 132 | 0, 1) | 0;
  if (!i5) {
   i1 = 37;
   break;
  }
  i2 = HEAP8[i1 >> 0] | 0;
  if ((i2 & 255) > 32) {
   __ZNK4math6float3mlEf(i14 + 108 | 0, i12, Math_fround(HEAPF32[i5 + 56 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 96 | 0, i11, i14 + 108 | 0);
   __ZNK4math6float3mlEf(i14 + 84 | 0, i13, Math_fround(HEAPF32[i5 + 60 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 120 | 0, i14 + 96 | 0, i14 + 84 | 0);
   __ZNK4math6float3mlEf(i14 + 60 | 0, i12, Math_fround(HEAPF32[i5 + 48 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 72 | 0, i14 + 120 | 0, i14 + 60 | 0);
   __ZNK4math6float3mlEf(i14 + 36 | 0, i13, Math_fround(HEAPF32[i5 + 52 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 48 | 0, i14 + 120 | 0, i14 + 36 | 0);
   __ZNK4math6float3mlEf(i14 + 12 | 0, i12, Math_fround(HEAPF32[i5 + 48 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 24 | 0, i14 + 48 | 0, i14 + 12 | 0);
   HEAP32[i4 >> 2] = HEAP32[i14 + 120 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i14 + 120 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i14 + 120 + 8 >> 2];
   i2 = i4 + 12 | 0;
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i2 = HEAP32[i5 + 8 + 4 >> 2] | 0;
   i6 = i4 + 28 | 0;
   HEAP32[i6 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i6 + 4 >> 2] = i2;
   i6 = i4 + 36 | 0;
   HEAP32[i6 >> 2] = HEAP32[i14 + 48 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i14 + 48 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i14 + 48 + 8 >> 2];
   i6 = i4 + 48 | 0;
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i6 = HEAP32[i5 + 24 + 4 >> 2] | 0;
   i2 = i4 + 64 | 0;
   HEAP32[i2 >> 2] = HEAP32[i5 + 24 >> 2];
   HEAP32[i2 + 4 >> 2] = i6;
   i2 = i4 + 72 | 0;
   HEAP32[i2 >> 2] = HEAP32[i14 + 72 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i14 + 72 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i14 + 72 + 8 >> 2];
   i2 = i4 + 84 | 0;
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i2 = HEAP32[i5 + 16 + 4 >> 2] | 0;
   i6 = i4 + 100 | 0;
   HEAP32[i6 >> 2] = HEAP32[i5 + 16 >> 2];
   HEAP32[i6 + 4 >> 2] = i2;
   i6 = i4 + 108 | 0;
   HEAP32[i6 >> 2] = HEAP32[i14 + 48 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i14 + 48 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i14 + 48 + 8 >> 2];
   i6 = i4 + 120 | 0;
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i6 = HEAP32[i5 + 24 + 4 >> 2] | 0;
   i2 = i4 + 136 | 0;
   HEAP32[i2 >> 2] = HEAP32[i5 + 24 >> 2];
   HEAP32[i2 + 4 >> 2] = i6;
   i2 = i4 + 144 | 0;
   HEAP32[i2 >> 2] = HEAP32[i14 + 72 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i14 + 72 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i14 + 72 + 8 >> 2];
   i2 = i4 + 156 | 0;
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i2 = HEAP32[i5 + 16 + 4 >> 2] | 0;
   i6 = i4 + 172 | 0;
   HEAP32[i6 >> 2] = HEAP32[i5 + 16 >> 2];
   HEAP32[i6 + 4 >> 2] = i2;
   i6 = i4 + 180 | 0;
   HEAP32[i6 >> 2] = HEAP32[i14 + 24 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i14 + 24 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i14 + 24 + 8 >> 2];
   i6 = i4 + 192 | 0;
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   i6 = HEAP32[i5 + 32 + 4 >> 2] | 0;
   i2 = i4 + 208 | 0;
   HEAP32[i2 >> 2] = HEAP32[i5 + 32 >> 2];
   HEAP32[i2 + 4 >> 2] = i6;
   i2 = HEAP8[i1 >> 0] | 0;
   i4 = i4 + 216 | 0;
  }
  i2 = i2 & 255;
  do if (i2 & 128) {
   if ((i2 & 224 | 0) == 192) {
    i1 = i1 + 2 | 0;
    break;
   }
   if ((i2 & 240 | 0) == 224) {
    i1 = i1 + 3 | 0;
    break;
   }
   if ((i2 & 248 | 0) == 240) {
    i1 = i1 + 4 | 0;
    break;
   }
   if ((i2 & 252 | 0) == 248) {
    i1 = i1 + 5 | 0;
    break;
   } else {
    i1 = i1 + 6 | 0;
    break;
   }
  } else i1 = i1 + 1 | 0; while (0);
  __ZNK4math6float3mlEf(i14, i12, Math_fround(__ZNK12FTGlyphCache11GetAdvanceXEP6FTFontP15GlyphCacheEntrymi(0, i8, i5, HEAPU8[i1 >> 0] | 0, i10)));
  __ZN4math6float3pLERKS0_(i11, i14) | 0;
 }
 if ((i1 | 0) == 37) {
  STACKTOP = i14;
  return;
 }
}

function _Line_To(i7, i8, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 L1 : do switch (HEAP32[i7 + 100 >> 2] | 0) {
 case 0:
  {
   i1 = HEAP32[i7 + 72 >> 2] | 0;
   if ((i1 | 0) < (i9 | 0)) {
    i2 = HEAP32[i7 + 4 >> 2] | 0;
    i2 = ((i1 + -1 + i2 & 0 - i2) - i1 | 0) < (HEAP32[i7 + 8 >> 2] | 0);
    if (!(HEAP32[i7 + 92 >> 2] | 0)) {
     i1 = HEAP32[i7 + 40 >> 2] | 0;
     HEAP32[i7 + 88 >> 2] = i1;
     HEAP32[i7 + 92 >> 2] = i1;
     HEAP32[i7 + 40 >> 2] = i1 + 32;
     i1 = i1 + 32 | 0;
    } else i1 = HEAP32[i7 + 40 >> 2] | 0;
    if (i1 >>> 0 >= (HEAP32[i7 + 36 >> 2] | 0) >>> 0) {
     HEAP32[i7 + 44 >> 2] = 98;
     i8 = 1;
     return i8 | 0;
    }
    i3 = HEAP32[i7 + 88 >> 2] | 0;
    HEAP32[i3 + 20 >> 2] = 0;
    HEAP32[i3 + 16 >> 2] = 0;
    HEAP32[i3 + 8 >> 2] = i1;
    HEAP32[i3 + 4 >> 2] = 0;
    HEAP32[i3 + 28 >> 2] = 0;
    HEAP32[i3 + 12 >> 2] = HEAPU8[i7 + 180 >> 0] | (i2 ? 8 : 40);
    if (!(HEAP32[i7 + 96 >> 2] | 0)) HEAP32[i7 + 96 >> 2] = i3;
    HEAP32[i7 + 100 >> 2] = 1;
    HEAP8[i7 + 86 >> 0] = 1;
    HEAP8[i7 + 87 >> 0] = 0;
    i3 = 57;
    break L1;
   }
   if ((i1 | 0) > (i9 | 0)) {
    i2 = ((HEAP32[i7 + 4 >> 2] | 0) + -1 & i1 | 0) < (HEAP32[i7 + 8 >> 2] | 0);
    if (!(HEAP32[i7 + 92 >> 2] | 0)) {
     i1 = HEAP32[i7 + 40 >> 2] | 0;
     HEAP32[i7 + 88 >> 2] = i1;
     HEAP32[i7 + 92 >> 2] = i1;
     HEAP32[i7 + 40 >> 2] = i1 + 32;
     i1 = i1 + 32 | 0;
    } else i1 = HEAP32[i7 + 40 >> 2] | 0;
    if (i1 >>> 0 >= (HEAP32[i7 + 36 >> 2] | 0) >>> 0) {
     HEAP32[i7 + 44 >> 2] = 98;
     i8 = 1;
     return i8 | 0;
    }
    i3 = HEAP32[i7 + 88 >> 2] | 0;
    HEAP32[i3 + 20 >> 2] = 0;
    HEAP32[i3 + 16 >> 2] = 0;
    HEAP32[i3 + 8 >> 2] = i1;
    HEAP32[i3 + 4 >> 2] = 0;
    HEAP32[i3 + 28 >> 2] = 0;
    i6 = HEAPU8[i7 + 180 >> 0] | 0;
    HEAP32[i3 + 12 >> 2] = i2 ? i6 : i6 | 16;
    if (!(HEAP32[i7 + 96 >> 2] | 0)) HEAP32[i7 + 96 >> 2] = i3;
    HEAP32[i7 + 100 >> 2] = 2;
    HEAP8[i7 + 86 >> 0] = 1;
    HEAP8[i7 + 87 >> 0] = 0;
    i3 = 58;
   } else i3 = 56;
   break;
  }
 case 1:
  {
   i1 = HEAP32[i7 + 72 >> 2] | 0;
   if ((i1 | 0) > (i9 | 0)) {
    i5 = ((HEAP32[i7 + 4 >> 2] | 0) + -1 & i1 | 0) < (HEAP32[i7 + 8 >> 2] | 0);
    i4 = HEAP32[i7 + 40 >> 2] | 0;
    i3 = HEAP32[i7 + 88 >> 2] | 0;
    i1 = i4 - (HEAP32[i3 + 8 >> 2] | 0) | 0;
    if ((i1 | 0) < 0) {
     HEAP32[i7 + 44 >> 2] = 99;
     i8 = 1;
     return i8 | 0;
    }
    if ((i1 | 0) > 0) {
     HEAP32[i3 + 16 >> 2] = i1 >> 2;
     do if (!i5) {
      i1 = HEAP32[i3 + 12 >> 2] | 0;
      if (!(i1 & 8)) {
       HEAP32[i3 + 12 >> 2] = i1 | 32;
       break;
      } else {
       HEAP32[i3 + 12 >> 2] = i1 | 16;
       break;
      }
     } while (0);
     HEAP32[i7 + 88 >> 2] = i4;
     HEAP32[i7 + 40 >> 2] = i4 + 32;
     HEAP32[i4 + 16 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = i4 + 32;
     HEAP32[i3 + 28 >> 2] = i4;
     HEAP16[i7 + 84 >> 1] = (HEAP16[i7 + 84 >> 1] | 0) + 1 << 16 >> 16;
     i2 = i4 + 32 | 0;
     i1 = i4 + 32 | 0;
     i3 = i4;
    } else {
     i2 = i4;
     i1 = i4;
    }
    i4 = HEAP32[i7 + 36 >> 2] | 0;
    if (i2 >>> 0 >= i4 >>> 0) {
     HEAP32[i7 + 44 >> 2] = 98;
     i8 = 1;
     return i8 | 0;
    }
    HEAP8[i7 + 87 >> 0] = 0;
    if (!(HEAP32[i7 + 92 >> 2] | 0)) {
     HEAP32[i7 + 88 >> 2] = i1;
     HEAP32[i7 + 92 >> 2] = i1;
     i2 = i1 + 32 | 0;
     HEAP32[i7 + 40 >> 2] = i2;
    } else i1 = i3;
    if (i2 >>> 0 >= i4 >>> 0) {
     HEAP32[i7 + 44 >> 2] = 98;
     i8 = 1;
     return i8 | 0;
    }
    HEAP32[i1 + 20 >> 2] = 0;
    HEAP32[i1 + 16 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = i2;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 28 >> 2] = 0;
    i6 = HEAPU8[i7 + 180 >> 0] | 0;
    HEAP32[i1 + 12 >> 2] = i5 ? i6 : i6 | 16;
    if (!(HEAP32[i7 + 96 >> 2] | 0)) HEAP32[i7 + 96 >> 2] = i1;
    HEAP32[i7 + 100 >> 2] = 2;
    HEAP8[i7 + 86 >> 0] = 1;
    HEAP8[i7 + 87 >> 0] = 0;
    i3 = 58;
   } else i3 = 57;
   break;
  }
 case 2:
  {
   i1 = HEAP32[i7 + 72 >> 2] | 0;
   if ((i1 | 0) < (i9 | 0)) {
    i6 = HEAP32[i7 + 4 >> 2] | 0;
    i6 = ((i1 + -1 + i6 & 0 - i6) - i1 | 0) < (HEAP32[i7 + 8 >> 2] | 0);
    i3 = HEAP32[i7 + 40 >> 2] | 0;
    i4 = HEAP32[i7 + 88 >> 2] | 0;
    i1 = i3 - (HEAP32[i4 + 8 >> 2] | 0) | 0;
    if ((i1 | 0) < 0) {
     HEAP32[i7 + 44 >> 2] = 99;
     i8 = 1;
     return i8 | 0;
    }
    if ((i1 | 0) > 0) {
     HEAP32[i4 + 16 >> 2] = i1 >> 2;
     do if (!i6) {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if (!(i1 & 8)) {
       HEAP32[i4 + 12 >> 2] = i1 | 32;
       break;
      } else {
       HEAP32[i4 + 12 >> 2] = i1 | 16;
       break;
      }
     } while (0);
     HEAP32[i7 + 88 >> 2] = i3;
     HEAP32[i7 + 40 >> 2] = i3 + 32;
     HEAP32[i3 + 16 >> 2] = 0;
     HEAP32[i3 + 8 >> 2] = i3 + 32;
     HEAP32[i4 + 28 >> 2] = i3;
     HEAP16[i7 + 84 >> 1] = (HEAP16[i7 + 84 >> 1] | 0) + 1 << 16 >> 16;
     i2 = i3 + 32 | 0;
     i5 = i3 + 32 | 0;
     i1 = i3;
    } else {
     i2 = i3;
     i5 = i3;
     i1 = i4;
    }
    i3 = HEAP32[i7 + 36 >> 2] | 0;
    if (i2 >>> 0 >= i3 >>> 0) {
     HEAP32[i7 + 44 >> 2] = 98;
     i8 = 1;
     return i8 | 0;
    }
    HEAP8[i7 + 87 >> 0] = 0;
    if (!(HEAP32[i7 + 92 >> 2] | 0)) {
     HEAP32[i7 + 88 >> 2] = i5;
     HEAP32[i7 + 92 >> 2] = i5;
     i2 = i5 + 32 | 0;
     HEAP32[i7 + 40 >> 2] = i2;
     i1 = i5;
    }
    if (i2 >>> 0 >= i3 >>> 0) {
     HEAP32[i7 + 44 >> 2] = 98;
     i8 = 1;
     return i8 | 0;
    }
    HEAP32[i1 + 20 >> 2] = 0;
    HEAP32[i1 + 16 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = i2;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 28 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = HEAPU8[i7 + 180 >> 0] | (i6 ? 8 : 40);
    if (!(HEAP32[i7 + 96 >> 2] | 0)) HEAP32[i7 + 96 >> 2] = i1;
    HEAP32[i7 + 100 >> 2] = 1;
    HEAP8[i7 + 86 >> 0] = 1;
    HEAP8[i7 + 87 >> 0] = 0;
    i3 = 57;
   } else i3 = 58;
   break;
  }
 default:
  i3 = 56;
 } while (0);
 if ((i3 | 0) == 56) {
  i2 = i7 + 72 | 0;
  i1 = i7 + 68 | 0;
 } else if ((i3 | 0) == 57) if (!((_Line_Up(i7, HEAP32[i7 + 68 >> 2] | 0, HEAP32[i7 + 72 >> 2] | 0, i8, i9, HEAP32[i7 + 76 >> 2] | 0, HEAP32[i7 + 80 >> 2] | 0) | 0) << 24 >> 24)) {
  i2 = i7 + 72 | 0;
  i1 = i7 + 68 | 0;
 } else {
  i8 = 1;
  return i8 | 0;
 } else if ((i3 | 0) == 58) {
  i6 = HEAP8[i7 + 86 >> 0] | 0;
  i1 = _Line_Up(i7, HEAP32[i7 + 68 >> 2] | 0, 0 - (HEAP32[i7 + 72 >> 2] | 0) | 0, i8, 0 - i9 | 0, 0 - (HEAP32[i7 + 80 >> 2] | 0) | 0, 0 - (HEAP32[i7 + 76 >> 2] | 0) | 0) | 0;
  if (i6 << 24 >> 24 != 0 ? (HEAP8[i7 + 86 >> 0] | 0) == 0 : 0) {
   i6 = (HEAP32[i7 + 88 >> 2] | 0) + 20 | 0;
   HEAP32[i6 >> 2] = 0 - (HEAP32[i6 >> 2] | 0);
  }
  if (!(i1 << 24 >> 24)) {
   i2 = i7 + 72 | 0;
   i1 = i7 + 68 | 0;
  } else {
   i8 = 1;
   return i8 | 0;
  }
 }
 HEAP32[i1 >> 2] = i8;
 HEAP32[i2 >> 2] = i9;
 i8 = 0;
 return i8 | 0;
}

function _FT_Load_Glyph(i10, i9, i6) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 if (!i10) {
  i14 = 35;
  return i14 | 0;
 }
 if (!(HEAP32[i10 + 88 >> 2] | 0)) {
  i14 = 35;
  return i14 | 0;
 }
 i14 = HEAP32[i10 + 84 >> 2] | 0;
 if (!i14) {
  i14 = 35;
  return i14 | 0;
 }
 i12 = HEAP32[i14 + 156 >> 2] | 0;
 if ((i12 | 0) != 0 ? (HEAP32[i12 + 4 >> 2] & 1 | 0) != 0 : 0) {
  _ft_mem_free(HEAP32[(HEAP32[i14 + 4 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i14 + 88 >> 2] | 0);
  HEAP32[i14 + 88 >> 2] = 0;
  i12 = (HEAP32[i14 + 156 >> 2] | 0) + 4 | 0;
  HEAP32[i12 >> 2] = HEAP32[i12 >> 2] & -2;
 } else HEAP32[i14 + 88 >> 2] = 0;
 HEAP8[i14 + 94 >> 0] = 0;
 i1 = i14 + 24 | 0;
 i3 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 HEAP32[i14 + 72 >> 2] = 0;
 HEAP32[i14 + 72 + 4 >> 2] = 0;
 HEAP32[i14 + 72 + 8 >> 2] = 0;
 HEAP32[i14 + 72 + 12 >> 2] = 0;
 i1 = i14 + 100 | 0;
 i3 = i1 + 56 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i3 = HEAP32[i10 + 96 >> 2] | 0;
 i4 = HEAP32[(HEAP32[i3 + 4 >> 2] | 0) + 160 >> 2] | 0;
 i12 = (i6 & 1024 | 0) == 0 ? i6 : i6 | 2049;
 i12 = (i12 & 1 | 0) == 0 ? i12 : i12 & -15 | 10;
 L16 : do if (((i12 & 32770 | 0) == 0 & (i4 | 0) != 0 ? (i7 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0, (i7 & 768 | 0) == 256) : 0) ? (i8 = HEAP32[i10 + 8 >> 2] | 0, (i8 & 8192 | 0) == 0) : 0) {
  do if (!(i12 & 2048)) {
   i6 = HEAP32[i10 + 128 >> 2] | 0;
   i1 = (HEAP32[i6 + 4 >> 2] | 0) == 0;
   if (!(HEAP32[i6 + 12 >> 2] | 0)) if (i1) {
    i11 = 25;
    break L16;
   } else break; else if (i1) break; else {
    i11 = 25;
    break L16;
   }
  } while (0);
  if (((i12 & 32 | 0) == 0 ? !((i12 & 983040 | 0) == 65536 | (i7 & 1024 | 0) == 0) : 0) ? (HEAP8[(HEAP32[i10 + 128 >> 2] | 0) + 56 >> 0] | 0) == 0 : 0) {
   if (!(i8 & 8)) {
    i11 = 25;
    break;
   }
   if (!(HEAP32[i10 + 732 >> 2] | 0)) {
    i11 = 25;
    break;
   }
   if (HEAP16[i10 + 260 + 26 >> 1] | 0) {
    i11 = 25;
    break;
   }
  }
  if (((i12 & 8 | 0) == 0 & (i8 & 2 | 0) != 0 ? (FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i3 + 12 >> 2] | 0) + 80 >> 2] & 63](i14, HEAP32[i10 + 88 >> 2] | 0, i9, i12 | 16384) | 0) == 0 : 0) ? (HEAP32[i14 + 72 >> 2] | 0) == 1651078259 : 0) {
   i1 = 0;
   break;
  }
  i8 = (HEAP32[i10 + 128 >> 2] | 0) + 28 | 0;
  i7 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 20 >> 2] | 0) + 12 >> 2] & 63](i4, i14, HEAP32[i10 + 88 >> 2] | 0, i9, i12) | 0;
  HEAP32[i8 >> 2] = i7;
 } else i11 = 25; while (0);
 if ((i11 | 0) == 25) {
  i1 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i3 + 12 >> 2] | 0) + 80 >> 2] & 63](i14, HEAP32[i10 + 88 >> 2] | 0, i9, i12) | 0;
  if (i1) {
   i14 = i1;
   return i14 | 0;
  }
  if ((HEAP32[i14 + 72 >> 2] | 0) == 1869968492) {
   i1 = _FT_Outline_Check(i14 + 108 | 0) | 0;
   if (i1) {
    i14 = i1;
    return i14 | 0;
   }
   if (!(i12 & 2)) {
    if (!(i12 & 16)) {
     HEAP32[i14 + 44 >> 2] = HEAP32[i14 + 44 >> 2] & -64;
     HEAP32[i14 + 48 >> 2] = HEAP32[i14 + 48 >> 2] & -64;
     i7 = HEAP32[i14 + 32 >> 2] | 0;
     i6 = i7 + 63 + (HEAP32[i14 + 24 >> 2] | 0) & -64;
     i8 = HEAP32[i14 + 36 >> 2] | 0;
     i11 = i8 - (HEAP32[i14 + 28 >> 2] | 0) & -64;
     HEAP32[i14 + 32 >> 2] = i7 & -64;
     HEAP32[i14 + 36 >> 2] = i8 + 63 & -64;
     HEAP32[i14 + 24 >> 2] = i6 - (i7 & -64);
     HEAP32[i14 + 28 >> 2] = (i8 + 63 & -64) - i11;
    } else {
     HEAP32[i14 + 32 >> 2] = HEAP32[i14 + 32 >> 2] & -64;
     HEAP32[i14 + 36 >> 2] = (HEAP32[i14 + 36 >> 2] | 0) + 63 & -64;
     i7 = HEAP32[i14 + 44 >> 2] | 0;
     i6 = i7 + 63 + (HEAP32[i14 + 24 >> 2] | 0) & -64;
     i11 = HEAP32[i14 + 48 >> 2] | 0;
     i8 = i11 + 63 + (HEAP32[i14 + 28 >> 2] | 0) & -64;
     HEAP32[i14 + 44 >> 2] = i7 & -64;
     HEAP32[i14 + 48 >> 2] = i11 & -64;
     HEAP32[i14 + 24 >> 2] = i6 - (i7 & -64);
     HEAP32[i14 + 28 >> 2] = i8 - (i11 & -64);
    }
    HEAP32[i14 + 40 >> 2] = (HEAP32[i14 + 40 >> 2] | 0) + 32 & -64;
    HEAP32[i14 + 52 >> 2] = (HEAP32[i14 + 52 >> 2] | 0) + 32 & -64;
    i1 = 0;
   } else i1 = 0;
  } else i1 = 0;
 }
 if (!(i12 & 16)) {
  i3 = 0;
  i4 = HEAP32[i14 + 40 >> 2] | 0;
 } else {
  i3 = HEAP32[i14 + 52 >> 2] | 0;
  i4 = 0;
 }
 HEAP32[i14 + 64 >> 2] = i4;
 HEAP32[i14 + 68 >> 2] = i3;
 if ((i12 & 8192 | 0) == 0 ? (HEAP32[i10 + 8 >> 2] & 1 | 0) != 0 : 0) {
  i11 = HEAP32[i10 + 88 >> 2] | 0;
  HEAP32[i14 + 56 >> 2] = _FT_MulDiv(HEAP32[i14 + 56 >> 2] | 0, HEAP32[i11 + 16 >> 2] | 0, 64) | 0;
  HEAP32[i14 + 60 >> 2] = _FT_MulDiv(HEAP32[i14 + 60 >> 2] | 0, HEAP32[i11 + 20 >> 2] | 0, 64) | 0;
 }
 if ((i12 & 2048 | 0) == 0 ? (i13 = HEAP32[i10 + 128 >> 2] | 0, i2 = HEAP32[i13 + 28 >> 2] | 0, (i2 | 0) != 0) : 0) {
  i6 = HEAP32[(HEAP32[(HEAP32[i14 + 4 >> 2] | 0) + 96 >> 2] | 0) + 4 >> 2] | 0;
  i3 = HEAP32[i6 + 156 >> 2] | 0;
  if (i3) {
   i4 = HEAP32[i14 + 72 >> 2] | 0;
   if ((HEAP32[i3 + 16 >> 2] | 0) == (i4 | 0)) {
    i1 = i3;
    i11 = 49;
   } else i11 = 44;
  } else {
   i4 = HEAP32[i14 + 72 >> 2] | 0;
   i11 = 44;
  }
  L66 : do if ((i11 | 0) == 44) {
   L68 : do if ((i6 | 0) != 0 ? (i5 = HEAP32[i6 + 148 >> 2] | 0, (i5 | 0) != 0) : 0) {
    while (1) {
     i3 = HEAP32[i5 + 8 >> 2] | 0;
     if ((HEAP32[i3 + 16 >> 2] | 0) == (i4 | 0)) break;
     i5 = HEAP32[i5 + 4 >> 2] | 0;
     if (!i5) break L68;
    }
    if (i3) {
     i1 = i3;
     i11 = 49;
     break L66;
    }
   } while (0);
   if ((i4 | 0) == 1869968492) {
    if (i2 & 1) {
     _FT_Outline_Transform(i14 + 108 | 0, i13 + 4 | 0);
     i2 = HEAP32[i13 + 28 >> 2] | 0;
    }
    if (i2 & 2) _FT_Outline_Translate(i14 + 108 | 0, HEAP32[i13 + 20 >> 2] | 0, HEAP32[i13 + 24 >> 2] | 0);
   }
  } while (0);
  if ((i11 | 0) == 49) i1 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 44 >> 2] & 63](i1, i14, i13 + 4 | 0, i13 + 20 | 0) | 0;
  _FT_Vector_Transform(i14 + 64 | 0, i13 + 4 | 0);
 }
 if (i1) {
  i14 = i1;
  return i14 | 0;
 }
 i1 = HEAP32[i14 + 72 >> 2] | 0;
 L87 : do if ((i1 | 0) < 1668246896) {
  switch (i1 | 0) {
  case 1651078259:
   {
    i1 = 0;
    break;
   }
  default:
   break L87;
  }
  return i1 | 0;
 } else {
  switch (i1 | 0) {
  case 1668246896:
   {
    i1 = 0;
    break;
   }
  default:
   break L87;
  }
  return i1 | 0;
 } while (0);
 if (!(i12 & 4)) {
  i14 = 0;
  return i14 | 0;
 }
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 if (!i1) {
  i14 = 6;
  return i14 | 0;
 }
 i14 = _FT_Render_Glyph_Internal(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 4 >> 2] | 0, i14, (i12 & 4096 | 0) == 0 | (i12 >>> 16 & 15 | 0) != 0 ? i12 >>> 16 & 15 : 2) | 0;
 return i14 | 0;
}
function __ZN20ShaderConstantBuffer16CreateFromShaderEPK6ShaderPKc(i11, i2, i3) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 HEAP32[i11 + 24 >> 2] = 0;
 i1 = HEAP32[i11 + 4 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i8 = __ZNK6Shader13FindUboByNameEPKc(i2, i3) | 0;
 if (!i8) {
  STACKTOP = i12;
  return;
 }
 if ((HEAP32[i8 + 36 >> 2] | 0) == (HEAP32[i8 + 32 >> 2] | 0)) {
  STACKTOP = i12;
  return;
 }
 i9 = 0;
 do {
  _memset(i12 | 0, 0, 156) | 0;
  i3 = HEAP32[(HEAP32[i8 + 32 >> 2] | 0) + (i9 * 48 | 0) + 16 >> 2] | 0;
  if (!i3) {
   HEAP8[i12 >> 0] = 0;
   i1 = 0;
  } else {
   i1 = 0;
   do {
    i2 = HEAP8[i3 + i1 >> 0] | 0;
    if (!(i2 << 24 >> 24)) break;
    HEAP8[i12 + i1 >> 0] = i2;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < 128);
   HEAP8[i12 + i1 >> 0] = 0;
  }
  HEAP32[i12 + 132 >> 2] = i1;
  HEAP32[i12 + 136 >> 2] = -1;
  HEAP32[i12 + 140 >> 2] = -1;
  i1 = __Z26StringToEngineConstantTypePKc(i12) | 0;
  if ((i1 | 0) != 2147483647) HEAP8[i11 + i1 >> 0] = HEAP32[i11 + 24 >> 2];
  i3 = HEAP32[(HEAP32[i8 + 32 >> 2] | 0) + (i9 * 48 | 0) >> 2] | 0;
  L22 : do if ((i3 | 0) != 298502) {
   L24 : do if (i3) {
    i1 = 298502;
    i4 = i3;
    while (1) {
     i2 = HEAP8[i4 >> 0] | 0;
     i5 = HEAP8[i1 >> 0] | 0;
     if (!(i2 << 24 >> 24)) {
      i7 = 18;
      break;
     }
     if (!(i5 << 24 >> 24)) {
      i7 = 19;
      break;
     }
     if (i2 << 24 >> 24 == i5 << 24 >> 24) {
      i1 = i1 + 1 | 0;
      i4 = i4 + 1 | 0;
     } else {
      i7 = 19;
      break;
     }
    }
    if ((i7 | 0) == 18) {
     i7 = 0;
     if (i5 << 24 >> 24 == 0 | (i3 | 0) == 298512) break L22;
    } else if ((i7 | 0) == 19 ? (i7 = 0, (i3 | 0) == 298512) : 0) break L22;
    if (i3) {
     i1 = 298512;
     i4 = i3;
     while (1) {
      i2 = HEAP8[i4 >> 0] | 0;
      i5 = HEAP8[i1 >> 0] | 0;
      if (!(i2 << 24 >> 24)) {
       i7 = 24;
       break;
      }
      if (!(i5 << 24 >> 24)) {
       i7 = 25;
       break;
      }
      if (i2 << 24 >> 24 == i5 << 24 >> 24) {
       i1 = i1 + 1 | 0;
       i4 = i4 + 1 | 0;
      } else {
       i7 = 25;
       break;
      }
     }
     if ((i7 | 0) == 24) {
      i7 = 0;
      if (i5 << 24 >> 24 == 0 | (i3 | 0) == 298528) break L22;
     } else if ((i7 | 0) == 25 ? (i7 = 0, (i3 | 0) == 298528) : 0) break L22;
     if (i3) {
      i1 = 298528;
      i4 = i3;
      while (1) {
       i2 = HEAP8[i4 >> 0] | 0;
       i5 = HEAP8[i1 >> 0] | 0;
       if (!(i2 << 24 >> 24)) {
        i7 = 30;
        break;
       }
       if (!(i5 << 24 >> 24)) {
        i7 = 31;
        break;
       }
       if (i2 << 24 >> 24 == i5 << 24 >> 24) {
        i1 = i1 + 1 | 0;
        i4 = i4 + 1 | 0;
       } else {
        i7 = 31;
        break;
       }
      }
      if ((i7 | 0) == 30) {
       i7 = 0;
       if (i5 << 24 >> 24 == 0 | (i3 | 0) == 298538) break L22;
      } else if ((i7 | 0) == 31 ? (i7 = 0, (i3 | 0) == 298538) : 0) break L22;
      if (i3) {
       i1 = 298538;
       i4 = i3;
       while (1) {
        i2 = HEAP8[i4 >> 0] | 0;
        i5 = HEAP8[i1 >> 0] | 0;
        if (!(i2 << 24 >> 24)) {
         i7 = 36;
         break;
        }
        if (!(i5 << 24 >> 24)) {
         i7 = 37;
         break;
        }
        if (i2 << 24 >> 24 == i5 << 24 >> 24) {
         i1 = i1 + 1 | 0;
         i4 = i4 + 1 | 0;
        } else {
         i7 = 37;
         break;
        }
       }
       if ((i7 | 0) == 36) {
        i7 = 0;
        if (i5 << 24 >> 24 == 0 | (i3 | 0) == 298550) break L22;
       } else if ((i7 | 0) == 37 ? (i7 = 0, (i3 | 0) == 298550) : 0) break L22;
       if (i3) {
        i1 = 298550;
        i4 = i3;
        while (1) {
         i2 = HEAP8[i4 >> 0] | 0;
         i5 = HEAP8[i1 >> 0] | 0;
         if (!(i2 << 24 >> 24)) {
          i7 = 42;
          break;
         }
         if (!(i5 << 24 >> 24)) {
          i7 = 43;
          break;
         }
         if (i2 << 24 >> 24 == i5 << 24 >> 24) {
          i1 = i1 + 1 | 0;
          i4 = i4 + 1 | 0;
         } else {
          i7 = 43;
          break;
         }
        }
        if ((i7 | 0) == 42) {
         i7 = 0;
         if (i5 << 24 >> 24 == 0 | (i3 | 0) == 298566) break L22;
        } else if ((i7 | 0) == 43 ? (i7 = 0, (i3 | 0) == 298566) : 0) break L22;
        if (i3) {
         i4 = 298566;
         while (1) {
          i2 = HEAP8[i3 >> 0] | 0;
          i1 = HEAP8[i4 >> 0] | 0;
          if (!(i2 << 24 >> 24)) break;
          if (!(i1 << 24 >> 24)) break L24;
          if (i2 << 24 >> 24 == i1 << 24 >> 24) {
           i4 = i4 + 1 | 0;
           i3 = i3 + 1 | 0;
          } else break L24;
         }
         if (!(i1 << 24 >> 24)) break L22;
        }
       }
      }
     }
    }
   } while (0);
   i1 = HEAP32[i11 + 24 >> 2] | 0;
   i2 = HEAP32[i11 + 20 >> 2] | 0;
   if (i1 >>> 0 >= i2 >>> 0 ? (i10 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i10 >>> 0 >= i2 >>> 0) : 0) {
    i6 = __Znaj(i10 >>> 0 > 27531841 ? -1 : i10 * 156 | 0) | 0;
    if (i10) {
     i1 = i6;
     do {
      HEAP8[i1 >> 0] = 0;
      HEAP8[i1 + 128 >> 0] = 0;
      HEAP32[i1 + 132 >> 2] = 0;
      i1 = i1 + 156 | 0;
     } while ((i1 | 0) != (i6 + (i10 * 156 | 0) | 0));
     i1 = HEAP32[i11 + 24 >> 2] | 0;
    }
    i5 = HEAP32[i11 + 12 >> 2] | 0;
    if (!i1) if (!i5) i1 = 0; else i7 = 61; else {
     i4 = 0;
     do {
      i2 = 0;
      do {
       i3 = HEAP8[i5 + (i4 * 156 | 0) + i2 >> 0] | 0;
       if (!(i3 << 24 >> 24)) break;
       HEAP8[i6 + (i4 * 156 | 0) + i2 >> 0] = i3;
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) < 128);
      HEAP8[i6 + (i4 * 156 | 0) + i2 >> 0] = 0;
      HEAP32[i6 + (i4 * 156 | 0) + 132 >> 2] = i2;
      i7 = i6 + (i4 * 156 | 0) + 136 | 0;
      i3 = i5 + (i4 * 156 | 0) + 136 | 0;
      HEAP32[i7 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i7 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      HEAP32[i7 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
      HEAP32[i7 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
      HEAP32[i7 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i1 | 0));
     i7 = 61;
    }
    if ((i7 | 0) == 61) {
     i7 = 0;
     __ZdaPv(i5);
     i1 = HEAP32[i11 + 24 >> 2] | 0;
    }
    HEAP32[i11 + 12 >> 2] = i6;
    HEAP32[i11 + 20 >> 2] = i10;
   }
   _memcpy((HEAP32[i11 + 12 >> 2] | 0) + (i1 * 156 | 0) | 0, i12 | 0, 156) | 0;
   HEAP32[i11 + 24 >> 2] = (HEAP32[i11 + 24 >> 2] | 0) + 1;
  } while (0);
  i9 = i9 + 1 | 0;
 } while (i9 >>> 0 < (((HEAP32[i8 + 36 >> 2] | 0) - (HEAP32[i8 + 32 >> 2] | 0) | 0) / 48 | 0) >>> 0);
 STACKTOP = i12;
 return;
}

function __ZN11Application20CreateInstanceBufferEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 544 | 0;
 __ZN17VertexDeclarationC2E13PrimitiveType18PrimitiveIndexType(i5 + 372 | 0, 6, 0);
 HEAP32[i5 + 292 >> 2] = 5;
 HEAP32[i5 + 292 + 4 >> 2] = 2;
 HEAP8[i5 + 292 + 8 >> 0] = 4;
 HEAP8[i5 + 292 + 12 >> 0] = 99;
 HEAP8[i5 + 292 + 13 >> 0] = 111;
 HEAP8[i5 + 292 + 14 >> 0] = 108;
 HEAP8[i5 + 292 + 15 >> 0] = 111;
 HEAP8[i5 + 292 + 16 >> 0] = 114;
 HEAP8[i5 + 292 + 17 >> 0] = 49;
 HEAP8[i5 + 292 + 18 >> 0] = 0;
 HEAP32[i5 + 292 + 48 >> 2] = 6;
 i1 = i5 + 484 | 0;
 i2 = i5 + 292 | 0;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN17VertexDeclarationC2E13VertexElement(i5 + 344 | 0, i5 + 484 | 0);
 __ZplRK17VertexDeclarationS1_(i5 + 400 | 0, i5 + 372 | 0, i5 + 344 | 0);
 HEAP32[i5 + 212 >> 2] = 5;
 HEAP32[i5 + 212 + 4 >> 2] = 2;
 HEAP8[i5 + 212 + 8 >> 0] = 4;
 HEAP8[i5 + 212 + 12 >> 0] = 99;
 HEAP8[i5 + 212 + 13 >> 0] = 111;
 HEAP8[i5 + 212 + 14 >> 0] = 108;
 HEAP8[i5 + 212 + 15 >> 0] = 111;
 HEAP8[i5 + 212 + 16 >> 0] = 114;
 HEAP8[i5 + 212 + 17 >> 0] = 50;
 HEAP8[i5 + 212 + 18 >> 0] = 0;
 HEAP32[i5 + 212 + 48 >> 2] = 6;
 i1 = i5 + 484 | 0;
 i2 = i5 + 212 | 0;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN17VertexDeclarationC2E13VertexElement(i5 + 264 | 0, i5 + 484 | 0);
 __ZplRK17VertexDeclarationS1_(i5 + 428 | 0, i5 + 400 | 0, i5 + 264 | 0);
 HEAP32[i5 + 132 >> 2] = 1;
 HEAP32[i5 + 132 + 4 >> 2] = 2;
 HEAP8[i5 + 132 + 8 >> 0] = 16;
 HEAP8[i5 + 132 + 12 >> 0] = 119;
 HEAP8[i5 + 132 + 13 >> 0] = 111;
 HEAP8[i5 + 132 + 14 >> 0] = 114;
 HEAP8[i5 + 132 + 15 >> 0] = 108;
 HEAP8[i5 + 132 + 16 >> 0] = 100;
 HEAP8[i5 + 132 + 17 >> 0] = 77;
 HEAP8[i5 + 132 + 18 >> 0] = 97;
 HEAP8[i5 + 132 + 19 >> 0] = 116;
 HEAP8[i5 + 132 + 20 >> 0] = 114;
 HEAP8[i5 + 132 + 21 >> 0] = 105;
 HEAP8[i5 + 132 + 22 >> 0] = 120;
 HEAP8[i5 + 132 + 23 >> 0] = 0;
 HEAP32[i5 + 132 + 48 >> 2] = 11;
 i1 = i5 + 484 | 0;
 i2 = i5 + 132 | 0;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN17VertexDeclarationC2E13VertexElement(i5 + 184 | 0, i5 + 484 | 0);
 __ZplRK17VertexDeclarationS1_(i5 + 456 | 0, i5 + 428 | 0, i5 + 184 | 0);
 i1 = HEAP32[i5 + 184 >> 2] | 0;
 if (HEAP32[i5 + 184 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 184 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 184 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 184 >> 2] = 0;
 HEAP32[i5 + 184 + 4 >> 2] = 0;
 HEAP32[i5 + 184 + 8 >> 2] = 0;
 HEAP32[i5 + 184 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 428 >> 2] | 0;
 if (HEAP32[i5 + 428 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 428 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 428 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 428 >> 2] = 0;
 HEAP32[i5 + 428 + 4 >> 2] = 0;
 HEAP32[i5 + 428 + 8 >> 2] = 0;
 HEAP32[i5 + 428 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 264 >> 2] | 0;
 if (HEAP32[i5 + 264 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 264 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 264 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 264 >> 2] = 0;
 HEAP32[i5 + 264 + 4 >> 2] = 0;
 HEAP32[i5 + 264 + 8 >> 2] = 0;
 HEAP32[i5 + 264 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 400 >> 2] | 0;
 if (HEAP32[i5 + 400 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 400 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 400 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 400 >> 2] = 0;
 HEAP32[i5 + 400 + 4 >> 2] = 0;
 HEAP32[i5 + 400 + 8 >> 2] = 0;
 HEAP32[i5 + 400 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 344 >> 2] | 0;
 if (HEAP32[i5 + 344 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 344 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 344 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 344 >> 2] = 0;
 HEAP32[i5 + 344 + 4 >> 2] = 0;
 HEAP32[i5 + 344 + 8 >> 2] = 0;
 HEAP32[i5 + 344 + 12 >> 2] = 0;
 i1 = HEAP32[i5 + 372 >> 2] | 0;
 if (HEAP32[i5 + 372 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 372 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 372 + 12 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 372 >> 2] = 0;
 HEAP32[i5 + 372 + 4 >> 2] = 0;
 HEAP32[i5 + 372 + 8 >> 2] = 0;
 HEAP32[i5 + 372 + 12 >> 2] = 0;
 __ZN12VertexBufferC2EbbRK17VertexDeclarationi13ResourceUsagebb(i5, 1, 1, i5 + 456 | 0, HEAP32[i4 + 1816 >> 2] | 0, 1, 0, 0);
 __ZN12VertexBufferaSERKS_(i4 + 1868 | 0, i5) | 0;
 __ZN12VertexBufferD2Ev(i5);
 i1 = HEAP32[i5 + 456 >> 2] | 0;
 if (HEAP32[i5 + 456 + 12 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i5 + 456 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i5 + 456 + 12 >> 2] | 0) >>> 0);
 }
 if (!i1) {
  STACKTOP = i5;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i5;
 return;
}

function _t42_parse_charstrings(i1, i13) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i7 = HEAP32[i13 + 16 >> 2] | 0;
 i6 = HEAP32[i1 + 488 >> 2] | 0;
 i8 = HEAP32[i13 + 8 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[i13 + 28 >> 2] & 127](i13);
 i1 = HEAP32[i13 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i8 >>> 0) {
  i1 = HEAP8[i1 >> 0] | 0;
  L3 : do if (((i1 & 255) + -48 | 0) >>> 0 < 10) {
   HEAP32[i13 + 144 >> 2] = FUNCTION_TABLE_ii[HEAP32[i13 + 36 >> 2] & 63](i13) | 0;
   if (!(HEAP32[i13 + 12 >> 2] | 0)) {
    i4 = HEAP32[i13 >> 2] | 0;
    break;
   } else return;
  } else {
   if (i1 << 24 >> 24 != 60) {
    i1 = 3;
    break L1;
   }
   FUNCTION_TABLE_vi[HEAP32[i13 + 32 >> 2] & 127](i13);
   if (HEAP32[i13 + 12 >> 2] | 0) return;
   FUNCTION_TABLE_vi[HEAP32[i13 + 28 >> 2] & 127](i13);
   i3 = HEAP32[i13 >> 2] | 0;
   if (i3 >>> 0 < i8 >>> 0) {
    i1 = i3;
    i2 = 0;
    L13 : while (1) {
     switch (HEAP8[i1 >> 0] | 0) {
     case 62:
      {
       i5 = i2;
       i11 = 10;
       break L13;
      }
     case 47:
      {
       i2 = i2 + 1 | 0;
       break;
      }
     default:
      {}
     }
     FUNCTION_TABLE_vi[HEAP32[i13 + 32 >> 2] & 127](i13);
     if (HEAP32[i13 + 12 >> 2] | 0) {
      i11 = 45;
      break;
     }
     FUNCTION_TABLE_vi[HEAP32[i13 + 28 >> 2] & 127](i13);
     i1 = HEAP32[i13 >> 2] | 0;
     if (i1 >>> 0 >= i8 >>> 0) {
      i4 = i1;
      break L3;
     }
    }
    if ((i11 | 0) == 10) {
     HEAP32[i13 + 144 >> 2] = i5;
     HEAP32[i13 >> 2] = i3;
     i4 = i3;
     break;
    } else if ((i11 | 0) == 45) return;
   } else i4 = i3;
  } while (0);
  if (i4 >>> 0 < i8 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i6 >> 2] >> 2] & 127](i13 + 200 | 0, HEAP32[i13 + 144 >> 2] | 0, i7) | 0;
   if (!i1) {
    i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i6 >> 2] >> 2] & 127](i13 + 148 | 0, HEAP32[i13 + 144 >> 2] | 0, i7) | 0;
    if (!i1) {
     i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i6 >> 2] >> 2] & 127](i13 + 252 | 0, 4, i7) | 0;
     if (!i1) {
      i6 = 0;
      i4 = 0;
      i5 = 0;
      L27 : while (1) {
       do {
        FUNCTION_TABLE_vi[HEAP32[i13 + 28 >> 2] & 127](i13);
        i2 = HEAP32[i13 >> 2] | 0;
        if (i2 >>> 0 >= i8 >>> 0) {
         i9 = i6;
         i10 = i4;
         i12 = i5;
         break L27;
        }
        switch (HEAP8[i2 >> 0] | 0) {
        case 62:
         {
          i9 = i6;
          i10 = i4;
          i12 = i5;
          break L27;
         }
        case 101:
         {
          if (((i2 + 3 | 0) >>> 0 < i8 >>> 0 ? (HEAP8[i2 + 1 >> 0] | 0) == 110 : 0) ? (HEAP8[i2 + 2 >> 0] | 0) == 100 : 0) switch (HEAP8[i2 + 3 >> 0] | 0) {
          case 0:
          case 12:
          case 10:
          case 13:
          case 9:
          case 32:
           {
            i9 = i6;
            i10 = i4;
            i12 = i5;
            break L27;
           }
          default:
           {}
          }
          break;
         }
        default:
         {}
        }
        FUNCTION_TABLE_vi[HEAP32[i13 + 32 >> 2] & 127](i13);
        if (HEAP32[i13 + 12 >> 2] | 0) {
         i11 = 45;
         break L27;
        }
       } while ((HEAP8[i2 >> 0] | 0) != 47);
       if ((i2 + 1 | 0) >>> 0 >= i8 >>> 0) {
        i1 = 3;
        break L1;
       }
       i3 = (HEAP32[i13 >> 2] | 0) - (i2 + 1) | 0;
       i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 192 >> 2] & 63](i13 + 148 | 0, i6, i2 + 1 | 0, i3 + 1 | 0) | 0;
       if (i1) break L1;
       HEAP8[(HEAP32[(HEAP32[i13 + 172 >> 2] | 0) + (i6 << 2) >> 2] | 0) + i3 >> 0] = 0;
       if ((HEAP8[i2 + 1 >> 0] | 0) == 46) {
        i7 = (_strcmp(323974, HEAP32[(HEAP32[i13 + 172 >> 2] | 0) + (i6 << 2) >> 2] | 0) | 0) == 0;
        i4 = i7 ? 1 : i4;
        i5 = i7 ? i6 : i5;
       }
       FUNCTION_TABLE_vi[HEAP32[i13 + 28 >> 2] & 127](i13);
       i2 = HEAP32[i13 >> 2] | 0;
       FUNCTION_TABLE_ii[HEAP32[i13 + 36 >> 2] & 63](i13) | 0;
       i3 = HEAP32[i13 >> 2] | 0;
       if (i3 >>> 0 >= i8 >>> 0) {
        i1 = 3;
        break L1;
       }
       i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 244 >> 2] & 63](i13 + 200 | 0, i6, i2, i3 - i2 + 1 | 0) | 0;
       if (i1) break L1;
       HEAP8[(HEAP32[(HEAP32[i13 + 224 >> 2] | 0) + (i6 << 2) >> 2] | 0) + (i3 - i2) >> 0] = 0;
       i1 = i6 + 1 | 0;
       if (i1 >>> 0 < (HEAP32[i13 + 144 >> 2] | 0) >>> 0) i6 = i1; else {
        i9 = i1;
        i10 = i4;
        i12 = i5;
        break;
       }
      }
      if ((i11 | 0) == 45) return;
      HEAP32[i13 + 144 >> 2] = i9;
      if (i10 << 24 >> 24) {
       i1 = HEAP32[HEAP32[i13 + 172 >> 2] >> 2] | 0;
       if (!(_strcmp(323974, i1) | 0)) return;
       i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 296 >> 2] & 63](i13 + 252 | 0, 0, i1, HEAP32[HEAP32[i13 + 176 >> 2] >> 2] | 0) | 0;
       if (!i1) {
        i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 296 >> 2] & 63](i13 + 252 | 0, 1, HEAP32[HEAP32[i13 + 224 >> 2] >> 2] | 0, HEAP32[HEAP32[i13 + 228 >> 2] >> 2] | 0) | 0;
        if (!i1) {
         i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 296 >> 2] & 63](i13 + 252 | 0, 2, HEAP32[(HEAP32[i13 + 172 >> 2] | 0) + (i12 << 2) >> 2] | 0, HEAP32[(HEAP32[i13 + 176 >> 2] | 0) + (i12 << 2) >> 2] | 0) | 0;
         if (!i1) {
          i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 296 >> 2] & 63](i13 + 252 | 0, 3, HEAP32[(HEAP32[i13 + 224 >> 2] | 0) + (i12 << 2) >> 2] | 0, HEAP32[(HEAP32[i13 + 228 >> 2] | 0) + (i12 << 2) >> 2] | 0) | 0;
          if (!i1) {
           i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 192 >> 2] & 63](i13 + 148 | 0, i12, HEAP32[HEAP32[i13 + 276 >> 2] >> 2] | 0, HEAP32[HEAP32[i13 + 280 >> 2] >> 2] | 0) | 0;
           if (!i1) {
            i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 244 >> 2] & 63](i13 + 200 | 0, i12, HEAP32[(HEAP32[i13 + 276 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[i13 + 280 >> 2] | 0) + 4 >> 2] | 0) | 0;
            if (!i1) {
             i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 192 >> 2] & 63](i13 + 148 | 0, 0, HEAP32[(HEAP32[i13 + 276 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[i13 + 280 >> 2] | 0) + 8 >> 2] | 0) | 0;
             if (!i1) {
              i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 244 >> 2] & 63](i13 + 200 | 0, 0, HEAP32[(HEAP32[i13 + 276 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[i13 + 280 >> 2] | 0) + 12 >> 2] | 0) | 0;
              if (!i1) return;
             }
            }
           }
          }
         }
        }
       }
      } else i1 = 3;
     }
    }
   }
  } else i1 = 3;
 } else i1 = 3; while (0);
 HEAP32[i13 + 12 >> 2] = i1;
 return;
}

function _tt_face_load_eblc(i5, i15) {
 i5 = i5 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = HEAP32[i15 + 28 >> 2] | 0;
 HEAP32[i5 + 612 >> 2] = 0;
 i13 = FUNCTION_TABLE_iiiii[HEAP32[i5 + 508 >> 2] & 63](i5, 1161972803, i15, 0) | 0;
 HEAP32[i17 + 4 >> 2] = i13;
 if ((i13 | 0) != 0 ? (i1 = FUNCTION_TABLE_iiiii[HEAP32[i5 + 508 >> 2] & 63](i5, 1651273571, i15, 0) | 0, HEAP32[i17 + 4 >> 2] = i1, (i1 | 0) != 0) : 0) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 i13 = _FT_Stream_Pos(i15) | 0;
 i1 = _FT_Stream_EnterFrame(i15, 8) | 0;
 HEAP32[i17 + 4 >> 2] = i1;
 if (i1) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 i12 = _FT_Stream_GetULong(i15) | 0;
 i4 = _FT_Stream_GetULong(i15) | 0;
 _FT_Stream_ExitFrame(i15);
 if ((i12 | 0) != 131072 | i4 >>> 0 > 65535) {
  HEAP32[i17 + 4 >> 2] = 3;
  i16 = 3;
  STACKTOP = i17;
  return i16 | 0;
 }
 i3 = _ft_mem_realloc(i14, 48, 0, i4, 0, i17 + 4 | 0) | 0;
 HEAP32[i5 + 616 >> 2] = i3;
 i1 = HEAP32[i17 + 4 >> 2] | 0;
 if (i1) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 HEAP32[i5 + 612 >> 2] = i4;
 i1 = _FT_Stream_EnterFrame(i15, i4 * 48 | 0) | 0;
 HEAP32[i17 + 4 >> 2] = i1;
 if (i1) {
  i16 = i1;
  STACKTOP = i17;
  return i16 | 0;
 }
 L18 : do if (i4) {
  i2 = i4;
  i1 = i3;
  while (1) {
   i12 = _FT_Stream_ReadFields(i15, 285380, i1) | 0;
   HEAP32[i17 + 4 >> 2] = i12;
   if (i12) break;
   i12 = _FT_Stream_ReadFields(i15, 285400, i1 + 16 | 0) | 0;
   HEAP32[i17 + 4 >> 2] = i12;
   if (i12) break;
   i12 = _FT_Stream_ReadFields(i15, 285400, i1 + 28 | 0) | 0;
   HEAP32[i17 + 4 >> 2] = i12;
   if (i12) break;
   i12 = _FT_Stream_ReadFields(i15, 285452, i1) | 0;
   HEAP32[i17 + 4 >> 2] = i12;
   if (i12) break;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i1 = i1 + 48 | 0;
  }
  _FT_Stream_ExitFrame(i15);
  if (i4) {
   i12 = HEAP32[i5 + 616 >> 2] | 0;
   L28 : while (1) {
    i1 = HEAP32[i12 >> 2] | 0;
    i3 = i12 + 8 | 0;
    i11 = _FT_Stream_Seek(i15, (HEAP32[i3 >> 2] | 0) + i13 | 0) | 0;
    HEAP32[i17 + 4 >> 2] = i11;
    if (i11) break L18;
    i11 = _FT_Stream_EnterFrame(i15, HEAP32[i12 >> 2] << 3) | 0;
    HEAP32[i17 + 4 >> 2] = i11;
    if (i11) break L18;
    i2 = _ft_mem_realloc(i14, 40, 0, HEAP32[i12 >> 2] | 0, 0, i17 + 4 | 0) | 0;
    i5 = i12 + 4 | 0;
    HEAP32[i5 >> 2] = i2;
    if (HEAP32[i17 + 4 >> 2] | 0) break L18;
    if (i1) while (1) {
     HEAP16[i2 >> 1] = _FT_Stream_GetUShort(i15) | 0;
     HEAP16[i2 + 2 >> 1] = _FT_Stream_GetUShort(i15) | 0;
     i11 = (HEAP32[i3 >> 2] | 0) + i13 | 0;
     HEAP32[i2 + 36 >> 2] = i11 + (_FT_Stream_GetULong(i15) | 0);
     i1 = i1 + -1 | 0;
     if (!i1) break; else i2 = i2 + 40 | 0;
    }
    _FT_Stream_ExitFrame(i15);
    i1 = HEAP32[i12 >> 2] | 0;
    L38 : do if (i1) {
     i11 = i1;
     i10 = HEAP32[i5 >> 2] | 0;
     while (1) {
      i1 = _FT_Stream_Seek(i15, HEAP32[i10 + 36 >> 2] | 0) | 0;
      HEAP32[i17 + 4 >> 2] = i1;
      if (i1) {
       i16 = 53;
       break L28;
      }
      i1 = _FT_Stream_EnterFrame(i15, 8) | 0;
      HEAP32[i17 + 4 >> 2] = i1;
      if (i1) {
       i16 = 53;
       break L28;
      }
      i6 = i10 + 4 | 0;
      HEAP16[i6 >> 1] = _FT_Stream_GetUShort(i15) | 0;
      HEAP16[i10 + 6 >> 1] = _FT_Stream_GetUShort(i15) | 0;
      i5 = i10 + 8 | 0;
      HEAP32[i5 >> 2] = _FT_Stream_GetULong(i15) | 0;
      _FT_Stream_ExitFrame(i15);
      i1 = HEAP32[i15 + 28 >> 2] | 0;
      i6 = HEAP16[i6 >> 1] | 0;
      L44 : do switch (i6 & 65535 | 0) {
      case 3:
      case 1:
       {
        i7 = HEAP16[i10 + 2 >> 1] | 0;
        i8 = HEAP16[i10 >> 1] | 0;
        if ((i7 & 65535) < (i8 & 65535)) {
         i16 = 29;
         break L28;
        }
        HEAP32[i10 + 24 >> 2] = (i7 & 65535) - (i8 & 65535) + 1;
        i2 = (i7 & 65535) - (i8 & 65535) + 2 | 0;
        i9 = i10 + 28 | 0;
        HEAP32[i9 >> 2] = _ft_mem_realloc(i1, 4, 0, i2, 0, i17) | 0;
        i1 = HEAP32[i17 >> 2] | 0;
        if (i1) break L28;
        i1 = _FT_Stream_EnterFrame(i15, Math_imul(i2, i6 << 16 >> 16 == 1 ? 4 : 2) | 0) | 0;
        HEAP32[i17 >> 2] = i1;
        if (i1) break L28;
        if (i2) {
         i3 = 0;
         do {
          i1 = HEAP32[i5 >> 2] | 0;
          if (i6 << 16 >> 16 == 1) i2 = _FT_Stream_GetULong(i15) | 0; else i2 = (_FT_Stream_GetUShort(i15) | 0) & 65535;
          HEAP32[(HEAP32[i9 >> 2] | 0) + (i3 << 2) >> 2] = i2 + i1;
          i3 = i3 + 1 | 0;
         } while ((i3 | 0) != ((i7 & 65535) + 2 - (i8 & 65535) | 0));
        }
        _FT_Stream_ExitFrame(i15);
        i1 = HEAP32[i17 >> 2] | 0;
        break;
       }
      case 2:
       {
        HEAP32[i10 + 12 >> 2] = _FT_Stream_ReadULong(i15, i17 + 8 | 0) | 0;
        i1 = HEAP32[i17 + 8 >> 2] | 0;
        if (!i1) {
         i1 = _FT_Stream_ReadFields(i15, 285480, i10 + 16 | 0) | 0;
         HEAP32[i17 + 8 >> 2] = i1;
         i1 = (i1 | 0) != 0 & 1;
        }
        HEAP32[i17 >> 2] = i1;
        break;
       }
      case 4:
       {
        i1 = _Load_SBit_Range_Codes(i10, i15, 1) | 0;
        HEAP32[i17 >> 2] = i1;
        break;
       }
      case 5:
       {
        HEAP32[i10 + 12 >> 2] = _FT_Stream_ReadULong(i15, i17 + 8 | 0) | 0;
        i1 = HEAP32[i17 + 8 >> 2] | 0;
        if (i1) {
         i16 = 44;
         break L28;
        }
        i1 = (_FT_Stream_ReadFields(i15, 285480, i10 + 16 | 0) | 0) != 0;
        HEAP32[i17 >> 2] = i1 & 1;
        if (i1) {
         i1 = i1 & 1;
         break L44;
        }
        i1 = _Load_SBit_Range_Codes(i10, i15, 0) | 0;
        HEAP32[i17 >> 2] = i1;
        break;
       }
      default:
       {
        i16 = 47;
        break L28;
       }
      } while (0);
      HEAP32[i17 + 4 >> 2] = i1;
      if (i1) {
       i16 = 53;
       break L28;
      }
      i11 = i11 + -1 | 0;
      if (!i11) break L38; else i10 = i10 + 40 | 0;
     }
    } while (0);
    i4 = i4 + -1 | 0;
    if (!i4) break L18; else i12 = i12 + 48 | 0;
   }
   if ((i16 | 0) == 29) {
    HEAP32[i17 >> 2] = 3;
    i1 = 3;
   } else if ((i16 | 0) == 44) HEAP32[i17 >> 2] = i1; else if ((i16 | 0) == 47) {
    HEAP32[i17 >> 2] = 3;
    i1 = 3;
   } else if ((i16 | 0) == 53) {
    STACKTOP = i17;
    return i1 | 0;
   }
   HEAP32[i17 + 4 >> 2] = i1;
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  }
 } else _FT_Stream_ExitFrame(i15); while (0);
 i16 = HEAP32[i17 + 4 >> 2] | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function _af_latin_hints_compute_segments(i18, i17) {
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i13 = HEAP32[i18 >> 2] | 0;
 i15 = HEAP32[i18 + 40 >> 2] | 0;
 i16 = HEAP32[i18 + 36 >> 2] | 0;
 i6 = i20 + 16 | 0;
 i8 = i6 + 31 | 0;
 do {
  HEAP8[i6 >> 0] = 0;
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) < (i8 | 0));
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i14 = HEAP32[i18 + 44 + (i17 * 28 | 0) + 24 >> 2] | 0;
 i14 = (i14 | 0) < 0 ? 0 - i14 | 0 : i14;
 HEAP32[i18 + 44 + (i17 * 28 | 0) >> 2] = 0;
 i2 = HEAP32[i18 + 28 >> 2] | 0;
 i3 = HEAP32[i18 + 24 >> 2] | 0;
 if (!i17) {
  if ((i3 | 0) > 0) {
   i1 = i2;
   do {
    HEAP32[i1 + 24 >> 2] = HEAP16[i1 + 12 >> 1];
    HEAP32[i1 + 28 >> 2] = HEAP16[i1 + 14 >> 1];
    i1 = i1 + 40 | 0;
   } while (i1 >>> 0 < (i2 + (i3 * 40 | 0) | 0) >>> 0);
  }
 } else if ((i3 | 0) > 0) {
  i1 = i2;
  do {
   HEAP32[i1 + 24 >> 2] = HEAP16[i1 + 14 >> 1];
   HEAP32[i1 + 28 >> 2] = HEAP16[i1 + 12 >> 1];
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 < (i2 + (i3 * 40 | 0) | 0) >>> 0);
 }
 if ((i16 | 0) <= 0) {
  i19 = 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i2 = 0;
 i12 = i15;
 i7 = i14;
 L12 : while (1) {
  i4 = HEAP32[i12 >> 2] | 0;
  i1 = HEAP32[i4 + 36 >> 2] | 0;
  L14 : do if ((i4 | 0) == (i1 | 0)) i1 = i7; else {
   i3 = HEAP8[i1 + 3 >> 0] | 0;
   L16 : do if (((i3 << 24 >> 24 < 0 ? 0 - (i3 << 24 >> 24) | 0 : i3 << 24 >> 24) | 0) == (i14 | 0) ? (i11 = HEAP8[i4 + 3 >> 0] | 0, ((i11 << 24 >> 24 < 0 ? 0 - (i11 << 24 >> 24) | 0 : i11 << 24 >> 24) | 0) == (i14 | 0)) : 0) {
    if (((i3 << 24 >> 24 < 0 ? 0 - (i3 << 24 >> 24) | 0 : i3 << 24 >> 24) | 0) == (i14 | 0)) do {
     if ((i1 | 0) == (i4 | 0)) break L16;
     i1 = HEAP32[i1 + 36 >> 2] | 0;
     i11 = HEAP8[i1 + 3 >> 0] | 0;
    } while (((i11 << 24 >> 24 < 0 ? 0 - (i11 << 24 >> 24) | 0 : i11 << 24 >> 24) | 0) == (i14 | 0));
    i4 = HEAP32[i1 + 32 >> 2] | 0;
   } while (0);
   i3 = -32e3;
   i5 = 32e3;
   i6 = 0;
   i8 = 0;
   i11 = i4;
   i1 = i7;
   while (1) {
    if (i6) {
     i10 = HEAP32[i11 + 24 >> 2] | 0;
     i5 = (i10 | 0) < (i5 | 0) ? i10 : i5;
     i3 = (i10 | 0) > (i3 | 0) ? i10 : i3;
     if ((i11 | 0) == (i4 | 0) ? 1 : (HEAP8[i11 + 3 >> 0] | 0) != (i1 | 0)) {
      HEAP32[i2 + 44 >> 2] = i11;
      HEAP16[i2 + 2 >> 1] = (i5 + i3 | 0) >>> 1;
      i3 = HEAP32[i2 + 40 >> 2] | 0;
      if ((HEAP16[i11 >> 1] | HEAP16[i3 >> 1]) & 3) HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] | 1;
      i6 = HEAP32[i11 + 28 >> 2] | 0;
      i3 = HEAP32[i3 + 28 >> 2] | 0;
      i5 = (i3 | 0) < (i6 | 0) ? i3 : i6;
      i3 = (i3 | 0) > (i6 | 0) ? i3 : i6;
      HEAP16[i2 + 4 >> 1] = i5;
      HEAP16[i2 + 6 >> 1] = i3;
      HEAP16[i2 + 8 >> 1] = i3 - i5;
      i2 = 0;
      i6 = 0;
     }
    } else i6 = 0;
    if ((i11 | 0) == (i4 | 0)) if (!(i8 << 24 >> 24)) i10 = 1; else break L14; else i10 = i8;
    if (!i6) {
     i9 = HEAP8[i11 + 3 >> 0] | 0;
     if (((i9 << 24 >> 24 < 0 ? 0 - (i9 << 24 >> 24) | 0 : i9 << 24 >> 24) | 0) == (i14 | 0)) {
      HEAP32[i20 + 12 >> 2] = 0;
      i1 = HEAP32[i18 + 44 + (i17 * 28 | 0) >> 2] | 0;
      i2 = HEAP32[i18 + 44 + (i17 * 28 | 0) + 4 >> 2] | 0;
      if ((i1 | 0) < (i2 | 0)) i3 = HEAP32[i18 + 44 + (i17 * 28 | 0) + 8 >> 2] | 0; else {
       if ((i2 | 0) > 44739241) {
        i19 = 28;
        break L12;
       }
       i3 = (i2 >> 2 | 0) < -4 | (i2 + 4 + (i2 >> 2) | 0) > 44739242 ? 44739242 : i2 + 4 + (i2 >> 2) | 0;
       i2 = _ft_mem_realloc(i13, 48, i2, i3, HEAP32[i18 + 44 + (i17 * 28 | 0) + 8 >> 2] | 0, i20 + 12 | 0) | 0;
       HEAP32[i18 + 44 + (i17 * 28 | 0) + 8 >> 2] = i2;
       i1 = HEAP32[i20 + 12 >> 2] | 0;
       if (i1) break L12;
       HEAP32[i18 + 44 + (i17 * 28 | 0) + 4 >> 2] = i3;
       i1 = HEAP32[i18 + 44 + (i17 * 28 | 0) >> 2] | 0;
       i3 = i2;
      }
      HEAP32[i18 + 44 + (i17 * 28 | 0) >> 2] = i1 + 1;
      i2 = i3 + (i1 * 48 | 0) | 0;
      HEAP8[i2 >> 0] = 0;
      i5 = i3 + (i1 * 48 | 0) + 1 | 0;
      i6 = i5;
      i7 = i20 + 16 | 0;
      i8 = i6 + 31 | 0;
      do {
       HEAP8[i6 >> 0] = HEAP8[i7 >> 0] | 0;
       i6 = i6 + 1 | 0;
       i7 = i7 + 1 | 0;
      } while ((i6 | 0) < (i8 | 0));
      HEAP32[i3 + (i1 * 48 | 0) + 32 >> 2] = 32e3;
      i6 = i3 + (i1 * 48 | 0) + 36 | 0;
      HEAP32[i6 >> 2] = HEAP32[i20 >> 2];
      HEAP32[i6 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
      HEAP32[i6 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
      HEAP8[i5 >> 0] = i9;
      i5 = HEAP32[i11 + 24 >> 2] | 0;
      HEAP32[i3 + (i1 * 48 | 0) + 40 >> 2] = i11;
      HEAP32[i3 + (i1 * 48 | 0) + 44 >> 2] = i11;
      i3 = i5;
      i6 = 1;
      i1 = i9 << 24 >> 24;
     } else i6 = 0;
    }
    i8 = i10;
    i11 = HEAP32[i11 + 32 >> 2] | 0;
   }
  } while (0);
  i12 = i12 + 4 | 0;
  if (i12 >>> 0 >= (i15 + (i16 << 2) | 0) >>> 0) {
   i19 = 35;
   break;
  } else i7 = i1;
 }
 if ((i19 | 0) == 28) {
  HEAP32[i20 + 12 >> 2] = 64;
  i1 = 64;
 } else if ((i19 | 0) == 35) {
  i7 = HEAP32[i18 + 44 + (i17 * 28 | 0) >> 2] | 0;
  i4 = HEAP32[i18 + 44 + (i17 * 28 | 0) + 8 >> 2] | 0;
  if ((i7 | 0) > 0) i6 = i4; else {
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
  do {
   i1 = HEAP32[i6 + 40 >> 2] | 0;
   i2 = HEAP32[i6 + 44 >> 2] | 0;
   i3 = HEAP32[i1 + 28 >> 2] | 0;
   i5 = HEAP32[i2 + 28 >> 2] | 0;
   do if ((i1 | 0) != (i2 | 0)) {
    i1 = HEAP32[(HEAP32[i1 + 36 >> 2] | 0) + 28 >> 2] | 0;
    if ((i3 | 0) < (i5 | 0)) {
     if ((i3 | 0) > (i1 | 0)) {
      i19 = i6 + 8 | 0;
      HEAP16[i19 >> 1] = (HEAPU16[i19 >> 1] | 0) + ((i3 - i1 | 0) >>> 1);
     }
     i1 = HEAP32[(HEAP32[i2 + 32 >> 2] | 0) + 28 >> 2] | 0;
     if ((i1 | 0) <= (i5 | 0)) break;
     i19 = i6 + 8 | 0;
     HEAP16[i19 >> 1] = (HEAPU16[i19 >> 1] | 0) + ((i1 - i5 | 0) >>> 1);
     break;
    } else {
     if ((i1 | 0) > (i3 | 0)) {
      i19 = i6 + 8 | 0;
      HEAP16[i19 >> 1] = (HEAPU16[i19 >> 1] | 0) + ((i1 - i3 | 0) >>> 1);
     }
     i1 = HEAP32[(HEAP32[i2 + 32 >> 2] | 0) + 28 >> 2] | 0;
     if ((i5 | 0) <= (i1 | 0)) break;
     i19 = i6 + 8 | 0;
     HEAP16[i19 >> 1] = (HEAPU16[i19 >> 1] | 0) + ((i5 - i1 | 0) >>> 1);
     break;
    }
   } while (0);
   i6 = i6 + 48 | 0;
  } while (i6 >>> 0 < (i4 + (i7 * 48 | 0) | 0) >>> 0);
  i1 = 0;
  STACKTOP = i20;
  return i1 | 0;
 }
 i19 = i1;
 STACKTOP = i20;
 return i19 | 0;
}
function __Z10DecodeDXT1PKviiPhj13TextureFormat(i3, i14, i13, i11, i2, i12) {
 i3 = i3 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if (!i3) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305403, i16);
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 switch (i12 | 0) {
 case 85:
  {
   i1 = 16;
   break;
  }
 case 28:
  {
   i1 = 32;
   break;
  }
 default:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305451, i16 + 8 | 0);
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 if (((Math_imul(Math_imul(i13, i14) | 0, i1) | 0 | 7 | 0) / 8 | 0) >>> 0 > i2 >>> 0) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305570, i16 + 16 | 0);
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if ((i13 | 0) <= 0) {
  i15 = 1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i10 = (i14 + 3 | 0) > 7 ? ((i14 + 3 | 0) / 4 | 0) << 2 : 4;
 i1 = i3;
 i9 = 0;
 while (1) {
  if ((i14 | 0) > 0) {
   i6 = i9 << 2;
   i5 = Math_imul(i6, i14) | 0;
   i6 = (i13 - i6 | 0) < 4 ? i13 - i6 | 0 : 4;
   i7 = i1;
   i8 = 0;
   while (1) {
    i3 = i8 << 2;
    L23 : do if ((i12 | 0) >= 59) {
     L29 : do if ((i12 | 0) >= 88) {
      if ((i12 | 0) >= 1048578) if ((i12 | 0) < 4194324) switch (i12 | 0) {
      case 1048582:
       {
        i15 = 15;
        break L23;
       }
      case 1048583:
      case 1048579:
      case 1048578:
      case 1048580:
       {
        i15 = 16;
        break L23;
       }
      case 1048584:
      case 1048581:
       {
        i15 = 17;
        break L29;
       }
      default:
       {
        i15 = 20;
        break L23;
       }
      } else switch (i12 | 0) {
      case 4194339:
      case 4194337:
       {
        i15 = 15;
        break L23;
       }
      case 4194334:
      case 4194333:
       {
        i15 = 16;
        break L23;
       }
      case 4194324:
       break L23;
      case 4194356:
      case 4194354:
      case 4194331:
       {
        i15 = 17;
        break L29;
       }
      default:
       {
        i15 = 20;
        break L23;
       }
      }
      if ((i12 | 0) < 95) switch (i12 | 0) {
      case 93:
      case 92:
      case 91:
      case 90:
      case 89:
      case 88:
       {
        i15 = 15;
        break L23;
       }
      case 94:
       {
        i15 = 19;
        break L29;
       }
      default:
       {
        i15 = 20;
        break L23;
       }
      }
      if ((i12 | 0) < 99) switch (i12 | 0) {
      case 98:
      case 97:
      case 96:
      case 95:
       {
        i15 = 19;
        break L29;
       }
      default:
       {
        i15 = 20;
        break L23;
       }
      }
      if ((i12 | 0) < 1048576) switch (i12 | 0) {
      case 115:
       {
        i15 = 16;
        break L23;
       }
      case 99:
       {
        i15 = 19;
        break L29;
       }
      default:
       {
        i15 = 20;
        break L23;
       }
      } else switch (i12 | 0) {
      case 1048577:
       {
        i15 = 16;
        break L23;
       }
      case 1048576:
       break L23;
      default:
       {
        i15 = 20;
        break L23;
       }
      }
     } else {
      switch (i12 | 0) {
      case 87:
      case 69:
      case 68:
      case 67:
       {
        i15 = 15;
        break L23;
       }
      case 86:
      case 85:
      case 59:
       {
        i15 = 16;
        break L23;
       }
      case 66:
       break L23;
      case 65:
      case 64:
      case 63:
      case 62:
      case 61:
      case 60:
       {
        i15 = 17;
        break L29;
       }
      case 84:
      case 83:
      case 82:
      case 78:
      case 77:
      case 76:
      case 75:
      case 74:
      case 73:
       {
        i15 = 19;
        break L29;
       }
      case 81:
      case 80:
      case 79:
      case 72:
      case 71:
      case 70:
       break;
      default:
       {
        i15 = 20;
        break L23;
       }
      }
      i2 = 0;
      i15 = 21;
      break L23;
     } while (0);
     if ((i15 | 0) == 17) {
      i2 = 1;
      i15 = 21;
      break;
     } else if ((i15 | 0) == 19) {
      i2 = 1;
      i15 = 21;
      break;
     }
    } else switch (i12 | 0) {
    case 4:
    case 3:
    case 2:
    case 1:
     {
      i2 = 16;
      i15 = 21;
      break L23;
     }
    case 47:
    case 46:
    case 45:
    case 44:
    case 43:
    case 42:
    case 41:
    case 40:
    case 39:
    case 38:
    case 37:
    case 36:
    case 35:
    case 34:
    case 33:
    case 32:
    case 31:
    case 30:
    case 29:
    case 28:
    case 27:
    case 26:
    case 25:
    case 24:
    case 23:
     {
      i15 = 15;
      break L23;
     }
    case 58:
    case 57:
    case 56:
    case 55:
    case 54:
    case 53:
    case 52:
    case 51:
    case 50:
    case 49:
    case 48:
     {
      i15 = 16;
      break L23;
     }
    case 8:
    case 7:
    case 6:
    case 5:
     {
      i2 = 12;
      i15 = 21;
      break L23;
     }
    case 22:
    case 21:
    case 20:
    case 19:
    case 18:
    case 17:
    case 16:
    case 15:
    case 14:
    case 13:
    case 12:
    case 11:
    case 10:
    case 9:
     {
      i2 = 8;
      i15 = 21;
      break L23;
     }
    default:
     {
      i15 = 20;
      break L23;
     }
    } while (0);
    if ((i15 | 0) == 15) {
     i2 = 4;
     i15 = 21;
    } else if ((i15 | 0) == 16) {
     i2 = 2;
     i15 = 21;
    } else if ((i15 | 0) == 20) {
     __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i16 + 24 | 0);
     i2 = 0;
     i15 = 21;
    }
    L55 : do if ((i15 | 0) == 21) {
     i15 = 0;
     i4 = i11 + (Math_imul(i2, i3 + i5 | 0) | 0) | 0;
     i2 = (i14 - i3 | 0) < 4 ? i14 - i3 | 0 : 4;
     switch (i12 | 0) {
     case 85:
      {
       __Z23DecodeDXT1BlockToRGB565PKtPhiii(i7, i4, i14 << 1, i2, i6);
       break L55;
      }
     case 28:
      {
       __Z25DecodeDXT1BlockToRGBA8888PKtPhiii(i7, i4, i14 << 2, i2, i6);
       break L55;
      }
     default:
      break L55;
     }
    } while (0);
    i8 = i8 + 1 | 0;
    if ((i8 | 0) >= ((i14 + 3 | 0) / 4 | 0 | 0)) break; else i7 = i7 + 8 | 0;
   }
   i1 = i1 + (i10 << 1) | 0;
  }
  i9 = i9 + 1 | 0;
  if ((i9 | 0) >= ((i13 + 3 | 0) / 4 | 0 | 0)) {
   i1 = 1;
   break;
  }
 }
 STACKTOP = i16;
 return i1 | 0;
}

function _af_cjk_metrics_init(i20, i19) {
 i20 = i20 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0, i22 = 0, i23 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i18 = HEAP32[i19 + 92 >> 2] | 0;
 HEAP32[i20 + 36 >> 2] = HEAPU16[i19 + 68 >> 1];
 if (_FT_Select_Charmap(i19, 1970170211) | 0) {
  HEAP32[i19 + 92 >> 2] = 0;
  _FT_Set_Charmap(i19, i18) | 0;
  STACKTOP = i21;
  return 0;
 }
 _af_cjk_metrics_init_widths(i20, i19);
 i15 = HEAP32[i19 + 84 >> 2] | 0;
 i16 = 0;
 L5 : while (1) {
  i14 = 0;
  i1 = 0;
  i2 = 0;
  do {
   i12 = 273988 + (i16 << 8) + (i14 << 7) + 128 | 0;
   i13 = (i14 | 0) == 0;
   i11 = 273988 + (i16 << 8) + (i14 << 7) | 0;
   do {
    i3 = HEAP32[i11 >> 2] | 0;
    if (!i3) break;
    i3 = _FT_Get_Char_Index(i19, i3) | 0;
    do if (((i3 | 0) != 0 ? (_FT_Load_Glyph(i19, i3, 1) | 0) == 0 : 0) ? (HEAP16[i15 + 110 >> 1] | 0) >= 1 : 0) {
     i6 = HEAP32[i15 + 112 >> 2] | 0;
     i7 = HEAP16[i15 + 108 >> 1] | 0;
     if (i7 << 16 >> 16 > 0) {
      i8 = HEAP32[i15 + 120 >> 2] | 0;
      i4 = -1;
      i3 = 0;
      i5 = 0;
      i10 = 0;
      while (1) {
       i9 = HEAP16[i8 + (i10 << 1) >> 1] | 0;
       L20 : do if ((i9 | 0) > (i5 | 0)) switch (i16 | 0) {
       case 0:
        {
         if ((i5 | 0) > (i9 | 0)) break L20;
         while (1) {
          i23 = HEAP32[i6 + (i5 << 3) + 4 >> 2] | 0;
          i22 = (i4 | 0) < 0 | (i23 | 0) > (i3 | 0);
          i3 = i22 ? i23 : i3;
          i4 = i22 ? i5 : i4;
          if ((i5 | 0) < (i9 | 0)) i5 = i5 + 1 | 0; else break;
         }
         break;
        }
       case 1:
        {
         if ((i5 | 0) > (i9 | 0)) break L20;
         while (1) {
          i22 = HEAP32[i6 + (i5 << 3) + 4 >> 2] | 0;
          i23 = (i4 | 0) < 0 | (i22 | 0) < (i3 | 0);
          i3 = i23 ? i22 : i3;
          i4 = i23 ? i5 : i4;
          if ((i5 | 0) < (i9 | 0)) i5 = i5 + 1 | 0; else break;
         }
         break;
        }
       case 2:
        {
         if ((i5 | 0) > (i9 | 0)) break L20;
         while (1) {
          i22 = HEAP32[i6 + (i5 << 3) >> 2] | 0;
          i23 = (i4 | 0) < 0 | (i22 | 0) < (i3 | 0);
          i3 = i23 ? i22 : i3;
          i4 = i23 ? i5 : i4;
          if ((i5 | 0) < (i9 | 0)) i5 = i5 + 1 | 0; else break;
         }
         break;
        }
       case 3:
        {
         if ((i5 | 0) > (i9 | 0)) break L20;
         while (1) {
          i22 = HEAP32[i6 + (i5 << 3) >> 2] | 0;
          i23 = (i4 | 0) < 0 | (i22 | 0) > (i3 | 0);
          i3 = i23 ? i22 : i3;
          i4 = i23 ? i5 : i4;
          if ((i5 | 0) < (i9 | 0)) i5 = i5 + 1 | 0; else break;
         }
         break;
        }
       default:
        break L20;
       } while (0);
       i10 = i10 + 1 | 0;
       if ((i10 | 0) == (i7 << 16 >> 16 | 0)) break; else i5 = i9 + 1 | 0;
      }
     } else i3 = 0;
     if (i13) {
      HEAP32[i21 + 128 + (i1 << 2) >> 2] = i3;
      i1 = i1 + 1 | 0;
      break;
     } else {
      HEAP32[i21 + (i2 << 2) >> 2] = i3;
      i2 = i2 + 1 | 0;
      break;
     }
    } while (0);
    i11 = i11 + 4 | 0;
   } while (i11 >>> 0 < i12 >>> 0);
   i14 = i14 + 1 | 0;
  } while ((i14 | 0) != 2);
  do if (i2 | i1) {
   if (i2 >>> 0 > 1) {
    i6 = 1;
    do {
     i3 = HEAP32[i21 + (i6 << 2) >> 2] | 0;
     i7 = i6;
     do {
      i8 = i7;
      i7 = i7 + -1 | 0;
      i4 = i21 + (i7 << 2) | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) > (i5 | 0)) break;
      HEAP32[i21 + (i8 << 2) >> 2] = i5;
      HEAP32[i4 >> 2] = i3;
     } while ((i7 | 0) != 0);
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i2 | 0));
   }
   if (i1 >>> 0 > 1) {
    i6 = 1;
    do {
     i3 = HEAP32[i21 + 128 + (i6 << 2) >> 2] | 0;
     i7 = i6;
     do {
      i8 = i7;
      i7 = i7 + -1 | 0;
      i4 = i21 + 128 + (i7 << 2) | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) > (i5 | 0)) break;
      HEAP32[i21 + 128 + (i8 << 2) >> 2] = i5;
      HEAP32[i4 >> 2] = i3;
     } while ((i7 | 0) != 0);
     i6 = i6 + 1 | 0;
    } while ((i6 | 0) != (i1 | 0));
   }
   i5 = (i16 | 0) == 0;
   i4 = i16 >>> 0 < 2 & 1;
   i6 = HEAP32[i20 + 40 + (i4 * 340 | 0) + 216 >> 2] | 0;
   HEAP32[i20 + 40 + (i4 * 340 | 0) + 216 >> 2] = i6 + 1;
   do if (i2) {
    if (!i1) {
     i23 = HEAP32[i21 + (((i2 | 0) / 2 | 0) << 2) >> 2] | 0;
     HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) >> 2] = i23;
     HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) + 12 >> 2] = i23;
     break;
    }
    i3 = HEAP32[i21 + 128 + (((i1 | 0) / 2 | 0) << 2) >> 2] | 0;
    HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) >> 2] = i3;
    i1 = HEAP32[i21 + (((i2 | 0) / 2 | 0) << 2) >> 2] | 0;
    HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) + 12 >> 2] = i1;
    if ((i1 | 0) != (i3 | 0) ? (i5 | (i16 | 0) == 3) ^ (i1 | 0) < (i3 | 0) : 0) {
     HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) >> 2] = (i1 + i3 | 0) / 2 | 0;
     HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) + 12 >> 2] = (i1 + i3 | 0) / 2 | 0;
    }
   } else {
    i23 = HEAP32[i21 + 128 + (((i1 | 0) / 2 | 0) << 2) >> 2] | 0;
    HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) >> 2] = i23;
    HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) + 12 >> 2] = i23;
   } while (0);
   HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) + 24 >> 2] = 0;
   if (!i5) if ((i16 | 0) == 3) {
    i17 = 49;
    break L5;
   } else break; else {
    HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) + 24 >> 2] = 2;
    i16 = 1;
    continue L5;
   }
  } while (0);
  i16 = i16 + 1 | 0;
  if ((i16 | 0) == 4) break;
 }
 if ((i17 | 0) == 49) HEAP32[i20 + 40 + (i4 * 340 | 0) + 220 + (i6 * 28 | 0) + 24 >> 2] = 4;
 i4 = 48;
 i3 = 0;
 i2 = 0;
 while (1) {
  i1 = _FT_Get_Char_Index(i19, i4) | 0;
  if ((i1 | 0) != 0 ? (_FT_Get_Advance(i19, i1, 2051, i21 + 128 | 0) | 0) == 0 : 0) {
   i1 = HEAP32[i21 + 128 >> 2] | 0;
   if (i2 << 24 >> 24) if ((i1 | 0) == (i3 | 0)) i1 = i3; else {
    i1 = 0;
    break;
   } else i2 = 1;
  } else i1 = i3;
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 >= 58) {
   i1 = 1;
   break;
  } else i3 = i1;
 }
 HEAP8[i20 + 32 >> 0] = i1;
 _FT_Set_Charmap(i19, i18) | 0;
 STACKTOP = i21;
 return 0;
}

function _psh_blues_set_zones(i2, i4, i3, i7, i8, i16, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = (i1 | 0) == 0 ? i2 + 516 | 0 : i2 + 1548 | 0;
 i14 = (i1 | 0) == 0 ? i2 : i2 + 1032 | 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 0;
 if (i4 >>> 0 > 1) {
  i1 = 0;
  i12 = 0;
  i2 = 0;
  while (1) {
   if (i2) {
    i9 = HEAP16[i3 >> 1] | 0;
    i5 = i14;
    i2 = i12;
    i11 = (HEAP16[i3 + 2 >> 1] | 0) - i9 | 0;
    i10 = 1;
   } else {
    i9 = HEAP16[i3 + 2 >> 1] | 0;
    i5 = i15;
    i2 = i1;
    i11 = (HEAP16[i3 >> 1] | 0) - i9 | 0;
    i10 = 0;
   }
   i5 = i5 + 4 | 0;
   L8 : do if (i2) {
    while (1) {
     i6 = HEAP32[i5 >> 2] | 0;
     if ((i9 | 0) < (i6 | 0)) {
      i13 = 7;
      break;
     }
     if ((i9 | 0) == (i6 | 0)) break;
     i2 = i2 + -1 | 0;
     i5 = i5 + 32 | 0;
     if (!i2) {
      i13 = 16;
      break L8;
     }
    }
    if ((i13 | 0) == 7) while (1) {
     i13 = i5 + (i2 << 5) | 0;
     i2 = i2 + -1 | 0;
     i6 = i5 + (i2 << 5) | 0;
     HEAP32[i13 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i13 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     HEAP32[i13 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
     HEAP32[i13 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
     HEAP32[i13 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
     HEAP32[i13 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
     HEAP32[i13 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
     HEAP32[i13 + 28 >> 2] = HEAP32[i6 + 28 >> 2];
     if (!i2) {
      i13 = 16;
      break L8;
     }
    }
    i2 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i11 | 0) < 0) {
     if ((i11 | 0) >= (i2 | 0)) {
      i2 = i12;
      break;
     }
     HEAP32[i5 + 4 >> 2] = i11;
     i2 = i12;
     break;
    } else {
     if ((i11 | 0) <= (i2 | 0)) {
      i2 = i12;
      break;
     }
     HEAP32[i5 + 4 >> 2] = i11;
     i2 = i12;
     break;
    }
   } else i13 = 16; while (0);
   do if ((i13 | 0) == 16) {
    i13 = 0;
    HEAP32[i5 >> 2] = i9;
    HEAP32[i5 + 4 >> 2] = i11;
    if (!(i10 << 24 >> 24)) {
     i1 = i1 + 1 | 0;
     i2 = i12;
     break;
    } else {
     i2 = i12 + 1 | 0;
     break;
    }
   } while (0);
   i4 = i4 + -2 | 0;
   if (i4 >>> 0 <= 1) {
    i10 = i2;
    break;
   } else {
    i3 = i3 + 4 | 0;
    i12 = i2;
    i2 = 1;
   }
  }
 } else {
  i1 = 0;
  i10 = 0;
 }
 HEAP32[i14 >> 2] = i10;
 HEAP32[i15 >> 2] = i1;
 if (i7 >>> 0 > 1) while (1) {
  i5 = HEAP16[i8 + 2 >> 1] | 0;
  i6 = (HEAP16[i8 >> 1] | 0) - i5 | 0;
  L34 : do if (i1) {
   i2 = i1;
   i3 = i15 + 4 | 0;
   while (1) {
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i5 | 0) < (i4 | 0)) {
     i13 = 24;
     break;
    }
    if ((i5 | 0) == (i4 | 0)) break;
    i2 = i2 + -1 | 0;
    i3 = i3 + 32 | 0;
    if (!i2) {
     i2 = i3;
     i13 = 33;
     break L34;
    }
   }
   if ((i13 | 0) == 24) while (1) {
    i13 = i3 + (i2 << 5) | 0;
    i2 = i2 + -1 | 0;
    i12 = i3 + (i2 << 5) | 0;
    HEAP32[i13 >> 2] = HEAP32[i12 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
    HEAP32[i13 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
    HEAP32[i13 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
    HEAP32[i13 + 20 >> 2] = HEAP32[i12 + 20 >> 2];
    HEAP32[i13 + 24 >> 2] = HEAP32[i12 + 24 >> 2];
    HEAP32[i13 + 28 >> 2] = HEAP32[i12 + 28 >> 2];
    if (!i2) {
     i2 = i3;
     i13 = 33;
     break L34;
    }
   }
   i2 = HEAP32[i3 + 4 >> 2] | 0;
   if ((i6 | 0) < 0) {
    if ((i6 | 0) >= (i2 | 0)) break;
    HEAP32[i3 + 4 >> 2] = i6;
    break;
   } else {
    if ((i6 | 0) <= (i2 | 0)) break;
    HEAP32[i3 + 4 >> 2] = i6;
    break;
   }
  } else {
   i2 = i15 + 4 | 0;
   i13 = 33;
  } while (0);
  if ((i13 | 0) == 33) {
   i13 = 0;
   HEAP32[i2 >> 2] = i5;
   HEAP32[i2 + 4 >> 2] = i6;
   i1 = i1 + 1 | 0;
  }
  i7 = i7 + -2 | 0;
  if (i7 >>> 0 <= 1) {
   i9 = i1;
   break;
  } else i8 = i8 + 4 | 0;
 } else i9 = i1;
 HEAP32[i14 >> 2] = i10;
 HEAP32[i15 >> 2] = i9;
 if ((i10 | 0) > 0) {
  i5 = i10;
  i6 = i14 + 4 | 0;
  while (1) {
   if (i5 >>> 0 > 1) {
    i2 = HEAP32[i6 >> 2] | 0;
    i1 = (HEAP32[i6 + 32 >> 2] | 0) - i2 | 0;
    i3 = i6 + 4 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) > (i1 | 0)) HEAP32[i3 >> 2] = i1; else i1 = i4;
   } else {
    i2 = HEAP32[i6 >> 2] | 0;
    i1 = HEAP32[i6 + 4 >> 2] | 0;
   }
   HEAP32[i6 + 12 >> 2] = i2;
   HEAP32[i6 + 8 >> 2] = i2 + i1;
   i5 = i5 + -1 | 0;
   if (!i5) break; else i6 = i6 + 32 | 0;
  }
 }
 if ((i9 | 0) > 0) {
  i4 = i9;
  i6 = i15 + 4 | 0;
  while (1) {
   i5 = HEAP32[i6 >> 2] | 0;
   if (i4 >>> 0 > 1) {
    i1 = i5 - (HEAP32[i6 + 32 >> 2] | 0) | 0;
    i2 = i6 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) < (i1 | 0)) HEAP32[i2 >> 2] = i1; else i1 = i3;
   } else i1 = HEAP32[i6 + 4 >> 2] | 0;
   HEAP32[i6 + 8 >> 2] = i5;
   HEAP32[i6 + 12 >> 2] = i5 + i1;
   i4 = i4 + -1 | 0;
   if (!i4) break; else i6 = i6 + 32 | 0;
  }
 }
 if (i10) {
  HEAP32[i14 + 16 >> 2] = (HEAP32[i14 + 16 >> 2] | 0) - i16;
  i3 = i10 + -1 | 0;
  i2 = HEAP32[i14 + 12 >> 2] | 0;
  if (!i3) i1 = i14 + 4 | 0; else {
   i1 = i14 + -28 + (i10 << 3 << 2) | 0;
   i7 = i14 + 4 | 0;
   while (1) {
    i4 = i7 + 44 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    i6 = i5 - i2 | 0;
    if ((i6 | 0) < (i16 << 1 | 0)) {
     i14 = ((i6 | 0) / 2 | 0) + i2 | 0;
     HEAP32[i4 >> 2] = i14;
     HEAP32[i7 + 8 >> 2] = i14;
    } else {
     HEAP32[i7 + 8 >> 2] = i2 + i16;
     HEAP32[i4 >> 2] = i5 - i16;
    }
    i3 = i3 + -1 | 0;
    i2 = HEAP32[i7 + 40 >> 2] | 0;
    if (!i3) break; else i7 = i7 + 32 | 0;
   }
  }
  HEAP32[i1 + 8 >> 2] = i2 + i16;
 }
 if (!i9) return;
 HEAP32[i15 + 16 >> 2] = (HEAP32[i15 + 16 >> 2] | 0) - i16;
 i3 = i9 + -1 | 0;
 i2 = HEAP32[i15 + 12 >> 2] | 0;
 if (!i3) i1 = i15 + 4 | 0; else {
  i1 = i15 + -28 + (i9 << 3 << 2) | 0;
  i4 = i15 + 4 | 0;
  while (1) {
   i13 = i4 + 44 | 0;
   i12 = HEAP32[i13 >> 2] | 0;
   i14 = i12 - i2 | 0;
   i15 = ((i14 | 0) / 2 | 0) + i2 | 0;
   HEAP32[i13 >> 2] = (i14 | 0) < (i16 << 1 | 0) ? i15 : i12 - i16 | 0;
   HEAP32[i4 + 8 >> 2] = (i14 | 0) < (i16 << 1 | 0) ? i15 : i2 + i16 | 0;
   i3 = i3 + -1 | 0;
   i2 = HEAP32[i4 + 40 >> 2] | 0;
   if (!i3) break; else i4 = i4 + 32 | 0;
  }
 }
 HEAP32[i1 + 8 >> 2] = i2 + i16;
 return;
}

function _af_latin_hints_detect_features(i21, i20) {
 i21 = i21 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _af_latin_hints_compute_segments(i21, i20) | 0;
 if (i1) {
  i22 = i1;
  STACKTOP = i23;
  return i22 | 0;
 }
 _af_latin_hints_link_segments(i21, i20);
 i16 = HEAP32[i21 >> 2] | 0;
 i1 = HEAP32[i21 + 108 >> 2] | 0;
 i17 = HEAP32[i21 + 44 + (i20 * 28 | 0) + 8 >> 2] | 0;
 i18 = HEAP32[i21 + 44 + (i20 * 28 | 0) >> 2] | 0;
 HEAP32[i21 + 44 + (i20 * 28 | 0) + 12 >> 2] = 0;
 i15 = HEAP32[((i20 | 0) == 0 ? i21 + 4 | 0 : i21 + 12 | 0) >> 2] | 0;
 if (!i20) i19 = _FT_DivFix(64, HEAP32[i21 + 12 >> 2] | 0) | 0; else i19 = 0;
 i12 = _FT_MulFix(HEAP32[i1 + 40 + (i20 * 396 | 0) + 204 >> 2] | 0, i15) | 0;
 i12 = _FT_DivFix((i12 | 0) > 16 ? 16 : i12, i15) | 0;
 L7 : do if ((i18 | 0) > 0) {
  i13 = i19 * 3 | 0;
  i14 = i17;
  L9 : while (1) {
   i11 = HEAP16[i14 + 8 >> 1] | 0;
   L11 : do if ((i11 | 0) >= (i19 | 0) ? !((i11 << 1 | 0) < (i13 | 0) & (HEAP32[i14 + 24 >> 2] | 0) != 0) : 0) {
    i3 = HEAP32[i21 + 44 + (i20 * 28 | 0) + 12 >> 2] | 0;
    L14 : do if ((i3 | 0) > 0) {
     i4 = HEAP32[i21 + 44 + (i20 * 28 | 0) + 20 >> 2] | 0;
     i2 = i14 + 2 | 0;
     i6 = HEAP16[i2 >> 1] | 0;
     i5 = i14 + 1 | 0;
     i1 = 0;
     while (1) {
      i11 = (i6 << 16 >> 16) - (HEAP16[i4 + (i1 * 48 | 0) >> 1] | 0) | 0;
      if ((((i11 | 0) < 0 ? 0 - i11 | 0 : i11) | 0) < (i12 | 0) ? (HEAP8[i4 + (i1 * 48 | 0) + 13 >> 0] | 0) == (HEAP8[i5 >> 0] | 0) : 0) break;
      i1 = i1 + 1 | 0;
      if ((i1 | 0) >= (i3 | 0)) break L14;
     }
     HEAP32[i14 + 16 >> 2] = HEAP32[i4 + (i1 * 48 | 0) + 40 >> 2];
     HEAP32[(HEAP32[i4 + (i1 * 48 | 0) + 44 >> 2] | 0) + 16 >> 2] = i14;
     HEAP32[i4 + (i1 * 48 | 0) + 44 >> 2] = i14;
     break L11;
    } else {
     i6 = i14 + 2 | 0;
     i2 = i6;
     i5 = i14 + 1 | 0;
     i6 = HEAP16[i6 >> 1] | 0;
    } while (0);
    i11 = HEAP8[i5 >> 0] | 0;
    HEAP32[i23 >> 2] = 0;
    i1 = HEAP32[i21 + 44 + (i20 * 28 | 0) + 16 >> 2] | 0;
    if ((i3 | 0) < (i1 | 0)) i10 = HEAP32[i21 + 44 + (i20 * 28 | 0) + 20 >> 2] | 0; else {
     if ((i1 | 0) > 44739241) {
      i22 = 18;
      break L9;
     }
     i4 = (i1 >> 2 | 0) < -4 | (i1 + 4 + (i1 >> 2) | 0) > 44739242 ? 44739242 : i1 + 4 + (i1 >> 2) | 0;
     i3 = _ft_mem_realloc(i16, 48, i1, i4, HEAP32[i21 + 44 + (i20 * 28 | 0) + 20 >> 2] | 0, i23) | 0;
     HEAP32[i21 + 44 + (i20 * 28 | 0) + 20 >> 2] = i3;
     i1 = HEAP32[i23 >> 2] | 0;
     if (i1) break L9;
     HEAP32[i21 + 44 + (i20 * 28 | 0) + 16 >> 2] = i4;
     i10 = i3;
     i3 = HEAP32[i21 + 44 + (i20 * 28 | 0) + 12 >> 2] | 0;
    }
    i1 = i10 + (i3 * 48 | 0) | 0;
    if ((i3 | 0) > 0) {
     while (1) {
      i4 = i1 + -48 | 0;
      i3 = HEAP16[i4 >> 1] | 0;
      if (i3 << 16 >> 16 < i6 << 16 >> 16) break;
      if (i3 << 16 >> 16 == i6 << 16 >> 16 ? (HEAP32[i21 + 44 + (i20 * 28 | 0) + 24 >> 2] | 0) == (i11 | 0) : 0) break;
      i7 = i1;
      i9 = i4;
      i8 = i7 + 48 | 0;
      do {
       HEAP32[i7 >> 2] = HEAP32[i9 >> 2];
       i7 = i7 + 4 | 0;
       i9 = i9 + 4 | 0;
      } while ((i7 | 0) < (i8 | 0));
      if (i4 >>> 0 > i10 >>> 0) i1 = i4; else {
       i1 = i4;
       break;
      }
     }
     i3 = HEAP32[i21 + 44 + (i20 * 28 | 0) + 12 >> 2] | 0;
    }
    HEAP32[i21 + 44 + (i20 * 28 | 0) + 12 >> 2] = i3 + 1;
    i3 = i1 + 13 | 0;
    i7 = i1;
    i8 = i7 + 40 | 0;
    do {
     HEAP32[i7 >> 2] = 0;
     i7 = i7 + 4 | 0;
    } while ((i7 | 0) < (i8 | 0));
    HEAP32[i1 + 40 >> 2] = i14;
    HEAP32[i1 + 44 >> 2] = i14;
    HEAP8[i3 >> 0] = HEAP8[i5 >> 0] | 0;
    i11 = HEAP16[i2 >> 1] | 0;
    HEAP16[i1 >> 1] = i11;
    i11 = _FT_MulFix(i11 << 16 >> 16, i15) | 0;
    HEAP32[i1 + 4 >> 2] = i11;
    HEAP32[i1 + 8 >> 2] = i11;
    HEAP32[i14 + 16 >> 2] = i14;
   } while (0);
   i14 = i14 + 48 | 0;
   if (i14 >>> 0 >= (i17 + (i18 * 48 | 0) | 0) >>> 0) {
    i1 = i21 + 44 + (i20 * 28 | 0) + 20 | 0;
    break L7;
   }
  }
  if ((i22 | 0) == 18) {
   HEAP32[i23 >> 2] = 64;
   i1 = 64;
  }
  i22 = i1;
  STACKTOP = i23;
  return i22 | 0;
 } else i1 = i21 + 44 + (i20 * 28 | 0) + 20 | 0; while (0);
 i13 = HEAP32[i1 >> 2] | 0;
 i12 = HEAP32[i21 + 44 + (i20 * 28 | 0) + 12 >> 2] | 0;
 if ((i12 | 0) > 0) i2 = i13; else {
  i22 = 0;
  STACKTOP = i23;
  return i22 | 0;
 }
 do {
  i1 = HEAP32[i2 + 40 >> 2] | 0;
  if (i1) {
   i3 = i1;
   do {
    HEAP32[i3 + 12 >> 2] = i2;
    i3 = HEAP32[i3 + 16 >> 2] | 0;
   } while ((i3 | 0) != (i1 | 0));
  }
  i2 = i2 + 48 | 0;
 } while (i2 >>> 0 < (i13 + (i12 * 48 | 0) | 0) >>> 0);
 i10 = i13;
 do {
  i7 = HEAP32[i10 + 40 >> 2] | 0;
  i8 = i10 + 24 | 0;
  i9 = i10 + 28 | 0;
  i1 = 0;
  i2 = 0;
  i11 = i7;
  do {
   i5 = (HEAP8[i11 >> 0] & 1 ^ 1) & 255;
   i1 = (i5 ^ 1) + i1 | 0;
   i2 = i5 + i2 | 0;
   i5 = i11 + 24 | 0;
   i3 = HEAP32[i5 >> 2] | 0;
   if (!i3) i6 = 0; else {
    i6 = HEAP32[i3 + 12 >> 2] | 0;
    i6 = (i6 | 0) != (i10 | 0) & (i6 | 0) != 0;
   }
   i3 = i11 + 20 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (!i4) {
    if (i6) i22 = 41;
   } else if (i6 | (HEAP32[i4 + 12 >> 2] | 0) != 0) i22 = 41;
   do if ((i22 | 0) == 41) {
    i22 = 0;
    i4 = HEAP32[(i6 ? i5 : i3) >> 2] | 0;
    i3 = HEAP32[(i6 ? i9 : i8) >> 2] | 0;
    if (!((i3 | 0) != 0 ? (i21 = (HEAP16[i10 >> 1] | 0) - (HEAP16[i3 >> 1] | 0) | 0, i20 = (HEAP16[i11 + 2 >> 1] | 0) - (HEAP16[i4 + 2 >> 1] | 0) | 0, (((i20 | 0) < 0 ? 0 - i20 | 0 : i20) | 0) >= (((i21 | 0) < 0 ? 0 - i21 | 0 : i21) | 0)) : 0)) i3 = HEAP32[i4 + 12 >> 2] | 0;
    if (i6) {
     HEAP32[i9 >> 2] = i3;
     i21 = i3 + 12 | 0;
     HEAP8[i21 >> 0] = HEAPU8[i21 >> 0] | 2;
     break;
    } else {
     HEAP32[i8 >> 2] = i3;
     break;
    }
   } while (0);
   i11 = HEAP32[i11 + 16 >> 2] | 0;
  } while ((i11 | 0) != (i7 | 0));
  HEAP8[i10 + 12 >> 0] = ((i1 | 0) < 1 | (i1 | 0) < (i2 | 0)) & 1 ^ 1;
  if ((HEAP32[i9 >> 2] | 0) != 0 ? (HEAP32[i8 >> 2] | 0) != 0 : 0) HEAP32[i9 >> 2] = 0;
  i10 = i10 + 48 | 0;
 } while (i10 >>> 0 < (i13 + (i12 * 48 | 0) | 0) >>> 0);
 i1 = 0;
 STACKTOP = i23;
 return i1 | 0;
}

function _t42_parse_sfnts(i14, i16) {
 i14 = i14 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i17 = HEAP32[i16 + 16 >> 2] | 0;
 i13 = HEAP32[i16 + 8 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[i16 + 28 >> 2] & 127](i16);
 i1 = HEAP32[i16 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i13 >>> 0 ? (HEAP32[i16 >> 2] = i1 + 1, (HEAP8[i1 >> 0] | 0) == 91) : 0) {
  FUNCTION_TABLE_vi[HEAP32[i16 + 28 >> 2] & 127](i16);
  i1 = HEAP32[i16 >> 2] | 0;
  L4 : do if (i1 >>> 0 < i13 >>> 0) {
   i3 = i1;
   i2 = 0;
   i10 = 0;
   i6 = 0;
   i9 = 0;
   i11 = 0;
   i1 = 0;
   i7 = 0;
   i8 = 0;
   L6 : while (1) {
    i4 = HEAP8[i3 >> 0] | 0;
    switch (i4 << 24 >> 24) {
    case 93:
     {
      i15 = 7;
      break L6;
     }
    case 60:
     {
      FUNCTION_TABLE_vi[HEAP32[i16 + 32 >> 2] & 127](i16);
      if (HEAP32[i16 + 12 >> 2] | 0) break L1;
      i5 = ((HEAP32[i16 >> 2] | 0) + ~i3 | 0) / 2 | 0;
      i1 = _ft_mem_realloc(i17, 1, i9, i5, i1, i18 + 4 | 0) | 0;
      i4 = HEAP32[i18 + 4 >> 2] | 0;
      if (i4) {
       i3 = i4;
       i15 = 42;
       break L1;
      }
      HEAP32[i16 >> 2] = i3;
      FUNCTION_TABLE_iiiiii[HEAP32[i16 + 44 >> 2] & 63](i16, i1, i5, i18, 1) | 0;
      i2 = 1;
      i3 = HEAP32[i18 >> 2] | 0;
      i15 = 20;
      break;
     }
    default:
     if (((i4 & 255) + -48 | 0) >>> 0 < 10) {
      if (i2 << 24 >> 24) {
       i15 = 13;
       break L6;
      }
      i3 = FUNCTION_TABLE_ii[HEAP32[i16 + 36 >> 2] & 63](i16) | 0;
      if ((i3 | 0) < 0) {
       i15 = 15;
       break L6;
      }
      FUNCTION_TABLE_vi[HEAP32[i16 + 32 >> 2] & 127](i16);
      if (HEAP32[i16 + 12 >> 2] | 0) {
       i15 = 45;
       break L6;
      }
      i1 = HEAP32[i16 >> 2] | 0;
      if ((i13 - i1 | 0) < (i3 | 0)) {
       i15 = 18;
       break L6;
      }
      HEAP32[i16 >> 2] = i1 + (i3 + 1);
      i2 = 0;
      i5 = i9;
      i1 = i1 + 1 | 0;
     } else {
      i5 = i9;
      i3 = i7;
      i15 = 20;
     }
    }
    if ((i15 | 0) == 20) {
     i15 = 0;
     if (!i1) {
      i1 = i2;
      i15 = 21;
      break;
     }
    }
    if (!(i3 & 1)) i12 = i3; else {
     i12 = i3 + -1 | 0;
     i12 = (HEAP8[i1 + i12 >> 0] | 0) == 0 ? i12 : i3;
    }
    if (!i12) {
     i15 = 26;
     break;
    }
    L25 : do if ((i12 | 0) > 0) {
     i9 = 0;
     i4 = i11;
     i3 = i8;
     while (1) {
      L28 : do switch (i4 | 0) {
      case 0:
       if (i10 >>> 0 >= 12) {
        i3 = HEAP32[i14 + 492 >> 2] | 0;
        i4 = (HEAPU8[i3 + 4 >> 0] << 4) + (HEAPU8[i3 + 5 >> 0] | 0) | 0;
        HEAP32[i14 + 492 >> 2] = _ft_mem_realloc(i17, 1, 12, i4 << 4 | 12, i3, i18 + 4 | 0) | 0;
        i3 = HEAP32[i18 + 4 >> 2] | 0;
        if (!i3) {
         i6 = i4;
         i3 = i4 << 4 | 12;
         i15 = 31;
         break L28;
        } else {
         i15 = 42;
         break L1;
        }
       } else {
        HEAP8[(HEAP32[i14 + 492 >> 2] | 0) + i10 >> 0] = HEAP8[i1 + i9 >> 0] | 0;
        i7 = i10 + 1 | 0;
        i4 = 0;
        break L28;
       }
      case 1:
       {
        i15 = 31;
        break;
       }
      case 2:
       {
        i15 = 36;
        break;
       }
      default:
       i7 = i10;
      } while (0);
      do if ((i15 | 0) == 31) {
       i15 = 0;
       if (i10 >>> 0 < i3 >>> 0) {
        HEAP8[(HEAP32[i14 + 492 >> 2] | 0) + i10 >> 0] = HEAP8[i1 + i9 >> 0] | 0;
        i7 = i10 + 1 | 0;
        i4 = 1;
        break;
       }
       i7 = HEAP32[i14 + 492 >> 2] | 0;
       if ((i6 | 0) > 0) {
        i4 = 0;
        do {
         i15 = i4 << 4 | 12;
         i3 = ((HEAPU8[i7 + (i15 + 13) >> 0] << 16 | HEAPU8[i7 + (i15 + 12) >> 0] << 24 | HEAPU8[i7 + (i15 + 14) >> 0] << 8 | HEAPU8[i7 + (i15 + 15) >> 0]) + 3 & -4) + i3 | 0;
         i4 = i4 + 1 | 0;
        } while ((i4 | 0) != (i6 | 0));
        i4 = i3;
       } else i4 = i3;
       HEAP32[i14 + 496 >> 2] = i4;
       HEAP32[i14 + 492 >> 2] = _ft_mem_realloc(i17, 1, i6 << 4 | 12, i4 + 1 | 0, i7, i18 + 4 | 0) | 0;
       i3 = HEAP32[i18 + 4 >> 2] | 0;
       if (!i3) {
        i3 = i4;
        i15 = 36;
       } else {
        i15 = 42;
        break L1;
       }
      } while (0);
      if ((i15 | 0) == 36) {
       i15 = 0;
       if (i10 >>> 0 >= i3 >>> 0) {
        i15 = 37;
        break L6;
       }
       HEAP8[(HEAP32[i14 + 492 >> 2] | 0) + i10 >> 0] = HEAP8[i1 + i9 >> 0] | 0;
       i7 = i10 + 1 | 0;
       i4 = 2;
      }
      i9 = i9 + 1 | 0;
      if ((i9 | 0) >= (i12 | 0)) {
       i8 = i3;
       break L25;
      } else i10 = i7;
     }
    } else {
     i7 = i10;
     i4 = i11;
    } while (0);
    FUNCTION_TABLE_vi[HEAP32[i16 + 28 >> 2] & 127](i16);
    i3 = HEAP32[i16 >> 2] | 0;
    if (i3 >>> 0 >= i13 >>> 0) break L4; else {
     i10 = i7;
     i9 = i5;
     i11 = i4;
     i7 = i12;
    }
   }
   if ((i15 | 0) == 7) {
    HEAP32[i16 >> 2] = i3 + 1;
    break L1;
   } else if ((i15 | 0) == 13) {
    HEAP32[i18 + 4 >> 2] = 3;
    i3 = 3;
    i15 = 42;
    break L1;
   } else if ((i15 | 0) == 15) {
    HEAP32[i18 + 4 >> 2] = 3;
    i3 = 3;
    i2 = 0;
    i15 = 42;
    break L1;
   } else if ((i15 | 0) == 18) {
    HEAP32[i18 + 4 >> 2] = 3;
    i3 = 3;
    i2 = 0;
    i1 = i1 + 1 | 0;
    i15 = 42;
    break L1;
   } else if ((i15 | 0) == 21) {
    HEAP32[i18 + 4 >> 2] = 3;
    i3 = 3;
    i2 = i1;
    i1 = 0;
    i15 = 42;
    break L1;
   } else if ((i15 | 0) == 26) {
    HEAP32[i18 + 4 >> 2] = 3;
    i3 = 3;
    i15 = 42;
    break L1;
   } else if ((i15 | 0) == 37) {
    HEAP32[i18 + 4 >> 2] = 3;
    i3 = 3;
    i15 = 42;
    break L1;
   } else if ((i15 | 0) == 45) {
    STACKTOP = i18;
    return;
   }
  } else {
   i2 = 0;
   i1 = 0;
  } while (0);
  HEAP32[i18 + 4 >> 2] = 3;
  i3 = 3;
  i15 = 42;
 } else i15 = 3; while (0);
 if ((i15 | 0) == 3) {
  HEAP32[i18 + 4 >> 2] = 3;
  i3 = 3;
  i2 = 0;
  i1 = 0;
  i15 = 42;
 }
 if ((i15 | 0) == 42) HEAP32[i16 + 12 >> 2] = i3;
 if (!(i2 << 24 >> 24)) {
  STACKTOP = i18;
  return;
 }
 _ft_mem_free(i17, i1);
 STACKTOP = i18;
 return;
}

function _IsMacResource(i22, i21, i1, i2, i24) {
 i22 = i22 | 0;
 i21 = i21 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i25 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i23 = HEAP32[i22 >> 2] | 0;
 i1 = _FT_Raccess_Get_HeaderInfo(i22, i21, i1, i25 + 12 | 0, i25 + 8 | 0) | 0;
 if (i1) {
  i24 = i1;
  STACKTOP = i25;
  return i24 | 0;
 }
 if (_FT_Raccess_Get_DataOffsets(i22, i21, HEAP32[i25 + 12 >> 2] | 0, HEAP32[i25 + 8 >> 2] | 0, 1347375956, i25 + 4 | 0, i25) | 0) {
  i1 = _FT_Raccess_Get_DataOffsets(i22, i21, HEAP32[i25 + 12 >> 2] | 0, HEAP32[i25 + 8 >> 2] | 0, 1936092788, i25 + 4 | 0, i25) | 0;
  if (i1) {
   i24 = i1;
   STACKTOP = i25;
   return i24 | 0;
  }
  i20 = HEAP32[i25 >> 2] | 0;
  i4 = HEAP32[i22 >> 2] | 0;
  i2 = ((i2 | 0) % (i20 | 0) | 0 | 0) == -1 ? 0 : (i2 | 0) % (i20 | 0) | 0;
  do if ((i2 | 0) < (i20 | 0)) {
   i3 = HEAP32[(HEAP32[i25 + 4 >> 2] | 0) + (i2 << 2) >> 2] | 0;
   i1 = _FT_Stream_Seek(i21, i3) | 0;
   HEAP32[i25 + 16 >> 2] = i1;
   if (!i1) {
    i5 = _FT_Stream_ReadULong(i21, i25 + 16 | 0) | 0;
    i1 = HEAP32[i25 + 16 >> 2] | 0;
    if (!i1) if ((i5 | 0) != -1) {
     i20 = _open_face_PS_from_sfnt_stream(i22, i21, i2, 0, 0, i24) | 0;
     HEAP32[i25 + 16 >> 2] = i20;
     if (i20) {
      if (_FT_Stream_Seek(i21, i3 + 4 | 0) | 0) {
       i1 = HEAP32[i25 + 16 >> 2] | 0;
       break;
      }
      i2 = _ft_mem_alloc(i4, i5, i25 + 16 | 0) | 0;
      i1 = HEAP32[i25 + 16 >> 2] | 0;
      if (!i1) {
       i1 = _FT_Stream_Read(i21, i2, i5) | 0;
       HEAP32[i25 + 16 >> 2] = i1;
       if (!i1) {
        if ((i5 | 0) > 4) {
         i1 = (_memcmp(i2, 322458, 4) | 0) != 0;
         i1 = i1 ? 324153 : 323376;
        } else i1 = 324153;
        i1 = _open_face_from_buffer(i22, i2, i5, 0, i1, i24) | 0;
        HEAP32[i25 + 16 >> 2] = i1;
       }
      }
     } else i1 = 0;
    } else i1 = 1;
   }
  } else i1 = 1; while (0);
  _ft_mem_free(i23, HEAP32[i25 + 4 >> 2] | 0);
  HEAP32[i25 + 4 >> 2] = 0;
  if (i1) {
   i24 = i1;
   STACKTOP = i25;
   return i24 | 0;
  }
  HEAP32[HEAP32[i24 >> 2] >> 2] = HEAP32[i25 >> 2];
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i13 = HEAP32[i25 + 4 >> 2] | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 HEAP32[i25 + 16 >> 2] = 1;
 i15 = HEAP32[i22 >> 2] | 0;
 L29 : do switch (i2 | 0) {
 case 0:
 case -1:
  {
   if ((i14 | 0) > 0) {
    i4 = 0;
    i3 = 0;
    while (1) {
     i1 = _FT_Stream_Seek(i21, HEAP32[i13 + (i4 << 2) >> 2] | 0) | 0;
     HEAP32[i25 + 16 >> 2] = i1;
     if (i1) break L29;
     i2 = _FT_Stream_ReadULong(i21, i25 + 16 | 0) | 0;
     i1 = HEAP32[i25 + 16 >> 2] | 0;
     if (i1) break L29;
     i1 = i3 + 6 + i2 | 0;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) >= (i14 | 0)) {
      i12 = i1;
      break;
     } else i3 = i1;
    }
   } else i12 = 0;
   i10 = i12 + 2 | 0;
   i11 = _ft_mem_alloc(i15, i10, i25 + 16 | 0) | 0;
   i1 = HEAP32[i25 + 16 >> 2] | 0;
   if (!i1) {
    HEAP8[i11 >> 0] = -128;
    HEAP8[i11 + 1 >> 0] = 1;
    HEAP8[i11 + 2 >> 0] = 0;
    HEAP8[i11 + 2 + 1 >> 0] = 0;
    HEAP8[i11 + 2 + 2 >> 0] = 0;
    HEAP8[i11 + 2 + 3 >> 0] = 0;
    L38 : do if ((i14 | 0) > 0) {
     i9 = 0;
     i5 = 0;
     i4 = 2;
     i3 = 6;
     i8 = 1;
     while (1) {
      i7 = _FT_Stream_Seek(i21, HEAP32[i13 + (i9 << 2) >> 2] | 0) | 0;
      HEAP32[i25 + 16 >> 2] = i7;
      if (i7) break L38;
      i2 = _FT_Stream_ReadULong(i21, i25 + 16 | 0) | 0;
      i1 = HEAP32[i25 + 16 >> 2] | 0;
      if (i1) break L29;
      i6 = _FT_Stream_ReadUShort(i21, i25 + 16 | 0) | 0;
      i1 = HEAP32[i25 + 16 >> 2] | 0;
      if (i1) break L29;
      if ((i6 & 65535) >>> 8) {
       i7 = (i2 | 0) > 2 ? i2 + -2 | 0 : 0;
       if (((i6 & 65535) >>> 8 | 0) == (i8 | 0)) {
        i5 = i7 + i5 | 0;
        i1 = i8;
       } else {
        i1 = i4 + 3 | 0;
        if ((i1 | 0) > (i10 | 0)) break L38;
        HEAP8[i11 + i4 >> 0] = i5;
        HEAP8[i11 + (i4 + 1) >> 0] = i5 >>> 8;
        HEAP8[i11 + (i4 + 2) >> 0] = i5 >>> 16;
        HEAP8[i11 + i1 >> 0] = i5 >>> 24;
        if (((i6 & 65535) >>> 8 | 0) == 5) {
         i17 = i5;
         i18 = i4;
         i19 = i3;
         i20 = 24;
         break L38;
        }
        i1 = i3 + 4 | 0;
        if ((i1 | 0) > (i12 | 0)) break L38;
        HEAP8[i11 + i3 >> 0] = -128;
        i4 = i3 + 2 | 0;
        HEAP8[i11 + (i3 + 1) >> 0] = (i6 & 65535) >>> 8;
        HEAP8[i11 + i4 >> 0] = 0;
        HEAP8[i11 + (i3 + 3) >> 0] = 0;
        HEAP8[i11 + i1 >> 0] = 0;
        HEAP8[i11 + (i3 + 5) >> 0] = 0;
        i5 = i7;
        i3 = i3 + 6 | 0;
        i1 = (i6 & 65535) >>> 8;
       }
       HEAP32[i25 + 16 >> 2] = 1;
       if ((i3 | 0) > (i12 | 0)) break L38;
       i2 = i3 + i7 | 0;
       if ((i2 | 0) > (i12 | 0)) break L38;
       i8 = _FT_Stream_Read(i21, i11 + i3 | 0, i7) | 0;
       HEAP32[i25 + 16 >> 2] = i8;
       if (i8) break L38;
      } else {
       i2 = i3;
       i1 = i8;
      }
      i9 = i9 + 1 | 0;
      if ((i9 | 0) >= (i14 | 0)) {
       i17 = i5;
       i18 = i4;
       i19 = i2;
       i20 = 24;
       break;
      } else {
       i3 = i2;
       i8 = i1;
      }
     }
    } else {
     i17 = 0;
     i18 = 2;
     i19 = 6;
     i20 = 24;
    } while (0);
    if (((i20 | 0) == 24 ? (i19 | 0) <= (i12 | 0) : 0) ? (HEAP8[i11 + i19 >> 0] = -128, HEAP8[i11 + (i19 + 1) >> 0] = 3, i16 = i18 + 3 | 0, (i16 | 0) <= (i10 | 0)) : 0) {
     HEAP8[i11 + i18 >> 0] = i17;
     HEAP8[i11 + (i18 + 1) >> 0] = i17 >>> 8;
     HEAP8[i11 + (i18 + 2) >> 0] = i17 >>> 16;
     HEAP8[i11 + i16 >> 0] = i17 >>> 24;
     i1 = _open_face_from_buffer(i22, i11, i19 + 2 | 0, 0, 323218, i24) | 0;
     break L29;
    }
    _ft_mem_free(i15, i11);
    i1 = HEAP32[i25 + 16 >> 2] | 0;
   }
   break;
  }
 default:
  i1 = 1;
 } while (0);
 _ft_mem_free(i23, HEAP32[i25 + 4 >> 2] | 0);
 HEAP32[i25 + 4 >> 2] = 0;
 if (i1) {
  i24 = i1;
  STACKTOP = i25;
  return i24 | 0;
 }
 HEAP32[HEAP32[i24 >> 2] >> 2] = 1;
 i24 = 0;
 STACKTOP = i25;
 return i24 | 0;
}

function __ZN15MaxRectsBinPack6InsertEiiNS_23FreeRectChoiceHeuristicE(i18, i19, i17, i16, i1) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 switch (i1 | 0) {
 case 0:
  {
   __ZNK15MaxRectsBinPack38FindPositionForNewNodeBestShortSideFitEiiRiS0_(i18, i19, i17, i16, i20 + 20 | 0, i20 + 16 | 0);
   break;
  }
 case 3:
  {
   HEAP32[i20 + 20 >> 2] = 2147483647;
   i11 = HEAP32[i19 + 24 >> 2] | 0;
   i12 = HEAP32[i19 + 20 >> 2] | 0;
   if ((i11 | 0) == (i12 | 0)) {
    i4 = 0;
    i3 = 0;
    i2 = 0;
    i1 = 0;
   } else {
    i9 = 2147483647;
    i1 = 0;
    i2 = 0;
    i3 = 0;
    i4 = 0;
    i6 = 2147483647;
    i7 = 0;
    i13 = 0;
    while (1) {
     i10 = HEAP32[i12 + (i13 << 4) + 8 >> 2] | 0;
     do if ((i10 | 0) >= (i17 | 0) ? (HEAP32[i12 + (i13 << 4) + 12 >> 2] | 0) >= (i16 | 0) : 0) {
      i8 = HEAP32[i12 + (i13 << 4) + 4 >> 2] | 0;
      if ((i8 + i16 | 0) >= (i6 | 0)) {
       if ((i8 + i16 | 0) != (i6 | 0)) break;
       i5 = HEAP32[i12 + (i13 << 4) >> 2] | 0;
       if ((i5 | 0) >= (i7 | 0)) break;
      } else i5 = HEAP32[i12 + (i13 << 4) >> 2] | 0;
      HEAP32[i20 + 20 >> 2] = i8 + i16;
      HEAP32[i20 + 16 >> 2] = i5;
      i6 = i8 + i16 | 0;
      i1 = i16;
      i2 = i17;
      i3 = i8;
      i4 = i5;
      i9 = i8 + i16 | 0;
      i7 = i5;
     } while (0);
     do if ((i10 | 0) >= (i16 | 0) ? (HEAP32[i12 + (i13 << 4) + 12 >> 2] | 0) >= (i17 | 0) : 0) {
      i8 = HEAP32[i12 + (i13 << 4) + 4 >> 2] | 0;
      if ((i8 + i17 | 0) >= (i9 | 0)) {
       if ((i8 + i17 | 0) != (i9 | 0)) {
        i10 = i9;
        i6 = i9;
        break;
       }
       i5 = HEAP32[i12 + (i13 << 4) >> 2] | 0;
       if ((i5 | 0) >= (i7 | 0)) {
        i10 = i9;
        i6 = i9;
        break;
       }
      } else i5 = HEAP32[i12 + (i13 << 4) >> 2] | 0;
      HEAP32[i20 + 20 >> 2] = i8 + i17;
      HEAP32[i20 + 16 >> 2] = i5;
      i10 = i8 + i17 | 0;
      i7 = i5;
      i6 = i8 + i17 | 0;
      i1 = i17;
      i2 = i16;
      i3 = i8;
      i4 = i5;
     } else i10 = i9; while (0);
     i13 = i13 + 1 | 0;
     if (i13 >>> 0 >= i11 - i12 >> 4 >>> 0) break; else i9 = i10;
    }
   }
   HEAP32[i18 >> 2] = i4;
   HEAP32[i18 + 4 >> 2] = i3;
   HEAP32[i18 + 8 >> 2] = i2;
   HEAP32[i18 + 12 >> 2] = i1;
   break;
  }
 case 4:
  {
   HEAP32[i20 + 20 >> 2] = -1;
   i6 = HEAP32[i19 + 24 >> 2] | 0;
   i7 = HEAP32[i19 + 20 >> 2] | 0;
   if ((i6 | 0) == (i7 | 0)) {
    i4 = 0;
    i3 = 0;
    i2 = 0;
    i1 = 0;
   } else {
    i1 = 0;
    i2 = 0;
    i3 = 0;
    i4 = 0;
    i9 = -1;
    i8 = 0;
    do {
     i5 = HEAP32[i7 + (i8 << 4) + 8 >> 2] | 0;
     if (((i5 | 0) >= (i17 | 0) ? (HEAP32[i7 + (i8 << 4) + 12 >> 2] | 0) >= (i16 | 0) : 0) ? (i10 = HEAP32[i7 + (i8 << 4) >> 2] | 0, i11 = HEAP32[i7 + (i8 << 4) + 4 >> 2] | 0, i12 = __ZNK15MaxRectsBinPack21ContactPointScoreNodeEiiii(i19, i10, i11, i17, i16) | 0, (i12 | 0) > (i9 | 0)) : 0) {
      HEAP32[i20 + 20 >> 2] = i12;
      i1 = i16;
      i2 = i17;
      i3 = i11;
      i4 = i10;
      i9 = i12;
     }
     if (((i5 | 0) >= (i16 | 0) ? (HEAP32[i7 + (i8 << 4) + 12 >> 2] | 0) >= (i17 | 0) : 0) ? (i13 = HEAP32[i7 + (i8 << 4) >> 2] | 0, i14 = HEAP32[i7 + (i8 << 4) + 4 >> 2] | 0, i15 = __ZNK15MaxRectsBinPack21ContactPointScoreNodeEiiii(i19, i13, i14, i17, i16) | 0, (i15 | 0) > (i9 | 0)) : 0) {
      HEAP32[i20 + 20 >> 2] = i15;
      i1 = i17;
      i2 = i16;
      i3 = i14;
      i4 = i13;
      i9 = i15;
     }
     i8 = i8 + 1 | 0;
    } while (i8 >>> 0 < i6 - i7 >> 4 >>> 0);
   }
   HEAP32[i18 >> 2] = i4;
   HEAP32[i18 + 4 >> 2] = i3;
   HEAP32[i18 + 8 >> 2] = i2;
   HEAP32[i18 + 12 >> 2] = i1;
   break;
  }
 case 1:
  {
   __ZNK15MaxRectsBinPack37FindPositionForNewNodeBestLongSideFitEiiRiS0_(i18, i19, i17, i16, i20 + 16 | 0, i20 + 20 | 0);
   break;
  }
 case 2:
  {
   __ZNK15MaxRectsBinPack33FindPositionForNewNodeBestAreaFitEiiRiS0_(i20, i19, i17, i16, i20 + 20 | 0, i20 + 16 | 0);
   HEAP32[i18 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i18 + 4 >> 2] = HEAP32[i20 + 4 >> 2];
   HEAP32[i18 + 8 >> 2] = HEAP32[i20 + 8 >> 2];
   HEAP32[i18 + 12 >> 2] = HEAP32[i20 + 12 >> 2];
   break;
  }
 default:
  {
   HEAP32[i18 >> 2] = -1;
   HEAP32[i18 + 4 >> 2] = -1;
   HEAP32[i18 + 8 >> 2] = -1;
   HEAP32[i18 + 12 >> 2] = -1;
   STACKTOP = i20;
   return;
  }
 }
 if (!(HEAP32[i18 + 12 >> 2] | 0)) {
  STACKTOP = i20;
  return;
 }
 i1 = HEAP32[i19 + 20 >> 2] | 0;
 i3 = (HEAP32[i19 + 24 >> 2] | 0) - i1 >> 4;
 L51 : do if (i3) {
  i2 = 0;
  while (1) {
   i17 = i1 + (i2 << 4) | 0;
   HEAP32[i20 + 24 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i20 + 24 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i20 + 24 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i20 + 24 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
   if (__ZN15MaxRectsBinPack13SplitFreeNodeE4RectRKS0_(i19, i20 + 24 | 0, i18) | 0) {
    i4 = HEAP32[i19 + 20 >> 2] | 0;
    i17 = i4 + ((i2 << 4 >> 4) + 1 << 4) | 0;
    i1 = (HEAP32[i19 + 24 >> 2] | 0) - i17 | 0;
    _memmove(i4 + (i2 << 4) | 0, i17 | 0, i1 | 0) | 0;
    i1 = i4 + ((i1 >> 4) + i2 << 4) | 0;
    i4 = HEAP32[i19 + 24 >> 2] | 0;
    if ((i4 | 0) != (i1 | 0)) HEAP32[i19 + 24 >> 2] = i4 + (~((i4 + -16 - i1 | 0) >>> 4) << 4);
    i2 = i2 + -1 | 0;
    i3 = i3 + -1 | 0;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i3 >>> 0) break L51;
   i1 = HEAP32[i19 + 20 >> 2] | 0;
  }
 } while (0);
 __ZN15MaxRectsBinPack13PruneFreeListEv(i19);
 i1 = HEAP32[i19 + 12 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i19 + 16 >> 2] | 0)) {
  __ZNSt3__16vectorI4RectNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i19 + 8 | 0, i18);
  STACKTOP = i20;
  return;
 } else {
  HEAP32[i1 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i18 + 12 >> 2];
  HEAP32[i19 + 12 >> 2] = (HEAP32[i19 + 12 >> 2] | 0) + 16;
  STACKTOP = i20;
  return;
 }
}

function _psh_hint_align(i17, i14, i13, i15) {
 i17 = i17 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0, i18 = 0;
 i12 = HEAP32[i14 + 4 + (i13 * 204 | 0) + 196 >> 2] | 0;
 if (HEAP32[i17 + 16 >> 2] & 8) return;
 i1 = HEAP32[i14 + 4 + (i13 * 204 | 0) + 200 >> 2] | 0;
 i1 = (_FT_MulFix(HEAP32[i17 >> 2] | 0, i12) | 0) + i1 | 0;
 i16 = _FT_MulFix(HEAP32[i17 + 4 >> 2] | 0, i12) | 0;
 L4 : do switch (i13 | 0) {
 case 0:
  {
   if (!(HEAP8[i15 + 120 >> 0] | 0)) i18 = 7; else {
    i6 = (HEAP8[i15 + 122 >> 0] | 0) != 0;
    HEAP32[i17 + 12 >> 2] = i16;
    i2 = i17 + 12 | 0;
    i9 = 0;
    i7 = 0;
    i18 = 28;
   }
   break;
  }
 case 1:
  {
   if (!(HEAP8[i15 + 121 >> 0] | 0)) i18 = 7; else {
    i11 = (HEAP8[i15 + 123 >> 0] | 0) != 0;
    HEAP32[i17 + 12 >> 2] = i16;
    i9 = HEAP32[i17 >> 2] | 0;
    i4 = (HEAP32[i17 + 4 >> 2] | 0) + i9 | 0;
    i10 = HEAP8[i14 + 2492 >> 0] | 0;
    i2 = HEAP32[i14 + 412 >> 2] | 0;
    L10 : do if (!i2) {
     i8 = 0;
     i4 = 2;
     i3 = 0;
    } else {
     i5 = HEAP32[i14 + 2488 >> 2] | 0;
     i3 = i14 + 416 | 0;
     while (1) {
      i6 = i4 - (HEAP32[i3 + 12 >> 2] | 0) | 0;
      if ((i6 | 0) < (0 - i5 | 0)) {
       i8 = 0;
       i4 = 2;
       i3 = 0;
       break L10;
      }
      if (((HEAP32[i3 + 8 >> 2] | 0) + i5 | 0) >= (i4 | 0)) {
       i2 = i3;
       break;
      }
      i2 = i2 + -1 | 0;
      if (!i2) {
       i8 = 0;
       i4 = 2;
       i3 = 0;
       break L10;
      } else i3 = i3 + 32 | 0;
     }
     if (i10 << 24 >> 24 == 0 ? (i6 | 0) > (HEAP32[i14 + 2484 >> 2] | 0) : 0) {
      i8 = 0;
      i4 = 2;
      i3 = 0;
      break;
     }
     i8 = 1;
     i4 = 3;
     i3 = HEAP32[i2 + 16 >> 2] | 0;
    } while (0);
    i2 = HEAP32[i14 + 928 >> 2] | 0;
    L21 : do if (!i2) {
     i4 = i8;
     i2 = 0;
    } else {
     i5 = HEAP32[i14 + 2488 >> 2] | 0;
     i7 = i2;
     i2 = i14 + 932 + (i2 + -1 << 5) | 0;
     while (1) {
      i6 = (HEAP32[i2 + 8 >> 2] | 0) - i9 | 0;
      if ((i6 | 0) < (0 - i5 | 0)) {
       i4 = i8;
       i2 = 0;
       break L21;
      }
      if (((HEAP32[i2 + 12 >> 2] | 0) - i5 | 0) <= (i9 | 0)) break;
      i7 = i7 + -1 | 0;
      if (!i7) {
       i4 = i8;
       i2 = 0;
       break L21;
      } else i2 = i2 + -32 | 0;
     }
     if (i10 << 24 >> 24 == 0 ? (i6 | 0) >= (HEAP32[i14 + 2484 >> 2] | 0) : 0) {
      i4 = i8;
      i2 = 0;
      break;
     }
     i2 = HEAP32[i2 + 16 >> 2] | 0;
    } while (0);
    switch (i4 | 0) {
    case 1:
     {
      HEAP32[i17 + 8 >> 2] = i3 - i16;
      if (!i11) break L4;
      i4 = i17 + 8 | 0;
      i2 = i17 + 12 | 0;
      i1 = (i16 | 0) < 64 ? 64 : i16 + 32 & -64;
      i18 = 50;
      break L4;
     }
    case 2:
     {
      HEAP32[i17 + 8 >> 2] = i2;
      if (!i11) break L4;
      i2 = i17 + 12 | 0;
      i1 = (i16 | 0) < 64 ? 64 : i16 + 32 & -64;
      i18 = 51;
      break L4;
     }
    case 3:
     {
      HEAP32[i17 + 8 >> 2] = i2;
      HEAP32[i17 + 12 >> 2] = i3 - i2;
      break L4;
     }
    default:
     {
      i2 = i17 + 12 | 0;
      i9 = i4;
      i7 = i3;
      i6 = i11;
      i18 = 28;
      break L4;
     }
    }
   }
   break;
  }
 default:
  {
   HEAP32[i17 + 12 >> 2] = i16;
   i2 = i17 + 12 | 0;
   i9 = 0;
   i7 = 0;
   i6 = 0;
   i18 = 28;
  }
 } while (0);
 if ((i18 | 0) == 7) {
  HEAP32[i17 + 8 >> 2] = i1;
  HEAP32[i17 + 12 >> 2] = i16;
  HEAP32[i17 + 16 >> 2] = HEAP32[i17 + 16 >> 2] | 8;
  return;
 }
 L41 : do if ((i18 | 0) == 28) {
  i3 = HEAP32[i17 + 20 >> 2] | 0;
  if (i3) {
   if (!(HEAP32[i3 + 16 >> 2] & 8)) _psh_hint_align(i3, i14, i13, i15);
   i11 = HEAP32[i3 + 8 >> 2] | 0;
   i1 = HEAP32[i3 + 12 >> 2] >> 1;
   i1 = i11 - (i16 >> 1) + i1 + (_FT_MulFix((HEAP32[i17 >> 2] | 0) - ((HEAP32[i3 + 4 >> 2] >> 1) + (HEAP32[i3 >> 2] | 0)) + (HEAP32[i17 + 4 >> 2] >> 1) | 0, i12) | 0) | 0;
  }
  HEAP32[i17 + 8 >> 2] = i1;
  HEAP32[i2 >> 2] = i16;
  do if (!(HEAP8[i15 + 124 >> 0] | 0)) i3 = i16; else {
   if ((i16 | 0) < 65) {
    if ((i16 | 0) > 31) {
     i3 = 64;
     i1 = i1 + (i16 >> 1) & -64;
     break;
    }
    i4 = i1 + 32 & -64;
    if ((i16 | 0) <= 0) {
     i3 = i16;
     i1 = i4;
     break;
    }
    i15 = i1 + i16 | 0;
    i14 = i4 - i1 | 0;
    i1 = (i15 + 32 & -64) - i15 | 0;
    i3 = i16;
    i1 = (((i14 | 0) < 0 ? 0 - i14 | 0 : i14) | 0) > (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0) ? i15 + 32 & -64 : i4;
    break;
   }
   i3 = HEAP32[i14 + 4 + (i13 * 204 | 0) + 8 >> 2] | 0;
   if ((((i16 - i3 | 0) < 0 ? 0 - (i16 - i3) | 0 : i16 - i3 | 0) | 0) < 40) if ((i3 | 0) < 48) {
    i3 = 48;
    i5 = 48;
    i4 = 0;
   } else i18 = 40; else {
    i3 = i16;
    i18 = 40;
   }
   if ((i18 | 0) == 40) {
    if ((i3 | 0) >= 192) {
     i3 = i3 + 32 & -64;
     break;
    }
    i5 = i3 & 63;
    i4 = i3 & -64;
    if (i5 >>> 0 < 10) break;
    if (i5 >>> 0 < 32) {
     i3 = i4 | 10;
     break;
    }
   }
   i3 = i5 >>> 0 < 54 ? i4 | 54 : i3;
  } while (0);
  i15 = i1 + 32 | 0;
  i16 = (i15 & -64) - i1 | 0;
  i15 = (i15 + i3 & -64) - i1 - i3 | 0;
  HEAP32[i17 + 8 >> 2] = ((((i16 | 0) < 0 ? 0 - i16 | 0 : i16) | 0) > (((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) ? i15 : i16) + i1;
  HEAP32[i2 >> 2] = i3;
  if (i6) {
   i1 = (i3 | 0) < 64 ? 64 : i3 + 32 & -64;
   switch (i9 | 0) {
   case 3:
    break L41;
   case 1:
    {
     i3 = i7;
     i4 = i17 + 8 | 0;
     i18 = 50;
     break L41;
    }
   case 2:
    {
     i18 = 51;
     break L41;
    }
   default:
    {}
   }
   i16 = (HEAP32[i17 + 8 >> 2] | 0) + (i1 >> 1) | 0;
   HEAP32[i17 + 8 >> 2] = ((i1 & 64 | 0) == 0 ? i16 + 32 & -64 : i16 & -64 | 32) - (i1 >> 1);
   HEAP32[i2 >> 2] = i1;
  }
 } while (0);
 if ((i18 | 0) == 50) {
  HEAP32[i4 >> 2] = i3 - i1;
  HEAP32[i2 >> 2] = i1;
 } else if ((i18 | 0) == 51) HEAP32[i2 >> 2] = i1;
 HEAP32[i17 + 16 >> 2] = HEAP32[i17 + 16 >> 2] | 8;
 return;
}

function _gray_render_line(i15, i13, i14) {
 i15 = i15 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i3 = HEAP32[i15 + 72 >> 2] | 0;
 i12 = HEAP32[i15 + 68 >> 2] | 0;
 i10 = HEAP32[i15 + 64 >> 2] | 0;
 if ((((i3 >> 8 | 0) > (i14 >> 8 | 0) ? i14 >> 8 : i3 >> 8) | 0) >= (HEAP32[i15 + 20 >> 2] | 0)) {
  HEAP32[i15 + 64 >> 2] = i13;
  HEAP32[i15 + 68 >> 2] = i14;
  HEAP32[i15 + 72 >> 2] = i14 >> 8 << 8;
  return;
 }
 i2 = HEAP32[i15 + 16 >> 2] | 0;
 if ((((i3 >> 8 | 0) > (i14 >> 8 | 0) ? i3 >> 8 : i14 >> 8) | 0) < (i2 | 0)) {
  HEAP32[i15 + 64 >> 2] = i13;
  HEAP32[i15 + 68 >> 2] = i14;
  HEAP32[i15 + 72 >> 2] = i14 >> 8 << 8;
  return;
 }
 if ((i3 >> 8 | 0) == (i14 >> 8 | 0)) {
  _gray_render_scanline(i15, i3 >> 8, i10, i12 - i3 | 0, i13, i14 - (i14 >> 8 << 8) | 0);
  HEAP32[i15 + 64 >> 2] = i13;
  HEAP32[i15 + 68 >> 2] = i14;
  HEAP32[i15 + 72 >> 2] = i14 >> 8 << 8;
  return;
 }
 if ((i10 | 0) == (i13 | 0)) {
  i5 = ((i14 - i12 >> 31) + 256 & -256) - (i12 - i3) | 0;
  i4 = Math_imul(i13 - (i13 >> 8 << 8) << 1, i5) | 0;
  HEAP32[i15 + 32 >> 2] = (HEAP32[i15 + 32 >> 2] | 0) + i4;
  HEAP32[i15 + 36 >> 2] = (HEAP32[i15 + 36 >> 2] | 0) + i5;
  i5 = (i14 - i12 >> 31 | 1) + (i3 >> 8) | 0;
  i4 = HEAP32[i15 + 12 >> 2] | 0;
  i4 = ((i4 | 0) < (i13 >> 8 | 0) ? i4 : i13 >> 8) - (HEAP32[i15 + 8 >> 2] | 0) | 0;
  i4 = (i4 | 0) > -1 ? i4 : -1;
  if ((i4 | 0) == (HEAP32[i15 >> 2] | 0) ? (i5 - i2 | 0) == (HEAP32[i15 + 4 >> 2] | 0) : 0) i1 = i15 + 4 | 0; else {
   if (!(HEAP32[i15 + 40 >> 2] | 0)) _gray_record_cell(i15);
   HEAP32[i15 + 32 >> 2] = 0;
   HEAP32[i15 + 36 >> 2] = 0;
   i1 = i15 + 4 | 0;
  }
  HEAP32[i15 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 - i2;
  i3 = HEAP32[i15 + 28 >> 2] | 0;
  if ((i5 - i2 | 0) >>> 0 < i3 >>> 0) i1 = (i4 | 0) >= (HEAP32[i15 + 24 >> 2] | 0); else i1 = 1;
  i2 = i1 & 1;
  HEAP32[i15 + 40 >> 2] = i2;
  i6 = (((i14 - i12 >> 31) + 256 & -256) << 1) + -256 | 0;
  i7 = Math_imul(i6, i13 - (i13 >> 8 << 8) << 1) | 0;
  if ((i5 | 0) != (i14 >> 8 | 0)) {
   i1 = i3;
   do {
    HEAP32[i15 + 32 >> 2] = (HEAP32[i15 + 32 >> 2] | 0) + i7;
    HEAP32[i15 + 36 >> 2] = (HEAP32[i15 + 36 >> 2] | 0) + i6;
    i5 = i5 + (i14 - i12 >> 31 | 1) | 0;
    i3 = i5 - (HEAP32[i15 + 16 >> 2] | 0) | 0;
    i10 = HEAP32[i15 + 12 >> 2] | 0;
    i10 = ((i10 | 0) < (i13 >> 8 | 0) ? i10 : i13 >> 8) - (HEAP32[i15 + 8 >> 2] | 0) | 0;
    i11 = i4;
    i4 = (i10 | 0) > -1 ? i10 : -1;
    if (!((i4 | 0) == (i11 | 0) ? (i3 | 0) == (HEAP32[i15 + 4 >> 2] | 0) : 0)) {
     if (!i2) {
      _gray_record_cell(i15);
      i1 = HEAP32[i15 + 28 >> 2] | 0;
     }
     HEAP32[i15 + 32 >> 2] = 0;
     HEAP32[i15 + 36 >> 2] = 0;
    }
    HEAP32[i15 >> 2] = i4;
    HEAP32[i15 + 4 >> 2] = i3;
    if (i3 >>> 0 < i1 >>> 0) i2 = (i4 | 0) >= (HEAP32[i15 + 24 >> 2] | 0); else i2 = 1;
    i2 = i2 & 1;
    HEAP32[i15 + 40 >> 2] = i2;
   } while ((i5 | 0) != (i14 >> 8 | 0));
  }
  i12 = i14 - (i14 >> 8 << 8) + -256 + ((i14 - i12 >> 31) + 256 & -256) | 0;
  i11 = Math_imul(i13 - (i13 >> 8 << 8) << 1, i12) | 0;
  HEAP32[i15 + 32 >> 2] = (HEAP32[i15 + 32 >> 2] | 0) + i11;
  HEAP32[i15 + 36 >> 2] = (HEAP32[i15 + 36 >> 2] | 0) + i12;
  HEAP32[i15 + 64 >> 2] = i13;
  HEAP32[i15 + 68 >> 2] = i14;
  HEAP32[i15 + 72 >> 2] = i14 >> 8 << 8;
  return;
 } else {
  i11 = (i14 - i12 >> 31) + 256 & -256;
  i9 = (i14 - i12 | 0) < 0 ? 0 - (i14 - i12) | 0 : i14 - i12 | 0;
  i7 = Math_imul((i14 - i12 | 0) < 0 ? i12 - i3 | 0 : 256 - (i12 - i3) | 0, i13 - i10 | 0) | 0;
  i6 = ((i7 | 0) % (i9 | 0) | 0 | 0) < 0 ? i9 : 0;
  i1 = ((i7 | 0) / (i9 | 0) | 0) + i10 + (((i7 | 0) % (i9 | 0) | 0) >> 31) | 0;
  _gray_render_scanline(i15, i3 >> 8, i10, i12 - i3 | 0, i1, i11);
  i5 = (i14 - i12 >> 31 | 1) + (i3 >> 8) | 0;
  i4 = i5 - (HEAP32[i15 + 16 >> 2] | 0) | 0;
  i2 = HEAP32[i15 + 12 >> 2] | 0;
  i2 = ((i2 | 0) < (i1 >> 8 | 0) ? i2 : i1 >> 8) - (HEAP32[i15 + 8 >> 2] | 0) | 0;
  i2 = (i2 | 0) > -1 ? i2 : -1;
  if ((i2 | 0) == (HEAP32[i15 >> 2] | 0) ? (i4 | 0) == (HEAP32[i15 + 4 >> 2] | 0) : 0) i3 = i15 + 4 | 0; else {
   if (!(HEAP32[i15 + 40 >> 2] | 0)) _gray_record_cell(i15);
   HEAP32[i15 + 32 >> 2] = 0;
   HEAP32[i15 + 36 >> 2] = 0;
   i3 = i15 + 4 | 0;
  }
  HEAP32[i15 >> 2] = i2;
  HEAP32[i3 >> 2] = i4;
  if (i4 >>> 0 < (HEAP32[i15 + 28 >> 2] | 0) >>> 0) i2 = (i2 | 0) >= (HEAP32[i15 + 24 >> 2] | 0); else i2 = 1;
  HEAP32[i15 + 40 >> 2] = i2 & 1;
  if ((i5 | 0) != (i14 >> 8 | 0)) {
   i8 = (((i13 - i10 << 8 | 0) % (i9 | 0) | 0 | 0) < 0 ? i9 : 0) + ((i13 - i10 << 8 | 0) % (i9 | 0) | 0) | 0;
   i4 = ((i7 | 0) % (i9 | 0) | 0) - i9 + i6 | 0;
   while (1) {
    i3 = i8 + i4 | 0;
    i4 = i3 - ((i3 | 0) > -1 ? i9 : 0) | 0;
    i3 = (((i13 - i10 << 8 | 0) % (i9 | 0) | 0) >> 31) + ((i13 - i10 << 8 | 0) / (i9 | 0) | 0) + i1 + (i3 >>> 31 ^ 1) | 0;
    _gray_render_scanline(i15, i5, i1, 256 - i11 | 0, i3, i11);
    i5 = i5 + (i14 - i12 >> 31 | 1) | 0;
    i2 = i5 - (HEAP32[i15 + 16 >> 2] | 0) | 0;
    i1 = HEAP32[i15 + 12 >> 2] | 0;
    i1 = ((i1 | 0) < (i3 >> 8 | 0) ? i1 : i3 >> 8) - (HEAP32[i15 + 8 >> 2] | 0) | 0;
    i1 = (i1 | 0) > -1 ? i1 : -1;
    if (!((i1 | 0) == (HEAP32[i15 >> 2] | 0) ? (i2 | 0) == (HEAP32[i15 + 4 >> 2] | 0) : 0)) {
     if (!(HEAP32[i15 + 40 >> 2] | 0)) _gray_record_cell(i15);
     HEAP32[i15 + 32 >> 2] = 0;
     HEAP32[i15 + 36 >> 2] = 0;
    }
    HEAP32[i15 >> 2] = i1;
    HEAP32[i15 + 4 >> 2] = i2;
    if (i2 >>> 0 < (HEAP32[i15 + 28 >> 2] | 0) >>> 0) i1 = (i1 | 0) >= (HEAP32[i15 + 24 >> 2] | 0); else i1 = 1;
    HEAP32[i15 + 40 >> 2] = i1 & 1;
    if ((i5 | 0) == (i14 >> 8 | 0)) {
     i1 = i3;
     break;
    } else i1 = i3;
   }
  }
  _gray_render_scanline(i15, i14 >> 8, i1, 256 - i11 | 0, i13, i14 - (i14 >> 8 << 8) | 0);
  HEAP32[i15 + 64 >> 2] = i13;
  HEAP32[i15 + 68 >> 2] = i14;
  HEAP32[i15 + 72 >> 2] = i14 >> 8 << 8;
  return;
 }
}

function __Z20AppendTextVertexDataImEvR12VertexBufferR12FTGlyphCacheN4math6float3ERK6StringP6FTFontiRKT_RKS5_SF_f(i6, i9, i11, i1, i8, i10, i7, i12, i13, f3) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 f3 = Math_fround(f3);
 var i2 = 0, i4 = 0, i5 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  STACKTOP = i14;
  return;
 }
 if (!(HEAP8[i1 >> 0] | 0)) {
  STACKTOP = i14;
  return;
 }
 if (f3 < Math_fround(-9.0e3)) f3 = Math_fround(Math_fround(Math_fround(i10 | 0) * Math_fround(4.0)) * Math_fround(.015625));
 HEAP32[i14 + 156 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i14 + 156 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
 HEAP32[i14 + 156 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
 i2 = HEAP8[i1 >> 0] | 0;
 if (!(i2 << 24 >> 24)) i2 = 0; else {
  i4 = 0;
  i5 = i1;
  do {
   i4 = ((i2 & 255) > 32 ? 6 : 0) + i4 | 0;
   i2 = i2 & 255;
   do if (i2 & 128) {
    if ((i2 & 224 | 0) == 192) {
     i5 = i5 + 2 | 0;
     break;
    }
    if ((i2 & 240 | 0) == 224) {
     i5 = i5 + 3 | 0;
     break;
    }
    if ((i2 & 248 | 0) == 240) {
     i5 = i5 + 4 | 0;
     break;
    }
    if ((i2 & 252 | 0) == 248) {
     i5 = i5 + 5 | 0;
     break;
    } else {
     i5 = i5 + 6 | 0;
     break;
    }
   } else i5 = i5 + 1 | 0; while (0);
   i2 = HEAP8[i5 >> 0] | 0;
  } while (i2 << 24 >> 24 != 0);
  i2 = i4;
 }
 i4 = __ZN12VertexBuffer14AppendVerticesEi(i6, i2) | 0;
 i4 = (HEAP32[i6 + 60 >> 2] | 0) + (i4 * 24 | 0) | 0;
 L30 : while (1) {
  L32 : while (1) {
   switch (HEAP8[i1 >> 0] | 0) {
   case 0:
    {
     i1 = 37;
     break L30;
    }
   case 10:
    break;
   default:
    break L32;
   }
   __ZNK4math6float3mlEf(i14 + 144 | 0, i13, f3);
   __ZN4math6float3pLERKS0_(i14 + 156 | 0, i14 + 144 | 0) | 0;
   HEAP32[i11 >> 2] = HEAP32[i14 + 156 >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i14 + 156 + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i14 + 156 + 8 >> 2];
   i1 = i1 + ((HEAP8[i1 >> 0] | 0) == 10 ? 1 : 2) | 0;
  }
  i5 = __Z7ToUtf32PKh(i1) | 0;
  __ZN4math6float3C2Efff(i14 + 132 | 0, Math_fround(1.0), Math_fround(1.0), Math_fround(1.0));
  i5 = __ZN12FTGlyphCache14CacheCharacterEP6FTFontmiRKN4math6float3Eb(i9, i8, i5, i10, i14 + 132 | 0, 1) | 0;
  if (!i5) {
   i1 = 37;
   break;
  }
  i2 = HEAP8[i1 >> 0] | 0;
  if ((i2 & 255) > 32) {
   __ZNK4math6float3mlEf(i14 + 108 | 0, i12, Math_fround(HEAPF32[i5 + 56 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 96 | 0, i11, i14 + 108 | 0);
   __ZNK4math6float3mlEf(i14 + 84 | 0, i13, Math_fround(HEAPF32[i5 + 60 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 120 | 0, i14 + 96 | 0, i14 + 84 | 0);
   __ZNK4math6float3mlEf(i14 + 60 | 0, i12, Math_fround(HEAPF32[i5 + 48 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 72 | 0, i14 + 120 | 0, i14 + 60 | 0);
   __ZNK4math6float3mlEf(i14 + 36 | 0, i13, Math_fround(HEAPF32[i5 + 52 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 48 | 0, i14 + 120 | 0, i14 + 36 | 0);
   __ZNK4math6float3mlEf(i14 + 12 | 0, i12, Math_fround(HEAPF32[i5 + 48 >> 2]));
   __ZNK4math6float3plERKS0_(i14 + 24 | 0, i14 + 48 | 0, i14 + 12 | 0);
   HEAP32[i4 >> 2] = HEAP32[i14 + 120 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i14 + 120 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i14 + 120 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 8 + 4 >> 2] | 0;
   i6 = i4 + 16 | 0;
   HEAP32[i6 >> 2] = HEAP32[i5 + 8 >> 2];
   HEAP32[i6 + 4 >> 2] = i2;
   i6 = i4 + 24 | 0;
   HEAP32[i6 >> 2] = HEAP32[i14 + 48 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i14 + 48 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i14 + 48 + 8 >> 2];
   HEAP32[i4 + 36 >> 2] = HEAP32[i7 >> 2];
   i6 = HEAP32[i5 + 24 + 4 >> 2] | 0;
   i2 = i4 + 40 | 0;
   HEAP32[i2 >> 2] = HEAP32[i5 + 24 >> 2];
   HEAP32[i2 + 4 >> 2] = i6;
   i2 = i4 + 48 | 0;
   HEAP32[i2 >> 2] = HEAP32[i14 + 72 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i14 + 72 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i14 + 72 + 8 >> 2];
   HEAP32[i4 + 60 >> 2] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 16 + 4 >> 2] | 0;
   i6 = i4 + 64 | 0;
   HEAP32[i6 >> 2] = HEAP32[i5 + 16 >> 2];
   HEAP32[i6 + 4 >> 2] = i2;
   i6 = i4 + 72 | 0;
   HEAP32[i6 >> 2] = HEAP32[i14 + 48 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i14 + 48 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i14 + 48 + 8 >> 2];
   HEAP32[i4 + 84 >> 2] = HEAP32[i7 >> 2];
   i6 = HEAP32[i5 + 24 + 4 >> 2] | 0;
   i2 = i4 + 88 | 0;
   HEAP32[i2 >> 2] = HEAP32[i5 + 24 >> 2];
   HEAP32[i2 + 4 >> 2] = i6;
   i2 = i4 + 96 | 0;
   HEAP32[i2 >> 2] = HEAP32[i14 + 72 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i14 + 72 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i14 + 72 + 8 >> 2];
   HEAP32[i4 + 108 >> 2] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 16 + 4 >> 2] | 0;
   i6 = i4 + 112 | 0;
   HEAP32[i6 >> 2] = HEAP32[i5 + 16 >> 2];
   HEAP32[i6 + 4 >> 2] = i2;
   i6 = i4 + 120 | 0;
   HEAP32[i6 >> 2] = HEAP32[i14 + 24 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i14 + 24 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i14 + 24 + 8 >> 2];
   HEAP32[i4 + 132 >> 2] = HEAP32[i7 >> 2];
   i6 = HEAP32[i5 + 32 + 4 >> 2] | 0;
   i2 = i4 + 136 | 0;
   HEAP32[i2 >> 2] = HEAP32[i5 + 32 >> 2];
   HEAP32[i2 + 4 >> 2] = i6;
   i2 = HEAP8[i1 >> 0] | 0;
   i4 = i4 + 144 | 0;
  }
  i2 = i2 & 255;
  do if (i2 & 128) {
   if ((i2 & 224 | 0) == 192) {
    i1 = i1 + 2 | 0;
    break;
   }
   if ((i2 & 240 | 0) == 224) {
    i1 = i1 + 3 | 0;
    break;
   }
   if ((i2 & 248 | 0) == 240) {
    i1 = i1 + 4 | 0;
    break;
   }
   if ((i2 & 252 | 0) == 248) {
    i1 = i1 + 5 | 0;
    break;
   } else {
    i1 = i1 + 6 | 0;
    break;
   }
  } else i1 = i1 + 1 | 0; while (0);
  __ZNK4math6float3mlEf(i14, i12, Math_fround(__ZNK12FTGlyphCache11GetAdvanceXEP6FTFontP15GlyphCacheEntrymi(0, i8, i5, HEAPU8[i1 >> 0] | 0, i10)));
  __ZN4math6float3pLERKS0_(i11, i14) | 0;
 }
 if ((i1 | 0) == 37) {
  STACKTOP = i14;
  return;
 }
}

function __ZNK6String5SplitEPKc(i19, i1, i17) {
 i19 = i19 | 0;
 i1 = i1 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) != 0 ? (i4 = HEAP8[i3 >> 0] | 0, i4 << 24 >> 24 != 0) : 0) {
  HEAP32[i20 + 16 >> 2] = 0;
  HEAP32[i20 + 16 + 4 >> 2] = 0;
  HEAP32[i20 + 16 + 8 >> 2] = 0;
  HEAP32[i20 + 16 + 12 >> 2] = 0;
  i15 = _strlen(i17) | 0;
  i1 = 0;
  i14 = 0;
  i2 = 0;
  i13 = 0;
  i6 = 0;
  i5 = 0;
  L4 : while (1) {
   if (!i3) {
    i9 = i13;
    i3 = 0;
    i4 = 24;
    break;
   }
   i12 = _strlen(i17) | 0;
   L7 : do if ((i12 | 0) > 0) {
    i11 = HEAP8[i17 >> 0] | 0;
    i7 = i3;
    while (1) {
     if (i4 << 24 >> 24 == i11 << 24 >> 24) {
      i8 = i17;
      i9 = i7;
      i10 = 0;
      do {
       i9 = i9 + 1 | 0;
       i10 = i10 + 1 | 0;
       if ((i10 | 0) >= (i12 | 0)) {
        i4 = i7;
        break L7;
       }
       i8 = i8 + 1 | 0;
      } while ((HEAP8[i9 >> 0] | 0) == (HEAP8[i8 >> 0] | 0));
     }
     i4 = i4 & 255;
     do if (i4 & 128) {
      if ((i4 & 224 | 0) == 192) {
       i7 = i7 + 2 | 0;
       break;
      }
      if ((i4 & 240 | 0) == 224) {
       i7 = i7 + 3 | 0;
       break;
      }
      if ((i4 & 248 | 0) == 240) {
       i7 = i7 + 4 | 0;
       break;
      }
      if ((i4 & 252 | 0) == 248) {
       i7 = i7 + 5 | 0;
       break;
      } else {
       i7 = i7 + 6 | 0;
       break;
      }
     } else i7 = i7 + 1 | 0; while (0);
     i4 = HEAP8[i7 >> 0] | 0;
     if (!(i4 << 24 >> 24)) {
      i9 = i13;
      i4 = 24;
      break L4;
     }
    }
   } else i4 = i3; while (0);
   i10 = i4 - i3 | 0;
   if ((i10 | 0) == -1) {
    i9 = i13;
    i4 = 24;
    break;
   }
   if ((i10 | 0) > 0) {
    i4 = __Znaj((i10 + 1 | 0) > -1 ? i10 + 1 | 0 : -1) | 0;
    HEAP8[i4 >> 0] = 0;
    _memcpy(i4 | 0, i3 | 0, i10 | 0) | 0;
    HEAP8[i4 + i10 >> 0] = 0;
    if (!(HEAP8[i4 >> 0] | 0)) i8 = i4; else {
     i7 = i4;
     do i7 = i7 + 1 | 0; while ((HEAP8[i7 >> 0] | 0) != 0);
     i8 = i4;
    }
   } else i8 = 0;
   if (i1 >>> 0 >= i5 >>> 0 ? (i16 = i5 << 1, i16 = i16 >>> 0 < 32 ? 32 : i16, i16 >>> 0 >= i5 >>> 0) : 0) {
    i6 = __Znaj(i16 >>> 0 > 268435455 | i16 << 4 >>> 0 > 4294967291 ? -1 : (i16 << 4) + 4 | 0) | 0;
    HEAP32[i6 >> 2] = i16;
    if (i16) {
     i2 = i6 + 4 | 0;
     do {
      HEAP32[i2 >> 2] = 0;
      HEAP32[i2 + 4 >> 2] = 0;
      HEAP32[i2 + 8 >> 2] = 0;
      HEAP32[i2 + 12 >> 2] = 0;
      i2 = i2 + 16 | 0;
     } while ((i2 | 0) != (i6 + 4 + (i16 << 4) | 0));
    }
    if (!i1) i2 = 0; else {
     i2 = 0;
     do {
      __ZN6StringaSERKS_(i6 + 4 + (i2 << 4) | 0, i14 + (i2 << 4) | 0) | 0;
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < i1 >>> 0);
     i2 = i1;
    }
    if (!i14) i1 = i2; else {
     i5 = i14 + -4 | 0;
     i2 = HEAP32[i5 >> 2] | 0;
     if (i2) {
      i2 = i14 + (i2 << 4) | 0;
      do {
       i2 = i2 + -16 | 0;
       i4 = HEAP32[i2 >> 2] | 0;
       if (i4) __ZdaPv(i4);
       HEAP32[i2 >> 2] = 0;
      } while ((i2 | 0) != (i14 | 0));
     }
     __ZdaPv(i5);
    }
    HEAP32[i20 + 16 >> 2] = i6 + 4;
    HEAP32[i20 + 16 + 8 >> 2] = i16;
    i7 = i6 + 4 | 0;
    i2 = i6 + 4 | 0;
    i9 = i6 + 4 | 0;
    i6 = i6 + 4 | 0;
    i5 = i16;
   } else {
    i7 = i14;
    i9 = i13;
   }
   i1 = i7 + (i1 << 4) | 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i1, i8);
   i1 = (HEAP32[i20 + 16 + 12 >> 2] | 0) + 1 | 0;
   HEAP32[i20 + 16 + 12 >> 2] = i1;
   if (i8) __ZdaPv(i8);
   i3 = i3 + (i10 + i15) | 0;
   i4 = HEAP8[i3 >> 0] | 0;
   if (!(i4 << 24 >> 24)) {
    i4 = 63;
    break;
   } else {
    i14 = i7;
    i13 = i9;
   }
  }
  if ((i4 | 0) == 24) {
   HEAP32[i20 >> 2] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
   HEAP32[i20 + 8 >> 2] = 0;
   HEAP32[i20 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i20, i3);
   if (i1 >>> 0 >= i5 >>> 0 ? (i18 = i5 << 1, i18 = i18 >>> 0 < 32 ? 32 : i18, i18 >>> 0 >= i5 >>> 0) : 0) {
    i5 = __Znaj(i18 >>> 0 > 268435455 | i18 << 4 >>> 0 > 4294967291 ? -1 : (i18 << 4) + 4 | 0) | 0;
    HEAP32[i5 >> 2] = i18;
    if (i18) {
     i2 = i5 + 4 | 0;
     do {
      HEAP32[i2 >> 2] = 0;
      HEAP32[i2 + 4 >> 2] = 0;
      HEAP32[i2 + 8 >> 2] = 0;
      HEAP32[i2 + 12 >> 2] = 0;
      i2 = i2 + 16 | 0;
     } while ((i2 | 0) != (i5 + 4 + (i18 << 4) | 0));
    }
    if (!i1) {
     i4 = i1;
     i1 = 0;
    } else {
     i2 = 0;
     do {
      __ZN6StringaSERKS_(i5 + 4 + (i2 << 4) | 0, i6 + (i2 << 4) | 0) | 0;
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < i1 >>> 0);
     i4 = i1;
    }
    if (i9) {
     i3 = i9 + -4 | 0;
     i1 = HEAP32[i3 >> 2] | 0;
     if (i1) {
      i1 = i9 + (i1 << 4) | 0;
      do {
       i1 = i1 + -16 | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2) __ZdaPv(i2);
       HEAP32[i1 >> 2] = 0;
      } while ((i1 | 0) != (i9 | 0));
     }
     __ZdaPv(i3);
     i1 = i4;
    }
    HEAP32[i20 + 16 >> 2] = i5 + 4;
    HEAP32[i20 + 16 + 8 >> 2] = i18;
    i2 = i5 + 4 | 0;
   }
   i1 = i2 + (i1 << 4) | 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i1, HEAP32[i20 >> 2] | 0);
   HEAP32[i20 + 16 + 12 >> 2] = (HEAP32[i20 + 16 + 12 >> 2] | 0) + 1;
   i1 = HEAP32[i20 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i20 >> 2] = 0;
   __ZN5ArrayI6String9StdCAllocEC2ERKS2_(i19, i20 + 16 | 0);
  } else if ((i4 | 0) == 63) __ZN5ArrayI6String9StdCAllocEC2ERKS2_(i19, i20 + 16 | 0);
  __ZN5ArrayI6String9StdCAllocED2Ev(i20 + 16 | 0);
  STACKTOP = i20;
  return;
 };
 HEAP32[i19 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 HEAP32[i19 + 12 >> 2] = 0;
 STACKTOP = i20;
 return;
}

function _T1_Read_Metrics(i12, i13) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i15 = HEAP32[i13 + 28 >> 2] | 0;
 HEAP32[i16 >> 2] = 2;
 i1 = _ft_mem_alloc(i15, 44, i16) | 0;
 if ((HEAP32[i16 >> 2] | 0) == 0 ? (i10 = _FT_Stream_EnterFrame(i13, HEAP32[i13 + 4 >> 2] | 0) | 0, HEAP32[i16 >> 2] = i10, (i10 | 0) == 0) : 0) {
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 460 >> 2];
  HEAP32[i1 + 4 + 4 >> 2] = HEAP32[i12 + 460 + 4 >> 2];
  HEAP32[i1 + 4 + 8 >> 2] = HEAP32[i12 + 460 + 8 >> 2];
  HEAP32[i1 + 4 + 12 >> 2] = HEAP32[i12 + 460 + 12 >> 2];
  HEAP32[i1 + 20 >> 2] = HEAP32[i12 + 460 + 12 >> 2];
  HEAP32[i1 + 24 >> 2] = HEAP32[i12 + 460 + 4 >> 2];
  i3 = (HEAP32[i12 + 488 >> 2] | 0) + 24 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  do if (i2) {
   i2 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 63](i16 + 4 | 0, HEAP32[i13 + 28 >> 2] | 0, HEAP32[i13 + 32 >> 2] | 0, HEAP32[i13 + 36 >> 2] | 0) | 0;
   HEAP32[i16 >> 2] = i2;
   if (!i2) {
    HEAP32[i16 + 4 + 8 >> 2] = i1;
    HEAP32[i16 + 4 + 12 >> 2] = 61;
    HEAP32[i16 + 4 + 16 >> 2] = i12 + 132;
    HEAP32[i16 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i16 + 4 | 0) | 0;
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] & 127](i16 + 4 | 0);
    i2 = HEAP32[i16 >> 2] | 0;
   }
   if ((i2 | 0) == 2) {
    i9 = HEAP32[i13 + 32 >> 2] | 0;
    i2 = HEAP32[i13 + 4 >> 2] | 0;
    if (i2 >>> 0 <= 6) break;
    if ((HEAPU8[i9 + 1 >> 0] | 0) >= 4) break;
    if ((HEAPU8[i9 + 4 >> 0] << 16 | HEAPU8[i9 + 5 >> 0] << 24 | HEAPU8[i9 + 3 >> 0] << 8 | HEAPU8[i9 + 2 >> 0] | 0) != (i2 | 0)) break;
    i10 = HEAP32[i13 + 28 >> 2] | 0;
    i3 = HEAP32[i13 + 36 >> 2] | 0;
    HEAP32[i16 + 24 >> 2] = 0;
    L14 : do if ((i9 + 101 | 0) >>> 0 <= i3 >>> 0) {
     i2 = HEAPU8[i9 + 100 >> 0] << 8 | HEAPU8[i9 + 99 >> 0];
     if (((i9 + (i2 + 135) | 0) >>> 0 <= i3 >>> 0 ? (HEAPU8[i9 + (i2 + 118) >> 0] << 8 | HEAPU8[i9 + (i2 + 117) >> 0]) >>> 0 >= 18 : 0) ? (i11 = HEAPU8[i9 + (i2 + 133) >> 0] << 16 | HEAPU8[i9 + (i2 + 134) >> 0] << 24 | HEAPU8[i9 + (i2 + 132) >> 0] << 8 | HEAPU8[i9 + (i2 + 131) >> 0], (i11 | 0) != 0) : 0) {
      if ((i9 + (i11 + 2) | 0) >>> 0 > i3 >>> 0) {
       HEAP32[i16 + 24 >> 2] = 2;
       i14 = 33;
       break;
      }
      i2 = HEAPU8[i9 + (i11 + 1) >> 0] << 8 | HEAPU8[i9 + i11 >> 0];
      HEAP32[i1 + 40 >> 2] = i2;
      if ((i9 + ((i2 << 2) + (i11 + 2)) | 0) >>> 0 > i3 >>> 0) {
       HEAP32[i16 + 24 >> 2] = 2;
       i14 = 33;
       break;
      }
      if (i2) {
       i3 = _ft_mem_realloc(i10, 16, 0, i2, 0, i16 + 24 | 0) | 0;
       HEAP32[i1 + 36 >> 2] = i3;
       if (!(HEAP32[i16 + 24 >> 2] | 0)) {
        i7 = (HEAP32[i1 + 40 >> 2] << 2) + (i11 + 2) | 0;
        i8 = HEAP32[i12 + 92 >> 2] | 0;
        i2 = HEAP32[i12 + 36 >> 2] | 0;
        L28 : do if ((i2 | 0) > 0) {
         i4 = HEAP32[i12 + 40 >> 2] | 0;
         i6 = 0;
         while (1) {
          i5 = HEAP32[i4 + (i6 << 2) >> 2] | 0;
          i6 = i6 + 1 | 0;
          if ((HEAP16[i5 + 8 >> 1] | 0) == 7) break;
          if ((i6 | 0) >= (i2 | 0)) break L28;
         }
         i6 = _FT_Set_Charmap(i12, i5) | 0;
         HEAP32[i16 + 24 >> 2] = i6;
         if (i6) {
          i14 = 33;
          break L14;
         }
        } while (0);
        if ((i11 + 2 | 0) < (i7 | 0)) {
         i2 = i9 + (i11 + 2) | 0;
         while (1) {
          HEAP32[i3 >> 2] = _FT_Get_Char_Index(i12, HEAPU8[i2 >> 0] | 0) | 0;
          HEAP32[i3 + 4 >> 2] = _FT_Get_Char_Index(i12, HEAPU8[i2 + 1 >> 0] | 0) | 0;
          HEAP32[i3 + 8 >> 2] = HEAP8[i2 + 3 >> 0] << 8 | HEAPU8[i2 + 2 >> 0];
          HEAP32[i3 + 12 >> 2] = 0;
          i2 = i2 + 4 | 0;
          if (i2 >>> 0 >= (i9 + i7 | 0) >>> 0) break; else i3 = i3 + 16 | 0;
         }
        }
        if (!i8) i2 = HEAP32[i16 + 24 >> 2] | 0; else {
         i2 = _FT_Set_Charmap(i12, i8) | 0;
         HEAP32[i16 + 24 >> 2] = i2;
        }
        if (i2) {
         i14 = 33;
         break;
        }
        _qsort(HEAP32[i1 + 36 >> 2] | 0, HEAP32[i1 + 40 >> 2] | 0, 16, 152);
        if (!(HEAP32[i16 + 24 >> 2] | 0)) i2 = 0; else i14 = 33;
       } else i14 = 33;
      } else i2 = 0;
     } else i2 = 0;
    } else {
     HEAP32[i16 + 24 >> 2] = 2;
     i14 = 33;
    } while (0);
    if ((i14 | 0) == 33) {
     _ft_mem_free(i10, HEAP32[i1 + 36 >> 2] | 0);
     HEAP32[i1 + 36 >> 2] = 0;
     HEAP32[i1 + 40 >> 2] = 0;
     i2 = HEAP32[i16 + 24 >> 2] | 0;
    }
    HEAP32[i16 >> 2] = i2;
   }
   if (!i2) i14 = 36;
  } else i14 = 36; while (0);
  if ((i14 | 0) == 36) {
   HEAP32[i12 + 460 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i12 + 460 + 4 >> 2] = HEAP32[i1 + 4 + 4 >> 2];
   HEAP32[i12 + 460 + 8 >> 2] = HEAP32[i1 + 4 + 8 >> 2];
   HEAP32[i12 + 460 + 12 >> 2] = HEAP32[i1 + 4 + 12 >> 2];
   HEAP32[i12 + 52 >> 2] = HEAP32[i1 + 4 >> 2] >> 16;
   HEAP32[i12 + 56 >> 2] = HEAP32[i1 + 8 >> 2] >> 16;
   HEAP32[i12 + 60 >> 2] = (HEAP32[i1 + 12 >> 2] | 0) + 65535 >> 16;
   HEAP32[i12 + 64 >> 2] = (HEAP32[i1 + 16 >> 2] | 0) + 65535 >> 16;
   HEAP16[i12 + 70 >> 1] = ((HEAP32[i1 + 20 >> 2] | 0) + 32768 | 0) >>> 16;
   HEAP16[i12 + 72 >> 1] = ((HEAP32[i1 + 24 >> 2] | 0) + 32768 | 0) >>> 16;
   if (HEAP32[i1 + 40 >> 2] | 0) {
    HEAP32[i12 + 8 >> 2] = HEAP32[i12 + 8 >> 2] | 64;
    HEAP32[i12 + 492 >> 2] = i1;
    i1 = 0;
   }
  }
  _FT_Stream_ExitFrame(i13);
 }
 if (!i1) {
  i15 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i14 = i1 + 36 | 0;
 _ft_mem_free(i15, HEAP32[i14 >> 2] | 0);
 HEAP32[i14 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 i14 = i1 + 28 | 0;
 _ft_mem_free(i15, HEAP32[i14 >> 2] | 0);
 HEAP32[i14 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 _ft_mem_free(i15, i1);
 i15 = HEAP32[i16 >> 2] | 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _TT_Vary_Get_Glyph_Deltas(i21, i1, i22, i2, i20, i23) {
 i21 = i21 | 0;
 i1 = i1 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i20 = i20 | 0;
 i23 = i23 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i24 = 0, i25 = 0, i26 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i17 = HEAP32[i21 + 28 >> 2] | 0;
 HEAP32[i24 >> 2] = 0;
 if (i1 << 24 >> 24 == 0 | (i22 | 0) == 0) {
  i23 = 6;
  STACKTOP = i24;
  return i23 | 0;
 }
 i16 = _ft_mem_realloc(i17, 8, 0, i23, 0, i24 + 8 | 0) | 0;
 i1 = HEAP32[i24 + 8 >> 2] | 0;
 if (i1) {
  i23 = i1;
  STACKTOP = i24;
  return i23 | 0;
 }
 HEAP32[i20 >> 2] = i16;
 if ((HEAP32[i22 + 32 >> 2] | 0) >>> 0 <= i2 >>> 0) {
  i23 = 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i15 = HEAP32[i22 + 36 >> 2] | 0;
 i1 = HEAP32[i15 + (i2 << 2) >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i15 + (i2 + 1 << 2) >> 2] | 0)) {
  i23 = 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 i15 = _FT_Stream_Seek(i21, i1) | 0;
 HEAP32[i24 + 8 >> 2] = i15;
 if ((i15 | 0) == 0 ? (i15 = HEAP32[i22 + 36 >> 2] | 0, i15 = _FT_Stream_EnterFrame(i21, (HEAP32[i15 + (i2 + 1 << 2) >> 2] | 0) - (HEAP32[i15 + (i2 << 2) >> 2] | 0) | 0) | 0, HEAP32[i24 + 8 >> 2] = i15, (i15 | 0) == 0) : 0) {
  i1 = (HEAP32[i21 + 32 >> 2] | 0) - (HEAP32[i21 >> 2] | 0) | 0;
  i14 = _ft_mem_realloc(i17, 4, 0, HEAP32[i22 >> 2] | 0, 0, i24 + 8 | 0) | 0;
  if (((HEAP32[i24 + 8 >> 2] | 0) == 0 ? (i18 = _ft_mem_realloc(i17, 4, 0, HEAP32[i22 >> 2] | 0, 0, i24 + 8 | 0) | 0, (HEAP32[i24 + 8 >> 2] | 0) == 0) : 0) ? (i19 = _ft_mem_realloc(i17, 4, 0, HEAP32[i22 >> 2] | 0, 0, i24 + 8 | 0) | 0, (HEAP32[i24 + 8 >> 2] | 0) == 0) : 0) {
   i15 = (_FT_Stream_GetUShort(i21) | 0) & 65535;
   i1 = ((_FT_Stream_GetUShort(i21) | 0) & 65535) + i1 | 0;
   if (!(i15 & 32768)) i13 = 0; else {
    i13 = HEAP32[i21 >> 2] | 0;
    i12 = (HEAP32[i21 + 32 >> 2] | 0) - i13 | 0;
    HEAP32[i21 + 32 >> 2] = i13 + i1;
    i13 = _ft_var_readpackedpoints(i21, i24) | 0;
    i11 = HEAP32[i21 >> 2] | 0;
    i1 = (HEAP32[i21 + 32 >> 2] | 0) - i11 | 0;
    HEAP32[i21 + 32 >> 2] = i11 + i12;
   }
   L23 : do if (i15 & 4095) {
    i11 = HEAP32[i24 >> 2] | 0;
    i12 = 0;
    i2 = 0;
    while (1) {
     i10 = (_FT_Stream_GetUShort(i21) | 0) & 65535;
     i5 = _FT_Stream_GetUShort(i21) | 0;
     if (i5 & 32768) {
      if (HEAP32[i22 >> 2] | 0) {
       i3 = 0;
       do {
        HEAP32[i14 + (i3 << 2) >> 2] = (_FT_Stream_GetUShort(i21) | 0) << 16 >> 16 << 2;
        i3 = i3 + 1 | 0;
       } while (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0);
      }
     } else {
      if ((i5 & 4095) >>> 0 >= (HEAP32[i22 + 24 >> 2] | 0) >>> 0) break;
      i8 = HEAP32[i22 >> 2] | 0;
      i7 = Math_imul(i8, i5 & 4095) | 0;
      _memcpy(i14 | 0, (HEAP32[i22 + 28 >> 2] | 0) + (i7 << 2) | 0, i8 << 2 | 0) | 0;
     }
     if ((i5 & 16384 | 0) != 0 ? (HEAP32[i22 >> 2] | 0) != 0 : 0) {
      i4 = 0;
      do {
       HEAP32[i18 + (i4 << 2) >> 2] = (_FT_Stream_GetUShort(i21) | 0) << 16 >> 16 << 2;
       i4 = i4 + 1 | 0;
       i3 = HEAP32[i22 >> 2] | 0;
      } while (i4 >>> 0 < i3 >>> 0);
      if (i3) {
       i3 = 0;
       do {
        HEAP32[i19 + (i3 << 2) >> 2] = (_FT_Stream_GetUShort(i21) | 0) << 16 >> 16 << 2;
        i3 = i3 + 1 | 0;
       } while (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0);
      }
     }
     i8 = _ft_var_apply_tuple(i22, i5, i14, i18, i19) | 0;
     if (i8) {
      i3 = HEAP32[i21 >> 2] | 0;
      i9 = (HEAP32[i21 + 32 >> 2] | 0) - i3 | 0;
      if (!(i5 & 8192)) {
       HEAP32[i24 + 4 >> 2] = i11;
       i5 = i11;
       i4 = i13;
      } else {
       HEAP32[i21 + 32 >> 2] = i3 + i1;
       i4 = _ft_var_readpackedpoints(i21, i24 + 4 | 0) | 0;
       i5 = HEAP32[i24 + 4 >> 2] | 0;
       i2 = i4;
      }
      i3 = (i5 | 0) == 0;
      i7 = i3 ? i23 : i5;
      i6 = _ft_var_readpackeddeltas(i21, i7) | 0;
      i7 = _ft_var_readpackeddeltas(i21, i7) | 0;
      L48 : do if (!((i6 | 0) == 0 | ((i4 | 0) == 0 | (i7 | 0) == 0))) {
       if ((i4 | 0) == (-1 | 0)) {
        if (!i23) break; else i3 = 0;
        while (1) {
         i5 = _FT_MulFix(HEAP16[i6 + (i3 << 1) >> 1] | 0, i8) | 0;
         i4 = i16 + (i3 << 3) | 0;
         HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i5;
         i4 = _FT_MulFix(HEAP16[i7 + (i3 << 1) >> 1] | 0, i8) | 0;
         i5 = i16 + (i3 << 3) + 4 | 0;
         HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i4;
         i3 = i3 + 1 | 0;
         if ((i3 | 0) == (i23 | 0)) break L48;
        }
       }
       if (i3) break; else i4 = 0;
       do {
        i3 = i2 + (i4 << 1) | 0;
        if ((HEAPU16[i3 >> 1] | 0) >>> 0 < i23 >>> 0) {
         i26 = _FT_MulFix(HEAP16[i6 + (i4 << 1) >> 1] | 0, i8) | 0;
         i25 = i16 + (HEAPU16[i3 >> 1] << 3) | 0;
         HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + i26;
         i25 = _FT_MulFix(HEAP16[i7 + (i4 << 1) >> 1] | 0, i8) | 0;
         i3 = i16 + (HEAPU16[i3 >> 1] << 3) + 4 | 0;
         HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i25;
        }
        i4 = i4 + 1 | 0;
       } while (i4 >>> 0 < i5 >>> 0);
      } while (0);
      if ((i2 | 0) == (-1 | 0)) i2 = -1; else {
       _ft_mem_free(i17, i2);
       i2 = 0;
      }
      _ft_mem_free(i17, i6);
      _ft_mem_free(i17, i7);
      HEAP32[i21 + 32 >> 2] = (HEAP32[i21 >> 2] | 0) + i9;
     }
     i12 = i12 + 1 | 0;
     if (i12 >>> 0 >= (i15 & 4095) >>> 0) break L23; else i1 = i10 + i1 | 0;
    }
    HEAP32[i24 + 8 >> 2] = 8;
   } while (0);
   _ft_mem_free(i17, i14);
   _ft_mem_free(i17, i18);
   _ft_mem_free(i17, i19);
  }
  _FT_Stream_ExitFrame(i21);
  if (!(HEAP32[i24 + 8 >> 2] | 0)) {
   i26 = 0;
   STACKTOP = i24;
   return i26 | 0;
  }
 }
 _ft_mem_free(i17, i16);
 HEAP32[i20 >> 2] = 0;
 i26 = HEAP32[i24 + 8 >> 2] | 0;
 STACKTOP = i24;
 return i26 | 0;
}

function _FT_Outline_Decompose(i15, i13, i16) {
 i15 = i15 | 0;
 i13 = i13 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if (!((i15 | 0) != 0 & (i13 | 0) != 0)) {
  i16 = 6;
  STACKTOP = i17;
  return i16 | 0;
 }
 i11 = HEAP32[i13 + 16 >> 2] | 0;
 i12 = HEAP32[i13 + 20 >> 2] | 0;
 if ((HEAP16[i15 >> 1] | 0) <= 0) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i2 = 0;
 i14 = 0;
 L7 : while (1) {
  i10 = HEAP16[(HEAP32[i15 + 12 >> 2] | 0) + (i14 << 1) >> 1] | 0;
  if (i10 << 16 >> 16 < 0) {
   i1 = 20;
   i2 = 29;
   break;
  }
  i8 = HEAP32[i15 + 4 >> 2] | 0;
  i1 = i8 + (i2 << 3) | 0;
  i4 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  HEAP32[i17 + 8 >> 2] = i4;
  HEAP32[i17 + 8 + 4 >> 2] = i1;
  HEAP32[i17 + 8 >> 2] = (i4 << i11) - i12;
  HEAP32[i17 + 8 + 4 >> 2] = (i1 << i11) - i12;
  i4 = (HEAP32[i8 + (i10 << 16 >> 16 << 3) >> 2] << i11) - i12 | 0;
  i5 = (HEAP32[i8 + (i10 << 16 >> 16 << 3) + 4 >> 2] << i11) - i12 | 0;
  i6 = HEAP32[i17 + 8 >> 2] | 0;
  i7 = HEAP32[i17 + 8 + 4 >> 2] | 0;
  HEAP32[i17 + 16 >> 2] = i6;
  HEAP32[i17 + 16 + 4 >> 2] = i7;
  i7 = HEAP32[i15 + 8 >> 2] | 0;
  i3 = i7 + i2 | 0;
  switch (HEAPU8[i3 >> 0] & 3 | 0) {
  case 2:
   {
    i1 = 20;
    i2 = 29;
    break L7;
   }
  case 0:
   {
    if ((HEAP8[i7 + (i10 << 16 >> 16) >> 0] & 3) == 1) {
     HEAP32[i17 + 8 >> 2] = i4;
     HEAP32[i17 + 8 + 4 >> 2] = i5;
     i1 = i8 + ((i10 << 16 >> 16) + -1 << 3) | 0;
    } else {
     HEAP32[i17 + 8 >> 2] = (i6 + i4 | 0) / 2 | 0;
     HEAP32[i17 + 8 + 4 >> 2] = ((i1 << i11) - i12 + i5 | 0) / 2 | 0;
     i1 = i8 + (i10 << 16 >> 16 << 3) | 0;
    }
    i3 = i2 + -1 | 0;
    i2 = i3;
    i9 = i1;
    i3 = i7 + i3 | 0;
    break;
   }
  default:
   i9 = i8 + (i10 << 16 >> 16 << 3) | 0;
  }
  i2 = i8 + (i2 << 3) | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 255](i17 + 8 | 0, i16) | 0;
  if (i1) {
   i2 = 29;
   break;
  }
  L18 : do if (i2 >>> 0 < i9 >>> 0) {
   i4 = i3;
   L19 : while (1) {
    i5 = i2 + 8 | 0;
    i3 = i4 + 1 | 0;
    switch (HEAPU8[i3 >> 0] & 3 | 0) {
    case 1:
     {
      HEAP32[i17 + 56 >> 2] = (HEAP32[i5 >> 2] << i11) - i12;
      HEAP32[i17 + 56 + 4 >> 2] = (HEAP32[i2 + 12 >> 2] << i11) - i12;
      i1 = FUNCTION_TABLE_iii[HEAP32[i13 + 4 >> 2] & 255](i17 + 56 | 0, i16) | 0;
      if (!i1) {
       i2 = i5;
       i1 = i3;
      } else {
       i2 = 29;
       break L7;
      }
      break;
     }
    case 0:
     {
      i1 = (HEAP32[i5 >> 2] << i11) - i12 | 0;
      HEAP32[i17 + 16 >> 2] = i1;
      i4 = (HEAP32[i2 + 12 >> 2] << i11) - i12 | 0;
      HEAP32[i17 + 16 + 4 >> 2] = i4;
      if (i5 >>> 0 < i9 >>> 0) i6 = i5; else {
       i2 = 20;
       break L19;
      }
      L28 : while (1) {
       i7 = i6 + 8 | 0;
       i3 = i3 + 1 | 0;
       i8 = HEAPU8[i3 >> 0] & 3;
       i5 = (HEAP32[i7 >> 2] << i11) - i12 | 0;
       HEAP32[i17 >> 2] = i5;
       i2 = (HEAP32[i2 + 20 >> 2] << i11) - i12 | 0;
       HEAP32[i17 + 4 >> 2] = i2;
       switch (i8 | 0) {
       case 1:
        break L28;
       case 0:
        break;
       default:
        {
         i1 = 20;
         i2 = 29;
         break L7;
        }
       }
       HEAP32[i17 + 48 >> 2] = (i5 + i1 | 0) / 2 | 0;
       HEAP32[i17 + 48 + 4 >> 2] = (i2 + i4 | 0) / 2 | 0;
       i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 8 >> 2] & 127](i17 + 16 | 0, i17 + 48 | 0, i16) | 0;
       if (i1) {
        i2 = 29;
        break L7;
       }
       i1 = HEAP32[i17 >> 2] | 0;
       i4 = HEAP32[i17 + 4 >> 2] | 0;
       HEAP32[i17 + 16 >> 2] = i1;
       HEAP32[i17 + 16 + 4 >> 2] = i4;
       if (i7 >>> 0 >= i9 >>> 0) {
        i2 = 20;
        break L19;
       } else {
        i2 = i6;
        i6 = i7;
       }
      }
      i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 8 >> 2] & 127](i17 + 16 | 0, i17, i16) | 0;
      if (!i1) {
       i2 = i7;
       i1 = i3;
      } else {
       i2 = 29;
       break L7;
      }
      break;
     }
    default:
     {
      if ((i2 + 16 | 0) >>> 0 > i9 >>> 0) {
       i1 = 20;
       i2 = 29;
       break L7;
      }
      if ((HEAP8[i4 + 2 >> 0] & 3) != 2) {
       i1 = 20;
       i2 = 29;
       break L7;
      }
      i3 = i2 + 24 | 0;
      HEAP32[i17 + 40 >> 2] = (HEAP32[i2 + 8 >> 2] << i11) - i12;
      HEAP32[i17 + 40 + 4 >> 2] = (HEAP32[i2 + 12 >> 2] << i11) - i12;
      HEAP32[i17 + 32 >> 2] = (HEAP32[i2 + 16 >> 2] << i11) - i12;
      HEAP32[i17 + 32 + 4 >> 2] = (HEAP32[i2 + 20 >> 2] << i11) - i12;
      if (i3 >>> 0 > i9 >>> 0) {
       i2 = 25;
       break L19;
      }
      HEAP32[i17 + 24 >> 2] = (HEAP32[i3 >> 2] << i11) - i12;
      HEAP32[i17 + 24 + 4 >> 2] = (HEAP32[i2 + 28 >> 2] << i11) - i12;
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 12 >> 2] & 63](i17 + 40 | 0, i17 + 32 | 0, i17 + 24 | 0, i16) | 0;
      if (!i1) {
       i2 = i3;
       i1 = i4 + 3 | 0;
      } else {
       i2 = 29;
       break L7;
      }
     }
    }
    if (i2 >>> 0 < i9 >>> 0) i4 = i1; else {
     i2 = 26;
     break L18;
    }
   }
   if ((i2 | 0) == 20) {
    i2 = 0;
    i1 = FUNCTION_TABLE_iiii[HEAP32[i13 + 8 >> 2] & 127](i17 + 16 | 0, i17 + 8 | 0, i16) | 0;
    break;
   } else if ((i2 | 0) == 25) {
    i2 = 0;
    i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 12 >> 2] & 63](i17 + 40 | 0, i17 + 32 | 0, i17 + 8 | 0, i16) | 0;
    break;
   }
  } else i2 = 26; while (0);
  if ((i2 | 0) == 26) i1 = FUNCTION_TABLE_iii[HEAP32[i13 + 4 >> 2] & 255](i17 + 8 | 0, i16) | 0;
  if (i1) {
   i2 = 29;
   break;
  }
  i14 = i14 + 1 | 0;
  if ((i14 | 0) >= (HEAP16[i15 >> 1] | 0)) {
   i1 = 0;
   i2 = 29;
   break;
  } else i2 = (i10 << 16 >> 16) + 1 | 0;
 }
 if ((i2 | 0) == 29) {
  STACKTOP = i17;
  return i1 | 0;
 }
 return 0;
}

function __ZN11Application18RenderNonInstancedERKN4math8float4x4E(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, f9 = f0, f10 = f0, f11 = f0, i12 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 __ZN8Graphics13ApplyMaterialEPK8Material(i6 + 4 | 0, i6 + 2176 | 0);
 __ZN20ShaderConstantBuffer9SetFloat3EiRKN4math6float3E(HEAP32[HEAP32[i6 + 2276 >> 2] >> 2] | 0, HEAP32[i6 + 1860 >> 2] | 0, HEAP32[i6 + 1836 >> 2] | 0);
 __ZN20ShaderConstantBuffer9SetFloat3EiRKN4math6float3E(HEAP32[HEAP32[i6 + 2276 >> 2] >> 2] | 0, HEAP32[i6 + 1864 >> 2] | 0, HEAP32[i6 + 1848 >> 2] | 0);
 __ZN8Graphics19ApplyConstantBufferEPK20ShaderConstantBufferi(i6 + 4 | 0, HEAP32[HEAP32[i6 + 2276 >> 2] >> 2] | 0, -1);
 __ZNK4math7Frustum10ToPBVolumeEv(i8 + 248 | 0, i6 + 2288 | 0);
 HEAP32[i6 + 2616 >> 2] = 0;
 __ZN8Graphics17ApplyVertexBufferEP12VertexBuffer(i6 + 4 | 0, i6 + 2e3 | 0);
 i1 = HEAP32[i6 + 1816 >> 2] | 0;
 if ((i1 | 0) <= 0) {
  STACKTOP = i8;
  return;
 }
 i3 = i1;
 i5 = 0;
 i1 = (((HEAP32[i6 + 2620 >> 2] | 0) + 1 | 0) >>> 0) % (i1 >>> 0) | 0;
 while (1) {
  i4 = i1 + 1 | 0;
  if ((i4 | 0) < (i3 | 0)) {
   f9 = Math_fround(i5 | 0);
   f11 = Math_fround(f9 * Math_fround(.100000001));
   __ZN4math8float4x412UniformScaleEf(i8 + 168 | 0, Math_fround(Math_fround(Math_fround(__ZN4math3SinEf(Math_fround(f11 + Math_fround(Math_fround(HEAPF32[i6 + 2628 >> 2]) * Math_fround(10.0))))) * Math_fround(.300000012)) + Math_fround(.5)));
   f11 = Math_fround(__ZN4math3SinEf(Math_fround(f9 + Math_fround(HEAPF32[i6 + 2628 >> 2]))));
   f10 = Math_fround(HEAPF32[i6 + 2628 >> 2]);
   f10 = Math_fround(__ZN4math3CosEf(Math_fround(Math_fround(f9 + f10) + Math_fround(f10 * Math_fround(.00999999977)))));
   f9 = Math_fround(__ZN4math3SinEf(Math_fround(HEAPF32[i6 + 2628 >> 2])));
   __ZN4math8float4x412FromEulerXYZEfff(i8 + 104 | 0, f11, f10, Math_fround(f9 + Math_fround(__ZN4math3CosEf(Math_fround(Math_fround(HEAPF32[i6 + 2628 >> 2]) * Math_fround(.5))))));
   __ZN4mathmlERKNS_7ScaleOpERKNS_8float4x4E(i8 + 184 | 0, i8 + 168 | 0, i8 + 104 | 0);
   i3 = HEAP32[i6 + 1804 >> 2] | 0;
   __ZN4math6float34LerpERKS0_S2_f(i8 + 88 | 0, i3 + (i1 * 12 | 0) | 0, i3 + (i4 * 12 | 0) | 0, Math_fround(HEAPF32[i6 + 2624 >> 2]));
   __ZN4math8float4x416SetTranslatePartERKNS_6float3E(i8 + 184 | 0, i8 + 88 | 0);
   do if (HEAP8[i6 + 2592 >> 0] | 0) {
    HEAP32[i8 + 64 >> 2] = HEAP32[i6 + 2528 >> 2];
    HEAP32[i8 + 64 + 4 >> 2] = HEAP32[i6 + 2528 + 4 >> 2];
    HEAP32[i8 + 64 + 8 >> 2] = HEAP32[i6 + 2528 + 8 >> 2];
    HEAP32[i8 + 64 + 12 >> 2] = HEAP32[i6 + 2528 + 12 >> 2];
    HEAP32[i8 + 64 + 16 >> 2] = HEAP32[i6 + 2528 + 16 >> 2];
    HEAP32[i8 + 64 + 20 >> 2] = HEAP32[i6 + 2528 + 20 >> 2];
    __ZN4math4AABB15TransformAsAABBERKNS_8float4x4E(i8 + 64 | 0, i8 + 184 | 0);
    i3 = 0;
    i2 = 2;
    while (1) {
     i1 = i8 + 248 + (i3 << 4) | 0;
     f9 = Math_fround(HEAPF32[i1 >> 2]);
     i12 = f9 < Math_fround(0.0);
     HEAP32[i8 + 356 >> 2] = HEAP32[(i12 ? i8 + 64 + 12 | 0 : i8 + 64 | 0) >> 2];
     f10 = Math_fround(HEAPF32[i8 + 248 + (i3 << 4) + 4 >> 2]);
     i12 = f10 < Math_fround(0.0);
     HEAP32[i8 + 356 + 4 >> 2] = HEAP32[(i12 ? i8 + 64 + 16 | 0 : i8 + 64 + 4 | 0) >> 2];
     f11 = Math_fround(HEAPF32[i8 + 248 + (i3 << 4) + 8 >> 2]);
     i12 = f11 < Math_fround(0.0);
     HEAP32[i8 + 356 + 8 >> 2] = HEAP32[(i12 ? i8 + 64 + 20 | 0 : i8 + 64 + 8 | 0) >> 2];
     i12 = !(f9 >= Math_fround(0.0));
     HEAP32[i8 + 344 >> 2] = HEAP32[(i12 ? i8 + 64 | 0 : i8 + 64 + 12 | 0) >> 2];
     i12 = !(f10 >= Math_fround(0.0));
     HEAP32[i8 + 344 + 4 >> 2] = HEAP32[(i12 ? i8 + 64 + 4 | 0 : i8 + 64 + 16 | 0) >> 2];
     i12 = !(f11 >= Math_fround(0.0));
     HEAP32[i8 + 344 + 8 >> 2] = HEAP32[(i12 ? i8 + 64 + 8 | 0 : i8 + 64 + 20 | 0) >> 2];
     if (Math_fround(__ZNK4math5Plane14SignedDistanceERKNS_6float3E(i1, i8 + 356 | 0)) >= Math_fround(0.0)) {
      i1 = 8;
      break;
     }
     i12 = !(Math_fround(__ZNK4math5Plane14SignedDistanceERKNS_6float3E(i1, i8 + 344 | 0)) >= Math_fround(0.0));
     i2 = i12 ? i2 : 1;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) >= 6) {
      i1 = 10;
      break;
     }
    }
    if ((i1 | 0) == 8) {
     i1 = 0;
     break;
    } else if ((i1 | 0) == 10) {
     i1 = 0;
     if (!i2) break; else {
      i1 = 11;
      break;
     }
    }
   } else i1 = 11; while (0);
   if ((i1 | 0) == 11) {
    __ZN20ShaderConstantBuffer11SetFloat4x4EiRKN4math8float4x4E(i6 + 2240 | 0, HEAP8[i6 + 2240 >> 0] | 0, i8 + 184 | 0);
    __ZNK4math8float4x4mlERKS0_(i8, i7, i8 + 184 | 0);
    __ZN20ShaderConstantBuffer11SetFloat4x4EiRKN4math8float4x4E(i6 + 2240 | 0, HEAP8[i6 + 2243 >> 0] | 0, i8);
    __ZN8Graphics19ApplyConstantBufferEPK20ShaderConstantBufferi(i6 + 4 | 0, i6 + 2240 | 0, -1);
    i1 = HEAP32[i6 + 2276 >> 2] | 0;
    if ((HEAP32[i6 + 2596 >> 2] | 0) == 2) __ZN8Graphics19ApplyConstantBufferEPK20ShaderConstantBufferi(i6 + 4 | 0, HEAP32[i1 + (i5 << 2) >> 2] | 0, -1); else {
     __ZN20ShaderConstantBuffer9SetFloat3EiRKN4math6float3E(HEAP32[i1 >> 2] | 0, HEAP32[i6 + 1860 >> 2] | 0, (HEAP32[i6 + 1836 >> 2] | 0) + (i5 * 12 | 0) | 0);
     __ZN20ShaderConstantBuffer9SetFloat3EiRKN4math6float3E(HEAP32[HEAP32[i6 + 2276 >> 2] >> 2] | 0, HEAP32[i6 + 1864 >> 2] | 0, (HEAP32[i6 + 1848 >> 2] | 0) + (i5 * 12 | 0) | 0);
     __ZN8Graphics19ApplyConstantBufferEPK20ShaderConstantBufferi(i6 + 4 | 0, HEAP32[HEAP32[i6 + 2276 >> 2] >> 2] | 0, -1);
    }
    __ZN8Graphics6RenderEP12VertexBufferii(i6 + 4 | 0, i6 + 2e3 | 0, 2147483647, 0);
    HEAP32[i6 + 2616 >> 2] = (HEAP32[i6 + 2616 >> 2] | 0) + 1;
   }
   i2 = HEAP32[i6 + 1816 >> 2] | 0;
   i1 = i4;
  } else {
   i2 = i3;
   i1 = i4 - i3 | 0;
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) >= (i2 | 0)) break; else i3 = i2;
 }
 STACKTOP = i8;
 return;
}

function _af_glyph_hints_reload(i12, i13) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i17 >> 2] = 0;
 i9 = HEAP32[i12 + 4 >> 2] | 0;
 i8 = HEAP32[i12 + 12 >> 2] | 0;
 i10 = HEAP32[i12 + 8 >> 2] | 0;
 i11 = HEAP32[i12 + 16 >> 2] | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 HEAP32[i12 + 24 >> 2] = 0;
 HEAP32[i12 + 36 >> 2] = 0;
 HEAP32[i12 + 44 >> 2] = 0;
 HEAP32[i12 + 56 >> 2] = 0;
 HEAP32[i12 + 72 >> 2] = 0;
 HEAP32[i12 + 84 >> 2] = 0;
 i1 = HEAP16[i13 >> 1] | 0;
 i2 = HEAP32[i12 + 32 >> 2] | 0;
 do if (i1 >>> 0 > i2 >>> 0) {
  HEAP32[i12 + 40 >> 2] = _ft_mem_realloc(i3, 4, i2, i1 + 3 & -4, HEAP32[i12 + 40 >> 2] | 0, i17) | 0;
  if (!(HEAP32[i17 >> 2] | 0)) {
   HEAP32[i12 + 32 >> 2] = i1 + 3 & -4;
   break;
  } else {
   i16 = HEAP32[i17 >> 2] | 0;
   STACKTOP = i17;
   return i16 | 0;
  }
 } while (0);
 i1 = HEAP16[i13 + 2 >> 1] | 0;
 i2 = HEAP32[i12 + 20 >> 2] | 0;
 do if (((i1 << 16 >> 16) + 2 | 0) >>> 0 > i2 >>> 0) {
  HEAP32[i12 + 28 >> 2] = _ft_mem_realloc(i3, 40, i2, (i1 << 16 >> 16) + 11 & -8, HEAP32[i12 + 28 >> 2] | 0, i17) | 0;
  if (!(HEAP32[i17 >> 2] | 0)) {
   HEAP32[i12 + 20 >> 2] = (i1 << 16 >> 16) + 11 & -8;
   i1 = HEAP16[i13 + 2 >> 1] | 0;
   break;
  } else {
   i16 = HEAP32[i17 >> 2] | 0;
   STACKTOP = i17;
   return i16 | 0;
  }
 } while (0);
 HEAP32[i12 + 24 >> 2] = i1 << 16 >> 16;
 HEAP32[i12 + 36 >> 2] = HEAP16[i13 >> 1];
 HEAP32[i12 + 68 >> 2] = 2;
 HEAP32[i12 + 96 >> 2] = -1;
 if ((_FT_Outline_Get_Orientation(i13) | 0) == 1) {
  HEAP32[i12 + 68 >> 2] = -2;
  HEAP32[i12 + 96 >> 2] = 1;
 }
 HEAP32[i12 + 4 >> 2] = i9;
 HEAP32[i12 + 12 >> 2] = i8;
 HEAP32[i12 + 8 >> 2] = i10;
 HEAP32[i12 + 16 >> 2] = i11;
 HEAP32[i12 + 112 >> 2] = 0;
 HEAP32[i12 + 116 >> 2] = 0;
 i14 = HEAP32[i12 + 28 >> 2] | 0;
 i15 = HEAP32[i12 + 24 >> 2] | 0;
 if (!i15) {
  i16 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i1 = i14 + ((HEAP16[HEAP32[i13 + 12 >> 2] >> 1] | 0) * 40 | 0) | 0;
 L19 : do if ((i15 | 0) > 0) {
  i4 = 0;
  i2 = i1;
  i7 = i14;
  i5 = HEAP32[i13 + 8 >> 2] | 0;
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  while (1) {
   i18 = HEAP32[i6 >> 2] | 0;
   HEAP16[i7 + 12 >> 1] = i18;
   i3 = i6 + 4 | 0;
   HEAP16[i7 + 14 >> 1] = HEAP32[i3 >> 2];
   i18 = (_FT_MulFix(i18, i9) | 0) + i10 | 0;
   HEAP32[i7 + 16 >> 2] = i18;
   HEAP32[i7 + 4 >> 2] = i18;
   i3 = (_FT_MulFix(HEAP32[i3 >> 2] | 0, i8) | 0) + i11 | 0;
   HEAP32[i7 + 20 >> 2] = i3;
   HEAP32[i7 + 8 >> 2] = i3;
   switch (HEAPU8[i5 >> 0] & 3 | 0) {
   case 0:
    {
     HEAP16[i7 >> 1] = 1;
     break;
    }
   case 2:
    {
     HEAP16[i7 >> 1] = 2;
     break;
    }
   default:
    HEAP16[i7 >> 1] = 0;
   }
   HEAP32[i7 + 36 >> 2] = i1;
   HEAP32[i1 + 32 >> 2] = i7;
   if ((i7 | 0) == (i2 | 0)) {
    i1 = i4 + 1 | 0;
    if ((i1 | 0) < (HEAP16[i13 >> 1] | 0)) {
     i3 = i14 + ((HEAP16[(HEAP32[i13 + 12 >> 2] | 0) + (i1 << 1) >> 1] | 0) * 40 | 0) | 0;
     i2 = i3;
    } else {
     i2 = i7;
     i3 = i7;
    }
   } else {
    i1 = i4;
    i3 = i7;
   }
   i7 = i7 + 40 | 0;
   if (i7 >>> 0 >= (i14 + (i15 * 40 | 0) | 0) >>> 0) break L19; else {
    i4 = i1;
    i1 = i3;
    i5 = i5 + 1 | 0;
    i6 = i6 + 8 | 0;
   }
  }
 } while (0);
 i5 = HEAP32[i12 + 40 >> 2] | 0;
 i3 = HEAP32[i12 + 36 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i4 = i5;
  i1 = HEAP32[i13 + 12 >> 2] | 0;
  i2 = 0;
  while (1) {
   HEAP32[i4 >> 2] = i14 + ((i2 << 16 >> 16) * 40 | 0);
   i2 = (HEAP16[i1 >> 1] | 0) + 1 | 0;
   i4 = i4 + 4 | 0;
   if (i4 >>> 0 >= (i5 + (i3 << 2) | 0) >>> 0) break; else i1 = i1 + 2 | 0;
  }
 }
 if ((i15 | 0) > 0) {
  i1 = i14;
  i4 = 4;
  i6 = 0;
  i9 = 0;
  i11 = i14;
 } else {
  i18 = HEAP32[i17 >> 2] | 0;
  STACKTOP = i17;
  return i18 | 0;
 }
 while (1) {
  if ((i11 | 0) == (i1 | 0)) {
   i4 = HEAP32[i11 + 36 >> 2] | 0;
   i2 = HEAP16[i11 + 12 >> 1] | 0;
   i7 = (i2 << 16 >> 16) - (HEAP16[i4 + 12 >> 1] | 0) | 0;
   i3 = HEAP16[i11 + 14 >> 1] | 0;
   i8 = (i3 << 16 >> 16) - (HEAP16[i4 + 14 >> 1] | 0) | 0;
   i1 = (i8 | 0) >= (0 - i7 | 0);
   if ((i8 | 0) < (i7 | 0)) {
    i5 = i1 ? 1 : -2;
    i6 = i1 ? i7 : i8;
    i1 = i1 ? i8 : i7;
   } else {
    i5 = i1 ? 2 : -1;
    i6 = i1 ? i8 : 0 - i7 | 0;
    i1 = i1 ? i7 : i8;
   }
   i18 = i1 * 14 | 0;
   i10 = i4 + 40 | 0;
   i5 = (((i6 | 0) < 0 ? 0 - i6 | 0 : i6) | 0) > (((i1 | 0) < 0 ? 0 - i18 | 0 : i18) | 0) ? i5 : 4;
  } else {
   i2 = HEAP16[i11 + 12 >> 1] | 0;
   i3 = HEAP16[i11 + 14 >> 1] | 0;
   i10 = i1;
   i5 = i4;
   i7 = i6;
   i8 = i9;
  }
  HEAP8[i11 + 2 >> 0] = i5;
  i9 = HEAP32[i11 + 32 >> 2] | 0;
  i6 = (HEAP16[i9 + 12 >> 1] | 0) - (i2 << 16 >> 16) | 0;
  i9 = (HEAP16[i9 + 14 >> 1] | 0) - (i3 << 16 >> 16) | 0;
  i1 = 0 - i6 | 0;
  i2 = (i9 | 0) >= (i1 | 0);
  if ((i9 | 0) < (i6 | 0)) {
   i4 = i2 ? 1 : -2;
   i3 = i2 ? i6 : i9;
   i1 = i2 ? i9 : i6;
  } else {
   i4 = i2 ? 2 : -1;
   i3 = i2 ? i9 : i1;
   i1 = i2 ? i6 : i9;
  }
  i18 = i1 * 14 | 0;
  i4 = (((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) > (((i1 | 0) < 0 ? 0 - i18 | 0 : i18) | 0) ? i4 : 4;
  HEAP8[i11 + 3 >> 0] = i4;
  i1 = HEAP16[i11 >> 1] | 0;
  do if (!(i1 & 3)) {
   if ((i4 | 0) != (i5 | 0)) if ((i5 | 0) == (0 - i4 | 0)) {
    i16 = 34;
    break;
   } else break;
   if ((i4 | 0) == 4) {
    if (_ft_corner_is_flat(i7, i8, i6, i9) | 0) {
     i1 = HEAP16[i11 >> 1] | 0;
     i16 = 34;
    }
   } else i16 = 34;
  } else i16 = 34; while (0);
  if ((i16 | 0) == 34) {
   i16 = 0;
   HEAP16[i11 >> 1] = i1 & 65535 | 256;
  }
  i11 = i11 + 40 | 0;
  if (i11 >>> 0 >= (i14 + (i15 * 40 | 0) | 0) >>> 0) break; else i1 = i10;
 }
 i18 = HEAP32[i17 >> 2] | 0;
 STACKTOP = i17;
 return i18 | 0;
}

function __ZNK12VertexBuffer3GetEi18VertexDataSemantici(i7, i4, i2, i3, i1) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, f8 = f0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i4 + 32 | 0, i3) | 0;
 if ((i1 | 0) > -1) i5 = (HEAP32[i4 + 60 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 56 >> 2] | 0, i2) | 0) + i1) | 0; else i5 = 0;
 i2 = __ZNK17VertexDeclaration8DataTypeE18VertexDataSemantic(i4 + 32 | 0, i3) | 0;
 i1 = __ZNK17VertexDeclaration13DataDimensionE18VertexDataSemantic(i4 + 32 | 0, i3) | 0;
 switch (i2 | 0) {
 case 2:
  {
   __ZN4math6float4C2Effff(i6, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
   switch (i1 | 0) {
   case 4:
    {
     i1 = i6;
     i2 = i5;
     i3 = i1 + 16 | 0;
     do {
      HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
      i1 = i1 + 1 | 0;
      i2 = i2 + 1 | 0;
     } while ((i1 | 0) < (i3 | 0));
     _memmove(i7 | 0, i5 | 0, 16) | 0;
     STACKTOP = i6;
     return;
    }
   case 3:
    {
     i1 = i6;
     i2 = i5;
     i3 = i1 + 12 | 0;
     do {
      HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
      i1 = i1 + 1 | 0;
      i2 = i2 + 1 | 0;
     } while ((i1 | 0) < (i3 | 0));
     HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
     HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
     STACKTOP = i6;
     return;
    }
   case 2:
    {
     i4 = i5;
     i5 = HEAPU8[i4 + 4 >> 0] | HEAPU8[i4 + 4 + 1 >> 0] << 8 | HEAPU8[i4 + 4 + 2 >> 0] << 16 | HEAPU8[i4 + 4 + 3 >> 0] << 24;
     HEAP32[i6 >> 2] = HEAPU8[i4 >> 0] | HEAPU8[i4 + 1 >> 0] << 8 | HEAPU8[i4 + 2 >> 0] << 16 | HEAPU8[i4 + 3 >> 0] << 24;
     HEAP32[i6 + 4 >> 2] = i5;
     HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
     HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
     STACKTOP = i6;
     return;
    }
   case 1:
    {
     HEAP32[i6 >> 2] = HEAPU8[i5 >> 0] | HEAPU8[i5 + 1 >> 0] << 8 | HEAPU8[i5 + 2 >> 0] << 16 | HEAPU8[i5 + 3 >> 0] << 24;
     HEAP32[i7 >> 2] = HEAP32[i6 >> 2];
     HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
     HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
     HEAP32[i7 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
     STACKTOP = i6;
     return;
    }
   default:
    {
     HEAP32[i7 >> 2] = HEAP32[181];
     HEAP32[i7 + 4 >> 2] = HEAP32[182];
     HEAP32[i7 + 8 >> 2] = HEAP32[183];
     HEAP32[i7 + 12 >> 2] = HEAP32[184];
     STACKTOP = i6;
     return;
    }
   }
  }
 case 18:
  switch (i1 | 0) {
  case 4:
   {
    f8 = Math_fround(Math_fround(HEAPU8[i5 >> 0] | 0 | 0) / Math_fround(255.0));
    __ZN4math6float4C2Effff(i7, f8, Math_fround(Math_fround(HEAPU8[i5 + 1 >> 0] | 0 | 0) / Math_fround(255.0)), Math_fround(Math_fround(HEAPU8[i5 + 2 >> 0] | 0 | 0) / Math_fround(255.0)), Math_fround(Math_fround(HEAPU8[i5 + 3 >> 0] | 0 | 0) / Math_fround(255.0)));
    STACKTOP = i6;
    return;
   }
  case 3:
   {
    __ZN4math6float4C2Effff(i7, Math_fround(Math_fround(HEAPU8[i5 >> 0] | 0 | 0) / Math_fround(255.0)), Math_fround(Math_fround(HEAPU8[i5 + 1 >> 0] | 0 | 0) / Math_fround(255.0)), Math_fround(Math_fround(HEAPU8[i5 + 2 >> 0] | 0 | 0) / Math_fround(255.0)), Math_fround(1.0));
    STACKTOP = i6;
    return;
   }
  case 2:
   {
    __ZN4math6float4C2Effff(i7, Math_fround(Math_fround(HEAPU8[i5 >> 0] | 0 | 0) / Math_fround(255.0)), Math_fround(Math_fround(HEAPU8[i5 + 1 >> 0] | 0 | 0) / Math_fround(255.0)), Math_fround(0.0), Math_fround(1.0));
    STACKTOP = i6;
    return;
   }
  case 1:
   {
    __ZN4math6float4C2Effff(i7, Math_fround(Math_fround(HEAPU8[i5 >> 0] | 0 | 0) / Math_fround(255.0)), Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
    STACKTOP = i6;
    return;
   }
  default:
   {
    HEAP32[i7 >> 2] = HEAP32[181];
    HEAP32[i7 + 4 >> 2] = HEAP32[182];
    HEAP32[i7 + 8 >> 2] = HEAP32[183];
    HEAP32[i7 + 12 >> 2] = HEAP32[184];
    STACKTOP = i6;
    return;
   }
  }
 case 14:
  switch (i1 | 0) {
  case 4:
   {
    f8 = Math_fround(Math_fround(HEAPU8[i5 >> 0] | 0 | 0) / Math_fround(65535.0));
    __ZN4math6float4C2Effff(i7, f8, Math_fround(Math_fround(HEAPU8[i5 + 1 >> 0] | 0 | 0) / Math_fround(65535.0)), Math_fround(Math_fround(HEAPU8[i5 + 2 >> 0] | 0 | 0) / Math_fround(65535.0)), Math_fround(Math_fround(HEAPU8[i5 + 3 >> 0] | 0 | 0) / Math_fround(65535.0)));
    STACKTOP = i6;
    return;
   }
  case 3:
   {
    __ZN4math6float4C2Effff(i7, Math_fround(Math_fround(HEAPU8[i5 >> 0] | 0 | 0) / Math_fround(65535.0)), Math_fround(Math_fround(HEAPU8[i5 + 1 >> 0] | 0 | 0) / Math_fround(65535.0)), Math_fround(Math_fround(HEAPU8[i5 + 2 >> 0] | 0 | 0) / Math_fround(65535.0)), Math_fround(1.0));
    STACKTOP = i6;
    return;
   }
  case 2:
   {
    __ZN4math6float4C2Effff(i7, Math_fround(Math_fround(HEAPU8[i5 >> 0] | 0 | 0) / Math_fround(65535.0)), Math_fround(Math_fround(HEAPU8[i5 + 1 >> 0] | 0 | 0) / Math_fround(65535.0)), Math_fround(0.0), Math_fround(1.0));
    STACKTOP = i6;
    return;
   }
  case 1:
   {
    __ZN4math6float4C2Effff(i7, Math_fround(Math_fround(HEAPU8[i5 >> 0] | 0 | 0) / Math_fround(65535.0)), Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
    STACKTOP = i6;
    return;
   }
  default:
   {
    HEAP32[i7 >> 2] = HEAP32[181];
    HEAP32[i7 + 4 >> 2] = HEAP32[182];
    HEAP32[i7 + 8 >> 2] = HEAP32[183];
    HEAP32[i7 + 12 >> 2] = HEAP32[184];
    STACKTOP = i6;
    return;
   }
  }
 default:
  {
   HEAP32[i7 >> 2] = HEAP32[181];
   HEAP32[i7 + 4 >> 2] = HEAP32[182];
   HEAP32[i7 + 8 >> 2] = HEAP32[183];
   HEAP32[i7 + 12 >> 2] = HEAP32[184];
   STACKTOP = i6;
   return;
  }
 }
}

function _TT_Load_Simple_Glyph(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0;
 i2 = HEAP32[i21 + 200 >> 2] | 0;
 i18 = HEAP32[i21 + 204 >> 2] | 0;
 i19 = HEAP32[i21 + 12 >> 2] | 0;
 i20 = HEAP16[i21 + 32 >> 1] | 0;
 i13 = HEAP32[i21 >> 2] | 0;
 if (i20 << 16 >> 16) {
  if (((HEAP16[i19 + 20 >> 1] | 0) + (i20 << 16 >> 16) + (HEAP16[i19 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i19 + 8 >> 2] | 0) >>> 0 ? (i1 = _FT_GlyphLoader_CheckPoints(i19, 0, i20 << 16 >> 16) | 0, (i1 | 0) != 0) : 0) {
   i23 = i1;
   return i23 | 0;
  }
  if (i20 << 16 >> 16 > 4094) {
   i23 = 20;
   return i23 | 0;
  }
 }
 i6 = HEAP32[i19 + 68 >> 2] | 0;
 if ((i2 + ((i20 << 16 >> 16 << 1) + 2) | 0) >>> 0 > i18 >>> 0) {
  i23 = 20;
  return i23 | 0;
 }
 i1 = HEAP8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
 if (i20 << 16 >> 16 > 0) HEAP16[i6 >> 1] = i1;
 if ((i1 | 0) < 0) {
  i23 = 20;
  return i23 | 0;
 } else i5 = i6;
 while (1) {
  i14 = i2;
  i2 = i2 + 2 | 0;
  i4 = i5;
  i5 = i5 + 2 | 0;
  if (i5 >>> 0 >= (i6 + (i20 << 16 >> 16 << 1) | 0) >>> 0) {
   i11 = i2;
   break;
  }
  i24 = i1;
  i1 = HEAP8[i2 >> 0] << 8 | HEAPU8[i14 + 3 >> 0];
  HEAP16[i5 >> 1] = i1;
  if ((i1 | 0) <= (i24 | 0)) {
   i17 = 20;
   i12 = 49;
   break;
  }
 }
 if ((i12 | 0) == 49) return i17 | 0;
 do if (i20 << 16 >> 16 > 0) {
  i1 = HEAP16[i4 >> 1] | 0;
  if (i1 << 16 >> 16 >= -1) if (!((i1 << 16 >> 16) + 5 | 0)) {
   i22 = (i1 << 16 >> 16) + 1 | 0;
   break;
  } else {
   i8 = (i1 << 16 >> 16) + 5 | 0;
   i10 = (i1 << 16 >> 16) + 1 | 0;
   i12 = 14;
   break;
  } else {
   i24 = 20;
   return i24 | 0;
  }
 } else {
  i8 = 4;
  i10 = 0;
  i12 = 14;
 } while (0);
 if ((i12 | 0) == 14) if (((HEAP16[i19 + 22 >> 1] | 0) + i8 + (HEAP16[i19 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i19 + 4 >> 2] | 0) >>> 0 ? (i9 = _FT_GlyphLoader_CheckPoints(i19, i8, 0) | 0, (i9 | 0) != 0) : 0) {
  i24 = i9;
  return i24 | 0;
 } else i22 = i10;
 i1 = HEAP32[i21 + 8 >> 2] | 0;
 HEAP32[i1 + 140 >> 2] = 0;
 HEAP32[i1 + 136 >> 2] = 0;
 if ((i14 + 4 | 0) >>> 0 > i18 >>> 0) {
  i24 = 20;
  return i24 | 0;
 }
 i2 = HEAPU8[i11 >> 0] << 8 | HEAPU8[i14 + 3 >> 0];
 if (i2 >>> 0 > (HEAPU16[i13 + 286 >> 1] | 0) >>> 0) {
  i24 = 22;
  return i24 | 0;
 }
 if ((i18 - (i14 + 4) | 0) < (i2 | 0)) {
  i24 = 22;
  return i24 | 0;
 }
 if (!(HEAP32[i21 + 16 >> 2] & 2)) {
  HEAP32[i1 + 140 >> 2] = i2;
  i24 = HEAP32[(HEAP32[i21 + 160 >> 2] | 0) + 392 >> 2] | 0;
  HEAP32[i1 + 136 >> 2] = i24;
  _memcpy(i24 | 0, i14 + 4 | 0, i2 | 0) | 0;
 }
 i1 = HEAP32[i19 + 64 >> 2] | 0;
 i8 = i1 + i22 | 0;
 i9 = (i22 | 0) > 0;
 do if (i9) {
  i4 = i14 + (i2 + 4) | 0;
  while (1) {
   i2 = i4 + 1 | 0;
   if (i2 >>> 0 > i18 >>> 0) {
    i17 = 20;
    i12 = 49;
    break;
   }
   i5 = HEAP8[i4 >> 0] | 0;
   i6 = i1 + 1 | 0;
   HEAP8[i1 >> 0] = i5;
   if (i5 & 8) {
    i4 = i4 + 2 | 0;
    if (i4 >>> 0 > i18 >>> 0) {
     i17 = 20;
     i12 = 49;
     break;
    }
    i2 = HEAP8[i2 >> 0] | 0;
    if ((i1 + ((i2 & 255) + 1) | 0) >>> 0 > i8 >>> 0) {
     i17 = 20;
     i12 = 49;
     break;
    }
    if (!(i2 << 24 >> 24)) {
     i1 = i6;
     i2 = i4;
    } else {
     _memset(i6 | 0, i5 | 0, (i2 + -1 & 255) + 1 | 0) | 0;
     i1 = i1 + ((i2 + -1 & 255) + 2) | 0;
     i2 = i4;
    }
   } else i1 = i6;
   if (i1 >>> 0 < i8 >>> 0) i4 = i2; else {
    i15 = i2;
    i12 = 29;
    break;
   }
  }
  if ((i12 | 0) == 29) {
   i7 = HEAP32[i19 + 64 >> 2] | 0;
   i16 = i15;
   break;
  } else if ((i12 | 0) == 49) return i17 | 0;
 } else {
  i7 = i1;
  i16 = i14 + (i2 + 4) | 0;
 } while (0);
 i1 = HEAP32[i19 + 60 >> 2] | 0;
 i8 = i1 + (i22 << 3) | 0;
 if (i16 >>> 0 > i18 >>> 0) {
  i24 = 20;
  return i24 | 0;
 }
 L64 : do if (i9) {
  i4 = i16;
  i6 = 0;
  while (1) {
   i5 = HEAPU8[i7 >> 0] | 0;
   if (!(i5 & 2)) if (!(i5 & 16)) {
    i2 = i4 + 2 | 0;
    if (i2 >>> 0 > i18 >>> 0) {
     i17 = 20;
     i12 = 49;
     break;
    }
    i4 = HEAP8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
   } else {
    i2 = i4;
    i4 = 0;
   } else {
    i2 = i4 + 1 | 0;
    if (i2 >>> 0 > i18 >>> 0) {
     i17 = 20;
     i12 = 49;
     break;
    }
    i4 = HEAPU8[i4 >> 0] | 0;
    i4 = (i5 & 16 | 0) == 0 ? 0 - i4 | 0 : i4;
   }
   i6 = i4 + i6 | 0;
   HEAP32[i1 >> 2] = i6;
   HEAP8[i7 >> 0] = i5 & 237;
   i1 = i1 + 8 | 0;
   if (i1 >>> 0 >= i8 >>> 0) {
    i3 = i2;
    i12 = 39;
    break;
   } else {
    i7 = i7 + 1 | 0;
    i4 = i2;
   }
  }
  if ((i12 | 0) == 39) {
   i1 = HEAP32[i19 + 60 >> 2] | 0;
   i7 = i1 + (i22 << 3) | 0;
   if (!i9) {
    i23 = i3;
    break;
   }
   i6 = HEAP32[i19 + 64 >> 2] | 0;
   i5 = 0;
   while (1) {
    i4 = HEAPU8[i6 >> 0] | 0;
    if (!(i4 & 4)) if (!(i4 & 32)) {
     i2 = i3 + 2 | 0;
     if (i2 >>> 0 > i18 >>> 0) {
      i17 = 20;
      i12 = 49;
      break;
     }
     i3 = HEAP8[i3 >> 0] << 8 | HEAPU8[i3 + 1 >> 0];
    } else {
     i2 = i3;
     i3 = 0;
    } else {
     i2 = i3 + 1 | 0;
     if (i2 >>> 0 > i18 >>> 0) {
      i17 = 20;
      i12 = 49;
      break;
     }
     i3 = HEAPU8[i3 >> 0] | 0;
     i3 = (i4 & 32 | 0) == 0 ? 0 - i3 | 0 : i3;
    }
    i5 = i3 + i5 | 0;
    HEAP32[i1 + 4 >> 2] = i5;
    HEAP8[i6 >> 0] = i4 & 1;
    i1 = i1 + 8 | 0;
    if (i1 >>> 0 >= i7 >>> 0) {
     i23 = i2;
     break L64;
    } else {
     i6 = i6 + 1 | 0;
     i3 = i2;
    }
   }
   if ((i12 | 0) == 49) return i17 | 0;
  } else if ((i12 | 0) == 49) return i17 | 0;
 } else i23 = i16; while (0);
 HEAP16[i19 + 58 >> 1] = i22;
 HEAP16[i19 + 56 >> 1] = i20;
 HEAP32[i21 + 200 >> 2] = i23;
 i24 = 0;
 return i24 | 0;
}

function __bdf_list_split(i2, i5, i7, i8) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i2 + 8 >> 2] = 0;
 if (HEAP32[i2 + 4 >> 2] | 0) {
  HEAP32[HEAP32[i2 >> 2] >> 2] = 298501;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] = 298501;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 8 >> 2] = 298501;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] = 298501;
  HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] = 298501;
 }
 if (!i8) {
  i8 = 0;
  STACKTOP = i10;
  return i8 | 0;
 }
 i4 = HEAP8[i7 >> 0] | 0;
 if (!(i4 << 24 >> 24)) {
  i8 = 0;
  STACKTOP = i10;
  return i8 | 0;
 }
 if (!i5) {
  i8 = 6;
  STACKTOP = i10;
  return i8 | 0;
 }
 i1 = HEAP8[i5 >> 0] | 0;
 if (!(i1 << 24 >> 24)) {
  i8 = 6;
  STACKTOP = i10;
  return i8 | 0;
 }
 i3 = i10 + 8 | 0;
 i6 = i3 + 32 | 0;
 do {
  HEAP8[i3 >> 0] = 0;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) < (i6 | 0));
 i6 = i1;
 i1 = 0;
 L16 : while (1) {
  switch (i6 << 24 >> 24) {
  case 0:
   break L16;
  case 43:
   {
    i3 = i5 + 1 | 0;
    if (!(HEAP8[i3 >> 0] | 0)) i1 = 1; else i9 = 10;
    break;
   }
  default:
   i9 = 10;
  }
  if ((i9 | 0) == 10) {
   i9 = 0;
   i3 = i6 & 255;
   HEAP8[i10 + 8 + (i3 >>> 3) >> 0] = 1 << (i3 & 7) | HEAPU8[i10 + 8 + (i3 >>> 3) >> 0];
   i3 = i5 + 1 | 0;
  }
  i6 = HEAP8[i3 >> 0] | 0;
  i5 = i3;
 }
 L24 : do if ((i8 | 0) > 0) {
  L26 : do if (!i1) {
   if (!(i4 << 24 >> 24)) {
    i5 = 0;
    break L24;
   } else i5 = i7;
   while (1) {
    i1 = i5;
    while (1) {
     i6 = i4 & 255;
     if (HEAP8[i10 + 8 + (i6 >>> 3) >> 0] & 1 << (i6 & 7)) {
      i3 = i1;
      break;
     }
     i1 = i1 + 1 | 0;
     i4 = HEAP8[i1 >> 0] | 0;
     if (!(i4 << 24 >> 24)) {
      i3 = i1;
      break;
     }
    }
    i1 = HEAP32[i2 + 8 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i2 + 4 >> 2] | 0)) {
     HEAP32[i10 >> 2] = 0;
     if ((i1 | 0) == -1) i1 = -1; else {
      if ((i1 | 0) == 536870911) {
       i9 = 35;
       break L26;
      }
      i4 = ((i1 + 5 + (i1 >>> 1) | 0) >>> 0 > 536870911 ? 1 : (i1 + 5 + (i1 >>> 1) | 0) >>> 0 < i1 >>> 0) ? 536870911 : i1 + 5 + (i1 >>> 1) | 0;
      HEAP32[i2 >> 2] = _ft_mem_realloc(HEAP32[i2 + 12 >> 2] | 0, 4, i1, i4, HEAP32[i2 >> 2] | 0, i10) | 0;
      i1 = HEAP32[i10 >> 2] | 0;
      if (i1) break L26;
      HEAP32[i2 + 4 >> 2] = i4;
      i1 = HEAP32[i2 + 8 >> 2] | 0;
     }
    }
    HEAP32[i2 + 8 >> 2] = i1 + 1;
    HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = i3 >>> 0 > i5 >>> 0 ? i5 : 298501;
    if (!(HEAP8[i3 >> 0] | 0)) i1 = 0; else {
     i6 = i3 + 1 | 0;
     HEAP8[i3 >> 0] = 0;
     i1 = (HEAP8[i6 >> 0] | 0) == 0;
     i3 = i6;
    }
    if (i3 >>> 0 >= (i7 + i8 | 0) >>> 0) break;
    i4 = HEAP8[i3 >> 0] | 0;
    if (!(i4 << 24 >> 24)) break; else i5 = i3;
   }
   i5 = i1 & 1;
   break L24;
  } else {
   if (!(i4 << 24 >> 24)) {
    i5 = 0;
    break L24;
   } else i5 = i7;
   while (1) {
    i1 = i5;
    while (1) {
     i6 = i4 & 255;
     if (HEAP8[i10 + 8 + (i6 >>> 3) >> 0] & 1 << (i6 & 7)) {
      i3 = i1;
      break;
     }
     i1 = i1 + 1 | 0;
     i4 = HEAP8[i1 >> 0] | 0;
     if (!(i4 << 24 >> 24)) {
      i3 = i1;
      break;
     }
    }
    i1 = HEAP32[i2 + 8 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i2 + 4 >> 2] | 0)) {
     HEAP32[i10 >> 2] = 0;
     if ((i1 | 0) == -1) i1 = -1; else {
      if ((i1 | 0) == 536870911) {
       i9 = 35;
       break L26;
      }
      i4 = ((i1 + 5 + (i1 >>> 1) | 0) >>> 0 > 536870911 ? 1 : (i1 + 5 + (i1 >>> 1) | 0) >>> 0 < i1 >>> 0) ? 536870911 : i1 + 5 + (i1 >>> 1) | 0;
      HEAP32[i2 >> 2] = _ft_mem_realloc(HEAP32[i2 + 12 >> 2] | 0, 4, i1, i4, HEAP32[i2 >> 2] | 0, i10) | 0;
      i1 = HEAP32[i10 >> 2] | 0;
      if (i1) break L26;
      HEAP32[i2 + 4 >> 2] = i4;
      i1 = HEAP32[i2 + 8 >> 2] | 0;
     }
    }
    HEAP32[i2 + 8 >> 2] = i1 + 1;
    HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = i3 >>> 0 > i5 >>> 0 ? i5 : 298501;
    i1 = HEAP8[i3 >> 0] | 0;
    if (i1 << 24 >> 24) {
     i4 = i3;
     while (1) {
      i6 = i1 & 255;
      if (!(HEAP8[i10 + 8 + (i6 >>> 3) >> 0] & 1 << (i6 & 7))) break;
      HEAP8[i4 >> 0] = 0;
      i4 = i4 + 1 | 0;
      i1 = HEAP8[i4 >> 0] | 0;
      if (!(i1 << 24 >> 24)) {
       i1 = 0;
       break;
      }
     }
     if (i4 >>> 0 > i3 >>> 0) {
      i1 = i1 << 24 >> 24 == 0;
      i3 = i4;
     } else {
      i1 = 0;
      i3 = i4;
     }
    } else i1 = 0;
    if (i3 >>> 0 >= (i7 + i8 | 0) >>> 0) break;
    i4 = HEAP8[i3 >> 0] | 0;
    if (!(i4 << 24 >> 24)) break; else i5 = i3;
   }
   i5 = i1 & 1;
   break L24;
  } while (0);
  if ((i9 | 0) == 35) {
   HEAP32[i10 >> 2] = 64;
   i1 = 64;
  }
  i8 = i1;
  STACKTOP = i10;
  return i8 | 0;
 } else i5 = 0; while (0);
 i1 = (HEAP32[i2 + 8 >> 2] | 0) + i5 | 0;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 if (i1 >>> 0 >= i3 >>> 0) {
  HEAP32[i10 >> 2] = 0;
  do if (i3 >>> 0 < (i1 + 1 | 0) >>> 0) {
   if ((i3 | 0) != 536870911) {
    i4 = ((i3 + 5 + (i3 >>> 1) | 0) >>> 0 > 536870911 ? 1 : (i3 + 5 + (i3 >>> 1) | 0) >>> 0 < i3 >>> 0) ? 536870911 : i3 + 5 + (i3 >>> 1) | 0;
    HEAP32[i2 >> 2] = _ft_mem_realloc(HEAP32[i2 + 12 >> 2] | 0, 4, i3, i4, HEAP32[i2 >> 2] | 0, i10) | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    if (!i1) {
     HEAP32[i2 + 4 >> 2] = i4;
     break;
    }
   } else {
    HEAP32[i10 >> 2] = 64;
    i1 = 64;
   }
   i8 = i1;
   STACKTOP = i10;
   return i8 | 0;
  } while (0);
 }
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if (i5) {
  HEAP32[i2 + 8 >> 2] = i1 + 1;
  HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = 298501;
  i1 = i1 + 1 | 0;
 }
 HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = 0;
 i8 = 0;
 STACKTOP = i10;
 return i8 | 0;
}

function _tt_face_vary_cvt(i16, i19) {
 i16 = i16 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i18 = HEAP32[i19 + 28 >> 2] | 0;
 i14 = HEAP32[i16 + 712 >> 2] | 0;
 if (!i14) {
  HEAP32[i20 + 8 >> 2] = 0;
  i19 = 0;
  i17 = 0;
  i16 = 0;
  _ft_mem_free(i18, i16);
  _ft_mem_free(i18, i17);
  _ft_mem_free(i18, i19);
  i19 = HEAP32[i20 + 8 >> 2] | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 if (!(HEAP32[i16 + 672 >> 2] | 0)) {
  HEAP32[i20 + 8 >> 2] = 0;
  i19 = 0;
  i17 = 0;
  i16 = 0;
  _ft_mem_free(i18, i16);
  _ft_mem_free(i18, i17);
  _ft_mem_free(i18, i19);
  i19 = HEAP32[i20 + 8 >> 2] | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i17 = FUNCTION_TABLE_iiiii[HEAP32[i16 + 508 >> 2] & 63](i16, 1668702578, i19, i20 + 4 | 0) | 0;
 HEAP32[i20 + 8 >> 2] = i17;
 if (i17) {
  HEAP32[i20 + 8 >> 2] = 0;
  i19 = 0;
  i17 = 0;
  i16 = 0;
  _ft_mem_free(i18, i16);
  _ft_mem_free(i18, i17);
  _ft_mem_free(i18, i19);
  i19 = HEAP32[i20 + 8 >> 2] | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i17 = _FT_Stream_EnterFrame(i19, HEAP32[i20 + 4 >> 2] | 0) | 0;
 HEAP32[i20 + 8 >> 2] = i17;
 if (i17) {
  HEAP32[i20 + 8 >> 2] = 0;
  i19 = 0;
  i17 = 0;
  i16 = 0;
  _ft_mem_free(i18, i16);
  _ft_mem_free(i18, i17);
  _ft_mem_free(i18, i19);
  i19 = HEAP32[i20 + 8 >> 2] | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i4 = (HEAP32[i19 + 32 >> 2] | 0) - (HEAP32[i19 >> 2] | 0) | 0;
 if ((_FT_Stream_GetULong(i19) | 0) == 65536) {
  i1 = _ft_mem_realloc(i18, 4, 0, HEAP32[i14 >> 2] | 0, 0, i20 + 8 | 0) | 0;
  if (!(HEAP32[i20 + 8 >> 2] | 0)) {
   i2 = _ft_mem_realloc(i18, 4, 0, HEAP32[i14 >> 2] | 0, 0, i20 + 8 | 0) | 0;
   if (!(HEAP32[i20 + 8 >> 2] | 0)) {
    i3 = _ft_mem_realloc(i18, 4, 0, HEAP32[i14 >> 2] | 0, 0, i20 + 8 | 0) | 0;
    if ((HEAP32[i20 + 8 >> 2] | 0) == 0 ? (i15 = _FT_Stream_GetUShort(i19) | 0, i5 = _FT_Stream_GetUShort(i19) | 0, (i15 & 4095) != 0) : 0) {
     i17 = 0;
     i13 = i4 + (i5 & 65535) | 0;
     while (1) {
      i12 = (_FT_Stream_GetUShort(i19) | 0) & 65535;
      i6 = _FT_Stream_GetUShort(i19) | 0;
      if (!(i6 & 32768)) {
       if ((i6 & 16384 | 0) != 0 ? (HEAP32[i14 >> 2] & 2147483647 | 0) != 0 : 0) {
        i4 = 0;
        do {
         _FT_Stream_GetUShort(i19) | 0;
         i4 = i4 + 1 | 0;
        } while (i4 >>> 0 < HEAP32[i14 >> 2] << 1 >>> 0);
       }
      } else {
       if (!(HEAP32[i14 >> 2] | 0)) i4 = 0; else {
        i5 = 0;
        do {
         HEAP32[i1 + (i5 << 2) >> 2] = (_FT_Stream_GetUShort(i19) | 0) << 16 >> 16 << 2;
         i5 = i5 + 1 | 0;
         i4 = HEAP32[i14 >> 2] | 0;
        } while (i5 >>> 0 < i4 >>> 0);
       }
       if (!((i6 & 16384 | 0) == 0 | (i4 | 0) == 0)) {
        i5 = 0;
        do {
         HEAP32[i2 + (i5 << 2) >> 2] = (_FT_Stream_GetUShort(i19) | 0) << 16 >> 16 << 2;
         i5 = i5 + 1 | 0;
         i4 = HEAP32[i14 >> 2] | 0;
        } while (i5 >>> 0 < i4 >>> 0);
        if (i4) {
         i4 = 0;
         do {
          HEAP32[i3 + (i4 << 2) >> 2] = (_FT_Stream_GetUShort(i19) | 0) << 16 >> 16 << 2;
          i4 = i4 + 1 | 0;
         } while (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0);
        }
       }
       i10 = _ft_var_apply_tuple(i14, i6, i1, i2, i3) | 0;
       if (!((i6 & 8192 | 0) == 0 | (i10 | 0) == 0)) {
        i9 = HEAP32[i19 >> 2] | 0;
        i8 = (HEAP32[i19 + 32 >> 2] | 0) - i9 | 0;
        HEAP32[i19 + 32 >> 2] = i9 + i13;
        i9 = _ft_var_readpackedpoints(i19, i20) | 0;
        i6 = HEAP32[i20 >> 2] | 0;
        if (!i6) i4 = HEAP32[i16 + 668 >> 2] | 0; else i4 = i6;
        i7 = _ft_var_readpackeddeltas(i19, i4) | 0;
        do if (!((i9 | 0) == 0 | (i7 | 0) == 0)) if ((i9 | 0) == (-1 | 0)) {
         if (!(HEAP32[i16 + 668 >> 2] | 0)) break;
         i4 = HEAP32[i16 + 672 >> 2] | 0;
         i5 = 0;
         do {
          i11 = HEAPU16[i4 + (i5 << 1) >> 1] | 0;
          i11 = (_FT_MulFix(HEAP16[i7 + (i5 << 1) >> 1] | 0, i10) | 0) + i11 & 65535;
          i4 = HEAP32[i16 + 672 >> 2] | 0;
          HEAP16[i4 + (i5 << 1) >> 1] = i11;
          i5 = i5 + 1 | 0;
         } while (i5 >>> 0 < (HEAP32[i16 + 668 >> 2] | 0) >>> 0);
         i11 = 37;
        } else {
         if (!i6) {
          i11 = 38;
          break;
         }
         i4 = HEAP32[i16 + 672 >> 2] | 0;
         i5 = 0;
         do {
          i11 = HEAPU16[i9 + (i5 << 1) >> 1] | 0;
          i21 = HEAPU16[i4 + (i11 << 1) >> 1] | 0;
          i21 = (_FT_MulFix(HEAP16[i7 + (i5 << 1) >> 1] | 0, i10) | 0) + i21 & 65535;
          i4 = HEAP32[i16 + 672 >> 2] | 0;
          HEAP16[i4 + (i11 << 1) >> 1] = i21;
          i5 = i5 + 1 | 0;
         } while (i5 >>> 0 < i6 >>> 0);
         i11 = 37;
        } else i11 = 37; while (0);
        if ((i11 | 0) == 37 ? (i11 = 0, (i9 | 0) != (-1 | 0)) : 0) i11 = 38;
        if ((i11 | 0) == 38) {
         i11 = 0;
         _ft_mem_free(i18, i9);
        }
        _ft_mem_free(i18, i7);
        HEAP32[i19 + 32 >> 2] = (HEAP32[i19 >> 2] | 0) + i8;
       }
      }
      i17 = i17 + 1 | 0;
      if ((i17 | 0) == (i15 & 4095 | 0)) break; else i13 = i12 + i13 | 0;
     }
    }
   } else i3 = 0;
  } else {
   i3 = 0;
   i2 = 0;
  }
 } else {
  HEAP32[i20 + 8 >> 2] = 0;
  i3 = 0;
  i2 = 0;
  i1 = 0;
 }
 _FT_Stream_ExitFrame(i19);
 i21 = i3;
 i19 = i2;
 i17 = i1;
 _ft_mem_free(i18, i17);
 _ft_mem_free(i18, i19);
 _ft_mem_free(i18, i21);
 i21 = HEAP32[i20 + 8 >> 2] | 0;
 STACKTOP = i20;
 return i21 | 0;
}

function _try_realloc_chunk(i1, i13) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = HEAP32[i1 + 4 >> 2] | 0;
 i8 = i1 + (i12 & -8) | 0;
 i7 = HEAP32[70416] | 0;
 if ((i12 & 3 | 0) != 1 & i1 >>> 0 >= i7 >>> 0 & i1 >>> 0 < i8 >>> 0 ? (i11 = HEAP32[i1 + (i12 & -8 | 4) >> 2] | 0, (i11 & 1 | 0) != 0) : 0) {
  do if (!(i12 & 3)) if (i13 >>> 0 < 256) i1 = 0; else {
   if ((i12 & -8) >>> 0 >= (i13 + 4 | 0) >>> 0 ? ((i12 & -8) - i13 | 0) >>> 0 <= HEAP32[70532] << 1 >>> 0 : 0) break;
   i1 = 0;
  } else {
   if ((i12 & -8) >>> 0 >= i13 >>> 0) {
    if (((i12 & -8) - i13 | 0) >>> 0 <= 15) break;
    HEAP32[i1 + 4 >> 2] = i12 & 1 | i13 | 2;
    HEAP32[i1 + (i13 + 4) >> 2] = (i12 & -8) - i13 | 3;
    HEAP32[i1 + (i12 & -8 | 4) >> 2] = HEAP32[i1 + (i12 & -8 | 4) >> 2] | 1;
    _dispose_chunk(i1 + i13 | 0, (i12 & -8) - i13 | 0);
    break;
   }
   if ((i8 | 0) == (HEAP32[70418] | 0)) {
    i2 = (HEAP32[70415] | 0) + (i12 & -8) | 0;
    if (i2 >>> 0 <= i13 >>> 0) {
     i1 = 0;
     break;
    }
    HEAP32[i1 + 4 >> 2] = i12 & 1 | i13 | 2;
    HEAP32[i1 + (i13 + 4) >> 2] = i2 - i13 | 1;
    HEAP32[70418] = i1 + i13;
    HEAP32[70415] = i2 - i13;
    break;
   }
   if ((i8 | 0) == (HEAP32[70417] | 0)) {
    i2 = (HEAP32[70414] | 0) + (i12 & -8) | 0;
    if (i2 >>> 0 < i13 >>> 0) {
     i1 = 0;
     break;
    }
    if ((i2 - i13 | 0) >>> 0 > 15) {
     HEAP32[i1 + 4 >> 2] = i12 & 1 | i13 | 2;
     HEAP32[i1 + (i13 + 4) >> 2] = i2 - i13 | 1;
     HEAP32[i1 + i2 >> 2] = i2 - i13;
     HEAP32[i1 + (i2 + 4) >> 2] = HEAP32[i1 + (i2 + 4) >> 2] & -2;
     i3 = i1 + i13 | 0;
     i2 = i2 - i13 | 0;
    } else {
     HEAP32[i1 + 4 >> 2] = i12 & 1 | i2 | 2;
     HEAP32[i1 + (i2 + 4) >> 2] = HEAP32[i1 + (i2 + 4) >> 2] | 1;
     i3 = 0;
     i2 = 0;
    }
    HEAP32[70414] = i2;
    HEAP32[70417] = i3;
    break;
   }
   if ((i11 & 2 | 0) == 0 ? ((i11 & -8) + (i12 & -8) | 0) >>> 0 >= i13 >>> 0 : 0) {
    i10 = (i11 & -8) + (i12 & -8) - i13 | 0;
    do if (i11 >>> 0 >= 256) {
     i6 = HEAP32[i1 + ((i12 & -8) + 24) >> 2] | 0;
     i3 = HEAP32[i1 + ((i12 & -8) + 12) >> 2] | 0;
     do if ((i3 | 0) == (i8 | 0)) {
      i2 = HEAP32[i1 + ((i12 & -8) + 20) >> 2] | 0;
      if (!i2) {
       i2 = HEAP32[i1 + ((i12 & -8) + 16) >> 2] | 0;
       if (!i2) {
        i9 = 0;
        break;
       } else i3 = i1 + ((i12 & -8) + 16) | 0;
      } else i3 = i1 + ((i12 & -8) + 20) | 0;
      while (1) {
       i4 = i2 + 20 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if (i5) {
        i2 = i5;
        i3 = i4;
        continue;
       }
       i4 = i2 + 16 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if (!i5) break; else {
        i2 = i5;
        i3 = i4;
       }
      }
      if (i3 >>> 0 < i7 >>> 0) _abort(); else {
       HEAP32[i3 >> 2] = 0;
       i9 = i2;
       break;
      }
     } else {
      i2 = HEAP32[i1 + ((i12 & -8) + 8) >> 2] | 0;
      if ((i2 >>> 0 >= i7 >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i8 | 0) : 0) ? (HEAP32[i3 + 8 >> 2] | 0) == (i8 | 0) : 0) {
       HEAP32[i2 + 12 >> 2] = i3;
       HEAP32[i3 + 8 >> 2] = i2;
       i9 = i3;
       break;
      }
      _abort();
     } while (0);
     if (i6) {
      i2 = HEAP32[i1 + ((i12 & -8) + 28) >> 2] | 0;
      if ((i8 | 0) == (HEAP32[281952 + (i2 << 2) >> 2] | 0)) {
       HEAP32[281952 + (i2 << 2) >> 2] = i9;
       if (!i9) {
        HEAP32[70413] = HEAP32[70413] & ~(1 << i2);
        break;
       }
      } else {
       if (i6 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort();
       if ((HEAP32[i6 + 16 >> 2] | 0) == (i8 | 0)) HEAP32[i6 + 16 >> 2] = i9; else HEAP32[i6 + 20 >> 2] = i9;
       if (!i9) break;
      }
      i3 = HEAP32[70416] | 0;
      if (i9 >>> 0 < i3 >>> 0) _abort();
      HEAP32[i9 + 24 >> 2] = i6;
      i2 = HEAP32[i1 + ((i12 & -8) + 16) >> 2] | 0;
      do if (i2) if (i2 >>> 0 < i3 >>> 0) _abort(); else {
       HEAP32[i9 + 16 >> 2] = i2;
       HEAP32[i2 + 24 >> 2] = i9;
       break;
      } while (0);
      i2 = HEAP32[i1 + ((i12 & -8) + 20) >> 2] | 0;
      if (i2) if (i2 >>> 0 < (HEAP32[70416] | 0) >>> 0) _abort(); else {
       HEAP32[i9 + 20 >> 2] = i2;
       HEAP32[i2 + 24 >> 2] = i9;
       break;
      }
     }
    } else {
     i2 = HEAP32[i1 + ((i12 & -8) + 8) >> 2] | 0;
     i3 = HEAP32[i1 + ((i12 & -8) + 12) >> 2] | 0;
     do if ((i2 | 0) != (281688 + (i11 >>> 3 << 1 << 2) | 0)) {
      if (i2 >>> 0 >= i7 >>> 0 ? (HEAP32[i2 + 12 >> 2] | 0) == (i8 | 0) : 0) break;
      _abort();
     } while (0);
     if ((i3 | 0) == (i2 | 0)) {
      HEAP32[70412] = HEAP32[70412] & ~(1 << (i11 >>> 3));
      break;
     }
     do if ((i3 | 0) == (281688 + (i11 >>> 3 << 1 << 2) | 0)) i4 = i3 + 8 | 0; else {
      if (i3 >>> 0 >= i7 >>> 0 ? (HEAP32[i3 + 8 >> 2] | 0) == (i8 | 0) : 0) {
       i4 = i3 + 8 | 0;
       break;
      }
      _abort();
     } while (0);
     HEAP32[i2 + 12 >> 2] = i3;
     HEAP32[i4 >> 2] = i2;
    } while (0);
    if (i10 >>> 0 < 16) {
     HEAP32[i1 + 4 >> 2] = (i11 & -8) + (i12 & -8) | i12 & 1 | 2;
     HEAP32[i1 + ((i11 & -8) + (i12 & -8) | 4) >> 2] = HEAP32[i1 + ((i11 & -8) + (i12 & -8) | 4) >> 2] | 1;
     break;
    } else {
     HEAP32[i1 + 4 >> 2] = i12 & 1 | i13 | 2;
     HEAP32[i1 + (i13 + 4) >> 2] = i10 | 3;
     HEAP32[i1 + ((i11 & -8) + (i12 & -8) | 4) >> 2] = HEAP32[i1 + ((i11 & -8) + (i12 & -8) | 4) >> 2] | 1;
     _dispose_chunk(i1 + i13 | 0, i10);
     break;
    }
   } else i1 = 0;
  } while (0);
  return i1 | 0;
 }
 _abort();
 return 0;
}

function _af_cjk_metrics_init_widths(i8, i5) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 i1 = HEAP32[i5 + 100 >> 2] | 0;
 i2 = i9 + 720 | 0;
 i3 = i2 + 120 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i9 + 720 >> 2] = i1;
 HEAP32[i8 + 48 >> 2] = 0;
 HEAP32[i8 + 388 >> 2] = 0;
 i1 = _FT_Get_Char_Index(i5, 3e4) | 0;
 if (((((i1 | 0) != 0 ? (_FT_Load_Glyph(i5, i1, 1) | 0) == 0 : 0) ? (i4 = HEAP32[i5 + 84 >> 2] | 0, (HEAP16[i4 + 110 >> 1] | 0) >= 1) : 0) ? (_memset(i9 | 0, 0, 720) | 0, HEAP32[i9 + 36 >> 2] = HEAP32[i8 + 36 >> 2], HEAP32[i9 + 8 >> 2] = 65536, HEAP32[i9 + 12 >> 2] = 65536, HEAP32[i9 + 16 >> 2] = 0, HEAP32[i9 + 20 >> 2] = 0, HEAP32[i9 + 4 >> 2] = i5, HEAP32[i9 + 24 >> 2] = 0, HEAP32[i9 + 28 >> 2] = 0, HEAP32[i9 + 720 + 108 >> 2] = i9, HEAP32[i9 + 720 + 100 >> 2] = 0, (_af_glyph_hints_reload(i9 + 720 | 0, i4 + 108 | 0) | 0) == 0) : 0) ? (_af_latin_hints_compute_segments(i9 + 720 | 0, 0) | 0) == 0 : 0) {
  _af_latin_hints_link_segments(i9 + 720 | 0, 0);
  i3 = HEAP32[i9 + 720 + 52 >> 2] | 0;
  i4 = HEAP32[i9 + 720 + 44 >> 2] | 0;
  if ((i4 | 0) > 0) {
   i1 = 0;
   i5 = i3;
   do {
    i2 = HEAP32[i5 + 20 >> 2] | 0;
    if (((i2 | 0) != 0 ? (i2 >>> 0 > i5 >>> 0 ? (HEAP32[i2 + 20 >> 2] | 0) == (i5 | 0) : 0) : 0) ? (i6 = (HEAP16[i5 + 2 >> 1] | 0) - (HEAP16[i2 + 2 >> 1] | 0) | 0, i1 >>> 0 < 16) : 0) {
     HEAP32[i8 + 52 + (i1 * 12 | 0) >> 2] = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
     i1 = i1 + 1 | 0;
    }
    i5 = i5 + 48 | 0;
   } while (i5 >>> 0 < (i3 + (i4 * 48 | 0) | 0) >>> 0);
   if (i1 >>> 0 > 1) {
    i4 = 1;
    do {
     i5 = i4;
     do {
      i2 = i8 + 52 + (i5 * 12 | 0) | 0;
      i5 = i5 + -1 | 0;
      i3 = i8 + 52 + (i5 * 12 | 0) | 0;
      if ((HEAP32[i2 >> 2] | 0) > (HEAP32[i3 >> 2] | 0)) break;
      HEAP32[i9 + 840 >> 2] = HEAP32[i2 >> 2];
      HEAP32[i9 + 840 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
      HEAP32[i9 + 840 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
      HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
      HEAP32[i3 >> 2] = HEAP32[i9 + 840 >> 2];
      HEAP32[i3 + 4 >> 2] = HEAP32[i9 + 840 + 4 >> 2];
      HEAP32[i3 + 8 >> 2] = HEAP32[i9 + 840 + 8 >> 2];
     } while ((i5 | 0) != 0);
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i1 | 0));
   }
  } else i1 = 0;
  HEAP32[i8 + 48 >> 2] = i1;
  if (!(_af_latin_hints_compute_segments(i9 + 720 | 0, 1) | 0)) {
   _af_latin_hints_link_segments(i9 + 720 | 0, 1);
   i3 = HEAP32[i9 + 720 + 80 >> 2] | 0;
   i4 = HEAP32[i9 + 720 + 72 >> 2] | 0;
   if ((i4 | 0) > 0) {
    i1 = 0;
    i5 = i3;
    do {
     i2 = HEAP32[i5 + 20 >> 2] | 0;
     if (((i2 | 0) != 0 ? (i2 >>> 0 > i5 >>> 0 ? (HEAP32[i2 + 20 >> 2] | 0) == (i5 | 0) : 0) : 0) ? (i7 = (HEAP16[i5 + 2 >> 1] | 0) - (HEAP16[i2 + 2 >> 1] | 0) | 0, i1 >>> 0 < 16) : 0) {
      HEAP32[i8 + 392 + (i1 * 12 | 0) >> 2] = (i7 | 0) < 0 ? 0 - i7 | 0 : i7;
      i1 = i1 + 1 | 0;
     }
     i5 = i5 + 48 | 0;
    } while (i5 >>> 0 < (i3 + (i4 * 48 | 0) | 0) >>> 0);
    if (i1 >>> 0 > 1) {
     i4 = 1;
     do {
      i5 = i4;
      do {
       i2 = i8 + 392 + (i5 * 12 | 0) | 0;
       i5 = i5 + -1 | 0;
       i3 = i8 + 392 + (i5 * 12 | 0) | 0;
       if ((HEAP32[i2 >> 2] | 0) > (HEAP32[i3 >> 2] | 0)) break;
       HEAP32[i9 + 840 >> 2] = HEAP32[i2 >> 2];
       HEAP32[i9 + 840 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
       HEAP32[i9 + 840 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
       HEAP32[i2 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
       HEAP32[i3 >> 2] = HEAP32[i9 + 840 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i9 + 840 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i9 + 840 + 8 >> 2];
      } while ((i5 | 0) != 0);
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i1 | 0));
    }
   } else i1 = 0;
   HEAP32[i8 + 388 >> 2] = i1;
  }
 }
 if (!(HEAP32[i8 + 48 >> 2] | 0)) i1 = ((HEAP32[i8 + 36 >> 2] | 0) * 50 | 0) / 2048 | 0; else i1 = HEAP32[i8 + 52 >> 2] | 0;
 HEAP32[i8 + 244 >> 2] = (i1 | 0) / 5 | 0;
 HEAP32[i8 + 248 >> 2] = i1;
 HEAP8[i8 + 252 >> 0] = 0;
 if (!(HEAP32[i8 + 388 >> 2] | 0)) i1 = ((HEAP32[i8 + 36 >> 2] | 0) * 50 | 0) / 2048 | 0; else i1 = HEAP32[i8 + 392 >> 2] | 0;
 HEAP32[i8 + 584 >> 2] = (i1 | 0) / 5 | 0;
 HEAP32[i8 + 588 >> 2] = i1;
 HEAP8[i8 + 592 >> 0] = 0;
 i1 = HEAP32[i9 + 720 >> 2] | 0;
 if (!i1) {
  STACKTOP = i9;
  return;
 }
 HEAP32[i9 + 720 + 44 >> 2] = 0;
 HEAP32[i9 + 720 + 48 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i9 + 720 + 52 >> 2] | 0);
 HEAP32[i9 + 720 + 52 >> 2] = 0;
 HEAP32[i9 + 720 + 56 >> 2] = 0;
 HEAP32[i9 + 720 + 60 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i9 + 720 + 64 >> 2] | 0);
 HEAP32[i9 + 720 + 64 >> 2] = 0;
 HEAP32[i9 + 720 + 72 >> 2] = 0;
 HEAP32[i9 + 720 + 76 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i9 + 720 + 80 >> 2] | 0);
 HEAP32[i9 + 720 + 80 >> 2] = 0;
 HEAP32[i9 + 720 + 84 >> 2] = 0;
 HEAP32[i9 + 720 + 88 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i9 + 720 + 92 >> 2] | 0);
 HEAP32[i9 + 720 + 92 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i9 + 720 + 40 >> 2] | 0);
 HEAP32[i9 + 720 + 40 >> 2] = 0;
 HEAP32[i9 + 720 + 32 >> 2] = 0;
 HEAP32[i9 + 720 + 36 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i9 + 720 + 28 >> 2] | 0);
 HEAP32[i9 + 720 + 28 >> 2] = 0;
 HEAP32[i9 + 720 + 24 >> 2] = 0;
 HEAP32[i9 + 720 + 20 >> 2] = 0;
 HEAP32[i9 + 720 >> 2] = 0;
 STACKTOP = i9;
 return;
}

function _T1_Load_Glyph(i10, i5, i2, i1) {
 i10 = i10 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 1552 | 0;
 i9 = HEAP32[i10 + 4 >> 2] | 0;
 i4 = HEAP32[(HEAP32[i9 + 488 >> 2] | 0) + 12 >> 2] | 0;
 if ((HEAP32[i9 + 16 >> 2] | 0) >>> 0 <= i2 >>> 0 ? (HEAP32[(HEAP32[i9 + 128 >> 2] | 0) + 52 >> 2] | 0) == 0 : 0) {
  i10 = 6;
  STACKTOP = i11;
  return i10 | 0;
 }
 i8 = (i1 & 1024 | 0) == 0 ? i1 : i1 | 3;
 if (i5) {
  HEAP32[i10 + 172 >> 2] = HEAP32[i5 + 16 >> 2];
  HEAP32[i10 + 176 >> 2] = HEAP32[i5 + 20 >> 2];
 } else {
  HEAP32[i10 + 172 >> 2] = 65536;
  HEAP32[i10 + 176 >> 2] = 65536;
 }
 HEAP16[i10 + 110 >> 1] = 0;
 HEAP16[i10 + 108 >> 1] = 0;
 HEAP32[i10 + 72 >> 2] = 1869968492;
 i1 = FUNCTION_TABLE_iiiiiiiiii[HEAP32[i4 >> 2] & 1](i11 + 48 | 0, i9, i5, i10, HEAP32[i9 + 420 >> 2] | 0, HEAP32[i9 + 532 >> 2] | 0, (i8 & 3 | 0) == 0 & 1, i8 >>> 16 & 15, 151) | 0;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP8[i11 + 48 + 69 >> 0] = (i8 & 1024) >>> 10;
 HEAP32[i11 + 48 + 1364 >> 2] = HEAP32[i9 + 404 >> 2];
 HEAP32[i11 + 48 + 1368 >> 2] = HEAP32[i9 + 408 >> 2];
 HEAP32[i11 + 48 + 1372 >> 2] = HEAP32[i9 + 412 >> 2];
 HEAP32[i11 + 48 + 1488 >> 2] = HEAP32[i9 + 548 >> 2];
 HEAP32[i11 + 48 + 1492 >> 2] = HEAP32[i9 + 544 >> 2];
 i1 = _T1_Parse_Glyph_And_Get_Char_String(i11 + 48 | 0, i2, i11 + 24 | 0) | 0;
 if (i1) {
  FUNCTION_TABLE_vi[HEAP32[i4 + 4 >> 2] & 127](i11 + 48 | 0);
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i11 + 32 >> 2] = HEAP32[i11 + 48 + 1376 >> 2];
 HEAP32[i11 + 32 + 4 >> 2] = HEAP32[i11 + 48 + 1376 + 4 >> 2];
 HEAP32[i11 + 32 + 8 >> 2] = HEAP32[i11 + 48 + 1376 + 8 >> 2];
 HEAP32[i11 + 32 + 12 >> 2] = HEAP32[i11 + 48 + 1376 + 12 >> 2];
 i2 = HEAP32[i11 + 48 + 1392 >> 2] | 0;
 i3 = HEAP32[i11 + 48 + 1396 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[i4 + 4 >> 2] & 127](i11 + 48 | 0);
 HEAP32[i10 + 124 >> 2] = HEAP32[i10 + 124 >> 2] & 1 | 4;
 if (!(i8 & 1024)) {
  HEAP32[i10 + 40 >> 2] = (_FT_RoundFix(HEAP32[i11 + 48 + 40 >> 2] | 0) | 0) >> 16;
  HEAP32[i10 + 56 >> 2] = (_FT_RoundFix(HEAP32[i11 + 48 + 40 >> 2] | 0) | 0) >> 16;
  HEAP8[(HEAP32[i10 + 156 >> 2] | 0) + 8 >> 0] = 0;
  if (i8 & 16) {
   i1 = (HEAP32[i9 + 472 >> 2] | 0) - (HEAP32[i9 + 464 >> 2] | 0) >> 16;
   HEAP32[i10 + 52 >> 2] = i1;
  } else {
   HEAP32[i10 + 52 >> 2] = (_FT_RoundFix(HEAP32[i11 + 48 + 44 >> 2] | 0) | 0) >> 16;
   i1 = (_FT_RoundFix(HEAP32[i11 + 48 + 44 >> 2] | 0) | 0) >> 16;
  }
  HEAP32[i10 + 60 >> 2] = i1;
  HEAP32[i10 + 72 >> 2] = 1869968492;
  if ((i5 | 0) != 0 ? (HEAPU16[i5 + 14 >> 1] | 0) < 24 : 0) HEAP32[i10 + 124 >> 2] = HEAP32[i10 + 124 >> 2] | 256;
  if (!((((HEAP32[i11 + 32 >> 2] | 0) == 65536 ? (HEAP32[i11 + 32 + 12 >> 2] | 0) == 65536 : 0) ? (HEAP32[i11 + 32 + 4 >> 2] | 0) == 0 : 0) ? (HEAP32[i11 + 32 + 8 >> 2] | 0) == 0 : 0)) _FT_Outline_Transform(i10 + 108 | 0, i11 + 32 | 0);
  if (i3 | i2) _FT_Outline_Translate(i10 + 108 | 0, i2, i3);
  HEAP32[i11 >> 2] = HEAP32[i10 + 40 >> 2];
  HEAP32[i11 + 4 >> 2] = 0;
  _FT_Vector_Transform(i11, i11 + 32 | 0);
  HEAP32[i10 + 40 >> 2] = (HEAP32[i11 >> 2] | 0) + i2;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 52 >> 2];
  _FT_Vector_Transform(i11, i11 + 32 | 0);
  HEAP32[i10 + 52 >> 2] = (HEAP32[i11 + 4 >> 2] | 0) + i3;
  if (!(i8 & 1)) {
   i2 = HEAP32[i11 + 48 + 16 >> 2] | 0;
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   i3 = HEAP32[i10 + 172 >> 2] | 0;
   i4 = HEAP32[i10 + 176 >> 2] | 0;
   if (!((i8 & 3 | 0) == 0 ? (HEAP32[i11 + 48 + 72 >> 2] | 0) != 0 : 0)) i7 = 26;
   if ((i7 | 0) == 26 ? (i6 = HEAP16[i2 + 2 >> 1] | 0, i6 << 16 >> 16 > 0) : 0) {
    i2 = i6 << 16 >> 16;
    while (1) {
     HEAP32[i1 >> 2] = _FT_MulFix(HEAP32[i1 >> 2] | 0, i3) | 0;
     i7 = i1 + 4 | 0;
     HEAP32[i7 >> 2] = _FT_MulFix(HEAP32[i7 >> 2] | 0, i4) | 0;
     if ((i2 | 0) > 1) {
      i2 = i2 + -1 | 0;
      i1 = i1 + 8 | 0;
     } else break;
    }
   }
   HEAP32[i10 + 40 >> 2] = _FT_MulFix(HEAP32[i10 + 40 >> 2] | 0, i3) | 0;
   HEAP32[i10 + 52 >> 2] = _FT_MulFix(HEAP32[i10 + 52 >> 2] | 0, i4) | 0;
  }
  _FT_Outline_Get_CBox(i10 + 108 | 0, i11 + 8 | 0);
  i6 = HEAP32[i11 + 8 >> 2] | 0;
  HEAP32[i10 + 24 >> 2] = (HEAP32[i11 + 8 + 8 >> 2] | 0) - i6;
  i7 = HEAP32[i11 + 8 + 12 >> 2] | 0;
  HEAP32[i10 + 28 >> 2] = i7 - (HEAP32[i11 + 8 + 4 >> 2] | 0);
  HEAP32[i10 + 32 >> 2] = i6;
  HEAP32[i10 + 36 >> 2] = i7;
  if (i8 & 16) _ft_synthesize_vertical_metrics(i10 + 24 | 0, HEAP32[i10 + 52 >> 2] | 0);
 } else {
  i8 = HEAP32[i10 + 156 >> 2] | 0;
  HEAP32[i10 + 32 >> 2] = (_FT_RoundFix(HEAP32[i11 + 48 + 32 >> 2] | 0) | 0) >> 16;
  HEAP32[i10 + 40 >> 2] = (_FT_RoundFix(HEAP32[i11 + 48 + 40 >> 2] | 0) | 0) >> 16;
  HEAP32[i8 + 12 >> 2] = HEAP32[i11 + 32 >> 2];
  HEAP32[i8 + 12 + 4 >> 2] = HEAP32[i11 + 32 + 4 >> 2];
  HEAP32[i8 + 12 + 8 >> 2] = HEAP32[i11 + 32 + 8 >> 2];
  HEAP32[i8 + 12 + 12 >> 2] = HEAP32[i11 + 32 + 12 >> 2];
  HEAP32[i8 + 28 >> 2] = i2;
  HEAP32[i8 + 32 >> 2] = i3;
  HEAP8[i8 + 8 >> 0] = 1;
 }
 HEAP32[i10 + 136 >> 2] = HEAP32[i11 + 24 >> 2];
 HEAP32[i10 + 140 >> 2] = HEAP32[i11 + 24 + 4 >> 2];
 i1 = HEAP32[(HEAP32[i9 + 128 >> 2] | 0) + 52 >> 2] | 0;
 if (!i1) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i1 + 4 >> 2] | 0, i11 + 24 | 0);
 HEAP32[i10 + 136 >> 2] = 0;
 HEAP32[i10 + 140 >> 2] = 0;
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}
function _TT_Set_MM_Blend(i15, i13, i12) {
 i15 = i15 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i16 >> 2] = 0;
 i14 = HEAP32[i15 + 100 >> 2] | 0;
 HEAP8[i15 + 708 >> 0] = 0;
 i1 = HEAP32[i15 + 712 >> 2] | 0;
 do if (!i1) {
  i11 = _TT_Get_MM_Var(i15, 0) | 0;
  HEAP32[i16 >> 2] = i11;
  if (!i11) {
   i11 = HEAP32[i15 + 712 >> 2] | 0;
   break;
  } else {
   i15 = HEAP32[i16 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 } else i11 = i1; while (0);
 i2 = i11 + 8 | 0;
 if ((HEAP32[HEAP32[i2 >> 2] >> 2] | 0) != (i13 | 0)) {
  HEAP32[i16 >> 2] = 6;
  i15 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 L11 : do if (i13) {
  i1 = 0;
  while (1) {
   if (((HEAP32[i12 + (i1 << 2) >> 2] | 0) + 65536 | 0) >>> 0 > 131072) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i13 >>> 0) break L11;
  }
  HEAP32[i16 >> 2] = 6;
  i15 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } while (0);
 i5 = i11 + 36 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  i9 = HEAP32[i15 + 104 >> 2] | 0;
  i6 = HEAP32[i9 + 28 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i15 + 508 >> 2] & 63](i15, 1735811442, i9, i16 + 24 | 0) | 0;
  HEAP32[i16 + 28 >> 2] = i1;
  do if (!i1) {
   i7 = _FT_Stream_Pos(i9) | 0;
   i1 = _FT_Stream_ReadFields(i9, 282588, i16 + 4 | 0) | 0;
   HEAP32[i16 + 28 >> 2] = i1;
   if (!i1) {
    i8 = i11 + 24 | 0;
    HEAP32[i8 >> 2] = HEAPU16[i16 + 4 + 6 >> 1];
    i1 = HEAPU16[i16 + 4 + 12 >> 1] | 0;
    i3 = i11 + 32 | 0;
    HEAP32[i3 >> 2] = i1;
    i4 = (HEAP32[i16 + 4 + 16 >> 2] | 0) + i7 | 0;
    if ((HEAP32[i16 + 4 >> 2] | 0) == 65536 ? (i10 = i16 + 4 + 4 | 0, (HEAP16[i10 >> 1] | 0) == (HEAP32[HEAP32[i2 >> 2] >> 2] & 65535) << 16 >> 16) : 0) {
     HEAP32[i5 >> 2] = _ft_mem_realloc(i6, 4, 0, i1 + 1 | 0, 0, i16 + 28 | 0) | 0;
     i1 = HEAP32[i16 + 28 >> 2] | 0;
     if (i1) break;
     i1 = (HEAP32[i3 >> 2] | 0) + 1 | 0;
     if (!(HEAP16[i16 + 4 + 14 >> 1] & 1)) {
      i1 = _FT_Stream_EnterFrame(i9, i1 << 1) | 0;
      HEAP32[i16 + 28 >> 2] = i1;
      if (!i1) i1 = 0; else break;
      do {
       i2 = (((_FT_Stream_GetUShort(i9) | 0) & 65535) << 1) + i4 | 0;
       HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] = i2;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 <= (HEAP32[i3 >> 2] | 0) >>> 0);
      _FT_Stream_ExitFrame(i9);
     } else {
      i1 = _FT_Stream_EnterFrame(i9, i1 << 2) | 0;
      HEAP32[i16 + 28 >> 2] = i1;
      if (!i1) i1 = 0; else break;
      do {
       i2 = (_FT_Stream_GetULong(i9) | 0) + i4 | 0;
       HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] = i2;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 <= (HEAP32[i3 >> 2] | 0) >>> 0);
      _FT_Stream_ExitFrame(i9);
     }
     i1 = HEAP32[i8 >> 2] | 0;
     if (i1) {
      i4 = i11 + 28 | 0;
      HEAP32[i4 >> 2] = _ft_mem_realloc(i6, 4, 0, Math_imul(HEAPU16[i10 >> 1] | 0, i1) | 0, 0, i16 + 28 | 0) | 0;
      i1 = HEAP32[i16 + 28 >> 2] | 0;
      if (i1) break;
      i1 = _FT_Stream_Seek(i9, (HEAP32[i16 + 4 + 8 >> 2] | 0) + i7 | 0) | 0;
      HEAP32[i16 + 28 >> 2] = i1;
      if (i1) break;
      i1 = _FT_Stream_EnterFrame(i9, Math_imul(HEAP32[i8 >> 2] << 1, HEAPU16[i10 >> 1] | 0) | 0) | 0;
      HEAP32[i16 + 28 >> 2] = i1;
      if (i1) break;
      i1 = HEAP32[i8 >> 2] | 0;
      if (i1) {
       i2 = HEAP16[i10 >> 1] | 0;
       i3 = 0;
       do {
        if (!(i2 << 16 >> 16)) i2 = 0; else {
         i1 = 0;
         do {
          i6 = (_FT_Stream_GetUShort(i9) | 0) << 16 >> 16 << 2;
          i2 = HEAP16[i10 >> 1] | 0;
          i7 = (Math_imul(i2 & 65535, i3) | 0) + i1 | 0;
          HEAP32[(HEAP32[i4 >> 2] | 0) + (i7 << 2) >> 2] = i6;
          i1 = i1 + 1 | 0;
         } while (i1 >>> 0 < (i2 & 65535) >>> 0);
         i1 = HEAP32[i8 >> 2] | 0;
        }
        i3 = i3 + 1 | 0;
       } while (i3 >>> 0 < i1 >>> 0);
      }
      _FT_Stream_ExitFrame(i9);
     }
     i1 = HEAP32[i16 + 28 >> 2] | 0;
     break;
    }
    HEAP32[i16 + 28 >> 2] = 8;
    i1 = 8;
   }
  } while (0);
  HEAP32[i16 >> 2] = i1;
  if (i1) {
   i15 = HEAP32[i16 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 i2 = i11 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L57 : do if (!i1) {
  i1 = _ft_mem_realloc(i14, 4, 0, i13, 0, i16) | 0;
  HEAP32[i2 >> 2] = i1;
  if (!(HEAP32[i16 >> 2] | 0)) i2 = 1; else {
   i15 = HEAP32[i16 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 } else if (!i13) i2 = 0; else {
  i2 = 0;
  while (1) {
   if ((HEAP32[i1 + (i2 << 2) >> 2] | 0) != (HEAP32[i12 + (i2 << 2) >> 2] | 0)) {
    i2 = 2;
    break L57;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i13 >>> 0) {
    i2 = 0;
    break;
   }
  }
 } while (0);
 HEAP32[i11 >> 2] = i13;
 _memcpy(i1 | 0, i12 | 0, i13 << 2 | 0) | 0;
 HEAP8[i15 + 708 >> 0] = 1;
 i1 = HEAP32[i15 + 672 >> 2] | 0;
 if (!i1) {
  i15 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 switch (i2 | 0) {
 case 2:
  {
   _ft_mem_free(i14, i1);
   HEAP32[i15 + 672 >> 2] = 0;
   _tt_face_load_cvt(i15, HEAP32[i15 + 104 >> 2] | 0) | 0;
   i15 = HEAP32[i16 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 case 1:
  {
   _tt_face_vary_cvt(i15, HEAP32[i15 + 104 >> 2] | 0) | 0;
   i15 = HEAP32[i16 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 default:
  {
   i15 = HEAP32[i16 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 return 0;
}

function __ZN6Shader12LoadFromFileE10ShaderTypePKcS2_S2_S2_(i7, i10, i11, i3, i8, i1, i9) {
 i7 = i7 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((HEAP32[i10 + 8 >> 2] | 0) != (i3 | 0)) __ZN6String3SetEPKc(i10 + 8 | 0, i3);
 i6 = (i1 | 0) == 0 ? ((i11 | 0) == 1 ? 297949 : 297952) : i1;
 HEAP32[i12 + 168 >> 2] = 0;
 HEAP32[i12 + 168 + 4 >> 2] = 0;
 HEAP32[i12 + 168 + 8 >> 2] = 0;
 HEAP32[i12 + 168 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i12 + 168 | 0, i3);
 HEAP32[i12 + 80 >> 2] = 0;
 HEAP32[i12 + 80 + 4 >> 2] = 0;
 HEAP32[i12 + 80 + 8 >> 2] = 0;
 HEAP32[i12 + 80 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i12 + 80 | 0, 297955);
 HEAP32[i12 + 48 >> 2] = 0;
 HEAP32[i12 + 48 + 4 >> 2] = 0;
 HEAP32[i12 + 48 + 8 >> 2] = 0;
 HEAP32[i12 + 48 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i12 + 48 | 0, i6);
 HEAP32[i12 + 64 >> 2] = 0;
 HEAP32[i12 + 64 + 4 >> 2] = 0;
 HEAP32[i12 + 64 + 8 >> 2] = 0;
 HEAP32[i12 + 64 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i12 + 64 | 0, HEAP32[i12 + 48 >> 2] | 0);
 i1 = HEAP32[i12 + 64 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i2 = HEAP8[i1 >> 0] | 0, i2 << 24 >> 24 != 0) : 0) do {
  HEAP8[i1 >> 0] = _tolower(i2 << 24 >> 24) | 0;
  i1 = i1 + 1 | 0;
  i2 = HEAP8[i1 >> 0] | 0;
 } while (i2 << 24 >> 24 != 0);
 __ZNK6StringplERKS_(i12 + 96 | 0, i12 + 80 | 0, i12 + 64 | 0);
 HEAP32[i12 + 112 >> 2] = 0;
 HEAP32[i12 + 112 + 4 >> 2] = 0;
 HEAP32[i12 + 112 + 8 >> 2] = 0;
 HEAP32[i12 + 112 + 12 >> 2] = 0;
 i3 = HEAP32[i12 + 96 >> 2] | 0;
 __ZN6String3SetEPKc(i12 + 112 | 0, i3);
 i4 = HEAP32[i12 + 112 + 8 >> 2] | 0;
 if ((HEAP32[i12 + 112 + 12 >> 2] | 0) < (i4 + 6 | 0)) {
  i1 = __Znaj((i4 + 6 | 0) > -1 ? i4 + 6 | 0 : -1) | 0;
  HEAP32[i12 + 112 + 12 >> 2] = i4 + 6;
  i2 = HEAP32[i12 + 112 >> 2] | 0;
  if (!i2) {
   if ((i4 + 5 | 0) > -1) HEAP8[i1 >> 0] = 0;
  } else {
   _memcpy(i1 | 0, i2 | 0, i4 + 1 | 0) | 0;
   __ZdaPv(i2);
  }
  HEAP32[i12 + 112 >> 2] = i1;
  i5 = i1;
 } else i5 = HEAP32[i12 + 112 >> 2] | 0;
 i2 = i5 + i4 | 0;
 HEAP8[i2 >> 0] = HEAP8[297957] | 0;
 HEAP8[i2 + 1 >> 0] = HEAP8[297958] | 0;
 HEAP8[i2 + 2 >> 0] = HEAP8[297959] | 0;
 HEAP8[i2 + 3 >> 0] = HEAP8[297960] | 0;
 HEAP8[i2 + 4 >> 0] = HEAP8[297961] | 0;
 HEAP8[i2 + 5 >> 0] = HEAP8[297962] | 0;
 HEAP32[i12 + 112 + 8 >> 2] = i4 + 5;
 HEAP32[i12 + 112 + 4 >> 2] = (HEAP32[i12 + 112 + 4 >> 2] | 0) + 5;
 if (i3) __ZdaPv(i3);
 HEAP32[i12 + 96 >> 2] = 0;
 i1 = HEAP32[i12 + 64 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i12 + 64 >> 2] = 0;
 i1 = HEAP32[i12 + 48 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i12 + 48 >> 2] = 0;
 i1 = HEAP32[i12 + 80 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i12 + 80 >> 2] = 0;
 __ZNK6String12ReplaceFirstEPKcS1_(i12 + 32 | 0, i12 + 168 | 0, 297963, i5);
 i3 = HEAP32[i12 + 32 >> 2] | 0;
 if (!i3) {
  HEAP32[i12 + 168 + 8 >> 2] = 0;
  HEAP32[i12 + 168 + 4 >> 2] = 0;
  i1 = HEAP32[i12 + 168 >> 2] | 0;
  if (i1) HEAP8[i1 >> 0] = 0;
 } else {
  i4 = HEAP32[i12 + 32 + 8 >> 2] | 0;
  do if ((HEAP32[i12 + 168 + 12 >> 2] | 0) < (i4 + 1 | 0)) {
   if (!(i4 + 1 | 0)) {
    i1 = HEAP32[i12 + 168 >> 2] | 0;
    if (i1) __ZdaPv(i1);
    HEAP32[i12 + 168 >> 2] = 0;
    i1 = 0;
    break;
   }
   i1 = __Znaj((i4 + 1 | 0) > -1 ? i4 + 1 | 0 : -1) | 0;
   HEAP32[i12 + 168 + 12 >> 2] = i4 + 1;
   if ((i4 | 0) > -1) HEAP8[i1 >> 0] = 0;
   i2 = HEAP32[i12 + 168 >> 2] | 0;
   if (i2) __ZdaPv(i2);
   HEAP32[i12 + 168 >> 2] = i1;
  } else i1 = HEAP32[i12 + 168 >> 2] | 0; while (0);
  _memcpy(i1 | 0, i3 | 0, i4 + 1 | 0) | 0;
  HEAP32[i12 + 168 + 8 >> 2] = i4;
  HEAP32[i12 + 168 + 4 >> 2] = HEAP32[i12 + 32 + 4 >> 2];
  __ZdaPv(i3);
 }
 HEAP32[i12 + 32 >> 2] = 0;
 __ZNK6String12ReplaceFirstEPKcS1_(i12 + 16 | 0, i12 + 168 | 0, 297967, i5);
 i3 = HEAP32[i12 + 16 >> 2] | 0;
 if (!i3) {
  HEAP32[i12 + 168 + 8 >> 2] = 0;
  HEAP32[i12 + 168 + 4 >> 2] = 0;
  i1 = HEAP32[i12 + 168 >> 2] | 0;
  if (i1) HEAP8[i1 >> 0] = 0;
 } else {
  i4 = HEAP32[i12 + 16 + 8 >> 2] | 0;
  do if ((HEAP32[i12 + 168 + 12 >> 2] | 0) < (i4 + 1 | 0)) {
   if (!(i4 + 1 | 0)) {
    i1 = HEAP32[i12 + 168 >> 2] | 0;
    if (i1) __ZdaPv(i1);
    HEAP32[i12 + 168 >> 2] = 0;
    i1 = 0;
    break;
   }
   i1 = __Znaj((i4 + 1 | 0) > -1 ? i4 + 1 | 0 : -1) | 0;
   HEAP32[i12 + 168 + 12 >> 2] = i4 + 1;
   if ((i4 | 0) > -1) HEAP8[i1 >> 0] = 0;
   i2 = HEAP32[i12 + 168 >> 2] | 0;
   if (i2) __ZdaPv(i2);
   HEAP32[i12 + 168 >> 2] = i1;
  } else i1 = HEAP32[i12 + 168 >> 2] | 0; while (0);
  _memcpy(i1 | 0, i3 | 0, i4 + 1 | 0) | 0;
  HEAP32[i12 + 168 + 8 >> 2] = i4;
  HEAP32[i12 + 168 + 4 >> 2] = HEAP32[i12 + 16 + 4 >> 2];
  __ZdaPv(i3);
 }
 HEAP32[i12 + 16 >> 2] = 0;
 __Z9File_OpenPKcS0_(i12 + 128 | 0, HEAP32[i12 + 168 >> 2] | 0, 387182);
 if (__ZNK4File6IsOpenEv(i12 + 128 | 0) | 0) __ZN6Shader12LoadFromFileE10ShaderTypeR4FilePKcS4_S4_(i7, i10, i11, i12 + 128 | 0, i8, i6, i9); else {
  HEAP32[i12 >> 2] = HEAP32[i12 + 168 >> 2];
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297973, i12);
  HEAP32[i12 + 8 >> 2] = HEAP32[i12 + 168 >> 2];
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i7, 298020, 298116, 266, -2147024894, 298156, i12 + 8 | 0);
 }
 __ZN4FileD2Ev(i12 + 128 | 0);
 if (i5) __ZdaPv(i5);
 HEAP32[i12 + 112 >> 2] = 0;
 i1 = HEAP32[i12 + 168 >> 2] | 0;
 if (!i1) {
  STACKTOP = i12;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i12;
 return;
}

function _Cubic_To(i16, i3, i5, i4, i6, i2, i1) {
 i16 = i16 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 HEAP32[i16 + 52 >> 2] = i16 + 184;
 HEAP32[i16 + 208 >> 2] = HEAP32[i16 + 68 >> 2];
 i15 = HEAP32[i16 + 72 >> 2] | 0;
 HEAP32[i16 + 212 >> 2] = i15;
 HEAP32[i16 + 200 >> 2] = i3;
 HEAP32[i16 + 204 >> 2] = i5;
 HEAP32[i16 + 192 >> 2] = i4;
 HEAP32[i16 + 196 >> 2] = i6;
 HEAP32[i16 + 184 >> 2] = i2;
 HEAP32[i16 + 188 >> 2] = i1;
 i4 = i16 + 184 | 0;
 L1 : while (1) {
  i10 = i4 + 28 | 0;
  i11 = i4 + 20 | 0;
  i12 = i4 + 12 | 0;
  i14 = i4 + 4 | 0;
  i13 = (i15 | 0) <= (i1 | 0);
  i8 = (i5 | 0) > (i6 | 0);
  do if (!(((i8 ? i6 : i5) | 0) < ((i13 ? i15 : i1) | 0) ? 1 : ((i8 ? i5 : i6) | 0) > ((i13 ? i1 : i15) | 0))) {
   if ((i15 | 0) == (i1 | 0)) {
    HEAP32[i16 + 52 >> 2] = i4 + -24;
    break;
   }
   i9 = i13 ? 1 : 2;
   i4 = HEAP32[i16 + 100 >> 2] | 0;
   if ((i4 | 0) != (i9 | 0)) {
    i3 = HEAP32[i16 + 4 >> 2] | 0;
    if (i13) i8 = ((i15 + -1 + i3 & 0 - i3) - i15 | 0) >= (HEAP32[i16 + 8 >> 2] | 0); else i8 = (i3 + -1 & i15 | 0) >= (HEAP32[i16 + 8 >> 2] | 0);
    if (i4) {
     i3 = HEAP32[i16 + 40 >> 2] | 0;
     i7 = HEAP32[i16 + 88 >> 2] | 0;
     i4 = i3 - (HEAP32[i7 + 8 >> 2] | 0) | 0;
     if ((i4 | 0) < 0) {
      i3 = 12;
      break L1;
     }
     if ((i4 | 0) > 0) {
      HEAP32[i7 + 16 >> 2] = i4 >> 2;
      do if (i8) {
       i4 = HEAP32[i7 + 12 >> 2] | 0;
       if (!(i4 & 8)) {
        HEAP32[i7 + 12 >> 2] = i4 | 32;
        break;
       } else {
        HEAP32[i7 + 12 >> 2] = i4 | 16;
        break;
       }
      } while (0);
      HEAP32[i16 + 88 >> 2] = i3;
      HEAP32[i16 + 40 >> 2] = i3 + 32;
      HEAP32[i3 + 16 >> 2] = 0;
      HEAP32[i3 + 8 >> 2] = i3 + 32;
      HEAP32[i7 + 28 >> 2] = i3;
      HEAP16[i16 + 84 >> 1] = (HEAP16[i16 + 84 >> 1] | 0) + 1 << 16 >> 16;
      i3 = i3 + 32 | 0;
     }
     if (i3 >>> 0 >= (HEAP32[i16 + 36 >> 2] | 0) >>> 0) {
      i3 = 20;
      break L1;
     }
     HEAP8[i16 + 87 >> 0] = 0;
    }
    if (!(HEAP32[i16 + 92 >> 2] | 0)) {
     i3 = HEAP32[i16 + 40 >> 2] | 0;
     HEAP32[i16 + 88 >> 2] = i3;
     HEAP32[i16 + 92 >> 2] = i3;
     HEAP32[i16 + 40 >> 2] = i3 + 32;
     i3 = i3 + 32 | 0;
    } else i3 = HEAP32[i16 + 40 >> 2] | 0;
    if (i3 >>> 0 >= (HEAP32[i16 + 36 >> 2] | 0) >>> 0) {
     i3 = 26;
     break L1;
    }
    i4 = HEAP32[i16 + 88 >> 2] | 0;
    HEAP32[i4 + 20 >> 2] = 0;
    HEAP32[i4 + 16 >> 2] = 0;
    HEAP32[i4 + 8 >> 2] = i3;
    HEAP32[i4 + 4 >> 2] = 0;
    HEAP32[i4 + 28 >> 2] = 0;
    i3 = HEAPU8[i16 + 180 >> 0] | 0;
    HEAP32[i4 + 12 >> 2] = i3;
    if (i13) {
     HEAP32[i4 + 12 >> 2] = i3 | 8;
     if (i8) HEAP32[i4 + 12 >> 2] = i3 | 40;
    } else if (i8) HEAP32[i4 + 12 >> 2] = i3 | 16;
    if (!(HEAP32[i16 + 96 >> 2] | 0)) HEAP32[i16 + 96 >> 2] = i4;
    HEAP32[i16 + 100 >> 2] = i9;
    HEAP8[i16 + 86 >> 0] = 1;
    HEAP8[i16 + 87 >> 0] = 0;
   }
   i3 = HEAP32[i16 + 76 >> 2] | 0;
   i4 = HEAP32[i16 + 80 >> 2] | 0;
   if (i13) if (!((_Bezier_Up(i16, 3, 81, i3, i4) | 0) << 24 >> 24)) break; else {
    i1 = 1;
    i3 = 44;
    break L1;
   }
   HEAP32[i14 >> 2] = 0 - i1;
   HEAP32[i12 >> 2] = 0 - i6;
   HEAP32[i11 >> 2] = 0 - i5;
   HEAP32[i10 >> 2] = 0 - i15;
   i15 = HEAP8[i16 + 86 >> 0] | 0;
   i3 = _Bezier_Up(i16, 3, 81, 0 - i4 | 0, 0 - i3 | 0) | 0;
   if (i15 << 24 >> 24 != 0 ? (HEAP8[i16 + 86 >> 0] | 0) == 0 : 0) {
    i15 = (HEAP32[i16 + 88 >> 2] | 0) + 20 | 0;
    HEAP32[i15 >> 2] = 0 - (HEAP32[i15 >> 2] | 0);
   }
   HEAP32[i14 >> 2] = 0 - (HEAP32[i14 >> 2] | 0);
   if (i3 << 24 >> 24) {
    i1 = 1;
    i3 = 44;
    break L1;
   }
  } else {
   i14 = i4 + 24 | 0;
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i4 + 48 >> 2] = i13;
   i17 = i4 + 8 | 0;
   i9 = i4 + 16 | 0;
   i7 = HEAP32[i9 >> 2] | 0;
   i3 = (HEAP32[i17 >> 2] | 0) + 1 | 0;
   i8 = i2 + i3 >> 1;
   HEAP32[i17 >> 2] = i8;
   HEAP32[i4 + 40 >> 2] = i13 + 1 + i7 >> 1;
   HEAP32[i9 >> 2] = (i3 + i7 >> 1) + 1 + i8 >> 1;
   i13 = (i3 + i7 >> 1) + 1 + (i13 + 1 + i7 >> 1) >> 1;
   HEAP32[i4 + 32 >> 2] = i13;
   HEAP32[i14 >> 2] = ((i3 + i7 >> 1) + 1 + i8 >> 1) + 1 + i13 >> 1;
   HEAP32[i4 + 52 >> 2] = i15;
   i14 = i6 + 1 | 0;
   i13 = i1 + i14 >> 1;
   HEAP32[i12 >> 2] = i13;
   i15 = i15 + 1 + i5 >> 1;
   HEAP32[i4 + 44 >> 2] = i15;
   i14 = (i14 + i5 >> 1) + 1 | 0;
   HEAP32[i11 >> 2] = i14 + i13 >> 1;
   HEAP32[i4 + 36 >> 2] = i14 + i15 >> 1;
   HEAP32[i10 >> 2] = (i14 + i13 >> 1) + 1 + (i14 + i15 >> 1) >> 1;
   HEAP32[i16 + 52 >> 2] = i4 + 24;
  } while (0);
  i3 = HEAP32[i16 + 52 >> 2] | 0;
  if (i3 >>> 0 < (i16 + 184 | 0) >>> 0) {
   i3 = 43;
   break;
  }
  i4 = i3;
  i15 = HEAP32[i3 + 28 >> 2] | 0;
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  i5 = HEAP32[i3 + 20 >> 2] | 0;
  i6 = HEAP32[i3 + 12 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
 }
 if ((i3 | 0) == 12) {
  HEAP32[i16 + 44 >> 2] = 99;
  i17 = 1;
  return i17 | 0;
 } else if ((i3 | 0) == 20) {
  HEAP32[i16 + 44 >> 2] = 98;
  i17 = 1;
  return i17 | 0;
 } else if ((i3 | 0) == 26) {
  HEAP32[i16 + 44 >> 2] = 98;
  i17 = 1;
  return i17 | 0;
 } else if ((i3 | 0) == 43) {
  HEAP32[i16 + 68 >> 2] = i2;
  HEAP32[i16 + 72 >> 2] = i1;
  i17 = 0;
  return i17 | 0;
 } else if ((i3 | 0) == 44) return i1 | 0;
 return 0;
}

function __ZNK5Image11CroppedCopyEiiii(i5, i3, i10, i1, i11, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = (HEAP32[i3 + 16 >> 2] | 0) - i10 - i1 | 0;
 i9 = (HEAP32[i3 + 20 >> 2] | 0) - i11 - i2 | 0;
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP8[i5 + 8 >> 0] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 12 + 4 >> 2] = 0;
 HEAP32[i5 + 12 + 8 >> 2] = 0;
 HEAP32[i5 + 12 + 12 >> 2] = 0;
 HEAP32[i5 + 12 + 16 >> 2] = 0;
 HEAP32[i5 + 12 + 20 >> 2] = 0;
 if (!(__ZN5Image9CreateNewEii13TextureFormat(i5, i4, i9, i1) | 0)) {
  i7 = __Z21TextureFormatToString13TextureFormat(i1) | 0;
  HEAP32[i12 >> 2] = i4;
  HEAP32[i12 + 4 >> 2] = i9;
  HEAP32[i12 + 8 >> 2] = i7;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303292, i12);
 }
 if ((i4 | 0) < 1 | (i9 | 0) < 1) {
  STACKTOP = i12;
  return;
 }
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i6 = HEAP32[i3 + 12 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i7 = HEAP32[i5 + 12 >> 2] | 0;
 L7 : do if ((i1 | 0) < 59) switch (i1 | 0) {
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i1 = 16;
   break L7;
  }
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
  {
   i8 = 8;
   break L7;
  }
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
  {
   i8 = 10;
   break L7;
  }
 case 8:
 case 7:
 case 6:
 case 5:
  {
   i1 = 12;
   break L7;
  }
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
  {
   i1 = 8;
   break L7;
  }
 default:
  {
   i8 = 13;
   break L7;
  }
 } else {
  L13 : do if ((i1 | 0) >= 88) {
   if ((i1 | 0) >= 1048578) {
    if ((i1 | 0) < 4194324) switch (i1 | 0) {
    case 1048582:
     {
      i8 = 8;
      break L7;
     }
    case 1048583:
    case 1048579:
    case 1048578:
    case 1048580:
     {
      i8 = 10;
      break L7;
     }
    case 1048584:
    case 1048581:
     {
      i8 = 11;
      break L13;
     }
    default:
     {
      i8 = 13;
      break L7;
     }
    }
    switch (i1 | 0) {
    case 4194339:
    case 4194337:
     {
      i8 = 8;
      break L7;
     }
    case 4194334:
    case 4194333:
     {
      i8 = 10;
      break L7;
     }
    case 4194356:
    case 4194354:
    case 4194331:
     {
      i8 = 11;
      break L13;
     }
    case 4194324:
     break;
    default:
     {
      i8 = 13;
      break L7;
     }
    }
    i1 = 3;
    break L7;
   }
   if ((i1 | 0) < 95) switch (i1 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
    {
     i8 = 8;
     break L7;
    }
   case 94:
    break L13;
   default:
    {
     i8 = 13;
     break L7;
    }
   }
   if ((i1 | 0) < 99) switch (i1 | 0) {
   case 98:
   case 97:
   case 96:
   case 95:
    break L13;
   default:
    {
     i8 = 13;
     break L7;
    }
   }
   if ((i1 | 0) < 1048576) switch (i1 | 0) {
   case 115:
    {
     i8 = 10;
     break L7;
    }
   case 99:
    break L13;
   default:
    {
     i8 = 13;
     break L7;
    }
   } else switch (i1 | 0) {
   case 1048577:
    {
     i8 = 10;
     break L7;
    }
   case 1048576:
    break L13;
   default:
    {
     i8 = 13;
     break L7;
    }
   }
  } else {
   switch (i1 | 0) {
   case 87:
   case 69:
   case 68:
   case 67:
    {
     i8 = 8;
     break L7;
    }
   case 86:
   case 85:
   case 59:
    {
     i8 = 10;
     break L7;
    }
   case 84:
   case 83:
   case 82:
   case 78:
   case 77:
   case 76:
   case 75:
   case 74:
   case 73:
   case 81:
   case 80:
   case 79:
   case 72:
   case 71:
   case 70:
    break L13;
   case 65:
   case 64:
   case 63:
   case 62:
   case 61:
   case 60:
    {
     i8 = 11;
     break L13;
    }
   case 66:
    break;
   default:
    {
     i8 = 13;
     break L7;
    }
   }
   i1 = 0;
   break L7;
  } while (0);
  if ((i8 | 0) == 11) {
   i1 = 1;
   break;
  }
  HEAP32[i12 + 16 >> 2] = __Z21TextureFormatToString13TextureFormat(i1) | 0;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303824, i12 + 16 | 0);
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303885, i12 + 24 | 0);
  if (!((HEAP8[i5 + 8 >> 0] | 0) == 0 | (i3 | 0) == 0)) __ZdaPv(i3);
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP8[i5 + 8 >> 0] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  HEAP32[i5 + 12 + 4 >> 2] = 0;
  HEAP32[i5 + 12 + 8 >> 2] = 0;
  HEAP32[i5 + 12 + 12 >> 2] = 0;
  HEAP32[i5 + 12 + 16 >> 2] = 0;
  HEAP32[i5 + 12 + 20 >> 2] = 0;
  STACKTOP = i12;
  return;
 } while (0);
 if ((i8 | 0) == 8) i1 = 4; else if ((i8 | 0) == 10) i1 = 2; else if ((i8 | 0) == 13) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i12 + 32 | 0);
  i1 = 0;
 }
 i4 = Math_imul(i1, i4) | 0;
 if ((i9 | 0) <= 0) {
  STACKTOP = i12;
  return;
 }
 i1 = i2 + ((Math_imul(i1, i10) | 0) + (Math_imul(i6, i11) | 0)) | 0;
 i2 = 0;
 while (1) {
  _memcpy(i3 | 0, i1 | 0, i4 | 0) | 0;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i9 | 0)) break; else {
   i3 = i3 + i7 | 0;
   i1 = i1 + i6 | 0;
  }
 }
 STACKTOP = i12;
 return;
}

function _cid_load_glyph(i14, i15) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = HEAP32[i14 + 4 >> 2] | 0;
 i9 = HEAP32[i10 + 328 >> 2] | 0;
 HEAP32[i16 + 24 >> 2] = 0;
 i11 = HEAP32[i10 + 100 >> 2] | 0;
 i12 = HEAP32[i10 + 136 >> 2] | 0;
 i13 = HEAP32[(HEAP32[i10 + 128 >> 2] | 0) + 52 >> 2] | 0;
 if (i13) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i13 >> 2] >> 2] & 127](HEAP32[i13 + 4 >> 2] | 0, i15, i16 + 16 | 0) | 0;
  HEAP32[i16 + 24 >> 2] = i1;
  if (i1) {
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i4 = HEAP32[i10 + 288 >> 2] | 0;
  if (!((i4 & 255) << 24 >> 24)) i1 = 0; else {
   i2 = i4 & 255;
   i3 = HEAP32[i16 + 16 >> 2] | 0;
   i1 = 0;
   while (1) {
    i1 = HEAPU8[i3 >> 0] | 0 | i1 << 8;
    i2 = i2 + -1 << 24 >> 24;
    if (!(i2 << 24 >> 24)) break; else i3 = i3 + 1 | 0;
   }
  }
  i3 = HEAP32[i16 + 16 + 4 >> 2] | 0;
  if (i3) {
   i2 = _ft_mem_alloc(i11, i3 - i4 | 0, i16 + 24 | 0) | 0;
   if (!(HEAP32[i16 + 24 >> 2] | 0)) {
    _memcpy(i2 | 0, (HEAP32[i16 + 16 >> 2] | 0) + (HEAP32[i10 + 288 >> 2] | 0) | 0, i3 - i4 | 0) | 0;
    i4 = i3 - i4 | 0;
   } else i4 = i3 - i4 | 0;
  } else {
   i2 = 0;
   i4 = 0;
  }
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i13 + 4 >> 2] | 0, i16 + 16 | 0);
  i3 = HEAP32[i16 + 24 >> 2] | 0;
  if (!i3) i3 = i4; else {
   i15 = i3;
   STACKTOP = i16;
   return i15 | 0;
  }
 } else {
  i1 = (HEAP32[i10 + 292 >> 2] | 0) + (HEAP32[i10 + 288 >> 2] | 0) | 0;
  i2 = _FT_Stream_Seek(i9, (HEAP32[i10 + 284 >> 2] | 0) + (HEAP32[i10 + 308 >> 2] | 0) + (Math_imul(i1, i15) | 0) | 0) | 0;
  HEAP32[i16 + 24 >> 2] = i2;
  if (i2) {
   i15 = i2;
   STACKTOP = i16;
   return i15 | 0;
  }
  i1 = _FT_Stream_EnterFrame(i9, i1 << 1) | 0;
  HEAP32[i16 + 24 >> 2] = i1;
  if (i1) {
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i7 = HEAP32[i10 + 288 >> 2] | 0;
  i3 = HEAP32[i9 + 32 >> 2] | 0;
  if (!((i7 & 255) << 24 >> 24)) i8 = 0; else {
   i2 = i7 & 255;
   i4 = i3;
   i1 = 0;
   while (1) {
    i1 = HEAPU8[i4 >> 0] | 0 | i1 << 8;
    i2 = i2 + -1 << 24 >> 24;
    if (!(i2 << 24 >> 24)) break; else i4 = i4 + 1 | 0;
   }
   i3 = i3 + ((i7 + 255 & 255) + 1) | 0;
   i8 = i1;
  }
  i6 = HEAP32[i10 + 292 >> 2] | 0;
  if ((i6 & 255) << 24 >> 24) {
   i1 = i6 & 255;
   i2 = i3;
   i4 = 0;
   while (1) {
    i4 = HEAPU8[i2 >> 0] | 0 | i4 << 8;
    i1 = i1 + -1 << 24 >> 24;
    if (!(i1 << 24 >> 24)) break; else i2 = i2 + 1 | 0;
   }
   if (!((i6 & 255) << 24 >> 24)) i1 = 0; else {
    i5 = i6 & 255;
    i2 = i3 + ((i6 + 255 & 255) + 1 + i7) | 0;
    i1 = 0;
    while (1) {
     i1 = HEAPU8[i2 >> 0] | 0 | i1 << 8;
     i5 = i5 + -1 << 24 >> 24;
     if (!(i5 << 24 >> 24)) break; else i2 = i2 + 1 | 0;
    }
   }
  } else {
   i4 = 0;
   i1 = 0;
  }
  i3 = i1 - i4 | 0;
  _FT_Stream_ExitFrame(i9);
  if (i8 >>> 0 >= (HEAP32[i10 + 300 >> 2] | 0) >>> 0) {
   HEAP32[i16 + 24 >> 2] = 9;
   i15 = 9;
   STACKTOP = i16;
   return i15 | 0;
  }
  if ((i1 | 0) == (i4 | 0)) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  i2 = _ft_mem_alloc(i11, i3, i16 + 24 | 0) | 0;
  i1 = HEAP32[i16 + 24 >> 2] | 0;
  if (i1) {
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i1 = _FT_Stream_ReadAt(i9, (HEAP32[i10 + 308 >> 2] | 0) + i4 | 0, i2, i3) | 0;
  HEAP32[i16 + 24 >> 2] = i1;
  if (!i1) i1 = i8; else {
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 i7 = HEAP32[i10 + 316 >> 2] | 0;
 HEAP32[i14 + 1364 >> 2] = HEAP32[i7 + (i1 << 3) >> 2];
 HEAP32[i14 + 1368 >> 2] = HEAP32[i7 + (i1 << 3) + 4 >> 2];
 HEAP32[i14 + 1372 >> 2] = 0;
 i10 = HEAP32[i10 + 304 >> 2] | 0;
 i7 = i10 + (i1 * 252 | 0) + 216 | 0;
 HEAP32[i14 + 1376 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i14 + 1376 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i14 + 1376 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i14 + 1376 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 i7 = i10 + (i1 * 252 | 0) + 232 | 0;
 i8 = HEAP32[i7 + 4 >> 2] | 0;
 HEAP32[i14 + 1392 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i14 + 1392 + 4 >> 2] = i8;
 i10 = HEAP32[i10 + (i1 * 252 | 0) + 4 >> 2] | 0;
 HEAP32[i14 + 1360 >> 2] = i10;
 i1 = (i10 | 0) > -1 ? i10 : 0;
 if ((i10 | 0) > -1) FUNCTION_TABLE_viii[HEAP32[i12 + 16 >> 2] & 31](i2, i3, 4330);
 HEAP32[i16 + 24 >> 2] = FUNCTION_TABLE_iiii[HEAP32[i14 + 1484 >> 2] & 127](i14, i2 + i1 | 0, i3 - i1 | 0) | 0;
 _ft_mem_free(i11, i2);
 i1 = HEAP32[i16 + 24 >> 2] | 0;
 if (!((i13 | 0) != 0 & (i1 | 0) == 0)) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!(HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] | 0)) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i16 >> 2] = (_FT_RoundFix(HEAP32[i14 + 32 >> 2] | 0) | 0) >> 16;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = (_FT_RoundFix(HEAP32[i14 + 40 >> 2] | 0) | 0) >> 16;
 HEAP32[i16 + 12 >> 2] = (_FT_RoundFix(HEAP32[i14 + 44 >> 2] | 0) | 0) >> 16;
 i15 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 8 >> 2] & 63](HEAP32[i13 + 4 >> 2] | 0, i15, 0, i16) | 0;
 HEAP32[i16 + 24 >> 2] = i15;
 HEAP32[i14 + 32 >> 2] = HEAP32[i16 >> 2] << 16;
 HEAP32[i14 + 40 >> 2] = HEAP32[i16 + 8 >> 2] << 16;
 HEAP32[i14 + 44 >> 2] = HEAP32[i16 + 12 >> 2] << 16;
 STACKTOP = i16;
 return i15 | 0;
}

function _tt_cmap4_char_map_binary(i20, i21, i18) {
 i20 = i20 | 0;
 i21 = i21 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0;
 i17 = HEAP32[i20 + 16 >> 2] | 0;
 i19 = HEAPU8[i17 + 7 >> 0] & 254 | HEAPU8[i17 + 6 >> 0] << 8;
 if (!i19) {
  i21 = 0;
  return i21 | 0;
 }
 i2 = (HEAP32[i21 >> 2] | 0) + (i18 << 24 >> 24 != 0 & 1) | 0;
 i1 = 65535;
 i4 = i19 >>> 1;
 i5 = i19 >>> 1;
 i6 = 0;
 L4 : while (1) {
  i3 = i5;
  while (1) {
   if (i6 >>> 0 >= i4 >>> 0) {
    i4 = i1;
    i1 = 0;
    break L4;
   }
   i3 = (i4 + i6 | 0) >>> 1;
   i5 = i3 << 1;
   i16 = HEAPU8[i17 + (i5 + 14) >> 0] << 8 | HEAPU8[i17 + (i5 + 15) >> 0];
   i5 = i5 + 14 + (i19 + 2) | 0;
   i1 = HEAPU8[i17 + i5 >> 0] << 8 | HEAPU8[i17 + (i5 | 1) >> 0];
   if (i2 >>> 0 >= i1 >>> 0) break; else {
    i1 = i16;
    i4 = i3;
   }
  }
  if (i2 >>> 0 <= i16 >>> 0) {
   i9 = 8;
   break;
  }
  i1 = i16;
  i5 = i3;
  i6 = i3 + 1 | 0;
 }
 do if ((i9 | 0) == 8) {
  i14 = HEAP8[i17 + (i5 + i19) >> 0] << 8 | HEAPU8[i17 + (i5 + i19 | 1) >> 0];
  i8 = i17 + (i5 + i19 + i19) | 0;
  i15 = HEAPU8[i8 >> 0] << 8 | HEAPU8[i17 + (i5 + i19 + i19 | 1) >> 0];
  if ((i16 | 0) == 65535 & (i3 >>> 0 >= ((i19 >>> 1) + -1 | 0) >>> 0 & (i1 | 0) == 65535)) {
   i4 = HEAP32[i20 >> 2] | 0;
   if (!i15) {
    i5 = i14;
    i6 = 0;
   } else {
    i6 = (i17 + (i5 + i19 + i19 + 2 + i15) | 0) >>> 0 > ((HEAP32[i4 + 500 >> 2] | 0) + (HEAP32[i4 + 504 >> 2] | 0) | 0) >>> 0;
    i5 = i6 ? 1 : i14;
    i6 = i6 ? 0 : i15;
   }
  } else {
   i5 = i14;
   i6 = i15;
  }
  i4 = (i6 | 0) == 65535;
  if (!(HEAP32[i20 + 20 >> 2] & 2)) if (i4) {
   i4 = i16;
   i1 = 0;
   break;
  } else {
   i7 = i16;
   i4 = i8;
  } else {
   i4 = i4 ? i3 + 1 | 0 : i3;
   L20 : do if (!i3) {
    i10 = i16;
    i7 = 0;
    i9 = i4;
    i4 = i8;
    i12 = i1;
   } else {
    i10 = i16;
    i13 = i3;
    i9 = i4;
    i4 = i8;
    i12 = i1;
    while (1) {
     i7 = i13;
     i13 = i13 + -1 | 0;
     i8 = i13 << 1;
     i11 = HEAPU8[i17 + (i8 + 14) >> 0] << 8 | HEAPU8[i17 + (i8 + 15) >> 0];
     if (i2 >>> 0 > i11 >>> 0) break L20;
     i6 = i8 + 14 + (i19 + 2) | 0;
     i12 = HEAPU8[i17 + i6 >> 0] << 8 | HEAPU8[i17 + (i6 | 1) >> 0];
     i5 = HEAP8[i17 + (i6 + i19) >> 0] << 8 | HEAPU8[i17 + (i6 + i19 | 1) >> 0];
     i4 = i17 + (i6 + i19 + i19) | 0;
     i6 = HEAPU8[i4 >> 0] << 8 | HEAPU8[i17 + (i6 + i19 + i19 | 1) >> 0];
     i9 = (i6 | 0) == 65535 ? i9 : i13;
     if (!i13) {
      i10 = i11;
      i7 = 0;
      break;
     } else i10 = i11;
    }
   } while (0);
   if ((i9 | 0) == (i3 + 1 | 0)) {
    i9 = (i7 | 0) == (i3 | 0);
    i4 = i9 ? i10 : i16;
    if ((i3 + 1 | 0) >>> 0 >= i19 >>> 1 >>> 0) {
     i1 = 0;
     break;
    }
    i10 = i9 ? i5 : i14;
    i7 = i3 + 1 | 0;
    i8 = i3;
    i6 = i9 ? i6 : i15;
    i1 = i9 ? i12 : i1;
    while (1) {
     i5 = i7 << 1;
     i9 = i5 + 14 + (i19 + 2) | 0;
     i11 = HEAPU8[i17 + i9 >> 0] << 8 | HEAPU8[i17 + (i9 | 1) >> 0];
     if (i2 >>> 0 < i11 >>> 0) {
      i5 = i10;
      i10 = i4;
      i4 = i17 + i9 | 0;
      break;
     }
     i4 = HEAPU8[i17 + (i5 + 14) >> 0] << 8 | HEAPU8[i17 + (i5 + 15) >> 0];
     i1 = HEAP8[i17 + (i9 + i19) >> 0] << 8 | HEAPU8[i17 + (i9 + i19 | 1) >> 0];
     i6 = HEAPU8[i17 + (i9 + i19 + i19) >> 0] << 8 | HEAPU8[i17 + (i9 + i19 + i19 | 1) >> 0];
     i8 = (i6 | 0) == 65535 ? i8 : i7;
     i7 = i7 + 1 | 0;
     if (i7 >>> 0 < i19 >>> 1 >>> 0) {
      i10 = i1;
      i1 = i11;
     } else {
      i5 = i1;
      i10 = i4;
      i4 = i17 + (i9 + i19 + i19) | 0;
      i1 = i11;
      break;
     }
    }
    i7 = i7 + -1 | 0;
    if ((i8 | 0) == (i3 | 0)) {
     i4 = i10;
     i1 = 0;
     i3 = i7;
     break;
    } else i3 = i8;
   } else {
    i3 = i9;
    i1 = i12;
   }
   if ((i3 | 0) == (i7 | 0)) i7 = i10; else {
    i7 = i3 << 1;
    i1 = i7 + 14 + (i19 + 2) | 0;
    i5 = HEAP8[i17 + (i1 + i19) >> 0] << 8 | HEAPU8[i17 + (i1 + i19 | 1) >> 0];
    i7 = HEAPU8[i17 + (i7 + 14) >> 0] << 8 | HEAPU8[i17 + (i7 + 15) >> 0];
    i6 = HEAPU8[i17 + (i1 + i19 + i19) >> 0] << 8 | HEAPU8[i17 + (i1 + i19 + i19 | 1) >> 0];
    i4 = i17 + (i1 + i19 + i19) | 0;
    i1 = HEAPU8[i17 + i1 >> 0] << 8 | HEAPU8[i17 + (i1 | 1) >> 0];
   }
  }
  if (!i6) {
   i4 = i7;
   i1 = i5 + i2 & 65535;
   break;
  }
  i1 = (i2 - i1 << 1) + i6 | 0;
  i1 = HEAPU8[i4 + i1 >> 0] << 8 | HEAPU8[i4 + (i1 + 1) >> 0];
  if (!i1) {
   i4 = i7;
   i1 = 0;
  } else {
   i4 = i7;
   i1 = i1 + i5 & 65535;
  }
 } while (0);
 if (!(i18 << 24 >> 24)) {
  i21 = i1;
  return i21 | 0;
 }
 if (i2 >>> 0 > i4 >>> 0) {
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i19 >>> 1 | 0)) {
   i21 = 0;
   return i21 | 0;
  }
 }
 if (_tt_cmap4_set_range(i20, i3) | 0) {
  if (!i1) {
   i21 = 0;
   return i21 | 0;
  }
  HEAP32[i21 >> 2] = i2;
  i21 = i1;
  return i21 | 0;
 }
 HEAP32[i20 + 24 >> 2] = i2;
 do if (!i1) {
  HEAP32[i20 + 24 >> 2] = i2;
  _tt_cmap4_next(i20);
  i1 = HEAP32[i20 + 28 >> 2] | 0;
  if (!i1) {
   i21 = 0;
   return i21 | 0;
  } else {
   i2 = HEAP32[i20 + 24 >> 2] | 0;
   break;
  }
 } else HEAP32[i20 + 28 >> 2] = i1; while (0);
 HEAP32[i21 >> 2] = i2;
 i21 = i1;
 return i21 | 0;
}

function _af_autofitter_load_glyph(i16, i2, i1, i14, i15) {
 i16 = i16 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = HEAP32[i11 + 88 >> 2] | 0;
 if (!i1) {
  i16 = 6;
  STACKTOP = i17;
  return i16 | 0;
 };
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i17 + 12 >> 2] = 0;
 HEAP32[i17 + 16 >> 2] = 0;
 HEAP32[i17 >> 2] = i11;
 HEAP32[i17 + 4 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i17 + 12 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i17 + 16 >> 2] = 0;
 HEAP32[i17 + 20 >> 2] = i15 >>> 16 & 15;
 HEAP32[i17 + 24 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = i11;
 HEAP32[i16 + 16 >> 2] = HEAP32[i11 + 116 >> 2];
 _FT_GlyphLoader_Rewind(HEAP32[i16 + 20 >> 2] | 0);
 i1 = HEAP32[i16 + 16 >> 2] | 0;
 if (!i1) {
  i10 = _ft_mem_alloc(HEAP32[i11 + 100 >> 2] | 0, (HEAP32[i11 + 16 >> 2] | 0) + 28 | 0, i17 + 28 | 0) | 0;
  i1 = HEAP32[i17 + 28 >> 2] | 0;
  if (i1) {
   HEAP32[i16 + 16 >> 2] = i10;
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  }
  HEAP32[i10 >> 2] = i11;
  i6 = HEAP32[i11 + 16 >> 2] | 0;
  HEAP32[i10 + 4 >> 2] = i6;
  HEAP32[i10 + 8 >> 2] = i10 + 28;
  i9 = HEAP32[i11 + 92 >> 2] | 0;
  _memset(i10 + 28 | 0, 127, i6 | 0) | 0;
  if (!(_FT_Select_Charmap(i11, 1970170211) | 0)) {
   i6 = 0;
   while (1) {
    i1 = HEAP32[(HEAP32[273968 + (i6 << 2) >> 2] | 0) + 4 >> 2] | 0;
    if ((i1 | 0) != 0 ? (i7 = HEAP32[i1 >> 2] | 0, (i7 | 0) != 0) : 0) {
     i5 = i6 & 255;
     i3 = i7;
     do {
      i2 = _FT_Get_Char_Index(i11, i3) | 0;
      HEAP32[i17 + 32 >> 2] = i2;
      if (((i2 | 0) != 0 ? i2 >>> 0 < (HEAP32[i10 + 4 >> 2] | 0) >>> 0 : 0) ? (HEAP8[i10 + (i2 + 28) >> 0] | 0) == 127 : 0) HEAP8[i10 + (i2 + 28) >> 0] = i5;
      i4 = i1 + 4 | 0;
      i2 = _FT_Get_Next_Char(i11, i3, i17 + 32 | 0) | 0;
      i3 = HEAP32[i17 + 32 >> 2] | 0;
      L23 : do if (i3) do {
       if (i2 >>> 0 > (HEAP32[i4 >> 2] | 0) >>> 0) break L23;
       if (i3 >>> 0 < (HEAP32[i10 + 4 >> 2] | 0) >>> 0 ? (i8 = i10 + (i3 + 28) | 0, (HEAP8[i8 >> 0] | 0) == 127) : 0) HEAP8[i8 >> 0] = i5;
       i2 = _FT_Get_Next_Char(i11, i2, i17 + 32 | 0) | 0;
       i3 = HEAP32[i17 + 32 >> 2] | 0;
      } while ((i3 | 0) != 0); while (0);
      i1 = i1 + 8 | 0;
      i3 = HEAP32[i1 >> 2] | 0;
     } while ((i3 | 0) != 0);
    }
    i6 = i6 + 1 | 0;
    if ((i6 | 0) == 4) {
     i2 = 48;
     break;
    }
   }
   do {
    i1 = _FT_Get_Char_Index(i11, i2) | 0;
    if ((i1 | 0) != 0 ? i1 >>> 0 < (HEAP32[i10 + 4 >> 2] | 0) >>> 0 : 0) HEAP8[i10 + (i1 + 28) >> 0] = HEAPU8[i10 + (i1 + 28) >> 0] | 128;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 58);
  }
  i1 = HEAP32[i10 + 4 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i4 = 0;
   do {
    i2 = i10 + (i4 + 28) | 0;
    i3 = HEAPU8[i2 >> 0] | 0;
    if ((i3 & 127 | 0) == 127) {
     HEAP8[i2 >> 0] = i3 & 128 | 2;
     i1 = HEAP32[i10 + 4 >> 2] | 0;
    }
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (i1 | 0));
  }
  _FT_Set_Charmap(i11, i9) | 0;
  HEAP32[i16 + 16 >> 2] = i10;
  HEAP32[i11 + 116 >> 2] = i10;
  HEAP32[i11 + 120 >> 2] = 74;
  i2 = i10;
 } else i2 = i1;
 HEAP32[i17 + 32 >> 2] = 0;
 L48 : do if ((HEAP32[i2 + 4 >> 2] | 0) >>> 0 > i14 >>> 0) {
  i3 = HEAP32[273968 + ((HEAPU8[(HEAP32[i2 + 8 >> 2] | 0) + i14 >> 0] & 127) << 2) >> 2] | 0;
  i1 = HEAP32[i2 + 12 + (HEAP32[i3 >> 2] << 2) >> 2] | 0;
  do if (!i1) {
   i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 100 >> 2] | 0;
   i5 = _ft_mem_alloc(i4, HEAP32[i3 + 8 >> 2] | 0, i17 + 32 | 0) | 0;
   i1 = HEAP32[i17 + 32 >> 2] | 0;
   if (i1) break L48;
   HEAP32[i5 >> 2] = i3;
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) != 0 ? (i11 = FUNCTION_TABLE_iii[i1 & 255](i5, HEAP32[i2 >> 2] | 0) | 0, HEAP32[i17 + 32 >> 2] = i11, (i11 | 0) != 0) : 0) {
    i1 = HEAP32[i3 + 20 >> 2] | 0;
    if (i1) FUNCTION_TABLE_vi[i1 & 127](i5);
    _ft_mem_free(i4, i5);
    i1 = HEAP32[i17 + 32 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     break;
    }
    STACKTOP = i17;
    return i1 | 0;
   }
   HEAP32[i2 + 12 + (HEAP32[i3 >> 2] << 2) >> 2] = i5;
   i1 = i5;
   i12 = 39;
  } else i12 = 39; while (0);
  HEAP32[i16 + 144 >> 2] = i1;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i2 + 16 >> 2] | 0;
  if (!i3) {
   HEAP32[i1 + 4 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i1 + 4 + 4 >> 2] = HEAP32[i17 + 4 >> 2];
   HEAP32[i1 + 4 + 8 >> 2] = HEAP32[i17 + 8 >> 2];
   HEAP32[i1 + 4 + 12 >> 2] = HEAP32[i17 + 12 >> 2];
   HEAP32[i1 + 4 + 16 >> 2] = HEAP32[i17 + 16 >> 2];
   HEAP32[i1 + 4 + 20 >> 2] = HEAP32[i17 + 20 >> 2];
   HEAP32[i1 + 4 + 24 >> 2] = HEAP32[i17 + 24 >> 2];
  } else {
   FUNCTION_TABLE_vii[i3 & 31](i1, i17);
   i2 = HEAP32[i1 >> 2] | 0;
  }
  i2 = HEAP32[i2 + 24 >> 2] | 0;
  if ((i2 | 0) != 0 ? (i13 = FUNCTION_TABLE_iii[i2 & 255](i16 + 24 | 0, i1) | 0, (i13 | 0) != 0) : 0) {
   i16 = i13;
   STACKTOP = i17;
   return i16 | 0;
  }
  i16 = _af_loader_load_g(i16 + 12 | 0, i17, i14, i15 & -2054 | 2049, 0) | 0;
  STACKTOP = i17;
  return i16 | 0;
 } else {
  HEAP32[i17 + 32 >> 2] = 6;
  i1 = 6;
 } while (0);
 i16 = i1;
 STACKTOP = i17;
 return i16 | 0;
}

function _tt_face_load_sbit_image(i2, i7, i3, i6, i4, i13, i12) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 var i1 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i15 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = HEAP32[i2 + 616 >> 2] | 0;
 if (((i5 | 0) != 0 ? (HEAP32[i2 + 612 >> 2] | 0) >>> 0 > i7 >>> 0 : 0) ? (_find_sbit_range(i3, i5 + (i7 * 48 | 0) | 0, i14, i14 + 4 | 0) | 0) == 0 : 0) {
  if ((FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 63](i2, 1161970772, i4, 0) | 0) != 0 ? (i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 63](i2, 1650745716, i4, 0) | 0, (i1 | 0) != 0) : 0) {
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
  i1 = _FT_Stream_Pos(i4) | 0;
  i1 = _Load_SBit_Image(i5 + (i7 * 48 | 0) | 0, HEAP32[i14 >> 2] | 0, i1, HEAP32[i14 + 4 >> 2] | 0, HEAP32[i2 + 84 >> 2] | 0, 0, 0, i4, i12, 0) | 0;
  if (i1) {
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
  if (HEAP8[i5 + (i7 * 48 | 0) + 47 >> 0] & 1) {
   i11 = (HEAP8[i5 + (i7 * 48 | 0) + 16 >> 0] | 0) - (HEAP8[i5 + (i7 * 48 | 0) + 17 >> 0] | 0) | 0;
   HEAP8[i12 + 5 >> 0] = (HEAPU8[i12 + 1 >> 0] | 0) / -2 | 0;
   HEAP8[i12 + 6 >> 0] = (i11 - (HEAPU8[i12 >> 0] | 0) | 0) / 2 | 0;
   HEAP8[i12 + 7 >> 0] = (i11 * 12 | 0) / 10 | 0;
  }
  if (!(i6 & 64)) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i5 = HEAP32[i13 >> 2] | 0;
  i11 = HEAP32[i13 + 8 >> 2] | 0;
  L18 : do if ((i5 | 0) > 0) {
   i4 = HEAP32[i13 + 12 >> 2] | 0;
   if ((i11 | 0) > 0) {
    i1 = 0;
    i3 = i4;
   } else {
    i1 = 0;
    while (1) {
     i1 = i1 + 1 | 0;
     if ((i5 | 0) <= (i1 | 0)) break L18;
    }
   }
   L23 : while (1) {
    i2 = i3;
    i3 = i3 + i11 | 0;
    do {
     if (HEAP8[i2 >> 0] | 0) break L23;
     i2 = i2 + 1 | 0;
    } while (i2 >>> 0 < i3 >>> 0);
    i1 = i1 + 1 | 0;
    if ((i5 | 0) <= (i1 | 0)) break L18;
   }
   if ((i1 | 0) > 0) {
    _memmove(i4 | 0, i4 + (Math_imul(i1, i11) | 0) | 0, Math_imul(i5 - i1 | 0, i11) | 0) | 0;
    HEAP8[i12 >> 0] = (HEAPU8[i12 >> 0] | 0) - i1;
    HEAP8[i12 + 3 >> 0] = (HEAPU8[i12 + 3 >> 0] | 0) - i1;
    HEAP8[i12 + 6 >> 0] = (HEAPU8[i12 + 6 >> 0] | 0) - i1;
    i6 = (HEAP32[i13 >> 2] | 0) - i1 | 0;
    HEAP32[i13 >> 2] = i6;
    i1 = i5 - i1 | 0;
   } else {
    i6 = i5;
    i1 = i5;
   }
   if ((i1 | 0) > 0) {
    i2 = 0;
    i5 = (HEAP32[i13 + 12 >> 2] | 0) + (Math_imul(i1 + -1 | 0, i11) | 0) | 0;
    L35 : while (1) {
     i3 = i5 + i11 | 0;
     i4 = i5;
     do {
      if (HEAP8[i4 >> 0] | 0) break L35;
      i4 = i4 + 1 | 0;
     } while (i4 >>> 0 < i3 >>> 0);
     i2 = i2 + 1 | 0;
     if ((i1 | 0) > (i2 | 0)) i5 = i5 + (0 - i11) | 0; else break;
    }
    if ((i2 | 0) > 0) {
     HEAP8[i12 >> 0] = (HEAPU8[i12 >> 0] | 0) - i2;
     HEAP32[i13 >> 2] = i6 - i2;
     i1 = i1 - i2 | 0;
    }
   }
   i10 = Math_imul(i1, i11) | 0;
   L44 : while (1) {
    i6 = HEAP32[i13 + 12 >> 2] | 0;
    if ((i10 | 0) > 0) {
     i1 = i6;
     do {
      if ((HEAP8[i1 >> 0] | 0) < 0) {
       i3 = 40;
       break L44;
      }
      i1 = i1 + i11 | 0;
     } while (i1 >>> 0 < (i6 + i10 | 0) >>> 0);
     i1 = HEAP32[i13 + 4 >> 2] | 0;
     i8 = i6 + 1 | 0;
     i9 = i6;
     while (1) {
      i3 = HEAPU8[i9 >> 0] << 1;
      if ((i1 | 0) > 8) {
       i2 = i1 + -9 | 0;
       i5 = i9;
       i7 = 8;
       while (1) {
        i15 = i5;
        i5 = i5 + 1 | 0;
        i4 = HEAPU8[i5 >> 0] | 0;
        HEAP8[i15 >> 0] = i4 >>> 7 | i3;
        i7 = i7 + 8 | 0;
        if ((i7 | 0) >= (i1 | 0)) break; else i3 = i4 << 1;
       }
       i2 = i8 + (i2 >>> 3) | 0;
       i1 = i4 << 1;
      } else {
       i2 = i9;
       i1 = i3;
      }
      HEAP8[i2 >> 0] = i1;
      i9 = i9 + i11 | 0;
      i1 = HEAP32[i13 + 4 >> 2] | 0;
      if (i9 >>> 0 >= (i6 + i10 | 0) >>> 0) break; else i8 = i8 + i11 | 0;
     }
    } else i1 = HEAP32[i13 + 4 >> 2] | 0;
    i2 = i1 + -1 | 0;
    HEAP32[i13 + 4 >> 2] = i2;
    HEAP8[i12 + 2 >> 0] = (HEAP8[i12 + 2 >> 0] | 0) + 1 << 24 >> 24;
    HEAP8[i12 + 5 >> 0] = (HEAP8[i12 + 5 >> 0] | 0) + 1 << 24 >> 24;
    HEAP8[i12 + 1 >> 0] = (HEAP8[i12 + 1 >> 0] | 0) + -1 << 24 >> 24;
    if ((i1 | 0) <= 1) {
     i3 = 41;
     break;
    }
   }
   if ((i3 | 0) == 40) i2 = HEAP32[i13 + 4 >> 2] | 0; else if ((i3 | 0) == 41) i6 = HEAP32[i13 + 12 >> 2] | 0;
   L65 : while (1) {
    i3 = i2;
    i2 = i2 + -1 | 0;
    i1 = i2 >> 3;
    i4 = i6 + (i1 + i10) | 0;
    if ((i1 | 0) < (i1 + i10 | 0)) {
     i5 = 128 >>> (i2 & 7);
     i1 = i6 + i1 | 0;
     do {
      if (HEAPU8[i1 >> 0] & i5) {
       i1 = 0;
       i3 = 49;
       break L65;
      }
      i1 = i1 + i11 | 0;
     } while (i1 >>> 0 < i4 >>> 0);
    }
    HEAP32[i13 + 4 >> 2] = i2;
    HEAP8[i12 + 1 >> 0] = (HEAP8[i12 + 1 >> 0] | 0) + -1 << 24 >> 24;
    if ((i3 | 0) <= 1) {
     i1 = 0;
     i3 = 49;
     break;
    }
   }
   if ((i3 | 0) == 49) {
    STACKTOP = i14;
    return i1 | 0;
   }
  } while (0);
  HEAP32[i13 + 4 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i13 + 8 >> 2] = 0;
  HEAP8[i13 + 18 >> 0] = 1;
  i15 = 0;
  STACKTOP = i14;
  return i15 | 0;
 }
 HEAP32[i14 >> 2] = 0;
 HEAP32[i14 + 4 >> 2] = 0;
 i15 = 6;
 STACKTOP = i14;
 return i15 | 0;
}

function _T1_Get_MM_Var(i1, i11) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i3 = HEAP32[i1 + 100 >> 2] | 0;
 i10 = HEAP32[i1 + 532 >> 2] | 0;
 if (!i10) {
  HEAP32[i12 + 16 >> 2] = 6;
  i11 = 6;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = HEAP32[i10 + 4 >> 2] | 0;
 HEAP32[i12 + 24 >> 2] = i1;
 HEAP32[i12 + 24 + 4 >> 2] = HEAP32[i10 >> 2];
 if (!i1) i9 = 0; else {
  i2 = 0;
  do {
   HEAP32[i12 + 24 + 8 + (i2 * 12 | 0) >> 2] = HEAP32[i10 + 8 + (i2 << 2) >> 2];
   i8 = HEAP32[i10 + 88 + (i2 * 12 | 0) + 4 >> 2] | 0;
   HEAP32[i12 + 24 + 8 + (i2 * 12 | 0) + 4 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i12 + 24 + 8 + (i2 * 12 | 0) + 8 >> 2] = HEAP32[i8 + ((HEAPU8[i10 + 88 + (i2 * 12 | 0) >> 0] | 0) + -1 << 2) >> 2];
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i1 | 0));
  i9 = HEAP32[i12 + 24 >> 2] | 0;
 }
 HEAP32[i12 + 16 >> 2] = 0;
 i8 = _ft_mem_alloc(i3, (i9 * 24 | 0) + 20 | 0, i12 + 16 | 0) | 0;
 i1 = HEAP32[i12 + 16 >> 2] | 0;
 if (i1) {
  i11 = i1;
  STACKTOP = i12;
  return i11 | 0;
 }
 HEAP32[i8 >> 2] = i9;
 HEAP32[i8 + 4 >> 2] = HEAP32[i12 + 24 + 4 >> 2];
 HEAP32[i8 + 8 >> 2] = -1;
 HEAP32[i8 + 12 >> 2] = i8 + 20;
 HEAP32[i8 + 16 >> 2] = 0;
 i4 = (i9 | 0) == 0;
 if (!i4) {
  i3 = 0;
  do {
   HEAP32[i8 + 20 + (i3 * 24 | 0) >> 2] = HEAP32[i12 + 24 + 8 + (i3 * 12 | 0) >> 2];
   i1 = HEAP32[i12 + 24 + 8 + (i3 * 12 | 0) + 4 >> 2] << 16;
   HEAP32[i8 + 20 + (i3 * 24 | 0) + 4 >> 2] = i1;
   i2 = HEAP32[i12 + 24 + 8 + (i3 * 12 | 0) + 8 >> 2] << 16;
   HEAP32[i8 + 20 + (i3 * 24 | 0) + 12 >> 2] = i2;
   HEAP32[i8 + 20 + (i3 * 24 | 0) + 8 >> 2] = (i2 + i1 | 0) / 2 | 0;
   HEAP32[i8 + 20 + (i3 * 24 | 0) + 20 >> 2] = -1;
   i1 = i8 + 20 + (i3 * 24 | 0) + 16 | 0;
   HEAP32[i1 >> 2] = -1;
   i2 = HEAP32[i8 + 20 + (i3 * 24 | 0) >> 2] | 0;
   do if (_strcmp(i2, 327351) | 0) {
    if (!(_strcmp(i2, 323358) | 0)) {
     HEAP32[i1 >> 2] = 2003072104;
     break;
    }
    if (!(_strcmp(i2, 323364) | 0)) HEAP32[i1 >> 2] = 1869640570;
   } else HEAP32[i1 >> 2] = 2003265652; while (0);
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < i9 >>> 0);
 }
 i1 = HEAP32[i10 + 4 >> 2] | 0;
 L25 : do if ((HEAP32[i10 >> 2] | 0) == (1 << i1 | 0)) {
  i2 = HEAP32[i10 + 140 >> 2] | 0;
  switch (i1 | 0) {
  case 1:
   {
    i1 = HEAP32[i2 + 4 >> 2] | 0;
    HEAP32[i12 >> 2] = i1;
    break;
   }
  case 2:
   {
    i7 = HEAP32[i2 + 12 >> 2] | 0;
    i1 = (HEAP32[i2 + 4 >> 2] | 0) + i7 | 0;
    HEAP32[i12 >> 2] = i1;
    HEAP32[i12 + 4 >> 2] = (HEAP32[i2 + 8 >> 2] | 0) + i7;
    break;
   }
  case 3:
   {
    i6 = HEAP32[i2 + 28 >> 2] | 0;
    i7 = HEAP32[i2 + 20 >> 2] | 0;
    i5 = HEAP32[i2 + 12 >> 2] | 0;
    i1 = i7 + i6 + i5 + (HEAP32[i2 + 4 >> 2] | 0) | 0;
    HEAP32[i12 >> 2] = i1;
    i6 = (HEAP32[i2 + 24 >> 2] | 0) + i6 | 0;
    HEAP32[i12 + 4 >> 2] = i6 + i5 + (HEAP32[i2 + 8 >> 2] | 0);
    HEAP32[i12 + 8 >> 2] = i6 + i7 + (HEAP32[i2 + 16 >> 2] | 0);
    break;
   }
  default:
   {
    i16 = HEAP32[i2 + 60 >> 2] | 0;
    i3 = HEAP32[i2 + 52 >> 2] | 0;
    i5 = HEAP32[i2 + 44 >> 2] | 0;
    i7 = HEAP32[i2 + 36 >> 2] | 0;
    i15 = HEAP32[i2 + 28 >> 2] | 0;
    i13 = HEAP32[i2 + 20 >> 2] | 0;
    i17 = HEAP32[i2 + 12 >> 2] | 0;
    i1 = i3 + i16 + i5 + i7 + i15 + i13 + i17 + (HEAP32[i2 + 4 >> 2] | 0) | 0;
    HEAP32[i12 >> 2] = i1;
    i16 = (HEAP32[i2 + 56 >> 2] | 0) + i16 | 0;
    i6 = HEAP32[i2 + 40 >> 2] | 0;
    i14 = HEAP32[i2 + 24 >> 2] | 0;
    HEAP32[i12 + 4 >> 2] = i16 + i5 + i6 + i15 + i14 + i17 + (HEAP32[i2 + 8 >> 2] | 0);
    i3 = i16 + i3 + (HEAP32[i2 + 48 >> 2] | 0) | 0;
    HEAP32[i12 + 8 >> 2] = i3 + i15 + i14 + i13 + (HEAP32[i2 + 16 >> 2] | 0);
    HEAP32[i12 + 12 >> 2] = i3 + i5 + i6 + i7 + (HEAP32[i2 + 32 >> 2] | 0);
   }
  }
  if (!i4) {
   i3 = i8 + 20 | 0;
   i2 = 0;
   while (1) {
    i6 = HEAP32[i10 + 88 + (i2 * 12 | 0) + 8 >> 2] | 0;
    L35 : do if ((HEAP32[i6 >> 2] | 0) < (i1 | 0)) {
     i4 = HEAP8[i10 + 88 + (i2 * 12 | 0) >> 0] | 0;
     L37 : do if ((i4 & 255) > 1) {
      i5 = 1;
      while (1) {
       i7 = HEAP32[i6 + (i5 << 2) >> 2] | 0;
       if ((i7 | 0) >= (i1 | 0)) {
        i3 = i5;
        break;
       }
       i5 = i5 + 1 | 0;
       if ((i5 | 0) >= (i4 & 255 | 0)) break L37;
      }
      i16 = HEAP32[i6 + (i3 + -1 << 2) >> 2] | 0;
      i16 = _FT_MulDiv(i1 - i16 | 0, 65536, i7 - i16 | 0) | 0;
      i17 = HEAP32[i10 + 88 + (i2 * 12 | 0) + 4 >> 2] | 0;
      i1 = HEAP32[i17 + (i3 + -1 << 2) >> 2] | 0;
      i1 = (_FT_MulDiv(i16, (HEAP32[i17 + (i3 << 2) >> 2] | 0) - i1 | 0, 1) | 0) + (i1 << 16) | 0;
      i3 = HEAP32[i8 + 12 >> 2] | 0;
      break L35;
     } while (0);
     i1 = HEAP32[(HEAP32[i10 + 88 + (i2 * 12 | 0) + 4 >> 2] | 0) + ((i4 & 255) + -1 << 2) >> 2] << 16;
    } else i1 = HEAP32[HEAP32[i10 + 88 + (i2 * 12 | 0) + 4 >> 2] >> 2] << 16; while (0);
    HEAP32[i3 + (i2 * 24 | 0) + 8 >> 2] = i1;
    i2 = i2 + 1 | 0;
    if (i2 >>> 0 >= i9 >>> 0) break L25;
    i1 = HEAP32[i12 + (i2 << 2) >> 2] | 0;
   }
  }
 } while (0);
 HEAP32[i11 >> 2] = i8;
 i17 = HEAP32[i12 + 16 >> 2] | 0;
 STACKTOP = i12;
 return i17 | 0;
}

function __Z25TranslateShaderCodeString10ShaderType6String(i8, i1, i9) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i2 = __Z24GLShadingLanguageVersionv() | 0;
 HEAP32[i7 + 152 >> 2] = 0;
 HEAP32[i7 + 152 + 4 >> 2] = 0;
 HEAP32[i7 + 152 + 8 >> 2] = 0;
 HEAP32[i7 + 152 + 12 >> 2] = 0;
 do if (__Z22IsIE11DeveloperPreviewv() | 0) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(4, 297474, i7 + 16 | 0);
  i1 = 0;
 } else {
  i1 = HEAP32[i9 >> 2] | 0;
  if (((i1 | 0) != 0 ? (HEAP8[i1 >> 0] | 0) != 0 : 0) ? (_strstr(i1, 297450) | 0) != 0 : 0) {
   i1 = 0;
   break;
  }
  if ((i2 | 0) <= 299) {
   HEAP32[i7 + 40 >> 2] = 0;
   HEAP32[i7 + 40 + 4 >> 2] = 0;
   HEAP32[i7 + 40 + 8 >> 2] = 0;
   HEAP32[i7 + 40 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i7 + 40 | 0, 297459);
   HEAP32[i7 + 24 >> 2] = 0;
   HEAP32[i7 + 24 + 4 >> 2] = 0;
   HEAP32[i7 + 24 + 8 >> 2] = 0;
   HEAP32[i7 + 24 + 12 >> 2] = 0;
   i6 = __Znaj(23) | 0;
   HEAP32[i7 + 24 + 12 >> 2] = 23;
   HEAP8[i6 >> 0] = 0;
   HEAP32[i7 + 24 >> 2] = i6;
   HEAP32[i7 + 8 >> 2] = i2;
   __ZN6String7SPrintfEPKcz(i7 + 24 | 0, 322403, i7 + 8 | 0) | 0;
   __ZNK6StringplERKS_(i7 + 56 | 0, i7 + 40 | 0, i7 + 24 | 0);
   HEAP32[i7 + 72 >> 2] = 0;
   HEAP32[i7 + 72 + 4 >> 2] = 0;
   HEAP32[i7 + 72 + 8 >> 2] = 0;
   HEAP32[i7 + 72 + 12 >> 2] = 0;
   i6 = HEAP32[i7 + 56 >> 2] | 0;
   __ZN6String3SetEPKc(i7 + 72 | 0, i6);
   i5 = HEAP32[i7 + 72 + 8 >> 2] | 0;
   if ((HEAP32[i7 + 72 + 12 >> 2] | 0) < (i5 + 2 | 0)) {
    i1 = __Znaj((i5 + 2 | 0) > -1 ? i5 + 2 | 0 : -1) | 0;
    HEAP32[i7 + 72 + 12 >> 2] = i5 + 2;
    i2 = HEAP32[i7 + 72 >> 2] | 0;
    if (!i2) {
     if ((i5 | 0) > -2) HEAP8[i1 >> 0] = 0;
    } else {
     _memcpy(i1 | 0, i2 | 0, i5 + 1 | 0) | 0;
     __ZdaPv(i2);
    }
    HEAP32[i7 + 72 >> 2] = i1;
    i2 = i1;
    i4 = i7 + 72 | 0;
   } else {
    i2 = HEAP32[i7 + 72 >> 2] | 0;
    i4 = i7 + 72 | 0;
   }
   i3 = i2 + i5 | 0;
   HEAP8[i3 >> 0] = 10;
   HEAP8[i3 + 1 >> 0] = 0;
   HEAP32[i7 + 72 + 8 >> 2] = i5 + 1;
   i3 = (HEAP32[i7 + 72 + 4 >> 2] | 0) + 1 | 0;
   HEAP32[i7 + 72 + 4 >> 2] = i3;
   if (!i2) i1 = 0; else {
    if ((i5 | 0) > -2) {
     i1 = __Znaj((i5 + 2 | 0) > -1 ? i5 + 2 | 0 : -1) | 0;
     HEAP32[i7 + 152 + 12 >> 2] = i5 + 2;
     HEAP8[i1 >> 0] = 0;
     HEAP32[i7 + 152 >> 2] = i1;
    } else i1 = 0;
    _memcpy(i1 | 0, i2 | 0, i5 + 2 | 0) | 0;
    HEAP32[i7 + 152 + 8 >> 2] = i5 + 1;
    HEAP32[i7 + 152 + 4 >> 2] = i3;
    __ZdaPv(i2);
   }
   HEAP32[i4 >> 2] = 0;
   if (i6) __ZdaPv(i6);
   HEAP32[i7 + 56 >> 2] = 0;
   i2 = HEAP32[i7 + 24 >> 2] | 0;
   if (i2) __ZdaPv(i2);
   HEAP32[i7 + 24 >> 2] = 0;
   i2 = HEAP32[i7 + 40 >> 2] | 0;
   if (i2) __ZdaPv(i2);
   HEAP32[i7 + 40 >> 2] = 0;
   break;
  };
  HEAP32[i7 + 104 >> 2] = 0;
  HEAP32[i7 + 104 + 4 >> 2] = 0;
  HEAP32[i7 + 104 + 8 >> 2] = 0;
  HEAP32[i7 + 104 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i7 + 104 | 0, 297459);
  HEAP32[i7 + 88 >> 2] = 0;
  HEAP32[i7 + 88 + 4 >> 2] = 0;
  HEAP32[i7 + 88 + 8 >> 2] = 0;
  HEAP32[i7 + 88 + 12 >> 2] = 0;
  i6 = __Znaj(23) | 0;
  HEAP32[i7 + 88 + 12 >> 2] = 23;
  HEAP8[i6 >> 0] = 0;
  HEAP32[i7 + 88 >> 2] = i6;
  HEAP32[i7 >> 2] = i2;
  __ZN6String7SPrintfEPKcz(i7 + 88 | 0, 322403, i7) | 0;
  __ZNK6StringplERKS_(i7 + 120 | 0, i7 + 104 | 0, i7 + 88 | 0);
  HEAP32[i7 + 136 >> 2] = 0;
  HEAP32[i7 + 136 + 4 >> 2] = 0;
  HEAP32[i7 + 136 + 8 >> 2] = 0;
  HEAP32[i7 + 136 + 12 >> 2] = 0;
  i6 = HEAP32[i7 + 120 >> 2] | 0;
  __ZN6String3SetEPKc(i7 + 136 | 0, i6);
  i5 = HEAP32[i7 + 136 + 8 >> 2] | 0;
  if ((HEAP32[i7 + 136 + 12 >> 2] | 0) < (i5 + 5 | 0)) {
   i1 = __Znaj((i5 + 5 | 0) > -1 ? i5 + 5 | 0 : -1) | 0;
   HEAP32[i7 + 136 + 12 >> 2] = i5 + 5;
   i2 = HEAP32[i7 + 136 >> 2] | 0;
   if (!i2) {
    if ((i5 + 4 | 0) > -1) HEAP8[i1 >> 0] = 0;
   } else {
    _memcpy(i1 | 0, i2 | 0, i5 + 1 | 0) | 0;
    __ZdaPv(i2);
   }
   HEAP32[i7 + 136 >> 2] = i1;
   i2 = i1;
   i4 = i7 + 136 | 0;
  } else {
   i2 = HEAP32[i7 + 136 >> 2] | 0;
   i4 = i7 + 136 | 0;
  }
  i3 = i2 + i5 | 0;
  HEAP8[i3 >> 0] = HEAP8[297469] | 0;
  HEAP8[i3 + 1 >> 0] = HEAP8[297470] | 0;
  HEAP8[i3 + 2 >> 0] = HEAP8[297471] | 0;
  HEAP8[i3 + 3 >> 0] = HEAP8[297472] | 0;
  HEAP8[i3 + 4 >> 0] = HEAP8[297473] | 0;
  HEAP32[i7 + 136 + 8 >> 2] = i5 + 4;
  i3 = (HEAP32[i7 + 136 + 4 >> 2] | 0) + 4 | 0;
  HEAP32[i7 + 136 + 4 >> 2] = i3;
  if (!i2) i1 = 0; else {
   if ((i5 | 0) > -5) {
    i1 = __Znaj((i5 + 5 | 0) > -1 ? i5 + 5 | 0 : -1) | 0;
    HEAP32[i7 + 152 + 12 >> 2] = i5 + 5;
    if ((i5 + 4 | 0) > -1) HEAP8[i1 >> 0] = 0;
    HEAP32[i7 + 152 >> 2] = i1;
   } else i1 = 0;
   _memcpy(i1 | 0, i2 | 0, i5 + 5 | 0) | 0;
   HEAP32[i7 + 152 + 8 >> 2] = i5 + 4;
   HEAP32[i7 + 152 + 4 >> 2] = i3;
   __ZdaPv(i2);
  }
  HEAP32[i4 >> 2] = 0;
  if (i6) __ZdaPv(i6);
  HEAP32[i7 + 120 >> 2] = 0;
  i2 = HEAP32[i7 + 88 >> 2] | 0;
  if (i2) __ZdaPv(i2);
  HEAP32[i7 + 88 >> 2] = 0;
  i2 = HEAP32[i7 + 104 >> 2] | 0;
  if (i2) __ZdaPv(i2);
  HEAP32[i7 + 104 >> 2] = 0;
 } while (0);
 __ZNK6StringplERKS_(i8, i7 + 152 | 0, i9);
 if (!i1) {
  STACKTOP = i7;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i7;
 return;
}

function __ZNK4math8float4x4mlERKS0_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0, f20 = f0, f21 = f0;
 f19 = Math_fround(HEAPF32[i3 >> 2]);
 f4 = Math_fround(HEAPF32[i2 >> 2]);
 f13 = Math_fround(f19 * f4);
 f6 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f7 = Math_fround(HEAPF32[i2 + 16 >> 2]);
 f13 = Math_fround(f13 + Math_fround(f6 * f7));
 f9 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f8 = Math_fround(HEAPF32[i2 + 32 >> 2]);
 f13 = Math_fround(f13 + Math_fround(f9 * f8));
 f11 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 f12 = Math_fround(HEAPF32[i2 + 48 >> 2]);
 HEAPF32[i1 >> 2] = Math_fround(f13 + Math_fround(f11 * f12));
 f13 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f17 = Math_fround(f19 * f13);
 f14 = Math_fround(HEAPF32[i2 + 20 >> 2]);
 f17 = Math_fround(f17 + Math_fround(f6 * f14));
 f10 = Math_fround(HEAPF32[i2 + 36 >> 2]);
 f17 = Math_fround(f17 + Math_fround(f9 * f10));
 f16 = Math_fround(HEAPF32[i2 + 52 >> 2]);
 HEAPF32[i1 + 4 >> 2] = Math_fround(f17 + Math_fround(f11 * f16));
 f17 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f21 = Math_fround(f19 * f17);
 f18 = Math_fround(HEAPF32[i2 + 24 >> 2]);
 f21 = Math_fround(f21 + Math_fround(f6 * f18));
 f15 = Math_fround(HEAPF32[i2 + 40 >> 2]);
 f21 = Math_fround(f21 + Math_fround(f9 * f15));
 f20 = Math_fround(HEAPF32[i2 + 56 >> 2]);
 HEAPF32[i1 + 8 >> 2] = Math_fround(f21 + Math_fround(f11 * f20));
 f21 = Math_fround(HEAPF32[i2 + 12 >> 2]);
 f19 = Math_fround(f19 * f21);
 f5 = Math_fround(HEAPF32[i2 + 28 >> 2]);
 f6 = Math_fround(f19 + Math_fround(f6 * f5));
 f19 = Math_fround(HEAPF32[i2 + 44 >> 2]);
 f9 = Math_fround(f6 + Math_fround(f9 * f19));
 f6 = Math_fround(HEAPF32[i2 + 60 >> 2]);
 HEAPF32[i1 + 12 >> 2] = Math_fround(f9 + Math_fround(f11 * f6));
 f11 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 f4 = Math_fround(f11 * f4);
 f9 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f7 = Math_fround(f4 + Math_fround(f9 * f7));
 f4 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 f8 = Math_fround(f7 + Math_fround(f4 * f8));
 f7 = Math_fround(HEAPF32[i3 + 28 >> 2]);
 HEAPF32[i1 + 16 >> 2] = Math_fround(f8 + Math_fround(f7 * f12));
 HEAPF32[i1 + 20 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(f11 * f13) + Math_fround(f9 * f14)) + Math_fround(f4 * f10)) + Math_fround(f7 * f16));
 HEAPF32[i1 + 24 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(f11 * f17) + Math_fround(f9 * f18)) + Math_fround(f4 * f15)) + Math_fround(f7 * f20));
 HEAPF32[i1 + 28 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(f11 * f21) + Math_fround(f9 * f5)) + Math_fround(f4 * f19)) + Math_fround(f7 * f6));
 f6 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 f19 = Math_fround(f6 * f7);
 f4 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 f5 = Math_fround(HEAPF32[i2 + 16 >> 2]);
 f19 = Math_fround(f19 + Math_fround(f4 * f5));
 f9 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 f21 = Math_fround(HEAPF32[i2 + 32 >> 2]);
 f19 = Math_fround(f19 + Math_fround(f9 * f21));
 f11 = Math_fround(HEAPF32[i3 + 44 >> 2]);
 f20 = Math_fround(HEAPF32[i2 + 48 >> 2]);
 HEAPF32[i1 + 32 >> 2] = Math_fround(f19 + Math_fround(f11 * f20));
 f19 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f15 = Math_fround(f6 * f19);
 f18 = Math_fround(HEAPF32[i2 + 20 >> 2]);
 f15 = Math_fround(f15 + Math_fround(f4 * f18));
 f17 = Math_fround(HEAPF32[i2 + 36 >> 2]);
 f15 = Math_fround(f15 + Math_fround(f9 * f17));
 f16 = Math_fround(HEAPF32[i2 + 52 >> 2]);
 HEAPF32[i1 + 36 >> 2] = Math_fround(f15 + Math_fround(f11 * f16));
 f15 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f10 = Math_fround(f6 * f15);
 f14 = Math_fround(HEAPF32[i2 + 24 >> 2]);
 f10 = Math_fround(f10 + Math_fround(f4 * f14));
 f13 = Math_fround(HEAPF32[i2 + 40 >> 2]);
 f10 = Math_fround(f10 + Math_fround(f9 * f13));
 f12 = Math_fround(HEAPF32[i2 + 56 >> 2]);
 HEAPF32[i1 + 40 >> 2] = Math_fround(f10 + Math_fround(f11 * f12));
 f10 = Math_fround(HEAPF32[i2 + 12 >> 2]);
 f6 = Math_fround(f6 * f10);
 f8 = Math_fround(HEAPF32[i2 + 28 >> 2]);
 f4 = Math_fround(f6 + Math_fround(f4 * f8));
 f6 = Math_fround(HEAPF32[i2 + 44 >> 2]);
 f9 = Math_fround(f4 + Math_fround(f9 * f6));
 f4 = Math_fround(HEAPF32[i2 + 60 >> 2]);
 HEAPF32[i1 + 44 >> 2] = Math_fround(f9 + Math_fround(f11 * f4));
 f11 = Math_fround(HEAPF32[i3 + 48 >> 2]);
 f7 = Math_fround(f11 * f7);
 f9 = Math_fround(HEAPF32[i3 + 52 >> 2]);
 f5 = Math_fround(f7 + Math_fround(f9 * f5));
 f7 = Math_fround(HEAPF32[i3 + 56 >> 2]);
 f21 = Math_fround(f5 + Math_fround(f7 * f21));
 f5 = Math_fround(HEAPF32[i3 + 60 >> 2]);
 HEAPF32[i1 + 48 >> 2] = Math_fround(f21 + Math_fround(f5 * f20));
 HEAPF32[i1 + 52 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(f11 * f19) + Math_fround(f9 * f18)) + Math_fround(f7 * f17)) + Math_fround(f5 * f16));
 HEAPF32[i1 + 56 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(f11 * f15) + Math_fround(f9 * f14)) + Math_fround(f7 * f13)) + Math_fround(f5 * f12));
 HEAPF32[i1 + 60 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(f11 * f10) + Math_fround(f9 * f8)) + Math_fround(f7 * f6)) + Math_fround(f5 * f4));
 return;
}

function __Z23GenerateTriangleNormalsR12VertexBufferR5ArrayIN4math6float3E9StdCAllocEb(i11, i10, i9) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 HEAP32[i10 + 12 >> 2] = 0;
 i3 = __ZNK12VertexBuffer13NumPrimitivesEv(i11) | 0;
 i3 = i3 >>> 0 < 32 ? 32 : i3;
 if (i3 >>> 0 >= (HEAP32[i10 + 8 >> 2] | 0) >>> 0) {
  i4 = __Znaj(i3 >>> 0 > 357913941 ? -1 : i3 * 12 | 0) | 0;
  i5 = HEAP32[i10 + 12 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if (!i5) {
   if (i2) i6 = 5;
  } else {
   i1 = 0;
   do {
    i6 = i4 + (i1 * 12 | 0) | 0;
    i13 = i2 + (i1 * 12 | 0) | 0;
    HEAP32[i6 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i6 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
    HEAP32[i6 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i5 | 0));
   i6 = 5;
  }
  if ((i6 | 0) == 5) __ZdaPv(i2);
  HEAP32[i10 >> 2] = i4;
  HEAP32[i10 + 8 >> 2] = i3;
 }
 if ((__ZNK12VertexBuffer13NumPrimitivesEv(i11) | 0) <= 0) {
  STACKTOP = i12;
  return;
 }
 i5 = 0;
 do {
  i13 = i5 * 3 | 0;
  __ZNK12VertexBuffer3GetEi18VertexDataSemantici(i12 + 232 | 0, i11, i13, 1, 0);
  __ZNK4math6float43xyzEv(i12 + 248 | 0, i12 + 232 | 0);
  __ZNK12VertexBuffer3GetEi18VertexDataSemantici(i12 + 200 | 0, i11, i13 + 1 | 0, 1, 0);
  __ZNK4math6float43xyzEv(i12 + 216 | 0, i12 + 200 | 0);
  __ZNK12VertexBuffer3GetEi18VertexDataSemantici(i12 + 168 | 0, i11, i13 + 2 | 0, 1, 0);
  __ZNK4math6float43xyzEv(i12 + 184 | 0, i12 + 168 | 0);
  if (i9) {
   HEAP32[i12 + 108 >> 2] = HEAP32[i12 + 248 >> 2];
   HEAP32[i12 + 108 + 4 >> 2] = HEAP32[i12 + 248 + 4 >> 2];
   HEAP32[i12 + 108 + 8 >> 2] = HEAP32[i12 + 248 + 8 >> 2];
   HEAP32[i12 + 96 >> 2] = HEAP32[i12 + 216 >> 2];
   HEAP32[i12 + 96 + 4 >> 2] = HEAP32[i12 + 216 + 4 >> 2];
   HEAP32[i12 + 96 + 8 >> 2] = HEAP32[i12 + 216 + 8 >> 2];
   HEAP32[i12 + 84 >> 2] = HEAP32[i12 + 184 >> 2];
   HEAP32[i12 + 84 + 4 >> 2] = HEAP32[i12 + 184 + 4 >> 2];
   HEAP32[i12 + 84 + 8 >> 2] = HEAP32[i12 + 184 + 8 >> 2];
   __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i12 + 120 | 0, i12 + 108 | 0, i12 + 96 | 0, i12 + 84 | 0);
   __ZNK4math8Triangle9NormalCCWEv(i12 + 156 | 0, i12 + 120 | 0);
   i1 = HEAP32[i10 + 12 >> 2] | 0;
   i2 = HEAP32[i10 + 8 >> 2] | 0;
   if (i1 >>> 0 >= i2 >>> 0 ? (i7 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i7 >>> 0 >= i2 >>> 0) : 0) {
    i4 = __Znaj(i7 >>> 0 > 357913941 ? -1 : i7 * 12 | 0) | 0;
    i3 = HEAP32[i10 >> 2] | 0;
    if (!i1) if (!i3) i1 = 0; else i6 = 15; else {
     i2 = 0;
     do {
      i13 = i4 + (i2 * 12 | 0) | 0;
      i6 = i3 + (i2 * 12 | 0) | 0;
      HEAP32[i13 >> 2] = HEAP32[i6 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i1 | 0));
     i6 = 15;
    }
    if ((i6 | 0) == 15) {
     i6 = 0;
     __ZdaPv(i3);
     i1 = HEAP32[i10 + 12 >> 2] | 0;
    }
    HEAP32[i10 >> 2] = i4;
    HEAP32[i10 + 8 >> 2] = i7;
   }
   i13 = (HEAP32[i10 >> 2] | 0) + (i1 * 12 | 0) | 0;
   HEAP32[i13 >> 2] = HEAP32[i12 + 156 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 156 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 156 + 8 >> 2];
  } else {
   HEAP32[i12 + 24 >> 2] = HEAP32[i12 + 248 >> 2];
   HEAP32[i12 + 24 + 4 >> 2] = HEAP32[i12 + 248 + 4 >> 2];
   HEAP32[i12 + 24 + 8 >> 2] = HEAP32[i12 + 248 + 8 >> 2];
   HEAP32[i12 + 12 >> 2] = HEAP32[i12 + 216 >> 2];
   HEAP32[i12 + 12 + 4 >> 2] = HEAP32[i12 + 216 + 4 >> 2];
   HEAP32[i12 + 12 + 8 >> 2] = HEAP32[i12 + 216 + 8 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i12 + 184 >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i12 + 184 + 4 >> 2];
   HEAP32[i12 + 8 >> 2] = HEAP32[i12 + 184 + 8 >> 2];
   __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i12 + 36 | 0, i12 + 24 | 0, i12 + 12 | 0, i12);
   __ZNK4math8Triangle8NormalCWEv(i12 + 72 | 0, i12 + 36 | 0);
   i1 = HEAP32[i10 + 12 >> 2] | 0;
   i2 = HEAP32[i10 + 8 >> 2] | 0;
   if (i1 >>> 0 >= i2 >>> 0 ? (i8 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i8 >>> 0 >= i2 >>> 0) : 0) {
    i4 = __Znaj(i8 >>> 0 > 357913941 ? -1 : i8 * 12 | 0) | 0;
    i3 = HEAP32[i10 >> 2] | 0;
    if (!i1) if (!i3) i1 = 0; else i6 = 23; else {
     i2 = 0;
     do {
      i13 = i4 + (i2 * 12 | 0) | 0;
      i6 = i3 + (i2 * 12 | 0) | 0;
      HEAP32[i13 >> 2] = HEAP32[i6 >> 2];
      HEAP32[i13 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
      HEAP32[i13 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i1 | 0));
     i6 = 23;
    }
    if ((i6 | 0) == 23) {
     i6 = 0;
     __ZdaPv(i3);
     i1 = HEAP32[i10 + 12 >> 2] | 0;
    }
    HEAP32[i10 >> 2] = i4;
    HEAP32[i10 + 8 >> 2] = i8;
   }
   i13 = (HEAP32[i10 >> 2] | 0) + (i1 * 12 | 0) | 0;
   HEAP32[i13 >> 2] = HEAP32[i12 + 72 >> 2];
   HEAP32[i13 + 4 >> 2] = HEAP32[i12 + 72 + 4 >> 2];
   HEAP32[i13 + 8 >> 2] = HEAP32[i12 + 72 + 8 >> 2];
  }
  HEAP32[i10 + 12 >> 2] = (HEAP32[i10 + 12 >> 2] | 0) + 1;
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) < (__ZNK12VertexBuffer13NumPrimitivesEv(i11) | 0));
 STACKTOP = i12;
 return;
}

function _ps_hints_t1stem3(i12, i1, i2) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (HEAP32[i12 + 4 >> 2] | 0) {
  STACKTOP = i13;
  return;
 }
 i11 = HEAP32[i12 >> 2] | 0;
 i7 = i1 >>> 0 > 1 ? (i1 | 0) != 0 & 1 : i1;
 L4 : do if ((HEAP32[i12 + 12 >> 2] | 0) == 1) {
  i1 = (_FT_RoundFix(HEAP32[i2 >> 2] | 0) | 0) >> 16;
  i1 = _ps_dimension_add_t1stem(i12 + 16 + (i7 * 36 | 0) | 0, i1, (_FT_RoundFix(HEAP32[i2 + 4 >> 2] | 0) | 0) >> 16, i11, i13) | 0;
  if (!i1) {
   i1 = (_FT_RoundFix(HEAP32[i2 + 8 >> 2] | 0) | 0) >> 16;
   i1 = _ps_dimension_add_t1stem(i12 + 16 + (i7 * 36 | 0) | 0, i1, (_FT_RoundFix(HEAP32[i2 + 12 >> 2] | 0) | 0) >> 16, i11, i13 + 4 | 0) | 0;
   if (!i1) {
    i1 = (_FT_RoundFix(HEAP32[i2 + 16 >> 2] | 0) | 0) >> 16;
    i1 = _ps_dimension_add_t1stem(i12 + 16 + (i7 * 36 | 0) | 0, i1, (_FT_RoundFix(HEAP32[i2 + 20 >> 2] | 0) | 0) >> 16, i11, i13 + 8 | 0) | 0;
    if (!i1) {
     i8 = HEAP32[i13 >> 2] | 0;
     i9 = HEAP32[i13 + 4 >> 2] | 0;
     i10 = HEAP32[i13 + 8 >> 2] | 0;
     i5 = HEAP32[i12 + 16 + (i7 * 36 | 0) + 24 >> 2] | 0;
     L9 : do if (!i5) i6 = 13; else {
      i1 = HEAP32[i12 + 16 + (i7 * 36 | 0) + 32 >> 2] | 0;
      i4 = i5;
      while (1) {
       i2 = i1;
       i3 = HEAP32[i2 >> 2] | 0;
       if (i3 >>> 0 > i8 >>> 0 ? ((HEAPU8[(HEAP32[i2 + 8 >> 2] | 0) + (i8 >> 3) >> 0] | 0) & 128 >>> (i8 & 7) | 0) != 0 : 0) break L9;
       if (i3 >>> 0 > i9 >>> 0 ? ((HEAPU8[(HEAP32[i2 + 8 >> 2] | 0) + (i9 >> 3) >> 0] | 0) & 128 >>> (i9 & 7) | 0) != 0 : 0) break L9;
       if (i3 >>> 0 > i10 >>> 0 ? ((HEAPU8[(HEAP32[i2 + 8 >> 2] | 0) + (i10 >> 3) >> 0] | 0) & 128 >>> (i10 & 7) | 0) != 0 : 0) break L9;
       i4 = i4 + -1 | 0;
       if (!i4) {
        i6 = 13;
        break;
       } else i1 = i2 + 16 | 0;
      }
     } while (0);
     if ((i6 | 0) == 13) {
      i1 = HEAP32[i12 + 16 + (i7 * 36 | 0) + 28 >> 2] | 0;
      do if ((i5 + 1 | 0) >>> 0 > i1 >>> 0) {
       HEAP32[i13 + 12 >> 2] = 0;
       i2 = _ft_mem_realloc(i11, 16, i1, i5 + 8 & -8, HEAP32[i12 + 16 + (i7 * 36 | 0) + 32 >> 2] | 0, i13 + 12 | 0) | 0;
       HEAP32[i12 + 16 + (i7 * 36 | 0) + 32 >> 2] = i2;
       i1 = HEAP32[i13 + 12 >> 2] | 0;
       if (!i1) {
        HEAP32[i12 + 16 + (i7 * 36 | 0) + 28 >> 2] = i5 + 8 & -8;
        i1 = i2;
        break;
       } else break L4;
      } else i1 = HEAP32[i12 + 16 + (i7 * 36 | 0) + 32 >> 2] | 0; while (0);
      i6 = i1 + (i5 << 4) | 0;
      HEAP32[i6 >> 2] = 0;
      HEAP32[i1 + (i5 << 4) + 12 >> 2] = 0;
      HEAP32[i12 + 16 + (i7 * 36 | 0) + 24 >> 2] = i5 + 1;
      i1 = i6;
     }
     i2 = i1;
     if ((i8 | 0) >= 0) {
      if ((HEAP32[i2 >> 2] | 0) >>> 0 <= i8 >>> 0) {
       i1 = ((HEAP32[i2 + 4 >> 2] | 0) + 7 | 0) >>> 3;
       HEAP32[i13 + 12 >> 2] = 0;
       do if ((i8 + 8 | 0) >>> 3 >>> 0 > i1 >>> 0) {
        HEAP32[i2 + 8 >> 2] = _ft_mem_realloc(i11, 1, i1, ((i8 + 8 | 0) >>> 3) + 7 & 1073741816, HEAP32[i2 + 8 >> 2] | 0, i13 + 12 | 0) | 0;
        i1 = HEAP32[i13 + 12 >> 2] | 0;
        if (!i1) {
         HEAP32[i2 + 4 >> 2] = (((i8 + 8 | 0) >>> 3) + 7 & 1073741816) << 3;
         break;
        } else break L4;
       } while (0);
       HEAP32[i2 >> 2] = i8 + 1;
      }
      i7 = (HEAP32[i2 + 8 >> 2] | 0) + (i8 >> 3) | 0;
      HEAP8[i7 >> 0] = HEAPU8[i7 >> 0] | 0 | 128 >>> (i8 & 7);
     }
     if ((i9 | 0) >= 0) {
      if ((HEAP32[i2 >> 2] | 0) >>> 0 <= i9 >>> 0) {
       i1 = ((HEAP32[i2 + 4 >> 2] | 0) + 7 | 0) >>> 3;
       HEAP32[i13 + 12 >> 2] = 0;
       do if ((i9 + 8 | 0) >>> 3 >>> 0 > i1 >>> 0) {
        HEAP32[i2 + 8 >> 2] = _ft_mem_realloc(i11, 1, i1, ((i9 + 8 | 0) >>> 3) + 7 & 1073741816, HEAP32[i2 + 8 >> 2] | 0, i13 + 12 | 0) | 0;
        i1 = HEAP32[i13 + 12 >> 2] | 0;
        if (!i1) {
         HEAP32[i2 + 4 >> 2] = (((i9 + 8 | 0) >>> 3) + 7 & 1073741816) << 3;
         break;
        } else break L4;
       } while (0);
       HEAP32[i2 >> 2] = i9 + 1;
      }
      i8 = (HEAP32[i2 + 8 >> 2] | 0) + (i9 >> 3) | 0;
      HEAP8[i8 >> 0] = HEAPU8[i8 >> 0] | 0 | 128 >>> (i9 & 7);
     }
     if ((i10 | 0) < 0) {
      STACKTOP = i13;
      return;
     }
     if ((HEAP32[i2 >> 2] | 0) >>> 0 <= i10 >>> 0) {
      i1 = ((HEAP32[i2 + 4 >> 2] | 0) + 7 | 0) >>> 3;
      HEAP32[i13 + 12 >> 2] = 0;
      do if ((i10 + 8 | 0) >>> 3 >>> 0 > i1 >>> 0) {
       HEAP32[i2 + 8 >> 2] = _ft_mem_realloc(i11, 1, i1, ((i10 + 8 | 0) >>> 3) + 7 & 1073741816, HEAP32[i2 + 8 >> 2] | 0, i13 + 12 | 0) | 0;
       i1 = HEAP32[i13 + 12 >> 2] | 0;
       if (!i1) {
        HEAP32[i2 + 4 >> 2] = (((i10 + 8 | 0) >>> 3) + 7 & 1073741816) << 3;
        break;
       } else break L4;
      } while (0);
      HEAP32[i2 >> 2] = i10 + 1;
     }
     i12 = (HEAP32[i2 + 8 >> 2] | 0) + (i10 >> 3) | 0;
     HEAP8[i12 >> 0] = HEAPU8[i12 >> 0] | 0 | 128 >>> (i10 & 7);
     STACKTOP = i13;
     return;
    }
   }
  }
 } else i1 = 6; while (0);
 HEAP32[i12 + 4 >> 2] = i1;
 STACKTOP = i13;
 return;
}

function _load_post_names(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = HEAP32[i14 + 104 >> 2] | 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i14 + 508 >> 2] & 63](i14, 1886352244, i13, i15) | 0;
 if (i1) {
  i14 = i1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i8 = _FT_Stream_Pos(i13) | 0;
 i8 = (HEAP32[i15 >> 2] | 0) + i8 | 0;
 i1 = HEAP32[i14 + 468 >> 2] | 0;
 i2 = _FT_Stream_Skip(i13, 32) | 0;
 if (i2) {
  i14 = i2;
  STACKTOP = i15;
  return i14 | 0;
 }
 L7 : do if ((i1 | 0) < 163840) {
  switch (i1 | 0) {
  case 131072:
   break;
  default:
   {
    i1 = 3;
    break L7;
   }
  }
  i11 = HEAP32[i13 + 28 >> 2] | 0;
  i9 = _FT_Stream_ReadUShort(i13, i15 + 4 | 0) | 0;
  i1 = HEAP32[i15 + 4 >> 2] | 0;
  L10 : do if (!i1) {
   if ((i9 & 65535) > (HEAPU16[i14 + 264 >> 1] | 0)) {
    HEAP32[i15 + 4 >> 2] = 3;
    i1 = 3;
    break;
   }
   i10 = _ft_mem_realloc(i11, 2, 0, i9 & 65535, 0, i15 + 4 | 0) | 0;
   L15 : do if ((HEAP32[i15 + 4 >> 2] | 0) == 0 ? (i7 = _FT_Stream_EnterFrame(i13, (i9 & 65535) << 1) | 0, HEAP32[i15 + 4 >> 2] = i7, (i7 | 0) == 0) : 0) {
    if (!(i9 << 16 >> 16)) {
     _FT_Stream_ExitFrame(i13);
     i7 = 0;
    } else {
     i1 = 0;
     do {
      HEAP16[i10 + (i1 << 1) >> 1] = _FT_Stream_GetUShort(i13) | 0;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i9 & 65535 | 0));
     _FT_Stream_ExitFrame(i13);
     i3 = 0;
     i1 = 0;
     do {
      i2 = HEAP16[i10 + (i3 << 1) >> 1] | 0;
      if ((i2 & 65535) > 257) i1 = ((i2 & 65535) + -257 | 0) > (i1 & 65535 | 0) ? (i2 & 65535) + -257 & 65535 : i1;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != (i9 & 65535 | 0));
     i7 = i1;
    }
    i6 = i7 & 65535;
    i1 = _ft_mem_realloc(i11, 4, 0, i6, 0, i15 + 4 | 0) | 0;
    if (!(HEAP32[i15 + 4 >> 2] | 0)) {
     L30 : do if (i7 << 16 >> 16) {
      i2 = 0;
      while (1) {
       if ((_FT_Stream_Pos(i13) | 0) >= (i8 | 0)) {
        i12 = 19;
        break;
       }
       i3 = (_FT_Stream_ReadChar(i13, i15 + 4 | 0) | 0) & 255;
       if (HEAP32[i15 + 4 >> 2] | 0) {
        i2 = 0;
        break;
       }
       if (!((i8 | 0) >= (i3 | 0) ? (_FT_Stream_Pos(i13) | 0) <= (i8 - i3 | 0) : 0)) if ((_FT_Stream_Pos(i13) | 0) > (i8 | 0)) i3 = 0; else i3 = i8 - (_FT_Stream_Pos(i13) | 0) | 0;
       i4 = _ft_mem_realloc(i11, 1, 0, i3 + 1 | 0, 0, i15 + 4 | 0) | 0;
       i5 = i1 + (i2 << 2) | 0;
       HEAP32[i5 >> 2] = i4;
       if (HEAP32[i15 + 4 >> 2] | 0) {
        i2 = 0;
        break;
       }
       i4 = _FT_Stream_Read(i13, i4, i3) | 0;
       HEAP32[i15 + 4 >> 2] = i4;
       if (i4) {
        i2 = 0;
        break;
       }
       HEAP8[(HEAP32[i5 >> 2] | 0) + i3 >> 0] = 0;
       i2 = i2 + 1 | 0;
       if (i2 >>> 0 >= i6 >>> 0) break L30;
      }
      L43 : do if ((i12 | 0) == 19) {
       if ((i2 & 65535) >= (i7 & 65535)) break L30;
       i3 = i2 & 65535;
       while (1) {
        i2 = _ft_mem_realloc(i11, 1, 0, 1, 0, i15 + 4 | 0) | 0;
        HEAP32[i1 + (i3 << 2) >> 2] = i2;
        if (HEAP32[i15 + 4 >> 2] | 0) {
         i2 = 0;
         break L43;
        }
        HEAP8[i2 >> 0] = 0;
        i3 = i3 + 1 | 0;
        if (i3 >>> 0 >= i6 >>> 0) break L30;
       }
      } while (0);
      while (1) {
       i13 = i1 + (i2 << 2) | 0;
       _ft_mem_free(i11, HEAP32[i13 >> 2] | 0);
       HEAP32[i13 >> 2] = 0;
       i2 = i2 + 1 | 0;
       if ((i2 & 65535) << 16 >> 16 == i7 << 16 >> 16) break L15;
      }
     } while (0);
     HEAP16[i14 + 632 >> 1] = i9;
     HEAP16[i14 + 634 >> 1] = i7;
     HEAP32[i14 + 636 >> 2] = i10;
     HEAP32[i14 + 640 >> 2] = i1;
     i1 = 0;
     break L10;
    }
   } else i1 = 0; while (0);
   _ft_mem_free(i11, i1);
   _ft_mem_free(i11, i10);
   i1 = HEAP32[i15 + 4 >> 2] | 0;
  } while (0);
 } else {
  switch (i1 | 0) {
  case 163840:
   break;
  default:
   {
    i1 = 3;
    break L7;
   }
  }
  i3 = HEAP32[i13 + 28 >> 2] | 0;
  i4 = _FT_Stream_ReadUShort(i13, i15 + 4 | 0) | 0;
  i1 = HEAP32[i15 + 4 >> 2] | 0;
  L56 : do if (!i1) {
   if ((i4 & 65535) > 258 ? 1 : (i4 & 65535) > (HEAPU16[i14 + 264 >> 1] | 0)) {
    HEAP32[i15 + 4 >> 2] = 3;
    i1 = 3;
    break;
   }
   i2 = _ft_mem_realloc(i3, 1, 0, i4 & 65535, 0, i15 + 4 | 0) | 0;
   L61 : do if ((HEAP32[i15 + 4 >> 2] | 0) == 0 ? (i13 = _FT_Stream_Read(i13, i2, i4 & 65535) | 0, HEAP32[i15 + 4 >> 2] = i13, (i13 | 0) == 0) : 0) {
    L64 : do if (i4 << 16 >> 16) {
     i1 = 0;
     while (1) {
      if (((HEAP8[i2 + i1 >> 0] | 0) + i1 | 0) >>> 0 > (i4 & 65535) >>> 0) break;
      i1 = i1 + 1 | 0;
      if ((i1 | 0) >= (i4 & 65535 | 0)) break L64;
     }
     HEAP32[i15 + 4 >> 2] = 3;
     break L61;
    } while (0);
    HEAP16[i14 + 632 >> 1] = i4;
    HEAP32[i14 + 636 >> 2] = i2;
    i1 = 0;
    break L56;
   } while (0);
   _ft_mem_free(i3, i2);
   i1 = HEAP32[i15 + 4 >> 2] | 0;
  } while (0);
 } while (0);
 HEAP8[i14 + 628 >> 0] = 1;
 i14 = i1;
 STACKTOP = i15;
 return i14 | 0;
}

function _cff_operator_seac(i14, i12, i1, i2, i4, i3) {
 i14 = i14 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = HEAP32[i14 + 4 >> 2] | 0;
 if (HEAP8[i14 + 924 >> 0] | 0) {
  i14 = 160;
  STACKTOP = i15;
  return i14 | 0;
 }
 i11 = (HEAP32[i14 + 32 >> 2] | 0) + i1 | 0;
 i10 = (HEAP32[i14 + 36 >> 2] | 0) + i2 | 0;
 L4 : do if (!(HEAP32[(HEAP32[i13 + 128 >> 2] | 0) + 52 >> 2] | 0)) {
  i5 = HEAP32[i13 + 692 >> 2] | 0;
  i6 = HEAP32[i5 + 1160 >> 2] | 0;
  L6 : do if (!(i4 >>> 0 > 255 | (i6 | 0) == 0)) {
   if (i4 >>> 0 < 256) i2 = HEAP16[282624 + (i4 << 1) >> 1] | 0; else i2 = 0;
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   if (i1) {
    i4 = 0;
    while (1) {
     if ((HEAP16[i6 + (i4 << 1) >> 1] | 0) == i2 << 16 >> 16) break L6;
     i4 = i4 + 1 | 0;
     if (i4 >>> 0 >= i1 >>> 0) {
      i4 = -1;
      break;
     }
    }
   } else i4 = -1;
  } else i4 = -1; while (0);
  if (!(i3 >>> 0 > 255 | (i6 | 0) == 0)) {
   if (i3 >>> 0 < 256) i3 = HEAP16[282624 + (i3 << 1) >> 1] | 0; else i3 = 0;
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   if (i1) {
    i2 = 0;
    while (1) {
     if ((HEAP16[i6 + (i2 << 1) >> 1] | 0) == i3 << 16 >> 16) {
      i9 = i2;
      break L4;
     }
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 >= i1 >>> 0) {
      i9 = -1;
      break;
     }
    }
   } else i9 = -1;
  } else i9 = -1;
 } else i9 = i3; while (0);
 if ((i4 | i9 | 0) < 0) {
  i14 = 160;
  STACKTOP = i15;
  return i14 | 0;
 }
 do if (HEAP8[i14 + 66 >> 0] | 0) {
  i1 = HEAP32[i14 + 8 >> 2] | 0;
  i2 = HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0;
  i3 = _FT_GlyphLoader_CheckSubGlyphs(i2, 2) | 0;
  if (!i3) {
   i8 = HEAP32[i2 + 88 >> 2] | 0;
   HEAP32[i8 >> 2] = i4;
   HEAP16[i8 + 4 >> 1] = 514;
   HEAP32[i8 + 8 >> 2] = 0;
   HEAP32[i8 + 12 >> 2] = 0;
   HEAP32[i8 + 32 >> 2] = i9;
   HEAP16[i8 + 36 >> 1] = 2;
   HEAP32[i8 + 40 >> 2] = i11 >> 16;
   HEAP32[i8 + 44 >> 2] = i10 >> 16;
   HEAP32[i1 + 128 >> 2] = 2;
   HEAP32[i1 + 132 >> 2] = HEAP32[i2 + 52 >> 2];
   HEAP32[i1 + 72 >> 2] = 1668246896;
   HEAP32[i2 + 84 >> 2] = 2;
   break;
  } else {
   i14 = i3;
   STACKTOP = i15;
   return i14 | 0;
  }
 } while (0);
 _FT_GlyphLoader_Prepare(HEAP32[i14 + 12 >> 2] | 0);
 i1 = HEAP32[(HEAP32[i13 + 128 >> 2] | 0) + 52 >> 2] | 0;
 if (!i1) i1 = _cff_index_access_element((HEAP32[i13 + 692 >> 2] | 0) + 1176 | 0, i4, i15 + 4 | 0, i15) | 0; else {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 >> 2] >> 2] & 127](HEAP32[i1 + 4 >> 2] | 0, i4, i15 + 8 | 0) | 0;
  HEAP32[i15 + 4 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i15 >> 2] = HEAP32[i15 + 8 + 4 >> 2];
 }
 if (!i1) {
  HEAP8[i14 + 924 >> 0] = 1;
  i2 = HEAP32[i15 >> 2] | 0;
  i3 = _cff_decoder_parse_charstrings(i14, HEAP32[i15 + 4 >> 2] | 0, i2) | 0;
  HEAP8[i14 + 924 >> 0] = 0;
  i1 = HEAP32[(HEAP32[i13 + 128 >> 2] | 0) + 52 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i13 + 692 >> 2] | 0;
   if (!(HEAP32[i1 + 1204 >> 2] | 0)) _FT_Stream_ReleaseFrame(HEAP32[i1 + 1176 >> 2] | 0, i15 + 4 | 0);
  } else {
   HEAP32[i15 + 8 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i15 + 8 + 4 >> 2] = i2;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i1 + 4 >> 2] | 0, i15 + 8 | 0);
  }
  if (i3) {
   i14 = i3;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 i4 = HEAP32[i14 + 32 >> 2] | 0;
 i5 = HEAP32[i14 + 32 + 4 >> 2] | 0;
 i6 = HEAP32[i14 + 40 >> 2] | 0;
 i7 = HEAP32[i14 + 40 + 4 >> 2] | 0;
 i8 = HEAP32[i14 + 744 >> 2] | 0;
 HEAP32[i14 + 32 >> 2] = 0;
 HEAP32[i14 + 36 >> 2] = 0;
 HEAP32[i14 + 24 >> 2] = i11 - i12;
 HEAP32[i14 + 28 >> 2] = i10;
 i1 = HEAP32[(HEAP32[i13 + 128 >> 2] | 0) + 52 >> 2] | 0;
 if (!i1) i1 = _cff_index_access_element((HEAP32[i13 + 692 >> 2] | 0) + 1176 | 0, i9, i15 + 4 | 0, i15) | 0; else {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i1 >> 2] >> 2] & 127](HEAP32[i1 + 4 >> 2] | 0, i9, i15 + 8 | 0) | 0;
  HEAP32[i15 + 4 >> 2] = HEAP32[i15 + 8 >> 2];
  HEAP32[i15 >> 2] = HEAP32[i15 + 8 + 4 >> 2];
 }
 if (!i1) {
  HEAP8[i14 + 924 >> 0] = 1;
  i1 = HEAP32[i15 >> 2] | 0;
  i3 = _cff_decoder_parse_charstrings(i14, HEAP32[i15 + 4 >> 2] | 0, i1) | 0;
  HEAP8[i14 + 924 >> 0] = 0;
  i2 = HEAP32[(HEAP32[i13 + 128 >> 2] | 0) + 52 >> 2] | 0;
  if (!i2) {
   i1 = HEAP32[i13 + 692 >> 2] | 0;
   if (!(HEAP32[i1 + 1204 >> 2] | 0)) _FT_Stream_ReleaseFrame(HEAP32[i1 + 1176 >> 2] | 0, i15 + 4 | 0);
  } else {
   HEAP32[i15 + 8 >> 2] = HEAP32[i15 + 4 >> 2];
   HEAP32[i15 + 8 + 4 >> 2] = i1;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i2 + 4 >> 2] | 0, i15 + 8 | 0);
  }
  if (!i3) i1 = 0; else {
   i14 = i3;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 HEAP32[i14 + 32 >> 2] = i4;
 HEAP32[i14 + 32 + 4 >> 2] = i5;
 HEAP32[i14 + 40 >> 2] = i6;
 HEAP32[i14 + 40 + 4 >> 2] = i7;
 HEAP32[i14 + 744 >> 2] = i8;
 HEAP32[i14 + 24 >> 2] = 0;
 HEAP32[i14 + 28 >> 2] = 0;
 i14 = i1;
 STACKTOP = i15;
 return i14 | 0;
}

function _TT_Set_Var_Design(i17, i18, i10) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i19 >> 2] = 0;
 i16 = HEAP32[i17 + 100 >> 2] | 0;
 i1 = HEAP32[i17 + 712 >> 2] | 0;
 do if (!i1) {
  i15 = _TT_Get_MM_Var(i17, 0) | 0;
  HEAP32[i19 >> 2] = i15;
  if (!i15) {
   i1 = HEAP32[i17 + 712 >> 2] | 0;
   break;
  } else {
   i18 = 0;
   _ft_mem_free(i16, i18);
   i18 = HEAP32[i19 >> 2] | 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 } while (0);
 i15 = HEAP32[i1 + 8 >> 2] | 0;
 if ((HEAP32[i15 >> 2] | 0) != (i18 | 0)) {
  HEAP32[i19 >> 2] = 6;
  i18 = 0;
  _ft_mem_free(i16, i18);
  i18 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 i14 = _ft_mem_realloc(i16, 4, 0, i18, 0, i19) | 0;
 if (HEAP32[i19 >> 2] | 0) {
  i18 = i14;
  _ft_mem_free(i16, i18);
  i18 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 L14 : do if (HEAP32[i15 >> 2] | 0) {
  i7 = HEAP32[i15 + 12 >> 2] | 0;
  i8 = 0;
  while (1) {
   i9 = HEAP32[i10 + (i8 << 2) >> 2] | 0;
   i3 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i9 | 0) > (i3 | 0)) break;
   i4 = HEAP32[i7 + 4 >> 2] | 0;
   if ((i9 | 0) < (i4 | 0)) break;
   i5 = HEAP32[i7 + 8 >> 2] | 0;
   do if ((i9 | 0) >= (i5 | 0)) if ((i3 | 0) == (i5 | 0)) {
    HEAP32[i14 + (i8 << 2) >> 2] = 0;
    break;
   } else {
    HEAP32[i14 + (i8 << 2) >> 2] = _FT_MulDiv(i9 - i5 | 0, 65536, i3 - i5 | 0) | 0;
    break;
   } else HEAP32[i14 + (i8 << 2) >> 2] = 0 - (_FT_MulDiv(i9 - i5 | 0, 65536, i4 - i5 | 0) | 0); while (0);
   i8 = i8 + 1 | 0;
   if (i8 >>> 0 >= (HEAP32[i15 >> 2] | 0) >>> 0) break L14; else i7 = i7 + 24 | 0;
  }
  HEAP32[i19 >> 2] = 6;
  i18 = i14;
  _ft_mem_free(i16, i18);
  i18 = HEAP32[i19 >> 2] | 0;
  STACKTOP = i19;
  return i18 | 0;
 } while (0);
 if (((HEAP8[i1 + 16 >> 0] | 0) == 0 ? (i11 = HEAP32[i17 + 104 >> 2] | 0, i12 = HEAP32[i11 + 28 >> 2] | 0, i13 = HEAP32[i17 + 712 >> 2] | 0, HEAP8[i13 + 16 >> 0] = 1, i10 = FUNCTION_TABLE_iiiii[HEAP32[i17 + 508 >> 2] & 63](i17, 1635148146, i11, i19 + 4 | 0) | 0, HEAP32[i19 + 8 >> 2] = i10, (i10 | 0) == 0) : 0) ? (i10 = _FT_Stream_EnterFrame(i11, HEAP32[i19 + 4 >> 2] | 0) | 0, HEAP32[i19 + 8 >> 2] = i10, (i10 | 0) == 0) : 0) {
  i10 = _FT_Stream_GetULong(i11) | 0;
  i9 = _FT_Stream_GetULong(i11) | 0;
  L35 : do if (((i10 | 0) == 65536 ? (i9 | 0) == (HEAP32[HEAP32[i13 + 8 >> 2] >> 2] | 0) : 0) ? (i6 = _ft_mem_realloc(i12, 8, 0, i9, 0, i19 + 8 | 0) | 0, HEAP32[i13 + 20 >> 2] = i6, (i9 | 0) > 0 & (HEAP32[i19 + 8 >> 2] | 0) == 0) : 0) {
   i4 = 0;
   while (1) {
    i10 = _FT_Stream_GetUShort(i11) | 0;
    HEAP16[i6 >> 1] = i10;
    i3 = i6 + 4 | 0;
    HEAP32[i3 >> 2] = _ft_mem_realloc(i12, 8, 0, i10 & 65535, 0, i19 + 8 | 0) | 0;
    if (HEAP32[i19 + 8 >> 2] | 0) break;
    if (HEAP16[i6 >> 1] | 0) {
     i5 = 0;
     do {
      i10 = (_FT_Stream_GetUShort(i11) | 0) << 16 >> 16 << 2;
      HEAP32[(HEAP32[i3 >> 2] | 0) + (i5 << 3) >> 2] = i10;
      i10 = (_FT_Stream_GetUShort(i11) | 0) << 16 >> 16 << 2;
      HEAP32[(HEAP32[i3 >> 2] | 0) + (i5 << 3) + 4 >> 2] = i10;
      i5 = i5 + 1 | 0;
     } while ((i5 | 0) < (HEAPU16[i6 >> 1] | 0));
    }
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i9 | 0)) break L35; else i6 = i6 + 8 | 0;
   }
   if ((i4 | 0) > 0) {
    i3 = HEAP32[i13 + 20 >> 2] | 0;
    do {
     i10 = i4;
     i4 = i4 + -1 | 0;
     _ft_mem_free(i12, HEAP32[i3 + (i4 << 3) + 4 >> 2] | 0);
     i3 = HEAP32[i13 + 20 >> 2] | 0;
     HEAP32[i3 + (i4 << 3) + 4 >> 2] = 0;
    } while ((i10 | 0) > 1);
   } else i3 = HEAP32[i13 + 20 >> 2] | 0;
   _ft_mem_free(i12, i3);
   HEAP32[i13 + 20 >> 2] = 0;
  } while (0);
  _FT_Stream_ExitFrame(i11);
 }
 i1 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i2 = HEAP32[i15 >> 2] | 0, (i2 | 0) != 0) : 0) {
  i10 = 0;
  while (1) {
   i3 = HEAP16[i1 >> 1] | 0;
   L61 : do if ((i3 & 65535) > 1) {
    i5 = i14 + (i10 << 2) | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    i7 = i1 + 4 | 0;
    i8 = HEAP32[i7 >> 2] | 0;
    i4 = 1;
    while (1) {
     i9 = HEAP32[i8 + (i4 << 3) >> 2] | 0;
     if ((i6 | 0) < (i9 | 0)) {
      i2 = i4;
      break;
     }
     i4 = i4 + 1 | 0;
     if (i4 >>> 0 >= (i3 & 65535) >>> 0) break L61;
    }
    i12 = HEAP32[i8 + (i2 + -1 << 3) >> 2] | 0;
    i12 = _FT_MulDiv(i6 - i12 | 0, 65536, i9 - i12 | 0) | 0;
    i13 = HEAP32[i7 >> 2] | 0;
    i13 = _FT_MulDiv(i12, (HEAP32[i13 + (i2 << 3) + 4 >> 2] | 0) - (HEAP32[i13 + (i2 + -1 << 3) + 4 >> 2] | 0) | 0, 65536) | 0;
    HEAP32[i5 >> 2] = (HEAP32[(HEAP32[i7 >> 2] | 0) + (i2 + -1 << 3) + 4 >> 2] | 0) + i13;
    i2 = HEAP32[i15 >> 2] | 0;
   } while (0);
   i10 = i10 + 1 | 0;
   if (i10 >>> 0 >= i2 >>> 0) break; else i1 = i1 + 8 | 0;
  }
 }
 HEAP32[i19 >> 2] = _TT_Set_MM_Blend(i17, i18, i14) | 0;
 i18 = i14;
 _ft_mem_free(i16, i18);
 i18 = HEAP32[i19 >> 2] | 0;
 STACKTOP = i19;
 return i18 | 0;
}

function _tt_face_build_cmaps(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i9 = 4;
 i8 = _malloc(40) | 0;
 HEAP32[i8 >> 2] = 0;
 i4 = HEAP32[i7 + 500 >> 2] | 0;
 i6 = i4 + (HEAP32[i7 + 504 >> 2] | 0) | 0;
 HEAP32[i11 + 36 >> 2] = i4;
 if (!(HEAP32[i11 + 36 >> 2] | 0)) {
  _free(i8 | 0);
  STACKTOP = i11;
  return;
 }
 if (((HEAP32[i11 + 36 >> 2] | 0) + 4 | 0) >>> 0 > i6 >>> 0) {
  _free(i8 | 0);
  STACKTOP = i11;
  return;
 }
 HEAP32[i11 + 36 >> 2] = (HEAP32[i11 + 36 >> 2] | 0) + 2;
 i1 = HEAP32[i11 + 36 >> 2] | 0;
 if (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -1 >> 0] | 0 | (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -2 >> 0] | 0) << 8) {
  HEAP32[i11 + 36 >> 2] = i1 + -2;
  _free(i8 | 0);
  STACKTOP = i11;
  return;
 }
 HEAP32[i11 + 36 >> 2] = i1 + 2;
 HEAP32[i11 + 40 >> 2] = HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -1 >> 0] | 0 | (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -2 >> 0] | 0) << 8;
 if (!(HEAP32[i11 + 40 >> 2] | 0)) {
  _free(i8 | 0);
  STACKTOP = i11;
  return;
 }
 while (1) {
  if (((HEAP32[i11 + 36 >> 2] | 0) + 8 | 0) >>> 0 > i6 >>> 0) {
   i10 = 26;
   break;
  }
  HEAP32[i11 + 36 >> 2] = (HEAP32[i11 + 36 >> 2] | 0) + 2;
  HEAP16[i11 + 24 + 8 >> 1] = HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -1 >> 0] | 0 | (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -2 >> 0] | 0) << 8;
  HEAP32[i11 + 36 >> 2] = (HEAP32[i11 + 36 >> 2] | 0) + 2;
  HEAP16[i11 + 24 + 10 >> 1] = HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -1 >> 0] | 0 | (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -2 >> 0] | 0) << 8;
  HEAP32[i11 + 24 >> 2] = i7;
  HEAP32[i11 + 24 + 4 >> 2] = 0;
  HEAP32[i11 + 36 >> 2] = (HEAP32[i11 + 36 >> 2] | 0) + 4;
  i1 = (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -3 >> 0] | 0) << 16 | (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -4 >> 0] | 0) << 24 | (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -2 >> 0] | 0) << 8 | (HEAPU8[(HEAP32[i11 + 36 >> 2] | 0) + -1 >> 0] | 0);
  if ((i1 | 0) != 0 ? i1 >>> 0 <= ((HEAP32[i7 + 504 >> 2] | 0) + -2 | 0) >>> 0 : 0) {
   HEAP32[i11 + 20 >> 2] = i4 + i1;
   HEAP32[i11 + 16 >> 2] = HEAPU8[(HEAP32[i11 + 20 >> 2] | 0) + 1 >> 0] | 0 | (HEAPU8[HEAP32[i11 + 20 >> 2] >> 0] | 0) << 8;
   HEAP32[i11 + 12 >> 2] = 273212;
   L20 : do if (HEAP32[HEAP32[i11 + 12 >> 2] >> 2] | 0) {
    while (1) {
     HEAP32[i11 + 8 >> 2] = HEAP32[HEAP32[i11 + 12 >> 2] >> 2];
     if ((HEAP32[(HEAP32[i11 + 8 >> 2] | 0) + 40 >> 2] | 0) == (HEAP32[i11 + 16 >> 2] | 0)) break;
     HEAP32[i11 + 12 >> 2] = (HEAP32[i11 + 12 >> 2] | 0) + 4;
     if (!(HEAP32[HEAP32[i11 + 12 >> 2] >> 2] | 0)) break L20;
    }
    HEAP32[i11 + 4 >> 2] = 0;
    __THREW__ = 0;
    invoke_viiii(12, i11 + 48 | 0, HEAP32[i11 + 20 >> 2] | 0, i6 | 0, 0);
    i1 = __THREW__;
    __THREW__ = 0;
    if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
     i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i8 | 0, i9 | 0) | 0;
     if (!i2) _longjmp(i1 | 0, threwValue | 0);
     tempRet0 = threwValue;
    } else i2 = -1;
    if ((i2 | 0) != 1) {
     HEAP32[i11 + 48 + 172 >> 2] = HEAPU16[i7 + 264 >> 1];
     i8 = _saveSetjmp(i11 + 48 + 16 | 0, 1, i8 | 0, i9 | 0) | 0;
     i9 = tempRet0;
     __THREW__ = 0;
     i1 = __THREW__;
     __THREW__ = 0;
     if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
      i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i8 | 0, i9 | 0) | 0;
      if (!i2) _longjmp(i1 | 0, threwValue | 0);
      tempRet0 = threwValue;
     } else i2 = -1;
     if ((i2 | 0) != 1) i1 = 0; else i1 = tempRet0;
    } else i1 = tempRet0;
    while (1) {
     if (!i1) {
      __THREW__ = 0;
      i1 = invoke_iii(HEAP32[(HEAP32[i11 + 8 >> 2] | 0) + 44 >> 2] | 0, HEAP32[i11 + 20 >> 2] | 0, i11 + 48 | 0) | 0;
      i2 = __THREW__;
      __THREW__ = 0;
      if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
       i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i8 | 0, i9 | 0) | 0;
       if (!i3) _longjmp(i2 | 0, threwValue | 0);
       tempRet0 = threwValue;
      } else i3 = -1;
      if ((i3 | 0) == 1) {
       i1 = tempRet0;
       continue;
      }
      HEAP32[i11 + 4 >> 2] = i1;
     }
     if (HEAP32[i11 + 48 + 12 >> 2] | 0) break;
     __THREW__ = 0;
     i5 = invoke_iiiii(37, HEAP32[i11 + 8 >> 2] | 0, HEAP32[i11 + 20 >> 2] | 0, i11 + 24 | 0, i11 | 0) | 0;
     i1 = __THREW__;
     __THREW__ = 0;
     if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
      i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i8 | 0, i9 | 0) | 0;
      if (!i2) _longjmp(i1 | 0, threwValue | 0);
      tempRet0 = threwValue;
     } else i2 = -1;
     if ((i2 | 0) == 1) i1 = tempRet0; else {
      i10 = 20;
      break;
     }
    }
    if ((i10 | 0) == 20 ? (i10 = 0, (i5 | 0) == 0) : 0) HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] = HEAP32[i11 + 4 >> 2];
   } while (0);
  }
  HEAP32[i11 + 40 >> 2] = (HEAP32[i11 + 40 >> 2] | 0) + -1;
  if (!(HEAP32[i11 + 40 >> 2] | 0)) {
   i10 = 26;
   break;
  }
 }
 if ((i10 | 0) == 26) {
  _free(i8 | 0);
  STACKTOP = i11;
  return;
 }
}

function _parse_encoding(i9, i10) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = HEAP32[i10 + 8 >> 2] | 0;
 i3 = HEAP32[i9 + 488 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[i10 + 28 >> 2] & 127](i10);
 i4 = HEAP32[i10 >> 2] | 0;
 if (i4 >>> 0 >= i8 >>> 0) {
  HEAP32[i10 + 12 >> 2] = 3;
  STACKTOP = i11;
  return;
 }
 i1 = HEAP8[i4 >> 0] | 0;
 if (!(i1 << 24 >> 24 == 91 | ((i1 & 255) + -48 | 0) >>> 0 < 10)) {
  if ((i4 + 17 | 0) >>> 0 < i8 >>> 0 ? (_strncmp(i4, 324079, 16) | 0) == 0 : 0) {
   HEAP32[i9 + 368 >> 2] = 2;
   STACKTOP = i11;
   return;
  }
  if ((i4 + 15 | 0) >>> 0 < i8 >>> 0 ? (_strncmp(i4, 324096, 14) | 0) == 0 : 0) {
   HEAP32[i9 + 368 >> 2] = 4;
   STACKTOP = i11;
   return;
  }
  if ((i4 + 18 | 0) >>> 0 < i8 >>> 0 ? (_strncmp(i4, 324111, 17) | 0) == 0 : 0) {
   HEAP32[i9 + 368 >> 2] = 3;
   STACKTOP = i11;
   return;
  }
  HEAP32[i10 + 12 >> 2] = 162;
  STACKTOP = i11;
  return;
 }
 i2 = HEAP32[i10 + 16 >> 2] | 0;
 if (i1 << 24 >> 24 == 91) {
  HEAP32[i10 >> 2] = i4 + 1;
  i7 = 256;
  i5 = 1;
 } else {
  i7 = FUNCTION_TABLE_ii[HEAP32[i10 + 36 >> 2] & 63](i10) | 0;
  i5 = 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i10 + 28 >> 2] & 127](i10);
 if ((HEAP32[i10 >> 2] | 0) >>> 0 >= i8 >>> 0) {
  STACKTOP = i11;
  return;
 }
 HEAP32[i9 + 372 >> 2] = i7;
 HEAP32[i10 + 96 >> 2] = i7;
 HEAP32[i9 + 384 >> 2] = _ft_mem_realloc(i2, 2, 0, i7, 0, i11) | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if (!i1) {
  HEAP32[i9 + 388 >> 2] = _ft_mem_realloc(i2, 4, 0, i7, 0, i11) | 0;
  i1 = HEAP32[i11 >> 2] | 0;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i10 + 100 | 0, i7, i2) | 0;
   HEAP32[i11 >> 2] = i1;
   if (!i1) {
    if ((i7 | 0) > 0) {
     i1 = 0;
     do {
      FUNCTION_TABLE_iiiii[HEAP32[i10 + 144 >> 2] & 63](i10 + 100 | 0, i1, 323974, 8) | 0;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i7 | 0));
    }
    FUNCTION_TABLE_vi[HEAP32[i10 + 28 >> 2] & 127](i10);
    i1 = HEAP32[i10 >> 2] | 0;
    L40 : do if (i1 >>> 0 < i8 >>> 0) {
     i6 = i5 << 24 >> 24 == 0;
     i5 = i5 << 24 >> 24 != 0;
     i2 = 0;
     L42 : while (1) {
      i3 = HEAP8[i1 >> 0] | 0;
      switch (i3 << 24 >> 24) {
      case 93:
       {
        i2 = 22;
        break L42;
       }
      case 100:
       {
        i4 = i1 + 3 | 0;
        if ((i4 >>> 0 < i8 >>> 0 ? (HEAP8[i1 + 1 >> 0] | 0) == 101 : 0) ? (HEAP8[i1 + 2 >> 0] | 0) == 102 : 0) switch (HEAP8[i4 >> 0] | 0) {
        case 37:
        case 125:
        case 123:
        case 93:
        case 91:
        case 62:
        case 60:
        case 41:
        case 40:
        case 47:
        case 0:
        case 12:
        case 9:
        case 10:
        case 13:
        case 32:
         {
          i1 = i4;
          break L40;
         }
        default:
         {}
        }
        break;
       }
      default:
       {}
      }
      do if (i6 & ((i3 & 255) + -48 | 0) >>> 0 > 9) {
       FUNCTION_TABLE_vi[HEAP32[i10 + 32 >> 2] & 127](i10);
       if (!(HEAP32[i10 + 12 >> 2] | 0)) i3 = i1; else {
        i2 = 45;
        break L42;
       }
      } else {
       if (i5) i4 = i2; else {
        i4 = FUNCTION_TABLE_ii[HEAP32[i10 + 36 >> 2] & 63](i10) | 0;
        FUNCTION_TABLE_vi[HEAP32[i10 + 28 >> 2] & 127](i10);
        i1 = HEAP32[i10 >> 2] | 0;
        i3 = HEAP8[i1 >> 0] | 0;
       }
       if (!((i2 | 0) < (i7 | 0) & (i3 << 24 >> 24 == 47 & (i1 + 2 | 0) >>> 0 < i8 >>> 0))) if (i5) {
        i2 = 31;
        break L42;
       } else {
        i3 = i1;
        break;
       }
       i1 = i1 + 1 | 0;
       HEAP32[i10 >> 2] = i1;
       FUNCTION_TABLE_vi[HEAP32[i10 + 32 >> 2] & 127](i10);
       if (HEAP32[i10 + 12 >> 2] | 0) {
        i2 = 45;
        break L42;
       }
       i3 = (HEAP32[i10 >> 2] | 0) - i1 | 0;
       i12 = FUNCTION_TABLE_iiiii[HEAP32[i10 + 144 >> 2] & 63](i10 + 100 | 0, i4, i1, i3 + 1 | 0) | 0;
       HEAP32[i10 + 12 >> 2] = i12;
       if (i12) {
        i2 = 45;
        break L42;
       }
       HEAP8[(HEAP32[(HEAP32[i10 + 124 >> 2] | 0) + (i4 << 2) >> 2] | 0) + i3 >> 0] = 0;
       i3 = i1;
       i2 = i2 + 1 | 0;
      } while (0);
      FUNCTION_TABLE_vi[HEAP32[i10 + 28 >> 2] & 127](i10);
      i1 = HEAP32[i10 >> 2] | 0;
      if (i1 >>> 0 >= i8 >>> 0) {
       i1 = i3;
       break L40;
      }
     }
     if ((i2 | 0) == 22) {
      i1 = i1 + 1 | 0;
      break;
     } else if ((i2 | 0) == 31) {
      HEAP32[i10 + 12 >> 2] = 2;
      STACKTOP = i11;
      return;
     } else if ((i2 | 0) == 45) {
      STACKTOP = i11;
      return;
     }
    } else i1 = i4; while (0);
    HEAP32[i9 + 368 >> 2] = 1;
    HEAP32[i10 >> 2] = i1;
    STACKTOP = i11;
    return;
   }
  }
 }
 HEAP32[i10 + 12 >> 2] = i1;
 STACKTOP = i11;
 return;
}

function _Conic_To(i14, i3, i4, i2, i1) {
 i14 = i14 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 HEAP32[i14 + 52 >> 2] = i14 + 184;
 HEAP32[i14 + 200 >> 2] = HEAP32[i14 + 68 >> 2];
 i13 = HEAP32[i14 + 72 >> 2] | 0;
 HEAP32[i14 + 204 >> 2] = i13;
 HEAP32[i14 + 192 >> 2] = i3;
 HEAP32[i14 + 196 >> 2] = i4;
 HEAP32[i14 + 184 >> 2] = i2;
 HEAP32[i14 + 188 >> 2] = i1;
 i5 = i14 + 184 | 0;
 L1 : while (1) {
  i10 = i5 + 20 | 0;
  i11 = i5 + 12 | 0;
  i12 = i5 + 4 | 0;
  i8 = (i13 | 0) > (i1 | 0);
  do if (!((i4 | 0) < ((i8 ? i1 : i13) | 0) | (i4 | 0) > ((i8 ? i13 : i1) | 0))) {
   if ((i13 | 0) == (i1 | 0)) {
    HEAP32[i14 + 52 >> 2] = i5 + -16;
    break;
   }
   i9 = (i13 | 0) < (i1 | 0);
   i8 = i9 ? 1 : 2;
   i5 = HEAP32[i14 + 100 >> 2] | 0;
   if ((i5 | 0) != (i8 | 0)) {
    i3 = HEAP32[i14 + 4 >> 2] | 0;
    if (i9) i7 = ((i13 + -1 + i3 & 0 - i3) - i13 | 0) >= (HEAP32[i14 + 8 >> 2] | 0); else i7 = (i3 + -1 & i13 | 0) >= (HEAP32[i14 + 8 >> 2] | 0);
    if (i5) {
     i3 = HEAP32[i14 + 40 >> 2] | 0;
     i6 = HEAP32[i14 + 88 >> 2] | 0;
     i5 = i3 - (HEAP32[i6 + 8 >> 2] | 0) | 0;
     if ((i5 | 0) < 0) {
      i3 = 12;
      break L1;
     }
     if ((i5 | 0) > 0) {
      HEAP32[i6 + 16 >> 2] = i5 >> 2;
      do if (i7) {
       i5 = HEAP32[i6 + 12 >> 2] | 0;
       if (!(i5 & 8)) {
        HEAP32[i6 + 12 >> 2] = i5 | 32;
        break;
       } else {
        HEAP32[i6 + 12 >> 2] = i5 | 16;
        break;
       }
      } while (0);
      HEAP32[i14 + 88 >> 2] = i3;
      HEAP32[i14 + 40 >> 2] = i3 + 32;
      HEAP32[i3 + 16 >> 2] = 0;
      HEAP32[i3 + 8 >> 2] = i3 + 32;
      HEAP32[i6 + 28 >> 2] = i3;
      HEAP16[i14 + 84 >> 1] = (HEAP16[i14 + 84 >> 1] | 0) + 1 << 16 >> 16;
      i3 = i3 + 32 | 0;
     }
     if (i3 >>> 0 >= (HEAP32[i14 + 36 >> 2] | 0) >>> 0) {
      i3 = 20;
      break L1;
     }
     HEAP8[i14 + 87 >> 0] = 0;
    }
    if (!(HEAP32[i14 + 92 >> 2] | 0)) {
     i3 = HEAP32[i14 + 40 >> 2] | 0;
     HEAP32[i14 + 88 >> 2] = i3;
     HEAP32[i14 + 92 >> 2] = i3;
     HEAP32[i14 + 40 >> 2] = i3 + 32;
     i3 = i3 + 32 | 0;
    } else i3 = HEAP32[i14 + 40 >> 2] | 0;
    if (i3 >>> 0 >= (HEAP32[i14 + 36 >> 2] | 0) >>> 0) {
     i3 = 26;
     break L1;
    }
    i5 = HEAP32[i14 + 88 >> 2] | 0;
    HEAP32[i5 + 20 >> 2] = 0;
    HEAP32[i5 + 16 >> 2] = 0;
    HEAP32[i5 + 8 >> 2] = i3;
    HEAP32[i5 + 4 >> 2] = 0;
    HEAP32[i5 + 28 >> 2] = 0;
    i3 = HEAPU8[i14 + 180 >> 0] | 0;
    HEAP32[i5 + 12 >> 2] = i3;
    if (i9) {
     HEAP32[i5 + 12 >> 2] = i3 | 8;
     if (i7) HEAP32[i5 + 12 >> 2] = i3 | 40;
    } else if (i7) HEAP32[i5 + 12 >> 2] = i3 | 16;
    if (!(HEAP32[i14 + 96 >> 2] | 0)) HEAP32[i14 + 96 >> 2] = i5;
    HEAP32[i14 + 100 >> 2] = i8;
    HEAP8[i14 + 86 >> 0] = 1;
    HEAP8[i14 + 87 >> 0] = 0;
   }
   i3 = HEAP32[i14 + 76 >> 2] | 0;
   i5 = HEAP32[i14 + 80 >> 2] | 0;
   if (i9) if (!((_Bezier_Up(i14, 2, 80, i3, i5) | 0) << 24 >> 24)) break; else {
    i1 = 1;
    i3 = 44;
    break L1;
   }
   HEAP32[i12 >> 2] = 0 - i1;
   HEAP32[i11 >> 2] = 0 - i4;
   HEAP32[i10 >> 2] = 0 - i13;
   i13 = HEAP8[i14 + 86 >> 0] | 0;
   i3 = _Bezier_Up(i14, 2, 80, 0 - i5 | 0, 0 - i3 | 0) | 0;
   if (i13 << 24 >> 24 != 0 ? (HEAP8[i14 + 86 >> 0] | 0) == 0 : 0) {
    i13 = (HEAP32[i14 + 88 >> 2] | 0) + 20 | 0;
    HEAP32[i13 >> 2] = 0 - (HEAP32[i13 >> 2] | 0);
   }
   HEAP32[i12 >> 2] = 0 - (HEAP32[i12 >> 2] | 0);
   if (i3 << 24 >> 24) {
    i1 = 1;
    i3 = 44;
    break L1;
   }
  } else {
   i12 = i5 + 16 | 0;
   i8 = HEAP32[i12 >> 2] | 0;
   HEAP32[i5 + 32 >> 2] = i8;
   i3 = i5 + 8 | 0;
   i7 = HEAP32[i3 >> 2] | 0;
   HEAP32[i5 + 24 >> 2] = (i7 + i8 | 0) / 2 | 0;
   i6 = (i2 + i7 | 0) / 2 | 0;
   HEAP32[i3 >> 2] = i6;
   HEAP32[i12 >> 2] = (i6 + ((i7 + i8 | 0) / 2 | 0) | 0) / 2 | 0;
   HEAP32[i5 + 36 >> 2] = i13;
   i13 = (i4 + i13 | 0) / 2 | 0;
   HEAP32[i5 + 28 >> 2] = i13;
   i12 = (i1 + i4 | 0) / 2 | 0;
   HEAP32[i11 >> 2] = i12;
   HEAP32[i10 >> 2] = (i12 + i13 | 0) / 2 | 0;
   HEAP32[i14 + 52 >> 2] = i5 + 16;
  } while (0);
  i3 = HEAP32[i14 + 52 >> 2] | 0;
  if (i3 >>> 0 < (i14 + 184 | 0) >>> 0) {
   i3 = 43;
   break;
  }
  i5 = i3;
  i13 = HEAP32[i3 + 20 >> 2] | 0;
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  i4 = HEAP32[i3 + 12 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
 }
 if ((i3 | 0) == 12) {
  HEAP32[i14 + 44 >> 2] = 99;
  i14 = 1;
  return i14 | 0;
 } else if ((i3 | 0) == 20) {
  HEAP32[i14 + 44 >> 2] = 98;
  i14 = 1;
  return i14 | 0;
 } else if ((i3 | 0) == 26) {
  HEAP32[i14 + 44 >> 2] = 98;
  i14 = 1;
  return i14 | 0;
 } else if ((i3 | 0) == 43) {
  HEAP32[i14 + 68 >> 2] = i2;
  HEAP32[i14 + 72 >> 2] = i1;
  i14 = 0;
  return i14 | 0;
 } else if ((i3 | 0) == 44) return i1 | 0;
 return 0;
}

function __ZN5Input17OnNewFrameStartedEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 HEAP32[i5 + 720 >> 2] = (HEAP32[i5 + 720 >> 2] | 0) + 1;
 i4 = HEAP32[i5 + 376 + 4 >> 2] | 0;
 HEAP32[i5 + 356 >> 2] = HEAP32[i5 + 376 >> 2];
 HEAP32[i5 + 356 + 4 >> 2] = i4;
 HEAP32[i5 + 364 >> 2] = HEAP32[i5 + 384 >> 2];
 HEAP32[i5 + 368 >> 2] = HEAP32[i5 + 388 >> 2];
 HEAP32[i5 + 372 >> 2] = HEAP32[i5 + 392 >> 2];
 i4 = HEAP32[i5 + 432 + 4 >> 2] | 0;
 HEAP32[i5 + 440 >> 2] = HEAP32[i5 + 432 >> 2];
 HEAP32[i5 + 440 + 4 >> 2] = i4;
 switch (HEAP32[i5 + 404 >> 2] | 0) {
 case 1:
  {
   HEAP32[i5 + 404 >> 2] = 2;
   break;
  }
 case 3:
  {
   HEAP32[i5 + 404 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 i4 = HEAP32[i5 + 480 + 4 >> 2] | 0;
 HEAP32[i5 + 488 >> 2] = HEAP32[i5 + 480 >> 2];
 HEAP32[i5 + 488 + 4 >> 2] = i4;
 switch (HEAP32[i5 + 452 >> 2] | 0) {
 case 1:
  {
   HEAP32[i5 + 452 >> 2] = 2;
   break;
  }
 case 3:
  {
   HEAP32[i5 + 452 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 i4 = HEAP32[i5 + 528 + 4 >> 2] | 0;
 HEAP32[i5 + 536 >> 2] = HEAP32[i5 + 528 >> 2];
 HEAP32[i5 + 536 + 4 >> 2] = i4;
 switch (HEAP32[i5 + 500 >> 2] | 0) {
 case 1:
  {
   HEAP32[i5 + 500 >> 2] = 2;
   break;
  }
 case 3:
  {
   HEAP32[i5 + 500 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 i4 = HEAP32[i5 + 576 + 4 >> 2] | 0;
 HEAP32[i5 + 584 >> 2] = HEAP32[i5 + 576 >> 2];
 HEAP32[i5 + 584 + 4 >> 2] = i4;
 switch (HEAP32[i5 + 548 >> 2] | 0) {
 case 1:
  {
   HEAP32[i5 + 548 >> 2] = 2;
   break;
  }
 case 3:
  {
   HEAP32[i5 + 548 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 i4 = HEAP32[i5 + 624 + 4 >> 2] | 0;
 HEAP32[i5 + 632 >> 2] = HEAP32[i5 + 624 >> 2];
 HEAP32[i5 + 632 + 4 >> 2] = i4;
 switch (HEAP32[i5 + 596 >> 2] | 0) {
 case 1:
  {
   HEAP32[i5 + 596 >> 2] = 2;
   break;
  }
 case 3:
  {
   HEAP32[i5 + 596 >> 2] = 0;
   break;
  }
 default:
  {}
 }
 i1 = HEAP32[i5 + 652 >> 2] | 0;
 L21 : do if ((HEAP32[i5 + 656 >> 2] | 0) != (i1 | 0)) {
  i2 = 0;
  while (1) {
   i4 = i1 + (i2 * 48 | 0) + 32 | 0;
   i3 = HEAP32[i4 + 4 >> 2] | 0;
   i1 = i1 + (i2 * 48 | 0) + 40 | 0;
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i1 + 4 >> 2] = i3;
   i1 = HEAP32[i5 + 652 >> 2] | 0;
   i3 = i1 + (i2 * 48 | 0) + 4 | 0;
   switch (HEAP32[i3 >> 2] | 0) {
   case 1:
    {
     HEAP32[i3 >> 2] = 2;
     break;
    }
   case 3:
    {
     HEAP32[i3 >> 2] = 0;
     break;
    }
   case 0:
    {
     i4 = i1 + ((((i2 * 48 | 0) / 48 | 0) + 1 | 0) * 48 | 0) | 0;
     i3 = (HEAP32[i5 + 656 >> 2] | 0) - i4 | 0;
     _memmove(i1 + (i2 * 48 | 0) | 0, i4 | 0, i3 | 0) | 0;
     i1 = i1 + ((((i3 | 0) / 48 | 0) + i2 | 0) * 48 | 0) | 0;
     i3 = HEAP32[i5 + 656 >> 2] | 0;
     if ((i3 | 0) != (i1 | 0)) HEAP32[i5 + 656 >> 2] = i3 + (~(((i3 + -48 - i1 | 0) >>> 0) / 48 | 0) * 48 | 0);
     i1 = HEAP32[i5 + 652 >> 2] | 0;
     i2 = i2 + -1 | 0;
     break;
    }
   default:
    {}
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (((HEAP32[i5 + 656 >> 2] | 0) - i1 | 0) / 48 | 0) >>> 0) break L21;
  }
 } while (0);
 __ZNSt3__16__treeINS_12__value_typeIm15ControllerStateEENS_19__map_value_compareImS3_NS_4lessImEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(i5 + 664 | 0, HEAP32[i5 + 668 >> 2] | 0);
 HEAP32[i5 + 672 >> 2] = 0;
 HEAP32[i5 + 664 >> 2] = i5 + 668;
 HEAP32[i5 + 668 >> 2] = 0;
 i1 = HEAP32[i5 + 676 >> 2] | 0;
 if ((i1 | 0) == (i5 + 680 | 0)) {
  STACKTOP = i6;
  return;
 }
 i3 = i1;
 i2 = i1;
 while (1) {
  _memcpy(i6 | 0, i3 + 16 | 0, 224) | 0;
  HEAP32[i6 + 224 >> 2] = i5 + 668;
  HEAP32[i6 + 232 >> 2] = HEAP32[i6 + 224 >> 2];
  i3 = __ZNSt3__16__treeINS_12__value_typeIm15ControllerStateEENS_19__map_value_compareImS3_NS_4lessImEELb1EEENS_9allocatorIS3_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS3_PNS_11__tree_nodeIS3_SD_EEiEESG_RKT_(i5 + 664 | 0, i6 + 232 | 0, i6 + 228 | 0, i6) | 0;
  if (!(HEAP32[i3 >> 2] | 0)) {
   i1 = __Znwj(240) | 0;
   _memcpy(i1 + 16 | 0, i6 | 0, 224) | 0;
   i4 = HEAP32[i6 + 228 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = i4;
   HEAP32[i3 >> 2] = i1;
   i4 = HEAP32[HEAP32[i5 + 664 >> 2] >> 2] | 0;
   if (i4) {
    HEAP32[i5 + 664 >> 2] = i4;
    i1 = HEAP32[i3 >> 2] | 0;
   }
   __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i5 + 668 >> 2] | 0, i1);
   HEAP32[i5 + 672 >> 2] = (HEAP32[i5 + 672 >> 2] | 0) + 1;
  }
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  if (!i1) while (1) {
   i1 = HEAP32[i2 + 8 >> 2] | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break; else i2 = i1;
  } else while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) break; else i1 = i2;
  }
  if ((i1 | 0) == (i5 + 680 | 0)) break; else {
   i3 = i1;
   i2 = i1;
  }
 }
 STACKTOP = i6;
 return;
}

function _cff_index_get_pointers(i12, i14, i13) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i15 >> 2] = 0;
 i7 = HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] | 0;
 HEAP32[i14 >> 2] = 0;
 L1 : do if (!(HEAP32[i12 + 24 >> 2] | 0)) {
  HEAP32[i15 + 4 >> 2] = 0;
  i5 = HEAP32[i12 >> 2] | 0;
  i6 = HEAP32[i5 + 28 >> 2] | 0;
  i1 = HEAP32[i12 + 8 >> 2] | 0;
  do if (i1) {
   i2 = HEAPU8[i12 + 12 >> 0] | 0;
   i4 = Math_imul(i2, i1 + 1 | 0) | 0;
   HEAP32[i12 + 24 >> 2] = _ft_mem_realloc(i6, 4, 0, i1 + 1 | 0, 0, i15 + 4 | 0) | 0;
   if (((HEAP32[i15 + 4 >> 2] | 0) == 0 ? (i11 = _FT_Stream_Seek(i5, (HEAP32[i12 + 4 >> 2] | 0) + 3 | 0) | 0, HEAP32[i15 + 4 >> 2] = i11, (i11 | 0) == 0) : 0) ? (i11 = _FT_Stream_EnterFrame(i5, i4) | 0, HEAP32[i15 + 4 >> 2] = i11, (i11 | 0) == 0) : 0) {
    i1 = HEAP32[i12 + 24 >> 2] | 0;
    i3 = HEAP32[i5 + 32 >> 2] | 0;
    switch (i2 | 0) {
    case 1:
     {
      if ((i4 | 0) > 0) {
       i2 = i3;
       while (1) {
        HEAP32[i1 >> 2] = HEAPU8[i2 >> 0];
        i2 = i2 + 1 | 0;
        if (i2 >>> 0 >= (i3 + i4 | 0) >>> 0) break; else i1 = i1 + 4 | 0;
       }
      }
      break;
     }
    case 2:
     {
      if ((i4 | 0) > 0) {
       i2 = i3;
       while (1) {
        HEAP32[i1 >> 2] = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
        i2 = i2 + 2 | 0;
        if (i2 >>> 0 >= (i3 + i4 | 0) >>> 0) break; else i1 = i1 + 4 | 0;
       }
      }
      break;
     }
    case 3:
     {
      if ((i4 | 0) > 0) {
       i2 = i3;
       while (1) {
        HEAP32[i1 >> 2] = HEAPU8[i2 + 1 >> 0] << 8 | HEAP8[i2 >> 0] << 16 | HEAPU8[i2 + 2 >> 0];
        i2 = i2 + 3 | 0;
        if (i2 >>> 0 >= (i3 + i4 | 0) >>> 0) break; else i1 = i1 + 4 | 0;
       }
      }
      break;
     }
    default:
     if ((i4 | 0) > 0) {
      i2 = i3;
      while (1) {
       HEAP32[i1 >> 2] = HEAPU8[i2 + 1 >> 0] << 16 | HEAPU8[i2 >> 0] << 24 | HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
       i2 = i2 + 4 | 0;
       if (i2 >>> 0 >= (i3 + i4 | 0) >>> 0) break; else i1 = i1 + 4 | 0;
      }
     }
    }
    _FT_Stream_ExitFrame(i5);
    if (!(HEAP32[i15 + 4 >> 2] | 0)) break;
   }
   _ft_mem_free(i6, HEAP32[i12 + 24 >> 2] | 0);
   HEAP32[i12 + 24 >> 2] = 0;
   i11 = HEAP32[i15 + 4 >> 2] | 0;
   HEAP32[i15 >> 2] = i11;
   if (!i11) {
    i9 = i12 + 8 | 0;
    break L1;
   }
   i14 = HEAP32[i15 >> 2] | 0;
   STACKTOP = i15;
   return i14 | 0;
  } while (0);
  HEAP32[i15 >> 2] = 0;
  i9 = i12 + 8 | 0;
 } else i9 = i12 + 8 | 0; while (0);
 i1 = HEAP32[i9 >> 2] | 0;
 if (!i1) {
  i14 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i11 = _ft_mem_realloc(i7, 4, 0, i1 + 1 | 0, 0, i15) | 0;
 if (HEAP32[i15 >> 2] | 0) {
  i14 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (i13) {
  i1 = _ft_mem_alloc(i7, (HEAP32[i9 >> 2] | 0) + (HEAP32[i12 + 20 >> 2] | 0) | 0, i15) | 0;
  if (HEAP32[i15 >> 2] | 0) {
   i14 = HEAP32[i15 >> 2] | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 } else i1 = 0;
 i10 = HEAP32[i12 + 28 >> 2] | 0;
 i2 = (HEAP32[HEAP32[i12 + 24 >> 2] >> 2] | 0) + -1 | 0;
 i5 = HEAP32[i12 + 20 >> 2] | 0;
 i2 = i2 >>> 0 >= i5 >>> 0 ? 0 : i2;
 HEAP32[i11 >> 2] = ((i13 | 0) != 0 ? i1 : i10) + i2;
 i6 = HEAP32[i9 >> 2] | 0;
 L38 : do if (i6) {
  if (i13) {
   i5 = 0;
   i8 = 1;
  } else {
   i4 = 1;
   while (1) {
    i3 = (HEAP32[(HEAP32[i12 + 24 >> 2] | 0) + (i4 << 2) >> 2] | 0) + -1 | 0;
    if (!((i3 | 0) == 0 | i3 >>> 0 < i2 >>> 0) ? !(i4 >>> 0 < i6 >>> 0 & i3 >>> 0 >= i5 >>> 0) : 0) i2 = i3;
    HEAP32[i11 + (i4 << 2) >> 2] = i10 + i2;
    i4 = i4 + 1 | 0;
    if (i4 >>> 0 > i6 >>> 0) break L38;
   }
  }
  while (1) {
   i7 = (HEAP32[(HEAP32[i12 + 24 >> 2] | 0) + (i8 << 2) >> 2] | 0) + -1 | 0;
   if (!((i7 | 0) == 0 | i7 >>> 0 < i2 >>> 0) ? !(i8 >>> 0 < i6 >>> 0 ? i7 >>> 0 >= (HEAP32[i12 + 20 >> 2] | 0) >>> 0 : 0) : 0) {
    i3 = i1 + (i7 + i5) | 0;
    i4 = i11 + (i8 << 2) | 0;
    HEAP32[i4 >> 2] = i3;
    if ((i7 | 0) == (i2 | 0)) {
     i3 = i5;
     i2 = i7;
    } else {
     i6 = HEAP32[i11 + (i8 + -1 << 2) >> 2] | 0;
     _memcpy(i6 | 0, i10 + i2 | 0, i3 - i6 | 0) | 0;
     HEAP8[HEAP32[i4 >> 2] >> 0] = 0;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
     i6 = HEAP32[i9 >> 2] | 0;
     i3 = i5 + 1 | 0;
     i2 = i7;
    }
   } else {
    HEAP32[i11 + (i8 << 2) >> 2] = i1 + (i2 + i5);
    i3 = i5;
   }
   i8 = i8 + 1 | 0;
   if (i8 >>> 0 > i6 >>> 0) break; else i5 = i3;
  }
 } while (0);
 HEAP32[i14 >> 2] = i11;
 if (!i13) {
  i14 = HEAP32[i15 >> 2] | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 HEAP32[i13 >> 2] = i1;
 i14 = HEAP32[i15 >> 2] | 0;
 STACKTOP = i15;
 return i14 | 0;
}

function _afm_parser_read_vals(i8, i9, i7) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = HEAP32[i8 + 4 >> 2] | 0;
 if ((i7 + -1 | 0) >>> 0 > 4) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = 0;
 L4 : while (1) {
  i6 = HEAP32[i9 + (i1 << 3) >> 2] | 0;
  i3 = HEAP32[i10 + 12 >> 2] | 0;
  if (i6) {
   if ((i3 | 0) > 0) break;
   i2 = HEAP32[i10 >> 2] | 0;
   i4 = HEAP32[i10 + 8 >> 2] | 0;
   if (i2 >>> 0 >= i4 >>> 0) {
    i11 = 25;
    break;
   }
   L25 : while (1) {
    i5 = i2;
    i2 = i2 + 1 | 0;
    HEAP32[i10 >> 2] = i2;
    switch (HEAPU8[i5 >> 0] | 0 | 0) {
    case 10:
    case 13:
     {
      i11 = 23;
      break L4;
     }
    case 59:
     {
      i11 = 24;
      break L4;
     }
    case 26:
     {
      i11 = 25;
      break L4;
     }
    case 9:
    case 32:
     break;
    default:
     break L25;
    }
    if (i2 >>> 0 >= i4 >>> 0) {
     i11 = 25;
     break L4;
    }
   }
   L29 : while (1) {
    if (i2 >>> 0 >= i4 >>> 0) {
     i11 = 30;
     break;
    }
    i3 = i2 + 1 | 0;
    HEAP32[i10 >> 2] = i3;
    switch (HEAPU8[i2 >> 0] | 0 | 0) {
    case 26:
     {
      i2 = i3;
      i11 = 30;
      break L29;
     }
    case 9:
    case 32:
     {
      i2 = i3;
      break L29;
     }
    case 10:
    case 13:
     {
      i11 = 28;
      break L29;
     }
    case 59:
     {
      i11 = 29;
      break L29;
     }
    default:
     i2 = i3;
    }
   }
   if ((i11 | 0) == 28) {
    i11 = 0;
    HEAP32[i10 + 12 >> 2] = 2;
    i2 = i3;
   } else if ((i11 | 0) == 29) {
    i11 = 0;
    HEAP32[i10 + 12 >> 2] = 1;
    i2 = i3;
   } else if ((i11 | 0) == 30) {
    i11 = 0;
    HEAP32[i10 + 12 >> 2] = 3;
   }
   HEAP32[i12 + 4 >> 2] = i5;
   if (!i5) {
    i11 = 45;
    break;
   }
  } else {
   L8 : do if ((i3 | 0) > 0) i11 = 11; else {
    i2 = HEAP32[i10 >> 2] | 0;
    i4 = HEAP32[i10 + 8 >> 2] | 0;
    if (i2 >>> 0 >= i4 >>> 0) {
     i11 = 10;
     break L4;
    }
    L10 : while (1) {
     i5 = i2;
     i2 = i2 + 1 | 0;
     HEAP32[i10 >> 2] = i2;
     switch (HEAPU8[i5 >> 0] | 0 | 0) {
     case 10:
     case 13:
      {
       i11 = 8;
       break L4;
      }
     case 26:
      {
       i11 = 10;
       break L4;
      }
     case 59:
      break L10;
     case 9:
     case 32:
      break;
     default:
      {
       i11 = 11;
       break L8;
      }
     }
     if (i2 >>> 0 >= i4 >>> 0) {
      i11 = 10;
      break L4;
     }
    }
    HEAP32[i10 + 12 >> 2] = 1;
   } while (0);
   if ((i11 | 0) == 11) {
    i11 = 0;
    if ((i3 | 0) > 1) break;
    i4 = HEAP32[i10 + 8 >> 2] | 0;
    i2 = HEAP32[i10 >> 2] | 0;
   }
   i5 = i2 + -1 | 0;
   i3 = i2;
   L18 : while (1) {
    if (i3 >>> 0 >= i4 >>> 0) {
     i2 = i3;
     i3 = 3;
     break;
    }
    i2 = i3 + 1 | 0;
    HEAP32[i10 >> 2] = i2;
    i3 = HEAP8[i3 >> 0] | 0;
    switch (i3 & 255 | 0) {
    case 10:
    case 13:
     {
      i3 = 2;
      break L18;
     }
    default:
     {}
    }
    if (i3 << 24 >> 24 == 26) {
     i3 = 3;
     break;
    } else i3 = i2;
   }
   HEAP32[i10 + 12 >> 2] = i3;
   HEAP32[i12 + 4 >> 2] = i5;
  }
  i4 = i2 - i5 | 0;
  L38 : do switch (i6 | 0) {
  case 1:
  case 0:
   {
    i2 = _ft_mem_qalloc(HEAP32[i8 >> 2] | 0, i4, i12) | 0;
    i3 = i9 + (i1 << 3) + 4 | 0;
    HEAP32[i3 >> 2] = i2;
    if (!(HEAP32[i12 >> 2] | 0)) {
     _memcpy(i2 | 0, i5 | 0, i4 + -1 | 0) | 0;
     HEAP8[(HEAP32[i3 >> 2] | 0) + (i4 + -1) >> 0] = 0;
    }
    break;
   }
  case 2:
   {
    HEAP32[i9 + (i1 << 3) + 4 >> 2] = _PS_Conv_ToFixed(i12 + 4 | 0, i5 + (i4 + -1) | 0, 0) | 0;
    break;
   }
  case 3:
   {
    HEAP32[i9 + (i1 << 3) + 4 >> 2] = _PS_Conv_ToInt(i12 + 4 | 0, i5 + (i4 + -1) | 0) | 0;
    break;
   }
  case 4:
   {
    if ((i4 + -1 | 0) == 4) i2 = (_strncmp(i5, 326558, 4) | 0) == 0; else i2 = 0;
    HEAP8[i9 + (i1 << 3) + 4 >> 0] = i2 & 1;
    break;
   }
  case 5:
   {
    i2 = HEAP32[i8 + 12 >> 2] | 0;
    if (!i2) {
     HEAP32[i9 + (i1 << 3) + 4 >> 2] = 0;
     break L38;
    } else {
     HEAP32[i9 + (i1 << 3) + 4 >> 2] = FUNCTION_TABLE_iiii[i2 & 127](i5, i4 + -1 | 0, HEAP32[i8 + 16 >> 2] | 0) | 0;
     break L38;
    }
   }
  default:
   {}
  } while (0);
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= i7 >>> 0) {
   i11 = 45;
   break;
  }
 }
 if ((i11 | 0) == 8) HEAP32[i10 + 12 >> 2] = 2; else if ((i11 | 0) == 10) HEAP32[i10 + 12 >> 2] = 3; else if ((i11 | 0) == 23) HEAP32[i10 + 12 >> 2] = 2; else if ((i11 | 0) == 24) HEAP32[i10 + 12 >> 2] = 1; else if ((i11 | 0) == 25) HEAP32[i10 + 12 >> 2] = 3; else if ((i11 | 0) == 45) {
  STACKTOP = i12;
  return i1 | 0;
 }
 HEAP32[i12 + 4 >> 2] = 0;
 i11 = i1;
 STACKTOP = i12;
 return i11 | 0;
}

function __ZNK4math7Frustum23ComputeProjectionMatrixEv(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, f4 = f0, f5 = f0, f6 = f0, f7 = f0;
 i2 = HEAP32[i8 >> 2] | 0;
 if ((i2 | 0) != 0 ? (i3 = HEAP32[i8 + 4 >> 2] | 0, (i3 | 0) != 0) : 0) {
  L4 : do switch (i2 | 0) {
  case 2:
   switch (i3 | 0) {
   case 1:
    switch (HEAP32[i8 + 8 >> 2] | 0) {
    case 2:
     {
      f7 = Math_fround(HEAPF32[i8 + 48 >> 2]);
      f5 = Math_fround(HEAPF32[i8 + 52 >> 2]);
      f6 = Math_fround(Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i8 + 56 >> 2]) * Math_fround(.5)))) * Math_fround(2.0)) * Math_fround(HEAPF32[i8 + 48 >> 2]));
      f4 = Math_fround(HEAPF32[i8 + 60 >> 2]);
      if ((HEAP32[i8 >> 2] | 0) == 2) {
       f4 = Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(f4 * Math_fround(.5)))) * Math_fround(2.0));
       f4 = Math_fround(f4 * Math_fround(HEAPF32[i8 + 48 >> 2]));
      }
      __ZN4math8float4x417OpenGLPerspProjRHEffff(i1, f7, f5, f6, f4);
      return;
     }
    case 1:
     {
      f5 = Math_fround(HEAPF32[i8 + 48 >> 2]);
      f6 = Math_fround(HEAPF32[i8 + 52 >> 2]);
      f7 = Math_fround(Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i8 + 56 >> 2]) * Math_fround(.5)))) * Math_fround(2.0)) * Math_fround(HEAPF32[i8 + 48 >> 2]));
      f4 = Math_fround(HEAPF32[i8 + 60 >> 2]);
      if ((HEAP32[i8 >> 2] | 0) == 2) {
       f4 = Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(f4 * Math_fround(.5)))) * Math_fround(2.0));
       f4 = Math_fround(f4 * Math_fround(HEAPF32[i8 + 48 >> 2]));
      }
      __ZN4math8float4x417OpenGLPerspProjLHEffff(i1, f5, f6, f7, f4);
      return;
     }
    default:
     break L4;
    }
   case 2:
    switch (HEAP32[i8 + 8 >> 2] | 0) {
    case 2:
     {
      f5 = Math_fround(HEAPF32[i8 + 48 >> 2]);
      f6 = Math_fround(HEAPF32[i8 + 52 >> 2]);
      f7 = Math_fround(Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i8 + 56 >> 2]) * Math_fround(.5)))) * Math_fround(2.0)) * Math_fround(HEAPF32[i8 + 48 >> 2]));
      f4 = Math_fround(HEAPF32[i8 + 60 >> 2]);
      if ((HEAP32[i8 >> 2] | 0) == 2) {
       f4 = Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(f4 * Math_fround(.5)))) * Math_fround(2.0));
       f4 = Math_fround(f4 * Math_fround(HEAPF32[i8 + 48 >> 2]));
      }
      __ZN4math8float4x414D3DPerspProjRHEffff(i1, f5, f6, f7, f4);
      return;
     }
    case 1:
     {
      f5 = Math_fround(HEAPF32[i8 + 48 >> 2]);
      f6 = Math_fround(HEAPF32[i8 + 52 >> 2]);
      f7 = Math_fround(Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i8 + 56 >> 2]) * Math_fround(.5)))) * Math_fround(2.0)) * Math_fround(HEAPF32[i8 + 48 >> 2]));
      f4 = Math_fround(HEAPF32[i8 + 60 >> 2]);
      if ((HEAP32[i8 >> 2] | 0) == 2) {
       f4 = Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(f4 * Math_fround(.5)))) * Math_fround(2.0));
       f4 = Math_fround(f4 * Math_fround(HEAPF32[i8 + 48 >> 2]));
      }
      __ZN4math8float4x414D3DPerspProjLHEffff(i1, f5, f6, f7, f4);
      return;
     }
    default:
     break L4;
    }
   default:
    break L4;
   }
  case 1:
   switch (i3 | 0) {
   case 1:
    switch (HEAP32[i8 + 8 >> 2] | 0) {
    case 2:
     {
      __ZN4math8float4x417OpenGLOrthoProjRHEffff(i1, Math_fround(HEAPF32[i8 + 48 >> 2]), Math_fround(HEAPF32[i8 + 52 >> 2]), Math_fround(HEAPF32[i8 + 56 >> 2]), Math_fround(HEAPF32[i8 + 60 >> 2]));
      return;
     }
    case 1:
     {
      __ZN4math8float4x417OpenGLOrthoProjLHEffff(i1, Math_fround(HEAPF32[i8 + 48 >> 2]), Math_fround(HEAPF32[i8 + 52 >> 2]), Math_fround(HEAPF32[i8 + 56 >> 2]), Math_fround(HEAPF32[i8 + 60 >> 2]));
      return;
     }
    default:
     break L4;
    }
   case 2:
    switch (HEAP32[i8 + 8 >> 2] | 0) {
    case 2:
     {
      __ZN4math8float4x414D3DOrthoProjRHEffff(i1, Math_fround(HEAPF32[i8 + 48 >> 2]), Math_fround(HEAPF32[i8 + 52 >> 2]), Math_fround(HEAPF32[i8 + 56 >> 2]), Math_fround(HEAPF32[i8 + 60 >> 2]));
      return;
     }
    case 1:
     {
      __ZN4math8float4x414D3DOrthoProjLHEffff(i1, Math_fround(HEAPF32[i8 + 48 >> 2]), Math_fround(HEAPF32[i8 + 52 >> 2]), Math_fround(HEAPF32[i8 + 56 >> 2]), Math_fround(HEAPF32[i8 + 60 >> 2]));
      return;
     }
    default:
     break L4;
    }
   default:
    break L4;
   }
  default:
   {}
  } while (0);
  i2 = 740;
  i3 = i1 + 64 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  return;
 }
 i2 = 740;
 i3 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 return;
}

function _cff_face_done(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i8) return;
 i7 = HEAP32[i8 + 100 >> 2] | 0;
 i1 = HEAP32[i8 + 532 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i1 + 12 >> 2] & 127](i8);
 i6 = HEAP32[i8 + 692 >> 2] | 0;
 if (!i6) return;
 i5 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = HEAP32[i6 + 84 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 + 28 >> 2] | 0;
  if (HEAP32[i6 + 112 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i6 + 112 | 0);
  _ft_mem_free(i2, HEAP32[i6 + 108 >> 2] | 0);
  HEAP32[i6 + 84 >> 2] = 0;
  HEAP32[i6 + 84 + 4 >> 2] = 0;
  HEAP32[i6 + 84 + 8 >> 2] = 0;
  HEAP32[i6 + 84 + 12 >> 2] = 0;
  HEAP32[i6 + 84 + 16 >> 2] = 0;
  HEAP32[i6 + 84 + 20 >> 2] = 0;
  HEAP32[i6 + 84 + 24 >> 2] = 0;
  HEAP32[i6 + 84 + 28 >> 2] = 0;
 }
 i1 = HEAP32[i6 + 1208 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 + 28 >> 2] | 0;
  if (HEAP32[i6 + 1236 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i6 + 1236 | 0);
  _ft_mem_free(i2, HEAP32[i6 + 1232 >> 2] | 0);
  HEAP32[i6 + 1208 >> 2] = 0;
  HEAP32[i6 + 1208 + 4 >> 2] = 0;
  HEAP32[i6 + 1208 + 8 >> 2] = 0;
  HEAP32[i6 + 1208 + 12 >> 2] = 0;
  HEAP32[i6 + 1208 + 16 >> 2] = 0;
  HEAP32[i6 + 1208 + 20 >> 2] = 0;
  HEAP32[i6 + 1208 + 24 >> 2] = 0;
  HEAP32[i6 + 1208 + 28 >> 2] = 0;
 }
 i1 = HEAP32[i6 + 20 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 + 28 >> 2] | 0;
  if (HEAP32[i6 + 48 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i6 + 48 | 0);
  _ft_mem_free(i2, HEAP32[i6 + 44 >> 2] | 0);
  HEAP32[i6 + 20 >> 2] = 0;
  HEAP32[i6 + 20 + 4 >> 2] = 0;
  HEAP32[i6 + 20 + 8 >> 2] = 0;
  HEAP32[i6 + 20 + 12 >> 2] = 0;
  HEAP32[i6 + 20 + 16 >> 2] = 0;
  HEAP32[i6 + 20 + 20 >> 2] = 0;
  HEAP32[i6 + 20 + 24 >> 2] = 0;
  HEAP32[i6 + 20 + 28 >> 2] = 0;
 }
 i1 = HEAP32[i6 + 1176 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 + 28 >> 2] | 0;
  if (HEAP32[i6 + 1204 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i6 + 1204 | 0);
  _ft_mem_free(i2, HEAP32[i6 + 1200 >> 2] | 0);
  HEAP32[i6 + 1176 >> 2] = 0;
  HEAP32[i6 + 1176 + 4 >> 2] = 0;
  HEAP32[i6 + 1176 + 8 >> 2] = 0;
  HEAP32[i6 + 1176 + 12 >> 2] = 0;
  HEAP32[i6 + 1176 + 16 >> 2] = 0;
  HEAP32[i6 + 1176 + 20 >> 2] = 0;
  HEAP32[i6 + 1176 + 24 >> 2] = 0;
  HEAP32[i6 + 1176 + 28 >> 2] = 0;
 }
 i1 = HEAP32[i6 + 1896 >> 2] | 0;
 if (i1) {
  i4 = 0;
  do {
   i3 = HEAP32[i6 + 1900 + (i4 << 2) >> 2] | 0;
   if (i3) {
    i1 = HEAP32[i3 + 536 >> 2] | 0;
    if (i1) {
     i2 = HEAP32[i1 + 28 >> 2] | 0;
     if (HEAP32[i3 + 564 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i3 + 564 | 0);
     _ft_mem_free(i2, HEAP32[i3 + 560 >> 2] | 0);
     HEAP32[i3 + 536 >> 2] = 0;
     HEAP32[i3 + 536 + 4 >> 2] = 0;
     HEAP32[i3 + 536 + 8 >> 2] = 0;
     HEAP32[i3 + 536 + 12 >> 2] = 0;
     HEAP32[i3 + 536 + 16 >> 2] = 0;
     HEAP32[i3 + 536 + 20 >> 2] = 0;
     HEAP32[i3 + 536 + 24 >> 2] = 0;
     HEAP32[i3 + 536 + 28 >> 2] = 0;
    }
    _ft_mem_free(i5, HEAP32[i3 + 568 >> 2] | 0);
    HEAP32[i3 + 568 >> 2] = 0;
    i1 = HEAP32[i6 + 1896 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while (i4 >>> 0 < i1 >>> 0);
  _ft_mem_free(i5, HEAP32[i6 + 1900 >> 2] | 0);
  HEAP32[i6 + 1900 >> 2] = 0;
 }
 HEAP32[i6 + 116 >> 2] = 0;
 HEAP32[i6 + 120 >> 2] = 0;
 HEAP32[i6 + 124 >> 2] = 0;
 i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] | 0;
 _ft_mem_free(i1, HEAP32[i6 + 1164 >> 2] | 0);
 HEAP32[i6 + 1164 >> 2] = 0;
 HEAP32[i6 + 1168 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i6 + 1160 >> 2] | 0);
 HEAP32[i6 + 1160 >> 2] = 0;
 HEAP32[i6 + 1152 >> 2] = 0;
 HEAP32[i6 + 1156 >> 2] = 0;
 i1 = HEAP32[i6 + 1860 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 + 28 >> 2] | 0;
  if (HEAP32[i6 + 1888 >> 2] | 0) _FT_Stream_ReleaseFrame(i1, i6 + 1888 | 0);
  _ft_mem_free(i2, HEAP32[i6 + 1884 >> 2] | 0);
  HEAP32[i6 + 1860 >> 2] = 0;
  HEAP32[i6 + 1860 + 4 >> 2] = 0;
  HEAP32[i6 + 1860 + 8 >> 2] = 0;
  HEAP32[i6 + 1860 + 12 >> 2] = 0;
  HEAP32[i6 + 1860 + 16 >> 2] = 0;
  HEAP32[i6 + 1860 + 20 >> 2] = 0;
  HEAP32[i6 + 1860 + 24 >> 2] = 0;
  HEAP32[i6 + 1860 + 28 >> 2] = 0;
 }
 _ft_mem_free(i5, HEAP32[i6 + 1892 >> 2] | 0);
 HEAP32[i6 + 1892 >> 2] = 0;
 if (HEAP32[i6 + 2932 >> 2] | 0) _FT_Stream_ReleaseFrame(HEAP32[i6 >> 2] | 0, i6 + 2932 | 0);
 HEAP32[i6 + 2936 >> 2] = 0;
 HEAP8[i6 + 2924 >> 0] = 0;
 HEAP32[i6 + 2928 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 2960 >> 2] | 0);
 HEAP32[i6 + 2960 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 1304 >> 2] | 0);
 HEAP32[i6 + 1304 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 1308 >> 2] | 0);
 HEAP32[i6 + 1308 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 1316 >> 2] | 0);
 HEAP32[i6 + 1316 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 1320 >> 2] | 0);
 HEAP32[i6 + 1320 >> 2] = 0;
 _ft_mem_free(i7, HEAP32[i8 + 692 >> 2] | 0);
 HEAP32[i8 + 692 >> 2] = 0;
 return;
}

function _main() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 288034, i11);
 i7 = __Znwj(2632) | 0;
 __ZN11ApplicationC2Ev(i7);
 HEAP32[52] = i7;
 __ZN5Input4InitEv(i7 + 448 | 0);
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 288053, i11 + 8 | 0);
 if ((HEAP8[8] | 0) == 0 ? (___cxa_guard_acquire(8) | 0) != 0 : 0) {
  i7 = _emscripten_run_script_string(288081) | 0;
  HEAP32[53] = 0;
  HEAP32[54] = 0;
  HEAP32[55] = 0;
  HEAP32[56] = 0;
  __ZN6String3SetEPKc(212, i7);
  ___cxa_atexit(68, 212, ___dso_handle | 0) | 0;
  ___cxa_guard_release(8);
 }
 i7 = _emscripten_run_script_string(288095) | 0;
 HEAP32[i11 + 88 >> 2] = 0;
 HEAP32[i11 + 88 + 4 >> 2] = 0;
 HEAP32[i11 + 88 + 8 >> 2] = 0;
 HEAP32[i11 + 88 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i11 + 88 | 0, i7);
 if ((HEAP8[16] | 0) == 0 ? (___cxa_guard_acquire(16) | 0) != 0 : 0) {
  HEAP32[i11 + 72 >> 2] = 0;
  HEAP32[i11 + 72 + 4 >> 2] = 0;
  HEAP32[i11 + 72 + 8 >> 2] = 0;
  HEAP32[i11 + 72 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i11 + 72 | 0, HEAP32[i11 + 88 >> 2] | 0);
  __ZNK6String5SplitEPKc(228, i11 + 72 | 0, 288129);
  i1 = HEAP32[i11 + 72 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i11 + 72 >> 2] = 0;
  ___cxa_atexit(69, 228, ___dso_handle | 0) | 0;
  ___cxa_guard_release(16);
 }
 if ((HEAP8[24] | 0) == 0 ? (___cxa_guard_acquire(24) | 0) != 0 : 0) {
  HEAP32[61] = 0;
  HEAP32[62] = 0;
  HEAP32[63] = 0;
  HEAP32[64] = 0;
  ___cxa_atexit(70, 244, ___dso_handle | 0) | 0;
  ___cxa_guard_release(24);
 }
 i6 = HEAP32[53] | 0;
 i1 = HEAP32[64] | 0;
 i2 = HEAP32[63] | 0;
 if (i1 >>> 0 >= i2 >>> 0 ? (i5 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i5 >>> 0 >= i2 >>> 0) : 0) {
  i4 = __Znaj(i5 >>> 0 > 1073741823 ? -1 : i5 << 2) | 0;
  i3 = HEAP32[61] | 0;
  if (!i1) if (!i3) i1 = 0; else i9 = 17; else {
   i2 = 0;
   do {
    HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i3 + (i2 << 2) >> 2];
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i1 | 0));
   i9 = 17;
  }
  if ((i9 | 0) == 17) {
   __ZdaPv(i3);
   i1 = HEAP32[64] | 0;
  }
  HEAP32[61] = i4;
  HEAP32[63] = i5;
  i2 = i5;
 }
 HEAP32[(HEAP32[61] | 0) + (i1 << 2) >> 2] = i6;
 i1 = i1 + 1 | 0;
 HEAP32[64] = i1;
 i3 = HEAP32[60] | 0;
 if (i3) {
  i7 = 0;
  do {
   i6 = HEAP32[(HEAP32[57] | 0) + (i7 << 4) >> 2] | 0;
   if (i1 >>> 0 >= i2 >>> 0 ? (i8 = i2 << 1, i8 = i8 >>> 0 < 32 ? 32 : i8, i8 >>> 0 >= i2 >>> 0) : 0) {
    i5 = __Znaj(i8 >>> 0 > 1073741823 ? -1 : i8 << 2) | 0;
    i4 = HEAP32[61] | 0;
    if (!i1) if (!i4) i1 = 0; else i9 = 25; else {
     i2 = 0;
     do {
      HEAP32[i5 + (i2 << 2) >> 2] = HEAP32[i4 + (i2 << 2) >> 2];
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i1 | 0));
     i9 = 25;
    }
    if ((i9 | 0) == 25) {
     i9 = 0;
     __ZdaPv(i4);
     i3 = HEAP32[60] | 0;
     i1 = HEAP32[64] | 0;
    }
    HEAP32[61] = i5;
    HEAP32[63] = i8;
    i2 = i8;
   }
   HEAP32[(HEAP32[61] | 0) + (i1 << 2) >> 2] = i6;
   i1 = i1 + 1 | 0;
   HEAP32[64] = i1;
   i7 = i7 + 1 | 0;
  } while (i7 >>> 0 < i3 >>> 0);
 }
 if (i1 >>> 0 >= i2 >>> 0 ? (i10 = i2 << 1, i10 = i10 >>> 0 < 32 ? 32 : i10, i10 >>> 0 >= i2 >>> 0) : 0) {
  i4 = __Znaj(i10 >>> 0 > 1073741823 ? -1 : i10 << 2) | 0;
  i3 = HEAP32[61] | 0;
  if (!i1) if (!i3) i1 = 0; else i9 = 33; else {
   i2 = 0;
   do {
    HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i3 + (i2 << 2) >> 2];
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i1 | 0));
   i9 = 33;
  }
  if ((i9 | 0) == 33) {
   __ZdaPv(i3);
   i1 = HEAP32[64] | 0;
  }
  HEAP32[61] = i4;
  HEAP32[63] = i10;
 }
 HEAP32[(HEAP32[61] | 0) + (i1 << 2) >> 2] = 0;
 HEAP32[64] = i1 + 1;
 __ZN14ProgramOptionsC2EiPPKcS2_(i11 + 8 | 0, i1, 0, HEAP32[61] | 0);
 i4 = HEAP32[52] | 0;
 FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 255](i4, i11 + 8 | 0) | 0;
 i4 = __ZNK8Graphics20PresentationIntervalEv((HEAP32[52] | 0) + 4 | 0) | 0;
 _emscripten_set_main_loop(2, 0, 0);
 _emscripten_set_main_loop_timing(((i4 | 0) == 0 ? 2 : 1) | 0, i4 | 0) | 0;
 _atexit(3) | 0;
 i4 = i11 + 8 + 44 | 0;
 i3 = HEAP32[i11 + 8 + 56 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i3) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 << 2) >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 __ZN5ArrayI6String9StdCAllocED2Ev(i11 + 8 + 28 | 0);
 __ZN5ArrayI6String9StdCAllocED2Ev(i11 + 8 + 12 | 0);
 i1 = HEAP32[i11 + 88 >> 2] | 0;
 if (!i1) {
  STACKTOP = i11;
  return 0;
 }
 __ZdaPv(i1);
 STACKTOP = i11;
 return 0;
}

function __ZN12FTGlyphCache12LoadFontFaceER4Filei(i13, i12, i11) {
 i13 = i13 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i10 = HEAP32[i12 + 4 >> 2] | 0;
 i1 = HEAP32[i13 + 8 >> 2] | 0;
 L1 : do if ((i1 | 0) != (i13 + 4 | 0)) {
  if (!i10) {
   i3 = i1;
   i2 = i1;
   while (1) {
    i1 = i3 + 8 | 0;
    i8 = HEAP32[i1 >> 2] | 0;
    if (!((i8 | 0) != 0 ? (HEAP8[i8 >> 0] | 0) != 0 : 0)) i9 = 17;
    if ((i9 | 0) == 17 ? (i9 = 0, (HEAP32[i3 + 24 >> 2] | 0) == (i11 | 0)) : 0) break;
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    i3 = i2;
    if ((i3 | 0) == (i13 + 4 | 0)) break L1;
   }
   STACKTOP = i14;
   return i1 | 0;
  } else {
   i8 = i1;
   i7 = i1;
  }
  while (1) {
   i1 = i7 + 8 | 0;
   i4 = HEAP32[i1 >> 2] | 0;
   L14 : do if ((i4 | 0) != (i10 | 0)) {
    i2 = HEAP8[i10 >> 0] | 0;
    if (!(i2 << 24 >> 24)) {
     if (!i4) {
      i9 = 13;
      break;
     }
     if (!(HEAP8[i4 >> 0] | 0)) {
      i9 = 13;
      break;
     } else i3 = 0;
    } else if (!i4) break; else i3 = i2;
    i5 = HEAP8[i4 >> 0] | 0;
    i2 = i3 << 24 >> 24 == 0;
    if (i5 << 24 >> 24) {
     i6 = i10;
     do {
      if (i2) break L14;
      i6 = i6 + 1 | 0;
      if (i5 << 24 >> 24 != i3 << 24 >> 24) break L14;
      i4 = i4 + 1 | 0;
      i3 = HEAP8[i6 >> 0] | 0;
      i5 = HEAP8[i4 >> 0] | 0;
      i2 = i3 << 24 >> 24 == 0;
     } while (i5 << 24 >> 24 != 0);
    }
    if (i2) i9 = 13;
   } else i9 = 13; while (0);
   if ((i9 | 0) == 13 ? (i9 = 0, (HEAP32[i7 + 24 >> 2] | 0) == (i11 | 0)) : 0) break;
   i8 = HEAP32[i8 + 4 >> 2] | 0;
   i7 = i8;
   if ((i7 | 0) == (i13 + 4 | 0)) break L1;
  }
  STACKTOP = i14;
  return i1 | 0;
 } while (0);
 HEAP32[i14 + 8 >> 2] = 0;
 HEAP32[i14 + 8 + 4 >> 2] = 0;
 HEAP32[i14 + 8 + 8 >> 2] = 0;
 HEAP32[i14 + 8 + 12 >> 2] = 0;
 i7 = i14 + 8 + 24 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 0;
 do if ((i14 + 8 | 0) != (i12 + 4 | 0)) {
  if (!i10) {
   HEAP32[i14 + 8 + 8 >> 2] = 0;
   HEAP32[i14 + 8 + 4 >> 2] = 0;
   break;
  }
  i1 = HEAP32[i12 + 12 >> 2] | 0;
  do if ((i1 | 0) > -1) if (!(i1 + 1 | 0)) {
   HEAP32[i14 + 8 >> 2] = 0;
   i2 = 0;
   break;
  } else {
   i2 = __Znaj((i1 + 1 | 0) > -1 ? i1 + 1 | 0 : -1) | 0;
   HEAP32[i14 + 8 + 12 >> 2] = i1 + 1;
   HEAP8[i2 >> 0] = 0;
   HEAP32[i14 + 8 >> 2] = i2;
   break;
  } else i2 = 0; while (0);
  _memcpy(i2 | 0, i10 | 0, i1 + 1 | 0) | 0;
  HEAP32[i14 + 8 + 8 >> 2] = i1;
  HEAP32[i14 + 8 + 4 >> 2] = HEAP32[i12 + 8 >> 2];
 } while (0);
 HEAP32[i14 + 8 + 16 >> 2] = i11;
 HEAP32[i14 + 8 + 20 >> 2] = 0;
 i10 = __Znwj(56) | 0;
 __ZN6FTFontC2ERKS_(i10 + 8 | 0, i14 + 8 | 0);
 HEAP32[i10 + 4 >> 2] = i13 + 4;
 i8 = HEAP32[i13 + 4 >> 2] | 0;
 HEAP32[i10 >> 2] = i8;
 HEAP32[i8 + 4 >> 2] = i10;
 HEAP32[i13 + 4 >> 2] = i10;
 HEAP32[i13 + 12 >> 2] = (HEAP32[i13 + 12 >> 2] | 0) + 1;
 __ZN4File21ReadWholeFileToMemoryERNSt3__16vectorIhNS0_9allocatorIhEEEE(i12, i10 + 44 | 0) | 0;
 i8 = HEAP32[i10 + 44 >> 2] | 0;
 if (!(_FT_New_Memory_Face(HEAP32[i13 >> 2] | 0, i8, (HEAP32[i10 + 48 >> 2] | 0) - i8 | 0, i11, i10 + 28 | 0) | 0)) i6 = (HEAP32[i13 + 4 >> 2] | 0) + 8 | 0; else {
  HEAP32[i14 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i14 + 4 >> 2] = i11;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 289760, i14);
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  i12 = HEAP32[i6 >> 2] | 0;
  HEAP32[i12 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[HEAP32[i6 + 4 >> 2] >> 2] = i12;
  HEAP32[i13 + 12 >> 2] = (HEAP32[i13 + 12 >> 2] | 0) + -1;
  __ZN6FTFontD2Ev(i6 + 8 | 0);
  __ZdlPv(i6);
  i6 = 0;
 }
 i1 = HEAP32[i14 + 8 + 36 >> 2] | 0;
 if (i1) {
  if ((HEAP32[i14 + 8 + 40 >> 2] | 0) != (i1 | 0)) HEAP32[i14 + 8 + 40 >> 2] = i1;
  __ZdlPv(i1);
 }
 i2 = HEAP32[i14 + 8 + 28 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i2 + 1 | 0) >>> 0 > 1) {
  i5 = 0;
  do {
   i4 = i1 + (i5 << 2) | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if (i3) {
    i2 = i4;
    do {
     HEAP32[i2 >> 2] = HEAP32[i3 + 64 >> 2];
     __ZdlPv(i3);
     i1 = HEAP32[i7 >> 2] | 0;
     i2 = i1 + (i5 << 2) | 0;
     i3 = HEAP32[i2 >> 2] | 0;
    } while ((i3 | 0) != 0);
    i2 = HEAP32[i14 + 8 + 28 >> 2] | 0;
   }
   i5 = i5 + 1 | 0;
  } while (i5 >>> 0 < ((i2 | 0) == 0 ? 0 : i2 + 1 | 0) >>> 0);
 }
 HEAP32[i14 + 8 + 32 >> 2] = 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i14 + 8 + 28 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i1 = HEAP32[i14 + 8 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 i13 = i6;
 STACKTOP = i14;
 return i13 | 0;
}

function _ps_unicodes_init(i12, i14, i13, i8, i7, i9) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i1 = i15 + 40 | 0;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i14 + 16 >> 2] = 0;
 HEAP32[i14 + 20 >> 2] = 0;
 i1 = _ft_mem_realloc(i12, 8, 0, i13 + 10 | 0, 0, i15 + 80 | 0) | 0;
 HEAP32[i14 + 20 >> 2] = i1;
 i2 = HEAP32[i15 + 80 >> 2] | 0;
 if (i2) {
  i14 = i2;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (i13) {
  i5 = 0;
  do {
   i4 = FUNCTION_TABLE_iii[i8 & 255](i9, i5) | 0;
   if (i4) {
    if (_strcmp(331100, i4) | 0) if (_strcmp(331106, i4) | 0) if (_strcmp(331112, i4) | 0) if (_strcmp(331121, i4) | 0) if (_strcmp(331128, i4) | 0) if (_strcmp(331135, i4) | 0) if (_strcmp(331138, i4) | 0) if (_strcmp(331153, i4) | 0) if (_strcmp(331159, i4) | 0) {
     if (!(_strcmp(331172, i4) | 0)) {
      i10 = 9;
      i11 = 7;
     }
    } else {
     i10 = 8;
     i11 = 7;
    } else {
     i10 = 7;
     i11 = 7;
    } else {
     i10 = 6;
     i11 = 7;
    } else {
     i10 = 5;
     i11 = 7;
    } else {
     i10 = 4;
     i11 = 7;
    } else {
     i10 = 3;
     i11 = 7;
    } else {
     i10 = 2;
     i11 = 7;
    } else {
     i10 = 1;
     i11 = 7;
    } else {
     i10 = 0;
     i11 = 7;
    }
    if ((i11 | 0) == 7 ? (i11 = 0, i6 = i15 + 40 + (i10 << 2) | 0, (HEAP32[i6 >> 2] | 0) == 0) : 0) {
     HEAP32[i6 >> 2] = 1;
     HEAP32[i15 + (i10 << 2) >> 2] = i5;
    }
    i2 = _ps_unicode_value(i4) | 0;
    if (i2 & 2147483647) {
     if ((i2 | 0) != 916) if ((i2 | 0) != 937) if ((i2 | 0) != 8725) if ((i2 | 0) != 173) if ((i2 | 0) != 713) if ((i2 | 0) != 956) if ((i2 | 0) != 8729) if ((i2 | 0) != 160) if ((i2 | 0) != 538) {
      if ((i2 | 0) == 539) {
       i3 = 9;
       i11 = 20;
      }
     } else {
      i3 = 8;
      i11 = 20;
     } else {
      i3 = 7;
      i11 = 20;
     } else {
      i3 = 6;
      i11 = 20;
     } else {
      i3 = 5;
      i11 = 20;
     } else {
      i3 = 4;
      i11 = 20;
     } else {
      i3 = 3;
      i11 = 20;
     } else {
      i3 = 2;
      i11 = 20;
     } else {
      i3 = 1;
      i11 = 20;
     } else {
      i3 = 0;
      i11 = 20;
     }
     if ((i11 | 0) == 20) {
      i11 = 0;
      HEAP32[i15 + 40 + (i3 << 2) >> 2] = 2;
     }
     HEAP32[i1 >> 2] = i2;
     HEAP32[i1 + 4 >> 2] = i5;
     i1 = i1 + 8 | 0;
    }
    if (i7) FUNCTION_TABLE_vii[i7 & 31](i9, i4);
   }
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != (i13 | 0));
  if ((HEAP32[i15 + 40 >> 2] | 0) == 1) {
   HEAP32[i1 >> 2] = 916;
   HEAP32[i1 + 4 >> 2] = HEAP32[i15 >> 2];
   i1 = i1 + 8 | 0;
  }
 }
 if ((HEAP32[i15 + 40 + 4 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 937;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
  i1 = i1 + 8 | 0;
 }
 if ((HEAP32[i15 + 40 + 8 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 8725;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 8 >> 2];
  i1 = i1 + 8 | 0;
 }
 if ((HEAP32[i15 + 40 + 12 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 173;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 12 >> 2];
  i1 = i1 + 8 | 0;
 }
 if ((HEAP32[i15 + 40 + 16 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 713;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 16 >> 2];
  i1 = i1 + 8 | 0;
 }
 if ((HEAP32[i15 + 40 + 20 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 956;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 20 >> 2];
  i1 = i1 + 8 | 0;
 }
 if ((HEAP32[i15 + 40 + 24 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 8729;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 24 >> 2];
  i1 = i1 + 8 | 0;
 }
 if ((HEAP32[i15 + 40 + 28 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 160;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 28 >> 2];
  i1 = i1 + 8 | 0;
 }
 if ((HEAP32[i15 + 40 + 32 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 538;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 32 >> 2];
  i1 = i1 + 8 | 0;
 }
 if ((HEAP32[i15 + 40 + 36 >> 2] | 0) == 1) {
  HEAP32[i1 >> 2] = 539;
  HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 36 >> 2];
  i2 = i1 + 8 | 0;
 } else i2 = i1;
 i1 = HEAP32[i14 + 20 >> 2] | 0;
 i2 = i2 - i1 >> 3;
 if (!i2) {
  _ft_mem_free(i12, i1);
  HEAP32[i14 + 20 >> 2] = 0;
  i1 = HEAP32[i15 + 80 >> 2] | 0;
  if (!i1) {
   HEAP32[i15 + 80 >> 2] = 163;
   i1 = 163;
  }
 } else {
  if (i2 >>> 0 < i13 >>> 1 >>> 0) {
   i1 = _ft_mem_realloc(i12, 8, i13, i2, i1, i15 + 80 | 0) | 0;
   HEAP32[i14 + 20 >> 2] = i1;
   HEAP32[i15 + 80 >> 2] = 0;
  }
  _qsort(i1, i2, 8, 161);
  i1 = HEAP32[i15 + 80 >> 2] | 0;
 }
 HEAP32[i14 + 16 >> 2] = i2;
 i14 = i1;
 STACKTOP = i15;
 return i14 | 0;
}

function _cff_parse_font_bbox(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = HEAP32[i4 + 412 >> 2] | 0;
 if ((HEAP32[i4 + 404 >> 2] | 0) >>> 0 < (i4 + 32 | 0) >>> 0) {
  i5 = 161;
  return i5 | 0;
 }
 i2 = HEAP32[i4 + 16 >> 2] | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 30) i1 = _cff_parse_real(i2, i1, 0, 0) | 0; else {
  L7 : do switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i1 = (i3 & 255) + -139 | 0;
     break L7;
    }
    if ((i3 & 255) < 251) {
     if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L7;
     }
     i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
     break L7;
    } else {
     if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L7;
     }
     i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
     break L7;
    }
   }
  } while (0);
  i1 = i1 << 16;
 }
 HEAP32[i5 + 84 >> 2] = _FT_RoundFix(i1) | 0;
 i2 = HEAP32[i4 + 20 >> 2] | 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 30) i1 = _cff_parse_real(i2, i1, 0, 0) | 0; else {
  L26 : do switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i1 = (i3 & 255) + -139 | 0;
     break L26;
    }
    if ((i3 & 255) < 251) {
     if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L26;
     }
     i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
     break L26;
    } else {
     if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L26;
     }
     i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
     break L26;
    }
   }
  } while (0);
  i1 = i1 << 16;
 }
 HEAP32[i5 + 88 >> 2] = _FT_RoundFix(i1) | 0;
 i2 = HEAP32[i4 + 24 >> 2] | 0;
 i1 = HEAP32[i4 + 28 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 30) i1 = _cff_parse_real(i2, i1, 0, 0) | 0; else {
  L45 : do switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i1 = (i3 & 255) + -139 | 0;
     break L45;
    }
    if ((i3 & 255) < 251) {
     if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L45;
     }
     i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
     break L45;
    } else {
     if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L45;
     }
     i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
     break L45;
    }
   }
  } while (0);
  i1 = i1 << 16;
 }
 HEAP32[i5 + 92 >> 2] = _FT_RoundFix(i1) | 0;
 i3 = HEAP32[i4 + 28 >> 2] | 0;
 i1 = HEAP32[i4 + 32 >> 2] | 0;
 i2 = HEAP8[i3 >> 0] | 0;
 if (i2 << 24 >> 24 == 30) i1 = _cff_parse_real(i3, i1, 0, 0) | 0; else {
  L64 : do switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i3 + 3 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = ((HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 + 2 >> 0] | 0)) << 16 >> 16;
    break;
   }
  case 29:
   {
    if ((i3 + 5 | 0) >>> 0 > i1 >>> 0) i1 = 0; else i1 = (HEAPU8[i3 + 3 >> 0] | 0) << 8 | (HEAPU8[i3 + 4 >> 0] | 0);
    break;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = (i2 & 255) + -139 | 0;
     break L64;
    }
    if ((i2 & 255) < 251) {
     if ((i3 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L64;
     }
     i1 = (HEAPU8[i3 + 1 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
     break L64;
    } else {
     if ((i3 + 2 | 0) >>> 0 > i1 >>> 0) {
      i1 = 0;
      break L64;
     }
     i1 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i3 + 1 >> 0] | 0) | 0;
     break L64;
    }
   }
  } while (0);
  i1 = i1 << 16;
 }
 HEAP32[i5 + 96 >> 2] = _FT_RoundFix(i1) | 0;
 i5 = 0;
 return i5 | 0;
}

function _cff_parse_real(i6, i17, i18, i20) {
 i6 = i6 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0, i21 = 0;
 if (i20) {
  HEAP32[i20 >> 2] = 0;
  i8 = 0;
  i12 = 0;
  i13 = 0;
  i9 = 4;
  i10 = 0;
 } else {
  i8 = 0;
  i12 = 0;
  i13 = 0;
  i9 = 4;
  i10 = 0;
 }
 L3 : while (1) {
  i11 = (i13 | 0) > 214748363;
  L5 : while (1) while (1) {
   while (1) {
    if (i9) {
     i6 = i6 + 1 | 0;
     if (i6 >>> 0 >= i17 >>> 0) {
      i14 = 60;
      break L3;
     }
    }
    i3 = HEAP8[i6 >> 0] | 0;
    i5 = (i3 & 255) >>> i9 & 15;
    i4 = 4 - i9 | 0;
    if ((i5 | 0) == 14) {
     i9 = i4;
     i10 = 1;
     continue L5;
    }
    if (i5 >>> 0 > 9) {
     i7 = i8;
     i19 = i12;
     i1 = i13;
     i2 = i6;
     i21 = i10;
     break L3;
    }
    if (i11) break;
    if (!(i5 | i13)) i9 = i4; else break L5;
   }
   i8 = i8 + 1 | 0;
   i9 = i4;
  }
  i12 = i12 + 1 | 0;
  i13 = i5 + (i13 * 10 | 0) | 0;
  i9 = i4;
 }
 if ((i14 | 0) == 60) return 0;
 L22 : do if ((i5 | 0) == 10) {
  L24 : do if ((i1 | 0) < 214748364) {
   i6 = 0;
   L25 : while (1) {
    while (1) {
     if (i4) {
      i2 = i2 + 1 | 0;
      if (i2 >>> 0 >= i17 >>> 0) break L25;
      i3 = HEAP8[i2 >> 0] | 0;
     }
     i5 = (i3 & 255) >>> i4 & 15;
     i4 = 4 - i4 | 0;
     if (i5 >>> 0 > 9) break L22;
     if (i5 | i1) break;
     i7 = i7 + -1 | 0;
    }
    i6 = i6 + 1 | 0;
    i1 = i5 + (i1 * 10 | 0) | 0;
    if (!((i1 | 0) < 214748364 & (i6 | 0) < 9)) break L24;
   }
   return 0;
  } else i6 = 0; while (0);
  L38 : while (1) {
   do {
    if (i4) {
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 >= i17 >>> 0) break L38;
     i3 = HEAP8[i2 >> 0] | 0;
    }
    i5 = (i3 & 255) >>> i4 & 15;
    i4 = 4 - i4 | 0;
    if (i5 >>> 0 > 9) break L22;
   } while ((i5 | i1 | 0) != 0);
   i7 = i7 + -1 | 0;
  }
  return 0;
 } else i6 = 0; while (0);
 i9 = (i5 | 0) == 12;
 do if ((i5 + -11 | 0) >>> 0 < 2) {
  i8 = 0;
  while (1) {
   if (i4) {
    i2 = i2 + 1 | 0;
    if (i2 >>> 0 >= i17 >>> 0) {
     i14 = 60;
     break;
    }
    i3 = HEAP8[i2 >> 0] | 0;
   }
   i5 = (i3 & 255) >>> i4 & 15;
   if (i5 >>> 0 > 9) {
    i15 = i8;
    i14 = 38;
    break;
   }
   i8 = i5 + (i8 * 10 | 0) | 0;
   if ((i8 | 0) > 1e3) {
    i14 = 60;
    break;
   } else i4 = 4 - i4 | 0;
  }
  if ((i14 | 0) == 38) {
   i16 = i9 ? 0 - i15 | 0 : i15;
   break;
  } else if ((i14 | 0) == 60) return 0;
 } else i16 = 0; while (0);
 i4 = i7 + i18 + i16 | 0;
 if (!i20) {
  if ((((i4 + i19 | 0) < 0 ? 0 - (i4 + i19) | 0 : i4 + i19 | 0) | 0) > 5) return 0;
  if ((i4 + i19 | 0) < 0) {
   i3 = i6 + i19 | 0;
   i1 = (i1 | 0) / (HEAP32[267244 + (0 - (i4 + i19) << 2) >> 2] | 0) | 0;
  } else i3 = i6 - i4 | 0;
  i20 = (i3 | 0) == 10;
  i2 = i20 ? (i1 | 0) / 10 | 0 : i1;
  i1 = (i20 << 31 >> 31) + i3 | 0;
  if ((i1 | 0) > 0) {
   i1 = HEAP32[267244 + (i1 << 2) >> 2] | 0;
   if (((i2 | 0) / (i1 | 0) | 0 | 0) > 32767) return 0;
   i20 = _FT_DivFix(i2, i1) | 0;
   i19 = (i21 | 0) == 0;
   i21 = 0 - i20 | 0;
   i21 = i19 ? i20 : i21;
   return i21 | 0;
  } else {
   i1 = Math_imul(HEAP32[267244 + (0 - i1 << 2) >> 2] | 0, i2) | 0;
   if ((i1 | 0) > 32767) return 0;
   i20 = i1 << 16;
   i19 = (i21 | 0) == 0;
   i21 = 0 - i20 | 0;
   i21 = i19 ? i20 : i21;
   return i21 | 0;
  }
 }
 i3 = i6 + i19 | 0;
 if ((i3 | 0) >= 6) {
  i2 = HEAP32[267244 + (i3 + -5 << 2) >> 2] | 0;
  if (((i1 | 0) / (i2 | 0) | 0 | 0) > 32767) {
   i18 = _FT_DivFix(i1, HEAP32[267244 + (i3 + -4 << 2) >> 2] | 0) | 0;
   HEAP32[i20 >> 2] = i4 + i19 + -4;
   i20 = i18;
   i19 = (i21 | 0) == 0;
   i21 = 0 - i20 | 0;
   i21 = i19 ? i20 : i21;
   return i21 | 0;
  } else {
   i18 = _FT_DivFix(i1, i2) | 0;
   HEAP32[i20 >> 2] = i4 + i19 + -5;
   i20 = i18;
   i19 = (i21 | 0) == 0;
   i21 = 0 - i20 | 0;
   i21 = i19 ? i20 : i21;
   return i21 | 0;
  }
 }
 if ((i1 | 0) > 32767) {
  i18 = _FT_DivFix(i1, 10) | 0;
  HEAP32[i20 >> 2] = 1 - i3 + (i4 + i19);
  i20 = i18;
  i19 = (i21 | 0) == 0;
  i21 = 0 - i20 | 0;
  i21 = i19 ? i20 : i21;
  return i21 | 0;
 }
 if ((i4 + i19 | 0) > 0) {
  i2 = (i4 + i19 | 0) < 5 ? i4 + i19 | 0 : 5;
  i1 = Math_imul(HEAP32[267244 + (i2 - i3 << 2) >> 2] | 0, i1) | 0;
  if ((i1 | 0) > 32767) {
   i2 = i4 + i19 - i2 + 1 | 0;
   i1 = (i1 | 0) / 10 | 0;
  } else i2 = i4 + i19 - i2 | 0;
 } else i2 = i4 + i19 - i3 | 0;
 HEAP32[i20 >> 2] = i2;
 i20 = i1 << 16;
 i19 = (i21 | 0) == 0;
 i21 = 0 - i20 | 0;
 i21 = i19 ? i20 : i21;
 return i21 | 0;
}

function __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i10, i11, i8, i1, i4) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var d2 = 0.0, d3 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i9 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i1 = __ZNK17VertexDeclaration8DataTypeE18VertexDataSemantic(i10 + 32 | 0, i8) | 0;
 i9 = __ZNK17VertexDeclaration13DataDimensionE18VertexDataSemantic(i10 + 32 | 0, i8) | 0;
 if ((i1 | 0) == 2) switch (i9 | 0) {
 case 4:
  {
   i1 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i10 + 32 | 0, i8) | 0;
   if ((i1 | 0) > -1) i1 = (HEAP32[i10 + 60 >> 2] | 0) + ((Math_imul(HEAP32[i10 + 56 >> 2] | 0, i11) | 0) + i1) | 0; else i1 = 0;
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   STACKTOP = i12;
   return;
  }
 case 3:
  {
   __ZNK4math6float43xyzEv(i12 + 44 | 0, i4);
   i1 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i10 + 32 | 0, i8) | 0;
   if ((i1 | 0) > -1) i1 = (HEAP32[i10 + 60 >> 2] | 0) + ((Math_imul(HEAP32[i10 + 56 >> 2] | 0, i11) | 0) + i1) | 0; else i1 = 0;
   HEAP32[i1 >> 2] = HEAP32[i12 + 44 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 44 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 44 + 8 >> 2];
   STACKTOP = i12;
   return;
  }
 case 2:
  {
   __ZN4math6float2C2Eff(i12 + 32 | 0, Math_fround(HEAPF32[i4 >> 2]), Math_fround(HEAPF32[i4 + 4 >> 2]));
   i8 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i10 + 32 | 0, i8) | 0;
   i11 = (HEAP32[i10 + 60 >> 2] | 0) + ((Math_imul(HEAP32[i10 + 56 >> 2] | 0, i11) | 0) + i8) | 0;
   i10 = HEAP32[i12 + 32 + 4 >> 2] | 0;
   HEAP32[i11 >> 2] = HEAP32[i12 + 32 >> 2];
   HEAP32[i11 + 4 >> 2] = i10;
   STACKTOP = i12;
   return;
  }
 case 1:
  {
   i4 = HEAP32[i4 >> 2] | 0;
   i8 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i10 + 32 | 0, i8) | 0;
   HEAP32[(HEAP32[i10 + 60 >> 2] | 0) + ((Math_imul(HEAP32[i10 + 56 >> 2] | 0, i11) | 0) + i8) >> 2] = i4;
   STACKTOP = i12;
   return;
  }
 default:
  {
   HEAP32[i12 + 40 >> 2] = __Z8ToString18VertexDataSemantic(i8) | 0;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305148, i12 + 40 | 0);
   STACKTOP = i12;
   return;
  }
 }
 d2 = +Math_fround(HEAPF32[i4 >> 2]);
 d3 = +Math_fround(HEAPF32[i4 + 4 >> 2]);
 d5 = +Math_fround(HEAPF32[i4 + 8 >> 2]);
 d7 = +Math_fround(HEAPF32[i4 + 12 >> 2]);
 i4 = __Z11SizeInBytes14VertexDataType(i1) | 0;
 if (419424 >>> i1 & 1) {
  if (699054 >>> i1 & 1) {
   d2 = (d2 + 1.0) * .5;
   d5 = (d5 + 1.0) * .5;
   d7 = (d7 + 1.0) * .5;
   d3 = (d3 + 1.0) * .5;
  }
  if ((i4 | 0) == 8) d6 = 18446744073709552.0e3; else {
   i1 = _bitshift64Shl(1, 0, i4 << 3 | 0) | 0;
   i1 = _i64Add(i1 | 0, tempRet0 | 0, -1, -1) | 0;
   d6 = +(i1 >>> 0) + 4294967296.0 * +(tempRet0 >>> 0);
  }
  d2 = d2 * d6;
  d5 = d5 * d6;
  d7 = d7 * d6;
  d3 = d3 * d6;
 }
 i1 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i10 + 32 | 0, i8) | 0;
 if ((i1 | 0) > -1) i1 = (HEAP32[i10 + 60 >> 2] | 0) + ((Math_imul(HEAP32[i10 + 56 >> 2] | 0, i11) | 0) + i1) | 0; else i1 = 0;
 i11 = +Math_abs(d2) >= 1.0 ? (d2 > 0.0 ? ~~+Math_min(+Math_floor(d2 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((d2 - +(~~d2 >>> 0)) / 4294967296.0) >>> 0) : 0;
 HEAP32[i12 >> 2] = ~~d2 >>> 0;
 HEAP32[i12 + 4 >> 2] = i11;
 i11 = +Math_abs(d3) >= 1.0 ? (d3 > 0.0 ? ~~+Math_min(+Math_floor(d3 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((d3 - +(~~d3 >>> 0)) / 4294967296.0) >>> 0) : 0;
 HEAP32[i12 + 8 >> 2] = ~~d3 >>> 0;
 HEAP32[i12 + 8 + 4 >> 2] = i11;
 i11 = +Math_abs(d5) >= 1.0 ? (d5 > 0.0 ? ~~+Math_min(+Math_floor(d5 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((d5 - +(~~d5 >>> 0)) / 4294967296.0) >>> 0) : 0;
 HEAP32[i12 + 16 >> 2] = ~~d5 >>> 0;
 HEAP32[i12 + 16 + 4 >> 2] = i11;
 i11 = +Math_abs(d7) >= 1.0 ? (d7 > 0.0 ? ~~+Math_min(+Math_floor(d7 / 4294967296.0), 4294967295.0) >>> 0 : ~~+Math_ceil((d7 - +(~~d7 >>> 0)) / 4294967296.0) >>> 0) : 0;
 HEAP32[i12 + 24 >> 2] = ~~d7 >>> 0;
 HEAP32[i12 + 24 + 4 >> 2] = i11;
 _memcpy(i1 | 0, i12 | 0, i4 | 0) | 0;
 if ((i9 | 0) <= 1) {
  STACKTOP = i12;
  return;
 }
 _memcpy(i1 + i4 | 0, i12 + 8 | 0, i4 | 0) | 0;
 if ((i9 | 0) <= 2) {
  STACKTOP = i12;
  return;
 }
 _memcpy(i1 + (i4 << 1) | 0, i12 + 16 | 0, i4 | 0) | 0;
 if ((i9 | 0) <= 3) {
  STACKTOP = i12;
  return;
 }
 _memcpy(i1 + (i4 * 3 | 0) | 0, i12 + 24 | 0, i4 | 0) | 0;
 STACKTOP = i12;
 return;
}

function _tt_face_find_bdf_prop(i18, i19, i16) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 i10 = HEAP32[i18 + 88 >> 2] | 0;
 HEAP32[i16 >> 2] = 0;
 do if (!(HEAP8[i18 + 812 >> 0] | 0)) {
  i9 = HEAP32[i18 + 104 >> 2] | 0;
  HEAP32[i18 + 792 >> 2] = 0;
  HEAP32[i18 + 792 + 4 >> 2] = 0;
  HEAP32[i18 + 792 + 8 >> 2] = 0;
  HEAP32[i18 + 792 + 12 >> 2] = 0;
  HEAP32[i18 + 792 + 16 >> 2] = 0;
  HEAP32[i18 + 792 + 20 >> 2] = 0;
  i4 = HEAP16[i18 + 152 >> 1] | 0;
  i5 = HEAP32[i18 + 156 >> 2] | 0;
  if (!(i4 << 16 >> 16)) {
   i19 = 8;
   return i19 | 0;
  } else i1 = i5;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == 1111770656 ? (i6 = HEAP32[i1 + 12 >> 2] | 0, (i6 | 0) != 0) : 0) {
    i3 = i1;
    break;
   }
   i1 = i1 + 16 | 0;
   if (i1 >>> 0 >= (i5 + ((i4 & 65535) << 4) | 0) >>> 0) {
    i17 = 8;
    i11 = 35;
    break;
   }
  }
  if ((i11 | 0) == 35) return i17 | 0;
  if (i6 >>> 0 < 8 | (_FT_Stream_Seek(i9, HEAP32[i3 + 8 >> 2] | 0) | 0) != 0) {
   i19 = 8;
   return i19 | 0;
  }
  if (_FT_Stream_ExtractFrame(i9, i6, i18 + 792 | 0) | 0) {
   i19 = 8;
   return i19 | 0;
  }
  i8 = HEAP32[i18 + 792 >> 2] | 0;
  HEAP32[i18 + 796 >> 2] = i8 + i6;
  i3 = HEAPU8[i8 + 2 >> 0] << 8 | HEAPU8[i8 + 3 >> 0];
  i7 = HEAPU8[i8 + 5 >> 0] << 16 | HEAPU8[i8 + 4 >> 0] << 24 | HEAPU8[i8 + 6 >> 0] << 8 | HEAPU8[i8 + 7 >> 0];
  if (!(i7 >>> 0 < 8 ? 1 : (HEAPU8[i8 >> 0] << 8 | HEAPU8[i8 + 1 >> 0] | 0) != 1) ? !((i7 + 1 | 0) >>> 0 > i6 >>> 0 | (i7 + -8 | 0) >>> 2 >>> 0 < i3 >>> 0) : 0) {
   HEAP32[i18 + 808 >> 2] = i3;
   HEAP32[i18 + 800 >> 2] = i8 + i7;
   HEAP32[i18 + 804 >> 2] = i6 - i7;
   if (!i3) i1 = i8 + ((i3 << 2) + 8) | 0; else {
    i4 = i3;
    i5 = i8 + 8 | 0;
    i1 = i8 + ((i3 << 2) + 8) | 0;
    while (1) {
     i1 = i1 + ((HEAPU8[i5 + 2 >> 0] << 8 | HEAPU8[i5 + 3 >> 0]) * 10 | 0) | 0;
     i4 = i4 + -1 | 0;
     if (!i4) break; else i5 = i5 + 4 | 0;
    }
   }
   if (i1 >>> 0 <= (i8 + i7 | 0) >>> 0) {
    HEAP8[i18 + 812 >> 0] = 1;
    i1 = i8;
    break;
   }
  }
  _FT_Stream_ReleaseFrame(i9, i18 + 792 | 0);
  HEAP32[i18 + 792 >> 2] = 0;
  HEAP32[i18 + 792 + 4 >> 2] = 0;
  HEAP32[i18 + 792 + 8 >> 2] = 0;
  HEAP32[i18 + 792 + 12 >> 2] = 0;
  HEAP32[i18 + 792 + 16 >> 2] = 0;
  HEAP32[i18 + 792 + 20 >> 2] = 0;
  i19 = 8;
  return i19 | 0;
 } else {
  i3 = HEAP32[i18 + 808 >> 2] | 0;
  i1 = HEAP32[i18 + 792 >> 2] | 0;
 } while (0);
 if ((i19 | 0) == 0 | (i10 | 0) == 0) {
  i19 = 6;
  return i19 | 0;
 }
 i7 = _strlen(i19) | 0;
 if (!((i3 | 0) != 0 & (i7 | 0) != 0)) {
  i19 = 6;
  return i19 | 0;
 }
 i4 = HEAPU16[i10 + 14 >> 1] | 0;
 i5 = i3;
 i6 = i1 + 8 | 0;
 i1 = i1 + ((i3 << 2) + 8) | 0;
 while (1) {
  i3 = HEAPU8[i6 + 2 >> 0] << 8 | HEAPU8[i6 + 3 >> 0];
  if ((HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0] | 0) == (i4 | 0)) {
   i2 = i1;
   break;
  }
  i5 = i5 + -1 | 0;
  if (!i5) {
   i17 = 6;
   i11 = 35;
   break;
  } else {
   i6 = i6 + 4 | 0;
   i1 = i1 + (i3 * 10 | 0) | 0;
  }
 }
 if ((i11 | 0) == 35) return i17 | 0;
 if (!i3) {
  i19 = 6;
  return i19 | 0;
 }
 L47 : while (1) {
  i1 = HEAPU8[i2 + 5 >> 0] | 0;
  L49 : do if ((((i1 & 16 | 0) != 0 ? (i12 = HEAPU8[i2 + 1 >> 0] << 16 | HEAPU8[i2 >> 0] << 24 | HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0], i13 = HEAPU8[i2 + 7 >> 0] << 16 | HEAPU8[i2 + 6 >> 0] << 24 | HEAPU8[i2 + 8 >> 0] << 8 | HEAPU8[i2 + 9 >> 0], i14 = HEAP32[i18 + 804 >> 2] | 0, i14 >>> 0 > i12 >>> 0) : 0) ? i7 >>> 0 < (i14 - i12 | 0) >>> 0 : 0) ? (i15 = HEAP32[i18 + 800 >> 2] | 0, (_strncmp(i19, i15 + i12 | 0, i14 - i12 | 0) | 0) == 0) : 0) {
   switch (i1 & 15 | 0) {
   case 2:
    {
     i11 = 32;
     break L47;
    }
   case 3:
    {
     i11 = 33;
     break L47;
    }
   case 1:
   case 0:
    break;
   default:
    break L49;
   }
   if (i13 >>> 0 < i14 >>> 0 ? (_memchr(i15 + i13 | 0, 0, i14) | 0) != 0 : 0) {
    i11 = 31;
    break L47;
   }
  } while (0);
  i3 = i3 + -1 | 0;
  if (!i3) {
   i17 = 6;
   i11 = 35;
   break;
  } else i2 = i2 + 10 | 0;
 }
 if ((i11 | 0) == 31) {
  HEAP32[i16 >> 2] = 1;
  HEAP32[i16 + 4 >> 2] = i15 + i13;
  i19 = 0;
  return i19 | 0;
 } else if ((i11 | 0) == 32) {
  HEAP32[i16 >> 2] = 2;
  HEAP32[i16 + 4 >> 2] = i13;
  i19 = 0;
  return i19 | 0;
 } else if ((i11 | 0) == 33) {
  HEAP32[i16 >> 2] = 3;
  HEAP32[i16 + 4 >> 2] = i13;
  i19 = 0;
  return i19 | 0;
 } else if ((i11 | 0) == 35) return i17 | 0;
 return 0;
}

function __ZNK14TextureSampler14ApplyToTextureEiP7Texture(i8, i1, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((HEAP32[i7 + 60 >> 2] | 0) == (i8 | 0)) {
  STACKTOP = i9;
  return;
 }
 HEAP32[i7 + 60 >> 2] = i8;
 _glActiveTexture(i1 + 33984 | 0);
 _glBindTexture(3553, HEAP32[i7 + 52 >> 2] | 0);
 i3 = (__ZNK7Texture10NumMipmapsEv(i7) | 0) > 1;
 do if (i3) {
  if (__ZN4math6IsPow2Em(__ZNK7Texture5WidthEv(i7) | 0) | 0 ? __ZN4math6IsPow2Em(__ZNK7Texture6HeightEv(i7) | 0) | 0 : 0) break;
  HEAP32[i9 >> 2] = HEAP32[i7 + 4 >> 2];
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 302047, i9);
  __ZN7Texture14DisableMipmapsEv(i7);
 } while (0);
 i4 = HEAP32[i8 + 12 >> 2] | 0;
 i5 = HEAP32[i8 + 16 >> 2] | 0;
 i2 = (i4 | 0) == 3 ? 2 : i4;
 i1 = (i5 | 0) == 3 ? 2 : i5;
 if (i3) if (!((i2 | 0) == 1 & (i1 | 0) == 1)) if (!((i2 | 0) > 1 & (i1 | 0) == 1)) if (!((i2 | 0) == 1 & (i1 | 0) > 1)) if ((i2 | 0) > 1 & (i1 | 0) > 1) {
  i1 = 9987;
  i2 = 13;
 } else i2 = 14; else {
  i1 = 9986;
  i2 = 13;
 } else {
  i1 = 9985;
  i2 = 13;
 } else {
  i1 = 9984;
  i2 = 13;
 } else if ((i2 | 0) != 1) if ((i2 | 0) == 2) {
  i1 = 9729;
  i2 = 13;
 } else i2 = 14; else {
  i1 = 9728;
  i2 = 13;
 }
 if ((i2 | 0) == 13) _glTexParameteri(3553, 10241, i1 | 0); else if ((i2 | 0) == 14) {
  switch (i4 | 0) {
  case 0:
   {
    i2 = 302325;
    break;
   }
  case 1:
   {
    i2 = 302306;
    break;
   }
  case 2:
   {
    i2 = 302286;
    break;
   }
  case 3:
   {
    i2 = 302261;
    break;
   }
  default:
   i2 = 302217;
  }
  switch (i5 | 0) {
  case 0:
   {
    i1 = 302325;
    break;
   }
  case 1:
   {
    i1 = 302306;
    break;
   }
  case 2:
   {
    i1 = 302286;
    break;
   }
  case 3:
   {
    i1 = 302261;
    break;
   }
  default:
   i1 = 302217;
  }
  i5 = __ZNK7Texture10NumMipmapsEv(i7) | 0;
  HEAP32[i9 + 8 >> 2] = i2;
  HEAP32[i9 + 8 + 4 >> 2] = i1;
  HEAP32[i9 + 8 + 8 >> 2] = i5;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 302346, i9 + 8 | 0);
 }
 switch (HEAP32[i8 + 20 >> 2] | 0) {
 case 1:
  {
   i1 = 9728;
   i2 = 27;
   break;
  }
 case 3:
 case 2:
  {
   i1 = 9729;
   i2 = 27;
   break;
  }
 case 0:
  {
   i1 = 302325;
   i2 = 29;
   break;
  }
 default:
  {
   i1 = 302217;
   i2 = 29;
  }
 }
 if ((i2 | 0) == 27) _glTexParameteri(3553, 10240, i1 | 0); else if ((i2 | 0) == 29) {
  HEAP32[i9 + 24 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 302461, i9 + 24 | 0);
 }
 i1 = HEAP32[(HEAP32[122] | 0) + 60 >> 2] | 0;
 if ((i1 | 0) > 1 ? (i6 = HEAP32[i8 + 24 >> 2] | 0, (i6 | 0) > 0) : 0) _glTexParameteri(3553, 34046, ((i1 | 0) > (i6 | 0) ? i6 : i1) | 0);
 if (!((HEAP32[i8 >> 2] | 0) == 2 ? (HEAP32[i8 + 4 >> 2] | 0) == 2 : 0)) i2 = 35;
 do if ((i2 | 0) == 35) {
  if (__ZN4math6IsPow2Em(__ZNK7Texture5WidthEv(i7) | 0) | 0 ? __ZN4math6IsPow2Em(__ZNK7Texture6HeightEv(i7) | 0) | 0 : 0) break;
  i5 = __ZNK7Texture5WidthEv(i7) | 0;
  i6 = __ZNK7Texture6HeightEv(i7) | 0;
  i7 = HEAP32[i7 + 4 >> 2] | 0;
  HEAP32[i9 + 32 >> 2] = i5;
  HEAP32[i9 + 32 + 4 >> 2] = i6;
  HEAP32[i9 + 32 + 8 >> 2] = i7;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 302533, i9 + 32 | 0);
 } while (0);
 switch (HEAP32[i8 >> 2] | 0) {
 case 1:
  {
   i1 = 10497;
   i2 = 41;
   break;
  }
 case 2:
  {
   i1 = 33071;
   i2 = 41;
   break;
  }
 case 3:
  {
   i1 = 33648;
   i2 = 41;
   break;
  }
 case 0:
  {
   i1 = 302797;
   i2 = 45;
   break;
  }
 case 5:
  {
   i1 = 302751;
   i2 = 45;
   break;
  }
 case 4:
  {
   i1 = 302776;
   i2 = 45;
   break;
  }
 default:
  {
   i1 = 302721;
   i2 = 45;
  }
 }
 if ((i2 | 0) == 41) _glTexParameteri(3553, 10242, i1 | 0); else if ((i2 | 0) == 45) {
  HEAP32[i9 + 48 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 302819, i9 + 48 | 0);
 }
 switch (HEAP32[i8 + 4 >> 2] | 0) {
 case 1:
  {
   i1 = 10497;
   i2 = 49;
   break;
  }
 case 2:
  {
   i1 = 33071;
   i2 = 49;
   break;
  }
 case 3:
  {
   i1 = 33648;
   i2 = 49;
   break;
  }
 case 0:
  {
   i1 = 302797;
   i2 = 53;
   break;
  }
 case 5:
  {
   i1 = 302751;
   i2 = 53;
   break;
  }
 case 4:
  {
   i1 = 302776;
   i2 = 53;
   break;
  }
 default:
  {
   i1 = 302721;
   i2 = 53;
  }
 }
 if ((i2 | 0) == 49) {
  _glTexParameteri(3553, 10243, i1 | 0);
  STACKTOP = i9;
  return;
 } else if ((i2 | 0) == 53) {
  HEAP32[i9 + 56 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 302895, i9 + 56 | 0);
  STACKTOP = i9;
  return;
 }
}

function _tt_face_load_font_dir(i13, i15) {
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = HEAP32[i15 + 28 >> 2] | 0;
 HEAP32[i16 + 8 + 12 >> 2] = _FT_Stream_Pos(i15) | 0;
 HEAP32[i16 + 8 >> 2] = _FT_Stream_ReadULong(i15, i16) | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if (i1) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = _FT_Stream_ReadFields(i15, 285520, i16 + 8 | 0) | 0;
 HEAP32[i16 >> 2] = i1;
 if (i1) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i9 = HEAP32[i16 + 8 + 12 >> 2] | 0;
 i1 = _FT_Stream_Seek(i15, i9 + 12 | 0) | 0;
 HEAP32[i16 + 40 >> 2] = i1;
 L7 : do if (!i1) {
  i14 = i16 + 8 + 4 | 0;
  if (HEAP16[i14 >> 1] | 0) {
   i8 = 0;
   i5 = 0;
   i3 = 0;
   i10 = 0;
   i4 = 0;
   i2 = 0;
   L12 : while (1) {
    i7 = _FT_Stream_ReadFields(i15, 285544, i16 + 24 | 0) | 0;
    HEAP32[i16 + 40 >> 2] = i7;
    if (i7) {
     i1 = i10;
     i12 = 8;
     break;
    }
    i1 = HEAP32[i16 + 24 + 8 >> 2] | 0;
    i6 = HEAP32[i16 + 24 + 12 >> 2] | 0;
    L15 : do if ((i6 + i1 | 0) >>> 0 > (HEAP32[i15 + 4 >> 2] | 0) >>> 0) i1 = i10; else {
     i2 = i2 + 1 << 16 >> 16;
     i7 = HEAP32[i16 + 24 >> 2] | 0;
     L17 : do if ((i7 | 0) >= 1651008868) {
      if ((i7 | 0) < 1751474532) switch (i7 | 0) {
      case 1651008868:
       break;
      default:
       break L17;
      } else switch (i7 | 0) {
      case 1751474532:
       break;
      default:
       break L17;
      }
      if (i6 >>> 0 < 54) {
       i12 = 12;
       break L12;
      }
      i1 = _FT_Stream_Seek(i15, i1 + 12 | 0) | 0;
      HEAP32[i16 + 40 >> 2] = i1;
      if (i1) break L7;
      i5 = _FT_Stream_ReadULong(i15, i16 + 40 | 0) | 0;
      i1 = HEAP32[i16 + 40 >> 2] | 0;
      if (i1) break L7;
      if ((i5 | 0) != 1594834165) {
       i12 = 16;
       break L12;
      }
      i1 = _FT_Stream_Seek(i15, i9 + 28 + (i8 << 4) | 0) | 0;
      HEAP32[i16 + 40 >> 2] = i1;
      if (!i1) {
       i5 = 1;
       i1 = i10;
       break L15;
      } else break L7;
     } else switch (i7 | 0) {
     case 1397313095:
      {
       i1 = 1;
       break L15;
      }
     default:
      {}
     } while (0);
     i3 = (i7 | 0) == 1296389185 ? 1 : i3;
     i1 = i10;
    } while (0);
    i4 = i4 + 1 << 16 >> 16;
    if ((i4 & 65535) < (HEAPU16[i14 >> 1] | 0)) {
     i8 = i4 & 65535;
     i10 = i1;
    } else {
     i4 = i5;
     break;
    }
   }
   if ((i12 | 0) == 8) {
    HEAP16[i14 >> 1] = i4 + -1 << 16 >> 16;
    i4 = i5;
   } else if ((i12 | 0) == 12) {
    HEAP32[i16 + 40 >> 2] = 142;
    i1 = 142;
    break;
   } else if ((i12 | 0) == 16) {
    HEAP32[i16 + 40 >> 2] = 142;
    i1 = 142;
    break;
   }
   HEAP16[i14 >> 1] = i2;
   if (i2 << 16 >> 16) {
    if ((i4 | 0) == 0 ? !((i3 | 0) != 0 & (i1 | 0) != 0) : 0) {
     HEAP32[i16 + 40 >> 2] = 142;
     i1 = 142;
     break;
    }
    HEAP32[i16 >> 2] = 0;
    HEAP16[i13 + 152 >> 1] = i2;
    HEAP32[i13 + 148 >> 2] = HEAP32[i16 + 8 >> 2];
    HEAP32[i13 + 156 >> 2] = _ft_mem_realloc(i11, 16, 0, i2 & 65535, 0, i16) | 0;
    i1 = HEAP32[i16 >> 2] | 0;
    if (i1) {
     i15 = i1;
     STACKTOP = i16;
     return i15 | 0;
    }
    i1 = _FT_Stream_Seek(i15, (HEAP32[i16 + 8 + 12 >> 2] | 0) + 12 | 0) | 0;
    HEAP32[i16 >> 2] = i1;
    if (i1) {
     i15 = i1;
     STACKTOP = i16;
     return i15 | 0;
    }
    i1 = _FT_Stream_EnterFrame(i15, HEAPU16[i13 + 152 >> 1] << 4) | 0;
    HEAP32[i16 >> 2] = i1;
    if (i1) {
     i15 = i1;
     STACKTOP = i16;
     return i15 | 0;
    }
    if (HEAP16[i14 >> 1] | 0) {
     i3 = HEAP32[i13 + 156 >> 2] | 0;
     i4 = 0;
     while (1) {
      HEAP32[i3 >> 2] = _FT_Stream_GetULong(i15) | 0;
      HEAP32[i3 + 4 >> 2] = _FT_Stream_GetULong(i15) | 0;
      i1 = i3 + 8 | 0;
      HEAP32[i1 >> 2] = _FT_Stream_GetULong(i15) | 0;
      i2 = _FT_Stream_GetULong(i15) | 0;
      HEAP32[i3 + 12 >> 2] = i2;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) >= (HEAPU16[i14 >> 1] | 0)) break; else i3 = ((HEAP32[i1 >> 2] | 0) + i2 | 0) >>> 0 > (HEAP32[i15 + 4 >> 2] | 0) >>> 0 ? i3 : i3 + 16 | 0;
     }
    }
    _FT_Stream_ExitFrame(i15);
    i15 = HEAP32[i16 >> 2] | 0;
    STACKTOP = i16;
    return i15 | 0;
   }
  } else HEAP16[i14 >> 1] = 0;
  HEAP32[i16 + 40 >> 2] = 2;
  i1 = 2;
 } while (0);
 HEAP32[i16 >> 2] = i1;
 i15 = i1;
 STACKTOP = i16;
 return i15 | 0;
}

function _FT_Stream_OpenGzip(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = HEAP32[i5 + 28 >> 2] | 0;
 i4 = _ft_gzip_check_header(i5) | 0;
 HEAP32[i8 >> 2] = i4;
 if (i4) {
  i7 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = i6;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i6 + 28 >> 2] = i7;
 i4 = _ft_mem_qalloc(i7, 8276, i8) | 0;
 L4 : do if (!(HEAP32[i8 >> 2] | 0)) {
  HEAP32[i4 + 4 >> 2] = i6;
  HEAP32[i4 >> 2] = i5;
  HEAP32[i4 + 8 >> 2] = HEAP32[i6 + 28 >> 2];
  HEAP32[i4 + 8272 >> 2] = i4 + 8264;
  HEAP32[i4 + 8268 >> 2] = i4 + 8264;
  HEAP32[i4 + 8264 >> 2] = 0;
  i1 = _ft_gzip_check_header(i5) | 0;
  L6 : do if (!i1) {
   HEAP32[i4 + 68 >> 2] = _FT_Stream_Pos(i5) | 0;
   HEAP32[i4 + 44 >> 2] = 68;
   HEAP32[i4 + 48 >> 2] = 22;
   i1 = HEAP32[i5 + 28 >> 2] | 0;
   HEAP32[i4 + 52 >> 2] = i1;
   HEAP32[i4 + 16 >> 2] = 0;
   HEAP32[i4 + 12 >> 2] = i4 + 4168;
   HEAP32[i4 + 36 >> 2] = 0;
   i1 = _ft_mem_alloc(i1, 24, i8 + 4 | 0) | 0;
   HEAP32[i4 + 40 >> 2] = i1;
   if (!i1) i1 = 3; else {
    HEAP32[i1 + 20 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 1;
    HEAP32[i1 + 16 >> 2] = 15;
    i2 = FUNCTION_TABLE_iiii[HEAP32[i4 + 44 >> 2] & 127](HEAP32[i4 + 52 >> 2] | 0, 1, 64) | 0;
    if (!i2) HEAP32[(HEAP32[i4 + 40 >> 2] | 0) + 20 >> 2] = 0; else {
     i3 = FUNCTION_TABLE_iiii[HEAP32[i4 + 44 >> 2] & 127](HEAP32[i4 + 52 >> 2] | 0, 8, 1440) | 0;
     HEAP32[i2 + 36 >> 2] = i3;
     do if (!i3) FUNCTION_TABLE_vii[HEAP32[i4 + 48 >> 2] & 31](HEAP32[i4 + 52 >> 2] | 0, i2); else {
      i3 = FUNCTION_TABLE_iiii[HEAP32[i4 + 44 >> 2] & 127](HEAP32[i4 + 52 >> 2] | 0, 1, 32768) | 0;
      HEAP32[i2 + 40 >> 2] = i3;
      if (!i3) {
       FUNCTION_TABLE_vii[HEAP32[i4 + 48 >> 2] & 31](HEAP32[i4 + 52 >> 2] | 0, HEAP32[i2 + 36 >> 2] | 0);
       FUNCTION_TABLE_vii[HEAP32[i4 + 48 >> 2] & 31](HEAP32[i4 + 52 >> 2] | 0, i2);
       break;
      }
      HEAP32[i2 + 44 >> 2] = i3 + 32768;
      HEAP32[i2 + 56 >> 2] = 0;
      HEAP32[i2 >> 2] = 0;
      HEAP32[i2 + 28 >> 2] = 0;
      HEAP32[i2 + 32 >> 2] = 0;
      HEAP32[i2 + 52 >> 2] = i3;
      HEAP32[i2 + 48 >> 2] = i3;
      i1 = HEAP32[i4 + 40 >> 2] | 0;
      HEAP32[i1 + 20 >> 2] = i2;
      if (i1) {
       HEAP32[i4 + 32 >> 2] = 0;
       HEAP32[i4 + 20 >> 2] = 0;
       HEAP32[i4 + 36 >> 2] = 0;
       HEAP32[i1 >> 2] = (HEAP32[i1 + 12 >> 2] | 0) != 0 ? 7 : 0;
       HEAP32[i2 >> 2] = 0;
       HEAP32[i2 + 28 >> 2] = 0;
       HEAP32[i2 + 32 >> 2] = 0;
       HEAP32[i2 + 52 >> 2] = i3;
       HEAP32[i2 + 48 >> 2] = i3;
      }
      if (!(HEAP32[i4 + 12 >> 2] | 0)) {
       i1 = 3;
       break L6;
      }
      HEAP32[i8 >> 2] = 0;
      HEAP32[i6 + 12 >> 2] = i4;
      break L4;
     } while (0);
     HEAP32[(HEAP32[i4 + 40 >> 2] | 0) + 20 >> 2] = 0;
    }
    _inflateEnd(i4 + 12 | 0);
    i1 = 3;
   }
  } while (0);
  HEAP32[i8 >> 2] = i1;
  _ft_mem_free(i7, i4);
  i7 = HEAP32[i8 >> 2] | 0;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 i1 = HEAP32[i5 + 8 >> 2] | 0;
 if (!(_FT_Stream_Seek(i5, (HEAP32[i5 + 4 >> 2] | 0) + -4 | 0) | 0)) {
  i2 = _FT_Stream_ReadULong(i5, i8 + 4 | 0) | 0;
  i2 = (HEAP32[i8 + 4 >> 2] | 0) != 0 ? 0 : i2;
  _FT_Stream_Seek(i5, i1) | 0;
  if ((i2 + -1 | 0) >>> 0 < 40959) {
   i1 = _ft_mem_alloc(i7, i2, i8) | 0;
   do if (!(HEAP32[i8 >> 2] | 0)) {
    if ((_ft_gzip_file_io(i4, 0, i1, i2) | 0) != (i2 | 0)) {
     _ft_gzip_file_io(i4, 0, 0, 0) | 0;
     _ft_mem_free(i7, i1);
     break;
    }
    _inflateEnd(i4 + 12 | 0);
    HEAP32[i4 + 44 >> 2] = 0;
    HEAP32[i4 + 48 >> 2] = 0;
    HEAP32[i4 + 52 >> 2] = 0;
    HEAP32[i4 + 24 >> 2] = 0;
    HEAP32[i4 + 28 >> 2] = 0;
    HEAP32[i4 >> 2] = 0;
    HEAP32[i4 + 4 >> 2] = 0;
    HEAP32[i4 + 8 >> 2] = 0;
    HEAP32[i4 + 12 >> 2] = 0;
    HEAP32[i4 + 16 >> 2] = 0;
    _ft_mem_free(i7, i4);
    HEAP32[i6 + 12 >> 2] = 0;
    HEAP32[i6 + 4 >> 2] = i2;
    HEAP32[i6 + 8 >> 2] = 0;
    HEAP32[i6 >> 2] = i1;
    HEAP32[i6 + 20 >> 2] = 0;
    HEAP32[i6 + 24 >> 2] = 83;
    i7 = HEAP32[i8 >> 2] | 0;
    STACKTOP = i8;
    return i7 | 0;
   } while (0);
   HEAP32[i8 >> 2] = 0;
  }
 }
 HEAP32[i6 + 4 >> 2] = 2147483647;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 39;
 HEAP32[i6 + 24 >> 2] = 83;
 i7 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _tt_cmap4_validate(i17, i18) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0;
 i1 = HEAPU8[i17 + 2 >> 0] << 8 | HEAPU8[i17 + 3 >> 0];
 if (i1 >>> 0 < 16) _ft_validator_error(i18, 8);
 do if ((i17 + i1 | 0) >>> 0 > (HEAP32[i18 + 4 >> 2] | 0) >>> 0) if (!(HEAP32[i18 + 8 >> 2] | 0)) {
  i4 = (HEAP32[i18 + 4 >> 2] | 0) - i17 | 0;
  break;
 } else _ft_validator_error(i18, 8); else i4 = i1; while (0);
 i15 = HEAPU8[i17 + 7 >> 0] | 0;
 i16 = HEAPU8[i17 + 6 >> 0] << 8 | i15;
 if (!((i15 & 1 | 0) == 0 ? 1 : (HEAP32[i18 + 8 >> 2] | 0) >>> 0 < 2)) _ft_validator_error(i18, 8);
 if (i4 >>> 0 < ((i16 >>> 1 << 3) + 16 | 0) >>> 0) _ft_validator_error(i18, 8);
 if ((HEAP32[i18 + 8 >> 2] | 0) >>> 0 > 1) {
  i15 = HEAP8[i17 + 9 >> 0] | 0;
  i1 = HEAPU8[i17 + 8 >> 0] << 8 | i15 & 255;
  i2 = HEAPU8[i17 + 10 >> 0] << 8 | HEAPU8[i17 + 11 >> 0];
  i14 = HEAP8[i17 + 13 >> 0] | 0;
  i3 = HEAPU8[i17 + 12 >> 0] << 8 | i14 & 255;
  if ((i14 | i15) & 1) _ft_validator_error(i18, 8);
  if (!((i1 >>> 1 | 0) == (1 << i2 | 0) & (i1 >>> 1 >>> 0 <= i16 >>> 1 >>> 0 & i1 >>> 1 << 1 >>> 0 >= i16 >>> 1 >>> 0 & ((i3 >>> 1) + (i1 >>> 1) | 0) == (i16 >>> 1 | 0)))) _ft_validator_error(i18, 8);
 }
 i15 = (i16 >>> 1 << 1) + 16 + (i16 >>> 1 << 1) + (i16 >>> 1 << 1) | 0;
 if ((HEAP32[i18 + 8 >> 2] | 0) >>> 0 > 1 ? (HEAPU8[i17 + ((i16 >>> 1 << 1) + 12) >> 0] << 8 | HEAPU8[i17 + ((i16 >>> 1 << 1) + 13) >> 0] | 0) != 65535 : 0) _ft_validator_error(i18, 8);
 if (!(i16 >>> 1)) {
  i19 = 0;
  return i19 | 0;
 }
 i7 = i17 + i4 | 0;
 i1 = 0;
 i8 = 0;
 i9 = 0;
 i10 = 0;
 i11 = i17 + ((i16 >>> 1 << 1) + 16 + (i16 >>> 1 << 1)) | 0;
 i12 = i17 + 14 | 0;
 i13 = i17 + i15 | 0;
 i14 = i17 + ((i16 >>> 1 << 1) + 16) | 0;
 L30 : while (1) {
  i6 = i14;
  i14 = i14 + 2 | 0;
  i3 = i9;
  i9 = HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0];
  i6 = i12;
  i12 = i12 + 2 | 0;
  i2 = i8;
  i8 = HEAPU8[i6 >> 0] << 8 | HEAPU8[i6 + 1 >> 0];
  i6 = HEAP8[i11 >> 0] << 8 | HEAPU8[i11 + 1 >> 0];
  i11 = i11 + 2 | 0;
  i5 = i13;
  i13 = i13 + 2 | 0;
  i4 = HEAPU8[i5 >> 0] << 8 | HEAPU8[i5 + 1 >> 0];
  if (i8 >>> 0 < i9 >>> 0) {
   i19 = 22;
   break;
  }
  do if ((i10 | 0) != 0 & i9 >>> 0 <= i2 >>> 0) {
   if (HEAP32[i18 + 8 >> 2] | 0) {
    i19 = 25;
    break L30;
   }
   if (i3 >>> 0 > i9 >>> 0 | i2 >>> 0 > i8 >>> 0) {
    i1 = i1 | 1;
    break;
   } else {
    i1 = i1 | 2;
    break;
   }
  } while (0);
  L40 : do if ((i4 | 0) >= 65535) {
   switch (i4 | 0) {
   case 65535:
    break;
   default:
    {
     i19 = 30;
     break L40;
    }
   }
   if ((HEAP32[i18 + 8 >> 2] | 0) >>> 0 > 1) {
    i19 = 45;
    break L30;
   }
   if (!((i10 | 0) == ((i16 >>> 1) + -1 | 0) & (i9 | 0) == 65535 & (i8 | 0) == 65535)) {
    i19 = 45;
    break L30;
   }
  } else switch (i4 | 0) {
  case 0:
   break;
  default:
   i19 = 30;
  } while (0);
  if ((i19 | 0) == 30) {
   i19 = 0;
   if (!(HEAP32[i18 + 8 >> 2] | 0)) {
    if (!((i10 | 0) == ((i16 >>> 1) + -1 | 0) & (i9 | 0) == 65535 & (i8 | 0) == 65535)) {
     if ((i5 + i4 | 0) >>> 0 < (i17 + (i15 + (i16 >>> 1 << 1)) | 0) >>> 0) {
      i19 = 37;
      break;
     }
     if ((i5 + ((i8 - i9 << 1) + 2 + i4) | 0) >>> 0 > (HEAP32[i18 + 4 >> 2] | 0) >>> 0) {
      i19 = 37;
      break;
     }
    }
   } else {
    if ((i5 + i4 | 0) >>> 0 < (i17 + (i15 + (i16 >>> 1 << 1)) | 0) >>> 0) {
     i19 = 33;
     break;
    }
    if ((i5 + ((i8 - i9 << 1) + 2 + i4) | 0) >>> 0 > i7 >>> 0) {
     i19 = 33;
     break;
    }
   }
   if ((HEAP32[i18 + 8 >> 2] | 0) != 0 & i8 >>> 0 > i9 >>> 0) {
    i3 = i9;
    i2 = i5 + i4 | 0;
    do {
     i5 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
     i2 = i2 + 2 | 0;
     if ((i5 | 0) != 0 ? (i5 + i6 & 65535) >>> 0 >= (HEAP32[i18 + 172 >> 2] | 0) >>> 0 : 0) {
      i19 = 41;
      break L30;
     }
     i3 = i3 + 1 | 0;
    } while ((i3 | 0) != (i8 | 0));
   }
  }
  i10 = i10 + 1 | 0;
  if ((i10 | 0) == (i16 >>> 1 | 0)) {
   i19 = 47;
   break;
  }
 }
 if ((i19 | 0) == 22) _ft_validator_error(i18, 8); else if ((i19 | 0) == 25) _ft_validator_error(i18, 8); else if ((i19 | 0) == 33) _ft_validator_error(i18, 8); else if ((i19 | 0) == 37) _ft_validator_error(i18, 8); else if ((i19 | 0) == 41) _ft_validator_error(i18, 16); else if ((i19 | 0) == 45) _ft_validator_error(i18, 8); else if ((i19 | 0) == 47) return i1 | 0;
 return 0;
}

function __ZN4math3LCG5FloatEff(i10, f8, f9) {
 i10 = i10 | 0;
 f8 = Math_fround(f8);
 f9 = Math_fround(f9);
 var i1 = 0, f2 = f0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, f7 = f0;
 if (f8 == f9) {
  f9 = f8;
  return Math_fround(f9);
 }
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i10 + 4 >> 2] | 0;
 i6 = HEAP32[i10 + 8 >> 2] | 0;
 f7 = Math_fround(f9 - f8);
 i1 = ___muldi3(i4 | 0, 0, HEAP32[i10 + 12 >> 2] | 0, 0) | 0;
 i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
 i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
 i3 = tempRet0;
 f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
 if (!(f2 != f9)) {
  i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
  i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
  i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
  i3 = tempRet0;
  f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
  if (!(f2 != f9)) {
   i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
   i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
   i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
   i3 = tempRet0;
   f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
   if (!(f2 != f9)) {
    i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
    i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
    i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
    i3 = tempRet0;
    f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
    if (!(f2 != f9)) {
     i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
     i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
     i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
     i3 = tempRet0;
     f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
     if (!(f2 != f9)) {
      i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
      i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
      i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
      i3 = tempRet0;
      f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
      if (!(f2 != f9)) {
       i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
       i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
       i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
       i3 = tempRet0;
       f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
       if (!(f2 != f9)) {
        i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
        i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
        i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
        i3 = tempRet0;
        f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
        if (!(f2 != f9)) {
         i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
         i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
         i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
         i3 = tempRet0;
         f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
         if (!(f2 != f9)) {
          i1 = ___muldi3(i4 | 0, 0, i1 | 0, i3 | 0) | 0;
          i1 = _i64Add(i1 | 0, tempRet0 | 0, i5 | 0, 0) | 0;
          i1 = ___uremdi3(i1 | 0, tempRet0 | 0, i6 | 0, 0) | 0;
          f2 = Math_fround(Math_fround(f7 * Math_fround((HEAP32[tempDoublePtr >> 2] = i1 & 8388607 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])) + Math_fround(-1.0))) + f8);
          if (!(f2 != f9)) f2 = f8;
         }
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[i10 + 12 >> 2] = i1;
 f9 = f2;
 return Math_fround(f9);
}

function _t42_parse_encoding(i8, i9) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = HEAP32[i9 + 8 >> 2] | 0;
 i3 = HEAP32[i8 + 488 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[i9 + 28 >> 2] & 127](i9);
 i5 = HEAP32[i9 >> 2] | 0;
 if (i5 >>> 0 >= i7 >>> 0) {
  HEAP32[i9 + 12 >> 2] = 3;
  STACKTOP = i10;
  return;
 }
 i1 = HEAP8[i5 >> 0] | 0;
 if (!(i1 << 24 >> 24 == 91 | ((i1 & 255) + -48 | 0) >>> 0 < 10)) {
  if ((i5 + 17 | 0) >>> 0 < i7 >>> 0 ? (_strncmp(i5, 324079, 16) | 0) == 0 : 0) {
   HEAP32[i8 + 368 >> 2] = 2;
   STACKTOP = i10;
   return;
  }
  if ((i5 + 15 | 0) >>> 0 < i7 >>> 0 ? (_strncmp(i5, 324096, 14) | 0) == 0 : 0) {
   HEAP32[i8 + 368 >> 2] = 4;
   STACKTOP = i10;
   return;
  }
  if ((i5 + 18 | 0) >>> 0 < i7 >>> 0 ? (_strncmp(i5, 324111, 17) | 0) == 0 : 0) {
   HEAP32[i8 + 368 >> 2] = 3;
   STACKTOP = i10;
   return;
  }
  HEAP32[i9 + 12 >> 2] = 3;
  STACKTOP = i10;
  return;
 }
 i2 = HEAP32[i9 + 16 >> 2] | 0;
 if (i1 << 24 >> 24 == 91) {
  HEAP32[i9 >> 2] = i5 + 1;
  i6 = 256;
  i4 = 1;
 } else {
  i6 = FUNCTION_TABLE_ii[HEAP32[i9 + 36 >> 2] & 63](i9) | 0;
  i4 = 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i9 + 28 >> 2] & 127](i9);
 if ((HEAP32[i9 >> 2] | 0) >>> 0 >= i7 >>> 0) {
  STACKTOP = i10;
  return;
 }
 HEAP32[i8 + 372 >> 2] = i6;
 HEAP32[i9 + 88 >> 2] = i6;
 HEAP32[i8 + 384 >> 2] = _ft_mem_realloc(i2, 2, 0, i6, 0, i10) | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if (!i1) {
  HEAP32[i8 + 388 >> 2] = _ft_mem_realloc(i2, 4, 0, i6, 0, i10) | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i3 >> 2] >> 2] & 127](i9 + 92 | 0, i6, i2) | 0;
   HEAP32[i10 >> 2] = i1;
   if (!i1) {
    if (i6) {
     i1 = 0;
     do {
      FUNCTION_TABLE_iiiii[HEAP32[i9 + 136 >> 2] & 63](i9 + 92 | 0, i1, 323974, 8) | 0;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i6 | 0));
    }
    FUNCTION_TABLE_vi[HEAP32[i9 + 28 >> 2] & 127](i9);
    i1 = HEAP32[i9 >> 2] | 0;
    L40 : do if (i1 >>> 0 < i7 >>> 0) {
     i5 = i4 << 24 >> 24 == 0;
     i2 = 0;
     L42 : while (1) {
      i3 = HEAP8[i1 >> 0] | 0;
      switch (i3 << 24 >> 24) {
      case 93:
       {
        i2 = 22;
        break L42;
       }
      case 100:
       {
        i4 = i1 + 3 | 0;
        if ((i4 >>> 0 < i7 >>> 0 ? (HEAP8[i1 + 1 >> 0] | 0) == 101 : 0) ? (HEAP8[i1 + 2 >> 0] | 0) == 102 : 0) switch (HEAP8[i4 >> 0] | 0) {
        case 0:
        case 12:
        case 10:
        case 13:
        case 9:
        case 32:
         {
          i1 = i4;
          break L40;
         }
        default:
         {}
        }
        break;
       }
      default:
       {}
      }
      if (i5 & ((i3 & 255) + -48 | 0) >>> 0 > 9) {
       FUNCTION_TABLE_vi[HEAP32[i9 + 32 >> 2] & 127](i9);
       if (!(HEAP32[i9 + 12 >> 2] | 0)) i3 = i1; else {
        i2 = 43;
        break;
       }
      } else {
       if (i5) {
        i4 = FUNCTION_TABLE_ii[HEAP32[i9 + 36 >> 2] & 63](i9) | 0;
        FUNCTION_TABLE_vi[HEAP32[i9 + 28 >> 2] & 127](i9);
        i1 = HEAP32[i9 >> 2] | 0;
        i3 = HEAP8[i1 >> 0] | 0;
       } else i4 = i2;
       if (i2 >>> 0 < i6 >>> 0 & (i3 << 24 >> 24 == 47 & (i1 + 2 | 0) >>> 0 < i7 >>> 0)) {
        i1 = i1 + 1 | 0;
        HEAP32[i9 >> 2] = i1;
        FUNCTION_TABLE_vi[HEAP32[i9 + 32 >> 2] & 127](i9);
        if (HEAP32[i9 + 12 >> 2] | 0) {
         i2 = 43;
         break;
        }
        i3 = (HEAP32[i9 >> 2] | 0) - i1 | 0;
        i11 = FUNCTION_TABLE_iiiii[HEAP32[i9 + 136 >> 2] & 63](i9 + 92 | 0, i4, i1, i3 + 1 | 0) | 0;
        HEAP32[i9 + 12 >> 2] = i11;
        if (i11) {
         i2 = 43;
         break;
        }
        HEAP8[(HEAP32[(HEAP32[i9 + 116 >> 2] | 0) + (i4 << 2) >> 2] | 0) + i3 >> 0] = 0;
        i3 = i1;
        i2 = i2 + 1 | 0;
       } else i3 = i1;
      }
      FUNCTION_TABLE_vi[HEAP32[i9 + 28 >> 2] & 127](i9);
      i1 = HEAP32[i9 >> 2] | 0;
      if (i1 >>> 0 >= i7 >>> 0) {
       i1 = i3;
       break L40;
      }
     }
     if ((i2 | 0) == 22) {
      i1 = i1 + 1 | 0;
      break;
     } else if ((i2 | 0) == 43) {
      STACKTOP = i10;
      return;
     }
    } else i1 = i5; while (0);
    HEAP32[i8 + 368 >> 2] = 1;
    HEAP32[i9 >> 2] = i1;
    STACKTOP = i10;
    return;
   }
  }
 }
 HEAP32[i9 + 12 >> 2] = i1;
 STACKTOP = i10;
 return;
}

function __ZN15MaxRectsBinPack13SplitFreeNodeE4RectRKS0_(i9, i8, i6) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 i7 = (HEAP32[i8 + 8 >> 2] | 0) + i5 | 0;
 if ((i1 | 0) >= (i7 | 0)) {
  i8 = 0;
  STACKTOP = i10;
  return i8 | 0;
 }
 if (((HEAP32[i6 + 8 >> 2] | 0) + i1 | 0) <= (i5 | 0)) {
  i8 = 0;
  STACKTOP = i10;
  return i8 | 0;
 }
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 i3 = HEAP32[i8 + 4 >> 2] | 0;
 i4 = (HEAP32[i8 + 12 >> 2] | 0) + i3 | 0;
 if ((i1 | 0) >= (i4 | 0)) {
  i8 = 0;
  STACKTOP = i10;
  return i8 | 0;
 }
 if (((HEAP32[i6 + 12 >> 2] | 0) + i1 | 0) <= (i3 | 0)) {
  i8 = 0;
  STACKTOP = i10;
  return i8 | 0;
 }
 do if ((i1 | 0) > (i3 | 0)) {
  HEAP32[i10 + 48 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i10 + 48 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i10 + 48 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i10 + 48 + 12 >> 2] = i1 - (HEAP32[i10 + 48 + 4 >> 2] | 0);
  i1 = HEAP32[i9 + 24 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i9 + 28 >> 2] | 0)) {
   __ZNSt3__16vectorI4RectNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i9 + 20 | 0, i10 + 48 | 0);
   break;
  } else {
   HEAP32[i1 >> 2] = HEAP32[i10 + 48 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 48 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 48 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i10 + 48 + 12 >> 2];
   HEAP32[i9 + 24 >> 2] = (HEAP32[i9 + 24 >> 2] | 0) + 16;
   break;
  }
 } while (0);
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 i2 = HEAP32[i6 + 12 >> 2] | 0;
 do if ((i2 + i1 | 0) < (i4 | 0)) {
  HEAP32[i10 + 32 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i10 + 32 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i10 + 32 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i10 + 32 + 4 >> 2] = i2 + i1;
  HEAP32[i10 + 32 + 12 >> 2] = i4 - i1 - i2;
  i1 = HEAP32[i9 + 24 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i9 + 28 >> 2] | 0)) {
   __ZNSt3__16vectorI4RectNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i9 + 20 | 0, i10 + 32 | 0);
   break;
  } else {
   HEAP32[i1 >> 2] = HEAP32[i10 + 32 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 32 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 32 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i10 + 32 + 12 >> 2];
   HEAP32[i9 + 24 >> 2] = (HEAP32[i9 + 24 >> 2] | 0) + 16;
   break;
  }
 } while (0);
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 if ((i1 | 0) >= (i4 | 0)) {
  i8 = 1;
  STACKTOP = i10;
  return i8 | 0;
 }
 if (((HEAP32[i6 + 12 >> 2] | 0) + i1 | 0) <= (i3 | 0)) {
  i8 = 1;
  STACKTOP = i10;
  return i8 | 0;
 }
 i1 = HEAP32[i6 >> 2] | 0;
 do if ((i1 | 0) > (i5 | 0) & (i1 | 0) < (i7 | 0)) {
  HEAP32[i10 + 16 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i10 + 16 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  HEAP32[i10 + 16 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
  HEAP32[i10 + 16 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
  HEAP32[i10 + 16 + 8 >> 2] = i1 - (HEAP32[i10 + 16 >> 2] | 0);
  i1 = HEAP32[i9 + 24 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i9 + 28 >> 2] | 0)) {
   __ZNSt3__16vectorI4RectNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i9 + 20 | 0, i10 + 16 | 0);
   break;
  } else {
   HEAP32[i1 >> 2] = HEAP32[i10 + 16 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 16 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 16 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i10 + 16 + 12 >> 2];
   HEAP32[i9 + 24 >> 2] = (HEAP32[i9 + 24 >> 2] | 0) + 16;
   break;
  }
 } while (0);
 i2 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 if ((i1 + i2 | 0) >= (i7 | 0)) {
  i8 = 1;
  STACKTOP = i10;
  return i8 | 0;
 };
 HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i10 >> 2] = i1 + i2;
 HEAP32[i10 + 8 >> 2] = i7 - i2 - i1;
 i1 = HEAP32[i9 + 24 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i9 + 28 >> 2] | 0)) {
  __ZNSt3__16vectorI4RectNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i9 + 20 | 0, i10);
  i8 = 1;
  STACKTOP = i10;
  return i8 | 0;
 } else {
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
  HEAP32[i9 + 24 >> 2] = (HEAP32[i9 + 24 >> 2] | 0) + 16;
  i8 = 1;
  STACKTOP = i10;
  return i8 | 0;
 }
 return 0;
}

function _FT_Matrix_Invert(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i11) {
  i11 = 6;
  return i11 | 0;
 }
 i10 = HEAP32[i11 >> 2] | 0;
 i8 = HEAP32[i11 + 12 >> 2] | 0;
 if ((i10 | 0) == 0 | (i8 | 0) == 65536) i3 = i10; else {
  i2 = (i10 | 0) < 0 ? 0 - i10 | 0 : i10;
  i1 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
  if (i2 >>> 0 < 2049 & i1 >>> 0 < 1048577) i1 = ((Math_imul(i1, i2) | 0) + 32768 | 0) >>> 16; else i1 = (Math_imul(i1 >>> 16, i2 & 65535) | 0) + (Math_imul(i2 >>> 16, i1) | 0) + (((Math_imul(i1 & 65535, i2 & 65535) | 0) + 32768 | 0) >>> 16) | 0;
  i3 = (i8 ^ i10 | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 i5 = HEAP32[i11 + 4 >> 2] | 0;
 i6 = HEAP32[i11 + 8 >> 2] | 0;
 if ((i5 | 0) == 0 | (i6 | 0) == 65536) i1 = i5; else {
  i1 = (i5 | 0) < 0 ? 0 - i5 | 0 : i5;
  i2 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
  if (i1 >>> 0 < 2049 & i2 >>> 0 < 1048577) i1 = ((Math_imul(i2, i1) | 0) + 32768 | 0) >>> 16; else i1 = (Math_imul(i2 >>> 16, i1 & 65535) | 0) + (Math_imul(i1 >>> 16, i2) | 0) + (((Math_imul(i2 & 65535, i1 & 65535) | 0) + 32768 | 0) >>> 16) | 0;
  i1 = (i6 ^ i5 | 0) < 0 ? 0 - i1 | 0 : i1;
 }
 i9 = i3 - i1 | 0;
 if ((i3 | 0) == (i1 | 0)) {
  i11 = 6;
  return i11 | 0;
 }
 i2 = (i5 | 0) < 0 ? 0 - i5 | 0 : i5;
 i7 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
 do if (i7) {
  if (!(i2 >> 16)) {
   i1 = (((i2 << 16) + (i7 >> 1) | 0) >>> 0) / (i7 >>> 0) | 0;
   break;
  }
  if (((((i2 << 16) + (i7 >> 1) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0) >>> 0 < i7 >>> 0) {
   i3 = (i2 << 16) + (i7 >> 1) | 0;
   i4 = 32;
   i1 = 0;
   i2 = (((i2 << 16) + (i7 >> 1) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0;
   while (1) {
    i2 = i2 << 1 | i3 >>> 31;
    i1 = (i2 >>> 0 < i7 >>> 0 | i1 << 1) ^ 1;
    i4 = i4 + -1 | 0;
    if (!i4) break; else {
     i3 = i3 << 1;
     i2 = i2 - (i2 >>> 0 < i7 >>> 0 ? 0 : i7) | 0;
    }
   }
  } else i1 = 2147483647;
 } else i1 = 2147483647; while (0);
 HEAP32[i11 + 4 >> 2] = 0 - ((i5 ^ i9 | 0) < 0 ? 0 - i1 | 0 : i1);
 i2 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
 do if (i7) {
  if (!(i2 >> 16)) {
   i1 = (((i2 << 16) + (i7 >> 1) | 0) >>> 0) / (i7 >>> 0) | 0;
   break;
  }
  if (((((i2 << 16) + (i7 >> 1) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0) >>> 0 < i7 >>> 0) {
   i3 = (i2 << 16) + (i7 >> 1) | 0;
   i4 = 32;
   i1 = 0;
   i2 = (((i2 << 16) + (i7 >> 1) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0;
   while (1) {
    i2 = i2 << 1 | i3 >>> 31;
    i1 = (i2 >>> 0 < i7 >>> 0 | i1 << 1) ^ 1;
    i4 = i4 + -1 | 0;
    if (!i4) break; else {
     i3 = i3 << 1;
     i2 = i2 - (i2 >>> 0 < i7 >>> 0 ? 0 : i7) | 0;
    }
   }
  } else i1 = 2147483647;
 } else i1 = 2147483647; while (0);
 HEAP32[i11 + 8 >> 2] = 0 - ((i6 ^ i9 | 0) < 0 ? 0 - i1 | 0 : i1);
 i2 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
 do if (i7) {
  if (!(i2 >> 16)) {
   i1 = (((i2 << 16) + (i7 >> 1) | 0) >>> 0) / (i7 >>> 0) | 0;
   break;
  }
  if (((((i2 << 16) + (i7 >> 1) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0) >>> 0 < i7 >>> 0) {
   i3 = (i2 << 16) + (i7 >> 1) | 0;
   i4 = 32;
   i1 = 0;
   i2 = (((i2 << 16) + (i7 >> 1) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0;
   while (1) {
    i2 = i2 << 1 | i3 >>> 31;
    i1 = (i2 >>> 0 < i7 >>> 0 | i1 << 1) ^ 1;
    i4 = i4 + -1 | 0;
    if (!i4) break; else {
     i3 = i3 << 1;
     i2 = i2 - (i2 >>> 0 < i7 >>> 0 ? 0 : i7) | 0;
    }
   }
  } else i1 = 2147483647;
 } else i1 = 2147483647; while (0);
 HEAP32[i11 >> 2] = (i8 ^ i9 | 0) < 0 ? 0 - i1 | 0 : i1;
 i2 = (i10 | 0) < 0 ? 0 - i10 | 0 : i10;
 do if (i7) {
  if (!(i2 >> 16)) {
   i1 = (((i2 << 16) + (i7 >> 1) | 0) >>> 0) / (i7 >>> 0) | 0;
   break;
  }
  if (((((i2 << 16) + (i7 >> 1) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0) >>> 0 < i7 >>> 0) {
   i3 = (i2 << 16) + (i7 >> 1) | 0;
   i4 = 32;
   i1 = 0;
   i2 = (((i2 << 16) + (i7 >> 1) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0;
   while (1) {
    i2 = i2 << 1 | i3 >>> 31;
    i1 = (i2 >>> 0 < i7 >>> 0 | i1 << 1) ^ 1;
    i4 = i4 + -1 | 0;
    if (!i4) break; else {
     i3 = i3 << 1;
     i2 = i2 - (i2 >>> 0 < i7 >>> 0 ? 0 : i7) | 0;
    }
   }
  } else i1 = 2147483647;
 } else i1 = 2147483647; while (0);
 HEAP32[i11 + 12 >> 2] = (i10 ^ i9 | 0) < 0 ? 0 - i1 | 0 : i1;
 i11 = 0;
 return i11 | 0;
}

function _psh_globals_set_scale(i6, i4, i7, i2, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i8 = 0;
 if (!((HEAP32[i6 + 200 >> 2] | 0) == (i4 | 0) ? (HEAP32[i6 + 204 >> 2] | 0) == (i2 | 0) : 0)) i3 = 3;
 if (((i3 | 0) == 3 ? (HEAP32[i6 + 200 >> 2] = i4, HEAP32[i6 + 204 >> 2] = i2, i1 = HEAP32[i6 + 4 >> 2] | 0, (i1 | 0) != 0) : 0) ? (i3 = _FT_MulFix(HEAP32[i6 + 8 >> 2] | 0, i4) | 0, HEAP32[i6 + 12 >> 2] = i3, HEAP32[i6 + 16 >> 2] = i3 + 32 & -64, (i1 + -1 | 0) != 0) : 0) {
  i1 = i1 + -1 | 0;
  i2 = i6 + 20 | 0;
  while (1) {
   i3 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i4) | 0;
   i8 = HEAP32[i6 + 12 >> 2] | 0;
   i3 = (((i3 - i8 | 0) < 0 ? 0 - (i3 - i8) | 0 : i3 - i8 | 0) | 0) < 128 ? i8 : i3;
   HEAP32[i2 + 4 >> 2] = i3;
   HEAP32[i2 + 8 >> 2] = i3 + 32 & -64;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 12 | 0;
  }
 }
 if ((HEAP32[i6 + 404 >> 2] | 0) == (i7 | 0) ? (HEAP32[i6 + 408 >> 2] | 0) == (i5 | 0) : 0) return 0;
 HEAP32[i6 + 404 >> 2] = i7;
 HEAP32[i6 + 408 >> 2] = i5;
 i1 = HEAP32[i6 + 208 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i8 = _FT_MulFix(HEAP32[i6 + 212 >> 2] | 0, i7) | 0, HEAP32[i6 + 216 >> 2] = i8, HEAP32[i6 + 220 >> 2] = i8 + 32 & -64, (i1 + -1 | 0) != 0) : 0) {
  i1 = i1 + -1 | 0;
  i2 = i6 + 224 | 0;
  while (1) {
   i8 = _FT_MulFix(HEAP32[i2 >> 2] | 0, i7) | 0;
   i4 = HEAP32[i6 + 216 >> 2] | 0;
   i8 = (((i8 - i4 | 0) < 0 ? 0 - (i8 - i4) | 0 : i8 - i4 | 0) | 0) < 128 ? i4 : i8;
   HEAP32[i2 + 4 >> 2] = i8;
   HEAP32[i2 + 8 >> 2] = i8 + 32 & -64;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 12 | 0;
  }
 }
 i1 = HEAP32[i6 + 2476 >> 2] | 0;
 if ((i7 | 0) > 34359737) i1 = ((i1 << 3 | 0) / 125 | 0 | 0) > (i7 | 0); else i1 = (i7 * 125 | 0) < (i1 << 3 | 0);
 HEAP8[i6 + 2492 >> 0] = i1 & 1;
 i1 = HEAP32[i6 + 2480 >> 2] | 0;
 L24 : do if ((i1 | 0) > 0) while (1) {
  if ((_FT_MulFix(i1, i7) | 0) <= 32) break L24;
  i2 = i1 + -1 | 0;
  if ((i1 | 0) > 1) i1 = i2; else {
   i1 = i2;
   break;
  }
 } while (0);
 HEAP32[i6 + 2484 >> 2] = i1;
 i3 = 0;
 do {
  switch (i3 | 0) {
  case 0:
   {
    i2 = i6 + 412 | 0;
    break;
   }
  case 1:
   {
    i2 = i6 + 928 | 0;
    break;
   }
  case 2:
   {
    i2 = i6 + 1444 | 0;
    break;
   }
  default:
   i2 = i6 + 1960 | 0;
  }
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1) {
   i2 = i2 + 4 | 0;
   while (1) {
    HEAP32[i2 + 28 >> 2] = (_FT_MulFix(HEAP32[i2 + 8 >> 2] | 0, i7) | 0) + i5;
    HEAP32[i2 + 24 >> 2] = (_FT_MulFix(HEAP32[i2 + 12 >> 2] | 0, i7) | 0) + i5;
    i8 = i2 + 16 | 0;
    HEAP32[i8 >> 2] = (_FT_MulFix(HEAP32[i2 >> 2] | 0, i7) | 0) + i5;
    HEAP32[i2 + 20 >> 2] = _FT_MulFix(HEAP32[i2 + 4 >> 2] | 0, i7) | 0;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 32 & -64;
    i1 = i1 + -1 | 0;
    if (!i1) break; else i2 = i2 + 32 | 0;
   }
  }
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != 4);
 i1 = HEAP32[i6 + 412 >> 2] | 0;
 if (i1) {
  i4 = i6 + 416 | 0;
  while (1) {
   i2 = HEAP32[i6 + 1444 >> 2] | 0;
   L46 : do if (i2) {
    i3 = i6 + 1448 | 0;
    while (1) {
     i8 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
     if ((_FT_MulFix((i8 | 0) < 0 ? 0 - i8 | 0 : i8, i7) | 0) < 64) {
      i2 = i3;
      break;
     }
     i2 = i2 + -1 | 0;
     if (!i2) break L46; else i3 = i3 + 32 | 0;
    }
    HEAP32[i4 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
    HEAP32[i4 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
    HEAP32[i4 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
    HEAP32[i4 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
   } while (0);
   i1 = i1 + -1 | 0;
   if (!i1) break; else i4 = i4 + 32 | 0;
  }
 }
 i1 = HEAP32[i6 + 928 >> 2] | 0;
 if (!i1) return 0;
 i4 = i6 + 932 | 0;
 while (1) {
  i2 = HEAP32[i6 + 1960 >> 2] | 0;
  L59 : do if (i2) {
   i3 = i6 + 1964 | 0;
   while (1) {
    i8 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
    if ((_FT_MulFix((i8 | 0) < 0 ? 0 - i8 | 0 : i8, i7) | 0) < 64) {
     i2 = i3;
     break;
    }
    i2 = i2 + -1 | 0;
    if (!i2) break L59; else i3 = i3 + 32 | 0;
   }
   HEAP32[i4 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
   HEAP32[i4 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
   HEAP32[i4 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
   HEAP32[i4 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
  } while (0);
  i1 = i1 + -1 | 0;
  if (!i1) break; else i4 = i4 + 32 | 0;
 }
 return 0;
}

function _cid_slot_load_glyph(i10, i5, i2, i1) {
 i10 = i10 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 1552 | 0;
 i3 = HEAP32[i10 + 4 >> 2] | 0;
 i4 = HEAP32[i3 + 136 >> 2] | 0;
 if ((HEAP32[i3 + 16 >> 2] | 0) >>> 0 <= i2 >>> 0) {
  i10 = 6;
  STACKTOP = i11;
  return i10 | 0;
 }
 i9 = (i1 & 1024 | 0) == 0 ? i1 : i1 | 3;
 HEAP32[i10 + 164 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i10 + 168 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP16[i10 + 110 >> 1] = 0;
 HEAP16[i10 + 108 >> 1] = 0;
 if (!(i9 & 1)) i6 = (i9 >>> 1 & 1 ^ 1) & 255; else i6 = 0;
 HEAP32[i10 + 72 >> 2] = 1869968492;
 i1 = FUNCTION_TABLE_iiiiiiiiii[HEAP32[HEAP32[i4 + 12 >> 2] >> 2] & 1](i11 + 40 | 0, i3, i5, i10, 0, 0, i6, i9 >>> 16 & 15, 154) | 0;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP8[i11 + 40 + 69 >> 0] = (i9 & 1024) >>> 10;
 i1 = _cid_load_glyph(i11 + 40 | 0, i2) | 0;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i11 + 24 >> 2] = HEAP32[i11 + 40 + 1376 >> 2];
 HEAP32[i11 + 24 + 4 >> 2] = HEAP32[i11 + 40 + 1376 + 4 >> 2];
 HEAP32[i11 + 24 + 8 >> 2] = HEAP32[i11 + 40 + 1376 + 8 >> 2];
 HEAP32[i11 + 24 + 12 >> 2] = HEAP32[i11 + 40 + 1376 + 12 >> 2];
 i1 = HEAP32[i11 + 40 + 1392 >> 2] | 0;
 i2 = HEAP32[i11 + 40 + 1396 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + 4 >> 2] & 127](i11 + 40 | 0);
 HEAP32[i10 + 124 >> 2] = HEAP32[i10 + 124 >> 2] & 1 | 4;
 if (i9 & 1024) {
  i8 = HEAP32[i10 + 156 >> 2] | 0;
  HEAP32[i10 + 32 >> 2] = (_FT_RoundFix(HEAP32[i11 + 40 + 32 >> 2] | 0) | 0) >> 16;
  HEAP32[i10 + 40 >> 2] = (_FT_RoundFix(HEAP32[i11 + 40 + 40 >> 2] | 0) | 0) >> 16;
  HEAP32[i8 + 12 >> 2] = HEAP32[i11 + 24 >> 2];
  HEAP32[i8 + 12 + 4 >> 2] = HEAP32[i11 + 24 + 4 >> 2];
  HEAP32[i8 + 12 + 8 >> 2] = HEAP32[i11 + 24 + 8 >> 2];
  HEAP32[i8 + 12 + 12 >> 2] = HEAP32[i11 + 24 + 12 >> 2];
  HEAP32[i8 + 28 >> 2] = i1;
  HEAP32[i8 + 32 >> 2] = i2;
  HEAP8[i8 + 8 >> 0] = 1;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i10 + 40 >> 2] = (_FT_RoundFix(HEAP32[i11 + 40 + 40 >> 2] | 0) | 0) >> 16;
 HEAP32[i10 + 56 >> 2] = (_FT_RoundFix(HEAP32[i11 + 40 + 40 >> 2] | 0) | 0) >> 16;
 HEAP8[(HEAP32[i10 + 156 >> 2] | 0) + 8 >> 0] = 0;
 i4 = (HEAP32[i3 + 208 >> 2] | 0) - (HEAP32[i3 + 200 >> 2] | 0) >> 16;
 HEAP32[i10 + 52 >> 2] = i4;
 HEAP32[i10 + 60 >> 2] = i4;
 HEAP32[i10 + 72 >> 2] = 1869968492;
 if ((HEAPU16[i5 + 14 >> 1] | 0) < 24) HEAP32[i10 + 124 >> 2] = HEAP32[i10 + 124 >> 2] | 256;
 _FT_Outline_Transform(i10 + 108 | 0, i11 + 24 | 0);
 _FT_Outline_Translate(i10 + 108 | 0, i1, i2);
 HEAP32[i11 >> 2] = HEAP32[i10 + 40 >> 2];
 HEAP32[i11 + 4 >> 2] = 0;
 _FT_Vector_Transform(i11, i11 + 24 | 0);
 HEAP32[i10 + 40 >> 2] = (HEAP32[i11 >> 2] | 0) + i1;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = HEAP32[i10 + 52 >> 2];
 _FT_Vector_Transform(i11, i11 + 24 | 0);
 HEAP32[i10 + 52 >> 2] = (HEAP32[i11 + 4 >> 2] | 0) + i2;
 if (!(i9 & 1)) {
  i2 = HEAP32[i11 + 40 + 16 >> 2] | 0;
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  i3 = HEAP32[i10 + 164 >> 2] | 0;
  i4 = HEAP32[i10 + 168 >> 2] | 0;
  if (!(i6 << 24 >> 24 != 0 ? (HEAP32[i11 + 40 + 72 >> 2] | 0) != 0 : 0)) i8 = 13;
  if ((i8 | 0) == 13 ? (i7 = HEAP16[i2 + 2 >> 1] | 0, i7 << 16 >> 16 > 0) : 0) {
   i2 = i7 << 16 >> 16;
   while (1) {
    HEAP32[i1 >> 2] = _FT_MulFix(HEAP32[i1 >> 2] | 0, i3) | 0;
    i8 = i1 + 4 | 0;
    HEAP32[i8 >> 2] = _FT_MulFix(HEAP32[i8 >> 2] | 0, i4) | 0;
    if ((i2 | 0) > 1) {
     i2 = i2 + -1 | 0;
     i1 = i1 + 8 | 0;
    } else break;
   }
  }
  HEAP32[i10 + 40 >> 2] = _FT_MulFix(HEAP32[i10 + 40 >> 2] | 0, i3) | 0;
  HEAP32[i10 + 52 >> 2] = _FT_MulFix(HEAP32[i10 + 52 >> 2] | 0, i4) | 0;
 }
 _FT_Outline_Get_CBox(i10 + 108 | 0, i11 + 8 | 0);
 i7 = HEAP32[i11 + 8 >> 2] | 0;
 HEAP32[i10 + 24 >> 2] = (HEAP32[i11 + 8 + 8 >> 2] | 0) - i7;
 i8 = HEAP32[i11 + 8 + 12 >> 2] | 0;
 HEAP32[i10 + 28 >> 2] = i8 - (HEAP32[i11 + 8 + 4 >> 2] | 0);
 HEAP32[i10 + 32 >> 2] = i7;
 HEAP32[i10 + 36 >> 2] = i8;
 if (!(i9 & 16)) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 _ft_synthesize_vertical_metrics(i10 + 24 | 0, HEAP32[i10 + 52 >> 2] | 0);
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function __ZN7Texture16CopyRegion2D_GPUEjbiiijbiiiii(i11, i9, i10, i1, i2, i12, i8, i4, i5, i6, i7, i3) {
 i11 = i11 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if (!i12) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 300921, i2);
  STACKTOP = i2;
  return;
 }
 if (i8) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 300972, i2 + 8 | 0);
  STACKTOP = i2;
  return;
 }
 if (!(HEAP32[93] | 0)) _glGenFramebuffers(1, 372);
 if (!(HEAP32[94] | 0)) {
  HEAP32[i2 + 72 >> 2] = 0;
  HEAP32[i2 + 72 + 4 >> 2] = 0;
  HEAP32[i2 + 72 + 8 >> 2] = 0;
  HEAP32[i2 + 72 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i2 + 72 | 0, 301101);
  __Z25TranslateShaderCodeString10ShaderType6String(i2 + 88 | 0, 1, i2 + 72 | 0);
  i1 = HEAP32[i2 + 72 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i2 + 72 >> 2] = 0;
  i1 = _glCreateShader(35633) | 0;
  HEAP32[94] = i1;
  _glShaderSource(i1 | 0, 1, i2 + 88 | 0, 0);
  _glCompileShader(HEAP32[94] | 0);
  __Z24PrintShaderCompileErrorsjjPKcS0_(HEAP32[94] | 0, 35633, HEAP32[i2 + 88 >> 2] | 0, 301201) | 0;
  i1 = HEAP32[i2 + 88 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i2 + 88 >> 2] = 0;
 }
 if (!(HEAP32[95] | 0)) {
  HEAP32[i2 + 40 >> 2] = 0;
  HEAP32[i2 + 40 + 4 >> 2] = 0;
  HEAP32[i2 + 40 + 8 >> 2] = 0;
  HEAP32[i2 + 40 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i2 + 40 | 0, 301246);
  __Z25TranslateShaderCodeString10ShaderType6String(i2 + 56 | 0, 2, i2 + 40 | 0);
  i1 = HEAP32[i2 + 40 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i2 + 40 >> 2] = 0;
  i1 = _glCreateShader(35632) | 0;
  HEAP32[95] = i1;
  _glShaderSource(i1 | 0, 1, i2 + 56 | 0, 0);
  _glCompileShader(HEAP32[95] | 0);
  __Z24PrintShaderCompileErrorsjjPKcS0_(HEAP32[95] | 0, 35632, HEAP32[i2 + 56 >> 2] | 0, 301359) | 0;
  i1 = HEAP32[i2 + 56 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i2 + 56 >> 2] = 0;
 }
 HEAP32[i2 + 36 >> 2] = 0;
 _glGetIntegerv(35725, i2 + 36 | 0);
 i1 = HEAP32[96] | 0;
 if (!i1) {
  i1 = _glCreateProgram() | 0;
  HEAP32[96] = i1;
  _glAttachShader(i1 | 0, HEAP32[94] | 0);
  _glAttachShader(HEAP32[96] | 0, HEAP32[95] | 0);
  _glBindAttribLocation(HEAP32[96] | 0, 0, 301406);
  _glBindAttribLocation(HEAP32[96] | 0, 1, 301410);
  _glLinkProgram(HEAP32[96] | 0);
  __Z22PrintProgramLinkErrorsj(HEAP32[96] | 0) | 0;
  i1 = HEAP32[96] | 0;
 }
 _glUseProgram(i1 | 0);
 HEAP32[i2 + 32 >> 2] = 0;
 _glGetIntegerv(34964, i2 + 32 | 0);
 i1 = HEAP32[97] | 0;
 if (!i1) {
  _glGenBuffers(1, 388);
  _glBindBuffer(34962, HEAP32[97] | 0);
  _glBufferData(34962, 96, 392, 35044);
 } else _glBindBuffer(34962, i1 | 0);
 HEAP32[i2 + 28 >> 2] = 0;
 _glGetIntegerv(36006, i2 + 28 | 0);
 do if (i11) {
  _glBindFramebuffer(36160, HEAP32[93] | 0);
  if (i9) {
   _glFramebufferRenderbuffer(36160, 36064, 36161, i11 | 0);
   break;
  } else {
   _glFramebufferTexture2D(36160, 36064, 3553, i11 | 0, i10 | 0);
   break;
  }
 } else {
  if (i10) {
   HEAP32[i2 + 16 >> 2] = i10;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 301413, i2 + 16 | 0);
  }
  _glBindFramebuffer(36160, 0);
 } while (0);
 HEAP8[i2 + 106 >> 0] = 0;
 _glGetBooleanv(3042, i2 + 106 | 0);
 _glDisable(3042);
 HEAP8[i2 + 105 >> 0] = 0;
 _glGetBooleanv(2929, i2 + 105 | 0);
 _glDisable(2929);
 HEAP8[i2 + 104 >> 0] = 0;
 _glGetBooleanv(2884, i2 + 104 | 0);
 _glDisable(2884);
 _glVertexAttribPointer(0, 2, 5126, 0, 16, 0);
 _glVertexAttribPointer(1, 2, 5126, 0, 16, 8);
 _glEnableVertexAttribArray(0);
 _glEnableVertexAttribArray(1);
 HEAP32[i2 + 24 >> 2] = 0;
 _glGetIntegerv(34016, i2 + 24 | 0);
 _glActiveTexture(33984);
 HEAP32[i2 + 20 >> 2] = 0;
 _glGetIntegerv(32873, i2 + 20 | 0);
 _glBindTexture(3553, i12 | 0);
 _glDrawArrays(4, 0, 6);
 _glBindTexture(3553, HEAP32[i2 + 20 >> 2] | 0);
 _glActiveTexture(HEAP32[i2 + 24 >> 2] | 0);
 if (HEAP8[i2 + 104 >> 0] | 0) _glEnable(2884);
 if (HEAP8[i2 + 105 >> 0] | 0) _glEnable(2929);
 if (HEAP8[i2 + 106 >> 0] | 0) _glEnable(3042);
 _glBindFramebuffer(36160, HEAP32[i2 + 28 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[i2 + 32 >> 2] | 0);
 _glUseProgram(HEAP32[i2 + 36 >> 2] | 0);
 STACKTOP = i2;
 return;
}

function _psh_hint_table_init(i23, i2, i3, i1) {
 i23 = i23 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i20 = HEAP32[i2 >> 2] | 0;
 HEAP32[i23 + 12 >> 2] = _ft_mem_realloc(i1, 4, 0, i20 << 1, 0, i24) | 0;
 if (HEAP32[i24 >> 2] | 0) {
  i23 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 HEAP32[i23 + 8 >> 2] = _ft_mem_realloc(i1, 28, 0, i20, 0, i24) | 0;
 if (HEAP32[i24 >> 2] | 0) {
  i23 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 HEAP32[i23 + 24 >> 2] = _ft_mem_realloc(i1, 16, 0, i20 << 1 | 1, 0, i24) | 0;
 if (HEAP32[i24 >> 2] | 0) {
  i23 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i24;
  return i23 | 0;
 }
 HEAP32[i23 >> 2] = i20;
 HEAP32[i23 + 16 >> 2] = (HEAP32[i23 + 12 >> 2] | 0) + (i20 << 2);
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 20 >> 2] = 0;
 HEAP32[i23 + 28 >> 2] = 0;
 if (i20) {
  i9 = i20;
  i1 = HEAP32[i2 + 8 >> 2] | 0;
  i2 = HEAP32[i23 + 8 >> 2] | 0;
  while (1) {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 8 >> 2];
   i9 = i9 + -1 | 0;
   if (!i9) break; else {
    i1 = i1 + 12 | 0;
    i2 = i2 + 28 | 0;
   }
  }
 }
 if ((i3 | 0) != 0 ? (i5 = HEAP32[i3 + 8 >> 2] | 0, i4 = HEAP32[i3 >> 2] | 0, HEAP32[i23 + 32 >> 2] = i3, (i4 | 0) != 0) : 0) {
  i1 = 0;
  while (1) {
   i15 = HEAP32[i5 >> 2] | 0;
   if (i15) {
    i3 = HEAP32[i5 + 8 >> 2] | 0;
    i14 = 0;
    i9 = 0;
    i2 = 0;
    while (1) {
     if (!i9) {
      i13 = i3 + 1 | 0;
      i9 = 128;
      i2 = HEAPU8[i3 >> 0] | 0;
     } else i13 = i3;
     if (((i9 & i2 | 0) != 0 ? (i16 = HEAP32[i23 + 8 >> 2] | 0, i17 = i16 + (i14 * 28 | 0) | 0, i20 >>> 0 > i14 >>> 0) : 0) ? (i18 = i16 + (i14 * 28 | 0) + 16 | 0, i19 = HEAP32[i18 >> 2] | 0, (i19 & 4 | 0) == 0) : 0) {
      HEAP32[i18 >> 2] = i19 | 4;
      i6 = HEAP32[i23 + 16 >> 2] | 0;
      i7 = i16 + (i14 * 28 | 0) + 20 | 0;
      HEAP32[i7 >> 2] = 0;
      L30 : do if (i1) {
       i3 = HEAP32[i17 >> 2] | 0;
       i8 = (HEAP32[i16 + (i14 * 28 | 0) + 4 >> 2] | 0) + i3 | 0;
       i11 = i1;
       i12 = i6;
       while (1) {
        i10 = HEAP32[i12 >> 2] | 0;
        i25 = HEAP32[i10 >> 2] | 0;
        if ((i8 | 0) >= (i25 | 0) ? ((HEAP32[i10 + 4 >> 2] | 0) + i25 | 0) >= (i3 | 0) : 0) break;
        i11 = i11 + -1 | 0;
        if (!i11) break L30; else i12 = i12 + 4 | 0;
       }
       HEAP32[i7 >> 2] = i10;
      } while (0);
      if (i1 >>> 0 < i20 >>> 0) {
       i25 = i1 + 1 | 0;
       HEAP32[i23 + 4 >> 2] = i25;
       HEAP32[i6 + (i1 << 2) >> 2] = i17;
       i1 = i25;
      }
     }
     i14 = i14 + 1 | 0;
     if ((i14 | 0) == (i15 | 0)) break; else {
      i3 = i13;
      i9 = i9 >> 1;
     }
    }
   }
   i4 = i4 + -1 | 0;
   if (!i4) break; else i5 = i5 + 16 | 0;
  }
 } else i1 = 0;
 if ((i1 | 0) == (i20 | 0) | (i20 | 0) == 0) {
  i25 = HEAP32[i24 >> 2] | 0;
  STACKTOP = i24;
  return i25 | 0;
 } else i10 = 0;
 do {
  i2 = HEAP32[i23 + 8 >> 2] | 0;
  i7 = i2 + (i10 * 28 | 0) | 0;
  if (i20 >>> 0 > i10 >>> 0 ? (i21 = i2 + (i10 * 28 | 0) + 16 | 0, i22 = HEAP32[i21 >> 2] | 0, (i22 & 4 | 0) == 0) : 0) {
   HEAP32[i21 >> 2] = i22 | 4;
   i8 = HEAP32[i23 + 16 >> 2] | 0;
   i9 = i2 + (i10 * 28 | 0) + 20 | 0;
   HEAP32[i9 >> 2] = 0;
   L50 : do if (i1) {
    i6 = HEAP32[i7 >> 2] | 0;
    i2 = (HEAP32[i2 + (i10 * 28 | 0) + 4 >> 2] | 0) + i6 | 0;
    i4 = i1;
    i5 = i8;
    while (1) {
     i3 = HEAP32[i5 >> 2] | 0;
     i25 = HEAP32[i3 >> 2] | 0;
     if ((i2 | 0) >= (i25 | 0) ? ((HEAP32[i3 + 4 >> 2] | 0) + i25 | 0) >= (i6 | 0) : 0) break;
     i4 = i4 + -1 | 0;
     if (!i4) break L50; else i5 = i5 + 4 | 0;
    }
    HEAP32[i9 >> 2] = i3;
   } while (0);
   if (i1 >>> 0 < i20 >>> 0) {
    i25 = i1 + 1 | 0;
    HEAP32[i23 + 4 >> 2] = i25;
    HEAP32[i8 + (i1 << 2) >> 2] = i7;
    i1 = i25;
   }
  }
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) != (i20 | 0));
 i25 = HEAP32[i24 >> 2] | 0;
 STACKTOP = i24;
 return i25 | 0;
}

function _qsort(i2, i1, i9, i8) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i6 = Math_imul(i9, i1) | 0;
 HEAP32[i11 >> 2] = 1;
 HEAP32[i11 + 4 >> 2] = 0;
 if (i6) {
  HEAP32[i11 + 8 + 4 >> 2] = i9;
  HEAP32[i11 + 8 >> 2] = i9;
  i3 = i9;
  i1 = i9;
  i4 = 2;
  while (1) {
   i1 = i1 + i9 + i3 | 0;
   HEAP32[i11 + 8 + (i4 << 2) >> 2] = i1;
   if (i1 >>> 0 < i6 >>> 0) {
    i7 = i3;
    i3 = i1;
    i4 = i4 + 1 | 0;
    i1 = i7;
   } else break;
  }
  if ((i6 - i9 | 0) > 0) {
   i4 = 1;
   i5 = i2;
   i3 = 1;
   while (1) {
    do if ((i4 & 3 | 0) == 3) {
     _sift(i5, i9, i8, i3, i11 + 8 | 0);
     i7 = HEAP32[i11 + 4 >> 2] | 0;
     i1 = i7 << 30 | (HEAP32[i11 >> 2] | 0) >>> 2;
     HEAP32[i11 >> 2] = i1;
     HEAP32[i11 + 4 >> 2] = i7 >>> 2;
     i3 = i3 + 2 | 0;
    } else {
     i1 = i3 + -1 | 0;
     if ((HEAP32[i11 + 8 + (i1 << 2) >> 2] | 0) >>> 0 < (i2 + (i6 - i9) - i5 | 0) >>> 0) _sift(i5, i9, i8, i3, i11 + 8 | 0); else _trinkle(i5, i9, i8, i11, i3, 0, i11 + 8 | 0);
     if ((i3 | 0) == 1) {
      i1 = HEAP32[i11 >> 2] | 0;
      HEAP32[i11 + 4 >> 2] = i1 >>> 31 | HEAP32[i11 + 4 >> 2] << 1;
      HEAP32[i11 >> 2] = i1 << 1;
      i1 = i1 << 1;
      i3 = 0;
      break;
     }
     if (i1 >>> 0 > 31) {
      i4 = HEAP32[i11 >> 2] | 0;
      HEAP32[i11 + 4 >> 2] = i4;
      HEAP32[i11 >> 2] = 0;
      i1 = i3 + -33 | 0;
      i3 = i4;
      i4 = 0;
     } else {
      i3 = HEAP32[i11 + 4 >> 2] | 0;
      i4 = HEAP32[i11 >> 2] | 0;
     }
     HEAP32[i11 + 4 >> 2] = i4 >>> (32 - i1 | 0) | i3 << i1;
     i1 = i4 << i1;
     HEAP32[i11 >> 2] = i1;
     i3 = 1;
    } while (0);
    i4 = i1 | 1;
    HEAP32[i11 >> 2] = i4;
    i1 = i5 + i9 | 0;
    if (i1 >>> 0 >= (i2 + (i6 - i9) | 0) >>> 0) {
     i2 = i1;
     break;
    } else i5 = i1;
   }
  } else i3 = 1;
  _trinkle(i2, i9, i8, i11, i3, 0, i11 + 8 | 0);
  i1 = HEAP32[i11 >> 2] | 0;
  if (!((i3 | 0) == 1 & (i1 | 0) == 1 & (HEAP32[i11 + 4 >> 2] | 0) == 0)) {
   i4 = i2;
   i7 = i3;
   while (1) {
    if ((i7 | 0) < 2) {
     i2 = i1 + -1 | 0;
     do if (i2) {
      if (!(i2 & 1)) {
       i3 = 0;
       do {
        i3 = i3 + 1 | 0;
        i2 = i2 >>> 1;
       } while ((i2 & 1 | 0) == 0);
       if (!i3) i10 = 24;
      } else i10 = 24;
      if ((i10 | 0) == 24) {
       i10 = 0;
       i6 = HEAP32[i11 + 4 >> 2] | 0;
       if (!i6) {
        i3 = 64;
        i10 = 30;
        break;
       }
       if (!(i6 & 1)) {
        i3 = i6;
        i2 = 0;
       } else {
        i5 = 0;
        i2 = i6;
        i3 = 0;
        break;
       }
       while (1) {
        i5 = i2 + 1 | 0;
        i3 = i3 >>> 1;
        if (i3 & 1) break; else i2 = i5;
       }
       if (!i5) {
        i5 = 0;
        i2 = i6;
        i3 = 0;
        break;
       } else i3 = i2 + 33 | 0;
      }
      if (i3 >>> 0 > 31) i10 = 30; else {
       i5 = i3;
       i2 = HEAP32[i11 + 4 >> 2] | 0;
      }
     } else {
      i3 = 32;
      i10 = 30;
     } while (0);
     if ((i10 | 0) == 30) {
      i10 = 0;
      i1 = HEAP32[i11 + 4 >> 2] | 0;
      HEAP32[i11 >> 2] = i1;
      HEAP32[i11 + 4 >> 2] = 0;
      i5 = i3 + -32 | 0;
      i2 = 0;
     }
     HEAP32[i11 >> 2] = i2 << 32 - i5 | i1 >>> i5;
     HEAP32[i11 + 4 >> 2] = i2 >>> i5;
     i4 = i4 + (0 - i9) | 0;
     i2 = i3 + i7 | 0;
    } else {
     i5 = i1 >>> 30;
     i6 = i5 | HEAP32[i11 + 4 >> 2] << 2;
     i2 = i7 + -2 | 0;
     HEAP32[i11 >> 2] = (i1 << 1 & 2147483646 | i5 << 31) ^ 3;
     HEAP32[i11 + 4 >> 2] = i6 >>> 1;
     _trinkle(i4 + (0 - ((HEAP32[i11 + 8 + (i2 << 2) >> 2] | 0) + i9)) | 0, i9, i8, i11, i7 + -1 | 0, 1, i11 + 8 | 0);
     i7 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 + 4 >> 2] = i7 >>> 31 | HEAP32[i11 + 4 >> 2] << 1;
     HEAP32[i11 >> 2] = i7 << 1 | 1;
     i4 = i4 + (0 - i9) | 0;
     _trinkle(i4, i9, i8, i11, i2, 1, i11 + 8 | 0);
    }
    i1 = HEAP32[i11 >> 2] | 0;
    if ((i2 | 0) == 1 & (i1 | 0) == 1 & (HEAP32[i11 + 4 >> 2] | 0) == 0) break; else i7 = i2;
   }
  }
 }
 STACKTOP = i11;
 return;
}

function _parse_subrs(i10, i11) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = HEAP32[i11 + 16 >> 2] | 0;
 i9 = HEAP32[i10 + 488 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
 i8 = HEAP32[i11 >> 2] | 0;
 if (i8 >>> 0 < (HEAP32[i11 + 8 >> 2] | 0) >>> 0 ? (HEAP8[i8 >> 0] | 0) == 91 : 0) {
  FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
  FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
  i10 = HEAP32[i11 >> 2] | 0;
  if (i10 >>> 0 < (HEAP32[i11 + 8 >> 2] | 0) >>> 0 ? (HEAP8[i10 >> 0] | 0) == 93 : 0) {
   STACKTOP = i12;
   return;
  }
  HEAP32[i11 + 12 >> 2] = 3;
  STACKTOP = i12;
  return;
 }
 i8 = FUNCTION_TABLE_ii[HEAP32[i11 + 36 >> 2] & 63](i11) | 0;
 FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
 if (HEAP32[i11 + 12 >> 2] | 0) {
  STACKTOP = i12;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
 if (!((HEAP32[i11 + 312 >> 2] | 0) == 0 ? (i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i9 >> 2] >> 2] & 127](i11 + 316 | 0, i8, i7) | 0, HEAP32[i12 >> 2] = i1, (i1 | 0) != 0) : 0)) i2 = 9;
 L15 : do if ((i2 | 0) == 9) {
  i1 = HEAP32[i11 >> 2] | 0;
  L17 : do if ((i1 + 4 | 0) >>> 0 < (HEAP32[i11 + 8 >> 2] | 0) >>> 0) {
   while (1) {
    if (_strncmp(i1, 323321, 3) | 0) break L17;
    FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
    i6 = FUNCTION_TABLE_ii[HEAP32[i11 + 36 >> 2] & 63](i11) | 0;
    i1 = HEAP32[(HEAP32[i10 + 128 >> 2] | 0) + 52 >> 2] | 0;
    i3 = HEAP32[i11 + 8 >> 2] | 0;
    FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
    i2 = HEAP32[i11 >> 2] | 0;
    if (i2 >>> 0 >= i3 >>> 0) {
     i2 = 16;
     break;
    }
    if (((HEAPU8[i2 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     i2 = 16;
     break;
    }
    i4 = FUNCTION_TABLE_ii[HEAP32[i11 + 36 >> 2] & 63](i11) | 0;
    FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
    i5 = HEAP32[i11 >> 2] | 0;
    if ((i4 | 0) <= -1) {
     i2 = 16;
     break;
    }
    if ((i4 | 0) >= (i3 - (i5 + 1) | 0)) {
     i2 = 16;
     break;
    }
    HEAP32[i11 >> 2] = i5 + (i4 + 1);
    if (HEAP32[i11 + 12 >> 2] | 0) {
     i2 = 35;
     break;
    }
    FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
    if (HEAP32[i11 + 12 >> 2] | 0) {
     i2 = 35;
     break;
    }
    FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
    i1 = HEAP32[i11 >> 2] | 0;
    if ((i1 + 4 | 0) >>> 0 < (HEAP32[i11 + 8 >> 2] | 0) >>> 0 ? (_strncmp(i1, 323325, 3) | 0) == 0 : 0) {
     FUNCTION_TABLE_vi[HEAP32[i11 + 32 >> 2] & 127](i11);
     FUNCTION_TABLE_vi[HEAP32[i11 + 28 >> 2] & 127](i11);
    }
    if (!(HEAP32[i11 + 312 >> 2] | 0)) {
     i1 = HEAP32[i10 + 172 >> 2] | 0;
     if ((i1 | 0) > -1) {
      if ((i4 | 0) < (i1 | 0)) {
       i2 = 27;
       break;
      }
      i2 = _ft_mem_alloc(i7, i4, i12) | 0;
      i1 = HEAP32[i12 >> 2] | 0;
      if (i1) break L15;
      _memcpy(i2 | 0, i5 + 1 | 0, i4 | 0) | 0;
      FUNCTION_TABLE_viii[HEAP32[i9 + 16 >> 2] & 31](i2, i4, 4330);
      i1 = HEAP32[i10 + 172 >> 2] | 0;
      HEAP32[i12 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[i11 + 360 >> 2] & 63](i11 + 316 | 0, i6, i2 + i1 | 0, i4 - i1 | 0) | 0;
      _ft_mem_free(i7, i2);
      i1 = HEAP32[i12 >> 2] | 0;
     } else {
      i1 = FUNCTION_TABLE_iiiii[HEAP32[i11 + 360 >> 2] & 63](i11 + 316 | 0, i6, i5 + 1 | 0, i4) | 0;
      HEAP32[i12 >> 2] = i1;
     }
     if (i1) break L15;
    }
    i1 = HEAP32[i11 >> 2] | 0;
    if ((i1 + 4 | 0) >>> 0 >= (HEAP32[i11 + 8 >> 2] | 0) >>> 0) break L17;
   }
   if ((i2 | 0) == 16) {
    if (i1) {
     STACKTOP = i12;
     return;
    }
    HEAP32[i11 + 12 >> 2] = 3;
    STACKTOP = i12;
    return;
   } else if ((i2 | 0) == 27) {
    HEAP32[i12 >> 2] = 3;
    i1 = 3;
    break L15;
   } else if ((i2 | 0) == 35) {
    STACKTOP = i12;
    return;
   }
  } while (0);
  if (HEAP32[i11 + 312 >> 2] | 0) {
   STACKTOP = i12;
   return;
  }
  HEAP32[i11 + 312 >> 2] = i8;
  STACKTOP = i12;
  return;
 } while (0);
 HEAP32[i11 + 12 >> 2] = i1;
 STACKTOP = i12;
 return;
}

function _TT_Hint_Glyph(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[(HEAP32[i8 + 8 >> 2] | 0) + 140 >> 2] | 0;
 i3 = HEAP16[i8 + 132 >> 1] | 0;
 i1 = HEAP32[i8 + 140 >> 2] | 0;
 i2 = HEAP32[i1 + ((i3 & 65535) + -4 << 3) >> 2] | 0;
 if ((i2 + 32 & -64 | 0) != (i2 | 0) ? i3 << 16 >> 16 != 0 : 0) {
  i4 = 0;
  do {
   i5 = i1 + (i4 << 3) | 0;
   HEAP32[i5 >> 2] = (i2 + 32 & -64) - i2 + (HEAP32[i5 >> 2] | 0);
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i3 & 65535 | 0));
 }
 if (i6) _memcpy(HEAP32[i8 + 136 >> 2] | 0, i1 | 0, (i3 & 65535) << 3 | 0) | 0;
 i2 = (HEAP32[i8 + 160 >> 2] | 0) + 284 | 0;
 i3 = (HEAP32[i8 + 4 >> 2] | 0) + 172 | 0;
 i4 = i2 + 68 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 if (!(i7 << 24 >> 24)) {
  i4 = HEAP32[i8 + 4 >> 2] | 0;
  i5 = HEAP32[i8 + 160 >> 2] | 0;
  HEAP32[i5 + 220 >> 2] = HEAP32[i4 + 48 >> 2];
  HEAP32[i5 + 224 >> 2] = HEAP32[i4 + 52 >> 2];
 } else {
  i5 = HEAP32[i8 + 160 >> 2] | 0;
  HEAP32[i5 + 220 >> 2] = 65536;
  HEAP32[i5 + 224 >> 2] = 65536;
  _memcpy(HEAP32[i8 + 144 >> 2] | 0, HEAP32[i8 + 140 >> 2] | 0, HEAPU16[i8 + 132 >> 1] << 3 | 0) | 0;
 }
 i5 = HEAPU16[i8 + 132 >> 1] | 0;
 i4 = HEAP32[i8 + 140 >> 2] | 0;
 HEAP32[i4 + (i5 + -3 << 3) >> 2] = (HEAP32[i4 + (i5 + -3 << 3) >> 2] | 0) + 32 & -64;
 HEAP32[i4 + (i5 + -1 << 3) + 4 >> 2] = (HEAP32[i4 + (i5 + -1 << 3) + 4 >> 2] | 0) + 32 & -64;
 if (i6) {
  i5 = HEAP32[(HEAP32[i8 + 12 >> 2] | 0) + 64 >> 2] | 0;
  i2 = HEAP32[i8 + 160 >> 2] | 0;
  HEAP32[i2 + 460 >> 2] = HEAP32[i2 + 392 >> 2];
  HEAP32[i2 + 464 >> 2] = i6;
  HEAP8[i2 + 560 >> 0] = i7;
  i2 = i2 + 144 | 0;
  i3 = i8 + 124 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  i1 = HEAP32[i8 + 160 >> 2] | 0;
  HEAP32[i1 + 356 >> 2] = HEAP32[i1 + 460 >> 2];
  HEAP32[i1 + 364 >> 2] = HEAP32[i1 + 464 >> 2];
  HEAP32[i1 + 360 >> 2] = 0;
  HEAP32[i1 + 352 >> 2] = 3;
  i2 = i1 + 36 | 0;
  i3 = i1 + 144 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  i2 = i1 + 72 | 0;
  i3 = i1 + 144 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  i2 = i1 + 108 | 0;
  i3 = i1 + 144 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  HEAP16[i1 + 344 >> 1] = 1;
  HEAP16[i1 + 346 >> 1] = 1;
  HEAP16[i1 + 348 >> 1] = 1;
  HEAP16[i1 + 294 >> 1] = 16384;
  HEAP16[i1 + 296 >> 1] = 0;
  i2 = HEAPU16[i1 + 294 >> 1] | HEAPU16[i1 + 294 + 2 >> 1] << 16;
  HEAP16[i1 + 298 >> 1] = i2;
  HEAP16[i1 + 298 + 2 >> 1] = i2 >>> 16;
  HEAP16[i1 + 290 >> 1] = i2;
  HEAP16[i1 + 290 + 2 >> 1] = i2 >>> 16;
  HEAP32[i1 + 312 >> 2] = 1;
  HEAP32[i1 + 304 >> 2] = 1;
  HEAP32[i1 + 16 >> 2] = 0;
  HEAP32[i1 + 428 >> 2] = 0;
  i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 688 >> 2] & 63](i1) | 0;
  i1 = HEAP32[i8 + 160 >> 2] | 0;
  if ((i2 | 0) != 0 ? (HEAP8[i1 + 561 >> 0] | 0) != 0 : 0) {
   i8 = i2;
   return i8 | 0;
  }
  HEAP8[i5 >> 0] = HEAP32[i1 + 340 >> 2] << 5 | HEAPU8[i5 >> 0] | 4;
 }
 if (HEAP8[i8 + 65 >> 0] | 0) {
  i8 = 0;
  return i8 | 0;
 }
 i6 = HEAPU16[i8 + 132 >> 1] | 0;
 i5 = HEAP32[i8 + 140 >> 2] | 0;
 i7 = HEAP32[i5 + (i6 + -4 << 3) + 4 >> 2] | 0;
 HEAP32[i8 + 68 >> 2] = HEAP32[i5 + (i6 + -4 << 3) >> 2];
 HEAP32[i8 + 68 + 4 >> 2] = i7;
 i7 = HEAP32[i5 + (i6 + -3 << 3) + 4 >> 2] | 0;
 HEAP32[i8 + 76 >> 2] = HEAP32[i5 + (i6 + -3 << 3) >> 2];
 HEAP32[i8 + 76 + 4 >> 2] = i7;
 i7 = HEAP32[i5 + (i6 + -2 << 3) + 4 >> 2] | 0;
 HEAP32[i8 + 184 >> 2] = HEAP32[i5 + (i6 + -2 << 3) >> 2];
 HEAP32[i8 + 184 + 4 >> 2] = i7;
 i7 = HEAP32[i5 + (i6 + -1 << 3) + 4 >> 2] | 0;
 HEAP32[i8 + 192 >> 2] = HEAP32[i5 + (i6 + -1 << 3) >> 2];
 HEAP32[i8 + 192 + 4 >> 2] = i7;
 i8 = 0;
 return i8 | 0;
}

function __ZNK4math8float4x4mlERKNS_8float3x4E(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, f16 = f0, f17 = f0, f18 = f0, f19 = f0;
 f6 = Math_fround(HEAPF32[i3 >> 2]);
 f7 = Math_fround(HEAPF32[i2 >> 2]);
 f15 = Math_fround(f6 * f7);
 f19 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f17 = Math_fround(HEAPF32[i2 + 16 >> 2]);
 f15 = Math_fround(f15 + Math_fround(f19 * f17));
 f18 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f16 = Math_fround(HEAPF32[i2 + 32 >> 2]);
 HEAPF32[i1 >> 2] = Math_fround(f15 + Math_fround(f18 * f16));
 f15 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f12 = Math_fround(f6 * f15);
 f14 = Math_fround(HEAPF32[i2 + 20 >> 2]);
 f12 = Math_fround(f12 + Math_fround(f19 * f14));
 f13 = Math_fround(HEAPF32[i2 + 36 >> 2]);
 HEAPF32[i1 + 4 >> 2] = Math_fround(f12 + Math_fround(f18 * f13));
 f12 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f8 = Math_fround(f6 * f12);
 f11 = Math_fround(HEAPF32[i2 + 24 >> 2]);
 f8 = Math_fround(f8 + Math_fround(f19 * f11));
 f10 = Math_fround(HEAPF32[i2 + 40 >> 2]);
 HEAPF32[i1 + 8 >> 2] = Math_fround(f8 + Math_fround(f18 * f10));
 f8 = Math_fround(HEAPF32[i2 + 12 >> 2]);
 f6 = Math_fround(f6 * f8);
 f5 = Math_fround(HEAPF32[i2 + 28 >> 2]);
 f19 = Math_fround(f6 + Math_fround(f19 * f5));
 f6 = Math_fround(HEAPF32[i2 + 44 >> 2]);
 f18 = Math_fround(f19 + Math_fround(f18 * f6));
 HEAPF32[i1 + 12 >> 2] = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) + f18);
 f18 = Math_fround(HEAPF32[i3 + 16 >> 2]);
 f19 = Math_fround(f18 * f7);
 f4 = Math_fround(HEAPF32[i3 + 20 >> 2]);
 f19 = Math_fround(f19 + Math_fround(f4 * f17));
 f9 = Math_fround(HEAPF32[i3 + 24 >> 2]);
 HEAPF32[i1 + 16 >> 2] = Math_fround(f19 + Math_fround(f9 * f16));
 HEAPF32[i1 + 20 >> 2] = Math_fround(Math_fround(Math_fround(f18 * f15) + Math_fround(f4 * f14)) + Math_fround(f9 * f13));
 HEAPF32[i1 + 24 >> 2] = Math_fround(Math_fround(Math_fround(f18 * f12) + Math_fround(f4 * f11)) + Math_fround(f9 * f10));
 f9 = Math_fround(Math_fround(Math_fround(f18 * f8) + Math_fround(f4 * f5)) + Math_fround(f9 * f6));
 HEAPF32[i1 + 28 >> 2] = Math_fround(Math_fround(HEAPF32[i3 + 28 >> 2]) + f9);
 f9 = Math_fround(HEAPF32[i3 + 32 >> 2]);
 f7 = Math_fround(f9 * f7);
 f4 = Math_fround(HEAPF32[i3 + 36 >> 2]);
 f17 = Math_fround(f7 + Math_fround(f4 * f17));
 f7 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 HEAPF32[i1 + 32 >> 2] = Math_fround(f17 + Math_fround(f7 * f16));
 HEAPF32[i1 + 36 >> 2] = Math_fround(Math_fround(Math_fround(f9 * f15) + Math_fround(f4 * f14)) + Math_fround(f7 * f13));
 HEAPF32[i1 + 40 >> 2] = Math_fround(Math_fround(Math_fround(f9 * f12) + Math_fround(f4 * f11)) + Math_fround(f7 * f10));
 f6 = Math_fround(Math_fround(Math_fround(f9 * f8) + Math_fround(f4 * f5)) + Math_fround(f7 * f6));
 HEAPF32[i1 + 44 >> 2] = Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) + f6);
 f6 = Math_fround(HEAPF32[i3 + 48 >> 2]);
 f7 = Math_fround(f6 * Math_fround(HEAPF32[i2 >> 2]));
 f5 = Math_fround(HEAPF32[i3 + 52 >> 2]);
 f7 = Math_fround(f7 + Math_fround(f5 * Math_fround(HEAPF32[i2 + 16 >> 2])));
 f4 = Math_fround(HEAPF32[i3 + 56 >> 2]);
 HEAPF32[i1 + 48 >> 2] = Math_fround(f7 + Math_fround(f4 * Math_fround(HEAPF32[i2 + 32 >> 2])));
 f7 = Math_fround(f6 * Math_fround(HEAPF32[i2 + 4 >> 2]));
 f7 = Math_fround(f7 + Math_fround(f5 * Math_fround(HEAPF32[i2 + 20 >> 2])));
 HEAPF32[i1 + 52 >> 2] = Math_fround(f7 + Math_fround(f4 * Math_fround(HEAPF32[i2 + 36 >> 2])));
 f7 = Math_fround(f6 * Math_fround(HEAPF32[i2 + 8 >> 2]));
 f7 = Math_fround(f7 + Math_fround(f5 * Math_fround(HEAPF32[i2 + 24 >> 2])));
 HEAPF32[i1 + 56 >> 2] = Math_fround(f7 + Math_fround(f4 * Math_fround(HEAPF32[i2 + 40 >> 2])));
 f6 = Math_fround(f6 * Math_fround(HEAPF32[i2 + 12 >> 2]));
 f5 = Math_fround(f6 + Math_fround(f5 * Math_fround(HEAPF32[i2 + 28 >> 2])));
 f4 = Math_fround(f5 + Math_fround(f4 * Math_fround(HEAPF32[i2 + 44 >> 2])));
 HEAPF32[i1 + 60 >> 2] = Math_fround(Math_fround(HEAPF32[i3 + 60 >> 2]) + f4);
 return;
}

function _cff_parse_cid_ros(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = HEAP32[i7 + 412 >> 2] | 0;
 if ((HEAP32[i7 + 404 >> 2] | 0) >>> 0 < (i7 + 28 | 0) >>> 0) {
  i8 = 161;
  return i8 | 0;
 }
 i2 = HEAP32[i7 + 16 >> 2] | 0;
 i1 = HEAP32[i7 + 20 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 L4 : do if (i3 << 24 >> 24 == 30) {
  i1 = (_cff_parse_real(i2, i1, 0, 0) | 0) >> 16;
  i6 = HEAP32[i7 + 20 >> 2] | 0;
 } else switch (i3 << 24 >> 24) {
 case 28:
  {
   if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) {
    i6 = i1;
    i1 = 0;
    break L4;
   }
   i6 = i1;
   i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
   break L4;
  }
 case 29:
  {
   if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) {
    i6 = i1;
    i1 = 0;
    break L4;
   }
   i6 = i1;
   i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 1 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
   break L4;
  }
 default:
  {
   if ((i3 & 255) < 247) {
    i6 = i1;
    i1 = (i3 & 255) + -139 | 0;
    break L4;
   }
   if ((i3 & 255) < 251) {
    if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
     i6 = i1;
     i1 = 0;
     break L4;
    }
    i6 = i1;
    i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
    break L4;
   } else {
    if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
     i6 = i1;
     i1 = 0;
     break L4;
    }
    i6 = i1;
    i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
    break L4;
   }
  }
 } while (0);
 HEAP32[i8 + 132 >> 2] = i1;
 i2 = HEAP32[i7 + 24 >> 2] | 0;
 i3 = HEAP8[i6 >> 0] | 0;
 L22 : do if (i3 << 24 >> 24 == 30) {
  i1 = (_cff_parse_real(i6, i2, 0, 0) | 0) >> 16;
  i5 = HEAP32[i7 + 24 >> 2] | 0;
 } else {
  i4 = i6 + 1 | 0;
  switch (i3 << 24 >> 24) {
  case 28:
   {
    if ((i6 + 3 | 0) >>> 0 > i2 >>> 0) {
     i5 = i2;
     i1 = 0;
     break L22;
    }
    i5 = i2;
    i1 = ((HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i6 + 2 >> 0] | 0)) << 16 >> 16;
    break L22;
   }
  case 29:
   {
    if ((i6 + 5 | 0) >>> 0 > i2 >>> 0) {
     i5 = i2;
     i1 = 0;
     break L22;
    }
    i5 = i2;
    i1 = (HEAPU8[i6 + 2 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i6 + 3 >> 0] | 0) << 8 | (HEAPU8[i6 + 4 >> 0] | 0);
    break L22;
   }
  default:
   {
    if ((i3 & 255) < 247) {
     i5 = i2;
     i1 = (i3 & 255) + -139 | 0;
     break L22;
    }
    i1 = (i6 + 2 | 0) >>> 0 > i2 >>> 0;
    if ((i3 & 255) < 251) {
     if (i1) {
      i5 = i2;
      i1 = 0;
      break L22;
     }
     i5 = i2;
     i1 = (HEAPU8[i4 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
     break L22;
    } else {
     if (i1) {
      i5 = i2;
      i1 = 0;
      break L22;
     }
     i5 = i2;
     i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i4 >> 0] | 0) | 0;
     break L22;
    }
   }
  }
 } while (0);
 HEAP32[i8 + 136 >> 2] = i1;
 i1 = HEAP32[i7 + 28 >> 2] | 0;
 i2 = HEAP8[i5 >> 0] | 0;
 L40 : do if (i2 << 24 >> 24 == 30) i1 = (_cff_parse_real(i5, i1, 0, 0) | 0) >> 16; else {
  i3 = i5 + 1 | 0;
  switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i5 + 3 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     break L40;
    }
    i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i5 + 2 >> 0] | 0)) << 16 >> 16;
    break L40;
   }
  case 29:
   {
    if ((i5 + 5 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     break L40;
    }
    i1 = (HEAPU8[i5 + 2 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i5 + 3 >> 0] | 0) << 8 | (HEAPU8[i5 + 4 >> 0] | 0);
    break L40;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = (i2 & 255) + -139 | 0;
     break L40;
    }
    i1 = (i5 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i2 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L40;
     }
     i1 = (HEAPU8[i3 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
     break L40;
    } else {
     if (i1) {
      i1 = 0;
      break L40;
     }
     i1 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
     break L40;
    }
   }
  }
 } while (0);
 HEAP32[i8 + 140 >> 2] = i1;
 i8 = 0;
 return i8 | 0;
}

function _gray_render_scanline(i19, i14, i16, i15, i18, i17) {
 i19 = i19 | 0;
 i14 = i14 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 if ((i17 | 0) == (i15 | 0)) {
  i3 = i14 - (HEAP32[i19 + 16 >> 2] | 0) | 0;
  i1 = HEAP32[i19 + 12 >> 2] | 0;
  i1 = ((i1 | 0) < (i18 >> 8 | 0) ? i1 : i18 >> 8) - (HEAP32[i19 + 8 >> 2] | 0) | 0;
  i1 = (i1 | 0) > -1 ? i1 : -1;
  if ((i1 | 0) == (HEAP32[i19 >> 2] | 0) ? (i3 | 0) == (HEAP32[i19 + 4 >> 2] | 0) : 0) i2 = i19 + 4 | 0; else {
   if (!(HEAP32[i19 + 40 >> 2] | 0)) _gray_record_cell(i19);
   HEAP32[i19 + 32 >> 2] = 0;
   HEAP32[i19 + 36 >> 2] = 0;
   i2 = i19 + 4 | 0;
  }
  HEAP32[i19 >> 2] = i1;
  HEAP32[i2 >> 2] = i3;
  if (i3 >>> 0 < (HEAP32[i19 + 28 >> 2] | 0) >>> 0) i1 = (i1 | 0) >= (HEAP32[i19 + 24 >> 2] | 0); else i1 = 1;
  HEAP32[i19 + 40 >> 2] = i1 & 1;
  return;
 }
 if ((i16 >> 8 | 0) == (i18 >> 8 | 0)) {
  i18 = Math_imul(i18 - (i18 >> 8 << 8) + (i16 - (i16 >> 8 << 8)) | 0, i17 - i15 | 0) | 0;
  HEAP32[i19 + 32 >> 2] = (HEAP32[i19 + 32 >> 2] | 0) + i18;
  HEAP32[i19 + 36 >> 2] = (HEAP32[i19 + 36 >> 2] | 0) + (i17 - i15);
  return;
 }
 i12 = (i18 - i16 | 0) < 0 ? 0 - (i18 - i16) | 0 : i18 - i16 | 0;
 i8 = Math_imul((i18 - i16 | 0) < 0 ? i16 - (i16 >> 8 << 8) | 0 : 256 - (i16 - (i16 >> 8 << 8)) | 0, i17 - i15 | 0) | 0;
 i13 = (((i8 | 0) % (i12 | 0) | 0) >> 31) + ((i8 | 0) / (i12 | 0) | 0) | 0;
 i7 = ((i8 | 0) % (i12 | 0) | 0 | 0) < 0 ? i12 : 0;
 i6 = Math_imul(i13, ((i18 - i16 >> 31) + 256 & -256) + (i16 - (i16 >> 8 << 8)) | 0) | 0;
 HEAP32[i19 + 32 >> 2] = i6 + (HEAP32[i19 + 32 >> 2] | 0);
 HEAP32[i19 + 36 >> 2] = (HEAP32[i19 + 36 >> 2] | 0) + i13;
 i6 = (i18 - i16 >> 31 | 1) + (i16 >> 8) | 0;
 i2 = i14 - (HEAP32[i19 + 16 >> 2] | 0) | 0;
 i3 = HEAP32[i19 + 12 >> 2] | 0;
 i3 = ((i3 | 0) < (i6 | 0) ? i3 : i6) - (HEAP32[i19 + 8 >> 2] | 0) | 0;
 i3 = (i3 | 0) > -1 ? i3 : -1;
 if ((i3 | 0) == (HEAP32[i19 >> 2] | 0) ? (i2 | 0) == (HEAP32[i19 + 4 >> 2] | 0) : 0) i1 = i19 + 4 | 0; else {
  if (!(HEAP32[i19 + 40 >> 2] | 0)) _gray_record_cell(i19);
  HEAP32[i19 + 32 >> 2] = 0;
  HEAP32[i19 + 36 >> 2] = 0;
  i1 = i19 + 4 | 0;
 }
 HEAP32[i19 >> 2] = i3;
 HEAP32[i1 >> 2] = i2;
 i4 = HEAP32[i19 + 28 >> 2] | 0;
 if (i2 >>> 0 < i4 >>> 0) i1 = (i3 | 0) >= (HEAP32[i19 + 24 >> 2] | 0); else i1 = 1;
 i2 = i1 & 1;
 HEAP32[i19 + 40 >> 2] = i2;
 if ((i6 | 0) == (i18 >> 8 | 0)) i1 = i13 + i15 | 0; else {
  i10 = (i13 + i17 - (i13 + i15) << 8 | 0) % (i12 | 0) | 0;
  i11 = ((i10 | 0) < 0 ? i12 : 0) + i10 | 0;
  i1 = i13 + i15 | 0;
  i9 = i3;
  i5 = i2;
  i2 = i4;
  i4 = ((i8 | 0) % (i12 | 0) | 0) - i12 + i7 | 0;
  do {
   i7 = i11 + i4 | 0;
   i3 = (i10 >> 31) + ((i13 + i17 - (i13 + i15) << 8 | 0) / (i12 | 0) | 0) + (i7 >>> 31 ^ 1) | 0;
   i4 = i7 - ((i7 | 0) > -1 ? i12 : 0) | 0;
   HEAP32[i19 + 32 >> 2] = (HEAP32[i19 + 32 >> 2] | 0) + (i3 << 8);
   HEAP32[i19 + 36 >> 2] = (HEAP32[i19 + 36 >> 2] | 0) + i3;
   i1 = i3 + i1 | 0;
   i6 = i6 + (i18 - i16 >> 31 | 1) | 0;
   i3 = i14 - (HEAP32[i19 + 16 >> 2] | 0) | 0;
   i7 = HEAP32[i19 + 12 >> 2] | 0;
   i7 = ((i7 | 0) < (i6 | 0) ? i7 : i6) - (HEAP32[i19 + 8 >> 2] | 0) | 0;
   i8 = i9;
   i9 = (i7 | 0) > -1 ? i7 : -1;
   if (!((i9 | 0) == (i8 | 0) ? (i3 | 0) == (HEAP32[i19 + 4 >> 2] | 0) : 0)) {
    if (!i5) {
     _gray_record_cell(i19);
     i2 = HEAP32[i19 + 28 >> 2] | 0;
    }
    HEAP32[i19 + 32 >> 2] = 0;
    HEAP32[i19 + 36 >> 2] = 0;
   }
   HEAP32[i19 >> 2] = i9;
   HEAP32[i19 + 4 >> 2] = i3;
   if (i3 >>> 0 < i2 >>> 0) i3 = (i9 | 0) >= (HEAP32[i19 + 24 >> 2] | 0); else i3 = 1;
   i5 = i3 & 1;
   HEAP32[i19 + 40 >> 2] = i5;
  } while ((i6 | 0) != (i18 >> 8 | 0));
 }
 i17 = i17 - i1 | 0;
 i18 = Math_imul(i17, i18 - (i18 >> 8 << 8) + 256 - ((i18 - i16 >> 31) + 256 & -256) | 0) | 0;
 HEAP32[i19 + 32 >> 2] = i18 + (HEAP32[i19 + 32 >> 2] | 0);
 HEAP32[i19 + 36 >> 2] = (HEAP32[i19 + 36 >> 2] | 0) + i17;
 return;
}

function _TT_Load_Context(i6, i5, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i6 + 4 >> 2] = i1;
 if (i1) {
  HEAP32[i6 + 396 >> 2] = HEAP32[i1 + 116 >> 2];
  HEAP32[i6 + 400 >> 2] = HEAP32[i1 + 120 >> 2];
  HEAP32[i6 + 408 >> 2] = HEAP32[i1 + 128 >> 2];
  HEAP32[i6 + 412 >> 2] = HEAP32[i1 + 132 >> 2];
  HEAP32[i6 + 404 >> 2] = HEAP32[i1 + 124 >> 2];
  HEAP32[i6 + 416 >> 2] = HEAP32[i1 + 136 >> 2];
  i2 = i6 + 244 | 0;
  i3 = i1 + 72 | 0;
  i4 = i2 + 40 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  HEAP32[i6 + 216 >> 2] = HEAP32[i1 + 44 >> 2];
  HEAP32[i6 + 216 + 4 >> 2] = HEAP32[i1 + 44 + 4 >> 2];
  HEAP32[i6 + 216 + 8 >> 2] = HEAP32[i1 + 44 + 8 >> 2];
  HEAP32[i6 + 216 + 12 >> 2] = HEAP32[i1 + 44 + 12 >> 2];
  HEAP32[i6 + 216 + 16 >> 2] = HEAP32[i1 + 44 + 16 >> 2];
  HEAP32[i6 + 216 + 20 >> 2] = HEAP32[i1 + 44 + 20 >> 2];
  HEAP32[i6 + 216 + 24 >> 2] = HEAP32[i1 + 44 + 24 >> 2];
  HEAP32[i6 + 420 >> 2] = HEAP32[i1 + 140 >> 2];
  HEAP32[i6 + 424 >> 2] = HEAP32[i1 + 144 >> 2];
  i2 = HEAP32[i1 + 148 + 4 >> 2] | 0;
  HEAP32[i6 + 444 >> 2] = HEAP32[i1 + 148 >> 2];
  HEAP32[i6 + 444 + 4 >> 2] = i2;
  i2 = HEAP32[i1 + 156 + 4 >> 2] | 0;
  HEAP32[i6 + 452 >> 2] = HEAP32[i1 + 156 >> 2];
  HEAP32[i6 + 452 + 4 >> 2] = i2;
  i2 = HEAP32[i1 + 164 + 4 >> 2] | 0;
  HEAP32[i6 + 460 >> 2] = HEAP32[i1 + 164 >> 2];
  HEAP32[i6 + 460 + 4 >> 2] = i2;
  i2 = i6 + 284 | 0;
  i3 = i1 + 172 | 0;
  i4 = i2 + 68 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  HEAP32[i6 + 380 >> 2] = HEAP32[i1 + 240 >> 2];
  HEAP32[i6 + 384 >> 2] = HEAP32[i1 + 244 >> 2];
  HEAP16[i6 + 468 >> 1] = HEAP16[i1 + 248 >> 1] | 0;
  HEAP32[i6 + 472 >> 2] = HEAP32[i1 + 252 >> 2];
  i2 = i6 + 180 | 0;
  i3 = i1 + 256 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  i2 = i6 + 36 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = 0;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  i2 = i6 + 72 | 0;
  i3 = i6 + 36 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
  i2 = i6 + 108 | 0;
  i3 = i6 + 36 | 0;
  i4 = i2 + 36 | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   i2 = i2 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i2 | 0) < (i4 | 0));
 }
 i1 = HEAP32[i6 + 20 >> 2] | 0;
 i3 = HEAP32[i6 + 8 >> 2] | 0;
 i2 = (HEAPU16[i5 + 284 >> 1] | 0) + 32 | 0;
 do if (i1 >>> 0 < i2 >>> 0) {
  HEAP32[i6 + 24 >> 2] = _ft_mem_realloc(i3, 1, i1 << 2, i2 << 2, HEAP32[i6 + 24 >> 2] | 0, i7) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) {
   i1 = i2;
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   break;
  }
  HEAP32[i6 + 20 >> 2] = i1;
  STACKTOP = i7;
  return;
 } while (0);
 HEAP32[i6 + 20 >> 2] = i1;
 i1 = HEAP32[i6 + 388 >> 2] | 0;
 i2 = HEAPU16[i5 + 286 >> 1] | 0;
 if (i1 >>> 0 < i2 >>> 0) {
  HEAP32[i6 + 392 >> 2] = _ft_mem_realloc(i3, 1, i1, i2, HEAP32[i6 + 392 >> 2] | 0, i7) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) i1 = i2; else {
   HEAP32[i6 + 388 >> 2] = i1 & 65535;
   STACKTOP = i7;
   return;
  }
 }
 HEAP32[i6 + 388 >> 2] = i1 & 65535;
 HEAP16[i6 + 152 >> 1] = 0;
 HEAP16[i6 + 154 >> 1] = 0;
 i2 = i6 + 72 | 0;
 i3 = i6 + 144 | 0;
 i4 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 i2 = i6 + 108 | 0;
 i3 = i6 + 144 | 0;
 i4 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 i2 = i6 + 36 | 0;
 i3 = i6 + 144 | 0;
 i4 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP8[i6 + 488 >> 0] = 0;
 STACKTOP = i7;
 return;
}

function _ft_smooth_render_generic(i2, i18, i8, i17, i1) {
 i2 = i2 | 0;
 i18 = i18 | 0;
 i8 = i8 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((HEAP32[i18 + 72 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) {
  HEAP32[i19 + 64 >> 2] = 6;
  i18 = 6;
  STACKTOP = i19;
  return i18 | 0;
 }
 if ((i8 | 0) != (i1 | 0)) {
  i18 = 19;
  STACKTOP = i19;
  return i18 | 0;
 }
 if (i17) _FT_Outline_Translate(i18 + 108 | 0, HEAP32[i17 >> 2] | 0, HEAP32[i17 + 4 >> 2] | 0);
 _FT_Outline_Get_CBox(i18 + 108 | 0, i19);
 i5 = HEAP32[i19 >> 2] & -64;
 HEAP32[i19 >> 2] = i5;
 i10 = HEAP32[i19 + 4 >> 2] & -64;
 HEAP32[i19 + 4 >> 2] = i10;
 i6 = (HEAP32[i19 + 8 >> 2] | 0) + 63 & -64;
 HEAP32[i19 + 8 >> 2] = i6;
 i11 = (HEAP32[i19 + 12 >> 2] | 0) + 63 & -64;
 HEAP32[i19 + 12 >> 2] = i11;
 if ((i5 | 0) < 0 & (i6 | 0) > (i5 + 2147483647 | 0)) {
  i18 = 98;
  STACKTOP = i19;
  return i18 | 0;
 }
 if ((i10 | 0) < 0 & (i11 | 0) > (i10 + 2147483647 | 0)) {
  i18 = 98;
  STACKTOP = i19;
  return i18 | 0;
 }
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if (HEAP32[(HEAP32[i18 + 156 >> 2] | 0) + 4 >> 2] & 1) {
  _ft_mem_free(i1, HEAP32[i18 + 88 >> 2] | 0);
  HEAP32[i18 + 88 >> 2] = 0;
  i16 = (HEAP32[i18 + 156 >> 2] | 0) + 4 | 0;
  HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -2;
 }
 if ((i8 | 0) == 3) {
  i14 = ((i6 - i5 >> 6) * 3 | 0) + 3 & -4;
  i7 = (i6 - i5 >> 6) * 3 | 0;
 } else {
  i14 = i6 - i5 >> 6;
  i7 = i6 - i5 >> 6;
 }
 i9 = (i8 | 0) == 4 ? (i11 - i10 >> 6) * 3 | 0 : i11 - i10 >> 6;
 i15 = HEAP32[i19 >> 2] | 0;
 i12 = HEAP32[i19 + 4 >> 2] | 0;
 i16 = HEAP32[i19 + 12 >> 2] >> 6;
 if ((i9 | 0) > 32767 | (i7 | 0) > 32767) {
  i18 = 98;
  STACKTOP = i19;
  return i18 | 0;
 }
 HEAP8[i18 + 94 >> 0] = 2;
 HEAP16[i18 + 92 >> 1] = 256;
 HEAP32[i18 + 80 >> 2] = i7;
 HEAP32[i18 + 76 >> 2] = i9;
 HEAP32[i18 + 84 >> 2] = i14;
 _FT_Outline_Translate(i18 + 108 | 0, 0 - i15 | 0, 0 - i12 | 0);
 HEAP32[i18 + 88 >> 2] = _ft_mem_alloc(i1, Math_imul(i14, i9) | 0, i19 + 64 | 0) | 0;
 i1 = HEAP32[i19 + 64 >> 2] | 0;
 if (!i1) {
  i4 = (HEAP32[i18 + 156 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  HEAP32[i19 + 16 >> 2] = i18 + 76;
  HEAP32[i19 + 16 + 4 >> 2] = i18 + 108;
  HEAP32[i19 + 16 + 8 >> 2] = 1;
  HEAP32[i19 + 64 >> 2] = FUNCTION_TABLE_iii[HEAP32[i2 + 56 >> 2] & 255](HEAP32[i2 + 52 >> 2] | 0, i19 + 16 | 0) | 0;
  if ((i8 | 0) == 3 ? !((i11 - i10 >> 6 | 0) == 0 | (i6 - i5 >> 6 | 0) == 0) : 0) {
   i2 = i11 - i10 >> 6;
   i3 = HEAP32[i18 + 88 >> 2] | 0;
   while (1) {
    i1 = i3 + i7 | 0;
    i4 = i6 - i5 >> 6;
    do {
     i4 = i4 + -1 | 0;
     i21 = HEAP8[i3 + i4 >> 0] | 0;
     i20 = i1;
     i1 = i1 + -3 | 0;
     HEAP8[i1 >> 0] = i21;
     HEAP8[i20 + -2 >> 0] = i21;
     HEAP8[i20 + -1 >> 0] = i21;
    } while ((i4 | 0) != 0);
    i2 = i2 + -1 | 0;
    if (!i2) break; else i3 = i3 + i14 | 0;
   }
  }
  if ((i8 | 0) == 4 ? (i13 = HEAP32[i18 + 88 >> 2] | 0, (i11 - i10 >> 6 | 0) != 0) : 0) {
   i3 = i14 << 1;
   i4 = i14 * 3 | 0;
   i5 = i11 - i10 >> 6;
   i2 = i13 + (Math_imul(i14, i9 - (i11 - i10 >> 6) | 0) | 0) | 0;
   i1 = i13;
   while (1) {
    _memcpy(i1 | 0, i2 | 0, i14 | 0) | 0;
    _memcpy(i1 + i14 | 0, i2 | 0, i14 | 0) | 0;
    _memcpy(i1 + i3 | 0, i2 | 0, i14 | 0) | 0;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i2 = i2 + i14 | 0;
     i1 = i1 + i4 | 0;
    }
   }
  }
  _FT_Outline_Translate(i18 + 108 | 0, i15, i12);
  i1 = HEAP32[i19 + 64 >> 2] | 0;
  if (!i1) {
   HEAP32[i18 + 72 >> 2] = 1651078259;
   HEAP32[i18 + 100 >> 2] = i15 >> 6;
   HEAP32[i18 + 104 >> 2] = i16;
   i1 = 0;
  }
 }
 if (!i17) {
  i21 = i1;
  STACKTOP = i19;
  return i21 | 0;
 }
 _FT_Outline_Translate(i18 + 108 | 0, 0 - (HEAP32[i17 >> 2] | 0) | 0, 0 - (HEAP32[i17 + 4 >> 2] | 0) | 0);
 i21 = HEAP32[i19 + 64 >> 2] | 0;
 STACKTOP = i19;
 return i21 | 0;
}

function _ps_parser_to_coord_array(i9, i6, i5) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = HEAP32[i9 + 8 >> 2] | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 L1 : do if (i2 >>> 0 < i8 >>> 0) {
  i1 = i2;
  while (1) {
   switch (HEAP8[i1 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i1 = i2;
     break;
    }
   case 37:
    {
     i2 = 37;
     L5 : while (1) {
      switch (i2 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i8 >>> 0) break;
      i2 = HEAP8[i1 >> 0] | 0;
     }
     break;
    }
   default:
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i1;
   if (i1 >>> 0 >= i8 >>> 0) break L1;
  }
 } while (0);
 HEAP32[i9 >> 2] = i2;
 i1 = i2;
 HEAP32[i10 >> 2] = i1;
 L12 : do if (i1 >>> 0 < i8 >>> 0) {
  i7 = HEAP8[i1 >> 0] | 0;
  i7 = i7 << 24 >> 24 == 91 ? 93 : i7 << 24 >> 24 == 123 ? 125 : 0;
  if (i7 << 24 >> 24) {
   HEAP32[i10 >> 2] = i1 + 1;
   i2 = i1 + 1 | 0;
   i1 = i1 + 1 | 0;
  }
  L17 : do if (!i5) {
   i4 = i1;
   i1 = 0;
   while (1) {
    if (i4 >>> 0 >= i8 >>> 0) break L12;
    i3 = i2;
    L21 : do if (i3 >>> 0 < i8 >>> 0) while (1) {
     switch (HEAP8[i3 >> 0] | 0) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break;
     case 37:
      {
       i4 = 37;
       i2 = i3;
       L25 : while (1) {
        switch (i4 << 24 >> 24) {
        case 10:
        case 13:
         break L25;
        default:
         {}
        }
        i2 = i2 + 1 | 0;
        if (i2 >>> 0 >= i8 >>> 0) break;
        i4 = HEAP8[i2 >> 0] | 0;
       }
       break;
      }
     default:
      {
       i3 = i2;
       break L21;
      }
     }
     i3 = i2 + 1 | 0;
     i2 = i3;
     if (i3 >>> 0 >= i8 >>> 0) {
      i3 = i2;
      break L21;
     }
    } else i3 = i2; while (0);
    HEAP32[i10 >> 2] = i3;
    i2 = i3;
    if (i2 >>> 0 >= i8 >>> 0) {
     i2 = i3;
     break L12;
    }
    if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) break L17;
    _PS_Conv_ToFixed(i10, i8, 0) | 0;
    i4 = HEAP32[i10 >> 2] | 0;
    i3 = i4;
    if ((i2 | 0) == (i4 | 0)) {
     i2 = i3;
     i1 = -1;
     break L12;
    }
    i1 = i1 + 1 | 0;
    if (!(i7 << 24 >> 24)) {
     i2 = i3;
     break L12;
    } else i2 = i3;
   }
  } else {
   i4 = i1;
   i1 = 0;
   while (1) {
    if (i4 >>> 0 >= i8 >>> 0) break L12;
    i3 = i2;
    L38 : do if (i3 >>> 0 < i8 >>> 0) while (1) {
     switch (HEAP8[i3 >> 0] | 0) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break;
     case 37:
      {
       i4 = 37;
       i2 = i3;
       L42 : while (1) {
        switch (i4 << 24 >> 24) {
        case 10:
        case 13:
         break L42;
        default:
         {}
        }
        i2 = i2 + 1 | 0;
        if (i2 >>> 0 >= i8 >>> 0) break;
        i4 = HEAP8[i2 >> 0] | 0;
       }
       break;
      }
     default:
      {
       i3 = i2;
       break L38;
      }
     }
     i3 = i2 + 1 | 0;
     i2 = i3;
     if (i3 >>> 0 >= i8 >>> 0) {
      i3 = i2;
      break L38;
     }
    } else i3 = i2; while (0);
    HEAP32[i10 >> 2] = i3;
    i2 = i3;
    if (i2 >>> 0 >= i8 >>> 0) {
     i2 = i3;
     break L12;
    }
    if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) break L17;
    if ((i1 | 0) >= (i6 | 0)) {
     i2 = i3;
     break L12;
    }
    HEAP16[i5 + (i1 << 1) >> 1] = (_PS_Conv_ToFixed(i10, i8, 0) | 0) >>> 16;
    i4 = HEAP32[i10 >> 2] | 0;
    i3 = i4;
    if ((i2 | 0) == (i4 | 0)) {
     i2 = i3;
     i1 = -1;
     break L12;
    }
    i1 = i1 + 1 | 0;
    if (!(i7 << 24 >> 24)) {
     i2 = i3;
     break L12;
    } else i2 = i3;
   }
  } while (0);
  i2 = i2 + 1 | 0;
  HEAP32[i10 >> 2] = i2;
 } else i1 = 0; while (0);
 HEAP32[i9 >> 2] = i2;
 STACKTOP = i10;
 return i1 | 0;
}

function ___udivmoddi4(i3, i5, i11, i12, i13) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0, i15 = 0;
 if (!i5) if (!i12) {
  if (i13) {
   HEAP32[i13 >> 2] = (i3 >>> 0) % (i11 >>> 0);
   HEAP32[i13 + 4 >> 2] = 0;
  }
  i12 = 0;
  i13 = (i3 >>> 0) / (i11 >>> 0) >>> 0;
  return (tempRet0 = i12, i13) | 0;
 } else {
  if (!i13) {
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  HEAP32[i13 >> 2] = i3 | 0;
  HEAP32[i13 + 4 >> 2] = i5 & 0;
  i12 = 0;
  i13 = 0;
  return (tempRet0 = i12, i13) | 0;
 }
 do if (i11) {
  if (i12) {
   i2 = (Math_clz32(i12 | 0) | 0) - (Math_clz32(i5 | 0) | 0) | 0;
   if (i2 >>> 0 <= 31) {
    i10 = i2 + 1 | 0;
    i4 = i3 >>> ((i2 + 1 | 0) >>> 0) & i2 - 31 >> 31 | i5 << 31 - i2;
    i9 = i5 >>> ((i2 + 1 | 0) >>> 0) & i2 - 31 >> 31;
    i1 = 0;
    i2 = i3 << 31 - i2;
    break;
   }
   if (!i13) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i3 | 0;
   HEAP32[i13 + 4 >> 2] = i5 | i5 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  if (i11 - 1 & i11) {
   i2 = (Math_clz32(i11 | 0) | 0) + 33 - (Math_clz32(i5 | 0) | 0) | 0;
   i10 = i2;
   i4 = 32 - i2 - 1 >> 31 & i5 >>> ((i2 - 32 | 0) >>> 0) | (i5 << 32 - i2 | i3 >>> (i2 >>> 0)) & i2 - 32 >> 31;
   i9 = i2 - 32 >> 31 & i5 >>> (i2 >>> 0);
   i1 = i3 << 64 - i2 & 32 - i2 >> 31;
   i2 = (i5 << 64 - i2 | i3 >>> ((i2 - 32 | 0) >>> 0)) & 32 - i2 >> 31 | i3 << 32 - i2 & i2 - 33 >> 31;
   break;
  }
  if (i13) {
   HEAP32[i13 >> 2] = i11 - 1 & i3;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  if ((i11 | 0) == 1) {
   i12 = i5 | i5 & 0;
   i13 = i3 | 0 | 0;
   return (tempRet0 = i12, i13) | 0;
  } else {
   i13 = _llvm_cttz_i32(i11 | 0) | 0;
   i12 = i5 >>> (i13 >>> 0) | 0;
   i13 = i5 << 32 - i13 | i3 >>> (i13 >>> 0) | 0;
   return (tempRet0 = i12, i13) | 0;
  }
 } else {
  if (!i12) {
   if (i13) {
    HEAP32[i13 >> 2] = (i5 >>> 0) % (i11 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i5 >>> 0) / (i11 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  }
  if (!i3) {
   if (i13) {
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = (i5 >>> 0) % (i12 >>> 0);
   }
   i11 = 0;
   i13 = (i5 >>> 0) / (i12 >>> 0) >>> 0;
   return (tempRet0 = i11, i13) | 0;
  }
  if (!(i12 - 1 & i12)) {
   if (i13) {
    HEAP32[i13 >> 2] = i3 | 0;
    HEAP32[i13 + 4 >> 2] = i12 - 1 & i5 | i5 & 0;
   }
   i11 = 0;
   i13 = i5 >>> ((_llvm_cttz_i32(i12 | 0) | 0) >>> 0);
   return (tempRet0 = i11, i13) | 0;
  }
  i2 = (Math_clz32(i12 | 0) | 0) - (Math_clz32(i5 | 0) | 0) | 0;
  if (i2 >>> 0 <= 30) {
   i10 = i2 + 1 | 0;
   i4 = i5 << 31 - i2 | i3 >>> ((i2 + 1 | 0) >>> 0);
   i9 = i5 >>> ((i2 + 1 | 0) >>> 0);
   i1 = 0;
   i2 = i3 << 31 - i2;
   break;
  }
  if (!i13) {
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  HEAP32[i13 >> 2] = i3 | 0;
  HEAP32[i13 + 4 >> 2] = i5 | i5 & 0;
  i12 = 0;
  i13 = 0;
  return (tempRet0 = i12, i13) | 0;
 } while (0);
 if (!i10) {
  i6 = i2;
  i5 = i9;
  i3 = 0;
  i2 = 0;
 } else {
  i7 = _i64Add(i11 | 0 | 0, i12 | i12 & 0 | 0, -1, -1) | 0;
  i8 = tempRet0;
  i6 = i2;
  i5 = i9;
  i3 = i10;
  i2 = 0;
  do {
   i15 = i6;
   i6 = i1 >>> 31 | i6 << 1;
   i1 = i2 | i1 << 1;
   i15 = i4 << 1 | i15 >>> 31 | 0;
   i14 = i4 >>> 31 | i5 << 1 | 0;
   _i64Subtract(i7, i8, i15, i14) | 0;
   i10 = tempRet0;
   i9 = i10 >> 31 | ((i10 | 0) < 0 ? -1 : 0) << 1;
   i2 = i9 & 1;
   i4 = _i64Subtract(i15, i14, i9 & (i11 | 0), (((i10 | 0) < 0 ? -1 : 0) >> 31 | ((i10 | 0) < 0 ? -1 : 0) << 1) & (i12 | i12 & 0)) | 0;
   i5 = tempRet0;
   i3 = i3 - 1 | 0;
  } while ((i3 | 0) != 0);
  i3 = 0;
 }
 if (i13) {
  HEAP32[i13 >> 2] = i4;
  HEAP32[i13 + 4 >> 2] = i5;
 }
 i14 = (i1 | 0) >>> 31 | i6 << 1 | (0 << 1 | i1 >>> 31) & 0 | i3;
 i15 = (i1 << 1 | 0 >>> 31) & -2 | i2;
 return (tempRet0 = i14, i15) | 0;
}

function _FT_Add_Module(i10, i9) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i10) {
  i12 = 33;
  STACKTOP = i13;
  return i12 | 0;
 }
 if (!i9) {
  i12 = 6;
  STACKTOP = i13;
  return i12 | 0;
 }
 if ((HEAP32[i9 + 16 >> 2] | 0) > 131076) {
  i12 = 4;
  STACKTOP = i13;
  return i12 | 0;
 }
 i2 = HEAP32[i10 + 16 >> 2] | 0;
 if (i2) {
  i1 = HEAP32[i9 + 8 >> 2] | 0;
  i5 = 0;
  do {
   i3 = HEAP32[i10 + 20 + (i5 << 2) >> 2] | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   i5 = i5 + 1 | 0;
   if (!(_strcmp(HEAP32[i4 + 8 >> 2] | 0, i1) | 0)) {
    i8 = 9;
    break;
   }
  } while (i5 >>> 0 < i2 >>> 0);
  do if ((i8 | 0) == 9) if ((HEAP32[i9 + 12 >> 2] | 0) > (HEAP32[i4 + 12 >> 2] | 0)) {
   _FT_Remove_Module(i10, i3) | 0;
   i2 = HEAP32[i10 + 16 >> 2] | 0;
   break;
  } else {
   i12 = 5;
   STACKTOP = i13;
   return i12 | 0;
  } while (0);
  i1 = HEAP32[i10 >> 2] | 0;
  HEAP32[i13 >> 2] = 0;
  if (i2 >>> 0 > 31) {
   HEAP32[i13 >> 2] = 48;
   i12 = 48;
   STACKTOP = i13;
   return i12 | 0;
  } else {
   i5 = i1;
   i2 = i10;
  }
 } else {
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i13 >> 2] = 0;
  i2 = i10;
 }
 i7 = _ft_mem_alloc(i5, HEAP32[i9 + 4 >> 2] | 0, i13) | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if (i1) {
  i12 = i1;
  STACKTOP = i13;
  return i12 | 0;
 }
 HEAP32[i7 + 4 >> 2] = i10;
 HEAP32[i7 + 8 >> 2] = i5;
 HEAP32[i7 >> 2] = i9;
 do if (HEAP32[i9 >> 2] & 2) {
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = _ft_mem_alloc(i3, 12, i13 + 4 | 0) | 0;
  i1 = HEAP32[i13 + 4 >> 2] | 0;
  if (i1) {
   HEAP32[i13 >> 2] = i1;
   break;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 + 12 >> 2] = i1;
  i2 = HEAP32[i1 + 36 >> 2] | 0;
  HEAP32[i7 + 16 >> 2] = i2;
  if ((i2 | 0) == 1869968492 ? (i6 = HEAP32[(HEAP32[i1 + 56 >> 2] | 0) + 4 >> 2] | 0, (i6 | 0) != 0) : 0) {
   i6 = FUNCTION_TABLE_iii[i6 & 255](i3, i7 + 52 | 0) | 0;
   HEAP32[i13 + 4 >> 2] = i6;
   if (!i6) {
    HEAP32[i7 + 56 >> 2] = HEAP32[(HEAP32[i1 + 56 >> 2] | 0) + 16 >> 2];
    HEAP32[i7 + 60 >> 2] = HEAP32[i1 + 40 >> 2];
    i8 = 21;
   }
  } else i8 = 21;
  if ((i8 | 0) == 21) {
   HEAP32[i4 + 8 >> 2] = i7;
   _FT_List_Add(i10 + 148 | 0, i4);
   i1 = HEAP32[i10 + 148 >> 2] | 0;
   L39 : do if (!i1) i1 = 0; else while (1) {
    i2 = HEAP32[i1 + 8 >> 2] | 0;
    if ((HEAP32[i2 + 16 >> 2] | 0) == 1869968492) {
     i1 = i2;
     break L39;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     break;
    }
   } while (0);
   HEAP32[i10 + 156 >> 2] = i1;
   if (!(HEAP32[i13 + 4 >> 2] | 0)) {
    HEAP32[i13 >> 2] = 0;
    i8 = 27;
    break;
   }
  }
  _ft_mem_free(i3, i4);
  i6 = HEAP32[i13 + 4 >> 2] | 0;
  HEAP32[i13 >> 2] = i6;
  if (!i6) i8 = 27;
 } else i8 = 27; while (0);
 do if ((i8 | 0) == 27) {
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 & 4) HEAP32[i10 + 160 >> 2] = i7;
  if (((i2 & 1 | 0) != 0 ? (HEAP32[i7 + 12 >> 2] = i1, (i2 & 512 | 0) == 0) : 0) ? (i8 = _FT_GlyphLoader_New(i5, i7 + 24 | 0) | 0, HEAP32[i13 >> 2] = i8, (i8 | 0) != 0) : 0) break;
  i1 = HEAP32[i9 + 24 >> 2] | 0;
  if ((i1 | 0) != 0 ? (i8 = FUNCTION_TABLE_ii[i1 & 63](i7) | 0, HEAP32[i13 >> 2] = i8, (i8 | 0) != 0) : 0) break;
  i12 = HEAP32[i10 + 16 >> 2] | 0;
  HEAP32[i10 + 16 >> 2] = i12 + 1;
  HEAP32[i10 + 20 + (i12 << 2) >> 2] = i7;
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 } while (0);
 i1 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
 if ((i1 & 513 | 0) == 1) {
  _FT_GlyphLoader_Done(HEAP32[i7 + 24 >> 2] | 0);
  i1 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
 }
 if (((i1 & 2 | 0) != 0 ? (i11 = HEAP32[i7 + 12 >> 2] | 0, (HEAP32[i11 + 36 >> 2] | 0) == 1869968492) : 0) ? (i12 = HEAP32[i7 + 52 >> 2] | 0, (i12 | 0) != 0) : 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i11 + 56 >> 2] | 0) + 20 >> 2] & 127](i12);
 _ft_mem_free(i5, i7);
 i12 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i13;
 return i12 | 0;
}

function __ZN8Graphics15ApplyBlendStateEPK10BlendState(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if (!i5) {
  STACKTOP = i8;
  return;
 }
 if ((HEAP32[i6 + 100 >> 2] | 0) == (i5 | 0)) {
  STACKTOP = i8;
  return;
 }
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i6 + 104 >> 2] | 0)) {
  STACKTOP = i8;
  return;
 }
 HEAP32[i6 + 100 >> 2] = i5;
 HEAP32[i6 + 104 >> 2] = i1;
 i1 = (HEAP8[i6 + 108 >> 0] | 0) != 0;
 if (!(HEAP8[i5 + 8 >> 0] | 0)) {
  if (!i1) {
   STACKTOP = i8;
   return;
  }
  _glDisable(3042);
  HEAP8[i6 + 108 >> 0] = 0;
  STACKTOP = i8;
  return;
 }
 if (!i1) {
  _glEnable(3042);
  HEAP8[i6 + 108 >> 0] = 1;
 }
 i2 = HEAP32[i5 + 28 >> 2] | 0;
 if ((HEAP32[i6 + 112 >> 2] | 0) == (i2 | 0)) {
  i1 = HEAP32[i5 + 16 >> 2] | 0;
  if ((HEAP32[i6 + 116 >> 2] | 0) != (i1 | 0)) {
   i4 = i5 + 16 | 0;
   i7 = 10;
  }
 } else {
  i4 = i5 + 16 | 0;
  i1 = HEAP32[i5 + 16 >> 2] | 0;
  i7 = 10;
 }
 if ((i7 | 0) == 10) {
  i3 = (i1 | 0) == (i2 | 0);
  switch (i1 | 0) {
  case 0:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291281, i8);
    i2 = 0;
    break;
   }
  case 1:
   {
    i2 = 32774;
    break;
   }
  case 2:
   {
    i2 = 32778;
    break;
   }
  case 3:
   {
    i2 = 32779;
    break;
   }
  case 4:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291330, i8 + 8 | 0);
    i2 = 0;
    break;
   }
  case 5:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291376, i8 + 16 | 0);
    i2 = 0;
    break;
   }
  default:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291422, i8 + 24 | 0);
    i2 = 0;
   }
  }
  if (i3) _glBlendEquation(i2 | 0); else {
   switch (HEAP32[i5 + 28 >> 2] | 0) {
   case 0:
    {
     __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291281, i8 + 32 | 0);
     i1 = 0;
     break;
    }
   case 1:
    {
     i1 = 32774;
     break;
    }
   case 2:
    {
     i1 = 32778;
     break;
    }
   case 3:
    {
     i1 = 32779;
     break;
    }
   case 4:
    {
     __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291330, i8 + 40 | 0);
     i1 = 0;
     break;
    }
   case 5:
    {
     __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291376, i8 + 48 | 0);
     i1 = 0;
     break;
    }
   default:
    {
     __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291422, i8 + 56 | 0);
     i1 = 0;
    }
   }
   _glBlendEquationSeparate(i2 | 0, i1 | 0);
  }
  HEAP32[i6 + 112 >> 2] = HEAP32[i5 + 28 >> 2];
  HEAP32[i6 + 116 >> 2] = HEAP32[i4 >> 2];
 }
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 if ((((HEAP32[i6 + 128 >> 2] | 0) == (i1 | 0) ? (HEAP32[i6 + 132 >> 2] | 0) == (HEAP32[i5 + 32 >> 2] | 0) : 0) ? (HEAP32[i6 + 120 >> 2] | 0) == (HEAP32[i5 + 12 >> 2] | 0) : 0) ? (HEAP32[i6 + 124 >> 2] | 0) == (HEAP32[i5 + 20 >> 2] | 0) : 0) {
  STACKTOP = i8;
  return;
 }
 i2 = HEAP32[i5 + 12 >> 2] | 0;
 if ((i2 | 0) == (i1 | 0) ? (i4 = HEAP32[i5 + 20 >> 2] | 0, !((i4 & -2 | 0) == 12 | ((i1 & -2 | 0) == 12 ? 1 : (i4 | 0) != (HEAP32[i5 + 32 >> 2] | 0)))) : 0) {
  i1 = __Z19BlendSourceToGLenum11BlendSourceb(i1, 1) | 0;
  _glBlendFunc(i1 | 0, __Z19BlendSourceToGLenum11BlendSourceb(HEAP32[i5 + 20 >> 2] | 0, 1) | 0);
  i1 = i5 + 32 | 0;
 } else {
  i1 = i5 + 32 | 0;
  i7 = 36;
 }
 if ((i7 | 0) == 36) {
  i3 = __Z19BlendSourceToGLenum11BlendSourceb(i2, 1) | 0;
  i4 = __Z19BlendSourceToGLenum11BlendSourceb(HEAP32[i5 + 20 >> 2] | 0, 1) | 0;
  i7 = __Z19BlendSourceToGLenum11BlendSourceb(HEAP32[i5 + 24 >> 2] | 0, 0) | 0;
  _glBlendFuncSeparate(i3 | 0, i4 | 0, i7 | 0, __Z19BlendSourceToGLenum11BlendSourceb(HEAP32[i1 >> 2] | 0, 0) | 0);
 }
 HEAP32[i6 + 120 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i6 + 124 >> 2] = HEAP32[i5 + 20 >> 2];
 HEAP32[i6 + 128 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i6 + 132 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i8;
 return;
}

function _ps_dimension_end(i10, i2, i11) {
 i10 = i10 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = HEAP32[i10 + 12 >> 2] | 0;
 if (i1) HEAP32[(HEAP32[i10 + 20 >> 2] | 0) + (i1 + -1 << 4) + 12 >> 2] = i2;
 i2 = HEAP32[i10 + 24 >> 2] | 0;
 if ((i2 + -1 | 0) <= 0) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i1 = i2;
 i3 = i2;
 i9 = i2 + -1 | 0;
 L7 : while (1) {
  i2 = i3 + -2 | 0;
  L9 : do if ((i2 | 0) > -1) {
   i8 = HEAP32[i10 + 32 >> 2] | 0;
   i6 = HEAP32[i8 + (i9 << 4) + 8 >> 2] | 0;
   i7 = HEAP32[i8 + (i9 << 4) >> 2] | 0;
   L11 : while (1) {
    i4 = HEAP32[i8 + (i2 << 4) + 8 >> 2] | 0;
    i3 = HEAP32[i8 + (i2 << 4) >> 2] | 0;
    i3 = i7 >>> 0 <= i3 >>> 0 ? i7 : i3;
    if (i3 >>> 0 > 7) {
     i5 = i6;
     do {
      if ((HEAP8[i4 >> 0] & HEAP8[i5 >> 0]) << 24 >> 24) break L11;
      i5 = i5 + 1 | 0;
      i4 = i4 + 1 | 0;
      i3 = i3 + -8 | 0;
     } while (i3 >>> 0 > 7);
    } else i5 = i6;
    if ((i3 | 0) != 0 ? (HEAP8[i4 >> 0] & HEAP8[i5 >> 0] & 255 & ~(255 >>> i3) | 0) != 0 : 0) break;
    if ((i2 | 0) > 0) i2 = i2 + -1 | 0; else break L9;
   }
   i5 = (i2 | 0) > (i9 | 0);
   i6 = i5 ? i2 : i9;
   i5 = i5 ? i9 : i2;
   if ((i6 | 0) < (i1 | 0) & ((i5 | 0) < (i6 | 0) & (i5 | 0) > -1)) {
    i3 = HEAP32[i8 + (i5 << 4) >> 2] | 0;
    i4 = HEAP32[i8 + (i6 << 4) >> 2] | 0;
    if (i4) {
     if (i4 >>> 0 > i3 >>> 0) {
      i1 = ((HEAP32[i8 + (i5 << 4) + 4 >> 2] | 0) + 7 | 0) >>> 3;
      HEAP32[i13 + 16 >> 2] = 0;
      if ((i4 + 7 | 0) >>> 3 >>> 0 > i1 >>> 0) {
       HEAP32[i8 + (i5 << 4) + 8 >> 2] = _ft_mem_realloc(i11, 1, i1, ((i4 + 7 | 0) >>> 3) + 7 & 1073741816, HEAP32[i8 + (i5 << 4) + 8 >> 2] | 0, i13 + 16 | 0) | 0;
       i1 = HEAP32[i13 + 16 >> 2] | 0;
       if (i1) break L7;
       HEAP32[i8 + (i5 << 4) + 4 >> 2] = (((i4 + 7 | 0) >>> 3) + 7 & 1073741816) << 3;
       i2 = i8 + (i5 << 4) + 8 | 0;
      } else i2 = i8 + (i5 << 4) + 8 | 0;
      i1 = i3;
      do {
       if ((HEAP32[i8 + (i5 << 4) >> 2] | 0) >>> 0 > i1 >>> 0) {
        i7 = (HEAP32[i2 >> 2] | 0) + (i1 >> 3) | 0;
        HEAP8[i7 >> 0] = (HEAPU8[i7 >> 0] | 0) & (128 >>> (i1 & 7) ^ 255);
       }
       i1 = i1 + 1 | 0;
      } while ((i1 | 0) != (i4 | 0));
      i1 = (i4 + 7 | 0) >>> 3;
     } else i1 = (i4 + 7 | 0) >>> 3;
     if (i1) {
      i3 = HEAP32[i8 + (i6 << 4) + 8 >> 2] | 0;
      i2 = HEAP32[i8 + (i5 << 4) + 8 >> 2] | 0;
      while (1) {
       HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | HEAP8[i2 >> 0];
       i1 = i1 + -1 | 0;
       if (!i1) break; else {
        i3 = i3 + 1 | 0;
        i2 = i2 + 1 | 0;
       }
      }
     }
     i1 = HEAP32[i10 + 24 >> 2] | 0;
    }
    HEAP32[i8 + (i6 << 4) >> 2] = 0;
    HEAP32[i8 + (i6 << 4) + 12 >> 2] = 0;
    i2 = i1 + -1 | 0;
    if ((i2 - i6 | 0) > 0) {
     HEAP32[i13 >> 2] = HEAP32[i8 + (i6 << 4) >> 2];
     HEAP32[i13 + 4 >> 2] = HEAP32[i8 + (i6 << 4) + 4 >> 2];
     HEAP32[i13 + 8 >> 2] = HEAP32[i8 + (i6 << 4) + 8 >> 2];
     HEAP32[i13 + 12 >> 2] = HEAP32[i8 + (i6 << 4) + 12 >> 2];
     _memmove(i8 + (i6 << 4) | 0, i8 + (i6 + 1 << 4) | 0, i2 - i6 << 4 | 0) | 0;
     HEAP32[i8 + (i2 << 4) >> 2] = HEAP32[i13 >> 2];
     HEAP32[i8 + (i2 << 4) + 4 >> 2] = HEAP32[i13 + 4 >> 2];
     HEAP32[i8 + (i2 << 4) + 8 >> 2] = HEAP32[i13 + 8 >> 2];
     HEAP32[i8 + (i2 << 4) + 12 >> 2] = HEAP32[i13 + 12 >> 2];
     i1 = HEAP32[i10 + 24 >> 2] | 0;
    }
    i1 = i1 + -1 | 0;
    HEAP32[i10 + 24 >> 2] = i1;
   }
  } while (0);
  i2 = i9 + -1 | 0;
  if ((i2 | 0) > 0) {
   i3 = i9;
   i9 = i2;
  } else {
   i1 = 0;
   i12 = 35;
   break;
  }
 }
 if ((i12 | 0) == 35) {
  STACKTOP = i13;
  return i1 | 0;
 }
 i12 = i1;
 STACKTOP = i13;
 return i12 | 0;
}

function __ZN5Image5PtrAtEii(i2, i5, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i3 = Math_imul(HEAP32[i2 + 12 >> 2] | 0, i1) | 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 L1 : do if ((i1 | 0) >= 59) {
  L7 : do if ((i1 | 0) < 88) switch (i1 | 0) {
  case 87:
  case 69:
  case 68:
  case 67:
   {
    i6 = 4;
    break L1;
   }
  case 86:
  case 85:
  case 59:
   {
    i6 = 6;
    break L1;
   }
  case 65:
  case 64:
  case 63:
  case 62:
  case 61:
  case 60:
   {
    i6 = 7;
    break L7;
   }
  case 84:
  case 83:
  case 82:
  case 78:
  case 77:
  case 76:
  case 75:
  case 74:
  case 73:
   {
    i6 = 10;
    break L7;
   }
  case 66:
   {
    i1 = 0;
    break L1;
   }
  case 81:
  case 80:
  case 79:
  case 72:
  case 71:
  case 70:
   {
    i1 = 0;
    break L1;
   }
  default:
   {
    i6 = 12;
    break L1;
   }
  } else {
   if ((i1 | 0) >= 1048578) {
    if ((i1 | 0) < 4194324) switch (i1 | 0) {
    case 1048582:
     {
      i6 = 4;
      break L1;
     }
    case 1048583:
    case 1048579:
    case 1048578:
    case 1048580:
     {
      i6 = 6;
      break L1;
     }
    case 1048584:
    case 1048581:
     {
      i6 = 7;
      break L7;
     }
    default:
     {
      i6 = 12;
      break L1;
     }
    }
    switch (i1 | 0) {
    case 4194339:
    case 4194337:
     {
      i6 = 4;
      break L1;
     }
    case 4194334:
    case 4194333:
     {
      i6 = 6;
      break L1;
     }
    case 4194356:
    case 4194354:
    case 4194331:
     {
      i6 = 7;
      break L7;
     }
    case 4194324:
     break;
    default:
     {
      i6 = 12;
      break L1;
     }
    }
    i1 = 3;
    break L1;
   }
   if ((i1 | 0) < 95) switch (i1 | 0) {
   case 93:
   case 92:
   case 91:
   case 90:
   case 89:
   case 88:
    {
     i6 = 4;
     break L1;
    }
   case 94:
    {
     i6 = 10;
     break L7;
    }
   default:
    {
     i6 = 12;
     break L1;
    }
   }
   if ((i1 | 0) < 99) switch (i1 | 0) {
   case 98:
   case 97:
   case 96:
   case 95:
    {
     i6 = 10;
     break L7;
    }
   default:
    {
     i6 = 12;
     break L1;
    }
   }
   if ((i1 | 0) < 1048576) switch (i1 | 0) {
   case 115:
    {
     i6 = 6;
     break L1;
    }
   case 99:
    {
     i6 = 10;
     break L7;
    }
   default:
    {
     i6 = 12;
     break L1;
    }
   }
   switch (i1 | 0) {
   case 1048577:
    {
     i6 = 6;
     break L1;
    }
   case 1048576:
    break;
   default:
    {
     i6 = 12;
     break L1;
    }
   }
   i1 = 0;
   break L1;
  } while (0);
  if ((i6 | 0) == 7) {
   i1 = 1;
   break;
  } else if ((i6 | 0) == 10) {
   i1 = 1;
   break;
  }
 } else switch (i1 | 0) {
 case 4:
 case 3:
 case 2:
 case 1:
  {
   i1 = 16;
   break L1;
  }
 case 47:
 case 46:
 case 45:
 case 44:
 case 43:
 case 42:
 case 41:
 case 40:
 case 39:
 case 38:
 case 37:
 case 36:
 case 35:
 case 34:
 case 33:
 case 32:
 case 31:
 case 30:
 case 29:
 case 28:
 case 27:
 case 26:
 case 25:
 case 24:
 case 23:
  {
   i6 = 4;
   break L1;
  }
 case 58:
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
 case 48:
  {
   i6 = 6;
   break L1;
  }
 case 8:
 case 7:
 case 6:
 case 5:
  {
   i1 = 12;
   break L1;
  }
 case 22:
 case 21:
 case 20:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
 case 12:
 case 11:
 case 10:
 case 9:
  {
   i1 = 8;
   break L1;
  }
 default:
  {
   i6 = 12;
   break L1;
  }
 } while (0);
 if ((i6 | 0) == 4) i1 = 4; else if ((i6 | 0) == 6) i1 = 2; else if ((i6 | 0) == 12) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305634, i7);
  i1 = 0;
 }
 i6 = i4 + ((Math_imul(i1, i5) | 0) + i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _gray_cubic_to(i2, i3, i1, i18) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i18 = i18 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0;
 i14 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[i1 >> 2] << 2;
 HEAP32[i18 + 76 >> 2] = i1;
 HEAP32[i18 + 80 >> 2] = i14 << 2;
 HEAP32[i18 + 84 >> 2] = HEAP32[i3 >> 2] << 2;
 i10 = HEAP32[i3 + 4 >> 2] << 2;
 HEAP32[i18 + 88 >> 2] = i10;
 HEAP32[i18 + 92 >> 2] = HEAP32[i2 >> 2] << 2;
 i11 = HEAP32[i2 + 4 >> 2] << 2;
 HEAP32[i18 + 96 >> 2] = i11;
 HEAP32[i18 + 100 >> 2] = HEAP32[i18 + 64 >> 2];
 i13 = HEAP32[i18 + 68 >> 2] | 0;
 HEAP32[i18 + 104 >> 2] = i13;
 i12 = (i10 | 0) < (i14 << 2 | 0) ? i10 : i14 << 2;
 i14 = (i10 | 0) > (i14 << 2 | 0) ? i10 : i14 << 2;
 i12 = (i11 | 0) < (i12 | 0) ? i11 : i12;
 i14 = (i11 | 0) > (i14 | 0) ? i11 : i14;
 if ((((i13 | 0) < (i12 | 0) ? i13 : i12) >> 8 | 0) < (HEAP32[i18 + 20 >> 2] | 0) ? (((i13 | 0) > (i14 | 0) ? i13 : i14) >> 8 | 0) >= (HEAP32[i18 + 16 >> 2] | 0) : 0) {
  i2 = i1;
  i1 = i18 + 76 | 0;
 } else {
  i2 = i1;
  i1 = i18 + 76 | 0;
  i19 = 15;
 }
 while (1) {
  if ((i19 | 0) == 15) {
   i19 = 0;
   _gray_render_line(i18, i2, HEAP32[i1 + 4 >> 2] | 0);
   if ((i1 | 0) == (i18 + 76 | 0)) break;
   i1 = i1 + -24 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  }
  i10 = i1 + 24 | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i9 = i11 - i2 | 0;
  i12 = i1 + 28 | 0;
  i13 = HEAP32[i12 >> 2] | 0;
  i14 = HEAP32[i1 + 4 >> 2] | 0;
  i3 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
  i4 = (i13 - i14 | 0) < 0 ? 0 - (i13 - i14) | 0 : i13 - i14 | 0;
  if ((i3 | 0) > (i4 | 0)) i3 = (i4 * 97 | 0) + (i3 * 236 | 0) | 0; else i3 = (i4 * 236 | 0) + (i3 * 97 | 0) | 0;
  i7 = i3 >> 8;
  if ((i7 | 0) <= 32767) {
   i6 = i1 + 8 | 0;
   i4 = HEAP32[i6 >> 2] | 0;
   i8 = i4 - i2 | 0;
   i5 = i1 + 12 | 0;
   i3 = HEAP32[i5 >> 2] | 0;
   i20 = (Math_imul(i8, i13 - i14 | 0) | 0) - (Math_imul(i3 - i14 | 0, i9) | 0) | 0;
   if ((((((((i20 | 0) < 0 ? 0 - i20 | 0 : i20) | 0) <= (i7 * 42 | 0) ? (i15 = HEAP32[i1 + 16 >> 2] | 0, i16 = i15 - i2 | 0, i17 = HEAP32[i1 + 20 >> 2] | 0, i20 = (Math_imul(i16, i13 - i14 | 0) | 0) - (Math_imul(i17 - i14 | 0, i9) | 0) | 0, (((i20 | 0) < 0 ? 0 - i20 | 0 : i20) | 0) <= (i7 * 42 | 0)) : 0) ? ((Math_imul(i3 - i14 | 0, i13 - i14 | 0) | 0) + (Math_imul(i8, i9) | 0) | 0) >= 0 : 0) ? ((Math_imul(i17 - i14 | 0, i13 - i14 | 0) | 0) + (Math_imul(i16, i9) | 0) | 0) >= 0 : 0) ? ((Math_imul(i13 - i3 | 0, i13 - i14 | 0) | 0) + (Math_imul(i11 - i4 | 0, i9) | 0) | 0) >= 0 : 0) ? ((Math_imul(i13 - i17 | 0, i13 - i14 | 0) | 0) + (Math_imul(i11 - i15 | 0, i9) | 0) | 0) >= 0 : 0) {
    i19 = 15;
    continue;
   }
  } else {
   i4 = i1 + 8 | 0;
   i3 = i1 + 12 | 0;
   i6 = i4;
   i5 = i3;
   i4 = HEAP32[i4 >> 2] | 0;
   i3 = HEAP32[i3 >> 2] | 0;
  }
  HEAP32[i1 + 48 >> 2] = i11;
  i9 = i1 + 16 | 0;
  i8 = HEAP32[i9 >> 2] | 0;
  i20 = (i4 + i2 | 0) / 2 | 0;
  HEAP32[i6 >> 2] = i20;
  HEAP32[i1 + 40 >> 2] = (i8 + i11 | 0) / 2 | 0;
  i7 = (i8 + i4 | 0) / 2 | 0;
  HEAP32[i9 >> 2] = (i7 + i20 | 0) / 2 | 0;
  HEAP32[i1 + 32 >> 2] = (i7 + ((i8 + i11 | 0) / 2 | 0) | 0) / 2 | 0;
  i20 = (((i7 + ((i8 + i11 | 0) / 2 | 0) | 0) / 2 | 0) + ((i7 + i20 | 0) / 2 | 0) | 0) / 2 | 0;
  HEAP32[i1 + 24 >> 2] = i20;
  HEAP32[i1 + 52 >> 2] = i13;
  i7 = i1 + 20 | 0;
  i8 = HEAP32[i7 >> 2] | 0;
  i14 = (i3 + i14 | 0) / 2 | 0;
  HEAP32[i5 >> 2] = i14;
  HEAP32[i1 + 44 >> 2] = (i8 + i13 | 0) / 2 | 0;
  i11 = (i8 + i3 | 0) / 2 | 0;
  HEAP32[i7 >> 2] = (i11 + i14 | 0) / 2 | 0;
  HEAP32[i1 + 36 >> 2] = (i11 + ((i8 + i13 | 0) / 2 | 0) | 0) / 2 | 0;
  HEAP32[i12 >> 2] = (((i11 + ((i8 + i13 | 0) / 2 | 0) | 0) / 2 | 0) + ((i11 + i14 | 0) / 2 | 0) | 0) / 2 | 0;
  i2 = i20;
  i1 = i10;
 }
 return 0;
}

function _tt_cmap14_validate(i13, i14) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i8 = (HEAPU8[i13 + 3 >> 0] | 0) << 16 | (HEAPU8[i13 + 2 >> 0] | 0) << 24 | (HEAPU8[i13 + 4 >> 0] | 0) << 8 | (HEAPU8[i13 + 5 >> 0] | 0);
 i9 = (HEAPU8[i13 + 7 >> 0] | 0) << 16 | (HEAPU8[i13 + 6 >> 0] | 0) << 24 | (HEAPU8[i13 + 8 >> 0] | 0) << 8 | (HEAPU8[i13 + 9 >> 0] | 0);
 if (i8 >>> 0 > ((HEAP32[i14 + 4 >> 2] | 0) - i13 | 0) >>> 0) _ft_validator_error(i14, 8);
 if (i8 >>> 0 < ((i9 * 11 | 0) + 10 | 0) >>> 0) _ft_validator_error(i14, 8);
 if (!i9) return 0;
 i10 = 1;
 i11 = 0;
 i12 = i13 + 10 | 0;
 L10 : while (1) {
  i1 = (HEAPU8[i12 + 1 >> 0] | 0) << 8 | (HEAPU8[i12 >> 0] | 0) << 16 | (HEAPU8[i12 + 2 >> 0] | 0);
  i2 = (HEAPU8[i12 + 4 >> 0] | 0) << 16 | (HEAPU8[i12 + 3 >> 0] | 0) << 24 | (HEAPU8[i12 + 5 >> 0] | 0) << 8 | (HEAPU8[i12 + 6 >> 0] | 0);
  i7 = (HEAPU8[i12 + 8 >> 0] | 0) << 16 | (HEAPU8[i12 + 7 >> 0] | 0) << 24 | (HEAPU8[i12 + 9 >> 0] | 0) << 8 | (HEAPU8[i12 + 10 >> 0] | 0);
  i12 = i12 + 11 | 0;
  if (!(i2 >>> 0 < i8 >>> 0 & i7 >>> 0 < i8 >>> 0)) {
   i1 = 7;
   break;
  }
  if (i1 >>> 0 < i10 >>> 0) {
   i1 = 9;
   break;
  }
  i10 = i1 + 1 | 0;
  if (i2) {
   i6 = (HEAPU8[i13 + (i2 + 1) >> 0] | 0) << 16 | (HEAPU8[i13 + i2 >> 0] | 0) << 24 | (HEAPU8[i13 + (i2 + 2) >> 0] | 0) << 8 | (HEAPU8[i13 + (i2 + 3) >> 0] | 0);
   if ((i13 + ((i6 << 2) + (i2 + 4)) | 0) >>> 0 > (HEAP32[i14 + 4 >> 2] | 0) >>> 0) {
    i1 = 12;
    break;
   }
   if (i6) {
    i3 = i13 + (i2 + 4) | 0;
    i4 = 0;
    i5 = 0;
    while (1) {
     i1 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) << 16 | (HEAPU8[i3 + 2 >> 0] | 0);
     i2 = i1 + (HEAPU8[i3 + 3 >> 0] | 0) | 0;
     if (i2 >>> 0 > 1114111) {
      i1 = 15;
      break L10;
     }
     if (i1 >>> 0 < i5 >>> 0) {
      i1 = 17;
      break L10;
     }
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (i6 | 0)) break; else {
      i3 = i3 + 4 | 0;
      i5 = i2 + 1 | 0;
     }
    }
   }
  }
  if (i7) {
   i4 = (HEAPU8[i13 + (i7 + 1) >> 0] | 0) << 16 | (HEAPU8[i13 + i7 >> 0] | 0) << 24 | (HEAPU8[i13 + (i7 + 2) >> 0] | 0) << 8 | (HEAPU8[i13 + (i7 + 3) >> 0] | 0);
   if (i4 << 2 >>> 0 > ((HEAP32[i14 + 4 >> 2] | 0) - (i13 + (i7 + 4)) | 0) >>> 0) {
    i1 = 21;
    break;
   }
   if (i4) {
    i5 = 0;
    i6 = 0;
    i2 = i13 + (i7 + 4) | 0;
    do {
     i1 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
     i3 = i2;
     i2 = i2 + 5 | 0;
     if (i1 >>> 0 > 1114111) {
      i1 = 24;
      break L10;
     }
     if (i1 >>> 0 < i6 >>> 0) {
      i1 = 26;
      break L10;
     }
     i6 = i1 + 1 | 0;
     if ((HEAP32[i14 + 8 >> 2] | 0) != 0 ? ((HEAPU8[i3 + 3 >> 0] | 0) << 8 | (HEAPU8[i3 + 4 >> 0] | 0)) >>> 0 >= (HEAP32[i14 + 172 >> 2] | 0) >>> 0 : 0) {
      i1 = 29;
      break L10;
     }
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != (i4 | 0));
   }
  }
  i11 = i11 + 1 | 0;
  if ((i11 | 0) == (i9 | 0)) {
   i1 = 32;
   break;
  }
 }
 switch (i1 | 0) {
 case 7:
  {
   _ft_validator_error(i14, 8);
   break;
  }
 case 9:
  {
   _ft_validator_error(i14, 8);
   break;
  }
 case 12:
  {
   _ft_validator_error(i14, 8);
   break;
  }
 case 15:
  {
   _ft_validator_error(i14, 8);
   break;
  }
 case 17:
  {
   _ft_validator_error(i14, 8);
   break;
  }
 case 21:
  {
   _ft_validator_error(i14, 8);
   break;
  }
 case 24:
  {
   _ft_validator_error(i14, 8);
   break;
  }
 case 26:
  {
   _ft_validator_error(i14, 8);
   break;
  }
 case 29:
  {
   _ft_validator_error(i14, 16);
   break;
  }
 case 32:
  return 0;
 }
 return 0;
}

function __ZN4File4OpenEPKcS1_(i10, i1, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if (!i1) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 322345, i11);
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i7 = (HEAP8[i1 >> 0] | 0) == 64 ? i1 + 1 | 0 : i1;
 if (__ZN4File16OpenAbsolutePathEPKcS1_(i10, i7, i9) | 0) {
  i10 = 1;
  STACKTOP = i11;
  return i10 | 0;
 }
 L8 : do if (i7) {
  switch (HEAP8[i7 >> 0] | 0) {
  case 0:
   break L8;
  case 47:
   {
    i10 = 0;
    STACKTOP = i11;
    return i10 | 0;
   }
  default:
   {}
  }
  i1 = HEAP8[i7 + 1 >> 0] | 0;
  if (i1 << 24 >> 24 != 0 ? (i2 = HEAP8[i7 + 2 >> 0] | 0, i1 << 24 >> 24 == 58 & i2 << 24 >> 24 != 0) : 0) {
   switch (i2 << 24 >> 24) {
   case 47:
   case 92:
    {
     i1 = 0;
     break;
    }
   default:
    break L8;
   }
   STACKTOP = i11;
   return i1 | 0;
  }
 } while (0);
 i1 = HEAP32[157] | 0;
 if ((HEAP32[158] | 0) == (i1 | 0)) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (!i7) {
  i3 = 0;
  while (1) {
   __ZN4File16AddTrailingSlashERK6Stringc(i11 + 8 | 0, i1 + (i3 << 4) | 0, 47);
   HEAP32[i11 + 24 >> 2] = 0;
   HEAP32[i11 + 24 + 4 >> 2] = 0;
   HEAP32[i11 + 24 + 8 >> 2] = 0;
   HEAP32[i11 + 24 + 12 >> 2] = 0;
   i1 = HEAP32[i11 + 8 >> 2] | 0;
   __ZN6String3SetEPKc(i11 + 24 | 0, i1);
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 8 >> 2] = 0;
   i1 = HEAP32[i11 + 24 >> 2] | 0;
   i2 = __ZN4File16OpenAbsolutePathEPKcS1_(i10, i1, i9) | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i11 + 24 >> 2] = 0;
   i3 = i3 + 1 | 0;
   if (i2) {
    i1 = 1;
    i2 = 32;
    break;
   }
   i1 = HEAP32[157] | 0;
   if (i3 >>> 0 >= (HEAP32[158] | 0) - i1 >> 4 >>> 0) {
    i1 = 0;
    i2 = 32;
    break;
   }
  }
  if ((i2 | 0) == 32) {
   STACKTOP = i11;
   return i1 | 0;
  }
 } else {
  i4 = i1;
  i8 = 0;
 }
 while (1) {
  __ZN4File16AddTrailingSlashERK6Stringc(i11 + 8 | 0, i4 + (i8 << 4) | 0, 47);
  HEAP32[i11 + 24 >> 2] = 0;
  HEAP32[i11 + 24 + 4 >> 2] = 0;
  HEAP32[i11 + 24 + 8 >> 2] = 0;
  HEAP32[i11 + 24 + 12 >> 2] = 0;
  i5 = HEAP32[i11 + 8 >> 2] | 0;
  __ZN6String3SetEPKc(i11 + 24 | 0, i5);
  i6 = _strlen(i7) | 0;
  i1 = HEAP8[i7 >> 0] | 0;
  if (!(i1 << 24 >> 24)) i2 = 0; else {
   i2 = 0;
   i3 = i7;
   do {
    i4 = (i1 & 255) >>> 7 & 255;
    i2 = (i4 ^ 1) + i2 + ((i1 & 255) >>> 6 & i4) | 0;
    i3 = i3 + 1 | 0;
    i1 = HEAP8[i3 >> 0] | 0;
   } while (i1 << 24 >> 24 != 0);
  }
  i4 = HEAP32[i11 + 24 + 8 >> 2] | 0;
  if ((HEAP32[i11 + 24 + 12 >> 2] | 0) < (i4 + i6 + 1 | 0)) {
   i1 = __Znaj((i4 + i6 + 1 | 0) > -1 ? i4 + i6 + 1 | 0 : -1) | 0;
   HEAP32[i11 + 24 + 12 >> 2] = i4 + i6 + 1;
   i3 = HEAP32[i11 + 24 >> 2] | 0;
   if (!i3) {
    if ((i4 + i6 | 0) > -1) HEAP8[i1 >> 0] = 0;
   } else {
    _memcpy(i1 | 0, i3 | 0, i4 + 1 | 0) | 0;
    __ZdaPv(i3);
   }
   HEAP32[i11 + 24 >> 2] = i1;
  } else i1 = HEAP32[i11 + 24 >> 2] | 0;
  _memcpy(i1 + i4 | 0, i7 | 0, i6 + 1 | 0) | 0;
  HEAP32[i11 + 24 + 8 >> 2] = i4 + i6;
  HEAP32[i11 + 24 + 4 >> 2] = (HEAP32[i11 + 24 + 4 >> 2] | 0) + i2;
  if (i5) __ZdaPv(i5);
  HEAP32[i11 + 8 >> 2] = 0;
  i1 = HEAP32[i11 + 24 >> 2] | 0;
  i2 = __ZN4File16OpenAbsolutePathEPKcS1_(i10, i1, i9) | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i11 + 24 >> 2] = 0;
  i8 = i8 + 1 | 0;
  if (i2) {
   i1 = 1;
   i2 = 32;
   break;
  }
  i4 = HEAP32[157] | 0;
  if (i8 >>> 0 >= (HEAP32[158] | 0) - i4 >> 4 >>> 0) {
   i1 = 0;
   i2 = 32;
   break;
  }
 }
 if ((i2 | 0) == 32) {
  STACKTOP = i11;
  return i1 | 0;
 }
 return 0;
}

function _cff_ps_get_font_info(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = HEAP32[i2 + 692 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 if (!i4) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i4 + 2960 >> 2] | 0;
 if (!i1) {
  i1 = _ft_mem_alloc(HEAP32[i2 + 100 >> 2] | 0, 32, i6) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  if (i2) {
   i5 = i2;
   STACKTOP = i6;
   return i5 | 0;
  }
  i2 = HEAP32[i4 + 1324 >> 2] | 0;
  do if ((i2 | 0) != 65535) if (i2 >>> 0 > 390) {
   if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 <= (i2 + -391 | 0) >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + (i2 + -391 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i4 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } else i2 = 0; while (0);
  HEAP32[i1 >> 2] = i2;
  i2 = HEAP32[i4 + 1328 >> 2] | 0;
  do if ((i2 | 0) != 65535) if (i2 >>> 0 > 390) {
   if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 <= (i2 + -391 | 0) >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + (i2 + -391 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i4 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } else i2 = 0; while (0);
  HEAP32[i1 + 4 >> 2] = i2;
  i2 = HEAP32[i4 + 1336 >> 2] | 0;
  do if ((i2 | 0) != 65535) if (i2 >>> 0 > 390) {
   if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 <= (i2 + -391 | 0) >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + (i2 + -391 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i4 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } else i2 = 0; while (0);
  HEAP32[i1 + 8 >> 2] = i2;
  i2 = HEAP32[i4 + 1340 >> 2] | 0;
  do if ((i2 | 0) != 65535) if (i2 >>> 0 > 390) {
   if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 <= (i2 + -391 | 0) >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + (i2 + -391 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i4 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } else i2 = 0; while (0);
  HEAP32[i1 + 12 >> 2] = i2;
  i2 = HEAP32[i4 + 1344 >> 2] | 0;
  do if ((i2 | 0) != 65535) if (i2 >>> 0 > 390) {
   if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 <= (i2 + -391 | 0) >>> 0) {
    i2 = 0;
    break;
   }
   i2 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + (i2 + -391 << 2) >> 2] | 0;
   break;
  } else {
   i3 = HEAP32[i4 + 2956 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   i2 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2) | 0;
   break;
  } else i2 = 0; while (0);
  HEAP32[i1 + 16 >> 2] = i2;
  HEAP32[i1 + 20 >> 2] = HEAP32[i4 + 1352 >> 2];
  HEAP8[i1 + 24 >> 0] = HEAP8[i4 + 1348 >> 0] | 0;
  HEAP16[i1 + 26 >> 1] = HEAP32[i4 + 1356 >> 2];
  HEAP16[i1 + 28 >> 1] = HEAP32[i4 + 1360 >> 2];
  HEAP32[i4 + 2960 >> 2] = i1;
  i2 = HEAP32[i6 >> 2] | 0;
 } else i2 = 0;
 HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i5 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i5 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i5 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 i5 = i2;
 STACKTOP = i6;
 return i5 | 0;
}

function _fmod(d11, d1) {
 d11 = +d11;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 HEAPF64[tempDoublePtr >> 3] = d11;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i12 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i9 = HEAP32[tempDoublePtr >> 2] | 0;
 i10 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i7 = _bitshift64Lshr(i2 | 0, i12 | 0, 52) | 0;
 i8 = _bitshift64Lshr(i9 | 0, i10 | 0, 52) | 0;
 i5 = _bitshift64Shl(i9 | 0, i10 | 0, 1) | 0;
 i6 = tempRet0;
 L1 : do if (!((i5 | 0) == 0 & (i6 | 0) == 0) ? !((i10 & 2147483647) >>> 0 > 2146435072 | (i10 & 2147483647 | 0) == 2146435072 & i9 >>> 0 > 0 | (i7 & 2047 | 0) == 2047) : 0) {
  i3 = _bitshift64Shl(i2 | 0, i12 | 0, 1) | 0;
  i4 = tempRet0;
  if (!(i4 >>> 0 > i6 >>> 0 | (i4 | 0) == (i6 | 0) & i3 >>> 0 > i5 >>> 0)) return +((i3 | 0) == (i5 | 0) & (i4 | 0) == (i6 | 0) ? d11 * 0.0 : d11);
  if (!(i7 & 2047)) {
   i3 = _bitshift64Shl(i2 | 0, i12 | 0, 12) | 0;
   i4 = tempRet0;
   if ((i4 | 0) > -1 | (i4 | 0) == -1 & i3 >>> 0 > 4294967295) {
    i5 = i3;
    i3 = 0;
    do {
     i3 = i3 + -1 | 0;
     i5 = _bitshift64Shl(i5 | 0, i4 | 0, 1) | 0;
     i4 = tempRet0;
    } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i5 >>> 0 > 4294967295);
   } else i3 = 0;
   i2 = _bitshift64Shl(i2 | 0, i12 | 0, 1 - i3 | 0) | 0;
   i4 = tempRet0;
  } else {
   i4 = i12 & 1048575 | 1048576;
   i3 = i7 & 2047;
  }
  if (!(i8 & 2047)) {
   i5 = _bitshift64Shl(i9 | 0, i10 | 0, 12) | 0;
   i6 = tempRet0;
   if ((i6 | 0) > -1 | (i6 | 0) == -1 & i5 >>> 0 > 4294967295) {
    i7 = 0;
    do {
     i7 = i7 + -1 | 0;
     i5 = _bitshift64Shl(i5 | 0, i6 | 0, 1) | 0;
     i6 = tempRet0;
    } while ((i6 | 0) > -1 | (i6 | 0) == -1 & i5 >>> 0 > 4294967295);
   } else i7 = 0;
   i9 = _bitshift64Shl(i9 | 0, i10 | 0, 1 - i7 | 0) | 0;
   i10 = tempRet0;
  } else {
   i10 = i10 & 1048575 | 1048576;
   i7 = i8 & 2047;
  }
  i6 = _i64Subtract(i2 | 0, i4 | 0, i9 | 0, i10 | 0) | 0;
  i5 = tempRet0;
  L23 : do if ((i3 | 0) > (i7 | 0)) {
   i8 = (i5 | 0) > -1 | (i5 | 0) == -1 & i6 >>> 0 > 4294967295;
   while (1) {
    if (i8) if ((i2 | 0) == (i9 | 0) & (i4 | 0) == (i10 | 0)) break; else {
     i2 = i6;
     i4 = i5;
    }
    i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
    i4 = tempRet0;
    i3 = i3 + -1 | 0;
    i6 = _i64Subtract(i2 | 0, i4 | 0, i9 | 0, i10 | 0) | 0;
    i5 = tempRet0;
    if ((i3 | 0) > (i7 | 0)) i8 = (i5 | 0) > -1 | (i5 | 0) == -1 & i6 >>> 0 > 4294967295; else {
     i7 = (i5 | 0) > -1 | (i5 | 0) == -1 & i6 >>> 0 > 4294967295;
     break L23;
    }
   }
   d1 = d11 * 0.0;
   break L1;
  } else i7 = (i5 | 0) > -1 | (i5 | 0) == -1 & i6 >>> 0 > 4294967295; while (0);
  if (i7) if ((i2 | 0) == (i9 | 0) & (i4 | 0) == (i10 | 0)) {
   d1 = d11 * 0.0;
   break;
  } else {
   i4 = i5;
   i2 = i6;
  }
  if (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0) do {
   i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
   i4 = tempRet0;
   i3 = i3 + -1 | 0;
  } while (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0);
  if ((i3 | 0) > 0) {
   i9 = _i64Add(i2 | 0, i4 | 0, 0, -1048576) | 0;
   i2 = tempRet0;
   i3 = _bitshift64Shl(i3 | 0, 0, 52) | 0;
   i2 = i2 | tempRet0;
   i3 = i9 | i3;
  } else {
   i3 = _bitshift64Lshr(i2 | 0, i4 | 0, 1 - i3 | 0) | 0;
   i2 = tempRet0;
  }
  HEAP32[tempDoublePtr >> 2] = i3;
  HEAP32[tempDoublePtr + 4 >> 2] = i2 | i12 & -2147483648;
  d1 = +HEAPF64[tempDoublePtr >> 3];
 } else i13 = 3; while (0);
 if ((i13 | 0) == 3) d1 = d11 * d1 / (d11 * d1);
 return +d1;
}

function _FT_Request_Metrics(i11, i8) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = HEAP32[i11 + 88 >> 2] | 0;
 if (!(HEAP32[i11 + 8 >> 2] & 1)) {
  HEAP32[i10 + 12 >> 2] = 0;
  HEAP32[i10 + 12 + 4 >> 2] = 0;
  HEAP32[i10 + 12 + 8 >> 2] = 0;
  HEAP32[i10 + 12 + 12 >> 2] = 0;
  HEAP32[i10 + 12 + 16 >> 2] = 0;
  HEAP32[i10 + 12 + 20 >> 2] = 0;
  HEAP32[i10 + 12 + 24 >> 2] = 0;
  HEAP32[i10 + 16 >> 2] = 65536;
  HEAP32[i10 + 20 >> 2] = 65536;
  return;
 }
 L5 : do switch (HEAP32[i8 >> 2] | 0) {
 case 0:
  {
   i1 = HEAPU16[i11 + 68 >> 1] | 0;
   i2 = i1;
   i9 = 11;
   break;
  }
 case 1:
  {
   i1 = (HEAP16[i11 + 70 >> 1] | 0) - (HEAP16[i11 + 72 >> 1] | 0) | 0;
   i2 = i1;
   i9 = 11;
   break;
  }
 case 2:
  {
   i2 = (HEAP32[i11 + 64 >> 2] | 0) - (HEAP32[i11 + 56 >> 2] | 0) | 0;
   i1 = (HEAP32[i11 + 60 >> 2] | 0) - (HEAP32[i11 + 52 >> 2] | 0) | 0;
   i9 = 11;
   break;
  }
 case 3:
  {
   i2 = (HEAP16[i11 + 70 >> 1] | 0) - (HEAP16[i11 + 72 >> 1] | 0) | 0;
   i1 = HEAP16[i11 + 76 >> 1] | 0;
   i9 = 11;
   break;
  }
 case 4:
  {
   i1 = HEAP32[i8 + 4 >> 2] | 0;
   HEAP32[i10 + 16 >> 2] = i1;
   i2 = HEAP32[i8 + 8 >> 2] | 0;
   HEAP32[i10 + 20 >> 2] = i2;
   if (!i1) {
    HEAP32[i10 + 16 >> 2] = i2;
    i2 = 0;
    i1 = 0;
    i9 = 23;
    break L5;
   }
   if (!i2) {
    HEAP32[i10 + 20 >> 2] = i1;
    i2 = 0;
    i1 = 0;
    i9 = 23;
   } else {
    i2 = 0;
    i1 = 0;
    i9 = 23;
   }
   break;
  }
 default:
  {
   i2 = 0;
   i1 = 0;
   i9 = 11;
  }
 } while (0);
 do if ((i9 | 0) == 11) {
  i6 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i5 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  i4 = HEAP32[i8 + 4 >> 2] | 0;
  if (!i1) i1 = i4; else i1 = ((Math_imul(i4, i1) | 0) + 36 | 0) / 72 | 0;
  i2 = HEAP32[i8 + 16 >> 2] | 0;
  i3 = HEAP32[i8 + 8 >> 2] | 0;
  if (!i2) i7 = i3; else i7 = ((Math_imul(i3, i2) | 0) + 36 | 0) / 72 | 0;
  if (!i4) {
   i2 = _FT_DivFix(i7, i5) | 0;
   HEAP32[i10 + 20 >> 2] = i2;
   HEAP32[i10 + 16 >> 2] = i2;
   i2 = i7;
   i1 = _FT_MulDiv(i7, i6, i5) | 0;
   i9 = 23;
   break;
  }
  i2 = _FT_DivFix(i1, i6) | 0;
  HEAP32[i10 + 16 >> 2] = i2;
  if (!(HEAP32[i8 + 8 >> 2] | 0)) {
   HEAP32[i10 + 20 >> 2] = i2;
   i2 = _FT_MulDiv(i1, i5, i6) | 0;
   i9 = 23;
   break;
  }
  i3 = _FT_DivFix(i7, i5) | 0;
  HEAP32[i10 + 20 >> 2] = i3;
  i2 = HEAP32[i8 >> 2] | 0;
  if ((i2 | 0) == 3) {
   i2 = HEAP32[i10 + 16 >> 2] | 0;
   if ((i3 | 0) > (i2 | 0)) {
    HEAP32[i10 + 20 >> 2] = i2;
    i2 = i7;
    i9 = 23;
    break;
   } else {
    HEAP32[i10 + 16 >> 2] = i3;
    i2 = i7;
    i9 = 23;
    break;
   }
  } else {
   i3 = i2;
   i2 = i7;
  }
 } while (0);
 if ((i9 | 0) == 23) i3 = HEAP32[i8 >> 2] | 0;
 if (!i3) {
  i3 = i10 + 16 | 0;
  i4 = i10 + 20 | 0;
 } else {
  i1 = _FT_MulFix(HEAPU16[i11 + 68 >> 1] | 0, HEAP32[i10 + 16 >> 2] | 0) | 0;
  i3 = i10 + 16 | 0;
  i4 = i10 + 20 | 0;
  i2 = _FT_MulFix(HEAPU16[i11 + 68 >> 1] | 0, HEAP32[i10 + 20 >> 2] | 0) | 0;
 }
 HEAP16[i10 + 12 >> 1] = (i1 + 32 | 0) >>> 6;
 HEAP16[i10 + 14 >> 1] = (i2 + 32 | 0) >>> 6;
 HEAP32[i10 + 24 >> 2] = (_FT_MulFix(HEAP16[i11 + 70 >> 1] | 0, HEAP32[i4 >> 2] | 0) | 0) + 63 & -64;
 HEAP32[i10 + 28 >> 2] = (_FT_MulFix(HEAP16[i11 + 72 >> 1] | 0, HEAP32[i4 >> 2] | 0) | 0) & -64;
 HEAP32[i10 + 32 >> 2] = (_FT_MulFix(HEAP16[i11 + 74 >> 1] | 0, HEAP32[i4 >> 2] | 0) | 0) + 32 & -64;
 HEAP32[i10 + 36 >> 2] = (_FT_MulFix(HEAP16[i11 + 76 >> 1] | 0, HEAP32[i3 >> 2] | 0) | 0) + 32 & -64;
 return;
}

function _FT_Raccess_Get_HeaderInfo(i1, i4, i7, i6, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = _FT_Stream_Seek(i4, i7) | 0;
 HEAP32[i5 >> 2] = i1;
 if (i1) {
  i7 = i1;
  STACKTOP = i5;
  return i7 | 0;
 }
 i1 = _FT_Stream_Read(i4, i5 + 24 | 0, 16) | 0;
 HEAP32[i5 >> 2] = i1;
 if (i1) {
  i7 = i1;
  STACKTOP = i5;
  return i7 | 0;
 }
 i1 = (HEAPU8[i5 + 24 + 1 >> 0] << 16 | HEAPU8[i5 + 24 >> 0] << 24 | HEAPU8[i5 + 24 + 2 >> 0] << 8 | HEAPU8[i5 + 24 + 3 >> 0]) + i7 | 0;
 HEAP32[i2 >> 2] = i1;
 i3 = HEAPU8[i5 + 24 + 5 >> 0] << 16 | HEAPU8[i5 + 24 + 4 >> 0] << 24 | HEAPU8[i5 + 24 + 6 >> 0] << 8 | HEAPU8[i5 + 24 + 7 >> 0];
 if ((i3 | 0) == 0 ? 1 : ((HEAPU8[i5 + 24 + 9 >> 0] << 16 | HEAPU8[i5 + 24 + 8 >> 0] << 24 | HEAPU8[i5 + 24 + 10 >> 0] << 8 | HEAPU8[i5 + 24 + 11 >> 0]) + i1 | 0) != (i3 + i7 | 0)) {
  i7 = 2;
  STACKTOP = i5;
  return i7 | 0;
 }
 i1 = _FT_Stream_Seek(i4, i3 + i7 | 0) | 0;
 HEAP32[i5 >> 2] = i1;
 if (i1) {
  i7 = i1;
  STACKTOP = i5;
  return i7 | 0;
 }
 HEAP8[i5 + 8 + 15 >> 0] = (HEAPU8[i5 + 24 + 15 >> 0] | 0) + 1;
 i1 = _FT_Stream_Read(i4, i5 + 8 | 0, 16) | 0;
 HEAP32[i5 >> 2] = i1;
 if (i1) {
  i7 = i1;
  STACKTOP = i5;
  return i7 | 0;
 }
 i2 = HEAP8[i5 + 8 >> 0] | 0;
 i1 = HEAP8[i5 + 8 + 1 >> 0] | 0;
 i8 = HEAP8[i5 + 8 + 2 >> 0] | 0;
 i9 = HEAP8[i5 + 8 + 3 >> 0] | 0;
 i10 = HEAP8[i5 + 8 + 4 >> 0] | 0;
 i11 = HEAP8[i5 + 8 + 5 >> 0] | 0;
 i12 = HEAP8[i5 + 8 + 6 >> 0] | 0;
 i13 = HEAP8[i5 + 8 + 7 >> 0] | 0;
 i14 = HEAP8[i5 + 8 + 8 >> 0] | 0;
 i15 = HEAP8[i5 + 8 + 9 >> 0] | 0;
 i16 = HEAP8[i5 + 8 + 10 >> 0] | 0;
 i17 = HEAP8[i5 + 8 + 11 >> 0] | 0;
 i18 = HEAP8[i5 + 8 + 12 >> 0] | 0;
 i19 = HEAP8[i5 + 8 + 13 >> 0] | 0;
 i20 = HEAP8[i5 + 8 + 14 >> 0] | 0;
 i21 = HEAP8[i5 + 8 + 15 >> 0] | 0;
 if (!((i21 << 24 >> 24 == (HEAP8[i5 + 24 + 15 >> 0] | 0) & (i20 << 24 >> 24 == (HEAP8[i5 + 24 + 14 >> 0] | 0) & (i19 << 24 >> 24 == (HEAP8[i5 + 24 + 13 >> 0] | 0) & (i18 << 24 >> 24 == (HEAP8[i5 + 24 + 12 >> 0] | 0) & (i17 << 24 >> 24 == (HEAP8[i5 + 24 + 11 >> 0] | 0) & (i16 << 24 >> 24 == (HEAP8[i5 + 24 + 10 >> 0] | 0) & (i15 << 24 >> 24 == (HEAP8[i5 + 24 + 9 >> 0] | 0) & (i14 << 24 >> 24 == (HEAP8[i5 + 24 + 8 >> 0] | 0) & (i13 << 24 >> 24 == (HEAP8[i5 + 24 + 7 >> 0] | 0) & (i12 << 24 >> 24 == (HEAP8[i5 + 24 + 6 >> 0] | 0) & (i11 << 24 >> 24 == (HEAP8[i5 + 24 + 5 >> 0] | 0) & (i10 << 24 >> 24 == (HEAP8[i5 + 24 + 4 >> 0] | 0) & (i9 << 24 >> 24 == (HEAP8[i5 + 24 + 3 >> 0] | 0) & (i8 << 24 >> 24 == (HEAP8[i5 + 24 + 2 >> 0] | 0) ? i1 << 24 >> 24 == (HEAP8[i5 + 24 + 1 >> 0] | 0) : 0))))))))))))) ? i2 << 24 >> 24 == (HEAP8[i5 + 24 >> 0] | 0) & 1 : 0) | ((i21 | (i20 | (i19 | (i18 | (i17 | (i16 | (i15 | (i14 | (i13 | (i12 | (i11 | (i10 | (i9 | (i8 | i1)))))))))))))) << 24 >> 24 == 0 ? i2 << 24 >> 24 == 0 & 1 : 0))) {
  i21 = 2;
  STACKTOP = i5;
  return i21 | 0;
 }
 HEAP32[i5 >> 2] = _FT_Stream_Skip(i4, 8) | 0;
 i2 = _FT_Stream_ReadUShort(i4, i5) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1) {
  i21 = i1;
  STACKTOP = i5;
  return i21 | 0;
 }
 i1 = _FT_Stream_Seek(i4, (i2 & 65535) + (i3 + i7) | 0) | 0;
 HEAP32[i5 >> 2] = i1;
 if (i1) {
  i21 = i1;
  STACKTOP = i5;
  return i21 | 0;
 }
 HEAP32[i6 >> 2] = (i2 & 65535) + (i3 + i7);
 i21 = 0;
 STACKTOP = i5;
 return i21 | 0;
}

function _sfnt_init_face(i7, i9, i6, i1, i2) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i9 + 532 >> 2] | 0;
 do if (!i1) {
  i1 = _FT_Get_Module_Interface(HEAP32[(HEAP32[i9 + 96 >> 2] | 0) + 4 >> 2] | 0, 325800) | 0;
  if (!i1) {
   i7 = 11;
   STACKTOP = i8;
   return i7 | 0;
  } else {
   HEAP32[i9 + 532 >> 2] = i1;
   HEAP32[i9 + 508 >> 2] = HEAP32[i1 >> 2];
   i5 = i1;
   break;
  }
 } else i5 = i1; while (0);
 HEAP32[i9 + 536 >> 2] = _ft_module_get_service(HEAP32[i9 + 96 >> 2] | 0, 327387) | 0;
 i3 = HEAP32[i7 + 28 >> 2] | 0;
 HEAP32[i9 + 132 >> 2] = 0;
 HEAP32[i9 + 136 >> 2] = 0;
 HEAP32[i9 + 140 >> 2] = 0;
 i4 = _FT_Stream_Pos(i7) | 0;
 i2 = _FT_Stream_ReadULong(i7, i8) | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 L7 : do if (!i1) {
  L9 : do if ((i2 | 0) < 1953658213) {
   if ((i2 | 0) < 131072) switch (i2 | 0) {
   case 65536:
    break L9;
   default:
    {
     i1 = 2;
     break L7;
    }
   }
   if ((i2 | 0) < 1330926671) switch (i2 | 0) {
   case 131072:
    break L9;
   default:
    {
     i1 = 2;
     break L7;
    }
   } else switch (i2 | 0) {
   case 1330926671:
    break L9;
   default:
    {
     i1 = 2;
     break L7;
    }
   }
  } else {
   if ((i2 | 0) < 1953784678) switch (i2 | 0) {
   case 1953658213:
    break L9;
   default:
    {
     i1 = 2;
     break L7;
    }
   }
   if ((i2 | 0) < 1954115633) switch (i2 | 0) {
   case 1953784678:
    break L9;
   default:
    {
     i1 = 2;
     break L7;
    }
   } else switch (i2 | 0) {
   case 1954115633:
    break L9;
   default:
    {
     i1 = 2;
     break L7;
    }
   }
  } while (0);
  HEAP32[i9 + 132 >> 2] = 1953784678;
  if ((i2 | 0) == 1953784678) {
   i1 = _FT_Stream_ReadFields(i7, 286208, i9 + 132 | 0) | 0;
   HEAP32[i8 >> 2] = i1;
   if (i1) break;
   i1 = HEAP32[i9 + 140 >> 2] | 0;
   if (!i1) {
    i1 = 8;
    break;
   }
   if (i1 >>> 0 > (HEAP32[i7 + 4 >> 2] | 0) >>> 5 >>> 0) {
    i1 = 10;
    break;
   }
   HEAP32[i9 + 144 >> 2] = _ft_mem_realloc(i3, 4, 0, i1, 0, i8) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   if (i1) break;
   i1 = _FT_Stream_EnterFrame(i7, HEAP32[i9 + 140 >> 2] << 2) | 0;
   HEAP32[i8 >> 2] = i1;
   if (i1) break;
   if ((HEAP32[i9 + 140 >> 2] | 0) > 0) {
    i1 = 0;
    do {
     i4 = _FT_Stream_GetULong(i7) | 0;
     HEAP32[(HEAP32[i9 + 144 >> 2] | 0) + (i1 << 2) >> 2] = i4;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i9 + 140 >> 2] | 0));
   }
   _FT_Stream_ExitFrame(i7);
   i1 = HEAP32[i8 >> 2] | 0;
   if (i1) {
    i7 = i1;
    STACKTOP = i8;
    return i7 | 0;
   }
  } else {
   HEAP32[i9 + 136 >> 2] = 65536;
   HEAP32[i9 + 140 >> 2] = 1;
   i2 = _ft_mem_alloc(i3, 4, i8) | 0;
   HEAP32[i9 + 144 >> 2] = i2;
   i1 = HEAP32[i8 >> 2] | 0;
   if (i1) break;
   HEAP32[i2 >> 2] = i4;
  }
  i2 = (i6 | 0) < 0 ? 0 : i6;
  if ((i2 | 0) >= (HEAP32[i9 + 140 >> 2] | 0)) {
   i7 = 6;
   STACKTOP = i8;
   return i7 | 0;
  }
  i1 = _FT_Stream_Seek(i7, HEAP32[(HEAP32[i9 + 144 >> 2] | 0) + (i2 << 2) >> 2] | 0) | 0;
  if (i1) {
   i7 = i1;
   STACKTOP = i8;
   return i7 | 0;
  }
  i1 = FUNCTION_TABLE_iii[HEAP32[i5 + 132 >> 2] & 255](i9, i7) | 0;
  if (i1) {
   i7 = i1;
   STACKTOP = i8;
   return i7 | 0;
  }
  HEAP32[i9 >> 2] = HEAP32[i9 + 140 >> 2];
  HEAP32[i9 + 4 >> 2] = i2;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function _ps_unicode_value(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i2 = HEAP8[i5 >> 0] | 0;
 L1 : do if (i2 << 24 >> 24 == 117) {
  i4 = HEAP8[i5 + 1 >> 0] | 0;
  L3 : do if (i4 << 24 >> 24 == 110 ? (HEAP8[i5 + 2 >> 0] | 0) == 105 : 0) {
   i1 = HEAPU8[i5 + 3 >> 0] | 0;
   if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) break; else i3 = i1 + -55 | 0; else i3 = i1 + -48 | 0;
   i1 = HEAPU8[i5 + 4 >> 0] | 0;
   if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) break; else i1 = i1 + -55 | 0; else i1 = i1 + -48 | 0;
   i3 = i1 + (i3 << 4) | 0;
   i1 = HEAPU8[i5 + 5 >> 0] | 0;
   if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) break; else i1 = i1 + -55 | 0; else i1 = i1 + -48 | 0;
   i3 = i1 + (i3 << 4) | 0;
   i1 = HEAPU8[i5 + 6 >> 0] | 0;
   if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) break; else i1 = i1 + -55 | 0; else i1 = i1 + -48 | 0;
   i1 = i1 + (i3 << 4) | 0;
   switch (HEAP8[i5 + 7 >> 0] | 0) {
   case 46:
    break;
   case 0:
    {
     i6 = i1;
     return i6 | 0;
    }
   default:
    break L3;
   }
   i6 = i1 | -2147483648;
   return i6 | 0;
  } while (0);
  if (((i4 & 255) + -48 | 0) >>> 0 > 9) if (((i4 & 255) + -65 | 0) >>> 0 > 5 | ((i4 & 255) + -55 | 0) >>> 0 > 15) {
   i1 = i5;
   break;
  } else i3 = (i4 & 255) + -55 | 0; else i3 = (i4 & 255) + -48 | 0;
  i1 = HEAPU8[i5 + 2 >> 0] | 0;
  if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) {
   i1 = i5;
   break;
  } else i1 = i1 + -55 | 0; else i1 = i1 + -48 | 0;
  i3 = i1 + (i3 << 4) | 0;
  i1 = HEAPU8[i5 + 3 >> 0] | 0;
  if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) {
   i1 = i5;
   break;
  } else i1 = i1 + -55 | 0; else i1 = i1 + -48 | 0;
  i3 = i1 + (i3 << 4) | 0;
  i1 = HEAPU8[i5 + 4 >> 0] | 0;
  if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) {
   i1 = i5;
   break;
  } else i1 = i1 + -55 | 0; else i1 = i1 + -48 | 0;
  i3 = i1 + (i3 << 4) | 0;
  i1 = HEAPU8[i5 + 5 >> 0] | 0;
  if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) {
   i4 = i5 + 5 | 0;
   i1 = i3;
  } else {
   i1 = i1 + -55 | 0;
   i6 = 28;
  } else {
   i1 = i1 + -48 | 0;
   i6 = 28;
  }
  do if ((i6 | 0) == 28) {
   i3 = i1 + (i3 << 4) | 0;
   i1 = HEAPU8[i5 + 6 >> 0] | 0;
   if ((i1 + -48 | 0) >>> 0 > 9) if ((i1 + -65 | 0) >>> 0 > 5 | (i1 + -55 | 0) >>> 0 > 15) {
    i4 = i5 + 6 | 0;
    i1 = i3;
    break;
   } else i1 = i1 + -55 | 0; else i1 = i1 + -48 | 0;
   i4 = i5 + 7 | 0;
   i1 = i1 + (i3 << 4) | 0;
  } while (0);
  switch (HEAP8[i4 >> 0] | 0) {
  case 46:
   break;
  case 0:
   {
    i6 = i1;
    return i6 | 0;
   }
  default:
   {
    i1 = i5;
    break L1;
   }
  }
  i6 = i1 | -2147483648;
  return i6 | 0;
 } else i1 = i5; while (0);
 L47 : while (1) {
  switch (i2 << 24 >> 24) {
  case 0:
   break L47;
  case 46:
   {
    if (i1 >>> 0 > i5 >>> 0) {
     i6 = 17;
     break L47;
    }
    break;
   }
  default:
   {}
  }
  i4 = i1 + 1 | 0;
  i2 = HEAP8[i4 >> 0] | 0;
  i1 = i4;
 }
 if ((i6 | 0) == 17) if (!i1) i1 = 0; else {
  i6 = _ft_get_adobe_glyph_index(i5, i1) | 0 | -2147483648;
  return i6 | 0;
 }
 i6 = _ft_get_adobe_glyph_index(i5, i1) | 0;
 return i6 | 0;
}

function _tt_face_load_hmtx(i14, i13, i15) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i13 + 28 >> 2] | 0;
 i1 = HEAP32[i14 + 508 >> 2] | 0;
 do if (i15 << 24 >> 24) {
  i11 = FUNCTION_TABLE_iiiii[i1 & 63](i14, 1986884728, i13, i16) | 0;
  HEAP32[i16 + 4 >> 2] = i11;
  if (!i11) {
   i11 = HEAPU16[i14 + 334 >> 1] | 0;
   i6 = HEAP32[i16 >> 2] | 0;
   HEAP16[i14 + 334 >> 1] = 0;
   i8 = i6;
   i3 = i14 + 336 | 0;
   i11 = i11 >>> 0 > i6 >>> 2 >>> 0 ? i6 >>> 2 : i11;
   i6 = i14 + 340 | 0;
   break;
  } else {
   i15 = HEAP32[i16 + 4 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 } else {
  i11 = FUNCTION_TABLE_iiiii[i1 & 63](i14, 1752003704, i13, i16) | 0;
  HEAP32[i16 + 4 >> 2] = i11;
  if (!i11) {
   i11 = HEAPU16[i14 + 250 >> 1] | 0;
   i6 = HEAP32[i16 >> 2] | 0;
   HEAP16[i14 + 250 >> 1] = 0;
   i8 = i6;
   i3 = i14 + 252 | 0;
   i11 = i11 >>> 0 > i6 >>> 2 >>> 0 ? i6 >>> 2 : i11;
   i6 = i14 + 256 | 0;
   break;
  } else {
   i15 = HEAP32[i16 + 4 >> 2] | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 } while (0);
 i7 = (HEAPU16[i14 + 264 >> 1] | 0) - i11 | 0;
 i9 = (i8 - (i11 << 2) | 0) >>> 1;
 i10 = (i7 | 0) < 0 ? 0 : i7;
 HEAP32[i3 >> 2] = _ft_mem_realloc(i2, 4, 0, i11, 0, i16 + 4 | 0) | 0;
 if (HEAP32[i16 + 4 >> 2] | 0) {
  i15 = HEAP32[i16 + 4 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[i6 >> 2] = _ft_mem_realloc(i2, 2, 0, i10, 0, i16 + 4 | 0) | 0;
 if (HEAP32[i16 + 4 >> 2] | 0) {
  i15 = HEAP32[i16 + 4 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i5 = _FT_Stream_EnterFrame(i13, HEAP32[i16 >> 2] | 0) | 0;
 HEAP32[i16 + 4 >> 2] = i5;
 if (i5) {
  i15 = HEAP32[i16 + 4 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = HEAP32[i13 + 32 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i4 = i2 + (i11 << 2) | 0;
 if ((i11 | 0) > 0) {
  i5 = (i4 >>> 0 > (i2 + 4 | 0) >>> 0 ? i4 : i2 + 4 | 0) + ~i2 + 4 & -4;
  i3 = i1;
  while (1) {
   HEAP16[i2 >> 1] = HEAPU8[i3 >> 0] << 8 | HEAPU8[i3 + 1 >> 0];
   HEAP16[i2 + 2 >> 1] = HEAP8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 3 >> 0];
   i2 = i2 + 4 | 0;
   if (i2 >>> 0 >= i4 >>> 0) break; else i3 = i3 + 4 | 0;
  }
  i1 = i1 + i5 | 0;
 }
 i5 = HEAP32[i6 >> 2] | 0;
 i4 = (i10 | 0) < (i9 | 0) ? i10 : i9;
 if ((i4 | 0) > 0) {
  i3 = (i7 | 0) > 0 ? ~i7 : -1;
  i2 = ~((i8 - (i11 << 2) | 0) >>> 1);
  i2 = i5 + (~((i3 | 0) > (i2 | 0) ? i3 : i2) << 1) | 0;
  i2 = (((i2 >>> 0 > (i5 + 2 | 0) >>> 0 ? i2 : i5 + 2 | 0) + ~i5 | 0) >>> 1) + 1 | 0;
  i3 = i5;
  while (1) {
   HEAP16[i3 >> 1] = HEAP8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
   i3 = i3 + 2 | 0;
   if (i3 >>> 0 >= (i5 + (i4 << 1) | 0) >>> 0) break; else i1 = i1 + 2 | 0;
  }
  i1 = i5 + (i2 << 1) | 0;
 } else i1 = i5;
 if ((i9 | 0) != 0 & (i10 | 0) > (i9 | 0) ? (i12 = HEAP16[i5 + (i9 + -1 << 1) >> 1] | 0, i1 >>> 0 < (i5 + (i10 << 1) | 0) >>> 0) : 0) do {
  HEAP16[i1 >> 1] = i12;
  i1 = i1 + 2 | 0;
 } while (i1 >>> 0 < (i5 + (i10 << 1) | 0) >>> 0);
 _FT_Stream_ExitFrame(i13);
 i1 = i11 & 65535;
 if (i15 << 24 >> 24) {
  HEAP16[i14 + 334 >> 1] = i1;
  i15 = HEAP32[i16 + 4 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } else {
  HEAP16[i14 + 250 >> 1] = i1;
  i15 = HEAP32[i16 + 4 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 return 0;
}

function _PCF_Glyph_Load(i8, i2, i3, i1) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i7 = HEAP32[i2 >> 2] | 0;
 if (!i7) {
  i8 = 6;
  return i8 | 0;
 }
 if ((HEAP32[i7 + 16 >> 2] | 0) >>> 0 <= i3 >>> 0) {
  i8 = 6;
  return i8 | 0;
 }
 i4 = HEAP32[i7 + 104 >> 2] | 0;
 i6 = (i3 | 0) == 0 ? 0 : i3 + -1 | 0;
 i5 = HEAP32[i7 + 292 >> 2] | 0;
 i2 = (HEAP16[i5 + (i6 << 4) + 8 >> 1] | 0) + (HEAP16[i5 + (i6 << 4) + 6 >> 1] | 0) | 0;
 HEAP32[i8 + 76 >> 2] = i2;
 i1 = (HEAP16[i5 + (i6 << 4) + 2 >> 1] | 0) - (HEAP16[i5 + (i6 << 4) >> 1] | 0) | 0;
 HEAP32[i8 + 80 >> 2] = i1;
 HEAP16[i8 + 92 >> 1] = 1;
 HEAP8[i8 + 94 >> 0] = 1;
 switch (1 << (HEAP32[i7 + 308 >> 2] & 3) | 0) {
 case 1:
  {
   HEAP32[i8 + 84 >> 2] = i1 + 7 >> 3;
   i1 = i1 + 7 >> 3;
   break;
  }
 case 2:
  {
   HEAP32[i8 + 84 >> 2] = i1 + 15 >> 4 << 1;
   i1 = i1 + 15 >> 4 << 1;
   break;
  }
 case 4:
  {
   HEAP32[i8 + 84 >> 2] = i1 + 31 >> 5 << 2;
   i1 = i1 + 31 >> 5 << 2;
   break;
  }
 case 8:
  {
   HEAP32[i8 + 84 >> 2] = i1 + 63 >> 6 << 3;
   i1 = i1 + 63 >> 6 << 3;
   break;
  }
 default:
  {
   i8 = 3;
   return i8 | 0;
  }
 }
 i1 = Math_imul(i2, i1) | 0;
 i2 = _ft_glyphslot_alloc_bitmap(i8, i1) | 0;
 if (i2) {
  i8 = i2;
  return i8 | 0;
 }
 i2 = _FT_Stream_Seek(i4, HEAP32[i5 + (i6 << 4) + 12 >> 2] | 0) | 0;
 if (i2) {
  i8 = i2;
  return i8 | 0;
 }
 i2 = _FT_Stream_Read(i4, HEAP32[i8 + 88 >> 2] | 0, i1) | 0;
 if (i2) {
  i8 = i2;
  return i8 | 0;
 }
 i2 = HEAP32[i7 + 308 >> 2] | 0;
 if (!((i2 & 8 | 0) != 0 | (i1 | 0) == 0)) {
  i2 = i1;
  i3 = HEAP32[i8 + 88 >> 2] | 0;
  while (1) {
   i4 = HEAPU8[i3 >> 0] | 0;
   i4 = (i4 >>> 1 & 85 | i4 << 1 & 170) >>> 2 & 51 | (i4 >>> 1 & 85 | i4 << 1 & 170) << 2 & 204;
   HEAP8[i3 >> 0] = i4 >>> 4 | i4 << 4;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i3 = i3 + 1 | 0;
  }
  i2 = HEAP32[i7 + 308 >> 2] | 0;
 }
 L29 : do if ((i2 >>> 2 ^ i2 >>> 3) & 1) switch (1 << (i2 >>> 4 & 3) | 0) {
 case 4:
  {
   if (i1 >>> 0 <= 3) break L29;
   i2 = HEAP32[i8 + 88 >> 2] | 0;
   while (1) {
    i3 = HEAP8[i2 >> 0] | 0;
    i9 = i2 + 3 | 0;
    HEAP8[i2 >> 0] = HEAP8[i9 >> 0] | 0;
    HEAP8[i9 >> 0] = i3;
    i9 = i2 + 1 | 0;
    i3 = HEAP8[i9 >> 0] | 0;
    i4 = i2 + 2 | 0;
    HEAP8[i9 >> 0] = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = i3;
    i1 = i1 + -4 | 0;
    if (i1 >>> 0 <= 3) break; else i2 = i2 + 4 | 0;
   }
   break;
  }
 case 2:
  {
   if (i1 >>> 0 <= 1) break L29;
   i2 = HEAP32[i8 + 88 >> 2] | 0;
   while (1) {
    i3 = HEAP8[i2 >> 0] | 0;
    i4 = i2 + 1 | 0;
    HEAP8[i2 >> 0] = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = i3;
    i1 = i1 + -2 | 0;
    if (i1 >>> 0 <= 1) break; else i2 = i2 + 2 | 0;
   }
   break;
  }
 default:
  break L29;
 } while (0);
 HEAP32[i8 + 72 >> 2] = 1651078259;
 i4 = HEAP16[i5 + (i6 << 4) >> 1] | 0;
 HEAP32[i8 + 100 >> 2] = i4;
 i3 = HEAP16[i5 + (i6 << 4) + 6 >> 1] | 0;
 HEAP32[i8 + 104 >> 2] = i3;
 HEAP32[i8 + 40 >> 2] = HEAP16[i5 + (i6 << 4) + 4 >> 1] << 6;
 HEAP32[i8 + 32 >> 2] = i4 << 6;
 HEAP32[i8 + 36 >> 2] = i3 << 6;
 HEAP32[i8 + 24 >> 2] = (HEAP16[i5 + (i6 << 4) + 2 >> 1] | 0) - i4 << 6;
 HEAP32[i8 + 28 >> 2] = HEAP32[i8 + 76 >> 2] << 6;
 _ft_synthesize_vertical_metrics(i8 + 24 | 0, (HEAP32[i7 + 208 >> 2] | 0) + (HEAP32[i7 + 204 >> 2] | 0) << 6);
 i8 = 0;
 return i8 | 0;
}

function _bdf_free_font(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i6) return;
 i5 = HEAP32[i6 + 278664 >> 2] | 0;
 _ft_mem_free(i5, HEAP32[i6 >> 2] | 0);
 HEAP32[i6 >> 2] = 0;
 i1 = HEAP32[i6 + 128 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i2 | 0) > 0) {
   i3 = HEAP32[i1 + 12 >> 2] | 0;
   i4 = 0;
   while (1) {
    _ft_mem_free(i5, HEAP32[i3 >> 2] | 0);
    HEAP32[i3 >> 2] = 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i2 | 0)) break; else i3 = i3 + 4 | 0;
   }
  }
  _ft_mem_free(i5, HEAP32[i1 + 12 >> 2] | 0);
  HEAP32[i1 + 12 >> 2] = 0;
  _ft_mem_free(i5, HEAP32[i6 + 128 >> 2] | 0);
  HEAP32[i6 + 128 >> 2] = 0;
 }
 _ft_mem_free(i5, HEAP32[i6 + 84 >> 2] | 0);
 HEAP32[i6 + 84 >> 2] = 0;
 i1 = HEAP32[i6 + 72 >> 2] | 0;
 if (i1) {
  i3 = 0;
  do {
   i2 = HEAP32[i6 + 80 >> 2] | 0;
   if ((HEAP32[i2 + (i3 << 4) + 4 >> 2] | 0) == 1) {
    _ft_mem_free(i5, HEAP32[i2 + (i3 << 4) + 12 >> 2] | 0);
    HEAP32[(HEAP32[i6 + 80 >> 2] | 0) + (i3 << 4) + 12 >> 2] = 0;
    i1 = HEAP32[i6 + 72 >> 2] | 0;
   }
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < i1 >>> 0);
 }
 _ft_mem_free(i5, HEAP32[i6 + 80 >> 2] | 0);
 HEAP32[i6 + 80 >> 2] = 0;
 if (HEAP32[i6 + 52 >> 2] | 0) {
  i1 = HEAP32[i6 + 56 >> 2] | 0;
  i2 = 0;
  while (1) {
   _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i4 = i1 + 24 | 0;
   _ft_mem_free(i5, HEAP32[i4 >> 2] | 0);
   HEAP32[i4 >> 2] = 0;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (HEAP32[i6 + 52 >> 2] | 0) >>> 0) break; else i1 = i1 + 36 | 0;
  }
 }
 if (HEAP32[i6 + 64 >> 2] | 0) {
  i1 = HEAP32[i6 + 68 >> 2] | 0;
  i2 = 0;
  while (1) {
   _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i4 = i1 + 24 | 0;
   _ft_mem_free(i5, HEAP32[i4 >> 2] | 0);
   HEAP32[i4 >> 2] = 0;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (HEAP32[i6 + 64 >> 2] | 0) >>> 0) break; else i1 = i1 + 36 | 0;
  }
 }
 _ft_mem_free(i5, HEAP32[i6 + 56 >> 2] | 0);
 HEAP32[i6 + 56 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 68 >> 2] | 0);
 HEAP32[i6 + 68 >> 2] = 0;
 if (HEAP32[i6 + 112 >> 2] | 0) {
  i1 = HEAP32[i6 + 104 >> 2] | 0;
  i2 = 0;
  while (1) {
   _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
   HEAP32[i1 >> 2] = 0;
   i4 = i1 + 24 | 0;
   _ft_mem_free(i5, HEAP32[i4 >> 2] | 0);
   HEAP32[i4 >> 2] = 0;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= (HEAP32[i6 + 112 >> 2] | 0) >>> 0) break; else i1 = i1 + 36 | 0;
  }
 }
 _ft_mem_free(i5, HEAP32[i6 + 104 >> 2] | 0);
 HEAP32[i6 + 104 >> 2] = 0;
 i1 = HEAP32[i6 + 278680 >> 2] | 0;
 if ((i1 | 0) > 0) {
  i2 = HEAP32[i6 + 278688 >> 2] | 0;
  i3 = 0;
  while (1) {
   _ft_mem_free(i5, HEAP32[i2 >> 2] | 0);
   HEAP32[i2 >> 2] = 0;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i1 | 0)) break; else i2 = i2 + 4 | 0;
  }
 }
 _ft_mem_free(i5, HEAP32[i6 + 278688 >> 2] | 0);
 HEAP32[i6 + 278688 >> 2] = 0;
 if (HEAP32[i6 + 278672 >> 2] | 0) {
  i1 = 0;
  i2 = HEAP32[i6 + 278668 >> 2] | 0;
  while (1) {
   _ft_mem_free(i5, HEAP32[i2 >> 2] | 0);
   HEAP32[i2 >> 2] = 0;
   if ((HEAP32[i2 + 4 >> 2] | 0) == 1) {
    i4 = i2 + 12 | 0;
    _ft_mem_free(i5, HEAP32[i4 >> 2] | 0);
    HEAP32[i4 >> 2] = 0;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= (HEAP32[i6 + 278672 >> 2] | 0) >>> 0) break; else i2 = i2 + 16 | 0;
  }
 }
 _ft_mem_free(i5, HEAP32[i6 + 278668 >> 2] | 0);
 HEAP32[i6 + 278668 >> 2] = 0;
 return;
}

function __ZNSt3__16__treeINS_12__value_typeIm15ControllerStateEENS_19__map_value_compareImS3_NS_4lessImEELb1EEENS_9allocatorIS3_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS3_PNS_11__tree_nodeIS3_SD_EEiEESG_RKT_(i6, i1, i7, i3) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[i1 >> 2] | 0;
 if ((i5 | 0) != (i6 + 4 | 0) ? (i4 = HEAP32[i3 >> 2] | 0, i2 = HEAP32[i5 + 16 >> 2] | 0, i4 >>> 0 >= i2 >>> 0) : 0) {
  if (i2 >>> 0 >= i4 >>> 0) {
   HEAP32[i7 >> 2] = i5;
   return i7 | 0;
  }
  i3 = HEAP32[i5 + 4 >> 2] | 0;
  if (!i3) {
   i2 = i5;
   while (1) {
    i1 = HEAP32[i2 + 8 >> 2] | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break; else i2 = i1;
   }
  } else {
   i1 = i3;
   while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) break; else i1 = i2;
   }
  }
  if ((i1 | 0) != (i6 + 4 | 0) ? i4 >>> 0 >= (HEAP32[i1 + 16 >> 2] | 0) >>> 0 : 0) {
   i1 = HEAP32[i6 + 4 >> 2] | 0;
   if (!i1) {
    HEAP32[i7 >> 2] = i6 + 4;
    i7 = i6 + 4 | 0;
    return i7 | 0;
   } else i3 = i1;
   while (1) {
    i1 = HEAP32[i3 + 16 >> 2] | 0;
    if (i4 >>> 0 < i1 >>> 0) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i2 = i3;
      i1 = i3;
      i4 = 33;
      break;
     }
    } else {
     if (i1 >>> 0 >= i4 >>> 0) {
      i1 = i3;
      i4 = 38;
      break;
     }
     i2 = i3 + 4 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i1 = i3;
      i4 = 37;
      break;
     }
    }
    i3 = i1;
   }
   if ((i4 | 0) == 33) {
    HEAP32[i7 >> 2] = i1;
    i7 = i2;
    return i7 | 0;
   } else if ((i4 | 0) == 37) {
    HEAP32[i7 >> 2] = i1;
    i7 = i2;
    return i7 | 0;
   } else if ((i4 | 0) == 38) {
    HEAP32[i7 >> 2] = i1;
    return i7 | 0;
   }
  }
  if (!i3) {
   HEAP32[i7 >> 2] = i5;
   i7 = i5 + 4 | 0;
   return i7 | 0;
  } else {
   HEAP32[i7 >> 2] = i1;
   i7 = i1;
   return i7 | 0;
  }
 }
 if ((i5 | 0) != (HEAP32[i6 >> 2] | 0)) {
  i1 = HEAP32[i5 >> 2] | 0;
  if (!i1) {
   i2 = i5;
   while (1) {
    i1 = HEAP32[i2 + 8 >> 2] | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) i2 = i1; else break;
   }
  } else while (1) {
   i2 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i2) break; else i1 = i2;
  }
  i4 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[i1 + 16 >> 2] | 0) >>> 0 >= i4 >>> 0) {
   i1 = HEAP32[i6 + 4 >> 2] | 0;
   if (!i1) {
    HEAP32[i7 >> 2] = i6 + 4;
    i7 = i6 + 4 | 0;
    return i7 | 0;
   }
   while (1) {
    i2 = HEAP32[i1 + 16 >> 2] | 0;
    if (i4 >>> 0 < i2 >>> 0) {
     i2 = HEAP32[i1 >> 2] | 0;
     if (!i2) {
      i2 = i1;
      i4 = 14;
      break;
     } else i1 = i2;
    } else {
     if (i2 >>> 0 >= i4 >>> 0) {
      i4 = 19;
      break;
     }
     i3 = i1 + 4 | 0;
     i2 = HEAP32[i3 >> 2] | 0;
     if (!i2) {
      i4 = 18;
      break;
     } else i1 = i2;
    }
   }
   if ((i4 | 0) == 14) {
    HEAP32[i7 >> 2] = i1;
    i7 = i2;
    return i7 | 0;
   } else if ((i4 | 0) == 18) {
    HEAP32[i7 >> 2] = i1;
    i7 = i3;
    return i7 | 0;
   } else if ((i4 | 0) == 19) {
    HEAP32[i7 >> 2] = i1;
    return i7 | 0;
   }
  }
 } else i1 = i5;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i7 >> 2] = i5;
  i7 = i5;
  return i7 | 0;
 } else {
  i6 = i1;
  HEAP32[i7 >> 2] = i6;
  i7 = i6 + 4 | 0;
  return i7 | 0;
 }
 return 0;
}

function _pfr_face_get_kerning(i4, i1, i3, i11) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 i2 = (i1 | 0) == 0 ? 0 : i1 + -1 | 0;
 i1 = (i3 | 0) == 0 ? 0 : i3 + -1 | 0;
 i10 = HEAP32[i4 + 288 + 120 >> 2] | 0;
 if (i2 >>> 0 > i10 >>> 0 | i1 >>> 0 > i10 >>> 0) {
  i11 = 0;
  return i11 | 0;
 }
 i7 = HEAP32[i4 + 288 + 128 >> 2] | 0;
 i7 = HEAP32[i7 + (i1 << 4) >> 2] & 65535 | HEAP32[i7 + (i2 << 4) >> 2] << 16;
 i10 = HEAP32[i4 + 104 >> 2] | 0;
 i1 = HEAP32[i4 + 288 + 136 >> 2] | 0;
 if (!i1) {
  i11 = 0;
  return i11 | 0;
 }
 while (1) {
  if (i7 >>> 0 >= (HEAP32[i1 + 16 >> 2] | 0) >>> 0 ? i7 >>> 0 <= (HEAP32[i1 + 20 >> 2] | 0) >>> 0 : 0) {
   i9 = i1;
   break;
  }
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i5 = 33;
   break;
  }
 }
 if ((i5 | 0) == 33) return i1 | 0;
 i1 = _FT_Stream_Seek(i10, HEAP32[i9 + 12 >> 2] | 0) | 0;
 if (i1) {
  i11 = i1;
  return i11 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i10, Math_imul(HEAPU8[i9 + 4 >> 0] | 0, HEAP32[i9 + 8 >> 2] | 0) | 0) | 0;
 if (i1) {
  i11 = i1;
  return i11 | 0;
 }
 i3 = HEAPU8[i9 + 4 >> 0] | 0;
 i6 = HEAP32[i9 + 8 >> 2] | 0;
 i4 = _ft_highpow2(i3) | 0;
 i2 = Math_imul(i4, i6) | 0;
 i1 = HEAP32[i10 + 32 >> 2] | 0;
 i8 = HEAPU8[i9 + 5 >> 0] | 0;
 if ((i3 | 0) != (i4 | 0)) {
  i3 = Math_imul(i3 - i4 | 0, i6) | 0;
  i4 = HEAP8[i1 + i3 >> 0] | 0;
  if (!((i8 & 1) << 24 >> 24)) {
   i5 = i3 + 2 | 0;
   i3 = (i4 & 255) << 16 | HEAPU8[i1 + (i3 + 1) >> 0];
  } else {
   i5 = i3 + 4 | 0;
   i3 = HEAPU8[i1 + (i3 + 1) >> 0] << 16 | (i4 & 255) << 24 | HEAPU8[i1 + (i3 + 2) >> 0] << 8 | HEAPU8[i1 + (i3 + 3) >> 0];
  }
  if ((i3 | 0) != (i7 | 0)) if (i3 >>> 0 < i7 >>> 0) {
   i1 = i1 + (i5 + ((i8 & 2) << 24 >> 24 == 0 ? 1 : 2)) | 0;
   i5 = 15;
  } else i5 = 15; else {
   i2 = i1 + i5 | 0;
   i5 = 28;
  }
 } else i5 = 15;
 L28 : do if ((i5 | 0) == 15) {
  L30 : do if (i2 >>> 0 > i6 >>> 0) {
   if (!((i8 & 1) << 24 >> 24)) {
    while (1) {
     i2 = i2 >>> 1;
     i3 = i1 + i2 | 0;
     i4 = HEAPU8[i3 >> 0] << 16 | HEAPU8[i1 + (i2 + 1) >> 0];
     if ((i4 | 0) == (i7 | 0)) break;
     i1 = i4 >>> 0 < i7 >>> 0 ? i3 : i1;
     if (i2 >>> 0 <= i6 >>> 0) break L30;
    }
    i2 = i2 + 2 | 0;
   } else {
    while (1) {
     i2 = i2 >>> 1;
     i3 = i1 + i2 | 0;
     i4 = HEAPU8[i1 + (i2 + 1) >> 0] << 16 | HEAPU8[i3 >> 0] << 24 | HEAPU8[i1 + (i2 + 2) >> 0] << 8 | HEAPU8[i1 + (i2 + 3) >> 0];
     if ((i4 | 0) == (i7 | 0)) break;
     i1 = i4 >>> 0 < i7 >>> 0 ? i3 : i1;
     if (i2 >>> 0 <= i6 >>> 0) break L30;
    }
    i2 = i2 + 4 | 0;
   }
   i2 = i1 + i2 | 0;
   i5 = 28;
   break L28;
  } while (0);
  if (!((i8 & 1) << 24 >> 24)) {
   i3 = HEAPU8[i1 >> 0] << 16 | HEAPU8[i1 + 1 >> 0];
   i2 = i1 + 2 | 0;
  } else {
   i3 = HEAPU8[i1 + 1 >> 0] << 16 | HEAPU8[i1 >> 0] << 24 | HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
   i2 = i1 + 4 | 0;
  }
  if ((i3 | 0) == (i7 | 0)) i5 = 28;
 } while (0);
 if ((i5 | 0) == 28) {
  i1 = HEAP8[i2 >> 0] | 0;
  if (!((i8 & 2) << 24 >> 24)) i1 = i1 & 255; else i1 = HEAPU8[i2 + 1 >> 0] | i1 << 24 >> 24 << 8;
  HEAP32[i11 >> 2] = (HEAP16[i9 + 6 >> 1] | 0) + i1;
 }
 _FT_Stream_ExitFrame(i10);
 i11 = 0;
 return i11 | 0;
}

function _ft_black_render(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = HEAP32[i6 + 4 >> 2] | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 if (!i7) {
  i7 = 96;
  return i7 | 0;
 }
 if (!(HEAP32[i7 >> 2] | 0)) {
  i7 = 96;
  return i7 | 0;
 }
 if (!(HEAP32[i7 + 4 >> 2] | 0)) {
  i7 = 96;
  return i7 | 0;
 }
 if (!i4) {
  i7 = 20;
  return i7 | 0;
 }
 i1 = HEAP16[i4 + 2 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  i7 = 0;
  return i7 | 0;
 }
 i2 = HEAP16[i4 >> 1] | 0;
 if (i2 << 16 >> 16 < 1) {
  i7 = 0;
  return i7 | 0;
 }
 i3 = HEAP32[i4 + 12 >> 2] | 0;
 if (!i3) {
  i7 = 20;
  return i7 | 0;
 }
 if (!(HEAP32[i4 + 4 >> 2] | 0)) {
  i7 = 20;
  return i7 | 0;
 }
 if ((i1 << 16 >> 16 | 0) != ((HEAP16[i3 + ((i2 << 16 >> 16) + -1 << 1) >> 1] | 0) + 1 | 0)) {
  i7 = 20;
  return i7 | 0;
 }
 i2 = HEAP32[i7 + 12 >> 2] | 0;
 if (HEAP32[i6 + 8 >> 2] & 2) {
  i7 = 19;
  return i7 | 0;
 }
 if (!i5) {
  i7 = 20;
  return i7 | 0;
 }
 if (!(HEAP32[i5 + 4 >> 2] | 0)) {
  i7 = 0;
  return i7 | 0;
 }
 if (!(HEAP32[i5 >> 2] | 0)) {
  i7 = 0;
  return i7 | 0;
 }
 if (!(HEAP32[i5 + 12 >> 2] | 0)) {
  i7 = 20;
  return i7 | 0;
 }
 HEAP32[i2 + 128 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 128 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
 HEAP32[i2 + 128 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i2 + 128 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i2 + 128 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i2 + 104 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i2 + 104 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
 HEAP32[i2 + 104 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
 HEAP32[i2 + 104 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
 HEAP32[i2 + 104 + 16 >> 2] = HEAP32[i5 + 16 >> 2];
 HEAP32[i2 + 104 + 20 >> 2] = HEAP32[i5 + 20 >> 2];
 i5 = HEAP32[i7 >> 2] | 0;
 HEAP32[i2 + 28 >> 2] = i5;
 HEAP32[i2 + 32 >> 2] = i5 + ((HEAP32[i7 + 4 >> 2] | 0) >>> 2 << 2);
 if (HEAP32[i6 + 8 >> 2] & 1) {
  i7 = 19;
  return i7 | 0;
 }
 i1 = HEAP32[i2 + 144 >> 2] | 0;
 i7 = (i1 & 256 | 0) == 0 ? 6 : 12;
 HEAP32[i2 >> 2] = i7;
 HEAP32[i2 + 16 >> 2] = (i1 & 256 | 0) == 0 ? 32 : 256;
 HEAP32[i2 + 20 >> 2] = (i1 & 256 | 0) == 0 ? 2 : 30;
 HEAP32[i2 + 4 >> 2] = 1 << i7;
 HEAP32[i2 + 8 >> 2] = (1 << i7 | 0) / 2 | 0;
 HEAP32[i2 + 12 >> 2] = i7 + -6;
 HEAP32[i2 + 24 >> 2] = i7 + -6;
 if (!(i1 & 8)) {
  HEAP8[i2 + 180 >> 0] = (i1 & 16) >>> 2;
  if (!(i1 & 32)) HEAP8[i2 + 180 >> 0] = (i1 & 16) >>> 2 & 255 | 1;
 } else HEAP8[i2 + 180 >> 0] = 2;
 HEAP8[i2 + 181 >> 0] = i1 >>> 9 & 1 ^ 1;
 HEAP32[i2 + 164 >> 2] = 16;
 HEAP32[i2 + 168 >> 2] = 4;
 HEAP32[i2 + 172 >> 2] = 5;
 HEAP32[i2 + 176 >> 2] = 78;
 HEAP32[i2 + 1024 >> 2] = 0;
 HEAP16[i2 + 960 >> 1] = 0;
 HEAP16[i2 + 962 >> 1] = (HEAP32[i2 + 104 >> 2] | 0) + 65535;
 HEAP16[i2 + 56 >> 1] = HEAP32[i2 + 108 >> 2];
 HEAP32[i2 + 60 >> 2] = HEAP32[i2 + 116 >> 2];
 i1 = _Render_Single_Pass(i2, 0) | 0;
 if (i1) {
  i7 = i1;
  return i7 | 0;
 }
 do if ((HEAP8[i2 + 181 >> 0] | 0) != 0 ? (HEAP8[i2 + 180 >> 0] | 0) != 2 : 0) {
  HEAP32[i2 + 164 >> 2] = 17;
  HEAP32[i2 + 168 >> 2] = 6;
  HEAP32[i2 + 172 >> 2] = 7;
  HEAP32[i2 + 176 >> 2] = 79;
  HEAP32[i2 + 1024 >> 2] = 0;
  HEAP16[i2 + 960 >> 1] = 0;
  HEAP16[i2 + 962 >> 1] = (HEAP32[i2 + 108 >> 2] | 0) + 65535;
  i1 = _Render_Single_Pass(i2, 1) | 0;
  if (!i1) break;
  return i1 | 0;
 } while (0);
 i7 = 0;
 return i7 | 0;
}

function _sfnt_get_ps_name(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i8 + 700 >> 2] | 0;
 if (i1) {
  i8 = i1;
  STACKTOP = i9;
  return i8 | 0;
 }
 i3 = HEAP16[i8 + 344 >> 1] | 0;
 do if (i3 << 16 >> 16) {
  i4 = HEAP32[i8 + 360 >> 2] | 0;
  i1 = -1;
  i2 = -1;
  i5 = 0;
  while (1) {
   L8 : do if ((HEAP16[i4 + (i5 * 20 | 0) + 6 >> 1] | 0) == 6 ? (HEAP16[i4 + (i5 * 20 | 0) + 8 >> 1] | 0) != 0 : 0) switch (HEAP16[i4 + (i5 * 20 | 0) >> 1] | 0) {
   case 3:
    {
     if ((HEAP16[i4 + (i5 * 20 | 0) + 2 >> 1] | 0) != 1) break L8;
     i2 = (HEAP16[i4 + (i5 * 20 | 0) + 4 >> 1] | 0) == 1033 ? i5 : i2;
     break L8;
    }
   case 1:
    {
     if (HEAP16[i4 + (i5 * 20 | 0) + 2 >> 1] | 0) break L8;
     i1 = (HEAP16[i4 + (i5 * 20 | 0) + 4 >> 1] | 0) == 0 ? i5 : i1;
     break L8;
    }
   default:
    break L8;
   } while (0);
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i3 & 65535 | 0)) {
    i6 = i1;
    i5 = i2;
    break;
   }
  }
  if ((i5 | 0) == -1) {
   if ((i6 | 0) == -1) {
    i1 = 0;
    break;
   }
   i2 = HEAP32[i8 + 100 >> 2] | 0;
   i3 = HEAP32[i8 + 360 >> 2] | 0;
   i4 = HEAPU16[i3 + (i6 * 20 | 0) + 8 >> 1] | 0;
   HEAP32[i9 >> 2] = 0;
   i1 = _ft_mem_alloc(i2, i4 + 1 | 0, i9) | 0;
   if (HEAP32[i9 >> 2] | 0) break;
   i5 = HEAP32[i8 + 364 >> 2] | 0;
   i7 = _FT_Stream_Seek(i5, HEAP32[i3 + (i6 * 20 | 0) + 12 >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = i7;
   if ((i7 | 0) == 0 ? (i7 = _FT_Stream_Read(i5, i1, i4) | 0, HEAP32[i9 >> 2] = i7, (i7 | 0) == 0) : 0) {
    HEAP8[i1 + i4 >> 0] = 0;
    break;
   }
   HEAP32[i3 + (i6 * 20 | 0) + 12 >> 2] = 0;
   HEAP16[i3 + (i6 * 20 | 0) + 8 >> 1] = 0;
   _ft_mem_free(i2, HEAP32[i3 + (i6 * 20 | 0) + 16 >> 2] | 0);
   HEAP32[i3 + (i6 * 20 | 0) + 16 >> 2] = 0;
   _ft_mem_free(i2, i1);
   i1 = 0;
   break;
  }
  i2 = HEAP32[i8 + 100 >> 2] | 0;
  i3 = HEAP32[i8 + 360 >> 2] | 0;
  i4 = HEAP16[i3 + (i5 * 20 | 0) + 8 >> 1] | 0;
  HEAP32[i9 + 4 >> 2] = 0;
  i1 = _ft_mem_alloc(i2, (i4 & 65535) + 1 | 0, i9 + 4 | 0) | 0;
  if (!(HEAP32[i9 + 4 >> 2] | 0)) {
   i6 = HEAP32[i8 + 364 >> 2] | 0;
   i10 = _FT_Stream_Seek(i6, HEAP32[i3 + (i5 * 20 | 0) + 12 >> 2] | 0) | 0;
   HEAP32[i9 + 4 >> 2] = i10;
   if ((i10 | 0) == 0 ? (i10 = _FT_Stream_EnterFrame(i6, HEAPU16[i3 + (i5 * 20 | 0) + 8 >> 1] | 0) | 0, HEAP32[i9 + 4 >> 2] = i10, (i10 | 0) == 0) : 0) {
    if (!((i4 & 65535) >>> 1 << 16 >> 16)) i2 = i1; else {
     i3 = (i4 & 65535) >>> 1 & 65535;
     i4 = HEAP32[i6 + 32 >> 2] | 0;
     i2 = i1;
     while (1) {
      if ((HEAP8[i4 >> 0] | 0) == 0 ? (i7 = HEAP8[i4 + 1 >> 0] | 0, (i7 & 255) > 31 & i7 << 24 >> 24 > -1) : 0) {
       HEAP8[i2 >> 0] = i7;
       i2 = i2 + 1 | 0;
      }
      i3 = i3 + -1 | 0;
      if (!i3) break; else i4 = i4 + 2 | 0;
     }
    }
    HEAP8[i2 >> 0] = 0;
    _FT_Stream_ExitFrame(i6);
    break;
   }
   _ft_mem_free(i2, i1);
   HEAP16[i3 + (i5 * 20 | 0) + 8 >> 1] = 0;
   HEAP32[i3 + (i5 * 20 | 0) + 12 >> 2] = 0;
   _ft_mem_free(i2, HEAP32[i3 + (i5 * 20 | 0) + 16 >> 2] | 0);
   HEAP32[i3 + (i5 * 20 | 0) + 16 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0; while (0);
 HEAP32[i8 + 700 >> 2] = i1;
 i10 = i1;
 STACKTOP = i9;
 return i10 | 0;
}

function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 HEAP8[i1 + 12 >> 0] = (i1 | 0) == (i4 | 0) & 1;
 if ((i1 | 0) == (i4 | 0)) return;
 while (1) {
  i5 = HEAP32[i1 + 8 >> 2] | 0;
  if (HEAP8[i5 + 12 >> 0] | 0) {
   i1 = 37;
   break;
  }
  i3 = i1;
  i1 = HEAP32[i5 + 8 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) == (i5 | 0)) {
   i2 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i2) {
    i7 = i5;
    i8 = i5 + 8 | 0;
    i6 = i5 + 8 | 0;
    i5 = i1;
    i4 = i1;
    i1 = 7;
    break;
   }
   if (HEAP8[i2 + 12 >> 0] | 0) {
    i7 = i5;
    i8 = i5 + 8 | 0;
    i6 = i5 + 8 | 0;
    i5 = i1;
    i4 = i1;
    i1 = 7;
    break;
   }
   HEAP8[i5 + 12 >> 0] = 1;
   HEAP8[i1 + 12 >> 0] = (i1 | 0) == (i4 | 0) & 1;
   HEAP8[i2 + 12 >> 0] = 1;
  } else {
   if (!i2) {
    i7 = i5 + 8 | 0;
    i8 = i5;
    i6 = i5 + 8 | 0;
    i5 = i1;
    i4 = i1;
    i1 = 24;
    break;
   }
   if (HEAP8[i2 + 12 >> 0] | 0) {
    i7 = i5 + 8 | 0;
    i8 = i5;
    i6 = i5 + 8 | 0;
    i5 = i1;
    i4 = i1;
    i1 = 24;
    break;
   }
   HEAP8[i5 + 12 >> 0] = 1;
   HEAP8[i1 + 12 >> 0] = (i1 | 0) == (i4 | 0) & 1;
   HEAP8[i2 + 12 >> 0] = 1;
  }
  if ((i1 | 0) == (i4 | 0)) {
   i1 = 37;
   break;
  }
 }
 if ((i1 | 0) == 7) {
  if ((HEAP32[i7 >> 2] | 0) == (i3 | 0)) i1 = i7; else {
   i4 = i7 + 4 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   HEAP32[i4 >> 2] = i1;
   if (!i1) i1 = i5; else {
    HEAP32[i1 + 8 >> 2] = i7;
    i1 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i2 + 8 >> 2] = i1;
   i1 = HEAP32[i6 >> 2] | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i7 | 0)) HEAP32[i1 >> 2] = i2; else HEAP32[i1 + 4 >> 2] = i2;
   HEAP32[i2 >> 2] = i7;
   HEAP32[i8 >> 2] = i2;
   i1 = i2;
   i4 = HEAP32[i2 + 8 >> 2] | 0;
  }
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP8[i4 + 12 >> 0] = 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  HEAP32[i4 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i4;
  i1 = i4 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i3 + 4 >> 2] = i4;
  HEAP32[i1 >> 2] = i3;
  return;
 } else if ((i1 | 0) == 24) {
  if ((HEAP32[i8 >> 2] | 0) == (i3 | 0)) {
   i2 = HEAP32[i8 >> 2] | 0;
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   HEAP32[i8 >> 2] = i1;
   if (!i1) i1 = i5; else {
    HEAP32[i1 + 8 >> 2] = i8;
    i1 = HEAP32[i7 >> 2] | 0;
   }
   HEAP32[i2 + 8 >> 2] = i1;
   i1 = HEAP32[i6 >> 2] | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i8 | 0)) HEAP32[i1 >> 2] = i2; else HEAP32[i1 + 4 >> 2] = i2;
   HEAP32[i2 + 4 >> 2] = i8;
   HEAP32[i7 >> 2] = i2;
   i1 = i2;
   i4 = HEAP32[i2 + 8 >> 2] | 0;
  } else i1 = i8;
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP8[i4 + 12 >> 0] = 0;
  i8 = i4 + 4 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i8 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i4;
  i1 = i4 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i1 >> 2] = i3;
  return;
 } else if ((i1 | 0) == 37) return;
}

function __ZN5ArrayI14ShaderConstant9StdCAllocE6insertEPKS0_i(i11, i9, i10) {
 i11 = i11 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = HEAP32[i11 + 12 >> 2] | 0;
 i7 = (i1 + i10 | 0) >>> 0 < 32 ? 32 : i1 + i10 | 0;
 i2 = HEAP32[i11 + 8 >> 2] | 0;
 if (i7 >>> 0 >= i2 >>> 0) {
  i6 = __Znaj(i7 >>> 0 > 27531841 ? -1 : i7 * 156 | 0) | 0;
  if (i7) {
   i1 = i6;
   do {
    HEAP8[i1 >> 0] = 0;
    HEAP8[i1 + 128 >> 0] = 0;
    HEAP32[i1 + 132 >> 2] = 0;
    i1 = i1 + 156 | 0;
   } while ((i1 | 0) != (i6 + (i7 * 156 | 0) | 0));
   i1 = HEAP32[i11 + 12 >> 2] | 0;
  }
  i5 = HEAP32[i11 >> 2] | 0;
  if (!i1) {
   if (i5) i4 = 12;
  } else {
   i4 = 0;
   do {
    i2 = 0;
    do {
     i3 = HEAP8[i5 + (i4 * 156 | 0) + i2 >> 0] | 0;
     if (!(i3 << 24 >> 24)) break;
     HEAP8[i6 + (i4 * 156 | 0) + i2 >> 0] = i3;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < 128);
    HEAP8[i6 + (i4 * 156 | 0) + i2 >> 0] = 0;
    HEAP32[i6 + (i4 * 156 | 0) + 132 >> 2] = i2;
    i3 = i6 + (i4 * 156 | 0) + 136 | 0;
    i2 = i5 + (i4 * 156 | 0) + 136 | 0;
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i1 | 0));
   i4 = 12;
  }
  if ((i4 | 0) == 12) __ZdaPv(i5);
  HEAP32[i11 >> 2] = i6;
  HEAP32[i11 + 8 >> 2] = i7;
  i2 = i7;
 }
 if ((i10 | 0) <= 0) return;
 i1 = HEAP32[i11 + 12 >> 2] | 0;
 i3 = 0;
 while (1) {
  if (i1 >>> 0 >= i2 >>> 0 ? (i8 = i2 << 1, i8 = i8 >>> 0 < 32 ? 32 : i8, i8 >>> 0 >= i2 >>> 0) : 0) {
   i7 = __Znaj(i8 >>> 0 > 27531841 ? -1 : i8 * 156 | 0) | 0;
   if (i8) {
    i1 = i7;
    do {
     HEAP8[i1 >> 0] = 0;
     HEAP8[i1 + 128 >> 0] = 0;
     HEAP32[i1 + 132 >> 2] = 0;
     i1 = i1 + 156 | 0;
    } while ((i1 | 0) != (i7 + (i8 * 156 | 0) | 0));
    i1 = HEAP32[i11 + 12 >> 2] | 0;
   }
   i6 = HEAP32[i11 >> 2] | 0;
   if (!i1) if (!i6) i1 = 0; else i4 = 28; else {
    i5 = 0;
    do {
     i2 = 0;
     do {
      i4 = HEAP8[i6 + (i5 * 156 | 0) + i2 >> 0] | 0;
      if (!(i4 << 24 >> 24)) break;
      HEAP8[i7 + (i5 * 156 | 0) + i2 >> 0] = i4;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) < 128);
     HEAP8[i7 + (i5 * 156 | 0) + i2 >> 0] = 0;
     HEAP32[i7 + (i5 * 156 | 0) + 132 >> 2] = i2;
     i4 = i7 + (i5 * 156 | 0) + 136 | 0;
     i2 = i6 + (i5 * 156 | 0) + 136 | 0;
     HEAP32[i4 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAP32[i4 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != (i1 | 0));
    i4 = 28;
   }
   if ((i4 | 0) == 28) {
    i4 = 0;
    __ZdaPv(i6);
    i1 = HEAP32[i11 + 12 >> 2] | 0;
   }
   HEAP32[i11 >> 2] = i7;
   HEAP32[i11 + 8 >> 2] = i8;
  }
  _memcpy((HEAP32[i11 >> 2] | 0) + (i1 * 156 | 0) | 0, i9 + (i3 * 156 | 0) | 0, 156) | 0;
  i1 = (HEAP32[i11 + 12 >> 2] | 0) + 1 | 0;
  HEAP32[i11 + 12 >> 2] = i1;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i10 | 0)) break;
  i2 = HEAP32[i11 + 8 >> 2] | 0;
 }
 return;
}

function _open_face(i1, i7, i3, i4, i6, i12) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i12 = i12 | 0;
 var i2 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i10 = HEAP32[i1 + 8 >> 2] | 0;
 i11 = _ft_mem_alloc(i10, HEAP32[i8 + 36 >> 2] | 0, i13) | 0;
 do if (!(HEAP32[i13 >> 2] | 0)) {
  i5 = _ft_mem_alloc(i10, 64, i13) | 0;
  if (!(HEAP32[i13 >> 2] | 0)) {
   HEAP32[i11 + 128 >> 2] = i5;
   HEAP32[i11 + 96 >> 2] = i1;
   HEAP32[i11 + 100 >> 2] = i10;
   HEAP32[i11 + 104 >> 2] = i7;
   HEAP32[i5 + 52 >> 2] = 0;
   L4 : do if ((i4 | 0) > 0) {
    i1 = HEAP32[i5 + 52 >> 2] | 0;
    i2 = 0;
    do {
     if (i1) break L4;
     if ((HEAP32[i6 + (i2 << 3) >> 2] | 0) == 1768842098) {
      i1 = HEAP32[i6 + (i2 << 3) + 4 >> 2] | 0;
      HEAP32[i5 + 52 >> 2] = i1;
     } else i1 = 0;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < (i4 | 0));
   } while (0);
   i1 = HEAP32[i8 + 48 >> 2] | 0;
   if ((i1 | 0) != 0 ? (i7 = FUNCTION_TABLE_iiiiii[i1 & 63](i7, i11, i3, i4, i6) | 0, HEAP32[i13 >> 2] = i7, (i7 | 0) != 0) : 0) break;
   i4 = HEAP32[i11 + 40 >> 2] | 0;
   if (!i4) {
    HEAP32[i12 >> 2] = i11;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   i1 = (HEAP32[i11 + 36 >> 2] | 0) + -1 | 0;
   L20 : do if ((i1 | 0) >= 0) {
    i3 = i4 + (i1 << 2) | 0;
    L22 : while (1) {
     i2 = HEAP32[i3 >> 2] | 0;
     L24 : do if ((HEAP32[i2 + 4 >> 2] | 0) == 1970170211) {
      switch (HEAP16[i2 + 8 >> 1] | 0) {
      case 3:
       {
        if ((HEAP16[i2 + 10 >> 1] | 0) != 10) break L24;
        break;
       }
      case 0:
       {
        if ((HEAP16[i2 + 10 >> 1] | 0) != 4) break L24;
        break;
       }
      default:
       break L24;
      }
      if ((i3 - i4 | 0) <= 60) {
       i9 = 21;
       break L22;
      }
     } while (0);
     i3 = i3 + -4 | 0;
     if (i3 >>> 0 < i4 >>> 0) {
      i2 = i4 + (i1 << 2) | 0;
      break;
     }
    }
    if ((i9 | 0) == 21) {
     HEAP32[i11 + 92 >> 2] = i2;
     break;
    }
    while (1) {
     i1 = HEAP32[i2 >> 2] | 0;
     if ((HEAP32[i1 + 4 >> 2] | 0) == 1970170211 ? (i2 - i4 | 0) <= 60 : 0) break;
     i2 = i2 + -4 | 0;
     if (i2 >>> 0 < i4 >>> 0) break L20;
    }
    HEAP32[i11 + 92 >> 2] = i1;
   } while (0);
   HEAP32[i12 >> 2] = i11;
   i12 = 0;
   STACKTOP = i13;
   return i12 | 0;
  }
 } else i5 = 0; while (0);
 if (i11) {
  if ((HEAP32[i11 + 36 >> 2] | 0) > 0) {
   i4 = 0;
   do {
    i1 = HEAP32[(HEAP32[i11 + 40 >> 2] | 0) + (i4 << 2) >> 2] | 0;
    i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] | 0;
    i3 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0;
    if (i3) FUNCTION_TABLE_vi[i3 & 127](i1);
    _ft_mem_free(i2, i1);
    HEAP32[(HEAP32[i11 + 40 >> 2] | 0) + (i4 << 2) >> 2] = 0;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) < (HEAP32[i11 + 36 >> 2] | 0));
  }
  _ft_mem_free(i10, HEAP32[i11 + 40 >> 2] | 0);
  HEAP32[i11 + 40 >> 2] = 0;
  HEAP32[i11 + 36 >> 2] = 0;
 }
 i1 = HEAP32[i8 + 52 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i11);
 _ft_mem_free(i10, i5);
 _ft_mem_free(i10, i11);
 HEAP32[i12 >> 2] = 0;
 i12 = HEAP32[i13 >> 2] | 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _PS_Conv_ToFixed(i10, i8, i2) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 HEAP32[i11 >> 2] = i1;
 if (i1 >>> 0 >= i8 >>> 0) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i3 = HEAP8[i1 >> 0] | 0;
 L4 : do switch (i3 << 24 >> 24) {
 case 43:
 case 45:
  {
   HEAP32[i11 >> 2] = i1 + 1;
   if ((i1 + 1 | 0) == (i8 | 0)) {
    i10 = 0;
    STACKTOP = i11;
    return i10 | 0;
   } else {
    i4 = HEAP8[i1 + 1 >> 0] | 0;
    i1 = i1 + 1 | 0;
    i9 = i3 << 24 >> 24 == 45 & 1;
    break L4;
   }
  }
 default:
  {
   i4 = i3;
   i9 = 0;
  }
 } while (0);
 if (i4 << 24 >> 24 == 46) {
  i3 = i1;
  i1 = 0;
 } else {
  i1 = (_PS_Conv_ToInt(i11, i8) | 0) << 16;
  i3 = HEAP32[i11 >> 2] | 0;
 }
 L13 : do if (i3 >>> 0 < i8 >>> 0 ? (HEAP8[i3 >> 0] | 0) == 46 : 0) {
  i3 = i3 + 1 | 0;
  HEAP32[i11 >> 2] = i3;
  if (i3 >>> 0 < i8 >>> 0) {
   if (!i1) {
    i7 = i3;
    i3 = 0;
    i4 = 1;
   } else {
    i6 = i3;
    i3 = 0;
    i4 = 1;
    while (1) {
     i5 = HEAP8[i6 >> 0] | 0;
     switch (i5 << 24 >> 24) {
     case 0:
     case 12:
     case 9:
     case 10:
     case 13:
     case 32:
      break L13;
     default:
      {}
     }
     if (i5 << 24 >> 24 < 0) break L13;
     if (((i5 & 127) + -48 | 0) >>> 0 > 9) break L13;
     if ((i4 | 0) < 1e7) {
      i3 = (i3 * 10 | 0) + (HEAP8[326563 + (i5 & 127) >> 0] | 0) | 0;
      i4 = i4 * 10 | 0;
     }
     i5 = i6 + 1 | 0;
     HEAP32[i11 >> 2] = i5;
     if (i5 >>> 0 < i8 >>> 0) i6 = i5; else {
      i6 = i5;
      break L13;
     }
    }
   }
   while (1) {
    i5 = HEAP8[i7 >> 0] | 0;
    switch (i5 << 24 >> 24) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     {
      i6 = i7;
      break L13;
     }
    default:
     {}
    }
    if (i5 << 24 >> 24 < 0) {
     i6 = i7;
     break L13;
    }
    i6 = HEAP8[326563 + (i5 & 127) >> 0] | 0;
    if (((i5 & 127) + -48 | 0) >>> 0 > 9) {
     i6 = i7;
     break L13;
    }
    if ((i2 | 0) <= 0) {
     if ((i4 | 0) < 1e7) {
      i3 = i6 + (i3 * 10 | 0) | 0;
      i4 = i4 * 10 | 0;
     }
    } else {
     i2 = i2 + -1 | 0;
     i3 = i6 + (i3 * 10 | 0) | 0;
    }
    i5 = i7 + 1 | 0;
    HEAP32[i11 >> 2] = i5;
    if (i5 >>> 0 < i8 >>> 0) i7 = i5; else {
     i6 = i5;
     break L13;
    }
   }
  } else {
   i6 = i3;
   i3 = 0;
   i4 = 1;
  }
 } else {
  i6 = i3;
  i3 = 0;
  i4 = 1;
 } while (0);
 i5 = i6 + 1 | 0;
 L37 : do if (i5 >>> 0 < i8 >>> 0) {
  switch (HEAP8[i6 >> 0] | 0) {
  case 69:
  case 101:
   break;
  default:
   break L37;
  }
  HEAP32[i11 >> 2] = i5;
  i2 = (_PS_Conv_ToInt(i11, i8) | 0) + i2 | 0;
 } while (0);
 if ((i2 | 0) <= 0) {
  if ((i2 | 0) < 0) while (1) {
   i1 = (i1 | 0) / 10 | 0;
   i4 = i4 * 10 | 0;
   if ((i2 | 0) < -1) i2 = i2 + 1 | 0; else break;
  }
 } else while (1) {
  i1 = i1 * 10 | 0;
  i3 = i3 * 10 | 0;
  if ((i2 | 0) > 1) i2 = i2 + -1 | 0; else break;
 }
 if (i3) i1 = (_FT_DivFix(i3, i4) | 0) + i1 | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i10 = i9 << 24 >> 24 == 0 ? i1 : 0 - i1 | 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _cff_index_access_element(i10, i6, i12, i9) {
 i10 = i10 | 0;
 i6 = i6 | 0;
 i12 = i12 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i10) {
  i12 = 6;
  STACKTOP = i13;
  return i12 | 0;
 }
 i4 = HEAP32[i10 + 8 >> 2] | 0;
 if (i4 >>> 0 <= i6 >>> 0) {
  i12 = 6;
  STACKTOP = i13;
  return i12 | 0;
 }
 i11 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i10 + 24 >> 2] | 0;
 L7 : do if (!i5) {
  i1 = Math_imul(HEAPU8[i10 + 12 >> 0] | 0, i6) | 0;
  i1 = _FT_Stream_Seek(i11, (HEAP32[i10 + 4 >> 2] | 0) + 3 + i1 | 0) | 0;
  if (i1) {
   i12 = i1;
   STACKTOP = i13;
   return i12 | 0;
  }
  i1 = _FT_Stream_Read(HEAP32[i10 >> 2] | 0, i13, HEAPU8[i10 + 12 >> 0] | 0) | 0;
  if (i1) {
   i12 = i1;
   STACKTOP = i13;
   return i12 | 0;
  }
  i2 = HEAP8[i10 + 12 >> 0] | 0;
  if (!(i2 << 24 >> 24)) {
   i7 = 23;
   break;
  }
  i3 = 0;
  i1 = 0;
  while (1) {
   i7 = HEAPU8[i13 + i3 >> 0] | 0 | i1 << 8;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i2 & 255 | 0)) break; else i1 = i7;
  }
  if (!i7) i7 = 23; else {
   i1 = i6;
   while (1) {
    i1 = i1 + 1 | 0;
    i3 = _FT_Stream_Read(HEAP32[i10 >> 2] | 0, i13, i2 & 255) | 0;
    if ((i3 | 0) == 0 ? (i8 = HEAP8[i10 + 12 >> 0] | 0, i8 << 24 >> 24 != 0) : 0) {
     i5 = 0;
     i2 = 0;
     while (1) {
      i4 = HEAPU8[i13 + i5 >> 0] | 0 | i2 << 8;
      i5 = i5 + 1 | 0;
      if ((i5 | 0) == (i8 & 255 | 0)) break; else i2 = i4;
     }
     if (i4) {
      i2 = i7;
      i7 = 25;
      break L7;
     }
    }
    if (i1 >>> 0 >= (HEAP32[i10 + 8 >> 2] | 0) >>> 0) {
     i2 = i7;
     i7 = 24;
     break L7;
    }
    i2 = HEAP8[i10 + 12 >> 0] | 0;
   }
  }
 } else {
  i2 = HEAP32[i5 + (i6 << 2) >> 2] | 0;
  if (!i2) i7 = 23; else {
   i1 = i6;
   while (1) {
    i1 = i1 + 1 | 0;
    i3 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
    if (i3) {
     i4 = i3;
     i7 = 25;
     break L7;
    }
    if (i1 >>> 0 >= i4 >>> 0) {
     i3 = 0;
     i7 = 24;
     break;
    }
   }
  }
 } while (0);
 if ((i7 | 0) == 23) {
  i1 = HEAP32[i11 + 4 >> 2] | 0;
  i3 = 0;
  i2 = 0;
  i4 = 0;
  i7 = 27;
 } else if ((i7 | 0) == 24) {
  i1 = HEAP32[i11 + 4 >> 2] | 0;
  i4 = 0;
  i7 = 27;
 } else if ((i7 | 0) == 25) {
  i1 = HEAP32[i11 + 4 >> 2] | 0;
  if (i4 >>> 0 > (i1 + 1 | 0) >>> 0) {
   i5 = HEAP32[i10 + 16 >> 2] | 0;
   i3 = 0;
   i7 = 28;
  } else {
   i3 = 0;
   i7 = 27;
  }
 }
 if ((i7 | 0) == 27) {
  i5 = HEAP32[i10 + 16 >> 2] | 0;
  if (i5 >>> 0 > (i1 + 1 - i4 | 0) >>> 0) i7 = 28; else {
   i6 = i2;
   i1 = i4;
  }
 }
 if ((i7 | 0) == 28) {
  i6 = i2;
  i1 = i1 + 1 - i5 | 0;
 }
 if (!((i6 | 0) != 0 & i1 >>> 0 > i6 >>> 0)) {
  HEAP32[i12 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  i12 = i3;
  STACKTOP = i13;
  return i12 | 0;
 }
 i2 = i1 - i6 | 0;
 HEAP32[i9 >> 2] = i2;
 i1 = HEAP32[i10 + 28 >> 2] | 0;
 if (i1) {
  HEAP32[i12 >> 2] = i1 + (i6 + -1);
  i12 = i3;
  STACKTOP = i13;
  return i12 | 0;
 }
 i1 = _FT_Stream_Seek(i11, i6 + -1 + (HEAP32[i10 + 16 >> 2] | 0) | 0) | 0;
 if (i1) {
  i12 = i1;
  STACKTOP = i13;
  return i12 | 0;
 }
 i12 = _FT_Stream_ExtractFrame(i11, i2, i12) | 0;
 STACKTOP = i13;
 return i12 | 0;
}

function __Z15FindClosingCharRK6Stringi(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = HEAP32[i1 >> 2] | 0;
 if ((i5 | 0) > 0) {
  i3 = i5;
  i1 = i10;
  do {
   i4 = i3;
   i3 = i3 + -1 | 0;
   i2 = HEAPU8[i1 >> 0] | 0;
   do if (i2 & 128) {
    if ((i2 & 224 | 0) == 192) {
     i1 = i1 + 2 | 0;
     break;
    }
    if ((i2 & 240 | 0) == 224) {
     i1 = i1 + 3 | 0;
     break;
    }
    if ((i2 & 248 | 0) == 240) {
     i1 = i1 + 4 | 0;
     break;
    }
    if ((i2 & 252 | 0) == 248) {
     i1 = i1 + 5 | 0;
     break;
    } else {
     i1 = i1 + 6 | 0;
     break;
    }
   } else i1 = i1 + 1 | 0; while (0);
  } while ((i4 | 0) > 1);
 } else i1 = i10;
 i8 = (__Z7ToUtf32PKh(i1) | 0) << 24 >> 24;
 switch (i8 | 0) {
 case 40:
  {
   i9 = 41;
   break;
  }
 case 91:
  {
   i9 = 93;
   break;
  }
 case 123:
  {
   i9 = 125;
   break;
  }
 case 60:
  {
   i9 = 62;
   break;
  }
 default:
  i9 = i8;
 }
 i7 = 0;
 while (1) {
  if ((i5 | 0) > 0) {
   i3 = i5;
   i1 = i10;
   do {
    i4 = i3;
    i3 = i3 + -1 | 0;
    i2 = HEAPU8[i1 >> 0] | 0;
    do if (i2 & 128) {
     if ((i2 & 224 | 0) == 192) {
      i1 = i1 + 2 | 0;
      break;
     }
     if ((i2 & 240 | 0) == 224) {
      i1 = i1 + 3 | 0;
      break;
     }
     if ((i2 & 248 | 0) == 240) {
      i1 = i1 + 4 | 0;
      break;
     }
     if ((i2 & 252 | 0) == 248) {
      i1 = i1 + 5 | 0;
      break;
     } else {
      i1 = i1 + 6 | 0;
      break;
     }
    } else i1 = i1 + 1 | 0; while (0);
   } while ((i4 | 0) > 1);
  } else i1 = i10;
  if (!(__Z7ToUtf32PKh(i1) | 0)) {
   i1 = -1;
   i2 = 63;
   break;
  }
  i1 = i5 + 1 | 0;
  i6 = (i5 | 0) > -1;
  if (i6) {
   i4 = i1;
   i2 = i10;
   do {
    i5 = i4;
    i4 = i4 + -1 | 0;
    i3 = HEAPU8[i2 >> 0] | 0;
    do if (i3 & 128) {
     if ((i3 & 224 | 0) == 192) {
      i2 = i2 + 2 | 0;
      break;
     }
     if ((i3 & 240 | 0) == 224) {
      i2 = i2 + 3 | 0;
      break;
     }
     if ((i3 & 248 | 0) == 240) {
      i2 = i2 + 4 | 0;
      break;
     }
     if ((i3 & 252 | 0) == 248) {
      i2 = i2 + 5 | 0;
      break;
     } else {
      i2 = i2 + 6 | 0;
      break;
     }
    } else i2 = i2 + 1 | 0; while (0);
   } while ((i5 | 0) > 1);
  } else i2 = i10;
  if (((__Z7ToUtf32PKh(i2) | 0) << 24 >> 24 | 0) == (i9 | 0)) if ((i7 | 0) < 1) {
   i2 = 63;
   break;
  } else {
   i5 = i1;
   i7 = i7 + -1 | 0;
   continue;
  }
  if (i6) {
   i4 = i1;
   i2 = i10;
   do {
    i5 = i4;
    i4 = i4 + -1 | 0;
    i3 = HEAPU8[i2 >> 0] | 0;
    do if (i3 & 128) {
     if ((i3 & 224 | 0) == 192) {
      i2 = i2 + 2 | 0;
      break;
     }
     if ((i3 & 240 | 0) == 224) {
      i2 = i2 + 3 | 0;
      break;
     }
     if ((i3 & 248 | 0) == 240) {
      i2 = i2 + 4 | 0;
      break;
     }
     if ((i3 & 252 | 0) == 248) {
      i2 = i2 + 5 | 0;
      break;
     } else {
      i2 = i2 + 6 | 0;
      break;
     }
    } else i2 = i2 + 1 | 0; while (0);
   } while ((i5 | 0) > 1);
  } else i2 = i10;
  i5 = i1;
  i7 = (((__Z7ToUtf32PKh(i2) | 0) << 24 >> 24 | 0) == (i8 | 0) & 1) + i7 | 0;
 }
 if ((i2 | 0) == 63) return i1 | 0;
 return 0;
}

function _tt_cmap14_char_variants(i16, i2, i15) {
 i16 = i16 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = HEAP32[i16 + 24 >> 2] | 0;
 i4 = HEAP32[i16 + 16 >> 2] | 0;
 i1 = HEAP32[i16 + 28 >> 2] | 0;
 HEAP32[i17 >> 2] = 0;
 do if (i1 >>> 0 < (i3 + 1 | 0) >>> 0) {
  HEAP32[i16 + 36 >> 2] = i2;
  i1 = _ft_mem_realloc(i2, 4, i1, i3 + 1 | 0, HEAP32[i16 + 32 >> 2] | 0, i17) | 0;
  HEAP32[i16 + 32 >> 2] = i1;
  if (!(HEAP32[i17 >> 2] | 0)) {
   HEAP32[i16 + 28 >> 2] = i3 + 1;
   i12 = i1;
   break;
  }
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 } else i12 = HEAP32[i16 + 32 >> 2] | 0; while (0);
 if (!i3) i1 = i12; else {
  i11 = i4 + 10 | 0;
  i1 = i12;
  do {
   i9 = (HEAPU8[i11 + 1 >> 0] | 0) << 8 | (HEAPU8[i11 >> 0] | 0) << 16 | (HEAPU8[i11 + 2 >> 0] | 0);
   i6 = (HEAPU8[i11 + 4 >> 0] | 0) << 16 | (HEAPU8[i11 + 3 >> 0] | 0) << 24 | (HEAPU8[i11 + 5 >> 0] | 0) << 8 | (HEAPU8[i11 + 6 >> 0] | 0);
   i10 = (HEAPU8[i11 + 8 >> 0] | 0) << 16 | (HEAPU8[i11 + 7 >> 0] | 0) << 24 | (HEAPU8[i11 + 9 >> 0] | 0) << 8 | (HEAPU8[i11 + 10 >> 0] | 0);
   i11 = i11 + 11 | 0;
   L13 : do if (!i6) i7 = 14; else {
    i7 = HEAP32[i16 + 16 >> 2] | 0;
    i2 = (HEAPU8[i7 + (i6 + 1) >> 0] | 0) << 16 | (HEAPU8[i7 + i6 >> 0] | 0) << 24 | (HEAPU8[i7 + (i6 + 2) >> 0] | 0) << 8 | (HEAPU8[i7 + (i6 + 3) >> 0] | 0);
    i5 = 0;
    while (1) {
     while (1) {
      if (i5 >>> 0 >= i2 >>> 0) {
       i7 = 14;
       break L13;
      }
      i8 = (i2 + i5 | 0) >>> 1;
      i4 = (HEAPU8[i7 + (i6 + 5 + (i8 << 2)) >> 0] | 0) << 8 | (HEAPU8[i7 + (i6 + 4 + (i8 << 2)) >> 0] | 0) << 16 | (HEAPU8[i7 + (i6 + 6 + (i8 << 2)) >> 0] | 0);
      if (i4 >>> 0 > i15 >>> 0) i2 = i8; else break;
     }
     if (((HEAPU8[i7 + (i6 + 7 + (i8 << 2)) >> 0] | 0) + i4 | 0) >>> 0 < i15 >>> 0) i5 = i8 + 1 | 0; else {
      i7 = 23;
      break;
     }
    }
   } while (0);
   L21 : do if ((i7 | 0) == 14) {
    i7 = 0;
    if ((i10 | 0) != 0 ? (i13 = HEAP32[i16 + 16 >> 2] | 0, i14 = (HEAPU8[i13 + (i10 + 1) >> 0] | 0) << 16 | (HEAPU8[i13 + i10 >> 0] | 0) << 24 | (HEAPU8[i13 + (i10 + 2) >> 0] | 0) << 8 | (HEAPU8[i13 + (i10 + 3) >> 0] | 0), (i14 | 0) != 0) : 0) {
     i6 = i14;
     i2 = 0;
     L25 : while (1) {
      while (1) {
       i5 = (i2 + i6 | 0) >>> 1;
       i4 = (HEAPU8[i13 + (i10 + 5 + (i5 * 5 | 0)) >> 0] | 0) << 8 | (HEAPU8[i13 + (i10 + 4 + (i5 * 5 | 0)) >> 0] | 0) << 16 | (HEAPU8[i13 + (i10 + 6 + (i5 * 5 | 0)) >> 0] | 0);
       if (i4 >>> 0 > i15 >>> 0) break;
       if (i4 >>> 0 >= i15 >>> 0) break L25;
       i2 = i5 + 1 | 0;
       if (i2 >>> 0 >= i6 >>> 0) break L21;
      }
      if (i2 >>> 0 < i5 >>> 0) i6 = i5; else break L21;
     }
     if ((HEAPU8[i13 + (i10 + 7 + (i5 * 5 | 0)) >> 0] | 0) << 8 | (HEAPU8[i13 + (i10 + 8 + (i5 * 5 | 0)) >> 0] | 0)) i7 = 23;
    }
   } while (0);
   if ((i7 | 0) == 23) {
    HEAP32[i1 >> 2] = i9;
    i1 = i1 + 4 | 0;
   }
   i3 = i3 + -1 | 0;
  } while ((i3 | 0) != 0);
 }
 HEAP32[i1 >> 2] = 0;
 i16 = i12;
 STACKTOP = i17;
 return i16 | 0;
}

function _FT_Stream_ReadFields(i8, i1, i6) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 if (!((i8 | 0) != 0 & (i1 | 0) != 0)) {
  i8 = 6;
  return i8 | 0;
 }
 i7 = 0;
 L4 : while (1) {
  i2 = HEAP32[i8 + 32 >> 2] | 0;
  L6 : while (1) {
   i5 = HEAP8[i1 >> 0] | 0;
   switch (i5 & 255 | 0) {
   case 4:
    break L6;
   case 25:
   case 24:
    {
     i3 = HEAPU8[i1 + 1 >> 0] | 0;
     i4 = i2 + i3 | 0;
     if (i4 >>> 0 > (HEAP32[i8 + 36 >> 2] | 0) >>> 0) {
      i2 = 85;
      i1 = i7;
      break L4;
     }
     if (i5 << 24 >> 24 == 24) {
      _memcpy(i6 + (HEAPU16[i1 + 2 >> 1] | 0) | 0, i2 | 0, i3 | 0) | 0;
      i2 = i4;
     } else i2 = i4;
     break;
    }
   case 9:
   case 8:
    {
     i4 = i2 + 1 | 0;
     i3 = 24;
     i2 = HEAPU8[i2 >> 0] | 0;
     i9 = 17;
     break;
    }
   case 12:
   case 13:
    {
     i4 = i2 + 2 | 0;
     i3 = 16;
     i2 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
     i9 = 17;
     break;
    }
   case 14:
   case 15:
    {
     i4 = i2 + 2 | 0;
     i3 = 16;
     i2 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0);
     i9 = 17;
     break;
    }
   case 16:
   case 17:
    {
     i4 = i2 + 4 | 0;
     i3 = 0;
     i2 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
     i9 = 17;
     break;
    }
   case 18:
   case 19:
    {
     i4 = i2 + 4 | 0;
     i3 = 0;
     i2 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 3 >> 0] | 0) << 24 | (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0);
     i9 = 17;
     break;
    }
   case 20:
   case 21:
    {
     i4 = i2 + 3 | 0;
     i3 = 8;
     i2 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
     i9 = 17;
     break;
    }
   case 22:
   case 23:
    {
     i4 = i2 + 3 | 0;
     i3 = 8;
     i2 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0);
     i9 = 17;
     break;
    }
   default:
    {
     i1 = i7;
     i9 = 16;
     break L4;
    }
   }
   L19 : do if ((i9 | 0) == 17) {
    i9 = 0;
    i3 = (i5 & 1) == 0 ? i2 : i2 << i3 >> i3;
    i2 = i6 + (HEAPU16[i1 + 2 >> 1] | 0) | 0;
    switch (HEAPU8[i1 + 1 >> 0] | 0 | 0) {
    case 1:
     {
      HEAP8[i2 >> 0] = i3;
      i2 = i4;
      break L19;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i3;
      i2 = i4;
      break L19;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i3;
      i2 = i4;
      break L19;
     }
    default:
     {
      HEAP32[i2 >> 2] = i3;
      i2 = i4;
      break L19;
     }
    }
   } while (0);
   i1 = i1 + 4 | 0;
  }
  i2 = _FT_Stream_EnterFrame(i8, HEAPU16[i1 + 2 >> 1] | 0) | 0;
  if (!i2) {
   i1 = i1 + 4 | 0;
   i7 = 1;
  } else {
   i1 = i7;
   break;
  }
 }
 if ((i9 | 0) == 16) {
  HEAP32[i8 + 32 >> 2] = i2;
  i2 = 0;
 }
 if (!(i1 << 24 >> 24)) {
  i8 = i2;
  return i8 | 0;
 }
 if (HEAP32[i8 + 20 >> 2] | 0) {
  _ft_mem_free(HEAP32[i8 + 28 >> 2] | 0, HEAP32[i8 >> 2] | 0);
  HEAP32[i8 >> 2] = 0;
 }
 HEAP32[i8 + 32 >> 2] = 0;
 HEAP32[i8 + 36 >> 2] = 0;
 i8 = i2;
 return i8 | 0;
}

function _open_face_PS_from_sfnt_stream(i13, i15, i12, i1, i2, i11) {
 i13 = i13 | 0;
 i15 = i15 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0, i16 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = HEAP32[i13 >> 2] | 0;
 i10 = _FT_Stream_Pos(i15) | 0;
 i2 = _FT_Stream_ReadULong(i15, i14 + 4 | 0) | 0;
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 L1 : do if (!i1) if ((i2 | 0) == 1954115633) {
  i8 = _FT_Stream_ReadUShort(i15, i14 + 4 | 0) | 0;
  i1 = HEAP32[i14 + 4 >> 2] | 0;
  if (!i1) {
   i1 = _FT_Stream_Skip(i15, 6) | 0;
   HEAP32[i14 + 4 >> 2] = i1;
   if (!i1) if (i8 << 16 >> 16) {
    i3 = 0;
    i7 = 0;
    i2 = -1;
    L7 : while (1) {
     i6 = _FT_Stream_ReadULong(i15, i14 + 4 | 0) | 0;
     i1 = HEAP32[i14 + 4 >> 2] | 0;
     if (i1) {
      i16 = 16;
      break L1;
     }
     i1 = _FT_Stream_Skip(i15, 4) | 0;
     HEAP32[i14 + 4 >> 2] = i1;
     if (i1) {
      i16 = 16;
      break L1;
     }
     i5 = _FT_Stream_ReadULong(i15, i14 + 4 | 0) | 0;
     i1 = HEAP32[i14 + 4 >> 2] | 0;
     if (i1) {
      i16 = 16;
      break L1;
     }
     i4 = _FT_Stream_ReadULong(i15, i14 + 4 | 0) | 0;
     i1 = HEAP32[i14 + 4 >> 2] | 0;
     if (i1) {
      i16 = 16;
      break L1;
     }
     L13 : do if ((i6 | 0) < 1415139377) {
      switch (i6 | 0) {
      case 1128875040:
       break;
      default:
       {
        i1 = i5;
        break L13;
       }
      }
      if ((i12 | 0) < 0) {
       i1 = i5 + 22 | 0;
       i4 = i4 + -22 | 0;
       i3 = 1;
       break L7;
      } else {
       i3 = 1;
       i1 = i5 + 22 | 0;
       i4 = i4 + -22 | 0;
       i2 = i2 + 1 | 0;
      }
     } else {
      switch (i6 | 0) {
      case 1415139377:
       break;
      default:
       {
        i1 = i5;
        break L13;
       }
      }
      if ((i12 | 0) < 0) {
       i1 = i5 + 24 | 0;
       i4 = i4 + -24 | 0;
       i3 = 0;
       break L7;
      } else {
       i3 = 0;
       i1 = i5 + 24 | 0;
       i4 = i4 + -24 | 0;
       i2 = i2 + 1 | 0;
      }
     } while (0);
     i7 = i7 + 1 | 0;
     if ((i12 | 0) > -1 & (i2 | 0) == (i12 | 0)) break;
     if ((i7 | 0) >= (i8 & 65535 | 0)) {
      i1 = 142;
      i16 = 16;
      break L1;
     }
    }
    HEAP32[i14 >> 2] = 0;
    if (_FT_Stream_Seek(i15, i1 + i10 | 0) | 0) {
     i16 = 0;
     STACKTOP = i14;
     return i16 | 0;
    }
    i2 = _ft_mem_alloc(i9, i4, i14) | 0;
    i1 = HEAP32[i14 >> 2] | 0;
    if (!i1) {
     i1 = _FT_Stream_Read(i15, i2, i4) | 0;
     HEAP32[i14 >> 2] = i1;
     if (!i1) {
      i1 = _open_face_from_buffer(i13, i2, i4, (i12 | 0) < 0 ? i12 : 0, i3 << 24 >> 24 != 0 ? 322454 : 323218, i11) | 0;
      HEAP32[i14 >> 2] = i1;
     }
    }
   } else {
    i1 = 142;
    i16 = 16;
   } else i16 = 16;
  } else i16 = 16;
 } else {
  i1 = 2;
  i16 = 16;
 } else i16 = 16; while (0);
 if ((i16 | 0) == 16) HEAP32[i14 >> 2] = i1;
 if ((i1 | 0) == 2) {
  i16 = _FT_Stream_Seek(i15, i10) | 0;
  STACKTOP = i14;
  return ((i16 | 0) == 0 ? HEAP32[i14 >> 2] | 0 : i16) | 0;
 } else {
  i16 = i1;
  STACKTOP = i14;
  return i16 | 0;
 }
 return 0;
}

function _tt_cmap14_char_var_index(i1, i7, i10, i5) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAPU8[i8 + 7 >> 0] | 0) << 16 | (HEAPU8[i8 + 6 >> 0] | 0) << 24 | (HEAPU8[i8 + 8 >> 0] | 0) << 8 | (HEAPU8[i8 + 9 >> 0] | 0);
 if (!i1) {
  i10 = 0;
  return i10 | 0;
 } else i2 = 0;
 L3 : while (1) {
  while (1) {
   i4 = (i2 + i1 | 0) >>> 1;
   i3 = (HEAPU8[i8 + ((i4 * 11 | 0) + 11) >> 0] | 0) << 8 | (HEAPU8[i8 + ((i4 * 11 | 0) + 10) >> 0] | 0) << 16 | (HEAPU8[i8 + ((i4 * 11 | 0) + 12) >> 0] | 0);
   if (i3 >>> 0 > i5 >>> 0) break;
   if (i3 >>> 0 >= i5 >>> 0) {
    i6 = i4 * 11 | 0;
    i1 = 7;
    break L3;
   }
   i2 = i4 + 1 | 0;
   if (i2 >>> 0 >= i1 >>> 0) {
    i9 = 0;
    i1 = 24;
    break L3;
   }
  }
  if (i2 >>> 0 < i4 >>> 0) i1 = i4; else {
   i9 = 0;
   i1 = 24;
   break;
  }
 }
 if ((i1 | 0) == 7) {
  if (!(i8 + (i6 + 13) | 0)) {
   i10 = 0;
   return i10 | 0;
  }
  i5 = (HEAPU8[i8 + (i6 + 14) >> 0] | 0) << 16 | (HEAPU8[i8 + (i6 + 13) >> 0] | 0) << 24 | (HEAPU8[i8 + (i6 + 15) >> 0] | 0) << 8 | (HEAPU8[i8 + (i6 + 16) >> 0] | 0);
  i6 = (HEAPU8[i8 + (i6 + 18) >> 0] | 0) << 16 | (HEAPU8[i8 + (i6 + 17) >> 0] | 0) << 24 | (HEAPU8[i8 + (i6 + 19) >> 0] | 0) << 8 | (HEAPU8[i8 + (i6 + 20) >> 0] | 0);
  L17 : do if (i5) {
   i1 = (HEAPU8[i8 + (i5 + 1) >> 0] | 0) << 16 | (HEAPU8[i8 + i5 >> 0] | 0) << 24 | (HEAPU8[i8 + (i5 + 2) >> 0] | 0) << 8 | (HEAPU8[i8 + (i5 + 3) >> 0] | 0);
   i3 = 0;
   while (1) {
    while (1) {
     if (i3 >>> 0 >= i1 >>> 0) break L17;
     i4 = (i1 + i3 | 0) >>> 1;
     i2 = (HEAPU8[i8 + (i5 + 5 + (i4 << 2)) >> 0] | 0) << 8 | (HEAPU8[i8 + (i5 + 4 + (i4 << 2)) >> 0] | 0) << 16 | (HEAPU8[i8 + (i5 + 6 + (i4 << 2)) >> 0] | 0);
     if (i2 >>> 0 > i10 >>> 0) i1 = i4; else break;
    }
    if (((HEAPU8[i8 + (i5 + 7 + (i4 << 2)) >> 0] | 0) + i2 | 0) >>> 0 < i10 >>> 0) i3 = i4 + 1 | 0; else break;
   }
   i10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 + 12 >> 2] | 0) + 12 >> 2] & 255](i7, i10) | 0;
   return i10 | 0;
  } while (0);
  if (!i6) {
   i10 = 0;
   return i10 | 0;
  }
  i1 = (HEAPU8[i8 + (i6 + 1) >> 0] | 0) << 16 | (HEAPU8[i8 + i6 >> 0] | 0) << 24 | (HEAPU8[i8 + (i6 + 2) >> 0] | 0) << 8 | (HEAPU8[i8 + (i6 + 3) >> 0] | 0);
  if (!i1) {
   i10 = 0;
   return i10 | 0;
  }
  i2 = 0;
  L34 : while (1) {
   while (1) {
    i4 = (i2 + i1 | 0) >>> 1;
    i3 = (HEAPU8[i8 + (i6 + 5 + (i4 * 5 | 0)) >> 0] | 0) << 8 | (HEAPU8[i8 + (i6 + 4 + (i4 * 5 | 0)) >> 0] | 0) << 16 | (HEAPU8[i8 + (i6 + 6 + (i4 * 5 | 0)) >> 0] | 0);
    if (i3 >>> 0 > i10 >>> 0) break;
    if (i3 >>> 0 >= i10 >>> 0) {
     i1 = 23;
     break L34;
    }
    i2 = i4 + 1 | 0;
    if (i2 >>> 0 >= i1 >>> 0) {
     i9 = 0;
     i1 = 24;
     break L34;
    }
   }
   if (i2 >>> 0 < i4 >>> 0) i1 = i4; else {
    i9 = 0;
    i1 = 24;
    break;
   }
  }
  if ((i1 | 0) == 23) {
   i10 = (HEAPU8[i8 + (i6 + 7 + (i4 * 5 | 0)) >> 0] | 0) << 8 | (HEAPU8[i8 + (i6 + 8 + (i4 * 5 | 0)) >> 0] | 0);
   return i10 | 0;
  } else if ((i1 | 0) == 24) return i9 | 0;
 } else if ((i1 | 0) == 24) return i9 | 0;
 return 0;
}

function _ps_parser_to_bytes(i10, i8, i6, i9, i5) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i2 = HEAP32[i10 + 8 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i2 >>> 0) {
  i4 = i1;
  while (1) {
   switch (HEAP8[i4 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    break;
   case 37:
    {
     i3 = 37;
     i1 = i4;
     L5 : while (1) {
      switch (i3 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i2 >>> 0) break;
      i3 = HEAP8[i1 >> 0] | 0;
     }
     break;
    }
   default:
    break L1;
   }
   i4 = i1 + 1 | 0;
   i1 = i4;
   if (i4 >>> 0 >= i2 >>> 0) break L1;
  }
 } while (0);
 HEAP32[i10 >> 2] = i1;
 i7 = i1;
 if (i7 >>> 0 >= i2 >>> 0) {
  i10 = 0;
  return i10 | 0;
 }
 if (!(i5 << 24 >> 24)) {
  i5 = i2 - i1 | 0;
  i5 = i6 << 1 >>> 0 > i5 >>> 0 ? i5 : i6 << 1;
  if (i5) {
   i3 = 1;
   i2 = 0;
   i1 = 0;
   L18 : do {
    i4 = HEAP8[i7 + i2 >> 0] | 0;
    switch (i4 << 24 >> 24) {
    case 0:
    case 9:
    case 10:
    case 12:
    case 13:
    case 32:
     break;
    default:
     {
      if (i4 << 24 >> 24 < 0) break L18;
      i4 = HEAP8[326563 + (i4 & 127) >> 0] | 0;
      if ((i4 & 255) > 15) break L18;
      i3 = i4 << 24 >> 24 | i3 << 4;
      if (i3 & 256) {
       HEAP8[i8 + i1 >> 0] = i3;
       i3 = 1;
       i1 = i1 + 1 | 0;
      }
     }
    }
    i2 = i2 + 1 | 0;
   } while (i2 >>> 0 < i5 >>> 0);
   if ((i3 | 0) != 1) {
    HEAP8[i8 + i1 >> 0] = i3 << 4;
    i1 = i1 + 1 | 0;
   }
  } else {
   i2 = 0;
   i1 = 0;
  }
  HEAP32[i9 >> 2] = i1;
  i1 = i7 + i2 | 0;
 } else {
  if ((HEAP8[i7 >> 0] | 0) != 60) {
   i10 = 3;
   return i10 | 0;
  }
  do if ((i7 + 1 | 0) >>> 0 < i2 >>> 0) {
   i5 = i6 << 1 >>> 0 > (i2 - (i7 + 1) | 0) >>> 0 ? i2 - (i7 + 1) | 0 : i6 << 1;
   if (!i5) {
    HEAP32[i9 >> 2] = 0;
    i1 = i7 + 1 | 0;
    break;
   } else {
    i2 = 1;
    i4 = 0;
    i1 = 0;
   }
   L37 : while (1) {
    i6 = i4 + 1 | 0;
    i3 = HEAP8[i7 + i6 >> 0] | 0;
    switch (i3 << 24 >> 24) {
    case 0:
    case 9:
    case 10:
    case 12:
    case 13:
    case 32:
     break;
    default:
     {
      if (i3 << 24 >> 24 < 0) {
       i3 = i4;
       break L37;
      }
      i3 = HEAP8[326563 + (i3 & 127) >> 0] | 0;
      if ((i3 & 255) > 15) {
       i3 = i4;
       break L37;
      }
      i2 = i3 << 24 >> 24 | i2 << 4;
      if (i2 & 256) {
       HEAP8[i8 + i1 >> 0] = i2;
       i2 = 1;
       i1 = i1 + 1 | 0;
      }
     }
    }
    if (i6 >>> 0 < i5 >>> 0) i4 = i6; else {
     i3 = i6;
     break;
    }
   }
   if ((i2 | 0) != 1) {
    HEAP8[i8 + i1 >> 0] = i2 << 4;
    i1 = i1 + 1 | 0;
   }
   HEAP32[i9 >> 2] = i1;
   i1 = i7 + (i3 + 1) | 0;
   i2 = HEAP32[i10 + 8 >> 2] | 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   i1 = i7 + 1 | 0;
  } while (0);
  if (i1 >>> 0 < i2 >>> 0 ? (HEAP8[i1 >> 0] | 0) != 62 : 0) {
   i10 = 3;
   return i10 | 0;
  }
  i1 = i1 + 1 | 0;
 }
 HEAP32[i10 >> 2] = i1;
 i10 = 0;
 return i10 | 0;
}

function __ZN4math19AABBTransformAsAABBIKNS_8float4x4EEEvRNS_4AABBERT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, i9 = 0, f10 = f0, i11 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 __ZNK4math6float3plERKS0_(i3 + 60 | 0, i1, i1 + 12 | 0);
 __ZNK4math6float3mlEf(i3 + 72 | 0, i3 + 60 | 0, Math_fround(.5));
 __ZNK4math6float3miERKS0_(i3 + 48 | 0, i3 + 72 | 0, i1);
 __ZNK4math8float4x46MulPosERKNS_6float3E(i3 + 36 | 0, i2, i3 + 72 | 0);
 f10 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 0) | 0) >> 2]);
 f10 = Math_fround(f10 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 0)));
 i11 = f10 >= Math_fround(0.0);
 f8 = Math_fround(-f10);
 f5 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 0) | 0) + 4 >> 2]);
 f5 = Math_fround(f5 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 1)));
 i9 = f5 >= Math_fround(0.0);
 f7 = Math_fround(-f5);
 f7 = Math_fround((i11 ? f10 : f8) + (i9 ? f5 : f7));
 f5 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 0) | 0) + 8 >> 2]);
 f5 = Math_fround(f5 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 2)));
 i9 = f5 >= Math_fround(0.0);
 f8 = Math_fround(-f5);
 f8 = Math_fround(f7 + (i9 ? f5 : f8));
 f5 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 1) | 0) >> 2]);
 f5 = Math_fround(f5 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 0)));
 i9 = f5 >= Math_fround(0.0);
 f7 = Math_fround(-f5);
 f10 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 1) | 0) + 4 >> 2]);
 f10 = Math_fround(f10 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 1)));
 i11 = f10 >= Math_fround(0.0);
 f4 = Math_fround(-f10);
 f4 = Math_fround((i9 ? f5 : f7) + (i11 ? f10 : f4));
 f10 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 1) | 0) + 8 >> 2]);
 f10 = Math_fround(f10 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 2)));
 i11 = f10 >= Math_fround(0.0);
 f7 = Math_fround(-f10);
 f7 = Math_fround(f4 + (i11 ? f10 : f7));
 f10 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 2) | 0) >> 2]);
 f10 = Math_fround(f10 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 0)));
 i11 = f10 >= Math_fround(0.0);
 f4 = Math_fround(-f10);
 f5 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 2) | 0) + 4 >> 2]);
 f5 = Math_fround(f5 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 1)));
 i9 = f5 >= Math_fround(0.0);
 f6 = Math_fround(-f5);
 f6 = Math_fround((i11 ? f10 : f4) + (i9 ? f5 : f6));
 f5 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i2, 2) | 0) + 8 >> 2]);
 f5 = Math_fround(f5 * Math_fround(__ZNK4math6float32AtEi(i3 + 48 | 0, 2)));
 i2 = f5 >= Math_fround(0.0);
 f4 = Math_fround(-f5);
 __ZN4math6float3C2Efff(i3 + 24 | 0, f8, f7, Math_fround(f6 + (i2 ? f5 : f4)));
 __ZNK4math6float3miERKS0_(i3 + 12 | 0, i3 + 36 | 0, i3 + 24 | 0);
 HEAP32[i1 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 12 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 12 + 8 >> 2];
 __ZNK4math6float3plERKS0_(i3, i3 + 36 | 0, i3 + 24 | 0);
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 12 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 12 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 STACKTOP = i3;
 return;
}

function _hash_insert(i7, i8, i13, i12) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = HEAP32[i13 + 12 >> 2] | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 if (!(i6 << 24 >> 24)) i1 = 0; else {
  i2 = i6;
  i3 = i7;
  i1 = 0;
  do {
   i3 = i3 + 1 | 0;
   i1 = (i1 * 31 | 0) + (i2 << 24 >> 24) | 0;
   i2 = HEAP8[i3 >> 0] | 0;
  } while (i2 << 24 >> 24 != 0);
 }
 i4 = HEAP32[i13 + 4 >> 2] | 0;
 i2 = i5 + (((i1 >>> 0) % (i4 >>> 0) | 0) << 2) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L5 : do if (i1) {
  while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   if ((HEAP8[i3 >> 0] | 0) == i6 << 24 >> 24 ? (_strcmp(i3, i7) | 0) == 0 : 0) break;
   i2 = i2 + -4 | 0;
   i2 = i2 >>> 0 < i5 >>> 0 ? i5 + (i4 + -1 << 2) | 0 : i2;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) break L5;
  }
  HEAP32[i14 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = i8;
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 } while (0);
 HEAP32[i14 >> 2] = 0;
 i1 = _ft_mem_alloc(i12, 8, i14) | 0;
 if (HEAP32[i14 >> 2] | 0) {
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 HEAP32[i2 >> 2] = i1;
 HEAP32[i1 >> 2] = i7;
 HEAP32[i1 + 4 >> 2] = i8;
 i1 = HEAP32[i13 + 8 >> 2] | 0;
 do if ((i1 | 0) >= (HEAP32[i13 >> 2] | 0)) {
  i10 = HEAP32[i13 + 12 >> 2] | 0;
  i11 = HEAP32[i13 + 4 >> 2] | 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i13 + 4 >> 2] = i11 << 1;
  HEAP32[i13 >> 2] = (i11 << 1 | 0) / 3 | 0;
  HEAP32[i13 + 12 >> 2] = _ft_mem_realloc(i12, 4, 0, i11 << 1, 0, i14 + 4 | 0) | 0;
  i1 = HEAP32[i14 + 4 >> 2] | 0;
  if (i1) {
   HEAP32[i14 >> 2] = i1;
   i13 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  if ((i11 | 0) > 0) {
   i8 = i10;
   i9 = 0;
   while (1) {
    i7 = HEAP32[i8 >> 2] | 0;
    if (i7) {
     i4 = HEAP32[i7 >> 2] | 0;
     i5 = HEAP32[i13 + 12 >> 2] | 0;
     i6 = HEAP8[i4 >> 0] | 0;
     if (!(i6 << 24 >> 24)) i1 = 0; else {
      i2 = i6;
      i3 = i4;
      i1 = 0;
      do {
       i3 = i3 + 1 | 0;
       i1 = (i1 * 31 | 0) + (i2 << 24 >> 24) | 0;
       i2 = HEAP8[i3 >> 0] | 0;
      } while (i2 << 24 >> 24 != 0);
     }
     i3 = HEAP32[i13 + 4 >> 2] | 0;
     i1 = i5 + (((i1 >>> 0) % (i3 >>> 0) | 0) << 2) | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     L33 : do if (i2) do {
      i2 = HEAP32[i2 >> 2] | 0;
      if ((HEAP8[i2 >> 0] | 0) == i6 << 24 >> 24 ? (_strcmp(i2, i4) | 0) == 0 : 0) break L33;
      i1 = i1 + -4 | 0;
      i1 = i1 >>> 0 < i5 >>> 0 ? i5 + (i3 + -1 << 2) | 0 : i1;
      i2 = HEAP32[i1 >> 2] | 0;
     } while ((i2 | 0) != 0); while (0);
     HEAP32[i1 >> 2] = i7;
    }
    i9 = i9 + 1 | 0;
    if ((i9 | 0) == (i11 | 0)) break; else i8 = i8 + 4 | 0;
   }
  }
  _ft_mem_free(i12, i10);
  i12 = HEAP32[i14 + 4 >> 2] | 0;
  HEAP32[i14 >> 2] = i12;
  if (!i12) {
   i1 = HEAP32[i13 + 8 >> 2] | 0;
   break;
  } else {
   i13 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 } while (0);
 HEAP32[i13 + 8 >> 2] = i1 + 1;
 i13 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _tt_face_get_name(i11, i8, i13) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = HEAP32[i11 + 100 >> 2] | 0;
 HEAP32[i14 >> 2] = 0;
 i5 = HEAP16[i11 + 344 >> 1] | 0;
 if (!(i5 << 16 >> 16)) {
  i12 = 0;
  HEAP32[i13 >> 2] = i12;
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i3 = -1;
 i1 = -1;
 i4 = -1;
 i6 = -1;
 i7 = 0;
 i2 = 0;
 i9 = HEAP32[i11 + 360 >> 2] | 0;
 while (1) {
  L6 : do if ((HEAP16[i9 + 6 >> 1] | 0) == i8 << 16 >> 16 ? (HEAP16[i9 + 8 >> 1] | 0) != 0 : 0) switch (HEAPU16[i9 >> 1] | 0) {
  case 2:
  case 0:
   {
    i4 = i7;
    break L6;
   }
  case 1:
   {
    if (!(HEAP16[i9 + 4 >> 1] | 0)) {
     i3 = i7;
     break L6;
    }
    i1 = (HEAP16[i9 + 2 >> 1] | 0) == 0 ? i7 : i1;
    break L6;
   }
  case 3:
   {
    if ((i6 | 0) != -1 ? (HEAP16[i9 + 4 >> 1] & 1023) != 9 : 0) break L6;
    switch (HEAPU16[i9 + 2 >> 1] | 0) {
    case 10:
    case 1:
    case 0:
     break;
    default:
     break L6;
    }
    i6 = i7;
    i2 = (HEAP16[i9 + 4 >> 1] & 1023) == 9 & 1;
    break L6;
   }
  default:
   break L6;
  } while (0);
  i7 = i7 + 1 | 0;
  if (i7 >>> 0 >= (i5 & 65535) >>> 0) break; else i9 = i9 + 20 | 0;
 }
 i1 = (i3 | 0) > -1 ? i3 : i1;
 L20 : do if ((i6 | 0) > -1 ? (i1 | 0) < 0 | i2 << 24 >> 24 != 0 : 0) {
  i1 = HEAP32[i11 + 360 >> 2] | 0;
  switch (HEAPU16[i1 + (i6 * 20 | 0) + 2 >> 1] | 0) {
  case 10:
  case 0:
  case 1:
   {
    i5 = 156;
    i4 = i1 + (i6 * 20 | 0) | 0;
    break L20;
   }
  default:
   i1 = 0;
  }
  HEAP32[i13 >> 2] = i1;
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 } else i10 = 17; while (0);
 do if ((i10 | 0) == 17) {
  if ((i1 | 0) > -1) {
   i5 = 157;
   i4 = (HEAP32[i11 + 360 >> 2] | 0) + (i1 * 20 | 0) | 0;
   break;
  }
  if ((i4 | 0) > -1) {
   i5 = 156;
   i4 = (HEAP32[i11 + 360 >> 2] | 0) + (i4 * 20 | 0) | 0;
   break;
  } else {
   i12 = 0;
   HEAP32[i13 >> 2] = i12;
   i13 = HEAP32[i14 >> 2] | 0;
   STACKTOP = i14;
   return i13 | 0;
  }
 } while (0);
 if (!i4) {
  i12 = 0;
  HEAP32[i13 >> 2] = i12;
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i3 = i4 + 16 | 0;
 do if (!(HEAP32[i3 >> 2] | 0)) {
  i1 = HEAP32[i11 + 364 >> 2] | 0;
  i2 = i4 + 8 | 0;
  HEAP32[i3 >> 2] = _ft_mem_realloc(i12, 1, 0, HEAPU16[i2 >> 1] | 0, 0, i14) | 0;
  if (((HEAP32[i14 >> 2] | 0) == 0 ? (i11 = _FT_Stream_Seek(i1, HEAP32[i4 + 12 >> 2] | 0) | 0, HEAP32[i14 >> 2] = i11, (i11 | 0) == 0) : 0) ? (i11 = _FT_Stream_Read(i1, HEAP32[i3 >> 2] | 0, HEAPU16[i2 >> 1] | 0) | 0, HEAP32[i14 >> 2] = i11, (i11 | 0) == 0) : 0) break;
  _ft_mem_free(i12, HEAP32[i3 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  HEAP16[i2 >> 1] = 0;
  i12 = 0;
  HEAP32[i13 >> 2] = i12;
  i13 = HEAP32[i14 >> 2] | 0;
  STACKTOP = i14;
  return i13 | 0;
 } while (0);
 i12 = FUNCTION_TABLE_iii[i5 & 255](i4, i12) | 0;
 HEAP32[i13 >> 2] = i12;
 i13 = HEAP32[i14 >> 2] | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _pfr_extra_item_load_bitmap_info(i4, i3, i12) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP32[i13 >> 2] = 0;
 if ((i4 + 5 | 0) >>> 0 <= i3 >>> 0) {
  i10 = HEAPU8[i4 + 3 >> 0] | 0;
  i11 = HEAP8[i4 + 4 >> 0] | 0;
  i2 = HEAP32[i12 + 92 >> 2] | 0;
  do if ((i2 + (i11 & 255) | 0) >>> 0 > (HEAP32[i12 + 96 >> 2] | 0) >>> 0) {
   HEAP32[i12 + 100 >> 2] = _ft_mem_realloc(i1, 36, i2, i2 + (i11 & 255) + 3 & -4, HEAP32[i12 + 100 >> 2] | 0, i13) | 0;
   i1 = HEAP32[i13 >> 2] | 0;
   if (!i1) {
    HEAP32[i12 + 96 >> 2] = i2 + (i11 & 255) + 3 & -4;
    break;
   } else {
    i12 = i1;
    STACKTOP = i13;
    return i12 | 0;
   }
  } while (0);
  if ((i4 + ((Math_imul((i10 & 1 | 8) + ((i10 & 2) >>> 1) + ((i10 & 4) >>> 2) + ((i10 & 8) >>> 3) + ((i10 & 16) >>> 4) | 0, i11 & 255) | 0) + 5) | 0) >>> 0 <= i3 >>> 0) {
   if (!(i11 << 24 >> 24)) {
    i2 = 0;
    i1 = HEAP32[i12 + 92 >> 2] | 0;
   } else {
    i1 = HEAP32[i12 + 92 >> 2] | 0;
    i7 = i4 + 5 | 0;
    i8 = 0;
    i9 = (HEAP32[i12 + 100 >> 2] | 0) + (i1 * 36 | 0) | 0;
    while (1) {
     if (!(i10 & 1)) {
      i4 = i7 + 1 | 0;
      i2 = 2;
      i3 = HEAPU8[i7 >> 0] | 0;
      i5 = 1;
     } else {
      i4 = i7 + 2 | 0;
      i2 = 3;
      i3 = (HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i7 + 1 >> 0] | 0);
      i5 = 2;
     }
     HEAP32[i9 >> 2] = i3;
     if (!(i10 & 2)) {
      i6 = i2;
      i2 = HEAPU8[i4 >> 0] | 0;
     } else {
      i6 = i5 + 2 | 0;
      i2 = (HEAPU8[i7 + i5 >> 0] | 0) << 8 | (HEAPU8[i7 + (i5 + 1) >> 0] | 0);
     }
     HEAP32[i9 + 4 >> 2] = i2;
     i3 = i6 + 1 | 0;
     HEAP32[i9 + 8 >> 2] = HEAPU8[i7 + i6 >> 0];
     i2 = HEAPU8[i7 + i3 >> 0] | 0;
     if (!(i10 & 4)) {
      i4 = HEAPU8[i7 + (i6 + 2) >> 0] | 0 | i2 << 8;
      i2 = i6;
     } else {
      i4 = (HEAPU8[i7 + (i6 + 2) >> 0] | 0) << 8 | i2 << 16 | (HEAPU8[i7 + (i6 + 3) >> 0] | 0);
      i2 = i3;
     }
     HEAP32[i9 + 20 >> 2] = i4;
     if (!(i10 & 8)) {
      i5 = i2 + 5 | 0;
      i2 = (HEAPU8[i7 + (i2 + 3) >> 0] | 0) << 8 | (HEAPU8[i7 + (i2 + 4) >> 0] | 0);
     } else {
      i5 = i2 + 6 | 0;
      i2 = (HEAPU8[i7 + (i2 + 4) >> 0] | 0) << 8 | (HEAPU8[i7 + (i2 + 3) >> 0] | 0) << 16 | (HEAPU8[i7 + (i2 + 5) >> 0] | 0);
     }
     i3 = i7 + i5 | 0;
     HEAP32[i9 + 24 >> 2] = i2;
     if (!(i10 & 16)) {
      i4 = i5 + 1 | 0;
      i2 = HEAPU8[i3 >> 0] | 0;
     } else {
      i4 = i5 + 2 | 0;
      i2 = (HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i7 + (i5 + 1) >> 0] | 0);
     }
     HEAP32[i9 + 28 >> 2] = i2;
     i8 = i8 + 1 | 0;
     if ((i8 | 0) == (i11 & 255 | 0)) break; else {
      i7 = i7 + i4 | 0;
      i9 = i9 + 36 | 0;
     }
    }
    i2 = HEAP32[i13 >> 2] | 0;
   }
   HEAP32[i12 + 92 >> 2] = i1 + (i11 & 255);
   i12 = i2;
   STACKTOP = i13;
   return i12 | 0;
  }
 }
 HEAP32[i13 >> 2] = 8;
 i12 = 8;
 STACKTOP = i13;
 return i12 | 0;
}

function _af_glyph_hints_align_weak_points(i1, i13) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0;
 i14 = HEAP32[i1 + 28 >> 2] | 0;
 i15 = HEAP32[i1 + 24 >> 2] | 0;
 i12 = HEAP32[i1 + 40 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 if (!i13) if ((i15 | 0) > 0) {
  i1 = i14;
  do {
   HEAP32[i1 + 24 >> 2] = HEAP32[i1 + 16 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i1 + 4 >> 2];
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 < (i14 + (i15 * 40 | 0) | 0) >>> 0);
  i10 = 64;
 } else i10 = 64; else if ((i15 | 0) > 0) {
  i1 = i14;
  do {
   HEAP32[i1 + 24 >> 2] = HEAP32[i1 + 20 >> 2];
   HEAP32[i1 + 28 >> 2] = HEAP32[i1 + 8 >> 2];
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 < (i14 + (i15 * 40 | 0) | 0) >>> 0);
  i10 = 128;
 } else i10 = 128;
 if ((i11 | 0) > 0) {
  i9 = i12;
  do {
   i2 = HEAP32[i9 >> 2] | 0;
   i8 = HEAP32[i2 + 36 >> 2] | 0;
   L12 : do if (i2 >>> 0 <= i8 >>> 0) {
    i1 = i2;
    while (1) {
     if ((HEAPU16[i1 >> 1] | 0) & i10) break;
     i1 = i1 + 40 | 0;
     if (i1 >>> 0 > i8 >>> 0) break L12;
    }
    i4 = i1;
    L17 : while (1) {
     i5 = i4 >>> 0 < i8 >>> 0;
     if (i5) {
      i3 = i4 + 40 | 0;
      if ((HEAPU16[i4 + 40 >> 1] | 0) & i10) {
       i4 = i3;
       continue;
      }
     } else i3 = i4 + 40 | 0;
     if (i3 >>> 0 > i8 >>> 0) break; else {
      i6 = i4;
      i7 = i3;
     }
     while (1) {
      if ((HEAPU16[i6 + 40 >> 1] | 0) & i10) {
       i5 = i7;
       break;
      }
      i6 = i7 + 40 | 0;
      if (i6 >>> 0 > i8 >>> 0) break L17; else {
       i16 = i7;
       i7 = i6;
       i6 = i16;
      }
     }
     _af_iup_interp(i3, i6, i4, i5);
     i4 = i5;
    }
    if ((i4 | 0) != (i1 | 0)) {
     if (i5) _af_iup_interp(i3, i8, i4, i1);
     if (i1 >>> 0 <= i14 >>> 0) break;
     _af_iup_interp(i2, i1 + -40 | 0, i4, i1);
     break;
    }
    i3 = HEAP32[i1 + 24 >> 2] | 0;
    i4 = HEAP32[i1 + 28 >> 2] | 0;
    if ((i3 | 0) != (i4 | 0)) {
     if (i2 >>> 0 < i1 >>> 0) do {
      HEAP32[i2 + 24 >> 2] = (HEAP32[i2 + 28 >> 2] | 0) + (i3 - i4);
      i2 = i2 + 40 | 0;
     } while (i2 >>> 0 < i1 >>> 0);
     if ((i1 + 40 | 0) >>> 0 <= i8 >>> 0) {
      i2 = i1 + 40 | 0;
      while (1) {
       HEAP32[i1 + 64 >> 2] = (HEAP32[i1 + 68 >> 2] | 0) + (i3 - i4);
       i1 = i2 + 40 | 0;
       if (i1 >>> 0 > i8 >>> 0) break; else {
        i16 = i2;
        i2 = i1;
        i1 = i16;
       }
      }
     }
    }
   } while (0);
   i9 = i9 + 4 | 0;
  } while (i9 >>> 0 < (i12 + (i11 << 2) | 0) >>> 0);
 }
 if (!i13) {
  if ((i15 | 0) > 0) i1 = i14; else return;
  do {
   HEAP32[i1 + 16 >> 2] = HEAP32[i1 + 24 >> 2];
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 < (i14 + (i15 * 40 | 0) | 0) >>> 0);
  return;
 } else {
  if ((i15 | 0) > 0) i1 = i14; else return;
  do {
   HEAP32[i1 + 20 >> 2] = HEAP32[i1 + 24 >> 2];
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 < (i14 + (i15 * 40 | 0) | 0) >>> 0);
  return;
 }
}

function _TT_Load_Composite_Glyph(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = HEAP32[i20 + 204 >> 2] | 0;
 i18 = HEAP32[i20 + 12 >> 2] | 0;
 i16 = 0;
 i15 = HEAP32[i20 + 200 >> 2] | 0;
 while (1) {
  i19 = i16 + 1 | 0;
  i1 = _FT_GlyphLoader_CheckSubGlyphs(i18, i19) | 0;
  if (i1) {
   i2 = 21;
   break;
  }
  i1 = i15 + 4 | 0;
  if (i1 >>> 0 > i17 >>> 0) {
   i1 = 21;
   i2 = 21;
   break;
  }
  i13 = HEAP32[i18 + 88 >> 2] | 0;
  i5 = i13 + (i16 << 5) + 12 | 0;
  HEAP32[i5 >> 2] = 0;
  i2 = i13 + (i16 << 5) + 8 | 0;
  HEAP32[i2 >> 2] = 0;
  i8 = HEAPU8[i15 + 1 >> 0] | 0;
  i14 = (HEAPU8[i15 >> 0] << 8 | i8) & 65535;
  HEAP16[i13 + (i16 << 5) + 4 >> 1] = i14;
  HEAP32[i13 + (i16 << 5) >> 2] = HEAPU8[i15 + 2 >> 0] << 8 | HEAPU8[i15 + 3 >> 0];
  do if (!(i8 & 8)) if (!(i8 & 64)) {
   i3 = ((i14 & 1) << 1) + 2 | i8 >>> 4 & 8;
   break;
  } else {
   i3 = ((i14 & 1) << 1) + 6 | 0;
   break;
  } else i3 = (i14 & 1) << 1 | 4; while (0);
  if ((i15 + (i3 + 4) | 0) >>> 0 > i17 >>> 0) {
   i1 = 21;
   i2 = 21;
   break;
  }
  if (!(i14 & 1)) {
   HEAP32[i2 >> 2] = HEAP8[i1 >> 0];
   i6 = 11;
   i1 = 14;
   i9 = 12;
   i10 = 13;
   i11 = 8;
   i3 = 7;
   i7 = 10;
   i12 = 9;
   i4 = i15 + 6 | 0;
   i2 = HEAP8[i15 + 5 >> 0] | 0;
  } else {
   HEAP32[i2 >> 2] = HEAP8[i1 >> 0] << 8 | HEAPU8[i15 + 5 >> 0];
   i6 = 13;
   i1 = 16;
   i9 = 14;
   i10 = 15;
   i11 = 10;
   i3 = 9;
   i7 = 12;
   i12 = 11;
   i4 = i15 + 8 | 0;
   i2 = HEAP8[i15 + 6 >> 0] << 8 | HEAPU8[i15 + 7 >> 0];
  }
  HEAP32[i5 >> 2] = i2;
  do if (!(i8 & 8)) {
   if (i8 & 64) {
    i1 = i15 + i7 | 0;
    i5 = (HEAP8[i4 >> 0] << 8 | HEAPU8[i15 + i3 >> 0]) << 2;
    i3 = 0;
    i4 = 0;
    i2 = (HEAP8[i15 + i11 >> 0] << 8 | HEAPU8[i15 + i12 >> 0]) << 2;
    break;
   }
   if (!(i8 & 128)) {
    i1 = i4;
    i5 = 65536;
    i3 = 0;
    i4 = 0;
    i2 = 65536;
   } else {
    i1 = i15 + i1 | 0;
    i5 = (HEAP8[i4 >> 0] << 8 | HEAPU8[i15 + i3 >> 0]) << 2;
    i3 = (HEAP8[i15 + i7 >> 0] << 8 | HEAPU8[i15 + i6 >> 0]) << 2;
    i4 = (HEAP8[i15 + i11 >> 0] << 8 | HEAPU8[i15 + i12 >> 0]) << 2;
    i2 = (HEAP8[i15 + i9 >> 0] << 8 | HEAPU8[i15 + i10 >> 0]) << 2;
   }
  } else {
   i2 = (HEAP8[i4 >> 0] << 8 | HEAPU8[i15 + i3 >> 0]) << 2;
   i1 = i15 + i11 | 0;
   i5 = i2;
   i3 = 0;
   i4 = 0;
  } while (0);
  HEAP32[i13 + (i16 << 5) + 16 >> 2] = i5;
  HEAP32[i13 + (i16 << 5) + 20 >> 2] = i3;
  HEAP32[i13 + (i16 << 5) + 24 >> 2] = i4;
  HEAP32[i13 + (i16 << 5) + 28 >> 2] = i2;
  if (!(i14 & 32)) {
   i2 = 20;
   break;
  } else {
   i16 = i19;
   i15 = i1;
  }
 }
 if ((i2 | 0) == 20) {
  HEAP32[i18 + 84 >> 2] = i19;
  HEAP32[i20 + 168 >> 2] = i1 + (_FT_Stream_Pos(HEAP32[i20 + 24 >> 2] | 0) | 0) - i17;
  HEAP32[i20 + 200 >> 2] = i1;
  i20 = 0;
  return i20 | 0;
 } else if ((i2 | 0) == 21) return i1 | 0;
 return 0;
}

function _ft_gzip_file_io(i8, i5, i7, i4) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i1 = HEAP32[i8 + 8264 >> 2] | 0;
 if (i1 >>> 0 > i5 >>> 0) {
  if (_FT_Stream_Seek(HEAP32[i8 >> 2] | 0, HEAP32[i8 + 68 >> 2] | 0) | 0) {
   i8 = 0;
   return i8 | 0;
  }
  i1 = HEAP32[i8 + 40 >> 2] | 0;
  if (i1) {
   HEAP32[i8 + 32 >> 2] = 0;
   HEAP32[i8 + 20 >> 2] = 0;
   HEAP32[i8 + 36 >> 2] = 0;
   HEAP32[i1 >> 2] = (HEAP32[i1 + 12 >> 2] | 0) != 0 ? 7 : 0;
   i2 = HEAP32[i1 + 20 >> 2] | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & -2 | 0) == 4) {
    FUNCTION_TABLE_vii[HEAP32[i8 + 48 >> 2] & 31](HEAP32[i8 + 52 >> 2] | 0, HEAP32[i2 + 12 >> 2] | 0);
    i1 = HEAP32[i2 >> 2] | 0;
   }
   if ((i1 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i8 + 48 >> 2] & 31](HEAP32[i8 + 52 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0);
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 28 >> 2] = 0;
   HEAP32[i2 + 32 >> 2] = 0;
   i1 = HEAP32[i2 + 40 >> 2] | 0;
   HEAP32[i2 + 52 >> 2] = i1;
   HEAP32[i2 + 48 >> 2] = i1;
   i1 = HEAP32[i2 + 56 >> 2] | 0;
   if (i1) {
    i6 = FUNCTION_TABLE_iiii[i1 & 127](0, 0, 0) | 0;
    HEAP32[i2 + 60 >> 2] = i6;
    HEAP32[i8 + 60 >> 2] = i6;
   }
  }
  HEAP32[i8 + 16 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = i8 + 72;
  HEAP32[i8 + 28 >> 2] = 0;
  HEAP32[i8 + 24 >> 2] = i8 + 4168;
  HEAP32[i8 + 8272 >> 2] = i8 + 8264;
  HEAP32[i8 + 8268 >> 2] = i8 + 8264;
  HEAP32[i8 + 8264 >> 2] = 0;
  i3 = 0;
 } else i3 = i1;
 do if (i3 >>> 0 < i5 >>> 0) {
  i1 = i5 - i3 | 0;
  i6 = HEAP32[i8 + 8268 >> 2] | 0;
  i2 = (HEAP32[i8 + 8272 >> 2] | 0) - i6 | 0;
  i2 = i2 >>> 0 < i1 >>> 0 ? i2 : i1;
  HEAP32[i8 + 8268 >> 2] = i6 + i2;
  HEAP32[i8 + 8264 >> 2] = i2 + i3;
  L19 : do if ((i1 | 0) != (i2 | 0)) {
   while (1) {
    if (_ft_gzip_file_fill_output(i8) | 0) {
     i1 = 0;
     break;
    }
    i1 = i1 - i2 | 0;
    i6 = HEAP32[i8 + 8264 >> 2] | 0;
    i5 = HEAP32[i8 + 8268 >> 2] | 0;
    i3 = (HEAP32[i8 + 8272 >> 2] | 0) - i5 | 0;
    i2 = i3 >>> 0 < i1 >>> 0 ? i3 : i1;
    HEAP32[i8 + 8268 >> 2] = i5 + i2;
    HEAP32[i8 + 8264 >> 2] = i2 + i6;
    if ((i1 | 0) == (i2 | 0)) break L19;
   }
   return i1 | 0;
  } while (0);
  if (!i4) {
   i8 = 0;
   return i8 | 0;
  } else {
   i5 = i8 + 8268 | 0;
   i6 = i8 + 8272 | 0;
  }
 } else if (!i4) {
  i8 = 0;
  return i8 | 0;
 } else {
  i5 = i8 + 8268 | 0;
  i6 = i8 + 8272 | 0;
  break;
 } while (0);
 i3 = i7;
 i1 = 0;
 while (1) {
  i7 = HEAP32[i5 >> 2] | 0;
  i2 = (HEAP32[i6 >> 2] | 0) - i7 | 0;
  i2 = i2 >>> 0 < i4 >>> 0 ? i2 : i4;
  _memcpy(i3 | 0, i7 | 0, i2 | 0) | 0;
  i1 = i2 + i1 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i2;
  HEAP32[i8 + 8264 >> 2] = i2 + (HEAP32[i8 + 8264 >> 2] | 0);
  if ((i4 | 0) == (i2 | 0)) {
   i2 = 21;
   break;
  }
  if (!(_ft_gzip_file_fill_output(i8) | 0)) {
   i4 = i4 - i2 | 0;
   i3 = i3 + i2 | 0;
  } else {
   i2 = 21;
   break;
  }
 }
 if ((i2 | 0) == 21) return i1 | 0;
 return 0;
}

function __ZN4mathmlERKNS_7ScaleOpERKNS_8float4x4E(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var f4 = f0;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 0) | 0) >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 0) | 0) >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 0) | 0) + 4 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 0) | 0) + 4 >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 0) | 0) + 8 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 0) | 0) + 8 >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 0) | 0) + 12 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 0) | 0) + 12 >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 1) | 0) >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 + 4 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 1) | 0) >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 1) | 0) + 4 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 + 4 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 1) | 0) + 4 >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 1) | 0) + 8 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 + 4 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 1) | 0) + 8 >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 1) | 0) + 12 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 + 4 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 1) | 0) + 12 >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 2) | 0) >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 + 8 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 2) | 0) >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 2) | 0) + 4 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 + 8 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 2) | 0) + 4 >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 2) | 0) + 8 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 + 8 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 2) | 0) + 8 >> 2] = f4;
 f4 = Math_fround(HEAPF32[(__ZNK4math8float4x4ixEi(i3, 2) | 0) + 12 >> 2]);
 f4 = Math_fround(f4 * Math_fround(HEAPF32[i2 + 8 >> 2]));
 HEAPF32[(__ZN4math8float4x4ixEi(i1, 2) | 0) + 12 >> 2] = f4;
 i2 = HEAP32[(__ZNK4math8float4x4ixEi(i3, 3) | 0) >> 2] | 0;
 HEAP32[(__ZN4math8float4x4ixEi(i1, 3) | 0) >> 2] = i2;
 i2 = HEAP32[(__ZNK4math8float4x4ixEi(i3, 3) | 0) + 4 >> 2] | 0;
 HEAP32[(__ZN4math8float4x4ixEi(i1, 3) | 0) + 4 >> 2] = i2;
 i2 = HEAP32[(__ZNK4math8float4x4ixEi(i3, 3) | 0) + 8 >> 2] | 0;
 HEAP32[(__ZN4math8float4x4ixEi(i1, 3) | 0) + 8 >> 2] = i2;
 i3 = HEAP32[(__ZNK4math8float4x4ixEi(i3, 3) | 0) + 12 >> 2] | 0;
 HEAP32[(__ZN4math8float4x4ixEi(i1, 3) | 0) + 12 >> 2] = i3;
 return;
}

function _tt_cmap14_char_var_isdefault(i1, i9, i5) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAPU8[i8 + 7 >> 0] | 0) << 16 | (HEAPU8[i8 + 6 >> 0] | 0) << 24 | (HEAPU8[i8 + 8 >> 0] | 0) << 8 | (HEAPU8[i8 + 9 >> 0] | 0);
 if (!i1) {
  i8 = -1;
  return i8 | 0;
 } else i2 = 0;
 L3 : while (1) {
  while (1) {
   i4 = (i2 + i1 | 0) >>> 1;
   i3 = (HEAPU8[i8 + ((i4 * 11 | 0) + 11) >> 0] | 0) << 8 | (HEAPU8[i8 + ((i4 * 11 | 0) + 10) >> 0] | 0) << 16 | (HEAPU8[i8 + ((i4 * 11 | 0) + 12) >> 0] | 0);
   if (i3 >>> 0 > i5 >>> 0) break;
   if (i3 >>> 0 >= i5 >>> 0) {
    i1 = i4 * 11 | 0;
    i2 = 7;
    break L3;
   }
   i2 = i4 + 1 | 0;
   if (i2 >>> 0 >= i1 >>> 0) {
    i1 = -1;
    i2 = 24;
    break L3;
   }
  }
  if (i2 >>> 0 < i4 >>> 0) i1 = i4; else {
   i1 = -1;
   i2 = 24;
   break;
  }
 }
 if ((i2 | 0) == 7) {
  if (!(i8 + (i1 + 13) | 0)) {
   i8 = -1;
   return i8 | 0;
  }
  i5 = (HEAPU8[i8 + (i1 + 14) >> 0] | 0) << 16 | (HEAPU8[i8 + (i1 + 13) >> 0] | 0) << 24 | (HEAPU8[i8 + (i1 + 15) >> 0] | 0) << 8 | (HEAPU8[i8 + (i1 + 16) >> 0] | 0);
  i6 = (HEAPU8[i8 + (i1 + 18) >> 0] | 0) << 16 | (HEAPU8[i8 + (i1 + 17) >> 0] | 0) << 24 | (HEAPU8[i8 + (i1 + 19) >> 0] | 0) << 8 | (HEAPU8[i8 + (i1 + 20) >> 0] | 0);
  L17 : do if (i5) {
   i1 = (HEAPU8[i8 + (i5 + 1) >> 0] | 0) << 16 | (HEAPU8[i8 + i5 >> 0] | 0) << 24 | (HEAPU8[i8 + (i5 + 2) >> 0] | 0) << 8 | (HEAPU8[i8 + (i5 + 3) >> 0] | 0);
   i3 = 0;
   while (1) {
    while (1) {
     if (i3 >>> 0 >= i1 >>> 0) break L17;
     i4 = (i1 + i3 | 0) >>> 1;
     i2 = (HEAPU8[i8 + (i5 + 5 + (i4 << 2)) >> 0] | 0) << 8 | (HEAPU8[i8 + (i5 + 4 + (i4 << 2)) >> 0] | 0) << 16 | (HEAPU8[i8 + (i5 + 6 + (i4 << 2)) >> 0] | 0);
     if (i2 >>> 0 > i9 >>> 0) i1 = i4; else break;
    }
    if (((HEAPU8[i8 + (i5 + 7 + (i4 << 2)) >> 0] | 0) + i2 | 0) >>> 0 < i9 >>> 0) i3 = i4 + 1 | 0; else {
     i1 = 1;
     break;
    }
   }
   return i1 | 0;
  } while (0);
  L27 : do if ((i6 | 0) != 0 ? (i7 = (HEAPU8[i8 + (i6 + 1) >> 0] | 0) << 16 | (HEAPU8[i8 + i6 >> 0] | 0) << 24 | (HEAPU8[i8 + (i6 + 2) >> 0] | 0) << 8 | (HEAPU8[i8 + (i6 + 3) >> 0] | 0), (i7 | 0) != 0) : 0) {
   i4 = i7;
   i1 = 0;
   L30 : while (1) {
    while (1) {
     i3 = (i1 + i4 | 0) >>> 1;
     i2 = (HEAPU8[i8 + (i6 + 5 + (i3 * 5 | 0)) >> 0] | 0) << 8 | (HEAPU8[i8 + (i6 + 4 + (i3 * 5 | 0)) >> 0] | 0) << 16 | (HEAPU8[i8 + (i6 + 6 + (i3 * 5 | 0)) >> 0] | 0);
     if (i2 >>> 0 > i9 >>> 0) break;
     if (i2 >>> 0 >= i9 >>> 0) break L30;
     i1 = i3 + 1 | 0;
     if (i1 >>> 0 >= i4 >>> 0) break L27;
    }
    if (i1 >>> 0 < i3 >>> 0) i4 = i3; else break L27;
   }
   if ((HEAPU8[i8 + (i6 + 7 + (i3 * 5 | 0)) >> 0] | 0) << 8 | (HEAPU8[i8 + (i6 + 8 + (i3 * 5 | 0)) >> 0] | 0)) {
    i8 = 0;
    return i8 | 0;
   }
  } while (0);
  i8 = -1;
  return i8 | 0;
 } else if ((i2 | 0) == 24) return i1 | 0;
 return 0;
}

function _psh_hint_table_find_strong_points(i12, i13, i2, i1, i14, i10) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i15 = 0, i16 = 0;
 if (!i1) return;
 i8 = (i10 | 0) == 2 ? 128 : 256;
 i9 = (i10 | 0) == 2 ? 256 : 128;
 while (1) {
  i7 = HEAP32[i2 + 36 >> 2] | 0;
  i5 = i2 + 16 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  L6 : do if (!(i6 & 16)) {
   i3 = HEAP8[i2 + 20 >> 0] | 0;
   if (!((i3 | 0) == (i10 | 0) | (i3 | 0) == (0 - i10 | 0))) {
    i3 = HEAP8[i2 + 21 >> 0] | 0;
    if ((i3 | 0) == (i10 | 0) | (i3 | 0) == (0 - i10 | 0)) {
     i11 = i3;
     i15 = 6;
    }
   } else {
    i11 = i3;
    i15 = 6;
   }
   if ((i15 | 0) == 6 ? (i15 = 0, (i11 | 0) != 0) : 0) if ((i11 | 0) == (i10 | 0)) {
    if (!i12) break; else i4 = 0;
    while (1) {
     i3 = HEAP32[i13 + (i4 << 2) >> 2] | 0;
     i16 = i7 - (HEAP32[i3 >> 2] | 0) | 0;
     i4 = i4 + 1 | 0;
     if ((i16 | 0) < (i14 | 0) & (0 - i16 | 0) < (i14 | 0)) break;
     if (i4 >>> 0 >= i12 >>> 0) break L6;
    }
    HEAP32[i5 >> 2] = i6 | 528;
    HEAP32[i2 + 32 >> 2] = i3;
    break;
   } else {
    if ((i11 | 0) != (0 - i10 | 0) | (i12 | 0) == 0) break; else i4 = 0;
    while (1) {
     i3 = HEAP32[i13 + (i4 << 2) >> 2] | 0;
     i16 = i7 - (HEAP32[i3 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) | 0;
     i4 = i4 + 1 | 0;
     if ((i16 | 0) < (i14 | 0) & (0 - i16 | 0) < (i14 | 0)) break;
     if (i4 >>> 0 >= i12 >>> 0) break L6;
    }
    HEAP32[i5 >> 2] = i6 | 1040;
    HEAP32[i2 + 32 >> 2] = i3;
    break;
   }
   if (i6 & 64) {
    L26 : do if (!(i6 & i8)) {
     if (!((i6 & i9 | 0) == 0 | (i12 | 0) == 0)) {
      i4 = 0;
      while (1) {
       i3 = HEAP32[i13 + (i4 << 2) >> 2] | 0;
       i16 = i7 - (HEAP32[i3 >> 2] | 0) - (HEAP32[i3 + 4 >> 2] | 0) | 0;
       i4 = i4 + 1 | 0;
       if ((i16 | 0) < (i14 | 0) & (0 - i16 | 0) < (i14 | 0)) break;
       if (i4 >>> 0 >= i12 >>> 0) break L26;
      }
      HEAP32[i2 + 32 >> 2] = i3;
      HEAP32[i5 >> 2] = i6 | 1040;
     }
    } else if (i12) {
     i4 = 0;
     while (1) {
      i3 = HEAP32[i13 + (i4 << 2) >> 2] | 0;
      i16 = i7 - (HEAP32[i3 >> 2] | 0) | 0;
      i4 = i4 + 1 | 0;
      if ((i16 | 0) < (i14 | 0) & (0 - i16 | 0) < (i14 | 0)) break;
      if (i4 >>> 0 >= i12 >>> 0) break L26;
     }
     HEAP32[i2 + 32 >> 2] = i3;
     HEAP32[i5 >> 2] = i6 | 528;
    } while (0);
    i3 = i2 + 32 | 0;
    if (!((HEAP32[i3 >> 2] | 0) != 0 | (i12 | 0) == 0)) {
     i5 = 0;
     while (1) {
      i4 = HEAP32[i13 + (i5 << 2) >> 2] | 0;
      i16 = HEAP32[i4 >> 2] | 0;
      if ((i7 | 0) >= (i16 | 0) ? (i7 | 0) <= ((HEAP32[i4 + 4 >> 2] | 0) + i16 | 0) : 0) break;
      i5 = i5 + 1 | 0;
      if (i5 >>> 0 >= i12 >>> 0) break L6;
     }
     HEAP32[i3 >> 2] = i4;
    }
   }
  } while (0);
  i1 = i1 + -1 | 0;
  if (!i1) break; else i2 = i2 + 48 | 0;
 }
 return;
}

function __ZN8Graphics17ApplyVertexBufferEP12VertexBuffer(i9, i10) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i10 + 88 >> 2] | 0;
 if ((i1 | 0) != (HEAP32[i9 + 296 >> 2] | 0)) {
  _glBindBuffer(34962, i1 | 0);
  HEAP32[i9 + 296 >> 2] = i1;
 }
 if (!i1) __ZN4math22PrintToConsoleVariadicEjPKcz(4, 290977, i11);
 do if (!(__ZNK12VertexBuffer17IsBoundToMaterialEv(i10) | 0)) {
  i2 = HEAP32[i9 + 64 >> 2] | 0;
  if (i2) {
   __ZN12VertexBuffer14BindToMaterialEPK8Material(i10, i2);
   break;
  }
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291005, i11 + 8 | 0);
  STACKTOP = i11;
  return;
 } while (0);
 if ((i1 | 0) != 0 ? (HEAP32[i9 + 304 >> 2] | 0) == (i1 | 0) : 0) {
  STACKTOP = i11;
  return;
 }
 HEAP32[i9 + 304 >> 2] = i1;
 L18 : do if ((HEAP32[i10 + 44 >> 2] | 0) > 0) {
  i8 = 0;
  i2 = 0;
  while (1) {
   if ((i8 | 0) >= (HEAP32[i9 + 312 >> 2] | 0)) {
    i3 = i9 + 316 | 0;
    break L18;
   }
   i1 = HEAP32[i10 + 32 >> 2] | 0;
   i6 = HEAPU8[i1 + (i8 * 52 | 0) + 8 >> 0] | 0;
   i7 = HEAP32[i10 + 56 >> 2] | 0;
   i1 = HEAP32[i1 + (i8 * 52 | 0) >> 2] | 0;
   if (!(HEAP32[i10 + 88 >> 2] | 0)) i5 = __ZN12VertexBuffer10GetPointerEi18VertexDataSemantici(i10, 0, i1, 0) | 0; else i5 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i10 + 32 | 0, i1) | 0;
   i3 = HEAP32[(HEAP32[i10 + 100 >> 2] | 0) + (i8 << 2) >> 2] | 0;
   if ((i3 | 0) != -1) {
    i4 = HEAP32[(HEAP32[i10 + 32 >> 2] | 0) + (i8 * 52 | 0) + 4 >> 2] | 0;
    switch (i4 | 0) {
    case 2:
     {
      i1 = 5126;
      break;
     }
    case 4:
     {
      i1 = 5132;
      break;
     }
    case 13:
    case 15:
     {
      i1 = 5122;
      break;
     }
    case 14:
    case 16:
     {
      i1 = 5123;
      break;
     }
    case 17:
    case 19:
     {
      i1 = 5120;
      break;
     }
    case 18:
    case 20:
     {
      i1 = 5121;
      break;
     }
    default:
     i1 = 0;
    }
    _glVertexAttribPointer(i3 | 0, i6 | 0, i1 | 0, 419424 >>> i4 & 1 | 0, i7 | 0, i5 | 0);
    if (!(HEAP32[i9 + 316 >> 2] & 1 << i3)) {
     _glEnableVertexAttribArray(i3 | 0);
     HEAP32[i9 + 316 >> 2] = HEAP32[i9 + 316 >> 2] | 1 << i3;
    }
    i2 = 1 << i3 | i2;
   }
   i8 = i8 + 1 | 0;
   if ((i8 | 0) >= (HEAP32[i10 + 44 >> 2] | 0)) {
    i3 = i9 + 316 | 0;
    break;
   }
  }
 } else {
  i3 = i9 + 316 | 0;
  i2 = 0;
 } while (0);
 i1 = HEAP32[i3 >> 2] & ~i2;
 if (i1 & 1) _glDisableVertexAttribArray(0);
 if (i1 & 2) _glDisableVertexAttribArray(1);
 if (i1 & 4) _glDisableVertexAttribArray(2);
 if (i1 & 8) _glDisableVertexAttribArray(3);
 if (i1 & 16) _glDisableVertexAttribArray(4);
 if (i1 & 32) _glDisableVertexAttribArray(5);
 if (i1 & 64) _glDisableVertexAttribArray(6);
 if (i1 & 128) _glDisableVertexAttribArray(7);
 HEAP32[i3 >> 2] = i2;
 STACKTOP = i11;
 return;
}

function _af_glyph_hints_align_strong_points(i1, i12) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = HEAP32[i1 + 24 >> 2] | 0;
 i11 = HEAP32[i1 + 44 + (i12 * 28 | 0) + 20 >> 2] | 0;
 i7 = HEAP32[i1 + 44 + (i12 * 28 | 0) + 12 >> 2] | 0;
 i6 = (i12 | 0) == 0 ? 64 : 128;
 if (!((i7 | 0) > 0 & (i10 | 0) > 0)) return;
 i8 = i9;
 do {
  i5 = HEAPU16[i8 >> 1] | 0;
  if (!((i5 & i6 | 0) != 0 | (i5 & 768 | 0) == 256)) {
   if ((i12 | 0) == 1) {
    i1 = i8 + 8 | 0;
    i5 = HEAP16[i8 + 14 >> 1] | 0;
   } else {
    i1 = i8 + 4 | 0;
    i5 = HEAP16[i8 + 12 >> 1] | 0;
   }
   i2 = HEAP32[i1 >> 2] | 0;
   i1 = HEAP16[i11 >> 1] | 0;
   L12 : do if ((i1 << 16 >> 16 | 0) < (i5 | 0)) {
    if ((i5 | 0) >= (HEAP16[i11 + ((i7 + -1 | 0) * 48 | 0) >> 1] | 0)) {
     i1 = (HEAP32[i11 + ((i7 + -1 | 0) * 48 | 0) + 8 >> 2] | 0) + i2 - (HEAP32[i11 + ((i7 + -1 | 0) * 48 | 0) + 4 >> 2] | 0) | 0;
     break;
    }
    L17 : do if ((i7 * 48 | 0) < 432) {
     L19 : do if ((i7 * 48 | 0) > 0 & (i1 << 16 >> 16 | 0) < (i5 | 0)) {
      i1 = 0;
      do {
       i1 = i1 + 1 | 0;
       if ((i1 | 0) >= ((i7 * 48 | 0) / 48 | 0 | 0)) break L19;
      } while ((HEAP16[i11 + (i1 * 48 | 0) >> 1] | 0) < (i5 | 0));
     } else i1 = 0; while (0);
     if ((HEAP16[i11 + (i1 * 48 | 0) >> 1] | 0) == (i5 | 0)) {
      i1 = HEAP32[i11 + (i1 * 48 | 0) + 8 >> 2] | 0;
      break L12;
     }
    } else {
     i2 = (i7 * 48 | 0) / 48 | 0;
     i1 = 0;
     while (1) {
      while (1) {
       if ((i1 | 0) >= (i2 | 0)) break L17;
       i4 = i2 + i1 >> 1;
       i3 = HEAP16[i11 + (i4 * 48 | 0) >> 1] | 0;
       if ((i5 | 0) < (i3 | 0)) i2 = i4; else {
        i1 = i2;
        break;
       }
      }
      if ((i5 | 0) <= (i3 | 0)) break;
      i2 = i1;
      i1 = i4 + 1 | 0;
     }
     i1 = HEAP32[i11 + (i4 * 48 | 0) + 8 >> 2] | 0;
     break L12;
    } while (0);
    i2 = i1 + -1 | 0;
    i4 = HEAP32[i11 + (i2 * 48 | 0) + 16 >> 2] | 0;
    if (!i4) {
     i1 = _FT_DivFix((HEAP32[i11 + (i1 * 48 | 0) + 8 >> 2] | 0) - (HEAP32[i11 + (i2 * 48 | 0) + 8 >> 2] | 0) | 0, (HEAP16[i11 + (i1 * 48 | 0) >> 1] | 0) - (HEAP16[i11 + (i2 * 48 | 0) >> 1] | 0) | 0) | 0;
     HEAP32[i11 + (i2 * 48 | 0) + 16 >> 2] = i1;
     i3 = i11 + (i2 * 48 | 0) | 0;
     i2 = i11 + (i2 * 48 | 0) + 8 | 0;
    } else {
     i3 = i11 + (i2 * 48 | 0) | 0;
     i2 = i11 + (i2 * 48 | 0) + 8 | 0;
     i1 = i4;
    }
    i4 = HEAP32[i2 >> 2] | 0;
    i1 = (_FT_MulFix(i5 - (HEAP16[i3 >> 1] | 0) | 0, i1) | 0) + i4 | 0;
   } else i1 = (HEAP32[i11 + 8 >> 2] | 0) + i2 - (HEAP32[i11 + 4 >> 2] | 0) | 0; while (0);
   if (!i12) HEAP32[i8 + 16 >> 2] = i1; else HEAP32[i8 + 20 >> 2] = i1;
   HEAP16[i8 >> 1] = HEAPU16[i8 >> 1] | i6;
  }
  i8 = i8 + 40 | 0;
 } while (i8 >>> 0 < (i9 + (i10 * 40 | 0) | 0) >>> 0);
 return;
}

function _af_latin_metrics_scale_dim(i10, i3, i5) {
 i10 = i10 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i4 = HEAP32[((i5 | 0) == 0 ? i3 + 4 | 0 : i3 + 8 | 0) >> 2] | 0;
 i9 = HEAP32[((i5 | 0) == 0 ? i3 + 12 | 0 : i3 + 16 | 0) >> 2] | 0;
 if ((HEAP32[i10 + 40 + (i5 * 396 | 0) + 388 >> 2] | 0) == (i4 | 0) ? (HEAP32[i10 + 40 + (i5 * 396 | 0) + 392 >> 2] | 0) == (i9 | 0) : 0) return;
 HEAP32[i10 + 40 + (i5 * 396 | 0) + 388 >> 2] = i4;
 HEAP32[i10 + 40 + (i5 * 396 | 0) + 392 >> 2] = i9;
 i2 = HEAP32[i10 + 652 >> 2] | 0;
 L5 : do if (i2) {
  i1 = 0;
  while (1) {
   if (HEAP32[i10 + 656 + (i1 * 28 | 0) + 24 >> 2] & 4) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i2 >>> 0) break L5;
  }
  i1 = _FT_MulFix(HEAP32[i10 + 656 + (i1 * 28 | 0) + 12 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0) | 0;
  if ((i5 | 0) == 1 & (i1 | 0) != (i1 + 40 & -64 | 0)) i4 = _FT_MulDiv(i4, i1 + 40 & -64, i1) | 0;
 } while (0);
 HEAP32[i10 + 40 + (i5 * 396 | 0) >> 2] = i4;
 HEAP32[i10 + 40 + (i5 * 396 | 0) + 4 >> 2] = i9;
 if (!i5) {
  HEAP32[i10 + 8 >> 2] = i4;
  HEAP32[i10 + 16 >> 2] = i9;
 } else {
  HEAP32[i10 + 12 >> 2] = i4;
  HEAP32[i10 + 20 >> 2] = i9;
 }
 if (HEAP32[i10 + 40 + (i5 * 396 | 0) + 8 >> 2] | 0) {
  i1 = 0;
  do {
   i8 = _FT_MulFix(HEAP32[i10 + 40 + (i5 * 396 | 0) + 12 + (i1 * 12 | 0) >> 2] | 0, i4) | 0;
   HEAP32[i10 + 40 + (i5 * 396 | 0) + 12 + (i1 * 12 | 0) + 4 >> 2] = i8;
   HEAP32[i10 + 40 + (i5 * 396 | 0) + 12 + (i1 * 12 | 0) + 8 >> 2] = i8;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (HEAP32[i10 + 40 + (i5 * 396 | 0) + 8 >> 2] | 0) >>> 0);
 }
 HEAP8[i10 + 40 + (i5 * 396 | 0) + 212 >> 0] = (_FT_MulFix(HEAP32[i10 + 40 + (i5 * 396 | 0) + 208 >> 2] | 0, i4) | 0) < 40 & 1;
 if ((i5 | 0) != 1) return;
 if (!(HEAP32[i10 + 652 >> 2] | 0)) return;
 i1 = (i9 | 0) < 48 ? 32 : 64;
 i8 = 0;
 do {
  i11 = i10 + 656 + (i8 * 28 | 0) | 0;
  i7 = (_FT_MulFix(HEAP32[i11 >> 2] | 0, i4) | 0) + i9 | 0;
  i2 = i10 + 656 + (i8 * 28 | 0) + 4 | 0;
  HEAP32[i2 >> 2] = i7;
  i3 = i10 + 656 + (i8 * 28 | 0) + 8 | 0;
  HEAP32[i3 >> 2] = i7;
  i7 = i10 + 656 + (i8 * 28 | 0) + 12 | 0;
  i6 = (_FT_MulFix(HEAP32[i7 >> 2] | 0, i4) | 0) + i9 | 0;
  HEAP32[i10 + 656 + (i8 * 28 | 0) + 16 >> 2] = i6;
  i5 = i10 + 656 + (i8 * 28 | 0) + 20 | 0;
  HEAP32[i5 >> 2] = i6;
  i6 = i10 + 656 + (i8 * 28 | 0) + 24 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] & -2;
  i7 = _FT_MulFix((HEAP32[i11 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0, i4) | 0;
  if ((i7 + 48 | 0) >>> 0 < 97) {
   i11 = (((i7 | 0) < 0 ? 0 - i7 | 0 : i7) | 0) < 32 ? 0 : i1;
   i2 = (HEAP32[i2 >> 2] | 0) + 32 & -64;
   HEAP32[i3 >> 2] = i2;
   HEAP32[i5 >> 2] = i2 - ((i7 | 0) < 0 ? 0 - i11 | 0 : i11);
   HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 1;
  }
  i8 = i8 + 1 | 0;
 } while (i8 >>> 0 < (HEAP32[i10 + 652 >> 2] | 0) >>> 0);
 return;
}

function _tt_cmap8_validate(i10, i11) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if ((i10 + 8208 | 0) >>> 0 > (HEAP32[i11 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i11, 8);
 i8 = (HEAPU8[i10 + 5 >> 0] | 0) << 16 | (HEAPU8[i10 + 4 >> 0] | 0) << 24 | (HEAPU8[i10 + 6 >> 0] | 0) << 8 | (HEAPU8[i10 + 7 >> 0] | 0);
 if (i8 >>> 0 < 8208 ? 1 : i8 >>> 0 > ((HEAP32[i11 + 4 >> 2] | 0) - i10 | 0) >>> 0) _ft_validator_error(i11, 8);
 i6 = (HEAPU8[i10 + 8205 >> 0] | 0) << 16 | (HEAPU8[i10 + 8204 >> 0] | 0) << 24 | (HEAPU8[i10 + 8206 >> 0] | 0) << 8 | (HEAPU8[i10 + 8207 >> 0] | 0);
 if ((i10 + ((i6 * 12 | 0) + 8208) | 0) >>> 0 > (HEAP32[i11 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i11, 8);
 if (!i6) return 0;
 i7 = 0;
 i8 = 0;
 i9 = i10 + 8208 | 0;
 L13 : while (1) {
  i3 = (HEAPU8[i9 + 1 >> 0] | 0) << 16 | (HEAPU8[i9 >> 0] | 0) << 24;
  i1 = i3 | (HEAPU8[i9 + 2 >> 0] | 0) << 8 | (HEAPU8[i9 + 3 >> 0] | 0);
  i4 = (HEAPU8[i9 + 5 >> 0] | 0) << 16 | (HEAPU8[i9 + 4 >> 0] | 0) << 24;
  i2 = i7;
  i7 = i4 | (HEAPU8[i9 + 6 >> 0] | 0) << 8 | (HEAPU8[i9 + 7 >> 0] | 0);
  i5 = i9;
  i9 = i9 + 12 | 0;
  if (i7 >>> 0 < i1 >>> 0) {
   i1 = 10;
   break;
  }
  if (!((i8 | 0) == 0 | i1 >>> 0 > i2 >>> 0)) {
   i1 = 12;
   break;
  }
  do if (HEAP32[i11 + 8 >> 2] | 0) {
   i2 = i7 - i1 | 0;
   if ((i2 + ((HEAPU8[i5 + 9 >> 0] | 0) << 16 | (HEAPU8[i5 + 8 >> 0] | 0) << 24 | (HEAPU8[i5 + 10 >> 0] | 0) << 8 | (HEAPU8[i5 + 11 >> 0] | 0)) | 0) >>> 0 >= (HEAP32[i11 + 172 >> 2] | 0) >>> 0) {
    i1 = 15;
    break L13;
   }
   if (!i3) {
    if (i4) {
     i1 = 24;
     break L13;
    }
    if (!(i2 + 1 | 0)) break; else i2 = i2 + 1 | 0;
    while (1) {
     if ((HEAPU8[i10 + ((i1 >>> 3 & 8191) + 12) >> 0] | 0) & 128 >>> (i1 & 7)) {
      i1 = 27;
      break L13;
     }
     i2 = i2 + -1 | 0;
     if (!i2) break; else i1 = i1 + 1 | 0;
    }
   } else {
    if (!(i2 + 1 | 0)) break; else i2 = i2 + 1 | 0;
    while (1) {
     if (!((HEAPU8[i10 + ((i1 >>> 19) + 12) >> 0] | 0) & 128 >>> (i1 >>> 16 & 7))) {
      i1 = 19;
      break L13;
     }
     if (!((HEAPU8[i10 + ((i1 >>> 3 & 8191) + 12) >> 0] | 0) & 128 >>> (i1 & 7))) {
      i1 = 21;
      break L13;
     }
     i2 = i2 + -1 | 0;
     if (!i2) break; else i1 = i1 + 1 | 0;
    }
   }
  } while (0);
  i8 = i8 + 1 | 0;
  if ((i8 | 0) == (i6 | 0)) {
   i1 = 30;
   break;
  }
 }
 if ((i1 | 0) == 10) _ft_validator_error(i11, 8); else if ((i1 | 0) == 12) _ft_validator_error(i11, 8); else if ((i1 | 0) == 15) _ft_validator_error(i11, 16); else if ((i1 | 0) == 19) _ft_validator_error(i11, 8); else if ((i1 | 0) == 21) _ft_validator_error(i11, 8); else if ((i1 | 0) == 24) _ft_validator_error(i11, 8); else if ((i1 | 0) == 27) _ft_validator_error(i11, 8); else if ((i1 | 0) == 30) return 0;
 return 0;
}

function _parse_blend_design_map(i2, i10) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 HEAP32[i11 + 296 >> 2] = 0;
 i7 = HEAP32[i2 + 100 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[i10 + 60 >> 2] & 15](i10, i11 + 248 | 0, 4, i11 + 4 | 0);
 i1 = HEAP32[i11 + 4 >> 2] | 0;
 if ((i1 | 0) < 0) {
  HEAP32[i11 + 296 >> 2] = 162;
  i8 = 162;
  i10 = i10 + 12 | 0;
  HEAP32[i10 >> 2] = i8;
  STACKTOP = i11;
  return;
 }
 if ((i1 | 0) == 0 | (i1 | 0) > 4) {
  HEAP32[i11 + 296 >> 2] = 3;
  i8 = 3;
  i10 = i10 + 12 | 0;
  HEAP32[i10 >> 2] = i8;
  STACKTOP = i11;
  return;
 }
 i9 = HEAP32[i10 >> 2] | 0;
 i8 = HEAP32[i10 + 8 >> 2] | 0;
 i1 = _t1_allocate_blend(i2, 0, i1) | 0;
 HEAP32[i11 + 296 >> 2] = i1;
 if (i1) {
  i8 = i1;
  i10 = i10 + 12 | 0;
  HEAP32[i10 >> 2] = i8;
  STACKTOP = i11;
  return;
 }
 i5 = HEAP32[i2 + 532 >> 2] | 0;
 do if ((HEAP32[i11 + 4 >> 2] | 0) > 0) {
  i6 = 0;
  while (1) {
   HEAP32[i10 >> 2] = HEAP32[i11 + 248 + (i6 * 12 | 0) >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 248 + (i6 * 12 | 0) + 4 >> 2];
   FUNCTION_TABLE_viiii[HEAP32[i10 + 60 >> 2] & 15](i10, i11 + 8 | 0, 20, i11);
   i1 = HEAP32[i11 >> 2] | 0;
   if ((i1 + -1 | 0) >>> 0 > 19) {
    i2 = 9;
    break;
   }
   i1 = _ft_mem_realloc(i7, 4, 0, i1 << 1, 0, i11 + 296 | 0) | 0;
   i4 = i5 + 88 + (i6 * 12 | 0) + 4 | 0;
   HEAP32[i4 >> 2] = i1;
   i3 = HEAP32[i11 + 296 >> 2] | 0;
   if (i3) {
    i2 = 16;
    break;
   }
   i3 = HEAP32[i11 >> 2] | 0;
   i2 = i5 + 88 + (i6 * 12 | 0) + 8 | 0;
   HEAP32[i2 >> 2] = i1 + (i3 << 2);
   HEAP8[i5 + 88 + (i6 * 12 | 0) >> 0] = i3;
   if ((i3 | 0) > 0) {
    i1 = 0;
    do {
     HEAP32[i10 >> 2] = (HEAP32[i11 + 8 + (i1 * 12 | 0) >> 2] | 0) + 1;
     HEAP32[i10 + 8 >> 2] = (HEAP32[i11 + 8 + (i1 * 12 | 0) + 4 >> 2] | 0) + -1;
     i3 = FUNCTION_TABLE_ii[HEAP32[i10 + 36 >> 2] & 63](i10) | 0;
     HEAP32[(HEAP32[i4 >> 2] | 0) + (i1 << 2) >> 2] = i3;
     i3 = FUNCTION_TABLE_iii[HEAP32[i10 + 40 >> 2] & 255](i10, 0) | 0;
     HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] = i3;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i11 >> 2] | 0));
   }
   i6 = i6 + 1 | 0;
   if ((i6 | 0) >= (HEAP32[i11 + 4 >> 2] | 0)) {
    i2 = 14;
    break;
   }
  }
  if ((i2 | 0) == 9) {
   HEAP32[i11 + 296 >> 2] = 3;
   i8 = 3;
   i10 = i10 + 12 | 0;
   HEAP32[i10 >> 2] = i8;
   STACKTOP = i11;
   return;
  } else if ((i2 | 0) == 14) {
   i1 = HEAP32[i11 + 296 >> 2] | 0;
   break;
  } else if ((i2 | 0) == 16) {
   i8 = i3;
   i10 = i10 + 12 | 0;
   HEAP32[i10 >> 2] = i8;
   STACKTOP = i11;
   return;
  }
 } else i1 = 0; while (0);
 HEAP32[i10 >> 2] = i9;
 HEAP32[i10 + 8 >> 2] = i8;
 i8 = i1;
 i10 = i10 + 12 | 0;
 HEAP32[i10 >> 2] = i8;
 STACKTOP = i11;
 return;
}

function __ZN7Texture18CreateBestMatchingEiiii11TextureType13TextureFormat13ResourceUsagemPK5ImageiPKc(i7, i12, i15, i10, i9, i11, i13, i2, i14, i6, i4, i5, i8) {
 i7 = i7 | 0;
 i12 = i12 | 0;
 i15 = i15 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 i2 = i2 | 0;
 i14 = i14 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i14 & -2 | 0) == 4) {
  __ZN7Texture16CreateMainMemoryEiiii11TextureType13TextureFormatPK5ImageiPKc(i7, i12, i15, i10, i9, i11, i13, i2, i4, i5, i8);
  STACKTOP = i16;
  return;
 }
 L5 : do if (i2) {
  L7 : do if (__ZNK8Graphics24IsTextureFormatSupportedE13TextureFormat13ResourceUsagem(HEAP32[122] | 0, i2, 1, 0) | 0) i3 = i2; else {
   i1 = i2;
   while (1) {
    switch (i1 | 0) {
    case 72:
    case 71:
    case 70:
     {
      i1 = 85;
      break;
     }
    case 85:
     {
      i1 = 4194337;
      break;
     }
    case 86:
     {
      i1 = 28;
      break;
     }
    case 87:
     {
      i1 = 28;
      break;
     }
    case 88:
     {
      i1 = 4194337;
      break;
     }
    default:
     break L5;
    }
    if (__ZNK8Graphics24IsTextureFormatSupportedE13TextureFormat13ResourceUsagem(HEAP32[122] | 0, i1, 1, 0) | 0) {
     i3 = i1;
     break L7;
    }
   }
  } while (0);
  if ((i3 | 0) == (i2 | 0)) {
   __ZN7Texture9CreateGPUEiiii11TextureType13TextureFormat13ResourceUsagemPK5ImageiPKc(i7, i12, i15, i10, i9, i11, i13, i2, i14, i6, i4, i5, i8);
   STACKTOP = i16;
   return;
  }
  HEAP32[i16 + 4 >> 2] = 0;
  HEAP32[i16 + 4 + 4 >> 2] = 0;
  HEAP32[i16 + 4 + 8 >> 2] = 0;
  if (i5) {
   __ZNSt3__16vectorI5ImageNS_9allocatorIS1_EEE8__appendEj(i16 + 4 | 0, i5);
   i1 = HEAP32[i16 + 4 >> 2] | 0;
   if ((i5 | 0) > 0) {
    i2 = 0;
    do {
     __ZN5ImageaSERKS_(i1 + (i2 * 36 | 0) | 0, i4 + (i2 * 36 | 0) | 0) | 0;
     __ZN5Image15ConvertToFormatE13TextureFormat((HEAP32[i16 + 4 >> 2] | 0) + (i2 * 36 | 0) | 0, i3) | 0;
     i2 = i2 + 1 | 0;
     i1 = HEAP32[i16 + 4 >> 2] | 0;
    } while ((i2 | 0) < (i5 | 0));
   }
  } else i1 = 0;
  __ZN7Texture9CreateGPUEiiii11TextureType13TextureFormat13ResourceUsagemPK5ImageiPKc(i7, i12, i15, i10, i9, i11, i13, i3, i14, i6, i1, ((HEAP32[i16 + 4 + 4 >> 2] | 0) - i1 | 0) / 36 | 0, i8);
  i1 = HEAP32[i16 + 4 >> 2] | 0;
  if (!i1) {
   STACKTOP = i16;
   return;
  }
  while (1) {
   i2 = HEAP32[i16 + 4 + 4 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) break;
   HEAP32[i16 + 4 + 4 >> 2] = i2 + -36;
   __ZN5ImageD2Ev(i2 + -36 | 0);
  }
  __ZdlPv(HEAP32[i16 + 4 >> 2] | 0);
  STACKTOP = i16;
  return;
 } while (0);
 HEAP32[i16 >> 2] = __Z21TextureFormatToString13TextureFormat(i2) | 0;
 __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i7, 304827, 304390, 626, -1610579964, 304972, i16);
 STACKTOP = i16;
 return;
}

function _ps_dimension_add_t1stem(i8, i1, i2, i9, i10) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i2 | 0) < 0) {
  i6 = 0;
  i1 = ((i2 | 0) == -21 ? -21 : 0) + i1 | 0;
  i5 = (i2 | 0) == -21 ? 3 : 1;
 } else {
  i6 = i2;
  i5 = 0;
 }
 if (i10) HEAP32[i10 >> 2] = -1;
 i4 = HEAP32[i8 >> 2] | 0;
 L7 : do if (!i4) {
  i3 = 0;
  i7 = 10;
 } else {
  i3 = HEAP32[i8 + 8 >> 2] | 0;
  i2 = 0;
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) == (i1 | 0) ? (HEAP32[i3 + 4 >> 2] | 0) == (i6 | 0) : 0) {
    i6 = i2;
    break L7;
   }
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 < i4 >>> 0) i3 = i3 + 12 | 0; else {
    i3 = i2;
    i7 = 10;
    break;
   }
  }
 } while (0);
 if ((i7 | 0) == 10) {
  i2 = HEAP32[i8 + 4 >> 2] | 0;
  if ((i4 + 1 | 0) >>> 0 >= i2 >>> 0) {
   HEAP32[i11 >> 2] = 0;
   do if (i2 >>> 0 < (i4 + 1 | 0) >>> 0) {
    HEAP32[i8 + 8 >> 2] = _ft_mem_realloc(i9, 12, i2, i4 + 8 & -8, HEAP32[i8 + 8 >> 2] | 0, i11) | 0;
    i2 = HEAP32[i11 >> 2] | 0;
    if (!i2) {
     HEAP32[i8 + 4 >> 2] = i4 + 8 & -8;
     break;
    }
    i10 = i2;
    STACKTOP = i11;
    return i10 | 0;
   } while (0);
  }
  i7 = HEAP32[i8 + 8 >> 2] | 0;
  HEAP32[i8 >> 2] = i4 + 1;
  HEAP32[i7 + (i4 * 12 | 0) >> 2] = i1;
  HEAP32[i7 + (i4 * 12 | 0) + 4 >> 2] = i6;
  HEAP32[i7 + (i4 * 12 | 0) + 8 >> 2] = i5;
  i6 = i3;
 }
 i1 = HEAP32[i8 + 12 >> 2] | 0;
 if (!i1) {
  do if (!(HEAP32[i8 + 16 >> 2] | 0)) {
   HEAP32[i11 >> 2] = 0;
   i1 = _ft_mem_realloc(i9, 16, 0, 8, HEAP32[i8 + 20 >> 2] | 0, i11) | 0;
   HEAP32[i8 + 20 >> 2] = i1;
   i2 = HEAP32[i11 >> 2] | 0;
   if (!i2) {
    HEAP32[i8 + 16 >> 2] = 8;
    break;
   }
   i10 = i2;
   STACKTOP = i11;
   return i10 | 0;
  } else i1 = HEAP32[i8 + 20 >> 2] | 0; while (0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 1;
 } else i1 = (HEAP32[i8 + 20 >> 2] | 0) + (i1 + -1 << 4) | 0;
 if ((i6 | 0) >= 0) {
  if ((HEAP32[i1 >> 2] | 0) >>> 0 <= i6 >>> 0) {
   i3 = i6 + 1 | 0;
   i4 = i1 + 4 | 0;
   i2 = ((HEAP32[i4 >> 2] | 0) + 7 | 0) >>> 3;
   i5 = (i6 + 8 | 0) >>> 3;
   HEAP32[i11 >> 2] = 0;
   do if (i5 >>> 0 > i2 >>> 0) {
    i8 = i1 + 8 | 0;
    HEAP32[i8 >> 2] = _ft_mem_realloc(i9, 1, i2, i5 + 7 & 1073741816, HEAP32[i8 >> 2] | 0, i11) | 0;
    i2 = HEAP32[i11 >> 2] | 0;
    if (!i2) {
     HEAP32[i4 >> 2] = (i5 + 7 & 1073741816) << 3;
     break;
    }
    i10 = i2;
    STACKTOP = i11;
    return i10 | 0;
   } while (0);
   HEAP32[i1 >> 2] = i3;
  }
  i8 = (HEAP32[i1 + 8 >> 2] | 0) + (i6 >> 3) | 0;
  HEAP8[i8 >> 0] = HEAPU8[i8 >> 0] | 0 | 128 >>> (i6 & 7);
 }
 if (!i10) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i10 >> 2] = i6;
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _T1_Set_MM_Design(i12, i3, i11) {
 i12 = i12 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i1 = HEAP32[i12 + 532 >> 2] | 0;
 if (!i1) {
  i14 = 6;
  STACKTOP = i15;
  return i14 | 0;
 }
 if ((HEAP32[i1 + 4 >> 2] | 0) != (i3 | 0)) {
  i14 = 6;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (i3) {
  i4 = i3;
  i13 = 0;
  do {
   i8 = HEAP32[i11 + (i13 << 2) >> 2] | 0;
   i7 = HEAP32[i1 + 88 + (i13 * 12 | 0) + 4 >> 2] | 0;
   i10 = HEAP32[i1 + 88 + (i13 * 12 | 0) + 8 >> 2] | 0;
   i9 = HEAP8[i1 + 88 + (i13 * 12 | 0) >> 0] | 0;
   do if (i9 << 24 >> 24) {
    i6 = -1;
    i2 = 0;
    while (1) {
     i5 = HEAP32[i7 + (i2 << 2) >> 2] | 0;
     if ((i8 | 0) == (i5 | 0)) {
      i14 = 7;
      break;
     }
     if ((i8 | 0) < (i5 | 0)) {
      i5 = i2;
      i2 = i6;
      break;
     }
     i5 = i2 + 1 | 0;
     if (i5 >>> 0 < (i9 & 255) >>> 0) {
      i6 = i2;
      i2 = i5;
     } else {
      i5 = -1;
      break;
     }
    }
    if ((i14 | 0) == 7) {
     i14 = 0;
     i2 = HEAP32[i10 + (i2 << 2) >> 2] | 0;
     break;
    }
    if ((i2 | 0) >= 0) if ((i5 | 0) < 0) {
     i2 = HEAP32[i10 + ((i9 & 255) + -1 << 2) >> 2] | 0;
     break;
    } else {
     i4 = HEAP32[i7 + (i2 << 2) >> 2] | 0;
     i2 = _FT_MulDiv(i8 - i4 | 0, (HEAP32[i10 + (i5 << 2) >> 2] | 0) - (HEAP32[i10 + (i2 << 2) >> 2] | 0) | 0, (HEAP32[i7 + (i5 << 2) >> 2] | 0) - i4 | 0) | 0;
     i4 = HEAP32[i1 + 4 >> 2] | 0;
     break;
    } else i14 = 11;
   } else i14 = 11; while (0);
   if ((i14 | 0) == 11) {
    i14 = 0;
    i2 = HEAP32[i10 >> 2] | 0;
   }
   HEAP32[i15 + (i13 << 2) >> 2] = i2;
   i13 = i13 + 1 | 0;
  } while (i13 >>> 0 < i4 >>> 0);
  i1 = HEAP32[i12 + 532 >> 2] | 0;
  if (!i1) i1 = 6; else i14 = 17;
 } else i14 = 17;
 if ((i14 | 0) == 17) {
  i7 = i1 + 4 | 0;
  if ((HEAP32[i7 >> 2] | 0) == (i3 | 0)) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) i1 = 0; else {
    i8 = i1 + 136 | 0;
    i6 = 0;
    while (1) {
     if (!i3) {
      i4 = 0;
      i3 = 65536;
     } else {
      i5 = 0;
      i2 = 65536;
      while (1) {
       i3 = HEAP32[i15 + (i5 << 2) >> 2] | 0;
       i3 = (i3 | 0) < 0 ? 0 : i3;
       i3 = (i3 | 0) > 65536 ? 65536 : i3;
       i3 = _FT_MulFix(i2, (1 << i5 & i6 | 0) == 0 ? 65536 - i3 | 0 : i3) | 0;
       i5 = i5 + 1 | 0;
       i4 = HEAP32[i7 >> 2] | 0;
       if (i5 >>> 0 >= i4 >>> 0) break; else i2 = i3;
      }
      i2 = HEAP32[i1 >> 2] | 0;
     }
     HEAP32[(HEAP32[i8 >> 2] | 0) + (i6 << 2) >> 2] = i3;
     i6 = i6 + 1 | 0;
     if (i6 >>> 0 >= i2 >>> 0) {
      i1 = 0;
      break;
     } else i3 = i4;
    }
   }
  } else i1 = 6;
 }
 i14 = i1;
 STACKTOP = i15;
 return i14 | 0;
}

function _cff_subfont_load(i6, i2, i1, i5, i4, i3) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 HEAP32[i7 + 4 >> 2] = 0;
 _memset(i7 + 8 | 0, 0, 408) | 0;
 HEAP32[i7 + 8 + 404 >> 2] = i7 + 8 + 16;
 HEAP32[i7 + 8 + 408 >> 2] = 4096;
 HEAP32[i7 + 8 + 412 >> 2] = i6;
 HEAP32[i7 + 8 >> 2] = i3;
 _memset(i6 | 0, 0, 172) | 0;
 HEAP32[i6 + 32 >> 2] = -6553600;
 HEAP32[i6 + 36 >> 2] = 3276800;
 HEAP32[i6 + 44 >> 2] = 2;
 HEAP32[i6 + 48 >> 2] = 65536;
 HEAP32[i6 + 60 >> 2] = 65536;
 HEAP32[i6 + 156 >> 2] = 8720;
 HEAP32[i6 >> 2] = 65535;
 HEAP32[i6 + 4 >> 2] = 65535;
 HEAP32[i6 + 8 >> 2] = 65535;
 HEAP32[i6 + 12 >> 2] = 65535;
 HEAP32[i6 + 16 >> 2] = 65535;
 HEAP32[i6 + 20 >> 2] = 65535;
 HEAP32[i6 + 128 >> 2] = 65535;
 HEAP32[i6 + 132 >> 2] = 65535;
 HEAP32[i6 + 136 >> 2] = 65535;
 HEAP32[i6 + 172 >> 2] = 65535;
 i1 = _cff_index_access_element(i2, i1, i7 + 4 | 0, i7) | 0;
 if (!i1) {
  i1 = HEAP32[i7 + 4 >> 2] | 0;
  i1 = _cff_parser_run(i7 + 8 | 0, i1, i1 + (HEAP32[i7 >> 2] | 0) | 0) | 0;
 }
 if (!(HEAP32[i2 + 28 >> 2] | 0)) _FT_Stream_ReleaseFrame(HEAP32[i2 >> 2] | 0, i7 + 4 | 0);
 if (i1) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 if ((HEAP32[i6 + 132 >> 2] | 0) != 65535) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = HEAP32[i6 + 116 >> 2] | 0;
 do if ((i1 | 0) != 0 ? (HEAP32[i6 + 120 >> 2] | 0) != 0 : 0) {
  _memset(i6 + 176 | 0, 0, 360) | 0;
  HEAP32[i6 + 376 >> 2] = 7;
  HEAP32[i6 + 380 >> 2] = 1;
  HEAP32[i6 + 508 >> 2] = -1;
  HEAP32[i6 + 516 >> 2] = 3932;
  HEAP32[i6 + 372 >> 2] = 2596864;
  _memset(i7 + 8 | 0, 0, 408) | 0;
  HEAP32[i7 + 8 + 404 >> 2] = i7 + 8 + 16;
  HEAP32[i7 + 8 + 408 >> 2] = 8192;
  HEAP32[i7 + 8 + 412 >> 2] = i6 + 176;
  HEAP32[i7 + 8 >> 2] = i3;
  i1 = _FT_Stream_Seek(i5, i1 + i4 | 0) | 0;
  if (i1) {
   i6 = i1;
   STACKTOP = i7;
   return i6 | 0;
  }
  i1 = _FT_Stream_EnterFrame(i5, HEAP32[i6 + 120 >> 2] | 0) | 0;
  if (i1) {
   i6 = i1;
   STACKTOP = i7;
   return i6 | 0;
  }
  i1 = _cff_parser_run(i7 + 8 | 0, HEAP32[i5 + 32 >> 2] | 0, HEAP32[i5 + 36 >> 2] | 0) | 0;
  _FT_Stream_ExitFrame(i5);
  if (!i1) {
   HEAP8[i6 + 176 >> 0] = (HEAPU8[i6 + 176 >> 0] | 0) & 254;
   break;
  } else {
   i6 = i1;
   STACKTOP = i7;
   return i6 | 0;
  }
 } while (0);
 i1 = HEAP32[i6 + 524 >> 2] | 0;
 if (!i1) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _FT_Stream_Seek(i5, i1 + i4 + (HEAP32[i6 + 116 >> 2] | 0) | 0) | 0;
 if (i1) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _cff_index_init(i6 + 536 | 0, i5, 1) | 0;
 if (i1) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 i6 = _cff_index_get_pointers(i6 + 536 | 0, i6 + 568 | 0, 0) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __Z25DecodeDXT1BlockToRGBA8888PKtPhiii(i3, i2, i12, i11, i10) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = HEAP16[i3 >> 1] | 0;
 i8 = HEAP16[i3 + 2 >> 1] | 0;
 if ((i7 & 65535) > (i8 & 65535)) {
  i1 = (((((((((i8 & 65535) >>> 5 & 63) + (((i7 & 65535) >>> 5 & 63) << 1) | 0) >>> 0) / 3 | 0) * 255 | 0) + 31 | 0) >>> 0) / 63 | 0) << 8 & 65280 | ((((((((i8 & 31) + ((i7 & 31) << 1) | 0) >>> 0) / 3 | 0) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) << 16 | (((((((((i8 & 65535) >>> 11 & 65535) + (((i7 & 65535) >>> 11 & 65535) << 1) | 0) >>> 0) / 3 | 0) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) & 255;
  i9 = (((((((((i8 & 31) << 1) + (i7 & 31) | 0) >>> 0) / 3 | 0) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) << 16 | ((((((((((i8 & 65535) >>> 5 & 63) << 1) + ((i7 & 65535) >>> 5 & 63) | 0) >>> 0) / 3 | 0) * 255 | 0) + 31 | 0) >>> 0) / 63 | 0) << 8 & 65280 | ((((((((((i8 & 65535) >>> 11 & 65535) << 1) + ((i7 & 65535) >>> 11 & 65535) | 0) >>> 0) / 3 | 0) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) & 255 | -16777216;
 } else {
  i1 = ((((((((i8 & 65535) >>> 5 & 63) + ((i7 & 65535) >>> 5 & 63) | 0) >>> 1) * 255 | 0) + 31 | 0) >>> 0) / 63 | 0) << 8 & 65280 | (((((((i8 & 31) + (i7 & 31) | 0) >>> 1) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) << 16 | ((((((((i8 & 65535) >>> 11 & 65535) + ((i7 & 65535) >>> 11 & 65535) | 0) >>> 1) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) & 255;
  i9 = ((((((((i8 & 65535) >>> 5 & 63) + ((i7 & 65535) >>> 5 & 63) | 0) >>> 1) * 255 | 0) + 31 | 0) >>> 0) / 63 | 0) << 8 & 65280 | (((((((i8 & 31) + (i7 & 31) | 0) >>> 1) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) << 16 & 16711680 | ((((((((i8 & 65535) >>> 11 & 65535) + ((i7 & 65535) >>> 11 & 65535) | 0) >>> 1) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) & 255;
 }
 i6 = i1 | -16777216;
 if ((i10 | 0) <= 0) return;
 if ((i11 | 0) > 0) {
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  i5 = 0;
 } else return;
 while (1) {
  i4 = 0;
  do {
   i3 = i1 & 3;
   i1 = i1 >>> 2;
   if (i3 >>> 0 < 2) i3 = ((i3 | 0) == 0 ? ((((((i7 & 65535) >>> 5 & 63) * 255 | 0) + 31 | 0) >>> 0) / 63 | 0) << 8 & 65280 | (((((i7 & 31) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) << 16 | ((((((i7 & 65535) >>> 11 & 65535) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) & 255 : ((((((i8 & 65535) >>> 5 & 63) * 255 | 0) + 31 | 0) >>> 0) / 63 | 0) << 8 & 65280 | (((((i8 & 31) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) << 16 | ((((((i8 & 65535) >>> 11 & 65535) * 255 | 0) + 15 | 0) >>> 0) / 31 | 0) & 255) | -16777216; else i3 = (i3 | 0) == 2 ? i6 : i9;
   HEAP32[i2 + i4 >> 2] = i3;
   i4 = i4 + 4 | 0;
  } while ((i4 | 0) < (i11 << 2 | 0));
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == (i10 | 0)) break; else {
   i2 = i2 + i12 | 0;
   i1 = i1 >>> (4 - i11 << 1);
  }
 }
 return;
}

function _FT_Raccess_Get_DataOffsets(i1, i11, i8, i15, i7, i14, i13) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 i8 = i8 | 0;
 i15 = i15 | 0;
 i7 = i7 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i12 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = HEAP32[i1 >> 2] | 0;
 i1 = _FT_Stream_Seek(i11, i8) | 0;
 HEAP32[i16 >> 2] = i1;
 if (i1) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i6 = _FT_Stream_ReadUShort(i11, i16) | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if (i1) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 i5 = 0;
 while (1) {
  i4 = _FT_Stream_ReadULong(i11, i16) | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  if (i1) {
   i4 = 22;
   break;
  }
  i3 = _FT_Stream_ReadUShort(i11, i16) | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  if (i1) {
   i4 = 22;
   break;
  }
  i2 = _FT_Stream_ReadUShort(i11, i16) | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  if (i1) {
   i4 = 22;
   break;
  }
  if ((i4 | 0) == (i7 | 0)) {
   i4 = 9;
   break;
  }
  if ((i5 | 0) < (i6 & 65535 | 0)) i5 = i5 + 1 | 0; else {
   i1 = 1;
   i4 = 22;
   break;
  }
 }
 if ((i4 | 0) == 9) {
  HEAP32[i13 >> 2] = (i3 & 65535) + 1;
  i1 = _FT_Stream_Seek(i11, (i2 & 65535) + i8 | 0) | 0;
  HEAP32[i16 >> 2] = i1;
  if (i1) {
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i3 = _ft_mem_realloc(i10, 8, 0, HEAP32[i13 >> 2] | 0, 0, i16) | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  if (i1) {
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i1 = HEAP32[i13 >> 2] | 0;
  L23 : do if ((i1 | 0) > 0) {
   i2 = 0;
   while (1) {
    HEAP16[i3 + (i2 << 3) >> 1] = _FT_Stream_ReadUShort(i11, i16) | 0;
    if (HEAP32[i16 >> 2] | 0) break L23;
    i8 = _FT_Stream_Skip(i11, 2) | 0;
    HEAP32[i16 >> 2] = i8;
    if (i8) break L23;
    i1 = _FT_Stream_ReadULong(i11, i16) | 0;
    if (HEAP32[i16 >> 2] | 0) break L23;
    i8 = _FT_Stream_Skip(i11, 4) | 0;
    HEAP32[i16 >> 2] = i8;
    if (i8) break L23;
    HEAP32[i3 + (i2 << 3) + 4 >> 2] = i1 & 16777215;
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i13 >> 2] | 0;
    if ((i2 | 0) >= (i1 | 0)) {
     i9 = i1;
     i4 = 17;
     break;
    }
   }
  } else {
   i9 = i1;
   i4 = 17;
  } while (0);
  if ((i4 | 0) == 17 ? (_qsort(i3, i9, 8, 148), i12 = _ft_mem_realloc(i10, 4, 0, HEAP32[i13 >> 2] | 0, 0, i16) | 0, (HEAP32[i16 >> 2] | 0) == 0) : 0) {
   if ((HEAP32[i13 >> 2] | 0) > 0) {
    i1 = 0;
    do {
     HEAP32[i12 + (i1 << 2) >> 2] = (HEAP32[i3 + (i1 << 3) + 4 >> 2] | 0) + i15;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < (HEAP32[i13 >> 2] | 0));
   }
   HEAP32[i14 >> 2] = i12;
   HEAP32[i16 >> 2] = 0;
  }
  _ft_mem_free(i10, i3);
  i15 = HEAP32[i16 >> 2] | 0;
  STACKTOP = i16;
  return i15 | 0;
 } else if ((i4 | 0) == 22) {
  STACKTOP = i16;
  return i1 | 0;
 }
 return 0;
}

function __ZN20ShaderConstantBuffer14BindToMaterialE10ShaderTypePKcPK8Material(i9, i6, i3, i8) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if (!i8) {
  STACKTOP = i10;
  return;
 }
 if (!(HEAP32[i8 >> 2] | 0)) {
  STACKTOP = i10;
  return;
 }
 i1 = HEAP32[i8 + 44 >> 2] | 0;
 if (!i1) {
  STACKTOP = i10;
  return;
 }
 i2 = HEAP32[i8 + 48 >> 2] | 0;
 if (!i2) {
  STACKTOP = i10;
  return;
 }
 i1 = (i6 | 0) == 1 ? i1 : i2;
 i7 = __ZNK6Shader13FindUboByNameEPKc(i1, i3) | 0;
 if (!i7) {
  STACKTOP = i10;
  return;
 }
 if (!(HEAP32[i9 + 24 >> 2] | 0)) __ZN20ShaderConstantBuffer16CreateFromShaderEPK6ShaderPKc(i9, i1, HEAP32[i7 + 16 >> 2] | 0);
 HEAP32[i9 + 28 >> 2] = HEAP32[i8 >> 2];
 __ZN20ShaderConstantBuffer18BindToUniformBlockEPK8MaterialRKN6Shader19UniformBufferObjectE(i9, i8, i7);
 i1 = HEAP32[i9 + 4 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i9 + 4 >> 2] = 0;
 i2 = HEAP32[i9 + 24 >> 2] | 0;
 if (!i2) {
  HEAP32[i9 + 8 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = __Znaj(0) | 0;
  STACKTOP = i10;
  return;
 }
 i3 = HEAP32[i9 + 12 >> 2] | 0;
 i1 = 0;
 i4 = 0;
 do {
  i5 = (HEAP32[i3 + (i4 * 156 | 0) + 140 >> 2] | 0) + (HEAP32[i3 + (i4 * 156 | 0) + 136 >> 2] | 0) | 0;
  i1 = (i1 | 0) < (i5 | 0) ? i5 : i1;
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) != (i2 | 0));
 HEAP32[i9 + 8 >> 2] = i1;
 HEAP32[i9 + 4 >> 2] = __Znaj((i1 | 0) > -1 ? i1 : -1) | 0;
 if (!i2) {
  STACKTOP = i10;
  return;
 }
 i5 = (i6 | 0) == 1 ? i8 + 44 | 0 : i8 + 48 | 0;
 i3 = (i6 | 0) == 1 ? 299055 : 299062;
 i4 = 0;
 do {
  i6 = (HEAP32[i9 + 12 >> 2] | 0) + (i4 * 156 | 0) | 0;
  HEAP32[i10 + 16 >> 2] = 0;
  HEAP32[i10 + 16 + 4 >> 2] = 0;
  HEAP32[i10 + 16 + 8 >> 2] = 0;
  HEAP32[i10 + 16 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i10 + 16 | 0, i6);
  i6 = HEAP32[i7 + 16 >> 2] | 0;
  if ((i6 | 0) != 0 ? (HEAP8[i6 >> 0] | 0) != 0 : 0) {
   i2 = HEAP32[i9 + 12 >> 2] | 0;
   i1 = HEAP32[i2 + (i4 * 156 | 0) + 136 >> 2] | 0;
   HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] = i1;
  } else {
   i1 = _glGetUniformLocation(HEAP32[i8 >> 2] | 0, HEAP32[i10 + 16 >> 2] | 0) | 0;
   i2 = HEAP32[i9 + 12 >> 2] | 0;
   HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] = i1;
  }
  if ((i1 | 0) == -1 ? (HEAP32[i2 + (i4 * 156 | 0) + 144 >> 2] | 0) != 11 : 0) {
   i6 = HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[i10 >> 2] = i2 + (i4 * 156 | 0);
   HEAP32[i10 + 4 >> 2] = i3;
   HEAP32[i10 + 8 >> 2] = (i6 | 0) != 0 ? i6 : 299068;
   __ZN4math22PrintToConsoleVariadicEjPKcz(4, 299077, i10);
  }
  i1 = HEAP32[i10 + 16 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i10 + 16 >> 2] = 0;
  i4 = i4 + 1 | 0;
 } while (i4 >>> 0 < (HEAP32[i9 + 24 >> 2] | 0) >>> 0);
 STACKTOP = i10;
 return;
}

function __ZN11Application6RenderEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, d3 = 0.0, i4 = 0, i6 = 0, f7 = f0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 d3 = +__ZN4math5Clock4TickEv();
 i1 = __ZN4math8FloorIntEf(Math_fround(Math_fround(HEAPF32[i5 + 1268 >> 2]) * Math_fround(.5))) | 0;
 HEAP32[i5 + 2620 >> 2] = i1;
 f7 = Math_fround(HEAPF32[i5 + 1268 >> 2]);
 HEAPF32[i5 + 2624 >> 2] = Math_fround(Math_fround(f7 - Math_fround(Math_fround(i1 | 0) * Math_fround(2.0))) * Math_fround(.5));
 HEAPF32[i5 + 2628 >> 2] = Math_fround(f7 * Math_fround(.300000012));
 __ZN8Graphics5ClearEbbbfffffi(i5 + 4 | 0, 1, 1, 1, Math_fround(.200000003), Math_fround(.300000012), Math_fround(.300000012), Math_fround(1.0), Math_fround(1.0), 0);
 i1 = i6 + 32 | 0;
 i2 = i5 + 2464 | 0;
 i4 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 __ZN11Application18RenderNonInstancedERKN4math8float4x4E(i5, i6 + 32 | 0);
 __ZN8Graphics12ApplyTextureE10ShaderTypeiP7Texture(i5 + 4 | 0, 2, 0, i5 + 1688 | 0);
 __ZN8Graphics19ApplyTextureSamplerE10ShaderTypeiPK14TextureSampler(i5 + 4 | 0, 2, 0, i5 + 1524 | 0);
 __ZN8Graphics13ApplyMaterialEPK8Material(i5 + 4 | 0, i5 + 1460 | 0);
 __ZN8Graphics19ApplyConstantBufferEPK20ShaderConstantBufferi(i5 + 4 | 0, i5 + 1556 | 0, -1);
 __ZN8Graphics14ApplyAndRenderEP12VertexBufferii(i5 + 4 | 0, i5 + 1328 | 0, 2147483647, 0);
 d3 = (+__ZN4math5Clock4TickEv() - d3) * 1.0e3;
 HEAPF32[i5 + 2600 >> 2] = Math_fround(d3 / +__ZN4math5Clock11TicksPerSecEv());
 d3 = +__ZN4math5Clock4TickEv();
 d3 = (+__ZN4math5Clock4TickEv() - d3) * 1.0e3;
 HEAPF32[i5 + 2604 >> 2] = Math_fround(d3 / +__ZN4math5Clock11TicksPerSecEv());
 HEAP32[79] = (HEAP32[79] | 0) + 1;
 if (!(HEAP8[i5 + 2552 >> 0] | 0)) {
  STACKTOP = i6;
  return;
 }
 i2 = (HEAP32[i5 + 2568 >> 2] | 0) + 300 | 0;
 i1 = (HEAP32[i5 + 2556 >> 2] | 0) + 1 | 0;
 HEAP32[i5 + 2556 >> 2] = i1;
 if ((i1 | 0) == 300) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 289510, i6);
  HEAPF64[i5 + 2560 >> 3] = +__ZN4math5Clock4TickEv();
  i1 = HEAP32[i5 + 2556 >> 2] | 0;
 }
 if ((i1 | 0) == (i2 | 0)) {
  d3 = +__ZN4math5Clock4TickEv();
  d3 = d3 - +HEAPF64[i5 + 2560 >> 3];
  f7 = Math_fround(d3 / +Math_fround(+__ZN4math5Clock11TicksPerSecEv()));
  i4 = (HEAP32[i5 + 2556 >> 2] | 0) + -300 | 0;
  HEAP32[i6 + 8 >> 2] = i4;
  HEAPF64[i6 + 8 + 8 >> 3] = +f7;
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 289551, i6 + 8 | 0);
  HEAPF64[i6 + 24 >> 3] = +f7;
  __ZN4math22PrintToConsoleVariadicEjPKcz(1, 289628, i6 + 24 | 0);
  +_emscripten_asm_const_2(0, +(+(i4 | 0)), +(+f7));
  __ZN9MainClass15QuitApplicationEi(i5, 0);
 } else {
  STACKTOP = i6;
  return;
 }
}

function __ZN11ApplicationD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = 268;
 i1 = HEAP32[i3 + 2276 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 2280 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i3 + 2280 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 __ZN20ShaderConstantBufferD2Ev(i3 + 2240 | 0);
 __ZN8MaterialD2Ev(i3 + 2176 | 0);
 __ZN11IndexBufferD2Ev(i3 + 2132 | 0);
 __ZN12VertexBufferD2Ev(i3 + 2e3 | 0);
 __ZN12VertexBufferD2Ev(i3 + 1868 | 0);
 i1 = HEAP32[i3 + 1848 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 1852 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i3 + 1852 >> 2] = i2 + (~(((i2 + -12 - i1 | 0) >>> 0) / 12 | 0) * 12 | 0);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i3 + 1836 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 1840 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i3 + 1840 >> 2] = i2 + (~(((i2 + -12 - i1 | 0) >>> 0) / 12 | 0) * 12 | 0);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i3 + 1820 >> 2] | 0;
 if (HEAP32[i3 + 1832 >> 2] | 0) {
  i2 = 0;
  do {
   i1 = i1 + (i2 << 4) | 0;
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i3 + 1820 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i3 + 1832 >> 2] | 0) >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i3 + 1820 >> 2] = 0;
 HEAP32[i3 + 1820 + 4 >> 2] = 0;
 HEAP32[i3 + 1820 + 8 >> 2] = 0;
 HEAP32[i3 + 1820 + 12 >> 2] = 0;
 i1 = HEAP32[i3 + 1804 >> 2] | 0;
 if (HEAP32[i3 + 1816 >> 2] | 0) {
  i2 = 0;
  do {
   i1 = i1 + (i2 * 12 | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i3 + 1804 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i3 + 1816 >> 2] | 0) >>> 0);
 }
 if (!i1) {
  HEAP32[i3 + 1804 >> 2] = 0;
  HEAP32[i3 + 1804 + 4 >> 2] = 0;
  HEAP32[i3 + 1804 + 8 >> 2] = 0;
  HEAP32[i3 + 1804 + 12 >> 2] = 0;
  i2 = i3 + 1592 | 0;
  __ZN12FTGlyphCacheD2Ev(i2);
  i2 = i3 + 1556 | 0;
  __ZN20ShaderConstantBufferD2Ev(i2);
  i2 = i3 + 1460 | 0;
  __ZN8MaterialD2Ev(i2);
  i2 = i3 + 1328 | 0;
  __ZN12VertexBufferD2Ev(i2);
  __ZN9MainClassD2Ev(i3);
  STACKTOP = i4;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i3 + 1804 >> 2] = 0;
 HEAP32[i3 + 1804 + 4 >> 2] = 0;
 HEAP32[i3 + 1804 + 8 >> 2] = 0;
 HEAP32[i3 + 1804 + 12 >> 2] = 0;
 i2 = i3 + 1592 | 0;
 __ZN12FTGlyphCacheD2Ev(i2);
 i2 = i3 + 1556 | 0;
 __ZN20ShaderConstantBufferD2Ev(i2);
 i2 = i3 + 1460 | 0;
 __ZN8MaterialD2Ev(i2);
 i2 = i3 + 1328 | 0;
 __ZN12VertexBufferD2Ev(i2);
 __ZN9MainClassD2Ev(i3);
 STACKTOP = i4;
 return;
}

function _cff_parse_private_dict(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[i4 + 412 >> 2] | 0;
 if ((HEAP32[i4 + 404 >> 2] | 0) >>> 0 < (i4 + 24 | 0) >>> 0) {
  i6 = 161;
  return i6 | 0;
 }
 i2 = HEAP32[i4 + 16 >> 2] | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 L4 : do if (i3 << 24 >> 24 == 30) {
  i1 = (_cff_parse_real(i2, i1, 0, 0) | 0) >> 16;
  i5 = HEAP32[i4 + 20 >> 2] | 0;
 } else switch (i3 << 24 >> 24) {
 case 28:
  {
   if ((i2 + 3 | 0) >>> 0 > i1 >>> 0) {
    i5 = i1;
    i1 = 0;
    break L4;
   }
   i5 = i1;
   i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 + 2 >> 0] | 0)) << 16 >> 16;
   break L4;
  }
 case 29:
  {
   if ((i2 + 5 | 0) >>> 0 > i1 >>> 0) {
    i5 = i1;
    i1 = 0;
    break L4;
   }
   i5 = i1;
   i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 1 >> 0] | 0) << 24 | (HEAPU8[i2 + 3 >> 0] | 0) << 8 | (HEAPU8[i2 + 4 >> 0] | 0);
   break L4;
  }
 default:
  {
   if ((i3 & 255) < 247) {
    i5 = i1;
    i1 = (i3 & 255) + -139 | 0;
    break L4;
   }
   if ((i3 & 255) < 251) {
    if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
     i5 = i1;
     i1 = 0;
     break L4;
    }
    i5 = i1;
    i1 = (HEAPU8[i2 + 1 >> 0] | 0 | ((i3 & 255) << 8) + -63232) + 108 | 0;
    break L4;
   } else {
    if ((i2 + 2 | 0) >>> 0 > i1 >>> 0) {
     i5 = i1;
     i1 = 0;
     break L4;
    }
    i5 = i1;
    i1 = (251 - (i3 & 255) << 8) + -108 - (HEAPU8[i2 + 1 >> 0] | 0) | 0;
    break L4;
   }
  }
 } while (0);
 HEAP32[i6 + 120 >> 2] = i1;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i2 = HEAP8[i5 >> 0] | 0;
 L22 : do if (i2 << 24 >> 24 == 30) i1 = (_cff_parse_real(i5, i1, 0, 0) | 0) >> 16; else {
  i3 = i5 + 1 | 0;
  switch (i2 << 24 >> 24) {
  case 28:
   {
    if ((i5 + 3 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     break L22;
    }
    i1 = ((HEAPU8[i3 >> 0] | 0) << 8 | (HEAPU8[i5 + 2 >> 0] | 0)) << 16 >> 16;
    break L22;
   }
  case 29:
   {
    if ((i5 + 5 | 0) >>> 0 > i1 >>> 0) {
     i1 = 0;
     break L22;
    }
    i1 = (HEAPU8[i5 + 2 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i5 + 3 >> 0] | 0) << 8 | (HEAPU8[i5 + 4 >> 0] | 0);
    break L22;
   }
  default:
   {
    if ((i2 & 255) < 247) {
     i1 = (i2 & 255) + -139 | 0;
     break L22;
    }
    i1 = (i5 + 2 | 0) >>> 0 > i1 >>> 0;
    if ((i2 & 255) < 251) {
     if (i1) {
      i1 = 0;
      break L22;
     }
     i1 = (HEAPU8[i3 >> 0] | 0 | ((i2 & 255) << 8) + -63232) + 108 | 0;
     break L22;
    } else {
     if (i1) {
      i1 = 0;
      break L22;
     }
     i1 = (251 - (i2 & 255) << 8) + -108 - (HEAPU8[i3 >> 0] | 0) | 0;
     break L22;
    }
   }
  }
 } while (0);
 HEAP32[i6 + 116 >> 2] = i1;
 i6 = 0;
 return i6 | 0;
}

function _FNT_Load_Glyph(i10, i2, i3, i1) {
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 HEAP32[i9 >> 2] = 0;
 if (!i1) {
  HEAP32[i9 >> 2] = 6;
  i10 = 6;
  STACKTOP = i9;
  return i10 | 0;
 }
 i8 = HEAP32[i1 + 132 >> 2] | 0;
 if ((i8 | 0) != 0 ? (HEAP32[i1 + 16 >> 2] | 0) >>> 0 > i3 >>> 0 : 0) {
  if (!i3) i1 = HEAPU8[i8 + 106 >> 0] | 0; else i1 = i3 + -1 | 0;
  i7 = (HEAP16[i8 + 4 >> 1] | 0) == 768;
  i5 = HEAP32[i8 + 160 >> 2] | 0;
  i1 = (Math_imul(i7 ? 6 : 4, i1) | 0) + (i7 ? 148 : 118) | 0;
  i6 = HEAP8[i5 + (i1 | 1) >> 0] << 8 | HEAPU8[i5 + i1 >> 0];
  HEAP32[i10 + 80 >> 2] = i6;
  if (i7) i4 = HEAPU8[i5 + (i1 + 4) >> 0] << 16 | HEAPU8[i5 + (i1 + 5) >> 0] << 24 | HEAPU8[i5 + (i1 + 3) >> 0] << 8 | HEAPU8[i5 + (i1 + 2) >> 0]; else i4 = HEAPU8[i5 + (i1 + 3) >> 0] << 8 | HEAPU8[i5 + (i1 + 2) >> 0];
  i1 = HEAP32[i8 + 8 >> 2] | 0;
  if (i4 >>> 0 >= i1 >>> 0) {
   HEAP32[i9 >> 2] = 3;
   i10 = 3;
   STACKTOP = i9;
   return i10 | 0;
  }
  i2 = HEAP32[(HEAP32[i10 + 4 >> 2] | 0) + 100 >> 2] | 0;
  HEAP32[i10 + 84 >> 2] = i6 + 7 >> 3;
  i3 = HEAPU16[i8 + 96 >> 1] | 0;
  HEAP32[i10 + 76 >> 2] = i3;
  HEAP8[i10 + 94 >> 0] = 1;
  if (((Math_imul(i6 + 7 >> 3, i3) | 0) + i4 | 0) >>> 0 >= i1 >>> 0) {
   HEAP32[i9 >> 2] = 3;
   i10 = 3;
   STACKTOP = i9;
   return i10 | 0;
  }
  i1 = _ft_mem_realloc(i2, i3, 0, i6 + 7 >> 3, 0, i9) | 0;
  HEAP32[i10 + 88 >> 2] = i1;
  i2 = HEAP32[i9 >> 2] | 0;
  if (i2) {
   i10 = i2;
   STACKTOP = i9;
   return i10 | 0;
  }
  if ((i6 + 7 >> 3 | 0) > 0) {
   i7 = i1;
   i1 = i5 + i4 | 0;
   i4 = i6 + 7 >> 3;
   while (1) {
    i6 = HEAP32[i10 + 76 >> 2] | 0;
    i3 = i1 + i6 | 0;
    if ((i6 | 0) > 0) {
     i2 = i7;
     while (1) {
      HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 < i3 >>> 0) i2 = i2 + (HEAP32[i10 + 84 >> 2] | 0) | 0; else break;
     }
    }
    if ((i4 | 0) > 1) {
     i7 = i7 + 1 | 0;
     i4 = i4 + -1 | 0;
    } else break;
   }
  }
  HEAP32[(HEAP32[i10 + 156 >> 2] | 0) + 4 >> 2] = 1;
  HEAP32[i10 + 100 >> 2] = 0;
  i7 = HEAPU16[i8 + 80 >> 1] | 0;
  HEAP32[i10 + 104 >> 2] = i7;
  HEAP32[i10 + 72 >> 2] = 1651078259;
  i6 = HEAP32[i10 + 80 >> 2] << 6;
  HEAP32[i10 + 24 >> 2] = i6;
  i8 = HEAP32[i10 + 76 >> 2] << 6;
  HEAP32[i10 + 28 >> 2] = i8;
  HEAP32[i10 + 40 >> 2] = i6;
  HEAP32[i10 + 32 >> 2] = 0;
  HEAP32[i10 + 36 >> 2] = i7 << 6;
  _ft_synthesize_vertical_metrics(i10 + 24 | 0, i8);
  i10 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i9;
  return i10 | 0;
 }
 HEAP32[i9 >> 2] = 6;
 i10 = 6;
 STACKTOP = i9;
 return i10 | 0;
}

function _ft_raster1_render(i9, i10, i8, i2) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((HEAP32[i10 + 72 >> 2] | 0) != (HEAP32[i9 + 16 >> 2] | 0)) {
  HEAP32[i11 + 64 >> 2] = 6;
  i10 = 6;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = HEAP32[i9 + 12 >> 2] | 0;
 if ((i8 | 0) == 2) {
  if ((i1 | 0) == 275144) {
   i10 = 19;
   STACKTOP = i11;
   return i10 | 0;
  }
 } else if ((i1 | 0) == 275084) {
  i10 = 19;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (i2) _FT_Outline_Translate(i10 + 108 | 0, HEAP32[i2 >> 2] | 0, HEAP32[i2 + 4 >> 2] | 0);
 _FT_Outline_Get_CBox(i10 + 108 | 0, i11);
 i3 = (HEAP32[i11 >> 2] | 0) + 32 & -64;
 HEAP32[i11 >> 2] = i3;
 i4 = (HEAP32[i11 + 4 >> 2] | 0) + 32 & -64;
 HEAP32[i11 + 4 >> 2] = i4;
 i5 = (HEAP32[i11 + 8 >> 2] | 0) + 32 & -64;
 HEAP32[i11 + 8 >> 2] = i5;
 i6 = (HEAP32[i11 + 12 >> 2] | 0) + 32 & -64;
 HEAP32[i11 + 12 >> 2] = i6;
 if ((i6 - i4 >> 6 | i5 - i3 >> 6) >>> 0 > 65535) {
  HEAP32[i11 + 64 >> 2] = 6;
  i10 = 6;
  STACKTOP = i11;
  return i10 | 0;
 }
 i7 = HEAP32[i9 + 8 >> 2] | 0;
 if (HEAP32[(HEAP32[i10 + 156 >> 2] | 0) + 4 >> 2] & 1) {
  _ft_mem_free(i7, HEAP32[i10 + 88 >> 2] | 0);
  HEAP32[i10 + 88 >> 2] = 0;
  i2 = (HEAP32[i10 + 156 >> 2] | 0) + 4 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
 }
 if (!(i8 & 2)) {
  HEAP16[i10 + 92 >> 1] = 256;
  i1 = 2;
  i2 = (i5 - i3 >> 6) + 3 & -4;
 } else {
  i1 = 1;
  i2 = ((i5 - i3 >> 6) + 15 | 0) >>> 4 << 1;
 }
 HEAP8[i10 + 94 >> 0] = i1;
 HEAP32[i10 + 80 >> 2] = i5 - i3 >> 6;
 HEAP32[i10 + 76 >> 2] = i6 - i4 >> 6;
 HEAP32[i10 + 84 >> 2] = i2;
 HEAP32[i10 + 88 >> 2] = _ft_mem_realloc(i7, i6 - i4 >> 6, 0, i2, 0, i11 + 64 | 0) | 0;
 i1 = HEAP32[i11 + 64 >> 2] | 0;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = (HEAP32[i10 + 156 >> 2] | 0) + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 _FT_Outline_Translate(i10 + 108 | 0, 0 - (HEAP32[i11 >> 2] | 0) | 0, 0 - (HEAP32[i11 + 4 >> 2] | 0) | 0);
 HEAP32[i11 + 16 >> 2] = i10 + 76;
 HEAP32[i11 + 16 + 4 >> 2] = i10 + 108;
 HEAP32[i11 + 16 + 8 >> 2] = (HEAP8[i10 + 94 >> 0] | 0) == 2 & 1;
 HEAP32[i11 + 64 >> 2] = FUNCTION_TABLE_iii[HEAP32[i9 + 56 >> 2] & 255](HEAP32[i9 + 52 >> 2] | 0, i11 + 16 | 0) | 0;
 _FT_Outline_Translate(i10 + 108 | 0, HEAP32[i11 >> 2] | 0, HEAP32[i11 + 4 >> 2] | 0);
 i1 = HEAP32[i11 + 64 >> 2] | 0;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i10 + 72 >> 2] = 1651078259;
 HEAP32[i10 + 100 >> 2] = HEAP32[i11 >> 2] >> 6;
 HEAP32[i10 + 104 >> 2] = HEAP32[i11 + 12 >> 2] >> 6;
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function __ZN12VertexBuffer14BindToMaterialEPK8Material(i10, i9) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i9) {
  STACKTOP = i11;
  return;
 }
 if (!(HEAP32[i9 >> 2] | 0)) {
  STACKTOP = i11;
  return;
 }
 if (!(HEAP32[i9 + 44 >> 2] | 0)) {
  STACKTOP = i11;
  return;
 }
 if (!(HEAP32[i9 + 48 >> 2] | 0)) {
  STACKTOP = i11;
  return;
 }
 HEAP32[i10 + 112 >> 2] = 0;
 i1 = HEAP32[i10 + 44 >> 2] | 0;
 i3 = i1 >>> 0 < 32 ? 32 : i1;
 if (i3 >>> 0 >= (HEAP32[i10 + 108 >> 2] | 0) >>> 0) {
  i4 = __Znaj(i3 >>> 0 > 1073741823 ? -1 : i3 << 2) | 0;
  i2 = HEAP32[i10 + 100 >> 2] | 0;
  if (i2) {
   __ZdaPv(i2);
   i1 = HEAP32[i10 + 44 >> 2] | 0;
  }
  HEAP32[i10 + 100 >> 2] = i4;
  HEAP32[i10 + 108 >> 2] = i3;
 }
 if (!i1) {
  STACKTOP = i11;
  return;
 }
 i6 = 0;
 do {
  i1 = HEAP32[i10 + 32 >> 2] | 0;
  if (HEAP32[i1 + (i6 * 52 | 0) >> 2] | 0) {
   i3 = _glGetAttribLocation(HEAP32[i9 >> 2] | 0, i1 + (i6 * 52 | 0) + 12 | 0) | 0;
   if ((i3 | 0) < 0) {
    i1 = HEAP32[i9 + 44 >> 2] | 0;
    if (!i1) i2 = 391650; else {
     i2 = HEAP32[i1 + 8 >> 2] | 0;
     i2 = (i2 | 0) == 0 ? 391650 : i2;
    }
    i1 = HEAP32[i9 + 48 >> 2] | 0;
    if (!i1) i1 = 391650; else {
     i1 = HEAP32[i1 + 8 >> 2] | 0;
     i1 = (i1 | 0) == 0 ? 391650 : i1;
    }
    i5 = HEAP32[i10 + 116 >> 2] | 0;
    HEAP32[i11 >> 2] = (HEAP32[i10 + 32 >> 2] | 0) + (i6 * 52 | 0) + 12;
    HEAP32[i11 + 4 >> 2] = i2;
    HEAP32[i11 + 8 >> 2] = i1;
    HEAP32[i11 + 12 >> 2] = (i5 | 0) == 0 ? 391650 : i5;
    __ZN4math22PrintToConsoleVariadicEjPKcz(4, 303042, i11);
    __Z14DumpShaderInfoj(HEAP32[(HEAP32[i9 + 44 >> 2] | 0) + 24 >> 2] | 0);
    __Z14DumpShaderInfoj(HEAP32[i9 >> 2] | 0);
   }
  } else i3 = -1;
  i1 = HEAP32[i10 + 112 >> 2] | 0;
  i2 = HEAP32[i10 + 108 >> 2] | 0;
  if (i1 >>> 0 >= i2 >>> 0 ? (i8 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i8 >>> 0 >= i2 >>> 0) : 0) {
   i5 = __Znaj(i8 >>> 0 > 1073741823 ? -1 : i8 << 2) | 0;
   i4 = HEAP32[i10 + 100 >> 2] | 0;
   if (!i1) if (!i4) i1 = 0; else i7 = 23; else {
    i2 = 0;
    do {
     HEAP32[i5 + (i2 << 2) >> 2] = HEAP32[i4 + (i2 << 2) >> 2];
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i1 | 0));
    i7 = 23;
   }
   if ((i7 | 0) == 23) {
    i7 = 0;
    __ZdaPv(i4);
    i1 = HEAP32[i10 + 112 >> 2] | 0;
   }
   HEAP32[i10 + 100 >> 2] = i5;
   HEAP32[i10 + 108 >> 2] = i8;
  }
  HEAP32[(HEAP32[i10 + 100 >> 2] | 0) + (i1 << 2) >> 2] = i3;
  HEAP32[i10 + 112 >> 2] = (HEAP32[i10 + 112 >> 2] | 0) + 1;
  i6 = i6 + 1 | 0;
 } while (i6 >>> 0 < (HEAP32[i10 + 44 >> 2] | 0) >>> 0);
 STACKTOP = i11;
 return;
}

function __ZNK4math3OBB11TriangulateER12VertexBufferiiib(i2, i7, i3, i4, i5, i1) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i10 = (Math_imul(i5 + i3 | 0, i4) | 0) + (Math_imul(i5, i3) | 0) | 0;
 i6 = (i10 * 12 | 0) >>> 0 < 32 ? 32 : i10 * 12 | 0;
 i8 = i6 >>> 0 > 357913941 ? -1 : i6 * 12 | 0;
 i9 = __Znaj(i8) | 0;
 i8 = __Znaj(i8) | 0;
 i6 = __Znaj(i6 >>> 0 > 536870911 ? -1 : i6 << 3) | 0;
 __ZN4math6float310FromScalarEf(i11 + 92 | 0, Math_fround(0.0));
 __ZNK4math6float3mlEf(i11 + 80 | 0, i2 + 12 | 0, Math_fround(2.0));
 __ZN4math4AABBC2ERKNS_6float3ES3_(i11 + 104 | 0, i11 + 92 | 0, i11 + 80 | 0);
 __ZNK4math4AABB11TriangulateEiiiPNS_6float3ES2_PNS_6float2Eb(i11 + 104 | 0, i3, i4, i5, i9, i8, i6, i1);
 __ZNK4math3OBB12LocalToWorldEv(i11 + 16 | 0, i2);
 i1 = ((Math_imul(i5 + i4 | 0, i3) | 0) + (Math_imul(i5, i4) | 0) | 0) * 12 | 0;
 __ZNK4math8float3x417BatchTransformPosEPNS_6float3Eii(i11 + 16 | 0, i9, i1, 12);
 __ZNK4math8float3x417BatchTransformDirEPNS_6float3Eii(i11 + 16 | 0, i8, i1, 12);
 i1 = __ZN12VertexBuffer14AppendVerticesEi(i7, i10 * 12 | 0) | 0;
 if ((i10 | 0) > 0) {
  i3 = 0;
  do {
   i2 = i3 + i1 | 0;
   __ZN4math6float4C2ERKNS_6float3Ef(i11 + 64 | 0, i9 + (i3 * 12 | 0) | 0, Math_fround(1.0));
   __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i7, i2, 1, 0, i11 + 64 | 0);
   if ((__ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i7 + 32 | 0, 2) | 0) > -1) {
    __ZN4math6float4C2ERKNS_6float3Ef(i11, i8 + (i3 * 12 | 0) | 0, Math_fround(0.0));
    __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i7, i2, 2, 0, i11);
   }
   if ((__ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i7 + 32 | 0, 6) | 0) > -1) __ZN12VertexBuffer9SetFloat2Ei18VertexDataSemanticiRKN4math6float2E(i7, i2, 6, 0, i6 + (i3 << 3) | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i10 * 12 | 0));
 }
 __ZdaPv(i6);
 if (i10) {
  i1 = 0;
  do {
   i7 = i8 + (i1 * 12 | 0) | 0;
   HEAP32[i7 >> 2] = HEAP32[i11 + 104 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i11 + 104 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i11 + 104 + 8 >> 2];
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (i10 * 12 | 0) >>> 0);
 }
 __ZdaPv(i8);
 if (!i10) {
  __ZdaPv(i9);
  STACKTOP = i11;
  return;
 } else i1 = 0;
 do {
  i8 = i9 + (i1 * 12 | 0) | 0;
  HEAP32[i8 >> 2] = HEAP32[i11 + 104 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 104 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i11 + 104 + 8 >> 2];
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < (i10 * 12 | 0) >>> 0);
 __ZdaPv(i9);
 STACKTOP = i11;
 return;
}

function __ZplRK17VertexDeclarationS1_(i9, i10, i11) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 HEAP32[i9 + 20 >> 2] = 0;
 HEAP32[i9 + 24 >> 2] = 0;
 __ZN5ArrayI13VertexElement9StdCAllocEaSERKS2_(i9, i10) | 0;
 if (HEAP32[i11 + 12 >> 2] | 0) {
  i1 = HEAP32[i9 + 12 >> 2] | 0;
  i12 = 0;
  do {
   i7 = (HEAP32[i11 >> 2] | 0) + (i12 * 52 | 0) | 0;
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   if (i1 >>> 0 >= i2 >>> 0 ? (i8 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i8 >>> 0 >= i2 >>> 0) : 0) {
    i6 = __Znaj(i8 >>> 0 > 82595524 ? -1 : i8 * 52 | 0) | 0;
    if (i8) {
     i1 = i6;
     do {
      HEAP32[i1 >> 2] = 0;
      HEAP32[i1 + 4 >> 2] = 0;
      HEAP8[i1 + 8 >> 0] = 0;
      HEAP8[i1 + 12 >> 0] = 0;
      HEAP8[i1 + 44 >> 0] = 0;
      HEAP32[i1 + 48 >> 2] = 0;
      i1 = i1 + 52 | 0;
     } while ((i1 | 0) != (i6 + (i8 * 52 | 0) | 0));
     i1 = HEAP32[i9 + 12 >> 2] | 0;
    }
    i5 = HEAP32[i9 >> 2] | 0;
    if (!i1) if (!i5) i1 = 0; else i4 = 15; else {
     i4 = 0;
     do {
      i2 = i6 + (i4 * 52 | 0) | 0;
      i3 = i5 + (i4 * 52 | 0) | 0;
      HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
      HEAP8[i2 + 8 >> 0] = HEAP8[i3 + 8 >> 0] | 0;
      i2 = 0;
      do {
       i3 = HEAP8[i5 + (i4 * 52 | 0) + 12 + i2 >> 0] | 0;
       if (!(i3 << 24 >> 24)) break;
       HEAP8[i6 + (i4 * 52 | 0) + 12 + i2 >> 0] = i3;
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) < 32);
      HEAP8[i6 + (i4 * 52 | 0) + 12 + i2 >> 0] = 0;
      HEAP32[i6 + (i4 * 52 | 0) + 48 >> 2] = i2;
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i1 | 0));
     i4 = 15;
    }
    if ((i4 | 0) == 15) {
     i4 = 0;
     __ZdaPv(i5);
     i1 = HEAP32[i9 + 12 >> 2] | 0;
    }
    HEAP32[i9 >> 2] = i6;
    HEAP32[i9 + 8 >> 2] = i8;
   }
   i3 = (HEAP32[i9 >> 2] | 0) + (i1 * 52 | 0) | 0;
   i1 = i7;
   i2 = i3 + 52 | 0;
   do {
    HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
    i3 = i3 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i3 | 0) < (i2 | 0));
   i1 = (HEAP32[i9 + 12 >> 2] | 0) + 1 | 0;
   HEAP32[i9 + 12 >> 2] = i1;
   i12 = i12 + 1 | 0;
  } while (i12 >>> 0 < (HEAP32[i11 + 12 >> 2] | 0) >>> 0);
 }
 i12 = HEAP32[i10 + 16 >> 2] | 0;
 HEAP32[i9 + 16 >> 2] = (i12 | 0) == 0 ? HEAP32[i11 + 16 >> 2] | 0 : i12;
 i12 = HEAP32[i10 + 20 >> 2] | 0;
 HEAP32[i9 + 20 >> 2] = (i12 | 0) == 0 ? HEAP32[i11 + 20 >> 2] | 0 : i12;
 HEAP32[i9 + 24 >> 2] = (HEAP32[i11 + 24 >> 2] | 0) + (HEAP32[i10 + 24 >> 2] | 0);
 return;
}

function __Z7HSL2RGBRKN4math6float3E(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var f1 = f0, f2 = f0, f4 = f0, f5 = f0, f6 = f0, f7 = f0, i9 = 0;
 f1 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 i9 = f1 < Math_fround(.0000999999974);
 f2 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 if (i9) {
  __ZN4math6float310FromScalarEf(i8, f2);
  return;
 }
 if (f2 < Math_fround(.5)) f1 = Math_fround(f2 * Math_fround(f1 + Math_fround(1.0))); else f1 = Math_fround(Math_fround(f1 + f2) - Math_fround(f1 * f2));
 f7 = Math_fround(Math_fround(f2 * Math_fround(2.0)) - f1);
 f5 = Math_fround(HEAPF32[i3 >> 2]);
 f2 = Math_fround(f5 + Math_fround(.333333343));
 i9 = f2 < Math_fround(0.0);
 f6 = Math_fround(f2 + Math_fround(1.0));
 f2 = i9 ? f6 : f2;
 i9 = f2 > Math_fround(1.0);
 f6 = Math_fround(f2 + Math_fround(-1.0));
 f2 = i9 ? f6 : f2;
 if (!(Math_fround(f2 * Math_fround(6.0)) < Math_fround(1.0))) if (!(Math_fround(f2 * Math_fround(2.0)) < Math_fround(1.0))) if (Math_fround(f2 * Math_fround(3.0)) < Math_fround(2.0)) f6 = Math_fround(f7 + Math_fround(Math_fround(Math_fround(f1 - f7) * Math_fround(Math_fround(.666666686) - f2)) * Math_fround(6.0))); else f6 = f7; else f6 = f1; else f6 = Math_fround(f7 + Math_fround(Math_fround(Math_fround(f1 - f7) * Math_fround(6.0)) * f2));
 i9 = f5 < Math_fround(0.0);
 f2 = Math_fround(f5 + Math_fround(1.0));
 f2 = i9 ? f2 : f5;
 i9 = f2 > Math_fround(1.0);
 f4 = Math_fround(f2 + Math_fround(-1.0));
 f2 = i9 ? f4 : f2;
 if (!(Math_fround(f2 * Math_fround(6.0)) < Math_fround(1.0))) if (!(Math_fround(f2 * Math_fround(2.0)) < Math_fround(1.0))) if (Math_fround(f2 * Math_fround(3.0)) < Math_fround(2.0)) f4 = Math_fround(f7 + Math_fround(Math_fround(Math_fround(f1 - f7) * Math_fround(Math_fround(.666666686) - f2)) * Math_fround(6.0))); else f4 = f7; else f4 = f1; else f4 = Math_fround(f7 + Math_fround(Math_fround(Math_fround(f1 - f7) * Math_fround(6.0)) * f2));
 f2 = Math_fround(f5 + Math_fround(-.333333343));
 i9 = f2 < Math_fround(0.0);
 f5 = Math_fround(f2 + Math_fround(1.0));
 f2 = i9 ? f5 : f2;
 i9 = f2 > Math_fround(1.0);
 f5 = Math_fround(f2 + Math_fround(-1.0));
 f2 = i9 ? f5 : f2;
 if (!(Math_fround(f2 * Math_fround(6.0)) < Math_fround(1.0))) {
  if (!(Math_fround(f2 * Math_fround(2.0)) < Math_fround(1.0))) if (Math_fround(f2 * Math_fround(3.0)) < Math_fround(2.0)) f1 = Math_fround(f7 + Math_fround(Math_fround(Math_fround(f1 - f7) * Math_fround(Math_fround(.666666686) - f2)) * Math_fround(6.0))); else f1 = f7;
 } else f1 = Math_fround(f7 + Math_fround(Math_fround(Math_fround(f1 - f7) * Math_fround(6.0)) * f2));
 HEAPF32[i8 >> 2] = f6;
 HEAPF32[i8 + 4 >> 2] = f4;
 HEAPF32[i8 + 8 >> 2] = f1;
 return;
}

function _t1_allocate_blend(i4, i6, i7) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = HEAP32[i4 + 100 >> 2] | 0;
 HEAP32[i10 >> 2] = 0;
 i1 = HEAP32[i4 + 532 >> 2] | 0;
 if (!i1) {
  i1 = _ft_mem_alloc(i8, 420, i10) | 0;
  if (!(HEAP32[i10 >> 2] | 0)) {
   HEAP32[i1 + 416 >> 2] = 0;
   HEAP32[i4 + 532 >> 2] = i1;
   i9 = i1;
   i2 = 4;
  }
 } else {
  i9 = i1;
  i2 = 4;
 }
 L4 : do if ((i2 | 0) == 4) {
  do if (!i6) i2 = 15; else {
   i1 = HEAP32[i9 >> 2] | 0;
   if (i1) if ((i1 | 0) == (i6 | 0)) {
    i2 = 15;
    break;
   } else break;
   i3 = i9 + 148 | 0;
   HEAP32[i3 >> 2] = _ft_mem_realloc(i8, 32, 0, i6, 0, i10) | 0;
   if (HEAP32[i10 >> 2] | 0) break L4;
   i1 = i9 + 216 | 0;
   HEAP32[i1 >> 2] = _ft_mem_realloc(i8, 196, 0, i6, 0, i10) | 0;
   if (HEAP32[i10 >> 2] | 0) break L4;
   i5 = i9 + 288 | 0;
   HEAP32[i5 >> 2] = _ft_mem_realloc(i8, 16, 0, i6, 0, i10) | 0;
   if (HEAP32[i10 >> 2] | 0) break L4;
   i2 = _ft_mem_realloc(i8, 4, 0, i6 << 1, 0, i10) | 0;
   HEAP32[i9 + 136 >> 2] = i2;
   if (HEAP32[i10 >> 2] | 0) break L4;
   HEAP32[i9 + 140 >> 2] = i2 + (i6 << 2);
   HEAP32[i9 + 144 >> 2] = i4 + 132;
   HEAP32[i9 + 212 >> 2] = i4 + 168;
   HEAP32[i9 + 284 >> 2] = i4 + 460;
   if (i6 >>> 0 >= 2) {
    i4 = HEAP32[i1 >> 2] | 0;
    i3 = HEAP32[i3 >> 2] | 0;
    i1 = HEAP32[i5 >> 2] | 0;
    i2 = 2;
    do {
     i4 = i4 + 196 | 0;
     HEAP32[i9 + 212 + (i2 << 2) >> 2] = i4;
     i3 = i3 + 32 | 0;
     HEAP32[i9 + 144 + (i2 << 2) >> 2] = i3;
     i1 = i1 + 16 | 0;
     HEAP32[i9 + 284 + (i2 << 2) >> 2] = i1;
     i2 = i2 + 1 | 0;
    } while (i2 >>> 0 <= i6 >>> 0);
   }
   HEAP32[i9 >> 2] = i6;
   i2 = 15;
  } while (0);
  do if ((i2 | 0) == 15) {
   i1 = i9 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i7) {
    if (!((i2 | 0) == 0 | (i2 | 0) == (i7 | 0))) break;
    HEAP32[i1 >> 2] = i7;
    i2 = i7;
   }
   i3 = HEAP32[i9 >> 2] | 0;
   if (!((i3 | 0) != 0 & (i2 | 0) != 0)) break L4;
   i4 = i9 + 24 | 0;
   if (HEAP32[i4 >> 2] | 0) break L4;
   i1 = _ft_mem_realloc(i8, 4, 0, Math_imul(i2, i3) | 0, 0, i10) | 0;
   HEAP32[i4 >> 2] = i1;
   if (!((HEAP32[i10 >> 2] | 0) == 0 & i3 >>> 0 > 1)) break L4;
   HEAP32[i9 + 28 >> 2] = i1 + (i2 << 2);
   if ((i3 | 0) == 2) break L4; else i1 = 2;
   while (1) {
    HEAP32[i9 + 24 + (i1 << 2) >> 2] = (HEAP32[i4 >> 2] | 0) + ((Math_imul(i1, i2) | 0) << 2);
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i3 | 0)) break L4;
   }
  } while (0);
  HEAP32[i10 >> 2] = 3;
 } while (0);
 STACKTOP = i10;
 return HEAP32[i10 >> 2] | 0;
}

function _trinkle(i4, i12, i10, i1, i3, i2, i11) {
 i4 = i4 | 0;
 i12 = i12 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i14 >> 2] = i4;
 L1 : do if ((i1 | 0) != 0 | (i6 | 0) != 1 ? (i5 = i4 + (0 - (HEAP32[i11 + (i3 << 2) >> 2] | 0)) | 0, (FUNCTION_TABLE_iii[i10 & 255](i5, i4) | 0) >= 1) : 0) {
  i2 = (i2 | 0) == 0;
  i7 = i6;
  i8 = i1;
  i1 = 1;
  while (1) {
   if (i2 & (i3 | 0) > 1) {
    i2 = HEAP32[i11 + (i3 + -2 << 2) >> 2] | 0;
    if ((FUNCTION_TABLE_iii[i10 & 255](i4 + (0 - i12) | 0, i5) | 0) > -1) {
     i2 = i3;
     i13 = 20;
     break L1;
    }
    if ((FUNCTION_TABLE_iii[i10 & 255](i4 + (0 - (i2 + i12)) | 0, i5) | 0) > -1) {
     i2 = i3;
     i13 = 20;
     break L1;
    }
   }
   i9 = i1 + 1 | 0;
   HEAP32[i14 + (i1 << 2) >> 2] = i5;
   i1 = i7 + -1 | 0;
   do if (i1) {
    if (!(i1 & 1)) {
     i2 = 0;
     do {
      i2 = i2 + 1 | 0;
      i1 = i1 >>> 1;
     } while ((i1 & 1 | 0) == 0);
     if (!i2) i13 = 11;
    } else i13 = 11;
    if ((i13 | 0) == 11) {
     i13 = 0;
     if (!i8) {
      i2 = 64;
      i13 = 16;
      break;
     }
     if (!(i8 & 1)) {
      i2 = i8;
      i1 = 0;
     } else {
      i6 = 0;
      i1 = i7;
      i4 = i8;
      i2 = 0;
      break;
     }
     while (1) {
      i4 = i1 + 1 | 0;
      i2 = i2 >>> 1;
      if (i2 & 1) break; else i1 = i4;
     }
     if (!i4) {
      i6 = 0;
      i1 = i7;
      i4 = i8;
      i2 = 0;
      break;
     } else i2 = i1 + 33 | 0;
    }
    if (i2 >>> 0 > 31) i13 = 16; else {
     i6 = i2;
     i1 = i7;
     i4 = i8;
    }
   } else {
    i2 = 32;
    i13 = 16;
   } while (0);
   if ((i13 | 0) == 16) {
    i13 = 0;
    i6 = i2 + -32 | 0;
    i1 = i8;
    i4 = 0;
   }
   i7 = i4 << 32 - i6 | i1 >>> i6;
   i8 = i4 >>> i6;
   i2 = i2 + i3 | 0;
   if (!((i8 | 0) != 0 | (i7 | 0) != 1)) {
    i4 = i5;
    i1 = i9;
    i13 = 20;
    break L1;
   }
   i1 = i5 + (0 - (HEAP32[i11 + (i2 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[i10 & 255](i1, HEAP32[i14 >> 2] | 0) | 0) < 1) {
    i4 = i5;
    i3 = i2;
    i2 = 0;
    i1 = i9;
    i13 = 19;
    break;
   } else {
    i4 = i5;
    i3 = i2;
    i2 = 1;
    i5 = i1;
    i1 = i9;
   }
  }
 } else {
  i1 = 1;
  i13 = 19;
 } while (0);
 if ((i13 | 0) == 19 ? (i2 | 0) == 0 : 0) {
  i2 = i3;
  i13 = 20;
 }
 if ((i13 | 0) == 20) {
  _cycle(i12, i14, i1);
  _sift(i4, i12, i10, i2, i11);
 }
 STACKTOP = i14;
 return;
}

function __ZN11Application8DrawTextEPKcffmf(i4, i3, f5, f6, i1, f2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 f5 = Math_fround(f5);
 f6 = Math_fround(f6);
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 var i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if (__Z22IsIE11DeveloperPreviewv() | 0) {
  __ZN4math6float3C2Efff(i7 + 96 | 0, f5, f6, Math_fround(.5));
  HEAP32[i7 + 80 >> 2] = 0;
  HEAP32[i7 + 80 + 4 >> 2] = 0;
  HEAP32[i7 + 80 + 8 >> 2] = 0;
  HEAP32[i7 + 80 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i7 + 80 | 0, i3);
  i8 = (HEAP32[i4 + 1600 >> 2] | 0) + 8 | 0;
  i3 = ~~Math_fround(f2 * Math_fround(64.0));
  __ZN4math6float3C2Efff(i7 + 64 | 0, Math_fround(Math_fround(1.0) / Math_fround(__ZNK8Graphics11ScreenWidthEv(i4 + 4 | 0) | 0)), Math_fround(0.0), Math_fround(0.0));
  __ZN4math6float3C2Efff(i7 + 52 | 0, Math_fround(0.0), Math_fround(Math_fround(-1.0) / Math_fround(__ZNK8Graphics12ScreenHeightEv(i4 + 4 | 0) | 0)), Math_fround(0.0));
  HEAP32[i7 + 108 >> 2] = HEAP32[i7 + 96 >> 2];
  HEAP32[i7 + 108 + 4 >> 2] = HEAP32[i7 + 96 + 4 >> 2];
  HEAP32[i7 + 108 + 8 >> 2] = HEAP32[i7 + 96 + 8 >> 2];
  __Z26AppendTextVertexDataColorFR12VertexBufferR12FTGlyphCacheN4math6float3ERK6StringP6FTFontimRKS4_SB_f(i4 + 1328 | 0, i4 + 1592 | 0, i7 + 108 | 0, i7 + 80 | 0, i8, i3, i1, i7 + 64 | 0, i7 + 52 | 0, Math_fround(-1.0e4));
  i1 = HEAP32[i7 + 80 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i7 + 80 >> 2] = 0;
  STACKTOP = i7;
  return;
 } else {
  __ZN4math6float3C2Efff(i7 + 40 | 0, f5, f6, Math_fround(.5));
  HEAP32[i7 + 24 >> 2] = 0;
  HEAP32[i7 + 24 + 4 >> 2] = 0;
  HEAP32[i7 + 24 + 8 >> 2] = 0;
  HEAP32[i7 + 24 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i7 + 24 | 0, i3);
  i3 = (HEAP32[i4 + 1600 >> 2] | 0) + 8 | 0;
  i8 = ~~Math_fround(f2 * Math_fround(64.0));
  __ZN4math6float3C2Efff(i7 + 12 | 0, Math_fround(Math_fround(1.0) / Math_fround(__ZNK8Graphics11ScreenWidthEv(i4 + 4 | 0) | 0)), Math_fround(0.0), Math_fround(0.0));
  __ZN4math6float3C2Efff(i7, Math_fround(0.0), Math_fround(Math_fround(-1.0) / Math_fround(__ZNK8Graphics12ScreenHeightEv(i4 + 4 | 0) | 0)), Math_fround(0.0));
  HEAP32[i7 + 108 >> 2] = HEAP32[i7 + 40 >> 2];
  HEAP32[i7 + 108 + 4 >> 2] = HEAP32[i7 + 40 + 4 >> 2];
  HEAP32[i7 + 108 + 8 >> 2] = HEAP32[i7 + 40 + 8 >> 2];
  __Z28AppendTextVertexDataColorU32R12VertexBufferR12FTGlyphCacheN4math6float3ERK6StringP6FTFontimRKS4_SB_f(i4 + 1328 | 0, i4 + 1592 | 0, i7 + 108 | 0, i7 + 24 | 0, i3, i8, i1, i7 + 12 | 0, i7, Math_fround(-1.0e4));
  i1 = HEAP32[i7 + 24 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i7 + 24 >> 2] = 0;
  STACKTOP = i7;
  return;
 }
}

function _pcf_get_accel(i6, i5, i3) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i7 >> 2] = 0;
 i4 = HEAP32[i5 + 192 >> 2] | 0;
 i2 = HEAP32[i5 + 188 >> 2] | 0;
 L1 : do if (i2) {
  i1 = 0;
  while (1) {
   if ((HEAP32[i4 + (i1 << 4) >> 2] | 0) == (i3 | 0)) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i2 >>> 0) {
    i1 = 3;
    break L1;
   }
  }
  i2 = HEAP32[i6 + 8 >> 2] | 0;
  i1 = HEAP32[i4 + (i1 << 4) + 12 >> 2] | 0;
  if (i1 >>> 0 >= i2 >>> 0 ? (_FT_Stream_Skip(i6, i1 - i2 | 0) | 0) == 0 : 0) {
   HEAP32[i7 >> 2] = 0;
   i3 = _FT_Stream_ReadULongLE(i6, i7) | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if (i1) {
    i6 = i1;
    STACKTOP = i7;
    return i6 | 0;
   }
   switch (i3 & -256 | 0) {
   case 256:
   case 0:
    break;
   default:
    {
     i6 = 0;
     STACKTOP = i7;
     return i6 | 0;
    }
   }
   if (!(i3 & 4)) {
    i1 = _FT_Stream_ReadFields(i6, 285328, i5 + 196 | 0) | 0;
    HEAP32[i7 >> 2] = i1;
    if (i1) {
     i6 = i1;
     STACKTOP = i7;
     return i6 | 0;
    }
   } else {
    i1 = _FT_Stream_ReadFields(i6, 285276, i5 + 196 | 0) | 0;
    HEAP32[i7 >> 2] = i1;
    if (i1) {
     i6 = i1;
     STACKTOP = i7;
     return i6 | 0;
    }
   }
   i2 = (i3 & 4 | 0) != 0 ? 285184 : 285216;
   i1 = _FT_Stream_ReadFields(i6, i2, i5 + 216 | 0) | 0;
   HEAP32[i7 >> 2] = i1;
   if (i1) {
    i6 = i1;
    STACKTOP = i7;
    return i6 | 0;
   }
   i1 = _FT_Stream_ReadFields(i6, i2, i5 + 232 | 0) | 0;
   HEAP32[i7 >> 2] = i1;
   if (i1) {
    i6 = i1;
    STACKTOP = i7;
    return i6 | 0;
   }
   if ((i3 & -256 | 0) != 256) {
    HEAP32[i5 + 248 >> 2] = HEAP32[i5 + 216 >> 2];
    HEAP32[i5 + 248 + 4 >> 2] = HEAP32[i5 + 216 + 4 >> 2];
    HEAP32[i5 + 248 + 8 >> 2] = HEAP32[i5 + 216 + 8 >> 2];
    HEAP32[i5 + 248 + 12 >> 2] = HEAP32[i5 + 216 + 12 >> 2];
    HEAP32[i5 + 264 >> 2] = HEAP32[i5 + 232 >> 2];
    HEAP32[i5 + 264 + 4 >> 2] = HEAP32[i5 + 232 + 4 >> 2];
    HEAP32[i5 + 264 + 8 >> 2] = HEAP32[i5 + 232 + 8 >> 2];
    HEAP32[i5 + 264 + 12 >> 2] = HEAP32[i5 + 232 + 12 >> 2];
    i6 = 0;
    STACKTOP = i7;
    return i6 | 0;
   }
   i1 = _FT_Stream_ReadFields(i6, i2, i5 + 248 | 0) | 0;
   HEAP32[i7 >> 2] = i1;
   if (i1) {
    i6 = i1;
    STACKTOP = i7;
    return i6 | 0;
   }
   i6 = _FT_Stream_ReadFields(i6, i2, i5 + 264 | 0) | 0;
   HEAP32[i7 >> 2] = i6;
   STACKTOP = i7;
   return i6 | 0;
  } else i1 = 83;
 } else i1 = 3; while (0);
 HEAP32[i7 >> 2] = i1;
 i6 = i1;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZN5ArrayI13VertexElement9StdCAllocEaSERKS2_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if ((i9 | 0) == (i8 | 0)) return i9 | 0;
 HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 i1 = HEAP32[i8 + 12 >> 2] | 0;
 i7 = i1 >>> 0 < 32 ? 32 : i1;
 if (i7 >>> 0 < (HEAP32[i9 + 8 >> 2] | 0) >>> 0) i6 = i9 + 12 | 0; else {
  i6 = __Znaj(i7 >>> 0 > 82595524 ? -1 : i7 * 52 | 0) | 0;
  if (i7) {
   i1 = i6;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP8[i1 + 8 >> 0] = 0;
    HEAP8[i1 + 12 >> 0] = 0;
    HEAP8[i1 + 44 >> 0] = 0;
    HEAP32[i1 + 48 >> 2] = 0;
    i1 = i1 + 52 | 0;
   } while ((i1 | 0) != (i6 + (i7 * 52 | 0) | 0));
  }
  i5 = HEAP32[i9 + 12 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if (!i5) {
   if (i4) i2 = 13;
  } else {
   i3 = 0;
   do {
    i1 = i6 + (i3 * 52 | 0) | 0;
    i2 = i4 + (i3 * 52 | 0) | 0;
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP8[i1 + 8 >> 0] = HEAP8[i2 + 8 >> 0] | 0;
    i1 = 0;
    do {
     i2 = HEAP8[i4 + (i3 * 52 | 0) + 12 + i1 >> 0] | 0;
     if (!(i2 << 24 >> 24)) break;
     HEAP8[i6 + (i3 * 52 | 0) + 12 + i1 >> 0] = i2;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < 32);
    HEAP8[i6 + (i3 * 52 | 0) + 12 + i1 >> 0] = 0;
    HEAP32[i6 + (i3 * 52 | 0) + 48 >> 2] = i1;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) != (i5 | 0));
   i2 = 13;
  }
  if ((i2 | 0) == 13) __ZdaPv(i4);
  HEAP32[i9 >> 2] = i6;
  HEAP32[i9 + 8 >> 2] = i7;
  i6 = i9 + 12 | 0;
  i1 = HEAP32[i8 + 12 >> 2] | 0;
 }
 if (!i1) i1 = 0; else {
  i5 = 0;
  do {
   i4 = HEAP32[i9 >> 2] | 0;
   i2 = i4 + (i5 * 52 | 0) | 0;
   i3 = HEAP32[i8 >> 2] | 0;
   i1 = i3 + (i5 * 52 | 0) | 0;
   if (i5 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    HEAP8[i2 + 8 >> 0] = HEAP8[i1 + 8 >> 0] | 0;
    i1 = 0;
    do {
     i2 = HEAP8[i3 + (i5 * 52 | 0) + 12 + i1 >> 0] | 0;
     if (!(i2 << 24 >> 24)) break;
     HEAP8[i4 + (i5 * 52 | 0) + 12 + i1 >> 0] = i2;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < 32);
    HEAP8[i4 + (i5 * 52 | 0) + 12 + i1 >> 0] = 0;
    HEAP32[i4 + (i5 * 52 | 0) + 48 >> 2] = i1;
   } else {
    i3 = i2;
    i2 = i3 + 52 | 0;
    do {
     HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
     i3 = i3 + 4 | 0;
     i1 = i1 + 4 | 0;
    } while ((i3 | 0) < (i2 | 0));
   }
   i5 = i5 + 1 | 0;
   i1 = HEAP32[i8 + 12 >> 2] | 0;
  } while (i5 >>> 0 < i1 >>> 0);
 }
 HEAP32[i6 >> 2] = i1;
 return i9 | 0;
}

function _FT_Done_Library(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 if (!i12) {
  i12 = 33;
  return i12 | 0;
 }
 i11 = (HEAP32[i12 + 188 >> 2] | 0) + -1 | 0;
 HEAP32[i12 + 188 >> 2] = i11;
 if (i11) {
  i12 = 0;
  return i12 | 0;
 }
 i11 = HEAP32[i12 >> 2] | 0;
 if (HEAP32[i12 + 16 >> 2] | 0) {
  i7 = 0;
  do {
   i2 = HEAP32[i12 + 20 + (i7 << 2) >> 2] | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (((_strcmp(HEAP32[i1 + 8 >> 2] | 0, 323929) | 0) == 0 ? (HEAP32[i1 >> 2] & 1 | 0) != 0 : 0) ? (i3 = HEAP32[i2 + 16 >> 2] | 0, (i3 | 0) != 0) : 0) {
    i1 = i3;
    do {
     i1 = HEAP32[i1 + 8 >> 2] | 0;
     if ((((i1 | 0) != 0 ? (i4 = HEAP32[i1 + 96 >> 2] | 0, (i4 | 0) != 0) : 0) ? (i14 = (HEAP32[i1 + 128 >> 2] | 0) + 60 | 0, i13 = (HEAP32[i14 >> 2] | 0) + -1 | 0, HEAP32[i14 >> 2] = i13, (i13 | 0) == 0) : 0) ? (i5 = HEAP32[i4 + 8 >> 2] | 0, i6 = _FT_List_Find(i4 + 16 | 0, i1) | 0, (i6 | 0) != 0) : 0) {
      _FT_List_Remove(i4 + 16 | 0, i6);
      _ft_mem_free(i5, i6);
      _destroy_face(i5, i1, i4);
     }
     i1 = HEAP32[i2 + 16 >> 2] | 0;
    } while ((i1 | 0) != 0);
   }
   i7 = i7 + 1 | 0;
   i1 = HEAP32[i12 + 16 >> 2] | 0;
  } while (i7 >>> 0 < i1 >>> 0);
  if (i1) {
   i3 = i1;
   i4 = 0;
   while (1) {
    i2 = HEAP32[i12 + 20 + (i4 << 2) >> 2] | 0;
    if (HEAP32[HEAP32[i2 >> 2] >> 2] & 1) {
     i1 = HEAP32[i2 + 16 >> 2] | 0;
     if (!i1) {
      i2 = i3;
      i1 = i3;
     } else {
      do {
       i1 = HEAP32[i1 + 8 >> 2] | 0;
       if ((((i1 | 0) != 0 ? (i8 = HEAP32[i1 + 96 >> 2] | 0, (i8 | 0) != 0) : 0) ? (i13 = (HEAP32[i1 + 128 >> 2] | 0) + 60 | 0, i14 = (HEAP32[i13 >> 2] | 0) + -1 | 0, HEAP32[i13 >> 2] = i14, (i14 | 0) == 0) : 0) ? (i9 = HEAP32[i8 + 8 >> 2] | 0, i10 = _FT_List_Find(i8 + 16 | 0, i1) | 0, (i10 | 0) != 0) : 0) {
        _FT_List_Remove(i8 + 16 | 0, i10);
        _ft_mem_free(i9, i10);
        _destroy_face(i9, i1, i8);
       }
       i1 = HEAP32[i2 + 16 >> 2] | 0;
      } while ((i1 | 0) != 0);
      i1 = HEAP32[i12 + 16 >> 2] | 0;
      i2 = i1;
     }
    } else i2 = i3;
    i4 = i4 + 1 | 0;
    if (i4 >>> 0 >= i1 >>> 0) break; else i3 = i2;
   }
   if (i1) do {
    _FT_Remove_Module(i12, HEAP32[i12 + 20 + (i1 + -1 << 2) >> 2] | 0) | 0;
    i1 = HEAP32[i12 + 16 >> 2] | 0;
   } while ((i1 | 0) != 0);
  }
 }
 _ft_mem_free(i11, HEAP32[i12 + 164 >> 2] | 0);
 HEAP32[i12 + 164 >> 2] = 0;
 HEAP32[i12 + 168 >> 2] = 0;
 _ft_mem_free(i11, i12);
 i14 = 0;
 return i14 | 0;
}

function __ZNK6Shader13FindUboByNameEPKc(i3, i9) {
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i9 | 0) != 0 ? (i2 = HEAP8[i9 >> 0] | 0, i2 << 24 >> 24 != 0) : 0) {
  i7 = HEAP32[i3 + 76 >> 2] | 0;
  i8 = HEAP32[i3 + 72 >> 2] | 0;
  if ((i7 | 0) == (i8 | 0)) {
   i10 = 0;
   STACKTOP = i11;
   return i10 | 0;
  }
  i1 = 0;
  L7 : while (1) {
   i3 = HEAP32[i8 + (i1 * 44 | 0) + 16 >> 2] | 0;
   if ((i3 | 0) == (i9 | 0)) break;
   if (!(i2 << 24 >> 24)) {
    if (!i3) break;
    if (!(HEAP8[i3 >> 0] | 0)) break; else {
     i5 = i9;
     i10 = 14;
    }
   } else if (i3) {
    i5 = i9;
    i10 = 14;
   }
   L14 : do if ((i10 | 0) == 14) {
    while (1) {
     i10 = 0;
     i4 = HEAP8[i3 >> 0] | 0;
     i2 = HEAP8[i5 >> 0] | 0;
     if (!(i4 << 24 >> 24)) break;
     if (!(i2 << 24 >> 24)) break L14;
     if (i4 << 24 >> 24 == i2 << 24 >> 24) {
      i5 = i5 + 1 | 0;
      i3 = i3 + 1 | 0;
      i10 = 14;
     } else break L14;
    }
    if (!(i2 << 24 >> 24)) break L7;
   } while (0);
   i3 = HEAP32[i8 + (i1 * 44 | 0) >> 2] | 0;
   if ((i3 | 0) == (i9 | 0)) break;
   i2 = HEAP8[i9 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    if (!i3) break;
    if (!(HEAP8[i3 >> 0] | 0)) break; else {
     i2 = 0;
     i10 = 23;
    }
   } else if (i3) i10 = 23;
   L26 : do if ((i10 | 0) == 23) {
    i10 = 0;
    i6 = i9;
    while (1) {
     i5 = HEAP8[i3 >> 0] | 0;
     i4 = HEAP8[i6 >> 0] | 0;
     if (!(i5 << 24 >> 24)) break;
     if (!(i4 << 24 >> 24)) break L26;
     if (i5 << 24 >> 24 == i4 << 24 >> 24) {
      i6 = i6 + 1 | 0;
      i3 = i3 + 1 | 0;
     } else break L26;
    }
    if (!(i4 << 24 >> 24)) break L7;
   } while (0);
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= ((i7 - i8 | 0) / 44 | 0) >>> 0) {
    i1 = 0;
    i10 = 30;
    break;
   }
  }
  if ((i10 | 0) == 30) {
   STACKTOP = i11;
   return i1 | 0;
  }
  i10 = i8 + (i1 * 44 | 0) | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((HEAP32[i3 + 60 >> 2] | 0) != (HEAP32[i3 + 64 >> 2] | 0)) {
  i10 = i3 + 28 | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = HEAP32[i3 + 72 >> 2] | 0;
 i2 = HEAP32[i3 + 76 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) {
  i10 = i3 + 28 | 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (((i2 - i1 | 0) / 44 | 0) >>> 0 <= 1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 __ZN4math22PrintToConsoleVariadicEjPKcz(4, 298465, i11);
 i10 = HEAP32[i3 + 72 >> 2] | 0;
 STACKTOP = i11;
 return i10 | 0;
}

function __ZN5InputC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = i1;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = i1;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 356 >> 2] = 0;
 HEAP32[i1 + 360 >> 2] = 0;
 HEAP32[i1 + 376 >> 2] = 0;
 HEAP32[i1 + 380 >> 2] = 0;
 HEAP32[i1 + 400 >> 2] = 0;
 HEAP32[i1 + 404 >> 2] = 0;
 HEAP32[i1 + 408 >> 2] = -1;
 HEAP32[i1 + 412 >> 2] = -1;
 HEAPF64[i1 + 416 >> 3] = 0.0;
 HEAP32[i1 + 424 >> 2] = -1;
 HEAP32[i1 + 424 + 4 >> 2] = -1;
 HEAP32[i1 + 424 + 8 >> 2] = -1;
 HEAP32[i1 + 424 + 12 >> 2] = -1;
 HEAP32[i1 + 424 + 16 >> 2] = -1;
 HEAP32[i1 + 424 + 20 >> 2] = -1;
 HEAP32[i1 + 448 >> 2] = 0;
 HEAP32[i1 + 452 >> 2] = 0;
 HEAP32[i1 + 456 >> 2] = -1;
 HEAP32[i1 + 460 >> 2] = -1;
 HEAPF64[i1 + 464 >> 3] = 0.0;
 HEAP32[i1 + 472 >> 2] = -1;
 HEAP32[i1 + 472 + 4 >> 2] = -1;
 HEAP32[i1 + 472 + 8 >> 2] = -1;
 HEAP32[i1 + 472 + 12 >> 2] = -1;
 HEAP32[i1 + 472 + 16 >> 2] = -1;
 HEAP32[i1 + 472 + 20 >> 2] = -1;
 HEAP32[i1 + 496 >> 2] = 0;
 HEAP32[i1 + 500 >> 2] = 0;
 HEAP32[i1 + 504 >> 2] = -1;
 HEAP32[i1 + 508 >> 2] = -1;
 HEAPF64[i1 + 512 >> 3] = 0.0;
 HEAP32[i1 + 520 >> 2] = -1;
 HEAP32[i1 + 520 + 4 >> 2] = -1;
 HEAP32[i1 + 520 + 8 >> 2] = -1;
 HEAP32[i1 + 520 + 12 >> 2] = -1;
 HEAP32[i1 + 520 + 16 >> 2] = -1;
 HEAP32[i1 + 520 + 20 >> 2] = -1;
 HEAP32[i1 + 544 >> 2] = 0;
 HEAP32[i1 + 548 >> 2] = 0;
 HEAP32[i1 + 552 >> 2] = -1;
 HEAP32[i1 + 556 >> 2] = -1;
 HEAPF64[i1 + 560 >> 3] = 0.0;
 HEAP32[i1 + 568 >> 2] = -1;
 HEAP32[i1 + 568 + 4 >> 2] = -1;
 HEAP32[i1 + 568 + 8 >> 2] = -1;
 HEAP32[i1 + 568 + 12 >> 2] = -1;
 HEAP32[i1 + 568 + 16 >> 2] = -1;
 HEAP32[i1 + 568 + 20 >> 2] = -1;
 HEAP32[i1 + 592 >> 2] = 0;
 HEAP32[i1 + 596 >> 2] = 0;
 HEAP32[i1 + 600 >> 2] = -1;
 HEAP32[i1 + 604 >> 2] = -1;
 HEAPF64[i1 + 608 >> 3] = 0.0;
 HEAP32[i1 + 616 >> 2] = -1;
 HEAP32[i1 + 616 + 4 >> 2] = -1;
 HEAP32[i1 + 616 + 8 >> 2] = -1;
 HEAP32[i1 + 616 + 12 >> 2] = -1;
 HEAP32[i1 + 616 + 16 >> 2] = -1;
 HEAP32[i1 + 616 + 20 >> 2] = -1;
 HEAP32[i1 + 668 >> 2] = 0;
 HEAP32[i1 + 672 >> 2] = 0;
 HEAP32[i1 + 640 >> 2] = 0;
 HEAP32[i1 + 640 + 4 >> 2] = 0;
 HEAP32[i1 + 640 + 8 >> 2] = 0;
 HEAP32[i1 + 640 + 12 >> 2] = 0;
 HEAP32[i1 + 640 + 16 >> 2] = 0;
 HEAP32[i1 + 640 + 20 >> 2] = 0;
 HEAP32[i1 + 664 >> 2] = i1 + 668;
 HEAP32[i1 + 680 >> 2] = 0;
 HEAP32[i1 + 684 >> 2] = 0;
 HEAP32[i1 + 676 >> 2] = i1 + 680;
 HEAP32[i1 + 704 >> 2] = 0;
 HEAP32[i1 + 704 + 4 >> 2] = 0;
 HEAP32[i1 + 704 + 8 >> 2] = 0;
 HEAP32[i1 + 704 + 12 >> 2] = 0;
 HEAP32[i1 + 704 + 16 >> 2] = 0;
 return;
}

function _scanexp(i6, i3) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 if (i1 >>> 0 < (HEAP32[i6 + 100 >> 2] | 0) >>> 0) {
  HEAP32[i6 + 4 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 } else i1 = ___shgetc(i6) | 0;
 switch (i1 | 0) {
 case 43:
 case 45:
  {
   i2 = (i1 | 0) == 45 & 1;
   i1 = HEAP32[i6 + 4 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i6 + 100 >> 2] | 0) >>> 0) {
    HEAP32[i6 + 4 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i6) | 0;
   if ((i3 | 0) != 0 & (i1 + -48 | 0) >>> 0 > 9 ? (HEAP32[i6 + 100 >> 2] | 0) != 0 : 0) {
    HEAP32[i6 + 4 >> 2] = (HEAP32[i6 + 4 >> 2] | 0) + -1;
    i5 = i2;
   } else i5 = i2;
   break;
  }
 default:
  i5 = 0;
 }
 if ((i1 + -48 | 0) >>> 0 > 9) if (!(HEAP32[i6 + 100 >> 2] | 0)) {
  i2 = -2147483648;
  i1 = 0;
 } else {
  HEAP32[i6 + 4 >> 2] = (HEAP32[i6 + 4 >> 2] | 0) + -1;
  i2 = -2147483648;
  i1 = 0;
 } else {
  i2 = 0;
  do {
   i2 = i1 + -48 + (i2 * 10 | 0) | 0;
   i1 = HEAP32[i6 + 4 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i6 + 100 >> 2] | 0) >>> 0) {
    HEAP32[i6 + 4 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i6) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10 & (i2 | 0) < 214748364);
  if ((i1 + -48 | 0) >>> 0 < 10) {
   i4 = i2;
   i2 = ((i2 | 0) < 0) << 31 >> 31;
   while (1) {
    i3 = ___muldi3(i4 | 0, i2 | 0, 10, 0) | 0;
    i2 = tempRet0;
    i1 = _i64Add(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    i2 = _i64Add(i1 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
    i3 = tempRet0;
    i1 = HEAP32[i6 + 4 >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[i6 + 100 >> 2] | 0) >>> 0) {
     HEAP32[i6 + 4 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] | 0;
    } else i1 = ___shgetc(i6) | 0;
    if ((i1 + -48 | 0) >>> 0 < 10 & ((i3 | 0) < 21474836 | (i3 | 0) == 21474836 & i2 >>> 0 < 2061584302)) {
     i4 = i2;
     i2 = i3;
    } else {
     i4 = i2;
     break;
    }
   }
  } else {
   i4 = i2;
   i3 = ((i2 | 0) < 0) << 31 >> 31;
  }
  if ((i1 + -48 | 0) >>> 0 < 10) do {
   i1 = HEAP32[i6 + 4 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i6 + 100 >> 2] | 0) >>> 0) {
    HEAP32[i6 + 4 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i6) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10);
  if (HEAP32[i6 + 100 >> 2] | 0) HEAP32[i6 + 4 >> 2] = (HEAP32[i6 + 4 >> 2] | 0) + -1;
  i6 = (i5 | 0) != 0;
  i1 = _i64Subtract(0, 0, i4 | 0, i3 | 0) | 0;
  i2 = i6 ? tempRet0 : i3;
  i1 = i6 ? i1 : i4;
 }
 tempRet0 = i2;
 return i1 | 0;
}

function _ft_lzw_stream_io(i1, i3, i9, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i1 = HEAP32[i8 + 4280 >> 2] | 0;
 do if (i1 >>> 0 > i3 >>> 0) {
  i2 = HEAP32[i8 + 4284 >> 2] | 0;
  if ((i1 - i3 | 0) >>> 0 <= (i2 - (i8 + 184) | 0) >>> 0) {
   HEAP32[i8 + 4284 >> 2] = i2 + (0 - (i1 - i3));
   HEAP32[i8 + 4280 >> 2] = i3;
   i4 = 12;
   break;
  }
  if (!(_FT_Stream_Seek(HEAP32[i8 >> 2] | 0, 0) | 0)) {
   HEAP32[i8 + 16 >> 2] = 0;
   HEAP32[i8 + 36 >> 2] = 0;
   HEAP32[i8 + 40 >> 2] = 0;
   HEAP8[i8 + 44 >> 0] = 0;
   HEAP32[i8 + 48 >> 2] = 0;
   HEAP32[i8 + 104 >> 2] = 0;
   HEAP32[i8 + 64 >> 2] = 9;
   HEAP32[i8 + 12 >> 2] = 0;
   HEAP32[i8 + 4288 >> 2] = i8 + 4280;
   HEAP32[i8 + 4284 >> 2] = i8 + 4280;
   HEAP32[i8 + 4280 >> 2] = 0;
   i1 = 0;
   i4 = 6;
   break;
  } else {
   i8 = 0;
   return i8 | 0;
  }
 } else i4 = 6; while (0);
 if ((i4 | 0) == 6) if (i1 >>> 0 < i3 >>> 0) {
  i3 = i3 - i1 | 0;
  i7 = HEAP32[i8 + 4284 >> 2] | 0;
  i2 = (HEAP32[i8 + 4288 >> 2] | 0) - i7 | 0;
  i2 = i2 >>> 0 < i3 >>> 0 ? i2 : i3;
  HEAP32[i8 + 4284 >> 2] = i7 + i2;
  HEAP32[i8 + 4280 >> 2] = i2 + i1;
  L12 : do if ((i3 | 0) != (i2 | 0)) {
   i2 = i3 - i2 | 0;
   while (1) {
    i1 = i2 >>> 0 < 4096 ? i2 : 4096;
    if ((_ft_lzwstate_io(i8 + 12 | 0, 0, i1) | 0) >>> 0 < i1 >>> 0) {
     i1 = 0;
     break;
    }
    HEAP32[i8 + 4280 >> 2] = (HEAP32[i8 + 4280 >> 2] | 0) + i1;
    if ((i2 | 0) == (i1 | 0)) break L12; else i2 = i2 - i1 | 0;
   }
   return i1 | 0;
  } while (0);
  if (!i5) {
   i8 = 0;
   return i8 | 0;
  } else {
   i6 = i8 + 4288 | 0;
   i7 = i8 + 4284 | 0;
  }
 } else i4 = 12;
 do if ((i4 | 0) == 12) if (!i5) {
  i8 = 0;
  return i8 | 0;
 } else {
  i6 = i8 + 4288 | 0;
  i7 = i8 + 4284 | 0;
  break;
 } while (0);
 i3 = i5;
 i4 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 i1 = 0;
 while (1) {
  i2 = i4 - i5 | 0;
  i2 = i2 >>> 0 < i3 >>> 0 ? i2 : i3;
  _memcpy(i9 + i1 | 0, i5 | 0, i2 | 0) | 0;
  i1 = i2 + i1 | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i2;
  HEAP32[i8 + 4280 >> 2] = (HEAP32[i8 + 4280 >> 2] | 0) + i2;
  if ((i3 | 0) == (i2 | 0)) {
   i4 = 17;
   break;
  }
  HEAP32[i7 >> 2] = i8 + 184;
  i10 = _ft_lzwstate_io(i8 + 12 | 0, i8 + 184 | 0, 4096) | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i4 = i5 + i10 | 0;
  HEAP32[i6 >> 2] = i4;
  if (!i10) {
   i4 = 17;
   break;
  } else i3 = i3 - i2 | 0;
 }
 if ((i4 | 0) == 17) return i1 | 0;
 return 0;
}

function _Line_Up(i12, i9, i10, i8, i11, i1, i2) {
 i12 = i12 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if ((i11 - i10 | 0) < 1 | (i11 | 0) < (i1 | 0) | (i10 | 0) > (i2 | 0)) {
  i12 = 0;
  return i12 | 0;
 }
 if ((i1 | 0) > (i10 | 0)) {
  i5 = (_FT_MulDiv(i8 - i9 | 0, i1 - i10 | 0, i11 - i10 | 0) | 0) + i9 | 0;
  i6 = HEAP32[i12 >> 2] | 0;
  i3 = i6;
  i6 = i1 >> i6;
  i4 = 0;
 } else {
  i6 = HEAP32[i12 >> 2] | 0;
  i5 = i9;
  i3 = i6;
  i6 = i10 >> i6;
  i4 = (HEAP32[i12 + 4 >> 2] | 0) + -1 & i10;
 }
 if ((i11 | 0) > (i2 | 0)) {
  i7 = 0;
  i1 = i2;
 } else {
  i7 = (HEAP32[i12 + 4 >> 2] | 0) + -1 & i11;
  i1 = i11;
 }
 i2 = i1 >> i3;
 do if ((i4 | 0) > 0) if ((i6 | 0) == (i2 | 0)) {
  i12 = 0;
  return i12 | 0;
 } else {
  i5 = (_FT_MulDiv(i8 - i9 | 0, (HEAP32[i12 + 4 >> 2] | 0) - i4 | 0, i11 - i10 | 0) | 0) + i5 | 0;
  i1 = i12 + 87 | 0;
  i6 = i6 + 1 | 0;
  break;
 } else if (!(HEAP8[i12 + 87 >> 0] | 0)) i1 = i12 + 87 | 0; else {
  HEAP32[i12 + 40 >> 2] = (HEAP32[i12 + 40 >> 2] | 0) + -4;
  HEAP8[i12 + 87 >> 0] = 0;
  i1 = i12 + 87 | 0;
 } while (0);
 HEAP8[i1 >> 0] = (i7 | 0) == 0 & 1;
 if (HEAP8[i12 + 86 >> 0] | 0) {
  HEAP32[(HEAP32[i12 + 88 >> 2] | 0) + 20 >> 2] = i6;
  HEAP8[i12 + 86 >> 0] = 0;
 }
 i3 = i2 - i6 | 0;
 if (((HEAP32[i12 + 40 >> 2] | 0) + (i3 + 1 << 2) | 0) >>> 0 >= (HEAP32[i12 + 36 >> 2] | 0) >>> 0) {
  HEAP32[i12 + 44 >> 2] = 98;
  i12 = 1;
  return i12 | 0;
 }
 i1 = HEAP32[i12 + 4 >> 2] | 0;
 if ((i8 - i9 | 0) > 0) {
  i7 = _FT_MulDiv_No_Round(i1, i8 - i9 | 0, i11 - i10 | 0) | 0;
  i1 = Math_imul(HEAP32[i12 + 4 >> 2] | 0, i8 - i9 | 0) | 0;
  i8 = 1;
  i9 = i7;
 } else {
  i7 = 0 - (_FT_MulDiv_No_Round(i1, 0 - (i8 - i9) | 0, i11 - i10 | 0) | 0) | 0;
  i1 = Math_imul(HEAP32[i12 + 4 >> 2] | 0, 0 - (i8 - i9) | 0) | 0;
  i8 = -1;
  i9 = i7;
 }
 i7 = (i1 | 0) % (i11 - i10 | 0) | 0;
 i1 = HEAP32[i12 + 40 >> 2] | 0;
 if ((i3 | 0) > -1) {
  i4 = i6 + -2 - i2 | 0;
  i6 = i2 + ((i4 | 0) > -2 ? i4 : -2) + 3 - i6 | 0;
  i2 = 0 - (i11 - i10) | 0;
  i3 = i3 + 1 | 0;
  i4 = i1;
  while (1) {
   HEAP32[i4 >> 2] = i5;
   i2 = i2 + i7 | 0;
   if ((i3 | 0) > 1) {
    i5 = i5 + i9 + ((i2 | 0) > -1 ? i8 : 0) | 0;
    i2 = i2 - ((i2 | 0) > -1 ? i11 - i10 | 0 : 0) | 0;
    i3 = i3 + -1 | 0;
    i4 = i4 + 4 | 0;
   } else break;
  }
  i1 = i1 + (i6 << 2) | 0;
 }
 HEAP32[i12 + 40 >> 2] = i1;
 i12 = 0;
 return i12 | 0;
}

function _af_latin_compute_stem_width(i1, i10, i12, i2, i3) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i7 = HEAP32[i1 + 108 >> 2] | 0;
 i8 = HEAP32[i1 + 104 >> 2] | 0;
 if (!(i8 & 4)) return i12 | 0;
 if (HEAP8[i7 + 40 + (i10 * 396 | 0) + 212 >> 0] | 0) return i12 | 0;
 i9 = (i12 | 0) < 0 ? 0 - i12 | 0 : i12;
 if ((i10 | 0) == 1) if (!(i8 & 2)) if ((i9 | 0) < 192 & (i3 & 2 | 0) != 0) i1 = i9; else i11 = 7; else i11 = 16; else if (!(i8 & 1)) i11 = 7; else i11 = 16;
 do if ((i11 | 0) == 7) {
  i2 = (i2 & 1 | 0) == 0 ? ((i9 | 0) < 56 ? 56 : i9) : (i9 | 0) < 80 ? 64 : i9;
  if (HEAP32[i7 + 40 + (i10 * 396 | 0) + 8 >> 2] | 0) {
   i1 = HEAP32[i7 + 40 + (i10 * 396 | 0) + 16 >> 2] | 0;
   if ((((i2 - i1 | 0) < 0 ? 0 - (i2 - i1) | 0 : i2 - i1 | 0) | 0) < 40) {
    i1 = (i1 | 0) < 48 ? 48 : i1;
    break;
   }
   if ((i2 | 0) >= 192) {
    i1 = i2 + 32 & -64;
    break;
   }
   if ((i2 & 63) >>> 0 >= 10) if ((i2 & 63) >>> 0 < 32) {
    i1 = i2 & -64 | 10;
    break;
   } else {
    i1 = (i2 & 63) >>> 0 < 54 ? i2 & -64 | 54 : i2;
    break;
   } else i1 = i2;
  } else i1 = i2;
 } else if ((i11 | 0) == 16) {
  i3 = HEAP32[i7 + 40 + (i10 * 396 | 0) + 8 >> 2] | 0;
  if ((i3 | 0) > 0) {
   i5 = 98;
   i6 = 0;
   i1 = i9;
   while (1) {
    i13 = HEAP32[i7 + 40 + (i10 * 396 | 0) + 12 + (i6 * 12 | 0) + 4 >> 2] | 0;
    i2 = (i9 - i13 | 0) < 0 ? 0 - (i9 - i13) | 0 : i9 - i13 | 0;
    i4 = (i2 | 0) < (i5 | 0);
    i1 = i4 ? i13 : i1;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) == (i3 | 0)) break; else i5 = i4 ? i2 : i5;
   }
   if ((i1 | 0) > (i9 | 0)) i1 = ((i1 + 32 & -64) + -48 | 0) < (i9 | 0) ? i1 : i9; else {
    i2 = i1 + 32 & -64;
    i11 = 20;
   }
  } else {
   i2 = i9 + 32 & -64;
   i1 = i9;
   i11 = 20;
  }
  if ((i11 | 0) == 20) i1 = (i2 | 48 | 0) > (i9 | 0) ? i1 : i9;
  if ((i10 | 0) == 1) {
   if ((i1 | 0) <= 63) {
    i1 = 64;
    break;
   }
   i1 = i1 + 16 & -64;
   break;
  }
  if (i8 & 8) {
   if ((i1 | 0) < 64) {
    i1 = 64;
    break;
   }
   i1 = i1 + 32 & -64;
   break;
  }
  if ((i1 | 0) < 48) {
   i1 = i1 + 64 >> 1;
   break;
  }
  if ((i1 | 0) >= 128) {
   i1 = i1 + 32 & -64;
   break;
  }
  i1 = i1 + 22 & -64;
  if ((((i1 - i9 | 0) < 0 ? 0 - (i1 - i9) | 0 : i1 - i9 | 0) | 0) > 15) if ((i9 | 0) < 48) i1 = i9 + 64 >> 1; else i1 = i9;
 } while (0);
 i13 = (i12 | 0) > -1 ? i1 : 0 - i1 | 0;
 return i13 | 0;
}

function __ZN5ArrayI13VertexElement9StdCAllocEC2ERKS2_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 i7 = HEAP32[i8 + 8 >> 2] | 0;
 i7 = i7 >>> 0 < 32 ? 32 : i7;
 i6 = __Znaj(i7 >>> 0 > 82595524 ? -1 : i7 * 52 | 0) | 0;
 do if (i7) {
  i1 = i6;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP8[i1 + 8 >> 0] = 0;
   HEAP8[i1 + 12 >> 0] = 0;
   HEAP8[i1 + 44 >> 0] = 0;
   HEAP32[i1 + 48 >> 2] = 0;
   i1 = i1 + 52 | 0;
  } while ((i1 | 0) != (i6 + (i7 * 52 | 0) | 0));
  i3 = HEAP32[i9 + 12 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if (!i3) {
   if (!i4) break;
  } else {
   i5 = 0;
   do {
    i1 = i6 + (i5 * 52 | 0) | 0;
    i2 = i4 + (i5 * 52 | 0) | 0;
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP8[i1 + 8 >> 0] = HEAP8[i2 + 8 >> 0] | 0;
    i1 = 0;
    do {
     i2 = HEAP8[i4 + (i5 * 52 | 0) + 12 + i1 >> 0] | 0;
     if (!(i2 << 24 >> 24)) break;
     HEAP8[i6 + (i5 * 52 | 0) + 12 + i1 >> 0] = i2;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) < 32);
    HEAP8[i6 + (i5 * 52 | 0) + 12 + i1 >> 0] = 0;
    HEAP32[i6 + (i5 * 52 | 0) + 48 >> 2] = i1;
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != (i3 | 0));
  }
  __ZdaPv(i4);
 } while (0);
 HEAP32[i9 >> 2] = i6;
 HEAP32[i9 + 8 >> 2] = i7;
 if (!(HEAP32[i8 + 12 >> 2] | 0)) {
  i8 = 0;
  HEAP32[i9 + 12 >> 2] = i8;
  return;
 }
 i2 = 0;
 while (1) {
  i3 = i6 + (i2 * 52 | 0) | 0;
  i4 = HEAP32[i8 >> 2] | 0;
  i1 = i4 + (i2 * 52 | 0) | 0;
  if (i2 >>> 0 < (HEAP32[i9 + 12 >> 2] | 0) >>> 0) {
   HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP8[i3 + 8 >> 0] = HEAP8[i1 + 8 >> 0] | 0;
   i1 = 0;
   do {
    i3 = HEAP8[i4 + (i2 * 52 | 0) + 12 + i1 >> 0] | 0;
    if (!(i3 << 24 >> 24)) break;
    HEAP8[i6 + (i2 * 52 | 0) + 12 + i1 >> 0] = i3;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < 32);
   HEAP8[i6 + (i2 * 52 | 0) + 12 + i1 >> 0] = 0;
   HEAP32[i6 + (i2 * 52 | 0) + 48 >> 2] = i1;
  } else {
   i4 = i3;
   i3 = i4 + 52 | 0;
   do {
    HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
    i4 = i4 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i4 | 0) < (i3 | 0));
  }
  i2 = i2 + 1 | 0;
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if (i2 >>> 0 >= i1 >>> 0) break;
  i6 = HEAP32[i9 >> 2] | 0;
 }
 HEAP32[i9 + 12 >> 2] = i1;
 return;
}

function _FT_Render_Glyph_Internal(i9, i8, i7) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[i8 + 72 >> 2] | 0;
 L1 : do if ((i2 | 0) < 1869968492) {
  switch (i2 | 0) {
  case 1651078259:
   {
    i1 = 0;
    break;
   }
  default:
   {
    i5 = 3;
    break L1;
   }
  }
  return i1 | 0;
 } else {
  switch (i2 | 0) {
  case 1869968492:
   break;
  default:
   {
    i5 = 3;
    break L1;
   }
  }
  i1 = HEAP32[i9 + 148 >> 2] | 0;
  i6 = i9 + 148 | 0;
  i3 = HEAP32[i9 + 156 >> 2] | 0;
  i5 = 9;
 } while (0);
 L6 : do if ((i5 | 0) == 3) {
  if (i9) {
   i1 = HEAP32[i9 + 148 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    i6 = i9 + 148 | 0;
    i3 = 0;
    i5 = 9;
    break;
   }
   while (1) {
    i3 = HEAP32[i1 + 8 >> 2] | 0;
    if ((HEAP32[i3 + 16 >> 2] | 0) == (i2 | 0)) {
     i5 = 6;
     break;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     i3 = 0;
     break;
    }
   }
   if (!i9) {
    i1 = 7;
    i2 = 0;
   } else {
    i6 = i9 + 148 | 0;
    i5 = 9;
    break;
   }
  } else {
   i1 = 7;
   i3 = 0;
   i2 = 0;
  }
  while (1) {
   if (!i3) break;
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 60 >> 2] & 63](i3, i8, i7, 0) | 0;
   if ((i1 | 0) != 0 & (i1 & 255 | 0) == 19) {
    i3 = 0;
    i2 = 1;
   } else {
    i4 = 1;
    break L6;
   }
  }
  return i1 | 0;
 } while (0);
 L20 : do if ((i5 | 0) == 9) {
  if (!i3) {
   i8 = 7;
   return i8 | 0;
  } else {
   i5 = i1;
   i2 = 0;
  }
  while (1) {
   i1 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 60 >> 2] & 63](i3, i8, i7, 0) | 0;
   if (!((i1 | 0) != 0 & (i1 & 255 | 0) == 19)) {
    i4 = 0;
    break L20;
   }
   i4 = HEAP32[i8 + 72 >> 2] | 0;
   i2 = HEAP32[((i5 | 0) == 0 ? i6 : i5 + 4 | 0) >> 2] | 0;
   L27 : do if (!i2) {
    i2 = 0;
    i3 = 0;
   } else while (1) {
    i3 = HEAP32[i2 + 8 >> 2] | 0;
    if ((HEAP32[i3 + 16 >> 2] | 0) == (i4 | 0)) break;
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    if (!i2) {
     i2 = 0;
     i3 = 0;
     break L27;
    }
   } while (0);
   if (!i3) break; else {
    i5 = i2;
    i2 = 1;
   }
  }
  return i1 | 0;
 } while (0);
 if (i4 | ((i1 | 0) != 0 | (i2 | 0) == 0)) {
  i8 = i1;
  return i8 | 0;
 }
 i2 = _FT_List_Find(i9 + 148 | 0, i3) | 0;
 if (!i2) {
  i8 = i1;
  return i8 | 0;
 }
 _FT_List_Up(i9 + 148 | 0, i2);
 if ((HEAP32[i3 + 16 >> 2] | 0) != 1869968492) {
  i8 = i1;
  return i8 | 0;
 }
 HEAP32[i9 + 156 >> 2] = i3;
 i8 = i1;
 return i8 | 0;
}

function _FT_New_GlyphSlot(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i8) {
  i11 = 6;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = HEAP32[i8 + 96 >> 2] | 0;
 if (!i1) {
  i11 = 6;
  STACKTOP = i12;
  return i11 | 0;
 }
 i11 = HEAP32[i1 + 8 >> 2] | 0;
 i10 = _ft_mem_alloc(i11, HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 44 >> 2] | 0, i12) | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (i1) {
  if (!i7) {
   i11 = i1;
   STACKTOP = i12;
   return i11 | 0;
  }
  HEAP32[i7 >> 2] = 0;
  i11 = i1;
  STACKTOP = i12;
  return i11 | 0;
 }
 HEAP32[i10 + 4 >> 2] = i8;
 i2 = HEAP32[i8 + 96 >> 2] | 0;
 i3 = HEAP32[i2 + 12 >> 2] | 0;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i10 >> 2] = HEAP32[i2 + 4 >> 2];
 i5 = _ft_mem_alloc(i4, 40, i12 + 4 | 0) | 0;
 i1 = HEAP32[i12 + 4 >> 2] | 0;
 do if (!i1) {
  HEAP32[i10 + 156 >> 2] = i5;
  if ((HEAP32[HEAP32[i2 >> 2] >> 2] & 512 | 0) == 0 ? (i6 = _FT_GlyphLoader_New(i4, i5) | 0, HEAP32[i12 + 4 >> 2] = i6, (i6 | 0) != 0) : 0) {
   i1 = i6;
   i9 = 9;
   break;
  }
  i1 = HEAP32[i3 + 64 >> 2] | 0;
  if (i1) {
   i6 = FUNCTION_TABLE_ii[i1 & 63](i10) | 0;
   HEAP32[i12 >> 2] = i6;
   if (i6) break;
  } else HEAP32[i12 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = HEAP32[i8 + 84 >> 2];
  HEAP32[i8 + 84 >> 2] = i10;
  if (!i7) {
   i11 = 0;
   STACKTOP = i12;
   return i11 | 0;
  }
  HEAP32[i7 >> 2] = i10;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } else i9 = 9; while (0);
 if ((i9 | 0) == 9) HEAP32[i12 >> 2] = i1;
 i2 = HEAP32[(HEAP32[i10 + 4 >> 2] | 0) + 96 >> 2] | 0;
 i3 = HEAP32[i2 + 8 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 68 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i10);
 i1 = HEAP32[i10 + 156 >> 2] | 0;
 if ((i1 | 0) != 0 ? (HEAP32[i1 + 4 >> 2] & 1 | 0) != 0 : 0) {
  _ft_mem_free(HEAP32[(HEAP32[i10 + 4 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i10 + 88 >> 2] | 0);
  HEAP32[i10 + 88 >> 2] = 0;
  i1 = HEAP32[i10 + 156 >> 2] | 0;
  HEAP32[i1 + 4 >> 2] = HEAP32[i1 + 4 >> 2] & -2;
 } else HEAP32[i10 + 88 >> 2] = 0;
 if (i1) {
  if (!(HEAP32[HEAP32[i2 >> 2] >> 2] & 512)) {
   _FT_GlyphLoader_Done(HEAP32[i1 >> 2] | 0);
   i1 = HEAP32[i10 + 156 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
  }
  _ft_mem_free(i3, i1);
  HEAP32[i10 + 156 >> 2] = 0;
 }
 _ft_mem_free(i11, i10);
 i11 = HEAP32[i12 >> 2] | 0;
 STACKTOP = i12;
 return i11 | 0;
}

function _gray_conic_to(i2, i1, i7) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 >> 2] << 2;
 HEAP32[i7 + 76 >> 2] = i4;
 HEAP32[i7 + 80 >> 2] = i6 << 2;
 i8 = HEAP32[i2 >> 2] | 0;
 HEAP32[i7 + 84 >> 2] = i8 << 2;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i7 + 88 >> 2] = i3 << 2;
 i2 = HEAP32[i7 + 64 >> 2] | 0;
 HEAP32[i7 + 92 >> 2] = i2;
 i1 = HEAP32[i7 + 68 >> 2] | 0;
 HEAP32[i7 + 96 >> 2] = i1;
 i2 = (i4 - (i8 << 3) + i2 | 0) < 0 ? 0 - (i4 - (i8 << 3) + i2) | 0 : i4 - (i8 << 3) + i2 | 0;
 i8 = ((i6 << 2) - (i3 << 3) + i1 | 0) < 0 ? 0 - ((i6 << 2) - (i3 << 3) + i1) | 0 : (i6 << 2) - (i3 << 3) + i1 | 0;
 i2 = (i2 | 0) < (i8 | 0) ? i8 : i2;
 if (((i2 | 0) >= 64 ? (i8 = (i3 << 2 | 0) < (i6 << 2 | 0) ? i3 << 2 : i6 << 2, i5 = (i3 << 2 | 0) > (i6 << 2 | 0) ? i3 << 2 : i6 << 2, (((i1 | 0) < (i8 | 0) ? i1 : i8) >> 8 | 0) < (HEAP32[i7 + 20 >> 2] | 0)) : 0) ? (((i1 | 0) > (i5 | 0) ? i1 : i5) >> 8 | 0) >= (HEAP32[i7 + 16 >> 2] | 0) : 0) {
  i1 = 0;
  do {
   i2 = i2 >> 2;
   i1 = i1 + 1 | 0;
  } while ((i2 | 0) > 64);
  HEAP32[i7 + 852 >> 2] = i1;
  i2 = i7 + 76 | 0;
  i3 = 0;
  i5 = 6;
 } else {
  i1 = i7 + 76 | 0;
  i3 = 0;
  i5 = 9;
 }
 L7 : while (1) {
  do if ((i5 | 0) == 6) if ((i1 | 0) > 0) {
   i8 = i2 + 16 | 0;
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP32[i2 + 32 >> 2] = i6;
   i4 = i2 + 8 | 0;
   i9 = HEAP32[i4 >> 2] | 0;
   HEAP32[i2 + 24 >> 2] = (i9 + i6 | 0) / 2 | 0;
   i5 = ((HEAP32[i2 >> 2] | 0) + i9 | 0) / 2 | 0;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i8 >> 2] = (i5 + ((i9 + i6 | 0) / 2 | 0) | 0) / 2 | 0;
   i8 = i2 + 20 | 0;
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP32[i2 + 36 >> 2] = i6;
   i9 = i2 + 12 | 0;
   i5 = HEAP32[i9 >> 2] | 0;
   HEAP32[i2 + 28 >> 2] = (i5 + i6 | 0) / 2 | 0;
   i4 = ((HEAP32[i2 + 4 >> 2] | 0) + i5 | 0) / 2 | 0;
   HEAP32[i9 >> 2] = i4;
   HEAP32[i8 >> 2] = (i4 + ((i5 + i6 | 0) / 2 | 0) | 0) / 2 | 0;
   i8 = i3 + 1 | 0;
   i6 = i1 + -1 | 0;
   HEAP32[i7 + 852 + (i3 << 2) >> 2] = i6;
   HEAP32[i7 + 852 + (i8 << 2) >> 2] = i6;
   i2 = i2 + 16 | 0;
   i3 = i8;
   break;
  } else {
   i4 = HEAP32[i2 >> 2] | 0;
   i1 = i2;
   i5 = 9;
   continue L7;
  } else if ((i5 | 0) == 9) {
   _gray_render_line(i7, i4, HEAP32[i1 + 4 >> 2] | 0);
   i2 = i1 + -16 | 0;
   i3 = i3 + -1 | 0;
  } while (0);
  if ((i3 | 0) <= -1) break;
  i1 = HEAP32[i7 + 852 + (i3 << 2) >> 2] | 0;
  i5 = 6;
 }
 return 0;
}

function __ZNK6String9SubStringEii(i6, i1, i2, i3) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i7 = 0;
 i1 = HEAP32[i1 >> 2] | 0;
 L1 : do if (i1) if ((i2 | 0) < 1) i4 = i1; else {
  i4 = i2;
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i4 = i1;
    break L1;
   }
   do if (i2 & 128) {
    if ((i2 & 224 | 0) == 192) {
     i1 = i1 + 2 | 0;
     break;
    }
    if ((i2 & 240 | 0) == 224) {
     i1 = i1 + 3 | 0;
     break;
    }
    if ((i2 & 248 | 0) == 240) {
     i1 = i1 + 4 | 0;
     break;
    }
    if ((i2 & 252 | 0) == 248) {
     i1 = i1 + 5 | 0;
     break;
    } else {
     i1 = i1 + 6 | 0;
     break;
    }
   } else i1 = i1 + 1 | 0; while (0);
   if ((i4 | 0) > 1) i4 = i4 + -1 | 0; else {
    i4 = i1;
    break;
   }
  }
 } else i4 = 0; while (0);
 L23 : do if ((i3 | 0) > 0) {
  i1 = i4;
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   if (!(i2 << 24 >> 24)) break L23;
   do if (i2 & 128) {
    if ((i2 & 224 | 0) == 192) {
     i1 = i1 + 2 | 0;
     break;
    }
    if ((i2 & 240 | 0) == 224) {
     i1 = i1 + 3 | 0;
     break;
    }
    if ((i2 & 248 | 0) == 240) {
     i1 = i1 + 4 | 0;
     break;
    }
    if ((i2 & 252 | 0) == 248) {
     i1 = i1 + 5 | 0;
     break;
    } else {
     i1 = i1 + 6 | 0;
     break;
    }
   } else i1 = i1 + 1 | 0; while (0);
   if ((i3 | 0) > 1) i3 = i3 + -1 | 0; else break;
  }
 } else i1 = i4; while (0);
 i1 = i1 - i4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 if (!((i4 | 0) != 0 & (i1 | 0) > 0)) return;
 do if ((i1 | 0) > -1) {
  if (!(i1 + 1 | 0)) {
   HEAP32[i6 >> 2] = 0;
   i7 = 35;
   break;
  }
  i5 = __Znaj((i1 + 1 | 0) > -1 ? i1 + 1 | 0 : -1) | 0;
  HEAP32[i6 + 12 >> 2] = i1 + 1;
  HEAP8[i5 >> 0] = 0;
  HEAP32[i6 >> 2] = i5;
  _memcpy(i5 | 0, i4 | 0, i1 | 0) | 0;
  HEAP8[i5 + i1 >> 0] = 0;
  i1 = HEAP8[i5 >> 0] | 0;
  if (!(i1 << 24 >> 24)) {
   i2 = 0;
   i1 = i5;
  } else {
   i2 = 0;
   i3 = i5;
   do {
    i4 = (i1 & 255) >>> 7 & 255;
    i2 = (i4 ^ 1) + i2 + ((i1 & 255) >>> 6 & i4) | 0;
    i3 = i3 + 1 | 0;
    i1 = HEAP8[i3 >> 0] | 0;
   } while (i1 << 24 >> 24 != 0);
   i1 = i5;
  }
 } else i7 = 35; while (0);
 if ((i7 | 0) == 35) {
  _memcpy(0, i4 | 0, i1 | 0) | 0;
  HEAP8[0 + i1 >> 0] = 0;
  i2 = 0;
  i1 = 0;
 }
 HEAP32[i6 + 4 >> 2] = i2;
 HEAP32[i6 + 8 >> 2] = _strlen(i1) | 0;
 return;
}

function _ps_dimension_set_mask_bits(i6, i9, i10, i7, i1, i8) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = HEAP32[i6 + 12 >> 2] | 0;
 if (i5) HEAP32[(HEAP32[i6 + 20 >> 2] | 0) + (i5 + -1 << 4) + 12 >> 2] = i1;
 i2 = HEAP32[i6 + 16 >> 2] | 0;
 do if ((i5 + 1 | 0) >>> 0 > i2 >>> 0) {
  HEAP32[i11 >> 2] = 0;
  i3 = _ft_mem_realloc(i8, 16, i2, i5 + 8 & -8, HEAP32[i6 + 20 >> 2] | 0, i11) | 0;
  HEAP32[i6 + 20 >> 2] = i3;
  i1 = HEAP32[i11 >> 2] | 0;
  if (!i1) {
   HEAP32[i6 + 16 >> 2] = i5 + 8 & -8;
   i1 = i3;
   i4 = i3;
   i2 = i5 + 8 & -8;
   break;
  }
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 } else {
  i3 = HEAP32[i6 + 20 >> 2] | 0;
  i1 = i3;
  i4 = i3;
 } while (0);
 HEAP32[i4 + (i5 << 4) >> 2] = 0;
 HEAP32[i4 + (i5 << 4) + 12 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = i5 + 1;
 if (!(i5 + 1 | 0)) {
  do if (!i2) {
   HEAP32[i11 >> 2] = 0;
   i1 = _ft_mem_realloc(i8, 16, 0, 8, i3, i11) | 0;
   HEAP32[i6 + 20 >> 2] = i1;
   i2 = HEAP32[i11 >> 2] | 0;
   if (!i2) {
    HEAP32[i6 + 16 >> 2] = 8;
    break;
   }
   i10 = i2;
   STACKTOP = i11;
   return i10 | 0;
  } while (0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 12 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 1;
 } else i1 = i1 + (i5 << 4) | 0;
 i3 = i1 + 4 | 0;
 i2 = ((HEAP32[i3 >> 2] | 0) + 7 | 0) >>> 3;
 HEAP32[i11 >> 2] = 0;
 do if ((i7 + 7 | 0) >>> 3 >>> 0 > i2 >>> 0) {
  i6 = i1 + 8 | 0;
  HEAP32[i6 >> 2] = _ft_mem_realloc(i8, 1, i2, ((i7 + 7 | 0) >>> 3) + 7 & 1073741816, HEAP32[i6 >> 2] | 0, i11) | 0;
  i2 = HEAP32[i11 >> 2] | 0;
  if (!i2) {
   HEAP32[i3 >> 2] = (((i7 + 7 | 0) >>> 3) + 7 & 1073741816) << 3;
   break;
  }
  i10 = i2;
  STACKTOP = i11;
  return i10 | 0;
 } while (0);
 HEAP32[i1 >> 2] = i7;
 if (!i7) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i6 = i9 + (i10 >>> 3) | 0;
 i3 = 128 >>> (i10 & 7);
 i5 = 128;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 while (1) {
  HEAP8[i4 >> 0] = (((HEAPU8[i6 >> 0] | 0) & i3 | 0) == 0 ? 0 : i5) | (HEAPU8[i4 >> 0] | 0) & (i5 ^ 255);
  i1 = i3 >> 1;
  i2 = i5 >> 1;
  i7 = i7 + -1 | 0;
  if (!i7) {
   i1 = 0;
   break;
  } else {
   i6 = (i1 | 0) == 0 ? i6 + 1 | 0 : i6;
   i3 = (i1 | 0) == 0 ? 128 : i1;
   i5 = (i2 | 0) == 0 ? 128 : i2;
   i4 = (i2 | 0) == 0 ? i4 + 1 | 0 : i4;
  }
 }
 STACKTOP = i11;
 return i1 | 0;
}

function _Bezier_Up(i11, i10, i9, i5, i4) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = HEAP32[i11 + 52 >> 2] | 0;
 i7 = HEAP32[i2 + (i10 << 3) + 4 >> 2] | 0;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = HEAP32[i11 + 40 >> 2] | 0;
 if (!((i7 | 0) > (i4 | 0) | (i3 | 0) < (i5 | 0))) {
  i6 = HEAP32[i11 + 4 >> 2] | 0;
  i8 = (i3 & 0 - i6 | 0) > (i4 | 0) ? i4 : i3 & 0 - i6;
  if ((i7 | 0) >= (i5 | 0)) if (!(i7 & 65535 & i6 + 65535)) {
   if (HEAP8[i11 + 87 >> 0] | 0) {
    HEAP8[i11 + 87 >> 0] = 0;
    i1 = i1 + -4 | 0;
   }
   HEAP32[i1 >> 2] = HEAP32[i2 + (i10 << 3) >> 2];
   i4 = i6 + (i7 + -1 + i6 & 0 - i6) | 0;
   i3 = i7 + -1 + i6 & 0 - i6;
   i1 = i1 + 4 | 0;
  } else {
   i4 = i7 + -1 + i6 & 0 - i6;
   i3 = i7 + -1 + i6 & 0 - i6;
  } else {
   i4 = i5;
   i3 = i5;
  }
  if (HEAP8[i11 + 86 >> 0] | 0) {
   HEAP32[(HEAP32[i11 + 88 >> 2] | 0) + 20 >> 2] = i3 >> HEAP32[i11 >> 2];
   HEAP8[i11 + 86 >> 0] = 0;
  }
  if ((i8 | 0) >= (i4 | 0)) {
   if ((i1 + ((i8 - i4 >> HEAP32[i11 >> 2]) + 1 << 2) | 0) >>> 0 >= (HEAP32[i11 + 36 >> 2] | 0) >>> 0) {
    HEAP32[i11 + 40 >> 2] = i1;
    HEAP32[i11 + 44 >> 2] = 98;
    i11 = 1;
    return i11 | 0;
   }
   i3 = i2;
   L18 : do {
    while (1) {
     HEAP8[i11 + 87 >> 0] = 0;
     i6 = HEAP32[i3 + 4 >> 2] | 0;
     if ((i6 | 0) <= (i4 | 0)) {
      i7 = 19;
      break;
     }
     i5 = HEAP32[i3 + (i10 << 3) + 4 >> 2] | 0;
     if ((i6 - i5 | 0) < (HEAP32[i11 + 16 >> 2] | 0)) {
      i7 = 16;
      break;
     }
     FUNCTION_TABLE_vi[i9 & 127](i3);
     i3 = i3 + (i10 << 3) | 0;
     if (i3 >>> 0 < i2 >>> 0) break L18;
    }
    if ((i7 | 0) == 16) {
     i7 = HEAP32[i3 + (i10 << 3) >> 2] | 0;
     HEAP32[i1 >> 2] = ((Math_imul((HEAP32[i3 >> 2] | 0) - i7 | 0, i4 - i5 | 0) | 0) / (i6 - i5 | 0) | 0) + i7;
     i4 = (HEAP32[i11 + 4 >> 2] | 0) + i4 | 0;
     i1 = i1 + 4 | 0;
    } else if ((i7 | 0) == 19) if ((i6 | 0) == (i4 | 0)) {
     HEAP8[i11 + 87 >> 0] = 1;
     HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
     i4 = (HEAP32[i11 + 4 >> 2] | 0) + i4 | 0;
     i1 = i1 + 4 | 0;
    }
    i3 = i3 + (0 - i10 << 3) | 0;
   } while (!((i4 | 0) > (i8 | 0) | i3 >>> 0 < i2 >>> 0));
   i2 = HEAP32[i11 + 52 >> 2] | 0;
  }
 }
 HEAP32[i11 + 40 >> 2] = i1;
 HEAP32[i11 + 52 >> 2] = i2 + (0 - i10 << 3);
 i11 = 0;
 return i11 | 0;
}

function _cff_make_private_dict(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 _memset(i3 | 0, 0, 196) | 0;
 i1 = HEAP8[i4 + 176 >> 0] | 0;
 HEAP8[i3 + 8 >> 0] = i1;
 if (i1 << 24 >> 24) {
  i2 = 0;
  do {
   HEAP16[i3 + 12 + (i2 << 1) >> 1] = HEAP32[i4 + 180 + (i2 << 2) >> 2];
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i1 & 255 | 0));
 }
 i1 = HEAP8[i4 + 177 >> 0] | 0;
 HEAP8[i3 + 9 >> 0] = i1;
 if (i1 << 24 >> 24) {
  i2 = 0;
  do {
   HEAP16[i3 + 40 + (i2 << 1) >> 1] = HEAP32[i4 + 236 + (i2 << 2) >> 2];
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i1 & 255 | 0));
 }
 i1 = HEAP8[i4 + 178 >> 0] | 0;
 HEAP8[i3 + 10 >> 0] = i1;
 if (i1 << 24 >> 24) {
  i2 = 0;
  do {
   HEAP16[i3 + 60 + (i2 << 1) >> 1] = HEAP32[i4 + 276 + (i2 << 2) >> 2];
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i1 & 255 | 0));
 }
 i1 = HEAP8[i4 + 179 >> 0] | 0;
 HEAP8[i3 + 11 >> 0] = i1;
 if (i1 << 24 >> 24) {
  i2 = 0;
  do {
   HEAP16[i3 + 88 + (i2 << 1) >> 1] = HEAP32[i4 + 332 + (i2 << 2) >> 2];
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i1 & 255 | 0));
 }
 HEAP32[i3 + 108 >> 2] = HEAP32[i4 + 372 >> 2];
 HEAP32[i3 + 112 >> 2] = HEAP32[i4 + 376 >> 2];
 HEAP32[i3 + 116 >> 2] = HEAP32[i4 + 380 >> 2];
 HEAP16[i3 + 120 >> 1] = HEAP32[i4 + 384 >> 2];
 HEAP16[i3 + 122 >> 1] = HEAP32[i4 + 388 >> 2];
 i1 = HEAP8[i4 + 392 >> 0] | 0;
 HEAP8[i3 + 124 >> 0] = i1;
 if (i1 << 24 >> 24) {
  i2 = 0;
  do {
   HEAP16[i3 + 128 + (i2 << 1) >> 1] = HEAP32[i4 + 396 + (i2 << 2) >> 2];
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i1 & 255 | 0));
 }
 i1 = HEAP8[i4 + 393 >> 0] | 0;
 HEAP8[i3 + 125 >> 0] = i1;
 if (!(i1 << 24 >> 24)) {
  i2 = i4 + 500 | 0;
  i2 = HEAP8[i2 >> 0] | 0;
  i1 = i3 + 126 | 0;
  HEAP8[i1 >> 0] = i2;
  i1 = i4 + 512 | 0;
  i1 = HEAP32[i1 >> 2] | 0;
  i2 = i3 + 184 | 0;
  HEAP32[i2 >> 2] = i1;
  i2 = i4 + 508 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i4 = i3 + 4 | 0;
  HEAP32[i4 >> 2] = i2;
  return;
 }
 i2 = 0;
 do {
  HEAP16[i3 + 154 + (i2 << 1) >> 1] = HEAP32[i4 + 448 + (i2 << 2) >> 2];
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i1 & 255 | 0));
 i2 = i4 + 500 | 0;
 i2 = HEAP8[i2 >> 0] | 0;
 i1 = i3 + 126 | 0;
 HEAP8[i1 >> 0] = i2;
 i1 = i4 + 512 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = i3 + 184 | 0;
 HEAP32[i2 >> 2] = i1;
 i2 = i4 + 508 | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 i4 = i3 + 4 | 0;
 HEAP32[i4 >> 2] = i2;
 return;
}

function _tt_cmap2_validate(i11, i12) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = HEAPU8[i11 + 2 >> 0] << 8 | HEAPU8[i11 + 3 >> 0];
 if (i10 >>> 0 < 518 ? 1 : (i11 + i10 | 0) >>> 0 > (HEAP32[i12 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i12, 8);
 i2 = 0;
 i3 = 0;
 i4 = i11 + 6 | 0;
 while (1) {
  i1 = HEAPU8[i4 + 1 >> 0] | 0;
  if (!((i1 & 7 | 0) == 0 ? 1 : (HEAP32[i12 + 8 >> 2] | 0) >>> 0 < 2)) {
   i5 = 5;
   break;
  }
  i9 = (HEAPU8[i4 >> 0] << 8 | i1) >>> 3;
  i9 = i9 >>> 0 > i2 >>> 0 ? i9 : i2;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == 256) break; else {
   i2 = i9;
   i4 = i4 + 2 | 0;
  }
 }
 if ((i5 | 0) == 5) _ft_validator_error(i12, 8);
 if ((i11 + ((i9 << 3) + 526) | 0) >>> 0 > (HEAP32[i12 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i12, 8);
 i8 = 0;
 i7 = i11 + 518 | 0;
 L13 : while (1) {
  i5 = i7;
  i2 = HEAPU8[i7 >> 0] << 8 | HEAPU8[i7 + 1 >> 0];
  i4 = HEAPU8[i7 + 2 >> 0] << 8 | HEAPU8[i7 + 3 >> 0];
  i6 = HEAP8[i7 + 4 >> 0] << 8 | HEAPU8[i7 + 5 >> 0];
  i1 = i7 + 8 | 0;
  i3 = HEAPU8[i7 + 6 >> 0] << 8 | HEAPU8[i7 + 7 >> 0];
  if (i4) {
   if ((HEAP32[i12 + 8 >> 2] | 0) >>> 0 > 1 ? i2 >>> 0 > 255 | (i4 + i2 | 0) >>> 0 > 256 : 0) {
    i5 = 13;
    break;
   }
   if (i3) {
    if ((i7 + (i3 + 6) | 0) >>> 0 < (i11 + ((i9 << 3) + 526) | 0) >>> 0) {
     i5 = 17;
     break;
    }
    if ((i7 + (i3 + 6 + (i4 << 1)) | 0) >>> 0 > (i11 + i10 | 0) >>> 0) {
     i5 = 17;
     break;
    }
    if (HEAP32[i12 + 8 >> 2] | 0) {
     i3 = i7 + ((i4 << 1) + 8) | 0;
     i4 = i7 + ((i4 << 1) + 8) | 0;
     i2 = i7 + 10 | 0;
     i2 = (i4 >>> 0 > i2 >>> 0 ? i4 : i2) + (-9 - i5) | 0;
     do {
      i5 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
      i1 = i1 + 2 | 0;
      if ((i5 | 0) != 0 ? (i5 + i6 & 65535) >>> 0 >= (HEAP32[i12 + 172 >> 2] | 0) >>> 0 : 0) {
       i5 = 22;
       break L13;
      }
     } while (i1 >>> 0 < i3 >>> 0);
     i1 = i7 + (i2 + 10 & -2) | 0;
    }
   }
  }
  i8 = i8 + 1 | 0;
  if (i8 >>> 0 > i9 >>> 0) {
   i5 = 26;
   break;
  } else i7 = i1;
 }
 if ((i5 | 0) == 13) _ft_validator_error(i12, 8); else if ((i5 | 0) == 17) _ft_validator_error(i12, 9); else if ((i5 | 0) == 22) _ft_validator_error(i12, 16); else if ((i5 | 0) == 26) return 0;
 return 0;
}

function _tt_face_load_kern(i13, i2) {
 i13 = i13 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i13 + 508 >> 2] & 63](i13, 1801810542, i2, i14) | 0;
 if (i1) {
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 if (i1 >>> 0 < 4) {
  i13 = 142;
  STACKTOP = i14;
  return i13 | 0;
 }
 i1 = _FT_Stream_ExtractFrame(i2, i1, i13 + 772 | 0) | 0;
 if (i1) {
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 i11 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 + 776 >> 2] = i11;
 i10 = HEAP32[i13 + 772 >> 2] | 0;
 i9 = (HEAPU8[i10 + 2 >> 0] | 0) << 8 | (HEAPU8[i10 + 3 >> 0] | 0);
 i9 = i9 >>> 0 > 32 ? 32 : i9;
 L10 : do if (!i9) {
  i3 = 0;
  i2 = 0;
  i1 = 0;
 } else {
  i3 = 0;
  i2 = 0;
  i1 = 0;
  i12 = i10 + 4 | 0;
  do {
   i8 = 1 << i2;
   i5 = i12 + 6 | 0;
   if (i5 >>> 0 > (i10 + i11 | 0) >>> 0) break L10;
   i4 = (HEAPU8[i12 + 2 >> 0] | 0) << 8 | (HEAPU8[i12 + 3 >> 0] | 0);
   if (i4 >>> 0 < 7) break L10;
   i6 = i12 + i4 | 0;
   i7 = i12;
   i12 = i6 >>> 0 > (i10 + i11 | 0) >>> 0 ? i10 + i11 | 0 : i6;
   L16 : do if (!((i7 + 14 | 0) >>> 0 > (i10 + i11 | 0) >>> 0 ? 1 : ((HEAPU8[i7 + 4 >> 0] | 0) << 8 | (HEAPU8[i7 + 5 >> 0] | 0) & 247 | 0) != 1)) {
    i4 = (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i7 + 7 >> 0] | 0);
    i6 = i12 - (i7 + 14) | 0;
    i4 = (i6 | 0) < (i4 * 6 | 0) ? (i6 | 0) / 6 | 0 : i4;
    i3 = i8 | i3;
    if (i4) {
     if (i4 + -1 | 0) {
      i5 = i4 + -1 | 0;
      i6 = (HEAPU8[i7 + 15 >> 0] | 0) << 16 | (HEAPU8[i7 + 14 >> 0] | 0) << 24 | (HEAPU8[i7 + 16 >> 0] | 0) << 8 | (HEAPU8[i7 + 17 >> 0] | 0);
      i4 = i7 + 20 | 0;
      while (1) {
       i7 = i6;
       i6 = (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0);
       if (i6 >>> 0 <= i7 >>> 0) break L16;
       i5 = i5 + -1 | 0;
       if (!i5) break; else i4 = i4 + 6 | 0;
      }
     }
     i1 = i8 | i1;
    }
   } while (0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i9 >>> 0);
 } while (0);
 HEAP32[i13 + 780 >> 2] = i2;
 HEAP32[i13 + 784 >> 2] = i3;
 HEAP32[i13 + 788 >> 2] = i1;
 i13 = 0;
 STACKTOP = i14;
 return i13 | 0;
}

function __ZNK4math4AABB9FacePointEiff(i1, i3, i2, f4, f5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 var i6 = 0, f7 = f0, f8 = f0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZNK4math6float3miERKS0_(i6, i3 + 12 | 0, i3);
 switch (i2 | 0) {
 case 5:
  {
   f4 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 >> 2]) * f4));
   __ZN4math6float3C2Efff(i1, f4, Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 + 4 >> 2]) * f5)), Math_fround(HEAPF32[i3 + 20 >> 2]));
   STACKTOP = i6;
   return;
  }
 case 1:
  {
   f7 = Math_fround(HEAPF32[i3 + 12 >> 2]);
   f4 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 + 4 >> 2]) * f4));
   __ZN4math6float3C2Efff(i1, f7, f4, Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 + 8 >> 2]) * f5)));
   STACKTOP = i6;
   return;
  }
 case 2:
  {
   f4 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 >> 2]) * f4));
   f7 = Math_fround(HEAPF32[i3 + 4 >> 2]);
   __ZN4math6float3C2Efff(i1, f4, f7, Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 + 8 >> 2]) * f5)));
   STACKTOP = i6;
   return;
  }
 case 3:
  {
   f4 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 >> 2]) * f4));
   f7 = Math_fround(HEAPF32[i3 + 16 >> 2]);
   __ZN4math6float3C2Efff(i1, f4, f7, Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 + 8 >> 2]) * f5)));
   STACKTOP = i6;
   return;
  }
 case 4:
  {
   f7 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 >> 2]) * f4));
   __ZN4math6float3C2Efff(i1, f7, Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 + 4 >> 2]) * f5)), Math_fround(HEAPF32[i3 + 8 >> 2]));
   STACKTOP = i6;
   return;
  }
 default:
  {
   f8 = Math_fround(HEAPF32[i3 >> 2]);
   f7 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 + 4 >> 2]) * f4));
   __ZN4math6float3C2Efff(i1, f8, f7, Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[i6 + 8 >> 2]) * f5)));
   STACKTOP = i6;
   return;
  }
 }
}

function _tt_cmap4_char_map_linear(i12, i14, i13) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i15 = 0;
 i10 = HEAP32[i12 + 16 >> 2] | 0;
 i11 = HEAPU8[i10 + 7 >> 0] & 254 | HEAPU8[i10 + 6 >> 0] << 8;
 if (!(i11 >>> 1)) {
  i15 = 0;
  return i15 | 0;
 }
 i2 = (HEAP32[i14 >> 2] | 0) + (i13 << 24 >> 24 == 0 ^ 1) | 0;
 if (i2 >>> 0 >= 65536) {
  i15 = 0;
  return i15 | 0;
 }
 while (1) {
  i9 = 0;
  i1 = i10 + 14 | 0;
  i3 = i10 + (i11 + 16) | 0;
  L9 : while (1) {
   i6 = HEAPU8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
   i8 = i3 + 2 | 0;
   i5 = HEAPU8[i3 >> 0] << 8 | HEAPU8[i3 + 1 >> 0];
   if (i2 >>> 0 > i6 >>> 0 | i2 >>> 0 < i5 >>> 0) i1 = i1 + 2 | 0; else {
    i1 = HEAP8[i3 + i11 >> 0] << 8 | HEAPU8[i3 + (i11 | 1) >> 0];
    i7 = i3 + (i11 << 1) | 0;
    i4 = HEAPU8[i7 >> 0] << 8 | HEAPU8[i3 + (i11 << 1 | 1) >> 0];
    if ((i6 | 0) == 65535 & (i9 >>> 0 >= ((i11 >>> 1) + -1 | 0) >>> 0 & (i5 | 0) == 65535)) {
     i6 = HEAP32[i12 >> 2] | 0;
     if (!i4) {
      i15 = 11;
      break;
     }
     i6 = (i3 + ((i11 << 1 | 2) + i4) | 0) >>> 0 > ((HEAP32[i6 + 500 >> 2] | 0) + (HEAP32[i6 + 504 >> 2] | 0) | 0) >>> 0;
     i1 = i6 ? 1 : i1;
     i4 = i6 ? 0 : i4;
    }
    if ((i4 | 0) < 65535) {
     i15 = 19;
     break;
    }
    switch (i4 | 0) {
    case 65535:
     {
      i1 = i7;
      break;
     }
    default:
     {
      i15 = 9;
      break L9;
     }
    }
   }
   i9 = i9 + 1 | 0;
   if (i9 >>> 0 >= i11 >>> 1 >>> 0) {
    i1 = 0;
    break;
   } else i3 = i8;
  }
  if ((i15 | 0) == 19) switch (i4 | 0) {
  case 0:
   {
    i15 = 11;
    break;
   }
  default:
   i15 = 9;
  }
  if ((i15 | 0) == 9) {
   i15 = 0;
   i8 = (i2 - i5 << 1) + (i11 << 1) + i4 | 0;
   i3 = HEAPU8[i3 + i8 >> 0] << 8 | HEAPU8[i3 + (i8 + 1) >> 0];
   if (!i3) i1 = 0; else i1 = i3 + i1 & 65535;
  } else if ((i15 | 0) == 11) {
   i15 = 0;
   i1 = i1 + i2 & 65535;
  }
  if (i13 << 24 >> 24 == 0 | (i1 | 0) != 0) break;
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= 65536) {
   i1 = 0;
   i15 = 18;
   break;
  }
 }
 if ((i15 | 0) == 18) return i1 | 0;
 if (!(i13 << 24 >> 24 != 0 & (i1 | 0) != 0)) {
  i15 = i1;
  return i15 | 0;
 }
 HEAP32[i14 >> 2] = i2;
 i15 = i1;
 return i15 | 0;
}

function _pop_arg(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0;
 L1 : do if (i3 >>> 0 <= 20) do switch (i3 | 0) {
 case 9:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   HEAP32[i2 >> 2] = i3;
   break L1;
  }
 case 10:
  {
   i3 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i1 >> 2] = i3 + 4;
   HEAP32[i2 >> 2] = i4;
   HEAP32[i2 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 11:
  {
   i3 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i1 >> 2] = i3 + 4;
   HEAP32[i2 >> 2] = i4;
   HEAP32[i2 + 4 >> 2] = 0;
   break L1;
  }
 case 12:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i3 = HEAP32[i5 >> 2] | 0;
   i4 = HEAP32[i5 + 4 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 8;
   HEAP32[i2 >> 2] = i3;
   HEAP32[i2 + 4 >> 2] = i4;
   break L1;
  }
 case 13:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   HEAP32[i2 >> 2] = (i5 & 65535) << 16 >> 16;
   HEAP32[i2 + 4 >> 2] = (((i5 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 14:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   HEAP32[i2 >> 2] = i5 & 65535;
   HEAP32[i2 + 4 >> 2] = 0;
   break L1;
  }
 case 15:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   HEAP32[i2 >> 2] = (i5 & 255) << 24 >> 24;
   HEAP32[i2 + 4 >> 2] = (((i5 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 16:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i5 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   HEAP32[i2 >> 2] = i5 & 255;
   HEAP32[i2 + 4 >> 2] = 0;
   break L1;
  }
 case 17:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 case 18:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _PS_Conv_ToInt(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i6 >>> 0) {
  i2 = HEAP8[i1 >> 0] | 0;
  switch (i2 << 24 >> 24) {
  case 43:
  case 45:
   {
    if ((i1 + 1 | 0) == (i6 | 0)) {
     i5 = 0;
     i2 = i1;
     break L1;
    } else {
     i1 = i1 + 1 | 0;
     i4 = i2 << 24 >> 24 == 45 & 1;
    }
    break;
   }
  default:
   i4 = 0;
  }
  L6 : do if (i1 >>> 0 < i6 >>> 0) {
   i2 = 0;
   while (1) {
    i3 = HEAP8[i1 >> 0] | 0;
    switch (i3 << 24 >> 24) {
    case 0:
    case 12:
    case 9:
    case 10:
    case 13:
    case 32:
     break L6;
    default:
     {}
    }
    if (i3 << 24 >> 24 < 0) break L6;
    if (((i3 & 127) + -48 | 0) >>> 0 >= 10) break L6;
    i2 = (HEAP8[326563 + (i3 & 127) >> 0] | 0) + (i2 * 10 | 0) | 0;
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i6 >>> 0) break L6;
   }
  } else i2 = 0; while (0);
  HEAP32[i7 >> 2] = i1;
  i5 = i4 << 24 >> 24 == 0 ? i2 : 0 - i2 | 0;
  i2 = i1;
 } else {
  i5 = 0;
  i2 = i1;
 } while (0);
 if (i2 >>> 0 >= i6 >>> 0) {
  i7 = i5;
  return i7 | 0;
 }
 if ((HEAP8[i2 >> 0] | 0) != 35) {
  i7 = i5;
  return i7 | 0;
 }
 i1 = i2 + 1 | 0;
 HEAP32[i7 >> 2] = i1;
 if ((i5 + -2 | 0) >>> 0 > 34 | i1 >>> 0 >= i6 >>> 0) {
  i7 = 0;
  return i7 | 0;
 }
 i3 = HEAP8[i1 >> 0] | 0;
 switch (i3 << 24 >> 24) {
 case 43:
 case 45:
  {
   i1 = i2 + 2 | 0;
   if ((i1 | 0) == (i6 | 0)) {
    i7 = 0;
    return i7 | 0;
   } else i4 = i3 << 24 >> 24 == 45 & 1;
   break;
  }
 default:
  i4 = 0;
 }
 L27 : do if (i1 >>> 0 < i6 >>> 0) {
  i3 = 0;
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i2 = i3;
     break L27;
    }
   default:
    {}
   }
   if (i2 << 24 >> 24 < 0) {
    i2 = i3;
    break L27;
   }
   i2 = HEAP8[326563 + (i2 & 127) >> 0] | 0;
   if (!(i2 << 24 >> 24 > -1 & (i2 << 24 >> 24 | 0) < (i5 | 0))) {
    i2 = i3;
    break L27;
   }
   i2 = (i2 << 24 >> 24) + (Math_imul(i3, i5) | 0) | 0;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 < i6 >>> 0) i3 = i2; else break L27;
  }
 } else i2 = 0; while (0);
 HEAP32[i7 >> 2] = i1;
 i7 = i4 << 24 >> 24 == 0 ? i2 : 0 - i2 | 0;
 return i7 | 0;
}

function _ps_parser_load_field_table(i11, i7, i10, i9, i1) {
 i11 = i11 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 i1 = i8;
 i2 = i7;
 i3 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 HEAP32[i8 + 8 >> 2] = 2;
 switch (HEAP32[i7 + 8 >> 2] | 0) {
 case 7:
 case 9:
  {
   HEAP32[i8 + 8 >> 2] = 3;
   break;
  }
 default:
  {}
 }
 _ps_parser_to_token(i11, i8 + 436 | 0);
 if ((HEAP32[i8 + 436 + 8 >> 2] | 0) != 3) {
  i11 = 162;
  STACKTOP = i8;
  return i11 | 0;
 }
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i11 + 8 >> 2] | 0;
 i2 = (HEAP32[i8 + 436 >> 2] | 0) + 1 | 0;
 HEAP32[i11 >> 2] = i2;
 i3 = (HEAP32[i8 + 436 + 4 >> 2] | 0) + -1 | 0;
 HEAP32[i11 + 8 >> 2] = i3;
 L8 : do if (i2 >>> 0 < i3 >>> 0) {
  i1 = i8 + 40 | 0;
  do {
   _ps_parser_to_token(i11, i8 + 424 | 0);
   if (!(HEAP32[i8 + 424 + 8 >> 2] | 0)) break L8;
   if (i1 >>> 0 < (i8 + 40 + 384 | 0) >>> 0) {
    HEAP32[i1 >> 2] = HEAP32[i8 + 424 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i8 + 424 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i8 + 424 + 8 >> 2];
   }
   i1 = i1 + 12 | 0;
  } while ((HEAP32[i11 >> 2] | 0) >>> 0 < (HEAP32[i11 + 8 >> 2] | 0) >>> 0);
 } else i1 = i8 + 40 | 0; while (0);
 i1 = i1 - (i8 + 40) | 0;
 HEAP32[i11 >> 2] = i5;
 HEAP32[i11 + 8 >> 2] = i6;
 if ((i1 | 0) < 0) {
  i11 = 162;
  STACKTOP = i8;
  return i11 | 0;
 }
 i3 = HEAP32[i7 + 24 >> 2] | 0;
 i1 = ((i1 | 0) / 12 | 0) >>> 0 > i3 >>> 0 ? i3 : (i1 | 0) / 12 | 0;
 if ((HEAP32[i7 + 8 >> 2] | 0) != 7 ? (i4 = HEAP32[i7 + 28 >> 2] | 0, (i4 | 0) != 0) : 0) HEAP8[(HEAP32[i10 >> 2] | 0) + i4 >> 0] = i1;
 if ((i1 | 0) > 0) {
  i3 = HEAPU8[i8 + 20 >> 0] | 0;
  i4 = HEAP32[i8 + 16 >> 2] | 0;
  i2 = i8 + 40 | 0;
  while (1) {
   HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i11 + 8 >> 2] = HEAP32[i2 + 4 >> 2];
   _ps_parser_load_field(i11, i8, i10, i9, 0) | 0;
   i4 = i4 + i3 | 0;
   HEAP32[i8 + 16 >> 2] = i4;
   if ((i1 | 0) <= 1) break; else {
    i1 = i1 + -1 | 0;
    i2 = i2 + 12 | 0;
   }
  }
 }
 HEAP32[i11 >> 2] = i5;
 HEAP32[i11 + 8 >> 2] = i6;
 i11 = 0;
 STACKTOP = i8;
 return i11 | 0;
}

function __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i3 = (((HEAP32[i5 + 4 >> 2] | 0) - i1 | 0) / 48 | 0) + 1 | 0;
 if (i3 >>> 0 > 89478485) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i5);
  i1 = HEAP32[i5 >> 2] | 0;
 }
 i2 = ((HEAP32[i5 + 8 >> 2] | 0) - i1 | 0) / 48 | 0;
 if (i2 >>> 0 < 44739242) i3 = i2 << 1 >>> 0 < i3 >>> 0 ? i3 : i2 << 1; else i3 = 89478485;
 i1 = ((HEAP32[i5 + 4 >> 2] | 0) - i1 | 0) / 48 | 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = i5 + 8;
 if (!i3) i2 = 0; else i2 = __Znwj(i3 * 48 | 0) | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = i2 + (i1 * 48 | 0) | 0;
 HEAP32[i6 + 8 >> 2] = i7;
 HEAP32[i6 + 4 >> 2] = i7;
 HEAP32[i6 + 12 >> 2] = i2 + (i3 * 48 | 0);
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i7, HEAP32[i4 >> 2] | 0);
 i3 = i2 + (i1 * 48 | 0) + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i3, HEAP32[i4 + 16 >> 2] | 0);
 i3 = i2 + (i1 * 48 | 0) + 32 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i3, HEAP32[i4 + 32 >> 2] | 0);
 HEAP32[i6 + 8 >> 2] = (HEAP32[i6 + 8 >> 2] | 0) + 48;
 __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(i5, i6);
 i3 = HEAP32[i6 + 4 >> 2] | 0;
 i4 = HEAP32[i6 + 8 >> 2] | 0;
 if ((i4 | 0) != (i3 | 0)) {
  i5 = i4;
  do {
   i1 = i5 + -16 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2) __ZdaPv(i2);
   HEAP32[i1 >> 2] = 0;
   i1 = i5 + -32 | 0;
   i5 = i5 + -48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2) __ZdaPv(i2);
   HEAP32[i1 >> 2] = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i5 >> 2] = 0;
  } while ((i5 | 0) != (i3 | 0));
  HEAP32[i6 + 8 >> 2] = i4 + (~(((i4 + -48 - i3 | 0) >>> 0) / 48 | 0) * 48 | 0);
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  STACKTOP = i6;
  return;
 }
 __ZdlPv(i1);
 STACKTOP = i6;
 return;
}

function _FT_GlyphLoader_CheckPoints(i8, i1, i6) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 HEAP32[i9 >> 2] = 0;
 i3 = (HEAP16[i8 + 22 >> 1] | 0) + i1 + (HEAP16[i8 + 58 >> 1] | 0) | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 do if (i3 >>> 0 > i1 >>> 0) {
  if ((i3 + 7 & -8) >>> 0 > 32767) {
   i8 = 10;
   STACKTOP = i9;
   return i8 | 0;
  }
  HEAP32[i8 + 24 >> 2] = _ft_mem_realloc(i7, 8, i1, i3 + 7 & -8, HEAP32[i8 + 24 >> 2] | 0, i9) | 0;
  if ((HEAP32[i9 >> 2] | 0) == 0 ? (HEAP32[i8 + 28 >> 2] = _ft_mem_realloc(i7, 1, i1, i3 + 7 & -8, HEAP32[i8 + 28 >> 2] | 0, i9) | 0, (HEAP32[i9 >> 2] | 0) == 0) : 0) {
   if (HEAP8[i8 + 16 >> 0] | 0) {
    i2 = _ft_mem_realloc(i7, 8, i1 << 1, (i3 + 7 & -8) << 1, HEAP32[i8 + 40 >> 2] | 0, i9) | 0;
    HEAP32[i8 + 40 >> 2] = i2;
    if (HEAP32[i9 >> 2] | 0) break;
    _memmove(i2 + ((i3 + 7 & -8) << 3) | 0, i2 + (i1 << 3) | 0, i1 << 3 | 0) | 0;
    HEAP32[i8 + 44 >> 2] = (HEAP32[i8 + 40 >> 2] | 0) + ((i3 + 7 & -8) << 3);
   }
   HEAP32[i8 + 4 >> 2] = i3 + 7 & -8;
   i4 = 1;
   i5 = 9;
  }
 } else {
  i4 = 0;
  i5 = 9;
 } while (0);
 do if ((i5 | 0) == 9) {
  i1 = HEAP32[i8 + 8 >> 2] | 0;
  i3 = HEAP16[i8 + 20 >> 1] | 0;
  i2 = (i3 << 16 >> 16) + i6 + (HEAP16[i8 + 56 >> 1] | 0) | 0;
  if (i2 >>> 0 > i1 >>> 0) {
   if ((i2 + 3 & -4) >>> 0 > 32767) {
    i8 = 10;
    STACKTOP = i9;
    return i8 | 0;
   }
   i1 = _ft_mem_realloc(i7, 2, i1, i2 + 3 & -4, HEAP32[i8 + 32 >> 2] | 0, i9) | 0;
   HEAP32[i8 + 32 >> 2] = i1;
   if (HEAP32[i9 >> 2] | 0) break;
   HEAP32[i8 + 8 >> 2] = i2 + 3 & -4;
   i3 = HEAP16[i8 + 20 >> 1] | 0;
  } else {
   if (!(i4 << 24 >> 24)) break;
   i1 = HEAP32[i8 + 32 >> 2] | 0;
  }
  i2 = HEAP16[i8 + 22 >> 1] | 0;
  HEAP32[i8 + 60 >> 2] = (HEAP32[i8 + 24 >> 2] | 0) + (i2 << 3);
  HEAP32[i8 + 64 >> 2] = (HEAP32[i8 + 28 >> 2] | 0) + i2;
  HEAP32[i8 + 68 >> 2] = i1 + (i3 << 16 >> 16 << 1);
  if (HEAP8[i8 + 16 >> 0] | 0) {
   HEAP32[i8 + 76 >> 2] = (HEAP32[i8 + 40 >> 2] | 0) + (i2 << 3);
   HEAP32[i8 + 80 >> 2] = (HEAP32[i8 + 44 >> 2] | 0) + (i2 << 3);
  }
 } while (0);
 i8 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function __Z26StringToVertexDataSemanticPKc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 do if ((i1 | 0) == 305314) i1 = 0; else {
  if (i1) {
   if ((i1 | 0) == 305225 | (_strcasecmp(i1, 305314) | 0) == 0) {
    i1 = 0;
    break;
   }
   if (!(_strcasecmp(i1, 305225) | 0)) {
    i1 = 0;
    break;
   }
   if ((i1 | 0) == 305305) {
    i1 = 1;
    break;
   }
   if ((i1 | 0) == 305321 | (_strcasecmp(i1, 305305) | 0) == 0) {
    i1 = 1;
    break;
   }
   if (!(_strcasecmp(i1, 305321) | 0)) {
    i1 = 1;
    break;
   }
   if ((i1 | 0) == 305298) {
    i1 = 2;
    break;
   }
   if (!(_strcasecmp(i1, 305298) | 0)) {
    i1 = 2;
    break;
   }
   if ((i1 | 0) == 305290) {
    i1 = 3;
    break;
   }
   if (!(_strcasecmp(i1, 305290) | 0)) {
    i1 = 3;
    break;
   }
   if ((i1 | 0) == 305284) {
    i1 = 5;
    break;
   }
   if ((i1 | 0) == 305325 | (_strcasecmp(i1, 305284) | 0) == 0) {
    i1 = 5;
    break;
   }
   if (!(_strcasecmp(i1, 305325) | 0)) {
    i1 = 5;
    break;
   }
   if ((i1 | 0) == 305281) {
    i1 = 6;
    break;
   }
   if ((i1 | 0) == 305329 | (_strcasecmp(i1, 305281) | 0) == 0) {
    i1 = 6;
    break;
   }
   if (!(_strcasecmp(i1, 305329) | 0)) {
    i1 = 6;
    break;
   }
   if ((i1 | 0) == 305269) {
    i1 = 7;
    break;
   }
   if (!(_strcasecmp(i1, 305269) | 0)) {
    i1 = 7;
    break;
   }
   if ((i1 | 0) == 305257) {
    i1 = 8;
    break;
   }
   if (!(_strcasecmp(i1, 305257) | 0)) {
    i1 = 8;
    break;
   }
   if ((i1 | 0) == 305247) {
    i1 = 9;
    break;
   }
   if ((i1 | 0) == 305338 | (_strcasecmp(i1, 305247) | 0) == 0) {
    i1 = 9;
    break;
   }
   if (!(_strcasecmp(i1, 305338) | 0)) {
    i1 = 9;
    break;
   }
   if ((i1 | 0) == 305240) {
    i1 = 10;
    break;
   }
   if (!(_strcasecmp(i1, 305240) | 0)) {
    i1 = 10;
    break;
   }
   if ((i1 | 0) == 305230) {
    i1 = 4;
    break;
   }
   if ((i1 | 0) == 305343 | (_strcasecmp(i1, 305230) | 0) == 0) {
    i1 = 4;
    break;
   }
   if (!(_strcasecmp(i1, 305343) | 0)) {
    i1 = 4;
    break;
   }
  }
  HEAP32[i2 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305352, i2);
  i1 = 0;
 } while (0);
 STACKTOP = i2;
 return i1 | 0;
}
function _Horizontal_Sweep_Drop(i10, i9, i5, i6, i3, i4) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i7 = 0, i8 = 0;
 i1 = HEAP32[i10 + 4 >> 2] | 0;
 i8 = i5 + -1 + i1 & 0 - i1;
 i7 = 0 - i1 & i6;
 if ((i8 | 0) > (i7 | 0)) {
  i2 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i8 | 0) != (i7 + i1 | 0)) return;
  switch (i2 & 7 | 0) {
  case 0:
   {
    i1 = i7;
    break;
   }
  case 4:
   {
    i1 = (HEAP32[i10 + 8 >> 2] | 0) + ((i5 + -1 + i6 | 0) / 2 | 0) & 0 - i1;
    break;
   }
  case 5:
  case 1:
   {
    if ((HEAP32[i3 + 28 >> 2] | 0) == (i4 | 0) ? (HEAP32[i3 + 16 >> 2] | 0) < 1 : 0) {
     if (!(i2 & 16)) return;
     if ((i6 - i5 | 0) < (HEAP32[i10 + 8 >> 2] | 0)) return;
    }
    if ((HEAP32[i4 + 28 >> 2] | 0) == (i3 | 0) ? (HEAP32[i3 + 20 >> 2] | 0) == (i9 << 16 >> 16 | 0) : 0) {
     if (!(i2 & 32)) return;
     if ((i6 - i5 | 0) < (HEAP32[i10 + 8 >> 2] | 0)) return;
    }
    if ((i2 & 7 | 0) == 1) i1 = i7; else i1 = (HEAP32[i10 + 8 >> 2] | 0) + ((i5 + -1 + i6 | 0) / 2 | 0) & 0 - i1;
    break;
   }
  default:
   return;
  }
  i6 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) < 0) i1 = i8; else i1 = (i1 >> i6 | 0) < (HEAP32[i10 + 104 >> 2] | 0) ? i1 : i7;
  i4 = ((i1 | 0) == (i8 | 0) ? i7 : i8) >> i6;
  i5 = HEAP32[i10 + 60 >> 2] | 0;
  i3 = HEAP32[i10 + 112 >> 2] | 0;
  i2 = (i9 << 16 >> 16 >> 3) - (Math_imul(i4, i3) | 0) | 0;
  if ((i3 | 0) > 0) i2 = (Math_imul((HEAP32[i10 + 104 >> 2] | 0) + -1 | 0, i3) | 0) + i2 | 0;
  i8 = i5 + i2 | 0;
  if (((i4 | 0) > -1 ? (i4 | 0) < (HEAP32[i10 + 104 >> 2] | 0) : 0) ? (128 >>> (i9 & 7) & (HEAPU8[i8 >> 0] | 0) | 0) != 0 : 0) return; else {
   i4 = i9 << 16 >> 16 >> 3;
   i7 = 128 >>> (i9 & 7);
   i2 = i6;
  }
 } else {
  i4 = i9 << 16 >> 16 >> 3;
  i7 = 128 >>> (i9 & 7);
  i2 = HEAP32[i10 >> 2] | 0;
  i5 = HEAP32[i10 + 60 >> 2] | 0;
  i1 = i8;
 }
 i1 = i1 >> i2;
 if ((i1 | 0) <= -1) return;
 i3 = HEAP32[i10 + 104 >> 2] | 0;
 if ((i1 | 0) >= (i3 | 0)) return;
 i2 = HEAP32[i10 + 112 >> 2] | 0;
 i1 = i4 - (Math_imul(i2, i1) | 0) | 0;
 if ((i2 | 0) > 0) i1 = i1 + (Math_imul(i2, i3 + -1 | 0) | 0) | 0;
 i10 = i5 + i1 | 0;
 HEAP8[i10 >> 0] = HEAPU8[i10 >> 0] | 0 | i7;
 return;
}

function _T42_GlyphSlot_Load(i8, i5, i3, i4) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[(HEAP32[(HEAP32[i8 + 4 >> 2] | 0) + 96 >> 2] | 0) + 28 >> 2] | 0;
 i2 = HEAP32[i8 + 160 >> 2] | 0;
 _ft_glyphslot_free_bitmap(i2);
 HEAP32[i2 + 152 >> 2] = 0;
 i6 = i2 + 24 | 0;
 i7 = i6 + 40 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i7 | 0));
 i6 = i2 + 72 | 0;
 i7 = i6 + 72 | 0;
 do {
  HEAP32[i6 >> 2] = 0;
  i6 = i6 + 4 | 0;
 } while ((i6 | 0) < (i7 | 0));
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 80 >> 2] & 63](HEAP32[i8 + 160 >> 2] | 0, HEAP32[i5 + 44 >> 2] | 0, i3, i4 | 8) | 0;
 if (i1) return i1 | 0;
 i7 = HEAP32[i8 + 160 >> 2] | 0;
 HEAP32[i8 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
 HEAP32[i8 + 24 + 4 >> 2] = HEAP32[i7 + 24 + 4 >> 2];
 HEAP32[i8 + 24 + 8 >> 2] = HEAP32[i7 + 24 + 8 >> 2];
 HEAP32[i8 + 24 + 12 >> 2] = HEAP32[i7 + 24 + 12 >> 2];
 HEAP32[i8 + 24 + 16 >> 2] = HEAP32[i7 + 24 + 16 >> 2];
 HEAP32[i8 + 24 + 20 >> 2] = HEAP32[i7 + 24 + 20 >> 2];
 HEAP32[i8 + 24 + 24 >> 2] = HEAP32[i7 + 24 + 24 >> 2];
 HEAP32[i8 + 24 + 28 >> 2] = HEAP32[i7 + 24 + 28 >> 2];
 HEAP32[i8 + 56 >> 2] = HEAP32[i7 + 56 >> 2];
 HEAP32[i8 + 60 >> 2] = HEAP32[i7 + 60 >> 2];
 HEAP32[i8 + 72 >> 2] = HEAP32[i7 + 72 >> 2];
 HEAP32[i8 + 108 >> 2] = HEAP32[i7 + 108 >> 2];
 HEAP32[i8 + 108 + 4 >> 2] = HEAP32[i7 + 108 + 4 >> 2];
 HEAP32[i8 + 108 + 8 >> 2] = HEAP32[i7 + 108 + 8 >> 2];
 HEAP32[i8 + 108 + 12 >> 2] = HEAP32[i7 + 108 + 12 >> 2];
 HEAP32[i8 + 108 + 16 >> 2] = HEAP32[i7 + 108 + 16 >> 2];
 HEAP32[i8 + 76 >> 2] = HEAP32[i7 + 76 >> 2];
 HEAP32[i8 + 76 + 4 >> 2] = HEAP32[i7 + 76 + 4 >> 2];
 HEAP32[i8 + 76 + 8 >> 2] = HEAP32[i7 + 76 + 8 >> 2];
 HEAP32[i8 + 76 + 12 >> 2] = HEAP32[i7 + 76 + 12 >> 2];
 HEAP32[i8 + 76 + 16 >> 2] = HEAP32[i7 + 76 + 16 >> 2];
 HEAP32[i8 + 76 + 20 >> 2] = HEAP32[i7 + 76 + 20 >> 2];
 HEAP32[i8 + 100 >> 2] = HEAP32[i7 + 100 >> 2];
 HEAP32[i8 + 104 >> 2] = HEAP32[i7 + 104 >> 2];
 HEAP32[i8 + 128 >> 2] = HEAP32[i7 + 128 >> 2];
 HEAP32[i8 + 132 >> 2] = HEAP32[i7 + 132 >> 2];
 HEAP32[i8 + 136 >> 2] = HEAP32[i7 + 136 >> 2];
 HEAP32[i8 + 140 >> 2] = HEAP32[i7 + 140 >> 2];
 return i1 | 0;
}

function __ZNK4math7Frustum12NearPlanePosEff(i6, i7, f3, f5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 var i1 = 0, i2 = 0, f4 = f0, i8 = 0, f9 = f0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((HEAP32[i7 >> 2] | 0) == 2) {
  f4 = Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i7 + 56 >> 2]) * Math_fround(.5))));
  f4 = Math_fround(f4 * Math_fround(HEAPF32[i7 + 48 >> 2]));
  f9 = Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i7 + 60 >> 2]) * Math_fround(.5))));
  f4 = Math_fround(f4 * f3);
  f3 = Math_fround(Math_fround(f9 * Math_fround(HEAPF32[i7 + 48 >> 2])) * f5);
  if ((HEAP32[i7 + 8 >> 2] | 0) == 2) {
   __ZNK4math6float35CrossERKS0_(i8 + 132 | 0, i7 + 24 | 0, i7 + 36 | 0);
   i1 = i7 + 36 | 0;
   i2 = i7 + 24 | 0;
  } else {
   __ZNK4math6float35CrossERKS0_(i8 + 132 | 0, i7 + 36 | 0, i7 + 24 | 0);
   i1 = i7 + 36 | 0;
   i2 = i7 + 24 | 0;
  }
  __ZNK4math6float3mlEf(i8 + 120 | 0, i2, Math_fround(HEAPF32[i7 + 48 >> 2]));
  __ZNK4math6float3plERKS0_(i8 + 108 | 0, i7 + 12 | 0, i8 + 120 | 0);
  __ZN4mathmlEfRKNS_6float3E(i8 + 96 | 0, f4, i8 + 132 | 0);
  __ZNK4math6float3plERKS0_(i8 + 84 | 0, i8 + 108 | 0, i8 + 96 | 0);
  __ZN4mathmlEfRKNS_6float3E(i8 + 72 | 0, f3, i1);
  __ZNK4math6float3plERKS0_(i6, i8 + 84 | 0, i8 + 72 | 0);
  STACKTOP = i8;
  return;
 } else {
  if ((HEAP32[i7 + 8 >> 2] | 0) == 2) {
   __ZNK4math6float35CrossERKS0_(i8 + 60 | 0, i7 + 24 | 0, i7 + 36 | 0);
   i1 = i7 + 24 | 0;
   i2 = i7 + 36 | 0;
  } else {
   __ZNK4math6float35CrossERKS0_(i8 + 60 | 0, i7 + 36 | 0, i7 + 24 | 0);
   i1 = i7 + 24 | 0;
   i2 = i7 + 36 | 0;
  }
  __ZNK4math6float3mlEf(i8 + 48 | 0, i1, Math_fround(HEAPF32[i7 + 48 >> 2]));
  __ZNK4math6float3plERKS0_(i8 + 36 | 0, i7 + 12 | 0, i8 + 48 | 0);
  __ZN4mathmlEfRKNS_6float3E(i8 + 24 | 0, Math_fround(Math_fround(Math_fround(HEAPF32[i7 + 56 >> 2]) * f3) * Math_fround(.5)), i8 + 60 | 0);
  __ZNK4math6float3plERKS0_(i8 + 12 | 0, i8 + 36 | 0, i8 + 24 | 0);
  __ZN4mathmlEfRKNS_6float3E(i8, Math_fround(Math_fround(Math_fround(HEAPF32[i7 + 60 >> 2]) * f5) * Math_fround(.5)), i2);
  __ZNK4math6float3plERKS0_(i6, i8 + 12 | 0, i8);
  STACKTOP = i8;
  return;
 }
}

function _Compute_Point_Displacement(i4, i6, i7, i8, i5) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(HEAP8[i4 + 368 >> 0] & 1)) {
  i2 = HEAP32[i4 + 72 >> 2] | 0;
  i3 = HEAP32[i4 + 72 + 4 >> 2] | 0;
  i10 = HEAP32[i4 + 80 >> 2] | 0;
  i11 = HEAP32[i4 + 84 >> 2] | 0;
  i12 = HEAP32[i4 + 88 >> 2] | 0;
  HEAP32[i13 >> 2] = HEAP32[i4 + 92 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i4 + 92 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i4 + 92 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i4 + 92 + 12 >> 2];
  i1 = i4 + 288 | 0;
 } else {
  i2 = HEAP32[i4 + 36 >> 2] | 0;
  i3 = HEAP32[i4 + 36 + 4 >> 2] | 0;
  i10 = HEAP32[i4 + 44 >> 2] | 0;
  i11 = HEAP32[i4 + 48 >> 2] | 0;
  i12 = HEAP32[i4 + 52 >> 2] | 0;
  HEAP32[i13 >> 2] = HEAP32[i4 + 56 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i4 + 56 + 4 >> 2];
  HEAP32[i13 + 8 >> 2] = HEAP32[i4 + 56 + 8 >> 2];
  HEAP32[i13 + 12 >> 2] = HEAP32[i4 + 56 + 12 >> 2];
  i1 = i4 + 286 | 0;
 }
 i9 = i10 & 65535;
 i1 = HEAP16[i1 >> 1] | 0;
 if ((i1 & 65535) < (i9 & 65535)) {
  HEAP32[i8 >> 2] = i2;
  HEAP32[i8 + 4 >> 2] = i3;
  HEAP16[i8 + 8 >> 1] = i9;
  HEAP16[i8 + 10 >> 1] = i10 >>> 16;
  HEAP32[i8 + 12 >> 2] = i11;
  HEAP32[i8 + 16 >> 2] = i12;
  HEAP32[i8 + 20 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i8 + 20 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i8 + 20 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i8 + 20 + 12 >> 2] = HEAP32[i13 + 12 >> 2];
  HEAP16[i5 >> 1] = i1;
  i12 = FUNCTION_TABLE_iiii[HEAP32[i4 + 572 >> 2] & 127](i4, (HEAP32[i12 + ((i1 & 65535) << 3) >> 2] | 0) - (HEAP32[i11 + ((i1 & 65535) << 3) >> 2] | 0) | 0, (HEAP32[i12 + ((i1 & 65535) << 3) + 4 >> 2] | 0) - (HEAP32[i11 + ((i1 & 65535) << 3) + 4 >> 2] | 0) | 0) | 0;
  HEAP32[i6 >> 2] = _FT_MulDiv(i12, HEAP16[i4 + 298 >> 1] << 16, HEAP32[i4 + 564 >> 2] | 0) | 0;
  HEAP32[i7 >> 2] = _FT_MulDiv(i12, HEAP16[i4 + 300 >> 1] << 16, HEAP32[i4 + 564 >> 2] | 0) | 0;
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if (HEAP8[i4 + 561 >> 0] | 0) HEAP32[i4 + 12 >> 2] = 134;
 HEAP16[i5 >> 1] = 0;
 i12 = 1;
 STACKTOP = i13;
 return i12 | 0;
}

function _ft_gzip_check_header(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _FT_Stream_Seek(i9, 0) | 0;
 HEAP32[i10 >> 2] = i1;
 if (i1) {
  i8 = i1;
  STACKTOP = i10;
  return i8 | 0;
 }
 i1 = _FT_Stream_Read(i9, i10 + 4 | 0, 4) | 0;
 HEAP32[i10 >> 2] = i1;
 if (i1) {
  i8 = i1;
  STACKTOP = i10;
  return i8 | 0;
 }
 if ((((HEAP8[i10 + 4 >> 0] | 0) == 31 ? (HEAP8[i10 + 4 + 1 >> 0] | 0) == -117 : 0) ? (HEAP8[i10 + 4 + 2 >> 0] | 0) == 8 : 0) ? (i5 = i10 + 4 + 3 | 0, (HEAPU8[i5 >> 0] | 0) <= 31) : 0) {
  i2 = _FT_Stream_Skip(i9, 6) | 0;
  HEAP32[i10 >> 2] = i2;
  i1 = HEAP8[i5 >> 0] | 0;
  do if (i1 & 4) {
   i1 = _FT_Stream_ReadUShortLE(i9, i10) | 0;
   i2 = HEAP32[i10 >> 2] | 0;
   if (i2) {
    i8 = i2;
    STACKTOP = i10;
    return i8 | 0;
   }
   i1 = _FT_Stream_Skip(i9, i1 & 65535) | 0;
   HEAP32[i10 >> 2] = i1;
   if (!i1) {
    i1 = HEAP8[i5 >> 0] | 0;
    i2 = 0;
    break;
   } else {
    i8 = i1;
    STACKTOP = i10;
    return i8 | 0;
   }
  } while (0);
  do if (i1 & 8) {
   while (1) {
    i1 = _FT_Stream_ReadChar(i9, i10) | 0;
    i2 = HEAP32[i10 >> 2] | 0;
    if (i2) {
     i7 = i2;
     i1 = 22;
     break;
    }
    if (!(i1 << 24 >> 24)) {
     i1 = 15;
     break;
    }
   }
   if ((i1 | 0) == 15) {
    i3 = HEAP8[i5 >> 0] | 0;
    i4 = 0;
    break;
   } else if ((i1 | 0) == 22) {
    STACKTOP = i10;
    return i7 | 0;
   }
  } else {
   i3 = i1;
   i4 = i2;
  } while (0);
  do if (i3 & 16) {
   while (1) {
    i1 = _FT_Stream_ReadChar(i9, i10) | 0;
    i2 = HEAP32[i10 >> 2] | 0;
    if (i2) {
     i7 = i2;
     i1 = 22;
     break;
    }
    if (!(i1 << 24 >> 24)) {
     i1 = 19;
     break;
    }
   }
   if ((i1 | 0) == 19) {
    i6 = HEAP8[i5 >> 0] | 0;
    i8 = 0;
    break;
   } else if ((i1 | 0) == 22) {
    STACKTOP = i10;
    return i7 | 0;
   }
  } else {
   i6 = i3;
   i8 = i4;
  } while (0);
  if (!(i6 & 2)) {
   STACKTOP = i10;
   return i8 | 0;
  }
  i8 = _FT_Stream_Skip(i9, 2) | 0;
  HEAP32[i10 >> 2] = i8;
  STACKTOP = i10;
  return i8 | 0;
 }
 HEAP32[i10 >> 2] = 3;
 i8 = 3;
 STACKTOP = i10;
 return i8 | 0;
}

function __ZNK8Graphics24IsTextureFormatSupportedE13TextureFormat13ResourceUsagem(i4, i5, i2, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 L1 : do if ((i2 & -2 | 0) != 4) {
  L3 : do if (__Z22IsIE11DeveloperPreviewv() | 0) if ((i5 | 0) < 1048578) {
   if ((i5 | 0) < 115) switch (i5 | 0) {
   case 85:
   case 86:
    {
     i1 = 0;
     break L1;
    }
   default:
    break L3;
   }
   if ((i5 | 0) < 1048577) switch (i5 | 0) {
   case 115:
    {
     i1 = 0;
     break L1;
    }
   default:
    break L3;
   } else switch (i5 | 0) {
   case 1048577:
    {
     i1 = 0;
     break L1;
    }
   default:
    break L3;
   }
  } else {
   if ((i5 | 0) < 1048583) switch (i5 | 0) {
   case 1048578:
   case 1048580:
    {
     i1 = 0;
     break L1;
    }
   default:
    break L3;
   }
   if ((i5 | 0) < 4194334) switch (i5 | 0) {
   case 1048583:
    {
     i1 = 0;
     break L1;
    }
   default:
    break L3;
   } else switch (i5 | 0) {
   case 4194334:
    {
     i1 = 0;
     break L1;
    }
   default:
    break L3;
   }
  } while (0);
  if (((i1 & 16 | 0) != 0 ? !(__Z37RenderTargetAvailableAsGLRenderbuffer13TextureFormat(i5) | 0) : 0) ? !(__Z32RenderTargetAvailableAsGLTexture13TextureFormat(i5) | 0) : 0) {
   i1 = 0;
   break;
  }
  L25 : do if ((i5 | 0) >= 85) {
   if ((i5 | 0) >= 1048578) switch (i5 | 0) {
   case 1048579:
   case 1048578:
    {
     i1 = 1;
     break L1;
    }
   default:
    break L25;
   }
   if ((i5 | 0) < 1048577) switch (i5 | 0) {
   case 85:
    {
     i1 = 1;
     break L1;
    }
   default:
    break L25;
   } else switch (i5 | 0) {
   case 1048577:
    {
     i1 = 1;
     break L1;
    }
   default:
    break L25;
   }
  } else switch (i5 | 0) {
  case 61:
  case 65:
  case 28:
   {
    i1 = 1;
    break L1;
   }
  default:
   {}
  } while (0);
  i3 = HEAP32[i4 + 56 >> 2] | 0;
  if (!i3) i1 = 0; else {
   i1 = HEAP32[i4 + 44 >> 2] | 0;
   i2 = 0;
   while (1) {
    if ((HEAP32[i1 + (i2 << 2) >> 2] | 0) == (i5 | 0)) {
     i1 = 1;
     break L1;
    }
    i2 = i2 + 1 | 0;
    if (i2 >>> 0 >= i3 >>> 0) {
     i1 = 0;
     break;
    }
   }
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function __ZNK20ShaderConstantBuffer21ApplyToGlobalUniformsEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, f7 = f0, f8 = f0, f9 = f0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP32[(HEAP32[122] | 0) + 288 >> 2] | 0) != (HEAP32[i5 + 28 >> 2] | 0)) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(4, 298576, i6);
  _glUseProgram(HEAP32[i5 + 28 >> 2] | 0);
  HEAP32[(HEAP32[122] | 0) + 288 >> 2] = HEAP32[i5 + 28 >> 2];
 }
 if (!(HEAP32[i5 + 24 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 i4 = 0;
 do {
  i1 = HEAP32[i5 + 4 >> 2] | 0;
  i2 = HEAP32[i5 + 12 >> 2] | 0;
  i3 = HEAP32[i2 + (i4 * 156 | 0) + 136 >> 2] | 0;
  switch (HEAP32[i2 + (i4 * 156 | 0) + 144 >> 2] | 0) {
  case 1:
   {
    _glUniform1f(HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] | 0, +Math_fround(HEAPF32[i1 + i3 >> 2]));
    break;
   }
  case 2:
   {
    f7 = Math_fround(HEAPF32[i1 + i3 >> 2]);
    _glUniform2f(HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] | 0, +f7, +Math_fround(HEAPF32[i1 + (i3 + 4) >> 2]));
    break;
   }
  case 3:
   {
    f8 = Math_fround(HEAPF32[i1 + i3 >> 2]);
    f7 = Math_fround(HEAPF32[i1 + (i3 + 4) >> 2]);
    _glUniform3f(HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] | 0, +f8, +f7, +Math_fround(HEAPF32[i1 + (i3 + 8) >> 2]));
    break;
   }
  case 4:
   {
    f9 = Math_fround(HEAPF32[i1 + i3 >> 2]);
    f7 = Math_fround(HEAPF32[i1 + (i3 + 4) >> 2]);
    f8 = Math_fround(HEAPF32[i1 + (i3 + 8) >> 2]);
    _glUniform4f(HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] | 0, +f9, +f7, +f8, +Math_fround(HEAPF32[i1 + (i3 + 12) >> 2]));
    break;
   }
  case 5:
   {
    _glUniformMatrix2fv(HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] | 0, 1, 0, i1 + i3 | 0);
    break;
   }
  case 6:
   {
    _glUniformMatrix3fv(HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] | 0, 1, 0, i1 + i3 | 0);
    break;
   }
  case 7:
   {
    _glUniformMatrix4fv(HEAP32[i2 + (i4 * 156 | 0) + 148 >> 2] | 0, 1, 0, i1 + i3 | 0);
    break;
   }
  case 0:
   break;
  default:
   {
    HEAP32[i6 + 8 >> 2] = i2 + (i4 * 156 | 0);
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298707, i6 + 8 | 0);
   }
  }
  i4 = i4 + 1 | 0;
 } while (i4 >>> 0 < (HEAP32[i5 + 24 >> 2] | 0) >>> 0);
 STACKTOP = i6;
 return;
}

function __ZN8Graphics4InitEP9MainClassiii13TextureFormatS2_ii(i10, i9, i1, i2, i7, i5, i3, i4, i6, i8) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if (HEAP32[i9 + 284 >> 2] | 0) {
  _glDeleteFramebuffers(1, i9 + 284 | 0);
  HEAP32[i9 + 284 >> 2] = 0;
 }
 i1 = HEAP32[i9 + 148 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2) {
   _eglMakeCurrent(i2 | 0, 0, 0, 0) | 0;
   i1 = HEAP32[i9 + 148 >> 2] | 0;
   i2 = HEAP32[i1 + 4 >> 2] | 0;
   if (i2) {
    _eglDestroyContext(HEAP32[i1 >> 2] | 0, i2 | 0) | 0;
    i1 = HEAP32[i9 + 148 >> 2] | 0;
   }
   _eglTerminate(HEAP32[i1 >> 2] | 0) | 0;
   i1 = HEAP32[i9 + 148 >> 2] | 0;
  }
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i9 + 148 >> 2] = 0;
 }
 HEAP32[i9 + 32 >> 2] = 1;
 i1 = (i5 & i7 | 0) == -1 ? 480 : i5;
 i7 = (i5 & i7 | 0) == -1 ? 640 : i7;
 HEAP32[i9 + 24 >> 2] = i7;
 HEAP32[i9 + 36 >> 2] = i7;
 HEAP32[i9 + 28 >> 2] = i1;
 HEAP32[i9 + 40 >> 2] = i1;
 _emscripten_set_canvas_size(i7 | 0, i1 | 0);
 __ZN8Graphics12CreateWindowEP6engine13TextureFormatS2_i(i11, i9, 324, i3, i4, i6);
 i1 = HEAP32[i11 >> 2] | 0;
 if ((i1 | 0) < 0) {
  HEAP32[i10 >> 2] = i1;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 4 + 4 >> 2] = 0;
  HEAP32[i10 + 4 + 8 >> 2] = 0;
  HEAP32[i10 + 4 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i10 + 4 | 0, HEAP32[i11 + 4 >> 2] | 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  i1 = i11 + 4 | 0;
 } else {
  __ZN8Graphics23SetupDefaultDeviceStateEv(i9);
  i2 = (i8 | 0) > 120 ? 120 : (i8 | 0) < 0 ? 0 : i8;
  HEAP32[i9 + 12 >> 2] = i2;
  i1 = HEAP32[i9 + 148 >> 2] | 0;
  if ((i1 | 0) != 0 ? (_eglSwapInterval(HEAP32[i1 >> 2] | 0, i2 | 0) | 0, (i2 | 0) == 0) : 0) _emscripten_set_main_loop_timing(2, 0) | 0;
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  HEAP32[i10 + 12 >> 2] = 0;
  HEAP32[i10 + 16 >> 2] = 0;
  i1 = i11 + 4 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  STACKTOP = i11;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i11;
 return;
}

function _tt_face_get_kerning(i15, i16, i17) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = HEAP32[i15 + 772 >> 2] | 0;
 i14 = HEAP32[i15 + 776 >> 2] | 0;
 i1 = HEAP32[i15 + 780 >> 2] | 0;
 if ((i14 | 0) < 10 | (i1 | 0) == 0) {
  i17 = 0;
  return i17 | 0;
 }
 i13 = HEAP32[i15 + 784 >> 2] | 0;
 i2 = i12 + 10 | 0;
 i8 = i1;
 i9 = 1;
 i10 = i12 + 4 | 0;
 i1 = 0;
 while (1) {
  i7 = HEAP8[i10 + 5 >> 0] | 0;
  i5 = i10 + (HEAPU8[i10 + 2 >> 0] << 8 | HEAPU8[i10 + 3 >> 0]) | 0;
  i6 = i10;
  i10 = i5 >>> 0 > (i12 + i14 | 0) >>> 0 ? i12 + i14 | 0 : i5;
  L6 : do if (!((i13 & i9 | 0) == 0 | (i6 + 14 | 0) >>> 0 > i10 >>> 0) ? (i11 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i6 + 7 >> 0], i5 = i10 - (i6 + 14) | 0, i11 = (i5 | 0) < (i11 * 6 | 0) ? (i5 | 0) / 6 | 0 : i11, (HEAP8[i6 + 4 >> 0] | 0) == 0) : 0) {
   if (!(HEAP32[i15 + 788 >> 2] & i9)) {
    if (!i11) break; else {
     i3 = i11;
     i2 = i6 + 14 | 0;
    }
    while (1) {
     if ((HEAPU8[i2 + 1 >> 0] << 16 | HEAPU8[i2 >> 0] << 24 | HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0] | 0) == (i16 << 16 | i17 | 0)) break;
     i3 = i3 + -1 | 0;
     if (!i3) break L6; else i2 = i2 + 6 | 0;
    }
    i2 = HEAP8[i2 + 4 >> 0] << 8 | HEAPU8[i2 + 5 >> 0];
   } else {
    if (!i11) break; else {
     i4 = i11;
     i5 = 0;
    }
    while (1) {
     i2 = (i4 + i5 | 0) >>> 1;
     i3 = HEAPU8[i6 + ((i2 * 6 | 0) + 15) >> 0] << 16 | HEAPU8[i6 + ((i2 * 6 | 0) + 14) >> 0] << 24 | HEAPU8[i6 + ((i2 * 6 | 0) + 16) >> 0] << 8 | HEAPU8[i6 + ((i2 * 6 | 0) + 17) >> 0];
     if ((i3 | 0) == (i16 << 16 | i17 | 0)) break;
     i5 = i3 >>> 0 < (i16 << 16 | i17) >>> 0 ? i2 + 1 | 0 : i5;
     i4 = i3 >>> 0 < (i16 << 16 | i17) >>> 0 ? i4 : i2;
     if (i5 >>> 0 >= i4 >>> 0) break L6;
    }
    i2 = HEAP8[i6 + ((i2 * 6 | 0) + 18) >> 0] << 8 | HEAPU8[i6 + ((i2 * 6 | 0) + 19) >> 0];
   }
   i1 = i2 + ((i7 & 8) == 0 ? i1 : 0) | 0;
  } while (0);
  i8 = i8 + -1 | 0;
  i2 = i10 + 6 | 0;
  if (i2 >>> 0 > (i12 + i14 | 0) >>> 0 | (i8 | 0) == 0) break; else i9 = i9 << 1;
 }
 return i1 | 0;
}

function __ZNSt3__16vectorIN8Material18TextureSamplerSlotENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i3 = (((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 20 | 0) + 1 | 0;
 if (i3 >>> 0 > 214748364) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i8);
  i1 = HEAP32[i8 >> 2] | 0;
 }
 i2 = ((HEAP32[i8 + 8 >> 2] | 0) - i1 | 0) / 20 | 0;
 if (i2 >>> 0 < 107374182) {
  i2 = i2 << 1 >>> 0 < i3 >>> 0 ? i3 : i2 << 1;
  i1 = ((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 20 | 0;
  if (!i2) {
   i3 = 0;
   i4 = 0;
  } else i5 = 6;
 } else {
  i2 = 214748364;
  i1 = ((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 20 | 0;
  i5 = 6;
 }
 if ((i5 | 0) == 6) {
  i3 = i2;
  i4 = __Znwj(i2 * 20 | 0) | 0;
 }
 i2 = i4 + (i1 * 20 | 0) | 0;
 i7 = i4 + (i3 * 20 | 0) | 0;
 HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
 i5 = i4 + (i1 * 20 | 0) + 4 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i5, HEAP32[i6 + 4 >> 2] | 0);
 HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
 i6 = i4 + ((i1 + 1 | 0) * 20 | 0) | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i8;
  i4 = i8 + 4 | 0;
 } else {
  i3 = i2;
  do {
   i9 = i1;
   i1 = i1 + -20 | 0;
   i4 = i3 + -20 | 0;
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   i10 = i3 + -16 | 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   HEAP32[i10 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i10, HEAP32[i9 + -16 >> 2] | 0);
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   i3 = i2 + -20 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i3 = i8;
  i4 = i8 + 4 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i8 + 4 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i8 + 8 >> 2] = i7;
 i4 = i5;
 if ((i1 | 0) != (i4 | 0)) do {
  i2 = i1 + -16 | 0;
  i1 = i1 + -20 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (i3) __ZdaPv(i3);
  HEAP32[i2 >> 2] = 0;
 } while ((i1 | 0) != (i4 | 0));
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function __ZNK4math4AABB11TriangulateER12VertexBufferiiib(i5, i7, i2, i3, i4, i1) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i10 = (Math_imul(i4 + i2 | 0, i3) | 0) + (Math_imul(i4, i2) | 0) | 0;
 i6 = (i10 * 12 | 0) >>> 0 < 32 ? 32 : i10 * 12 | 0;
 i8 = i6 >>> 0 > 357913941 ? -1 : i6 * 12 | 0;
 i9 = __Znaj(i8) | 0;
 i8 = __Znaj(i8) | 0;
 i6 = __Znaj(i6 >>> 0 > 536870911 ? -1 : i6 << 3) | 0;
 __ZNK4math4AABB11TriangulateEiiiPNS_6float3ES2_PNS_6float2Eb(i5, i2, i3, i4, i9, i8, i6, i1);
 i1 = __ZN12VertexBuffer14AppendVerticesEi(i7, i10 * 12 | 0) | 0;
 if ((i10 | 0) > 0) {
  i3 = 0;
  do {
   i2 = i3 + i1 | 0;
   __ZN4math6float4C2ERKNS_6float3Ef(i11 + 16 | 0, i9 + (i3 * 12 | 0) | 0, Math_fround(1.0));
   __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i7, i2, 1, 0, i11 + 16 | 0);
   if ((__ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i7 + 32 | 0, 2) | 0) > -1) {
    __ZN4math6float4C2ERKNS_6float3Ef(i11, i8 + (i3 * 12 | 0) | 0, Math_fround(0.0));
    __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i7, i2, 2, 0, i11);
   }
   if ((__ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i7 + 32 | 0, 6) | 0) > -1) __ZN12VertexBuffer9SetFloat2Ei18VertexDataSemanticiRKN4math6float2E(i7, i2, 6, 0, i6 + (i3 << 3) | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i10 * 12 | 0));
 }
 __ZdaPv(i6);
 if (i10) {
  i1 = 0;
  do {
   i7 = i8 + (i1 * 12 | 0) | 0;
   HEAP32[i7 >> 2] = HEAP32[i11 + 32 >> 2];
   HEAP32[i7 + 4 >> 2] = HEAP32[i11 + 32 + 4 >> 2];
   HEAP32[i7 + 8 >> 2] = HEAP32[i11 + 32 + 8 >> 2];
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (i10 * 12 | 0) >>> 0);
 }
 __ZdaPv(i8);
 if (!i10) {
  __ZdaPv(i9);
  STACKTOP = i11;
  return;
 } else i1 = 0;
 do {
  i8 = i9 + (i1 * 12 | 0) | 0;
  HEAP32[i8 >> 2] = HEAP32[i11 + 32 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i11 + 32 + 4 >> 2];
  HEAP32[i8 + 8 >> 2] = HEAP32[i11 + 32 + 8 >> 2];
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < (i10 * 12 | 0) >>> 0);
 __ZdaPv(i9);
 STACKTOP = i11;
 return;
}

function _af_cjk_compute_stem_width(i1, i10, i12) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i8 = HEAP32[i1 + 108 >> 2] | 0;
 i9 = HEAP32[i1 + 104 >> 2] | 0;
 if (!(i9 & 4)) return i12 | 0;
 i1 = (i12 | 0) < 0 ? 0 - i12 | 0 : i12;
 if ((i10 | 0) == 1) if (!(i9 & 2)) i11 = 5; else i11 = 15; else if (!(i9 & 1)) i11 = 5; else i11 = 15;
 do if ((i11 | 0) == 5) {
  if ((HEAP32[i8 + 40 + (i10 * 340 | 0) + 8 >> 2] | 0) != 0 ? (i2 = HEAP32[i8 + 40 + (i10 * 340 | 0) + 16 >> 2] | 0, (((i1 - i2 | 0) < 0 ? 0 - (i1 - i2) | 0 : i1 - i2 | 0) | 0) < 40) : 0) {
   i1 = (i2 | 0) < 48 ? 48 : i2;
   break;
  }
  if ((i1 | 0) < 54) {
   i1 = ((54 - i1 | 0) / 2 | 0) + i1 | 0;
   break;
  }
  if ((i1 | 0) < 192 ? (i1 & 63) >>> 0 >= 10 : 0) if ((i1 & 63) >>> 0 < 22) {
   i1 = i1 & -64 | 10;
   break;
  } else {
   i1 = ((i1 & 63) + -42 | 0) >>> 0 < 12 ? i1 & -64 | 54 : i1;
   break;
  }
 } else if ((i11 | 0) == 15) {
  i4 = HEAP32[i8 + 40 + (i10 * 340 | 0) + 8 >> 2] | 0;
  if ((i4 | 0) > 0) {
   i6 = 98;
   i7 = 0;
   i2 = i1;
   while (1) {
    i13 = HEAP32[i8 + 40 + (i10 * 340 | 0) + 12 + (i7 * 12 | 0) + 4 >> 2] | 0;
    i3 = (i1 - i13 | 0) < 0 ? 0 - (i1 - i13) | 0 : i1 - i13 | 0;
    i5 = (i3 | 0) < (i6 | 0);
    i2 = i5 ? i13 : i2;
    i7 = i7 + 1 | 0;
    if ((i7 | 0) == (i4 | 0)) break; else i6 = i5 ? i3 : i6;
   }
   if ((i2 | 0) > (i1 | 0)) i1 = ((i2 + 32 & -64) + -48 | 0) < (i1 | 0) ? i2 : i1; else {
    i3 = i2 + 32 & -64;
    i11 = 19;
   }
  } else {
   i3 = i1 + 32 & -64;
   i2 = i1;
   i11 = 19;
  }
  if ((i11 | 0) == 19) i1 = (i3 | 48 | 0) > (i1 | 0) ? i2 : i1;
  if ((i10 | 0) == 1) {
   if ((i1 | 0) <= 63) {
    i1 = 64;
    break;
   }
   i1 = i1 + 16 & -64;
   break;
  }
  if (i9 & 8) {
   if ((i1 | 0) < 64) {
    i1 = 64;
    break;
   }
   i1 = i1 + 32 & -64;
   break;
  }
  if ((i1 | 0) < 48) {
   i1 = i1 + 64 >> 1;
   break;
  }
  if ((i1 | 0) < 128) {
   i1 = i1 + 22 & -64;
   break;
  } else {
   i1 = i1 + 32 & -64;
   break;
  }
 } while (0);
 i13 = (i12 | 0) > -1 ? i1 : 0 - i1 | 0;
 return i13 | 0;
}

function __ZNSt3__16vectorIN8Material11TextureSlotENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i3 = (((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 20 | 0) + 1 | 0;
 if (i3 >>> 0 > 214748364) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i8);
  i1 = HEAP32[i8 >> 2] | 0;
 }
 i2 = ((HEAP32[i8 + 8 >> 2] | 0) - i1 | 0) / 20 | 0;
 if (i2 >>> 0 < 107374182) {
  i2 = i2 << 1 >>> 0 < i3 >>> 0 ? i3 : i2 << 1;
  i1 = ((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 20 | 0;
  if (!i2) {
   i3 = 0;
   i4 = 0;
  } else i5 = 6;
 } else {
  i2 = 214748364;
  i1 = ((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 20 | 0;
  i5 = 6;
 }
 if ((i5 | 0) == 6) {
  i3 = i2;
  i4 = __Znwj(i2 * 20 | 0) | 0;
 }
 i2 = i4 + (i1 * 20 | 0) | 0;
 i7 = i4 + (i3 * 20 | 0) | 0;
 HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
 i5 = i4 + (i1 * 20 | 0) + 4 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i5, HEAP32[i6 + 4 >> 2] | 0);
 HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
 i6 = i4 + ((i1 + 1 | 0) * 20 | 0) | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i8;
  i4 = i8 + 4 | 0;
 } else {
  i3 = i2;
  do {
   i9 = i1;
   i1 = i1 + -20 | 0;
   i4 = i3 + -20 | 0;
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   i10 = i3 + -16 | 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   HEAP32[i10 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i10, HEAP32[i9 + -16 >> 2] | 0);
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   i3 = i2 + -20 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i3 = i8;
  i4 = i8 + 4 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i8 + 4 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i8 + 8 >> 2] = i7;
 i4 = i5;
 if ((i1 | 0) != (i4 | 0)) do {
  i2 = i1 + -16 | 0;
  i1 = i1 + -20 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (i3) __ZdaPv(i3);
  HEAP32[i2 >> 2] = 0;
 } while ((i1 | 0) != (i4 | 0));
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function _FT_Stream_OpenLZW(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i1 = _FT_Stream_Seek(i3, 0) | 0;
 if (!i1) {
  i1 = _FT_Stream_Read(i3, i6 + 4 | 0, 2) | 0;
  if (!i1) if ((HEAP8[i6 + 4 >> 0] | 0) == 31 ? (HEAP8[i6 + 4 + 1 >> 0] | 0) == -99 : 0) {
   HEAP32[i6 >> 2] = 0;
   i1 = i5;
   i2 = i1 + 40 | 0;
   do {
    HEAP32[i1 >> 2] = 0;
    i1 = i1 + 4 | 0;
   } while ((i1 | 0) < (i2 | 0));
   HEAP32[i5 + 28 >> 2] = i4;
   i2 = _ft_mem_alloc(i4, 4292, i6) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   do if (!i1) {
    HEAP32[i2 + 4 >> 2] = i5;
    HEAP32[i2 >> 2] = i3;
    HEAP32[i2 + 8 >> 2] = HEAP32[i5 + 28 >> 2];
    HEAP32[i2 + 4288 >> 2] = i2 + 4280;
    HEAP32[i2 + 4284 >> 2] = i2 + 4280;
    HEAP32[i2 + 4280 >> 2] = 0;
    i1 = _FT_Stream_Seek(i3, 0) | 0;
    if (!i1) {
     i1 = _FT_Stream_Read(i3, i6 + 4 | 0, 2) | 0;
     if (!i1) if ((HEAP8[i6 + 4 >> 0] | 0) == 31 ? (HEAP8[i6 + 4 + 1 >> 0] | 0) == -99 : 0) {
      _memset(i2 + 12 | 0, 0, 164) | 0;
      HEAP32[i2 + 176 >> 2] = i3;
      HEAP32[i2 + 180 >> 2] = HEAP32[i3 + 28 >> 2];
      HEAP32[i2 + 88 >> 2] = 0;
      HEAP32[i2 + 92 >> 2] = 0;
      HEAP32[i2 + 96 >> 2] = 0;
      HEAP32[i2 + 100 >> 2] = i2 + 112;
      HEAP32[i2 + 108 >> 2] = 64;
      HEAP32[i2 + 16 >> 2] = 0;
      HEAP32[i2 + 36 >> 2] = 0;
      HEAP32[i2 + 40 >> 2] = 0;
      HEAP8[i2 + 44 >> 0] = 0;
      HEAP32[i2 + 48 >> 2] = 0;
      HEAP32[i2 + 104 >> 2] = 0;
      HEAP32[i2 + 64 >> 2] = 9;
      HEAP32[i2 + 12 >> 2] = 0;
      HEAP32[i6 >> 2] = 0;
      HEAP32[i5 + 12 >> 2] = i2;
      i1 = 0;
      break;
     } else i1 = 3;
    }
    HEAP32[i6 >> 2] = i1;
    _ft_mem_free(i4, i2);
    i5 = HEAP32[i6 >> 2] | 0;
    STACKTOP = i6;
    return i5 | 0;
   } while (0);
   HEAP32[i5 + 4 >> 2] = 2147483647;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 20 >> 2] = 40;
   HEAP32[i5 + 24 >> 2] = 84;
   i5 = i1;
   STACKTOP = i6;
   return i5 | 0;
  } else i1 = 3;
 }
 HEAP32[i6 >> 2] = i1;
 i5 = i1;
 STACKTOP = i6;
 return i5 | 0;
}

function _gray_render_span(i1, i6, i5, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = HEAP32[i4 + 1012 >> 2] | 0;
 i2 = HEAP32[i4 + 1008 >> 2] | 0;
 i3 = Math_imul(i2, i1) | 0;
 if ((i2 | 0) > -1) i1 = Math_imul((HEAP32[i4 + 1e3 >> 2] | 0) + -1 | 0, i2) | 0; else i1 = 0;
 i7 = i1 - i3 | 0;
 if ((i6 | 0) <= 0) return;
 while (1) {
  i4 = HEAP8[i5 + 4 >> 0] | 0;
  L8 : do if (i4 << 24 >> 24) {
   i1 = HEAP16[i5 + 2 >> 1] | 0;
   i3 = HEAP16[i5 >> 1] | 0;
   if ((i1 & 65535) > 7) {
    _memset(i8 + (i7 + i3) | 0, i4 | 0, i1 & 65535 | 0) | 0;
    break;
   }
   switch (i1 & 65535 | 0) {
   case 7:
    {
     HEAP8[i8 + (i7 + i3) >> 0] = i4;
     i2 = i3 + 1 | 0;
     i1 = i8 + (i7 + (i3 + 1)) | 0;
     i9 = 9;
     break;
    }
   case 6:
    {
     i2 = i3;
     i1 = i8 + (i7 + i3) | 0;
     i9 = 9;
     break;
    }
   case 5:
    {
     i2 = i3;
     i1 = i8 + (i7 + i3) | 0;
     i9 = 10;
     break;
    }
   case 4:
    {
     i2 = i3;
     i1 = i8 + (i7 + i3) | 0;
     i9 = 11;
     break;
    }
   case 3:
    {
     i2 = i3;
     i1 = i8 + (i7 + i3) | 0;
     i9 = 12;
     break;
    }
   case 2:
    {
     i2 = i3;
     i1 = i8 + (i7 + i3) | 0;
     i9 = 13;
     break;
    }
   case 1:
    {
     i1 = i8 + (i7 + i3) | 0;
     break;
    }
   default:
    break L8;
   }
   if ((i9 | 0) == 9) {
    i3 = i2 + 1 | 0;
    HEAP8[i1 >> 0] = i4;
    i2 = i3;
    i1 = i8 + (i7 + i3) | 0;
    i9 = 10;
   }
   if ((i9 | 0) == 10) {
    i3 = i2 + 1 | 0;
    HEAP8[i1 >> 0] = i4;
    i2 = i3;
    i1 = i8 + (i7 + i3) | 0;
    i9 = 11;
   }
   if ((i9 | 0) == 11) {
    i3 = i2 + 1 | 0;
    HEAP8[i1 >> 0] = i4;
    i2 = i3;
    i1 = i8 + (i7 + i3) | 0;
    i9 = 12;
   }
   if ((i9 | 0) == 12) {
    i3 = i2 + 1 | 0;
    HEAP8[i1 >> 0] = i4;
    i2 = i3;
    i1 = i8 + (i7 + i3) | 0;
    i9 = 13;
   }
   if ((i9 | 0) == 13) {
    i9 = 0;
    HEAP8[i1 >> 0] = i4;
    i1 = i8 + (i7 + (i2 + 1)) | 0;
   }
   HEAP8[i1 >> 0] = i4;
  } while (0);
  if ((i6 | 0) > 1) {
   i5 = i5 + 6 | 0;
   i6 = i6 + -1 | 0;
  } else break;
 }
 return;
}

function __ZNK4math7Frustum10ToPBVolumeEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 __ZNK4math6float3mlEf(i3 + 108 | 0, i2 + 24 | 0, Math_fround(HEAPF32[i2 + 48 >> 2]));
 __ZNK4math6float3plERKS0_(i3 + 120 | 0, i2 + 12 | 0, i3 + 108 | 0);
 __ZNK4math6float3ngEv(i3 + 96 | 0, i2 + 24 | 0);
 __ZN4math5PlaneC2ERKNS_6float3ES3_(i3 + 80 | 0, i3 + 120 | 0, i3 + 96 | 0);
 HEAP32[i1 >> 2] = HEAP32[i3 + 80 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 80 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 80 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 80 + 12 >> 2];
 __ZNK4math7Frustum9LeftPlaneEv(i3 + 64 | 0, i2);
 HEAP32[i1 + 16 >> 2] = HEAP32[i3 + 64 >> 2];
 HEAP32[i1 + 16 + 4 >> 2] = HEAP32[i3 + 64 + 4 >> 2];
 HEAP32[i1 + 16 + 8 >> 2] = HEAP32[i3 + 64 + 8 >> 2];
 HEAP32[i1 + 16 + 12 >> 2] = HEAP32[i3 + 64 + 12 >> 2];
 __ZNK4math7Frustum10RightPlaneEv(i3 + 48 | 0, i2);
 HEAP32[i1 + 32 >> 2] = HEAP32[i3 + 48 >> 2];
 HEAP32[i1 + 32 + 4 >> 2] = HEAP32[i3 + 48 + 4 >> 2];
 HEAP32[i1 + 32 + 8 >> 2] = HEAP32[i3 + 48 + 8 >> 2];
 HEAP32[i1 + 32 + 12 >> 2] = HEAP32[i3 + 48 + 12 >> 2];
 __ZNK4math7Frustum8TopPlaneEv(i3 + 32 | 0, i2);
 HEAP32[i1 + 48 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i1 + 48 + 4 >> 2] = HEAP32[i3 + 32 + 4 >> 2];
 HEAP32[i1 + 48 + 8 >> 2] = HEAP32[i3 + 32 + 8 >> 2];
 HEAP32[i1 + 48 + 12 >> 2] = HEAP32[i3 + 32 + 12 >> 2];
 __ZNK4math7Frustum11BottomPlaneEv(i3 + 16 | 0, i2);
 HEAP32[i1 + 64 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i1 + 64 + 4 >> 2] = HEAP32[i3 + 16 + 4 >> 2];
 HEAP32[i1 + 64 + 8 >> 2] = HEAP32[i3 + 16 + 8 >> 2];
 HEAP32[i1 + 64 + 12 >> 2] = HEAP32[i3 + 16 + 12 >> 2];
 __ZNK4math6float3mlEf(i3 + 108 | 0, i2 + 24 | 0, Math_fround(HEAPF32[i2 + 52 >> 2]));
 __ZNK4math6float3plERKS0_(i3 + 120 | 0, i2 + 12 | 0, i3 + 108 | 0);
 __ZN4math5PlaneC2ERKNS_6float3ES3_(i3, i3 + 120 | 0, i2 + 24 | 0);
 HEAP32[i1 + 80 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 80 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 80 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 80 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i3;
 return;
}

function __ZNK15MaxRectsBinPack38FindPositionForNewNodeBestShortSideFitEiiRiS0_(i10, i1, i14, i13, i12, i11) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i15 = 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = 0;
 HEAP32[i10 + 12 >> 2] = 0;
 HEAP32[i12 >> 2] = 2147483647;
 i7 = HEAP32[i1 + 24 >> 2] | 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i7 | 0) == (i5 | 0)) return;
 i6 = 0;
 do {
  i2 = i5 + (i6 << 4) + 8 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  do if ((i1 | 0) >= (i14 | 0) ? (i8 = HEAP32[i5 + (i6 << 4) + 12 >> 2] | 0, (i8 | 0) >= (i13 | 0)) : 0) {
   i15 = (i1 - i14 | 0) > -1 ? i1 - i14 | 0 : 0 - (i1 - i14) | 0;
   i4 = (i8 - i13 | 0) > -1 ? i8 - i13 | 0 : 0 - (i8 - i13) | 0;
   i3 = (i15 | 0) <= (i4 | 0) ? i15 : i4;
   i4 = (i15 | 0) >= (i4 | 0) ? i15 : i4;
   i15 = HEAP32[i12 >> 2] | 0;
   if ((i3 | 0) >= (i15 | 0) ? !((i3 | 0) == (i15 | 0) ? (i4 | 0) < (HEAP32[i11 >> 2] | 0) : 0) : 0) break;
   HEAP32[i10 >> 2] = HEAP32[i5 + (i6 << 4) >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i5 + (i6 << 4) + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = i14;
   HEAP32[i10 + 12 >> 2] = i13;
   HEAP32[i12 >> 2] = i3;
   HEAP32[i11 >> 2] = i4;
   i1 = HEAP32[i2 >> 2] | 0;
  } while (0);
  do if ((i1 | 0) >= (i13 | 0) ? (i9 = HEAP32[i5 + (i6 << 4) + 12 >> 2] | 0, (i9 | 0) >= (i14 | 0)) : 0) {
   i15 = i1 - i13 | 0;
   i15 = (i15 | 0) > -1 ? i15 : 0 - i15 | 0;
   i2 = (i9 - i14 | 0) > -1 ? i9 - i14 | 0 : 0 - (i9 - i14) | 0;
   i1 = (i15 | 0) <= (i2 | 0) ? i15 : i2;
   i2 = (i15 | 0) >= (i2 | 0) ? i15 : i2;
   i15 = HEAP32[i12 >> 2] | 0;
   if ((i1 | 0) >= (i15 | 0) ? !((i1 | 0) == (i15 | 0) ? (i2 | 0) < (HEAP32[i11 >> 2] | 0) : 0) : 0) break;
   HEAP32[i10 >> 2] = HEAP32[i5 + (i6 << 4) >> 2];
   HEAP32[i10 + 4 >> 2] = HEAP32[i5 + (i6 << 4) + 4 >> 2];
   HEAP32[i10 + 8 >> 2] = i13;
   HEAP32[i10 + 12 >> 2] = i14;
   HEAP32[i12 >> 2] = i1;
   HEAP32[i11 >> 2] = i2;
  } while (0);
  i6 = i6 + 1 | 0;
 } while (i6 >>> 0 < i7 - i5 >> 4 >>> 0);
 return;
}

function __ZN7Texture16CreateMainMemoryEiiii11TextureType13TextureFormatPK5ImageiPKc(i8, i11, i4, i2, i1, i3, i7, i6, i9, i10, i5) {
 i8 = i8 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 __ZN7Texture6DeinitEv(i11);
 HEAP32[i11 + 20 >> 2] = i4;
 HEAP32[i11 + 24 >> 2] = i2;
 HEAP32[i11 + 28 >> 2] = i1;
 i1 = (i3 | 0) > 1 ? i3 : 1;
 HEAP32[i11 + 32 >> 2] = i1;
 HEAP32[i11 + 36 >> 2] = i6;
 HEAP32[i11 + 40 >> 2] = i7;
 if ((HEAP32[i11 + 4 >> 2] | 0) != (i5 | 0)) {
  __ZN6String3SetEPKc(i11 + 4 | 0, i5);
  i1 = HEAP32[i11 + 32 >> 2] | 0;
 }
 HEAP32[i11 + 44 >> 2] = 5;
 HEAP32[i11 + 48 >> 2] = 99;
 i3 = i1 * 36 | 0;
 i3 = __Znaj(i1 >>> 0 > 119304647 | i3 >>> 0 > 4294967291 ? -1 : i3 + 4 | 0) | 0;
 HEAP32[i3 >> 2] = i1;
 L4 : do if (i1) {
  i1 = i3 + 4 + (i1 * 36 | 0) | 0;
  i2 = i3 + 4 | 0;
  do {
   __ZN5ImageC2Ev(i2);
   i2 = i2 + 36 | 0;
  } while ((i2 | 0) != (i1 | 0));
  i7 = (HEAP32[i11 + 32 >> 2] | 0) > 0;
  HEAP32[i11 + 64 >> 2] = i3 + 4;
  if (i7) {
   i1 = 0;
   while (1) {
    if ((i1 | 0) >= (i10 | 0)) {
     i6 = HEAP32[i11 + 20 >> 2] >> i1;
     i7 = HEAP32[i11 + 24 >> 2] >> i1;
     if (!(__ZN5Image9CreateNewEii13TextureFormat((HEAP32[i11 + 64 >> 2] | 0) + (i1 * 36 | 0) | 0, (i6 | 0) > 1 ? i6 : 1, (i7 | 0) > 1 ? i7 : 1, HEAP32[i11 + 36 >> 2] | 0) | 0)) break;
    } else {
     i7 = (HEAP32[i11 + 64 >> 2] | 0) + (i1 * 36 | 0) | 0;
     __ZNK5Image8DeepCopyEv(i12 + 4 | 0, i9 + (i1 * 36 | 0) | 0);
     __ZN5ImageaSERKS_(i7, i12 + 4 | 0) | 0;
     __ZN5ImageD2Ev(i12 + 4 | 0);
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (HEAP32[i11 + 32 >> 2] | 0)) break L4;
   }
   __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i8, 305008, 304390, 688, -2147467259, 305123, i12);
   STACKTOP = i12;
   return;
  }
 } else HEAP32[i11 + 64 >> 2] = i3 + 4; while (0);
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 STACKTOP = i12;
 return;
}

function __ZNK15MaxRectsBinPack37FindPositionForNewNodeBestLongSideFitEiiRiS0_(i11, i1, i15, i14, i13, i12) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i16 = 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 HEAP32[i11 + 12 >> 2] = 0;
 HEAP32[i12 >> 2] = 2147483647;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i8 | 0) == (i6 | 0)) return;
 i1 = 2147483647;
 i7 = 0;
 do {
  i3 = i6 + (i7 << 4) + 8 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  do if ((i2 | 0) >= (i15 | 0) ? (i9 = HEAP32[i6 + (i7 << 4) + 12 >> 2] | 0, (i9 | 0) >= (i14 | 0)) : 0) {
   i16 = (i2 - i15 | 0) > -1 ? i2 - i15 | 0 : 0 - (i2 - i15) | 0;
   i5 = (i9 - i14 | 0) > -1 ? i9 - i14 | 0 : 0 - (i9 - i14) | 0;
   i4 = (i16 | 0) <= (i5 | 0) ? i16 : i5;
   i5 = (i16 | 0) >= (i5 | 0) ? i16 : i5;
   if ((i5 | 0) >= (i1 | 0) ? !((i5 | 0) == (i1 | 0) ? (i4 | 0) < (HEAP32[i13 >> 2] | 0) : 0) : 0) break;
   HEAP32[i11 >> 2] = HEAP32[i6 + (i7 << 4) >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i6 + (i7 << 4) + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = i15;
   HEAP32[i11 + 12 >> 2] = i14;
   HEAP32[i13 >> 2] = i4;
   HEAP32[i12 >> 2] = i5;
   i2 = HEAP32[i3 >> 2] | 0;
   i1 = i5;
  } while (0);
  do if ((i2 | 0) >= (i14 | 0) ? (i10 = HEAP32[i6 + (i7 << 4) + 12 >> 2] | 0, (i10 | 0) >= (i15 | 0)) : 0) {
   i16 = i2 - i14 | 0;
   i16 = (i16 | 0) > -1 ? i16 : 0 - i16 | 0;
   i3 = (i10 - i15 | 0) > -1 ? i10 - i15 | 0 : 0 - (i10 - i15) | 0;
   i2 = (i16 | 0) <= (i3 | 0) ? i16 : i3;
   i3 = (i16 | 0) >= (i3 | 0) ? i16 : i3;
   if ((i3 | 0) >= (i1 | 0) ? !((i3 | 0) == (i1 | 0) ? (i2 | 0) < (HEAP32[i13 >> 2] | 0) : 0) : 0) break;
   HEAP32[i11 >> 2] = HEAP32[i6 + (i7 << 4) >> 2];
   HEAP32[i11 + 4 >> 2] = HEAP32[i6 + (i7 << 4) + 4 >> 2];
   HEAP32[i11 + 8 >> 2] = i14;
   HEAP32[i11 + 12 >> 2] = i15;
   HEAP32[i13 >> 2] = i2;
   HEAP32[i12 >> 2] = i3;
   i1 = i3;
  } while (0);
  i7 = i7 + 1 | 0;
 } while (i7 >>> 0 < i8 - i6 >> 4 >>> 0);
 return;
}

function _parse_blend_design_positions(i9, i10) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 FUNCTION_TABLE_viiii[HEAP32[i10 + 60 >> 2] & 15](i10, i11 + 64 | 0, 16, i11 + 56 | 0);
 i1 = HEAP32[i11 + 56 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i8 = 162;
  i10 = i10 + 12 | 0;
  HEAP32[i10 >> 2] = i8;
  STACKTOP = i11;
  return;
 }
 if ((i1 | 0) == 0 | (i1 | 0) > 16) {
  i8 = 3;
  i10 = i10 + 12 | 0;
  HEAP32[i10 >> 2] = i8;
  STACKTOP = i11;
  return;
 }
 i7 = HEAP32[i10 >> 2] | 0;
 i8 = HEAP32[i10 + 8 >> 2] | 0;
 L7 : do if ((i1 | 0) > 0) {
  i1 = HEAP32[i9 + 532 >> 2] | 0;
  i6 = 0;
  i2 = 0;
  while (1) {
   HEAP32[i10 >> 2] = HEAP32[i11 + 64 + (i6 * 12 | 0) >> 2];
   HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 64 + (i6 * 12 | 0) + 4 >> 2];
   FUNCTION_TABLE_viiii[HEAP32[i10 + 60 >> 2] & 15](i10, i11 + 8 | 0, 4, i11);
   i3 = HEAP32[i11 >> 2] | 0;
   if (i6) if ((i3 | 0) == (i2 | 0)) {
    i4 = i2;
    i5 = i1;
    i3 = i2;
   } else {
    i1 = 3;
    break;
   } else {
    if ((i3 + -1 | 0) >>> 0 > 3) {
     i1 = 3;
     break;
    }
    i1 = _t1_allocate_blend(i9, HEAP32[i11 + 56 >> 2] | 0, i3) | 0;
    if (i1) break;
    i4 = HEAP32[i11 >> 2] | 0;
    i5 = HEAP32[i9 + 532 >> 2] | 0;
   }
   if ((i4 | 0) > 0) {
    i1 = i5 + 24 + (i6 << 2) | 0;
    i2 = 0;
    do {
     HEAP32[i10 >> 2] = HEAP32[i11 + 8 + (i2 * 12 | 0) >> 2];
     HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 + (i2 * 12 | 0) + 4 >> 2];
     i4 = FUNCTION_TABLE_iii[HEAP32[i10 + 40 >> 2] & 255](i10, 0) | 0;
     HEAP32[(HEAP32[i1 >> 2] | 0) + (i2 << 2) >> 2] = i4;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < (HEAP32[i11 >> 2] | 0));
   }
   i6 = i6 + 1 | 0;
   if ((i6 | 0) >= (HEAP32[i11 + 56 >> 2] | 0)) break L7; else {
    i1 = i5;
    i2 = i3;
   }
  }
  i8 = i1;
  i10 = i10 + 12 | 0;
  HEAP32[i10 >> 2] = i8;
  STACKTOP = i11;
  return;
 } while (0);
 HEAP32[i10 >> 2] = i7;
 HEAP32[i10 + 8 >> 2] = i8;
 i8 = 0;
 i10 = i10 + 12 | 0;
 HEAP32[i10 >> 2] = i8;
 STACKTOP = i11;
 return;
}

function __ZNK15MaxRectsBinPack33FindPositionForNewNodeBestAreaFitEiiRiS0_(i12, i1, i16, i15, i13, i14) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i17 = 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAP32[i13 >> 2] = 2147483647;
 i10 = HEAP32[i1 + 24 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i10 | 0) == (i7 | 0)) return;
 i8 = Math_imul(i15, i16) | 0;
 i1 = 2147483647;
 i9 = 0;
 do {
  i4 = i7 + (i9 << 4) + 8 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i5 = i7 + (i9 << 4) + 12 | 0;
  i3 = HEAP32[i5 >> 2] | 0;
  i6 = (Math_imul(i3, i2) | 0) - i8 | 0;
  do if (!((i2 | 0) < (i16 | 0) | (i3 | 0) < (i15 | 0))) {
   i17 = (i2 - i16 | 0) > -1 ? i2 - i16 | 0 : 0 - (i2 - i16) | 0;
   i3 = (i3 - i15 | 0) > -1 ? i3 - i15 | 0 : 0 - (i3 - i15) | 0;
   i3 = (i17 | 0) <= (i3 | 0) ? i17 : i3;
   if ((i6 | 0) >= (i1 | 0) ? !((i6 | 0) == (i1 | 0) ? (i3 | 0) < (HEAP32[i14 >> 2] | 0) : 0) : 0) break;
   HEAP32[i12 >> 2] = HEAP32[i7 + (i9 << 4) >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i7 + (i9 << 4) + 4 >> 2];
   HEAP32[i12 + 8 >> 2] = i16;
   HEAP32[i12 + 12 >> 2] = i15;
   HEAP32[i14 >> 2] = i3;
   HEAP32[i13 >> 2] = i6;
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = i6;
  } while (0);
  do if ((i2 | 0) >= (i15 | 0) ? (i11 = HEAP32[i5 >> 2] | 0, (i11 | 0) >= (i16 | 0)) : 0) {
   i17 = i2 - i15 | 0;
   i17 = (i17 | 0) > -1 ? i17 : 0 - i17 | 0;
   i2 = (i11 - i16 | 0) > -1 ? i11 - i16 | 0 : 0 - (i11 - i16) | 0;
   i2 = (i17 | 0) <= (i2 | 0) ? i17 : i2;
   if ((i6 | 0) >= (i1 | 0) ? !((i6 | 0) == (i1 | 0) ? (i2 | 0) < (HEAP32[i14 >> 2] | 0) : 0) : 0) break;
   HEAP32[i12 >> 2] = HEAP32[i7 + (i9 << 4) >> 2];
   HEAP32[i12 + 4 >> 2] = HEAP32[i7 + (i9 << 4) + 4 >> 2];
   HEAP32[i12 + 8 >> 2] = i15;
   HEAP32[i12 + 12 >> 2] = i16;
   HEAP32[i14 >> 2] = i2;
   HEAP32[i13 >> 2] = i6;
   i1 = i6;
  } while (0);
  i9 = i9 + 1 | 0;
 } while (i9 >>> 0 < i10 - i7 >> 4 >>> 0);
 return;
}

function _FT_Select_Charmap(i8, i5) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0;
 if (!i8) {
  i8 = 35;
  return i8 | 0;
 }
 L4 : do if ((i5 | 0) < 1970170211) {
  switch (i5 | 0) {
  case 0:
   {
    i7 = 6;
    break;
   }
  default:
   break L4;
  }
  return i7 | 0;
 } else {
  switch (i5 | 0) {
  case 1970170211:
   break;
  default:
   break L4;
  }
  i4 = HEAP32[i8 + 40 >> 2] | 0;
  if (!i4) {
   i8 = 38;
   return i8 | 0;
  }
  i1 = (HEAP32[i8 + 36 >> 2] | 0) + -1 | 0;
  if ((i1 | 0) < 0) {
   i8 = 38;
   return i8 | 0;
  }
  i2 = i4 + (i1 << 2) | 0;
  L15 : while (1) {
   i3 = HEAP32[i2 >> 2] | 0;
   L17 : do if ((HEAP32[i3 + 4 >> 2] | 0) == 1970170211) {
    switch (HEAP16[i3 + 8 >> 1] | 0) {
    case 3:
     {
      if ((HEAP16[i3 + 10 >> 1] | 0) != 10) break L17;
      break;
     }
    case 0:
     {
      if ((HEAP16[i3 + 10 >> 1] | 0) != 4) break L17;
      break;
     }
    default:
     break L17;
    }
    if ((i2 - i4 | 0) <= 60) {
     i9 = 12;
     break L15;
    }
   } while (0);
   i2 = i2 + -4 | 0;
   if (i2 >>> 0 < i4 >>> 0) {
    i6 = i4 + (i1 << 2) | 0;
    break;
   }
  }
  if ((i9 | 0) == 12) {
   HEAP32[i8 + 92 >> 2] = i3;
   i8 = 0;
   return i8 | 0;
  }
  while (1) {
   i1 = HEAP32[i6 >> 2] | 0;
   if ((HEAP32[i1 + 4 >> 2] | 0) == 1970170211 ? (i6 - i4 | 0) <= 60 : 0) break;
   i6 = i6 + -4 | 0;
   if (i6 >>> 0 < i4 >>> 0) {
    i7 = 38;
    i9 = 24;
    break;
   }
  }
  if ((i9 | 0) == 24) return i7 | 0;
  HEAP32[i8 + 92 >> 2] = i1;
  i8 = 0;
  return i8 | 0;
 } while (0);
 i1 = HEAP32[i8 + 40 >> 2] | 0;
 if (!i1) {
  i8 = 38;
  return i8 | 0;
 }
 i2 = HEAP32[i8 + 36 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  i8 = 6;
  return i8 | 0;
 }
 i4 = i1;
 while (1) {
  i3 = HEAP32[i4 >> 2] | 0;
  if ((HEAP32[i3 + 4 >> 2] | 0) == (i5 | 0) ? (i4 - i1 | 0) <= 60 : 0) break;
  i4 = i4 + 4 | 0;
  if (i4 >>> 0 >= (i1 + (i2 << 2) | 0) >>> 0) {
   i7 = 6;
   i9 = 24;
   break;
  }
 }
 if ((i9 | 0) == 24) return i7 | 0;
 HEAP32[i8 + 92 >> 2] = i3;
 i8 = 0;
 return i8 | 0;
}

function _tt_face_load_name(i9, i10) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i10 + 28 >> 2] | 0;
 HEAP32[i9 + 364 >> 2] = i10;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i9 + 508 >> 2] & 63](i9, 1851878757, i10, i11) | 0;
 HEAP32[i11 + 4 >> 2] = i1;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i6 = _FT_Stream_Pos(i10) | 0;
 i1 = _FT_Stream_ReadFields(i10, 285744, i9 + 348 | 0) | 0;
 HEAP32[i11 + 4 >> 2] = i1;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i4 = HEAP32[i9 + 352 >> 2] | 0;
 i5 = (HEAP32[i11 >> 2] | 0) + i6 | 0;
 if ((i6 + 6 + (i4 * 12 | 0) | 0) >>> 0 > i5 >>> 0) {
  HEAP32[i11 + 4 >> 2] = 145;
  i10 = 145;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i9 + 352 >> 2] = 0;
 HEAP32[i9 + 360 >> 2] = _ft_mem_realloc(i2, 20, 0, i4, 0, i11 + 4 | 0) | 0;
 i1 = HEAP32[i11 + 4 >> 2] | 0;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i10, i4 * 12 | 0) | 0;
 HEAP32[i11 + 4 >> 2] = i1;
 if (i1) {
  i10 = i1;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = HEAP32[i9 + 360 >> 2] | 0;
 if (!i4) i2 = i1; else {
  i3 = i4;
  do {
   i2 = _FT_Stream_ReadFields(i10, 285764, i1) | 0;
   HEAP32[i11 + 4 >> 2] = i2;
   do if ((i2 | 0) == 0 ? (i7 = i1 + 8 | 0, i8 = HEAP16[i7 >> 1] | 0, i8 << 16 >> 16 != 0) : 0) {
    i2 = i1 + 12 | 0;
    i12 = (HEAP32[i9 + 356 >> 2] | 0) + i6 + (HEAP32[i2 >> 2] | 0) | 0;
    HEAP32[i2 >> 2] = i12;
    if (i12 >>> 0 >= (i6 + 6 + (i4 * 12 | 0) | 0) >>> 0 ? ((i8 & 65535) + i12 | 0) >>> 0 <= i5 >>> 0 : 0) {
     i1 = i1 + 20 | 0;
     break;
    }
    HEAP32[i2 >> 2] = 0;
    HEAP16[i7 >> 1] = 0;
   } while (0);
   i3 = i3 + -1 | 0;
  } while ((i3 | 0) != 0);
  i2 = HEAP32[i9 + 360 >> 2] | 0;
 }
 HEAP32[i9 + 352 >> 2] = (i1 - i2 | 0) / 20 | 0;
 _FT_Stream_ExitFrame(i10);
 HEAP16[i9 + 344 >> 1] = HEAP32[i9 + 352 >> 2];
 i12 = HEAP32[i11 + 4 >> 2] | 0;
 STACKTOP = i11;
 return i12 | 0;
}

function _af_latin_hints_link_segments(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i14 = HEAP32[i2 + 44 + (i1 * 28 | 0) + 8 >> 2] | 0;
 i15 = HEAP32[i2 + 44 + (i1 * 28 | 0) >> 2] | 0;
 i13 = HEAP32[(HEAP32[i2 + 108 >> 2] | 0) + 36 >> 2] | 0;
 i11 = (i13 + 255 | 0) >>> 0 < 511 ? 1 : (i13 | 0) / 256 | 0;
 if ((i15 | 0) <= 0) return;
 i3 = HEAP32[i2 + 44 + (i1 * 28 | 0) + 24 >> 2] | 0;
 i9 = i14;
 do {
  if ((HEAP8[i9 + 1 >> 0] | 0) == (i3 | 0) ? (HEAP32[i9 + 40 >> 2] | 0) != (HEAP32[i9 + 44 >> 2] | 0) : 0) {
   i4 = HEAP16[i9 + 2 >> 1] | 0;
   i5 = i9 + 4 | 0;
   i6 = i9 + 6 | 0;
   i7 = i9 + 32 | 0;
   i8 = i9 + 20 | 0;
   i10 = i14;
   do {
    i1 = HEAP16[i10 + 2 >> 1] | 0;
    if ((i1 << 16 >> 16 > i4 << 16 >> 16 ? (i3 | 0) == (0 - (HEAP8[i10 + 1 >> 0] | 0) | 0) : 0) ? (i12 = HEAP16[i5 >> 1] | 0, i16 = HEAP16[i6 >> 1] | 0, i2 = HEAP16[i10 + 4 >> 1] | 0, i17 = HEAP16[i10 + 6 >> 1] | 0, i12 = ((i16 << 16 >> 16 > i17 << 16 >> 16 ? i17 : i16) << 16 >> 16) - ((i12 << 16 >> 16 < i2 << 16 >> 16 ? i2 : i12) << 16 >> 16) | 0, (i12 | 0) >= (i11 | 0)) : 0) {
     i1 = (((i13 * 6e3 | 0) / 2048 | 0 | 0) / (i12 | 0) | 0) + ((i1 << 16 >> 16) - (i4 << 16 >> 16)) | 0;
     if ((i1 | 0) < (HEAP32[i7 >> 2] | 0)) {
      HEAP32[i7 >> 2] = i1;
      HEAP32[i8 >> 2] = i10;
     }
     i2 = i10 + 32 | 0;
     if ((i1 | 0) < (HEAP32[i2 >> 2] | 0)) {
      HEAP32[i2 >> 2] = i1;
      HEAP32[i10 + 20 >> 2] = i9;
     }
    }
    i10 = i10 + 48 | 0;
   } while (i10 >>> 0 < (i14 + (i15 * 48 | 0) | 0) >>> 0);
  }
  i9 = i9 + 48 | 0;
 } while (i9 >>> 0 < (i14 + (i15 * 48 | 0) | 0) >>> 0);
 if ((i15 | 0) > 0) i3 = i14; else return;
 do {
  i1 = i3 + 20 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) != 0 ? (HEAP32[i2 + 20 >> 2] | 0) != (i3 | 0) : 0) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i3 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
  }
  i3 = i3 + 48 | 0;
 } while (i3 >>> 0 < (i14 + (i15 * 48 | 0) | 0) >>> 0);
 return;
}

function _FT_Remove_Module(i3, i9) {
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!i3) {
  i8 = 33;
  return i8 | 0;
 }
 if (!i9) {
  i8 = 34;
  return i8 | 0;
 }
 i2 = HEAP32[i3 + 16 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  i8 = 34;
  return i8 | 0;
 }
 i1 = i3 + 20 | 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) break;
  i1 = i1 + 4 | 0;
  if (i1 >>> 0 >= (i3 + 20 + (i2 << 2) | 0) >>> 0) {
   i1 = 34;
   i4 = 27;
   break;
  }
 }
 if ((i4 | 0) == 27) return i1 | 0;
 HEAP32[i3 + 16 >> 2] = i2 + -1;
 if (i1 >>> 0 < (i3 + 20 + (i2 + -1 << 2) | 0) >>> 0) do {
  i5 = i1;
  i1 = i1 + 4 | 0;
  HEAP32[i5 >> 2] = HEAP32[i1 >> 2];
 } while (i1 >>> 0 < (i3 + 20 + (i2 + -1 << 2) | 0) >>> 0);
 HEAP32[i3 + 20 + (i2 + -1 << 2) >> 2] = 0;
 i5 = HEAP32[i9 + 8 >> 2] | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i4 = HEAP32[i9 + 4 >> 2] | 0;
 if ((i4 | 0) != 0 ? (HEAP32[i4 + 160 >> 2] | 0) == (i9 | 0) : 0) HEAP32[i4 + 160 >> 2] = 0;
 if ((HEAP32[i3 >> 2] & 2 | 0) != 0 ? (i6 = HEAP32[i4 >> 2] | 0, i7 = _FT_List_Find(i4 + 148 | 0, i9) | 0, (i7 | 0) != 0) : 0) {
  i1 = HEAP32[i9 + 12 >> 2] | 0;
  if ((HEAP32[i1 + 36 >> 2] | 0) == 1869968492 ? (i8 = HEAP32[i9 + 52 >> 2] | 0, (i8 | 0) != 0) : 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 + 56 >> 2] | 0) + 20 >> 2] & 127](i8);
  _FT_List_Remove(i4 + 148 | 0, i7);
  _ft_mem_free(i6, i7);
  i1 = HEAP32[i4 + 148 >> 2] | 0;
  L31 : do if (!i1) i1 = 0; else while (1) {
   i2 = HEAP32[i1 + 8 >> 2] | 0;
   if ((HEAP32[i2 + 16 >> 2] | 0) == 1869968492) {
    i1 = i2;
    break L31;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    break;
   }
  } while (0);
  HEAP32[i4 + 156 >> 2] = i1;
 }
 if ((HEAP32[HEAP32[i9 >> 2] >> 2] & 1 | 0) != 0 ? (_FT_List_Finalize(i9 + 16 | 0, 7, HEAP32[i9 + 8 >> 2] | 0, i9), (HEAP32[HEAP32[i9 >> 2] >> 2] & 512 | 0) == 0) : 0) _FT_GlyphLoader_Done(HEAP32[i9 + 24 >> 2] | 0);
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i9);
 _ft_mem_free(i5, i9);
 i8 = 0;
 return i8 | 0;
}

function _tt_cmap12_char_map_binary(i11, i12, i8) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i7 = HEAP32[i11 + 16 >> 2] | 0;
 i10 = HEAPU8[i7 + 13 >> 0] << 16 | HEAPU8[i7 + 12 >> 0] << 24 | HEAPU8[i7 + 14 >> 0] << 8 | HEAPU8[i7 + 15 >> 0];
 if (!i10) {
  i12 = 0;
  return i12 | 0;
 }
 i2 = (HEAP32[i12 >> 2] | 0) + (i8 << 24 >> 24 != 0 & 1) | 0;
 i3 = i10;
 i1 = 0;
 L4 : while (1) {
  while (1) {
   i6 = (i1 + i3 | 0) >>> 1;
   i5 = HEAPU8[i7 + ((i6 * 12 | 0) + 17) >> 0] << 16 | HEAPU8[i7 + ((i6 * 12 | 0) + 16) >> 0] << 24 | HEAPU8[i7 + ((i6 * 12 | 0) + 18) >> 0] << 8 | HEAPU8[i7 + ((i6 * 12 | 0) + 19) >> 0];
   i4 = HEAPU8[i7 + ((i6 * 12 | 0) + 21) >> 0] << 16 | HEAPU8[i7 + ((i6 * 12 | 0) + 20) >> 0] << 24 | HEAPU8[i7 + ((i6 * 12 | 0) + 22) >> 0] << 8 | HEAPU8[i7 + ((i6 * 12 | 0) + 23) >> 0];
   if (i2 >>> 0 < i5 >>> 0) break;
   if (i2 >>> 0 <= i4 >>> 0) {
    i9 = 8;
    break L4;
   }
   i1 = i6 + 1 | 0;
   if (i1 >>> 0 >= i3 >>> 0) {
    i3 = i6;
    i1 = 0;
    break L4;
   }
  }
  if (i1 >>> 0 < i6 >>> 0) i3 = i6; else {
   i3 = i6;
   i1 = 0;
   break;
  }
 }
 if ((i9 | 0) == 8) {
  i3 = i6;
  i1 = i2 - i5 + (HEAPU8[i7 + ((i6 * 12 | 0) + 25) >> 0] << 16 | HEAPU8[i7 + ((i6 * 12 | 0) + 24) >> 0] << 24 | HEAPU8[i7 + ((i6 * 12 | 0) + 26) >> 0] << 8 | HEAPU8[i7 + ((i6 * 12 | 0) + 27) >> 0]) | 0;
 }
 if (!(i8 << 24 >> 24)) {
  i12 = i1;
  return i12 | 0;
 }
 if (i2 >>> 0 > i4 >>> 0) {
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i10 | 0)) {
   i12 = 0;
   return i12 | 0;
  }
 }
 HEAP8[i11 + 24 >> 0] = 1;
 HEAP32[i11 + 28 >> 2] = i2;
 HEAP32[i11 + 36 >> 2] = i3;
 do if (!i1) {
  _tt_cmap12_next(i11);
  if (!(HEAP8[i11 + 24 >> 0] | 0)) {
   i12 = 0;
   return i12 | 0;
  }
  i1 = HEAP32[i11 + 32 >> 2] | 0;
  if (!i1) {
   i12 = 0;
   return i12 | 0;
  } else {
   i2 = HEAP32[i11 + 28 >> 2] | 0;
   break;
  }
 } else HEAP32[i11 + 32 >> 2] = i1; while (0);
 HEAP32[i12 >> 2] = i2;
 i12 = i1;
 return i12 | 0;
}

function _cff_index_init(i8, i6, i5) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = HEAP32[i6 + 28 >> 2] | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 HEAP32[i8 + 20 >> 2] = 0;
 HEAP32[i8 + 24 >> 2] = 0;
 HEAP32[i8 + 28 >> 2] = 0;
 HEAP32[i8 >> 2] = i6;
 HEAP32[i8 + 4 >> 2] = _FT_Stream_Pos(i6) | 0;
 i1 = _FT_Stream_ReadUShort(i6, i9) | 0;
 do if (!(HEAP32[i9 >> 2] | 0)) {
  if (!(i1 << 16 >> 16)) {
   i8 = 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  i2 = _FT_Stream_ReadChar(i6, i9) | 0;
  if (!(HEAP32[i9 >> 2] | 0)) {
   if ((i2 + -1 & 255) > 3) {
    HEAP32[i9 >> 2] = 8;
    break;
   }
   HEAP32[i8 + 8 >> 2] = i1 & 65535;
   HEAP8[i8 + 12 >> 0] = i2;
   i4 = Math_imul(i2 & 255, (i1 & 65535) + 1 | 0) | 0;
   HEAP32[i8 + 16 >> 2] = i4 + 3 + (HEAP32[i8 + 4 >> 2] | 0);
   i4 = _FT_Stream_Skip(i6, Math_imul(i2 & 255, i1 & 65535) | 0) | 0;
   HEAP32[i9 >> 2] = i4;
   if (!i4) {
    i2 = _FT_Stream_Read(HEAP32[i8 >> 2] | 0, i9 + 4 | 0, HEAPU8[i8 + 12 >> 0] | 0) | 0;
    if (i2) {
     HEAP32[i9 >> 2] = i2;
     break;
    }
    i3 = HEAP8[i8 + 12 >> 0] | 0;
    if (i3 << 24 >> 24) {
     i4 = 0;
     i1 = 0;
     do {
      i1 = HEAPU8[i9 + 4 + i4 >> 0] | 0 | i1 << 8;
      i4 = i4 + 1 | 0;
     } while ((i4 | 0) != (i3 & 255 | 0));
     HEAP32[i9 >> 2] = i2;
     if (i2) break;
     if (i1) {
      HEAP32[i8 + 20 >> 2] = i1 + -1;
      if (!(i5 << 24 >> 24)) i1 = _FT_Stream_Skip(i6, i1 + -1 | 0) | 0; else i1 = _FT_Stream_ExtractFrame(i6, i1 + -1 | 0, i8 + 28 | 0) | 0;
      HEAP32[i9 >> 2] = i1;
      if (!i1) i1 = 0; else break;
      STACKTOP = i9;
      return i1 | 0;
     }
    } else HEAP32[i9 >> 2] = i2;
    HEAP32[i9 >> 2] = 8;
   }
  }
 } while (0);
 _ft_mem_free(i7, HEAP32[i8 + 24 >> 2] | 0);
 HEAP32[i8 + 24 >> 2] = 0;
 i8 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _af_cjk_metrics_scale_dim(i9, i1, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i10 = HEAP32[((i8 | 0) == 0 ? i1 + 4 | 0 : i1 + 8 | 0) >> 2] | 0;
 i6 = HEAP32[((i8 | 0) == 0 ? i1 + 12 | 0 : i1 + 16 | 0) >> 2] | 0;
 if ((HEAP32[i9 + 40 + (i8 * 340 | 0) + 332 >> 2] | 0) == (i10 | 0) ? (HEAP32[i9 + 40 + (i8 * 340 | 0) + 336 >> 2] | 0) == (i6 | 0) : 0) return;
 HEAP32[i9 + 40 + (i8 * 340 | 0) + 332 >> 2] = i10;
 HEAP32[i9 + 40 + (i8 * 340 | 0) + 336 >> 2] = i6;
 HEAP32[i9 + 40 + (i8 * 340 | 0) >> 2] = i10;
 HEAP32[i9 + 40 + (i8 * 340 | 0) + 4 >> 2] = i6;
 if (!(HEAP32[i9 + 40 + (i8 * 340 | 0) + 216 >> 2] | 0)) return; else i7 = 0;
 do {
  i11 = i9 + 40 + (i8 * 340 | 0) + 220 + (i7 * 28 | 0) | 0;
  i3 = (_FT_MulFix(HEAP32[i11 >> 2] | 0, i10) | 0) + i6 | 0;
  i1 = i9 + 40 + (i8 * 340 | 0) + 220 + (i7 * 28 | 0) + 4 | 0;
  HEAP32[i1 >> 2] = i3;
  i2 = i9 + 40 + (i8 * 340 | 0) + 220 + (i7 * 28 | 0) + 8 | 0;
  HEAP32[i2 >> 2] = i3;
  i3 = i9 + 40 + (i8 * 340 | 0) + 220 + (i7 * 28 | 0) + 12 | 0;
  i5 = (_FT_MulFix(HEAP32[i3 >> 2] | 0, i10) | 0) + i6 | 0;
  HEAP32[i9 + 40 + (i8 * 340 | 0) + 220 + (i7 * 28 | 0) + 16 >> 2] = i5;
  i4 = i9 + 40 + (i8 * 340 | 0) + 220 + (i7 * 28 | 0) + 20 | 0;
  HEAP32[i4 >> 2] = i5;
  i5 = i9 + 40 + (i8 * 340 | 0) + 220 + (i7 * 28 | 0) + 24 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
  if (((_FT_MulFix((HEAP32[i11 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0, i10) | 0) + 48 | 0) >>> 0 < 97) {
   i11 = (HEAP32[i1 >> 2] | 0) + 32 & -64;
   HEAP32[i2 >> 2] = i11;
   i11 = _FT_DivFix(i11, i10) | 0;
   i3 = i11 - (HEAP32[i3 >> 2] | 0) | 0;
   i11 = _FT_MulFix((i3 | 0) < 0 ? 0 - i3 | 0 : i3, i10) | 0;
   i11 = (i11 | 0) < 32 ? 0 : i11 + 32 & -64;
   HEAP32[i4 >> 2] = (HEAP32[i2 >> 2] | 0) - ((i3 | 0) < 0 ? 0 - i11 | 0 : i11);
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
  }
  i7 = i7 + 1 | 0;
 } while (i7 >>> 0 < (HEAP32[i9 + 40 + (i8 * 340 | 0) + 216 >> 2] | 0) >>> 0);
 return;
}

function __ZN6String12FirstIndexOfEPKhS1_i(i3, i10, i2) {
 i3 = i3 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!i3) {
  i10 = -1;
  return i10 | 0;
 }
 i8 = _strlen(i10) | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 if (!(i4 << 24 >> 24)) {
  i10 = -1;
  return i10 | 0;
 }
 if ((i8 | 0) <= 0) {
  i5 = i2;
  i2 = 0;
  while (1) {
   if ((i5 | 0) < 1) {
    i3 = 33;
    break;
   }
   i5 = i5 + -1 | 0;
   i4 = i4 & 255;
   do if (i4 & 128) {
    if ((i4 & 224 | 0) == 192) {
     i3 = i3 + 2 | 0;
     break;
    }
    if ((i4 & 240 | 0) == 224) {
     i3 = i3 + 3 | 0;
     break;
    }
    if ((i4 & 248 | 0) == 240) {
     i3 = i3 + 4 | 0;
     break;
    }
    if ((i4 & 252 | 0) == 248) {
     i3 = i3 + 5 | 0;
     break;
    } else {
     i3 = i3 + 6 | 0;
     break;
    }
   } else i3 = i3 + 1 | 0; while (0);
   i4 = HEAP8[i3 >> 0] | 0;
   if (!(i4 << 24 >> 24)) {
    i2 = -1;
    i3 = 33;
    break;
   } else i2 = i2 + 1 | 0;
  }
  if ((i3 | 0) == 33) return i2 | 0;
 } else {
  i7 = i2;
  i6 = i4;
  i9 = 0;
  i1 = i3;
 }
 L30 : while (1) {
  if ((i7 | 0) < 1 ? i6 << 24 >> 24 == (HEAP8[i10 >> 0] | 0) : 0) {
   i2 = i10;
   i3 = i1;
   i4 = 0;
   do {
    i3 = i3 + 1 | 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) {
     i2 = i9;
     i3 = 33;
     break L30;
    }
    i2 = i2 + 1 | 0;
   } while ((HEAP8[i3 >> 0] | 0) == (HEAP8[i2 >> 0] | 0));
  }
  i7 = i7 + -1 | 0;
  i2 = i6 & 255;
  do if (i2 & 128) {
   if ((i2 & 224 | 0) == 192) {
    i1 = i1 + 2 | 0;
    break;
   }
   if ((i2 & 240 | 0) == 224) {
    i1 = i1 + 3 | 0;
    break;
   }
   if ((i2 & 248 | 0) == 240) {
    i1 = i1 + 4 | 0;
    break;
   }
   if ((i2 & 252 | 0) == 248) {
    i1 = i1 + 5 | 0;
    break;
   } else {
    i1 = i1 + 6 | 0;
    break;
   }
  } else i1 = i1 + 1 | 0; while (0);
  i6 = HEAP8[i1 >> 0] | 0;
  if (!(i6 << 24 >> 24)) {
   i2 = -1;
   i3 = 33;
   break;
  } else i9 = i9 + 1 | 0;
 }
 if ((i3 | 0) == 33) return i2 | 0;
 return 0;
}

function __Z19AccessFlagsToStringm(i9, i2) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (!i2) {
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  HEAP32[i9 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i9, 301890);
  return;
 } else {
  i5 = 0;
  i1 = 0;
  i8 = 0;
 }
 while (1) {
  i6 = i2;
  i2 = i2 + -1 & i2;
  i6 = i2 ^ i6;
  if (i1) if (!(HEAP8[i1 >> 0] | 0)) {
   i7 = i8;
   i3 = i5;
  } else {
   i4 = i8 + 1 | 0;
   i3 = i8 + 2 | 0;
   if ((i5 | 0) < (i3 | 0)) {
    i7 = __Znaj((i3 | 0) > -1 ? i3 : -1) | 0;
    _memcpy(i7 | 0, i1 | 0, i4 | 0) | 0;
    __ZdaPv(i1);
    i1 = i7;
   } else i3 = i5;
   i7 = i1 + i8 | 0;
   HEAP8[i7 >> 0] = 124;
   HEAP8[i7 + 1 >> 0] = 0;
   i7 = i4;
  } else {
   i7 = i8;
   i3 = i5;
   i1 = 0;
  }
  switch (i6 | 0) {
  case 0:
   {
    i5 = 301890;
    break;
   }
  case 1:
   {
    i5 = 302027;
    break;
   }
  case 2:
   {
    i5 = 302006;
    break;
   }
  case 4:
   {
    i5 = 301987;
    break;
   }
  case 8:
   {
    i5 = 301969;
    break;
   }
  case 16:
   {
    i5 = 301950;
    break;
   }
  case 32:
   {
    i5 = 301932;
    break;
   }
  case 64:
   {
    i5 = 301913;
    break;
   }
  default:
   i5 = 301892;
  }
  i6 = _strlen(i5) | 0;
  if (HEAP8[i5 >> 0] | 0) {
   i4 = i5;
   do i4 = i4 + 1 | 0; while ((HEAP8[i4 >> 0] | 0) != 0);
  }
  i8 = i6 + i7 | 0;
  i4 = i8 + 1 | 0;
  do if ((i3 | 0) < (i4 | 0)) {
   i3 = __Znaj((i4 | 0) > -1 ? i4 : -1) | 0;
   if (i1) {
    _memcpy(i3 | 0, i1 | 0, i7 + 1 | 0) | 0;
    __ZdaPv(i1);
    i1 = i3;
    i3 = i4;
    break;
   }
   if ((i8 | 0) > -1) {
    HEAP8[i3 >> 0] = 0;
    i1 = i3;
    i3 = i4;
   } else {
    i1 = i3;
    i3 = i4;
   }
  } while (0);
  _memcpy(i1 + i7 | 0, i5 | 0, i6 + 1 | 0) | 0;
  if (!i2) break; else i5 = i3;
 }
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i9, i1);
 if (!i1) return;
 __ZdaPv(i1);
 return;
}

function _Vertical_Sweep_Drop(i10, i8, i6, i7, i4, i5) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i9 = 0;
 i2 = HEAP32[i10 + 4 >> 2] | 0;
 i1 = i6 + -1 + i2 & 0 - i2;
 i9 = 0 - i2 & i7;
 if ((i1 | 0) > (i9 | 0)) {
  i3 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) != (i9 + i2 | 0)) return;
  switch (i3 & 7 | 0) {
  case 0:
   {
    i3 = i9;
    break;
   }
  case 4:
   {
    i3 = (HEAP32[i10 + 8 >> 2] | 0) + ((i6 + -1 + i7 | 0) / 2 | 0) & 0 - i2;
    break;
   }
  case 5:
  case 1:
   {
    if ((HEAP32[i4 + 28 >> 2] | 0) == (i5 | 0) ? (HEAP32[i4 + 16 >> 2] | 0) < 1 : 0) {
     if (!(i3 & 16)) return;
     if ((i7 - i6 | 0) < (HEAP32[i10 + 8 >> 2] | 0)) return;
    }
    if ((HEAP32[i5 + 28 >> 2] | 0) == (i4 | 0) ? (HEAP32[i4 + 20 >> 2] | 0) == (i8 << 16 >> 16 | 0) : 0) {
     if (!(i3 & 32)) return;
     if ((i7 - i6 | 0) < (HEAP32[i10 + 8 >> 2] | 0)) return;
    }
    if ((i3 & 7 | 0) == 1) i3 = i9; else i3 = (HEAP32[i10 + 8 >> 2] | 0) + ((i6 + -1 + i7 | 0) / 2 | 0) & 0 - i2;
    break;
   }
  default:
   return;
  }
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i3 | 0) < 0) i3 = i1; else i3 = (i3 >> i2 | 0) < (HEAPU16[i10 + 56 >> 1] | 0) ? i3 : i9;
  i8 = ((i3 | 0) == (i1 | 0) ? i9 : i1) >> i2;
  if (((i8 | 0) > -1 ? (i8 | 0) < (HEAPU16[i10 + 56 >> 1] | 0) : 0) ? (HEAPU8[(HEAP32[i10 + 60 >> 2] | 0) + ((HEAP32[i10 + 148 >> 2] | 0) + (i8 << 13 >> 16)) >> 0] & 128 >>> (i8 & 7) | 0) != 0 : 0) return; else i1 = i3;
 } else i2 = HEAP32[i10 >> 2] | 0;
 i1 = i1 >> i2;
 if ((i1 | 0) <= -1) return;
 if ((i1 | 0) >= (HEAPU16[i10 + 56 >> 1] | 0)) return;
 if ((HEAP16[i10 + 158 >> 1] | 0) > (i1 >>> 3 << 16 >> 16 | 0)) HEAP16[i10 + 158 >> 1] = i1 >>> 3;
 if ((HEAP16[i10 + 160 >> 1] | 0) < (i1 >>> 3 << 16 >> 16 | 0)) HEAP16[i10 + 160 >> 1] = i1 >>> 3;
 i10 = (HEAP32[i10 + 60 >> 2] | 0) + ((HEAP32[i10 + 148 >> 2] | 0) + (i1 >>> 3 << 16 >> 16)) | 0;
 HEAP8[i10 >> 0] = HEAPU8[i10 >> 0] | 128 >>> (i1 & 7);
 return;
}

function __Z34GLConstantTypeToShaderConstantTypej(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 L1 : do if ((i1 | 0) < 35671) {
  if ((i1 | 0) >= 35667) switch (i1 | 0) {
  case 35667:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298752, i3);
    i1 = 0;
    break L1;
   }
  case 35668:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298777, i3 + 8 | 0);
    i1 = 0;
    break L1;
   }
  case 35669:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298802, i3 + 16 | 0);
    i1 = 0;
    break L1;
   }
  case 35670:
   {
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298827, i3 + 24 | 0);
    i1 = 0;
    break L1;
   }
  default:
   {
    i2 = 17;
    break L1;
   }
  }
  if ((i1 | 0) >= 35665) switch (i1 | 0) {
  case 35665:
   {
    i1 = 3;
    break L1;
   }
  case 35666:
   {
    i1 = 4;
    break L1;
   }
  default:
   {
    i2 = 17;
    break L1;
   }
  }
  if ((i1 | 0) < 35664) switch (i1 | 0) {
  case 5126:
   {
    i1 = 1;
    break L1;
   }
  default:
   {
    i2 = 17;
    break L1;
   }
  }
  switch (i1 | 0) {
  case 35664:
   break;
  default:
   {
    i2 = 17;
    break L1;
   }
  }
  i1 = 2;
 } else switch (i1 | 0) {
 case 35671:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298848, i3 + 32 | 0);
   i1 = 0;
   break L1;
  }
 case 35672:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298874, i3 + 40 | 0);
   i1 = 0;
   break L1;
  }
 case 35673:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298900, i3 + 48 | 0);
   i1 = 0;
   break L1;
  }
 case 35674:
  {
   i1 = 5;
   break L1;
  }
 case 35675:
  {
   i1 = 6;
   break L1;
  }
 case 35676:
  {
   i1 = 7;
   break L1;
  }
 case 35678:
  {
   i1 = 8;
   break L1;
  }
 case 35680:
  {
   i1 = 9;
   break L1;
  }
 default:
  {
   i2 = 17;
   break L1;
  }
 } while (0);
 if ((i2 | 0) == 17) {
  HEAP32[i3 + 56 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298926, i3 + 56 | 0);
  i1 = 0;
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _tt_cmap13_char_map_binary(i10, i11, i7) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = HEAP32[i10 + 16 >> 2] | 0;
 i9 = HEAPU8[i6 + 13 >> 0] << 16 | HEAPU8[i6 + 12 >> 0] << 24 | HEAPU8[i6 + 14 >> 0] << 8 | HEAPU8[i6 + 15 >> 0];
 if (!i9) {
  i11 = 0;
  return i11 | 0;
 }
 i2 = (HEAP32[i11 >> 2] | 0) + (i7 << 24 >> 24 != 0 & 1) | 0;
 i3 = i9;
 i1 = 0;
 L4 : while (1) {
  while (1) {
   i5 = (i1 + i3 | 0) >>> 1;
   i4 = HEAPU8[i6 + ((i5 * 12 | 0) + 21) >> 0] << 16 | HEAPU8[i6 + ((i5 * 12 | 0) + 20) >> 0] << 24 | HEAPU8[i6 + ((i5 * 12 | 0) + 22) >> 0] << 8 | HEAPU8[i6 + ((i5 * 12 | 0) + 23) >> 0];
   if (i2 >>> 0 < (HEAPU8[i6 + ((i5 * 12 | 0) + 17) >> 0] << 16 | HEAPU8[i6 + ((i5 * 12 | 0) + 16) >> 0] << 24 | HEAPU8[i6 + ((i5 * 12 | 0) + 18) >> 0] << 8 | HEAPU8[i6 + ((i5 * 12 | 0) + 19) >> 0]) >>> 0) break;
   if (i2 >>> 0 <= i4 >>> 0) {
    i8 = 8;
    break L4;
   }
   i1 = i5 + 1 | 0;
   if (i1 >>> 0 >= i3 >>> 0) {
    i3 = i5;
    i1 = 0;
    break L4;
   }
  }
  if (i1 >>> 0 < i5 >>> 0) i3 = i5; else {
   i3 = i5;
   i1 = 0;
   break;
  }
 }
 if ((i8 | 0) == 8) {
  i3 = i5;
  i1 = HEAPU8[i6 + ((i5 * 12 | 0) + 25) >> 0] << 16 | HEAPU8[i6 + ((i5 * 12 | 0) + 24) >> 0] << 24 | HEAPU8[i6 + ((i5 * 12 | 0) + 26) >> 0] << 8 | HEAPU8[i6 + ((i5 * 12 | 0) + 27) >> 0];
 }
 if (!(i7 << 24 >> 24)) {
  i11 = i1;
  return i11 | 0;
 }
 if (i2 >>> 0 > i4 >>> 0) {
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i9 | 0)) {
   i11 = 0;
   return i11 | 0;
  }
 }
 HEAP8[i10 + 24 >> 0] = 1;
 HEAP32[i10 + 28 >> 2] = i2;
 HEAP32[i10 + 36 >> 2] = i3;
 do if (!i1) {
  _tt_cmap13_next(i10);
  if (!(HEAP8[i10 + 24 >> 0] | 0)) {
   i11 = 0;
   return i11 | 0;
  }
  i1 = HEAP32[i10 + 32 >> 2] | 0;
  if (!i1) {
   i11 = 0;
   return i11 | 0;
  } else {
   i2 = HEAP32[i10 + 28 >> 2] | 0;
   break;
  }
 } else HEAP32[i10 + 32 >> 2] = i1; while (0);
 HEAP32[i11 >> 2] = i2;
 i11 = i1;
 return i11 | 0;
}

function __ZNSt3__16vectorIN6Shader19UniformBufferObjectENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i3 = (((HEAP32[i5 + 4 >> 2] | 0) - i1 | 0) / 44 | 0) + 1 | 0;
 if (i3 >>> 0 > 97612893) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i5);
  i1 = HEAP32[i5 >> 2] | 0;
 }
 i2 = ((HEAP32[i5 + 8 >> 2] | 0) - i1 | 0) / 44 | 0;
 if (i2 >>> 0 < 48806446) i3 = i2 << 1 >>> 0 < i3 >>> 0 ? i3 : i2 << 1; else i3 = 97612893;
 i1 = ((HEAP32[i5 + 4 >> 2] | 0) - i1 | 0) / 44 | 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = i5 + 8;
 if (!i3) i2 = 0; else i2 = __Znwj(i3 * 44 | 0) | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = i2 + (i1 * 44 | 0) | 0;
 HEAP32[i6 + 8 >> 2] = i7;
 HEAP32[i6 + 4 >> 2] = i7;
 HEAP32[i6 + 12 >> 2] = i2 + (i3 * 44 | 0);
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i7, HEAP32[i4 >> 2] | 0);
 i3 = i2 + (i1 * 44 | 0) + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i3, HEAP32[i4 + 16 >> 2] | 0);
 __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEEC2ERKS5_(i2 + (i1 * 44 | 0) + 32 | 0, i4 + 32 | 0);
 HEAP32[i6 + 8 >> 2] = (HEAP32[i6 + 8 >> 2] | 0) + 44;
 __ZNSt3__16vectorIN6Shader19UniformBufferObjectENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(i5, i6);
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 i2 = HEAP32[i6 + 8 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  i3 = i2;
  do {
   i3 = i3 + -44 | 0;
   __ZN6Shader19UniformBufferObjectD2Ev(i3);
  } while ((i3 | 0) != (i1 | 0));
  HEAP32[i6 + 8 >> 2] = i2 + (~(((i2 + -44 - i1 | 0) >>> 0) / 44 | 0) * 44 | 0);
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  STACKTOP = i6;
  return;
 }
 __ZdlPv(i1);
 STACKTOP = i6;
 return;
}

function __ZNSt3__16vectorI5ImageNS_9allocatorIS1_EEE8__appendEj(i9, i2) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = HEAP32[i9 + 8 >> 2] | 0;
 i1 = HEAP32[i9 + 4 >> 2] | 0;
 if (((i3 - i1 | 0) / 36 | 0) >>> 0 >= i2 >>> 0) {
  do {
   __ZN5ImageC2Ev(i1);
   i1 = (HEAP32[i9 + 4 >> 2] | 0) + 36 | 0;
   HEAP32[i9 + 4 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  return;
 }
 i5 = HEAP32[i9 >> 2] | 0;
 if ((((i1 - i5 | 0) / 36 | 0) + i2 | 0) >>> 0 > 119304647) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i3 = HEAP32[i9 + 8 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
 } else i4 = i5;
 i3 = (i3 - i4 | 0) / 36 | 0;
 if (i3 >>> 0 < 59652323) {
  i1 = i3 << 1 >>> 0 < (((i1 - i5 | 0) / 36 | 0) + i2 | 0) >>> 0 ? ((i1 - i5 | 0) / 36 | 0) + i2 | 0 : i3 << 1;
  i3 = ((HEAP32[i9 + 4 >> 2] | 0) - i4 | 0) / 36 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i1 = i3;
  } else i6 = 8;
 } else {
  i1 = 119304647;
  i3 = ((HEAP32[i9 + 4 >> 2] | 0) - i4 | 0) / 36 | 0;
  i6 = 8;
 }
 if ((i6 | 0) == 8) {
  i5 = i1;
  i4 = __Znwj(i1 * 36 | 0) | 0;
  i1 = i3;
 }
 i6 = i4 + (i1 * 36 | 0) | 0;
 i8 = i4 + (i5 * 36 | 0) | 0;
 i3 = i6;
 i1 = i6;
 while (1) {
  __ZN5ImageC2Ev(i3);
  i3 = i1 + 36 | 0;
  i7 = i3;
  i2 = i2 + -1 | 0;
  if (!i2) break; else i1 = i7;
 }
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i9 + 4 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i9 + 4 | 0;
  i2 = i6;
 } else {
  i3 = i6;
  i2 = i6;
  do {
   i1 = i1 + -36 | 0;
   __ZN5ImageC2ERKS_(i3 + -36 | 0, i1);
   i3 = i2 + -36 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i3 = i9;
  i4 = i9 + 4 | 0;
  i5 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i9 + 4 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i7;
 HEAP32[i9 + 8 >> 2] = i8;
 i2 = i5;
 while (1) {
  if ((i1 | 0) == (i2 | 0)) break;
  __ZN5ImageD2Ev(i1 + -36 | 0);
  i1 = i1 + -36 | 0;
 }
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function __ZNK4math6Sphere11TriangulateER12VertexBufferib(i2, i5, i8, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = i8 >>> 0 < 32 ? 32 : i8;
 i6 = i4 >>> 0 > 357913941 ? -1 : i4 * 12 | 0;
 i7 = __Znaj(i6) | 0;
 i6 = __Znaj(i6) | 0;
 i4 = __Znaj(i4 >>> 0 > 536870911 ? -1 : i4 << 3) | 0;
 __ZNK4math6Sphere11TriangulateEPNS_6float3ES2_PNS_6float2Eib(i2, i7, i6, i4, i8, i1) | 0;
 i1 = __ZN12VertexBuffer14AppendVerticesEi(i5, i8) | 0;
 if ((i8 | 0) > 0) {
  i3 = 0;
  do {
   i2 = i3 + i1 | 0;
   __ZN4math6float4C2ERKNS_6float3Ef(i9 + 16 | 0, i7 + (i3 * 12 | 0) | 0, Math_fround(1.0));
   __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i5, i2, 1, 0, i9 + 16 | 0);
   if ((__ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i5 + 32 | 0, 2) | 0) > -1) {
    __ZN4math6float4C2ERKNS_6float3Ef(i9, i6 + (i3 * 12 | 0) | 0, Math_fround(0.0));
    __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i5, i2, 2, 0, i9);
   }
   if ((__ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i5 + 32 | 0, 6) | 0) > -1) __ZN12VertexBuffer9SetFloat2Ei18VertexDataSemanticiRKN4math6float2E(i5, i2, 6, 0, i4 + (i3 << 3) | 0);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (i8 | 0));
 }
 __ZdaPv(i4);
 if (i8) {
  i1 = 0;
  do {
   i5 = i6 + (i1 * 12 | 0) | 0;
   HEAP32[i5 >> 2] = HEAP32[i9 + 32 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i9 + 32 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i9 + 32 + 8 >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i8 | 0));
 }
 __ZdaPv(i6);
 if (!i8) {
  __ZdaPv(i7);
  STACKTOP = i9;
  return;
 } else i1 = 0;
 do {
  i6 = i7 + (i1 * 12 | 0) | 0;
  HEAP32[i6 >> 2] = HEAP32[i9 + 32 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i9 + 32 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i9 + 32 + 8 >> 2];
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i8 | 0));
 __ZdaPv(i7);
 STACKTOP = i9;
 return;
}

function _pfr_extra_item_load_kerning_pairs(i7, i6, i8) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i9 >> 2] = 0;
 i2 = HEAP32[i8 >> 2] | 0;
 i3 = _ft_mem_alloc(i2, 24, i9) | 0;
 if (HEAP32[i9 >> 2] | 0) {
  i8 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if ((i7 + 4 | 0) >>> 0 <= i6 >>> 0 ? (i5 = HEAP8[i7 >> 0] | 0, HEAP8[i3 + 4 >> 0] = i5, HEAP16[i3 + 6 >> 1] = HEAP8[i7 + 1 >> 0] << 8 | HEAPU8[i7 + 2 >> 0], i4 = HEAP8[i7 + 3 >> 0] | 0, HEAP8[i3 + 5 >> 0] = i4, HEAP32[i3 + 12 >> 2] = (HEAP32[i8 + 4 >> 2] | 0) + (i7 + 4) - (HEAP32[i8 + 148 >> 2] | 0), i1 = (i4 & 2) == 0 ? ((i4 & 1) << 1) + 3 | 0 : (i4 & 1) << 1 | 4, HEAP32[i3 + 8 >> 2] = (i4 & 2) == 0 ? ((i4 & 1) << 1) + 3 | 0 : (i4 & 1) << 1 | 4, (i7 + ((Math_imul(i5 & 255, i1) | 0) + 4) | 0) >>> 0 <= i6 >>> 0) : 0) {
  if (!(i5 << 24 >> 24)) {
   _ft_mem_free(i2, i3);
   i8 = HEAP32[i9 >> 2] | 0;
   STACKTOP = i9;
   return i8 | 0;
  }
  if (!(i4 & 1)) {
   HEAP32[i3 + 16 >> 2] = HEAPU8[i7 + 4 >> 0] << 16 | HEAPU8[i7 + 5 >> 0];
   i6 = Math_imul((i5 & 255) + -1 | 0, i1) | 0;
   HEAP32[i3 + 20 >> 2] = HEAPU8[i7 + (i6 + 4) >> 0] << 16 | HEAPU8[i7 + (i6 + 5) >> 0];
  } else {
   HEAP32[i3 + 16 >> 2] = HEAPU8[i7 + 6 >> 0] << 8 | HEAPU8[i7 + 7 >> 0] | (HEAPU8[i7 + 4 >> 0] << 8 | HEAPU8[i7 + 5 >> 0]) << 16;
   i6 = Math_imul((i5 & 255) + -1 | 0, i1) | 0;
   HEAP32[i3 + 20 >> 2] = HEAPU8[i7 + (i6 + 6) >> 0] << 8 | HEAPU8[i7 + (i6 + 7) >> 0] | (HEAPU8[i7 + (i6 + 4) >> 0] << 8 | HEAPU8[i7 + (i6 + 5) >> 0]) << 16;
  }
  HEAP32[i3 >> 2] = 0;
  HEAP32[HEAP32[i8 + 140 >> 2] >> 2] = i3;
  HEAP32[i8 + 140 >> 2] = i3;
  HEAP32[i8 + 132 >> 2] = (HEAP32[i8 + 132 >> 2] | 0) + (i5 & 255);
  i8 = HEAP32[i9 >> 2] | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 _ft_mem_free(i2, i3);
 HEAP32[i9 >> 2] = 8;
 i8 = HEAP32[i9 >> 2] | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _ft_var_apply_tuple(i6, i3, i10, i9, i8) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if (!i2) {
  i10 = 65536;
  return i10 | 0;
 }
 if (!(i3 & 16384)) {
  i3 = 65536;
  i5 = 0;
  while (1) {
   i4 = HEAP32[i10 + (i5 << 2) >> 2] | 0;
   if (i4) {
    i2 = HEAP32[(HEAP32[i6 + 4 >> 2] | 0) + (i5 << 2) >> 2] | 0;
    if (!i2) {
     i2 = 0;
     i3 = 19;
     break;
    }
    if ((i4 | 0) > 0 & (i2 | 0) < 0) {
     i2 = 0;
     i3 = 19;
     break;
    }
    if ((i4 | 0) < 0 & (i2 | 0) > 0) {
     i2 = 0;
     i3 = 19;
     break;
    }
    i3 = _FT_MulDiv(i3, (i2 | 0) > 0 ? i2 : 0 - i2 | 0, 65536) | 0;
    i2 = HEAP32[i6 >> 2] | 0;
   }
   i5 = i5 + 1 | 0;
   if (i5 >>> 0 >= i2 >>> 0) {
    i2 = i3;
    i3 = 19;
    break;
   }
  }
  if ((i3 | 0) == 19) return i2 | 0;
 } else {
  i1 = 65536;
  i7 = 0;
 }
 L18 : while (1) {
  i2 = HEAP32[i10 + (i7 << 2) >> 2] | 0;
  do if (i2) {
   i3 = HEAP32[(HEAP32[i6 + 4 >> 2] | 0) + (i7 << 2) >> 2] | 0;
   if (!i3) {
    i2 = 0;
    i3 = 19;
    break L18;
   }
   if ((i2 | 0) > 0 & (i3 | 0) < 0) {
    i2 = 0;
    i3 = 19;
    break L18;
   }
   if ((i2 | 0) < 0 & (i3 | 0) > 0) {
    i2 = 0;
    i3 = 19;
    break L18;
   }
   i4 = HEAP32[i9 + (i7 << 2) >> 2] | 0;
   if ((i3 | 0) <= (i4 | 0)) {
    i2 = 0;
    i3 = 19;
    break L18;
   }
   i5 = HEAP32[i8 + (i7 << 2) >> 2] | 0;
   if ((i5 | 0) <= (i3 | 0)) {
    i2 = 0;
    i3 = 19;
    break L18;
   }
   if ((i3 | 0) < (i2 | 0)) {
    i1 = _FT_MulDiv(i1, _FT_MulDiv(i3 - i4 | 0, 65536, i2 - i4 | 0) | 0, 65536) | 0;
    break;
   } else {
    i1 = _FT_MulDiv(i1, _FT_MulDiv(i5 - i3 | 0, 65536, i5 - i2 | 0) | 0, 65536) | 0;
    break;
   }
  } while (0);
  i7 = i7 + 1 | 0;
  if (i7 >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) {
   i2 = i1;
   i3 = 19;
   break;
  }
 }
 if ((i3 | 0) == 19) return i2 | 0;
 return 0;
}

function _sfnt_done_face(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (!i4) return;
 i2 = HEAP32[i4 + 100 >> 2] | 0;
 i3 = HEAP32[i4 + 532 >> 2] | 0;
 if (i3) {
  i1 = HEAP32[i3 + 116 >> 2] | 0;
  if (i1) FUNCTION_TABLE_vi[i1 & 127](i4);
  i1 = HEAP32[i3 + 144 >> 2] | 0;
  if (i1) FUNCTION_TABLE_vi[i1 & 127](i4);
 }
 if (HEAP8[i4 + 812 >> 0] | 0) {
  if (HEAP32[i4 + 792 >> 2] | 0) _FT_Stream_ReleaseFrame(HEAP32[i4 + 104 >> 2] | 0, i4 + 792 | 0);
  HEAP32[i4 + 796 >> 2] = 0;
  HEAP32[i4 + 800 >> 2] = 0;
  HEAP32[i4 + 804 >> 2] = 0;
 }
 _FT_Stream_ReleaseFrame(HEAP32[i4 + 104 >> 2] | 0, i4 + 772 | 0);
 HEAP32[i4 + 776 >> 2] = 0;
 HEAP32[i4 + 776 + 4 >> 2] = 0;
 HEAP32[i4 + 776 + 8 >> 2] = 0;
 HEAP32[i4 + 776 + 12 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i4 + 144 >> 2] | 0);
 HEAP32[i4 + 144 >> 2] = 0;
 HEAP32[i4 + 140 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i4 + 156 >> 2] | 0);
 HEAP32[i4 + 156 >> 2] = 0;
 HEAP16[i4 + 152 >> 1] = 0;
 _FT_Stream_ReleaseFrame(HEAP32[i4 + 104 >> 2] | 0, i4 + 500 | 0);
 HEAP32[i4 + 504 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i4 + 252 >> 2] | 0);
 HEAP32[i4 + 252 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i4 + 256 >> 2] | 0);
 HEAP32[i4 + 256 >> 2] = 0;
 if (HEAP8[i4 + 296 >> 0] | 0) {
  _ft_mem_free(i2, HEAP32[i4 + 336 >> 2] | 0);
  HEAP32[i4 + 336 >> 2] = 0;
  _ft_mem_free(i2, HEAP32[i4 + 340 >> 2] | 0);
  HEAP32[i4 + 340 >> 2] = 0;
  HEAP8[i4 + 296 >> 0] = 0;
 }
 _ft_mem_free(i2, HEAP32[i4 + 552 >> 2] | 0);
 HEAP32[i4 + 552 >> 2] = 0;
 HEAP16[i4 + 550 >> 1] = 0;
 if (i3) FUNCTION_TABLE_vi[HEAP32[i3 + 60 >> 2] & 127](i4);
 _ft_mem_free(i2, HEAP32[i4 + 20 >> 2] | 0);
 HEAP32[i4 + 20 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i4 + 24 >> 2] | 0);
 HEAP32[i4 + 24 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i4 + 32 >> 2] | 0);
 HEAP32[i4 + 32 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i4 + 700 >> 2] | 0);
 HEAP32[i4 + 700 >> 2] = 0;
 HEAP32[i4 + 532 >> 2] = 0;
 return;
}

function ___stdio_write(i8, i2, i1) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i4 = HEAP32[i8 + 28 >> 2] | 0;
 HEAP32[i9 + 32 >> 2] = i4;
 i4 = (HEAP32[i8 + 20 >> 2] | 0) - i4 | 0;
 HEAP32[i9 + 32 + 4 >> 2] = i4;
 HEAP32[i9 + 32 + 8 >> 2] = i2;
 HEAP32[i9 + 32 + 12 >> 2] = i1;
 i3 = i9 + 32 | 0;
 i2 = 2;
 i4 = i4 + i1 | 0;
 while (1) {
  if (!(HEAP32[70347] | 0)) {
   HEAP32[i9 + 16 >> 2] = HEAP32[i8 + 60 >> 2];
   HEAP32[i9 + 16 + 4 >> 2] = i3;
   HEAP32[i9 + 16 + 8 >> 2] = i2;
   i6 = ___syscall_ret(___syscall146(146, i9 + 16 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(88, i8 | 0);
   HEAP32[i9 >> 2] = HEAP32[i8 + 60 >> 2];
   HEAP32[i9 + 4 >> 2] = i3;
   HEAP32[i9 + 8 >> 2] = i2;
   i6 = ___syscall_ret(___syscall146(146, i9 | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
  }
  if ((i4 | 0) == (i6 | 0)) {
   i4 = 6;
   break;
  }
  if ((i6 | 0) < 0) {
   i4 = 8;
   break;
  }
  i4 = i4 - i6 | 0;
  i5 = HEAP32[i3 + 4 >> 2] | 0;
  if (i6 >>> 0 <= i5 >>> 0) if ((i2 | 0) == 2) {
   HEAP32[i8 + 28 >> 2] = (HEAP32[i8 + 28 >> 2] | 0) + i6;
   i7 = i5;
   i2 = 2;
  } else i7 = i5; else {
   i7 = HEAP32[i8 + 44 >> 2] | 0;
   HEAP32[i8 + 28 >> 2] = i7;
   HEAP32[i8 + 20 >> 2] = i7;
   i7 = HEAP32[i3 + 12 >> 2] | 0;
   i6 = i6 - i5 | 0;
   i3 = i3 + 8 | 0;
   i2 = i2 + -1 | 0;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i6;
  HEAP32[i3 + 4 >> 2] = i7 - i6;
 }
 if ((i4 | 0) == 6) {
  i7 = HEAP32[i8 + 44 >> 2] | 0;
  HEAP32[i8 + 16 >> 2] = i7 + (HEAP32[i8 + 48 >> 2] | 0);
  HEAP32[i8 + 28 >> 2] = i7;
  HEAP32[i8 + 20 >> 2] = i7;
 } else if ((i4 | 0) == 8) {
  HEAP32[i8 + 16 >> 2] = 0;
  HEAP32[i8 + 28 >> 2] = 0;
  HEAP32[i8 + 20 >> 2] = 0;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 32;
  if ((i2 | 0) == 2) i1 = 0; else i1 = i1 - (HEAP32[i3 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _FT_Get_Advances(i3, i4, i6, i5, i7) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) {
  i7 = 35;
  return i7 | 0;
 }
 i2 = HEAP32[i3 + 16 >> 2] | 0;
 if ((i6 + i4 | 0) >>> 0 > i2 >>> 0 | ((i6 + i4 | 0) >>> 0 < i4 >>> 0 | i2 >>> 0 <= i4 >>> 0)) {
  i7 = 16;
  return i7 | 0;
 }
 if (!i6) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = HEAP32[(HEAP32[(HEAP32[i3 + 96 >> 2] | 0) + 12 >> 2] | 0) + 92 >> 2] | 0;
 L10 : do if ((i1 | 0) != 0 ? (i5 & 3 | 0) != 0 | (i5 & 983040 | 0) == 65536 : 0) {
  i1 = FUNCTION_TABLE_iiiiii[i1 & 63](i3, i4, i6, i5, i7) | 0;
  switch (i1 | 0) {
  case 7:
   break L10;
  case 0:
   break;
  default:
   {
    i7 = i1;
    return i7 | 0;
   }
  }
  if (i5 & 1) {
   i7 = 0;
   return i7 | 0;
  }
  i1 = HEAP32[i3 + 88 >> 2] | 0;
  if (!i1) {
   i7 = 36;
   return i7 | 0;
  }
  i2 = HEAP32[((i5 & 16 | 0) == 0 ? i1 + 16 | 0 : i1 + 20 | 0) >> 2] | 0;
  i1 = 0;
  do {
   i5 = i7 + (i1 << 2) | 0;
   HEAP32[i5 >> 2] = _FT_MulDiv(HEAP32[i5 >> 2] | 0, i2, 64) | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i6 | 0));
  i1 = 0;
  return i1 | 0;
 } while (0);
 if (i5 & 536870912) {
  i7 = 7;
  return i7 | 0;
 }
 if (!(i5 & 16)) {
  i2 = 0;
  while (1) {
   i1 = _FT_Load_Glyph(i3, i2 + i4 | 0, i5 | 256) | 0;
   if (i1) {
    i2 = 17;
    break;
   }
   HEAP32[i7 + (i2 << 2) >> 2] = HEAP32[(HEAP32[i3 + 84 >> 2] | 0) + 64 >> 2] << 10;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i6 >>> 0) {
    i1 = 0;
    i2 = 17;
    break;
   }
  }
  if ((i2 | 0) == 17) return i1 | 0;
 } else {
  i2 = 0;
  while (1) {
   i1 = _FT_Load_Glyph(i3, i2 + i4 | 0, i5 | 256) | 0;
   if (i1) {
    i2 = 17;
    break;
   }
   HEAP32[i7 + (i2 << 2) >> 2] = HEAP32[(HEAP32[i3 + 84 >> 2] | 0) + 68 >> 2] << 10;
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i6 >>> 0) {
    i1 = 0;
    i2 = 17;
    break;
   }
  }
  if ((i2 | 0) == 17) return i1 | 0;
 }
 return 0;
}

function _FT_Vector_Length(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i2) {
  i6 = (i3 | 0) > -1 ? i3 : 0 - i3 | 0;
  return i6 | 0;
 }
 i1 = (i2 | 0) > -1 ? i2 : 0 - i2 | 0;
 if (!i3) {
  i6 = i1;
  return i6 | 0;
 }
 i1 = ((i3 | 0) > -1 ? i3 : 0 - i3 | 0) | i1;
 i6 = (i1 | 0) > 65535 ? i1 >> 16 : i1;
 i1 = (i1 | 0) > 65535 ? 16 : 0;
 i5 = (i6 | 0) > 255 ? i6 >> 8 : i6;
 i1 = (i6 | 0) > 255 ? i1 | 8 : i1;
 i6 = (i5 | 0) > 15 ? i5 >> 4 : i5;
 i1 = (i5 | 0) > 15 ? i1 | 4 : i1;
 i1 = ((((i6 | 0) > 3 ? i6 >> 2 : i6) | 0) > 1 & 1) + ((i6 | 0) > 3 ? i1 | 2 : i1) | 0;
 if ((i1 | 0) < 28) {
  i2 = i2 << 27 - i1;
  i3 = i3 << 27 - i1;
  i6 = 27 - i1 | 0;
 } else {
  i2 = i2 >> i1 + -27;
  i3 = i3 >> i1 + -27;
  i6 = 27 - i1 | 0;
 }
 i5 = (i2 | 0) < 0;
 i4 = i5 ? 0 - i2 | 0 : i2;
 i2 = i5 ? 0 - i3 | 0 : i3;
 if ((i2 | 0) < 0) {
  i5 = 0;
  i1 = i4 - (i2 << 1) | 0;
  i2 = (i4 << 1) + i2 | 0;
 } else {
  i5 = 0;
  i1 = (i2 << 1) + i4 | 0;
  i2 = i2 - (i4 << 1) | 0;
 }
 do {
  i3 = i1 >> i5;
  if ((i2 | 0) < 0) {
   i1 = i1 - (i2 >> i5) | 0;
   i2 = i2 + i3 | 0;
  } else {
   i1 = (i2 >> i5) + i1 | 0;
   i2 = i2 - i3 | 0;
  }
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != 23);
 i5 = (i1 | 0) > -1 ? i1 : 0 - i1 | 0;
 i4 = ((i5 & 65535) * 17797 | 0) + ((i5 >>> 16) * 47593 | 0) + (((i5 & 65535) * 47593 | 0) >>> 16) | 0;
 i5 = i4 >>> 0 < ((((i5 & 65535) * 17797 | 0) + ((i5 >>> 16) * 47593 | 0) | 0) >>> 0 >= ((i5 & 65535) * 47593 | 0) >>> 16 >>> 0 ? ((i5 & 65535) * 17797 | 0) + ((i5 >>> 16) * 47593 | 0) | 0 : ((i5 & 65535) * 47593 | 0) >>> 16) >>> 0 ? (i4 >>> 16) + ((i5 >>> 16) * 17797 | 0) + 65536 | 0 : (i4 >>> 16) + ((i5 >>> 16) * 17797 | 0) | 0;
 i1 = (i1 | 0) > -1 ? i5 : 0 - i5 | 0;
 if ((i6 | 0) > 0) {
  i6 = i1 + (1 << i6 + -1) >> i6;
  return i6 | 0;
 } else {
  i6 = i1 << 0 - i6;
  return i6 | 0;
 }
 return 0;
}

function __ZN8MaterialD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 __ZN8Material6DeinitEv(i5);
 i1 = HEAP32[i5 + 60 >> 2] | 0;
 if (i1) {
  i4 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  if (!i4) __ZdlPv(i1);
  HEAP32[i5 + 60 >> 2] = 0;
 }
 i1 = HEAP32[i5 + 56 >> 2] | 0;
 if (i1) {
  i4 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  if (!i4) __ZdlPv(i1);
  HEAP32[i5 + 56 >> 2] = 0;
 }
 i1 = HEAP32[i5 + 52 >> 2] | 0;
 if (i1) {
  i4 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  if (!i4) __ZdlPv(i1);
  HEAP32[i5 + 52 >> 2] = 0;
 }
 i1 = HEAP32[i5 + 48 >> 2] | 0;
 if (i1) {
  i4 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  if (!i4) {
   __ZN6ShaderD2Ev(i1);
   __ZdlPv(i1);
  }
  HEAP32[i5 + 48 >> 2] = 0;
 }
 i1 = HEAP32[i5 + 44 >> 2] | 0;
 if (i1) {
  i4 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  if (!i4) {
   __ZN6ShaderD2Ev(i1);
   __ZdlPv(i1);
  }
  HEAP32[i5 + 44 >> 2] = 0;
 }
 i1 = HEAP32[i5 + 28 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 28 >> 2] = 0;
 i1 = HEAP32[i5 + 16 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i5 + 20 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i3 = i2 + -20 | 0;
    HEAP32[i5 + 20 >> 2] = i3;
    i4 = i2 + -16 | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    if (!i2) i2 = i3; else {
     __ZdaPv(i2);
     i2 = HEAP32[i5 + 20 >> 2] | 0;
    }
    HEAP32[i4 >> 2] = 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i5 + 16 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i5 + 8 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i3 = i2 + -20 | 0;
   HEAP32[i5 + 8 >> 2] = i3;
   i4 = i2 + -16 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if (!i2) i2 = i3; else {
    __ZdaPv(i2);
    i2 = HEAP32[i5 + 8 >> 2] | 0;
   }
   HEAP32[i4 >> 2] = 0;
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i5 + 4 >> 2] | 0;
 }
 __ZdlPv(i1);
 return;
}

function __ZN17VertexDeclaration3AddE13VertexElement(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = Math_imul(HEAPU8[i8 + 8 >> 0] | 0, HEAP32[540 + (HEAP32[i8 + 4 >> 2] << 2) >> 2] | 0) | 0;
 HEAP32[i9 + 24 >> 2] = i1 + (HEAP32[i9 + 24 >> 2] | 0);
 i1 = HEAP32[i9 + 12 >> 2] | 0;
 i2 = HEAP32[i9 + 8 >> 2] | 0;
 if (i1 >>> 0 >= i2 >>> 0 ? (i7 = i2 << 1 >>> 0 < 32 ? 32 : i2 << 1, i7 >>> 0 >= i2 >>> 0) : 0) {
  i6 = __Znaj(i7 >>> 0 > 82595524 ? -1 : i7 * 52 | 0) | 0;
  if (i7) {
   i1 = i6;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP8[i1 + 8 >> 0] = 0;
    HEAP8[i1 + 12 >> 0] = 0;
    HEAP8[i1 + 44 >> 0] = 0;
    HEAP32[i1 + 48 >> 2] = 0;
    i1 = i1 + 52 | 0;
   } while ((i1 | 0) != (i6 + (i7 * 52 | 0) | 0));
   i1 = HEAP32[i9 + 12 >> 2] | 0;
  }
  i5 = HEAP32[i9 >> 2] | 0;
  if (!i1) if (!i5) i1 = 0; else i3 = 13; else {
   i4 = 0;
   do {
    i2 = i6 + (i4 * 52 | 0) | 0;
    i3 = i5 + (i4 * 52 | 0) | 0;
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i2 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP8[i2 + 8 >> 0] = HEAP8[i3 + 8 >> 0] | 0;
    i2 = 0;
    do {
     i3 = HEAP8[i5 + (i4 * 52 | 0) + 12 + i2 >> 0] | 0;
     if (!(i3 << 24 >> 24)) break;
     HEAP8[i6 + (i4 * 52 | 0) + 12 + i2 >> 0] = i3;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < 32);
    HEAP8[i6 + (i4 * 52 | 0) + 12 + i2 >> 0] = 0;
    HEAP32[i6 + (i4 * 52 | 0) + 48 >> 2] = i2;
    i4 = i4 + 1 | 0;
   } while ((i4 | 0) != (i1 | 0));
   i3 = 13;
  }
  if ((i3 | 0) == 13) {
   __ZdaPv(i5);
   i1 = HEAP32[i9 + 12 >> 2] | 0;
  }
  HEAP32[i9 >> 2] = i6;
  HEAP32[i9 + 8 >> 2] = i7;
 }
 i3 = (HEAP32[i9 >> 2] | 0) + (i1 * 52 | 0) | 0;
 i1 = i8;
 i2 = i3 + 52 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 HEAP32[i9 + 12 >> 2] = (HEAP32[i9 + 12 >> 2] | 0) + 1;
 return;
}

function __ZN12FTGlyphCache12LoadFontFaceEPKci(i11, i10, i9) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = HEAP32[i11 + 8 >> 2] | 0;
 L1 : do if ((i1 | 0) != (i11 + 4 | 0)) {
  if (!i10) {
   i3 = i1;
   i2 = i1;
   while (1) {
    i1 = i3 + 8 | 0;
    i8 = HEAP32[i1 >> 2] | 0;
    if (!((i8 | 0) != 0 ? (HEAP8[i8 >> 0] | 0) != 0 : 0)) i12 = 17;
    if ((i12 | 0) == 17 ? (i12 = 0, (HEAP32[i3 + 24 >> 2] | 0) == (i9 | 0)) : 0) break;
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    i3 = i2;
    if ((i3 | 0) == (i11 + 4 | 0)) break L1;
   }
   STACKTOP = i13;
   return i1 | 0;
  } else {
   i8 = i1;
   i7 = i1;
  }
  while (1) {
   i1 = i7 + 8 | 0;
   i5 = HEAP32[i1 >> 2] | 0;
   L14 : do if ((i5 | 0) != (i10 | 0)) {
    i2 = HEAP8[i10 >> 0] | 0;
    if (!(i2 << 24 >> 24)) {
     if (!i5) {
      i12 = 13;
      break;
     }
     if (!(HEAP8[i5 >> 0] | 0)) {
      i12 = 13;
      break;
     } else i3 = 0;
    } else if (!i5) break; else i3 = i2;
    i4 = HEAP8[i5 >> 0] | 0;
    i2 = i3 << 24 >> 24 == 0;
    if (i4 << 24 >> 24) {
     i6 = i10;
     do {
      if (i2) break L14;
      i6 = i6 + 1 | 0;
      if (i4 << 24 >> 24 != i3 << 24 >> 24) break L14;
      i5 = i5 + 1 | 0;
      i3 = HEAP8[i6 >> 0] | 0;
      i4 = HEAP8[i5 >> 0] | 0;
      i2 = i3 << 24 >> 24 == 0;
     } while (i4 << 24 >> 24 != 0);
    }
    if (i2) i12 = 13;
   } else i12 = 13; while (0);
   if ((i12 | 0) == 13 ? (i12 = 0, (HEAP32[i7 + 24 >> 2] | 0) == (i9 | 0)) : 0) break;
   i8 = HEAP32[i8 + 4 >> 2] | 0;
   i7 = i8;
   if ((i7 | 0) == (i11 + 4 | 0)) break L1;
  }
  STACKTOP = i13;
  return i1 | 0;
 } while (0);
 __Z9File_OpenPKcS0_(i13, i10, 387182);
 i12 = __ZN12FTGlyphCache12LoadFontFaceER4Filei(i11, i13, i9) | 0;
 __ZN4FileD2Ev(i13);
 STACKTOP = i13;
 return i12 | 0;
}

function _ft_get_adobe_glyph_index(i8, i11) {
 i8 = i8 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0;
 if (!((i8 | 0) != 0 & i8 >>> 0 < i11 >>> 0)) {
  i12 = 0;
  return i12 | 0;
 }
 i2 = HEAP8[i8 >> 0] | 0;
 i6 = 52;
 i7 = 0;
 while (1) {
  i5 = i6 + i7 >> 1;
  i3 = 331185 + (HEAPU8[331185 + ((i5 << 1) + 2) >> 0] << 8 | HEAPU8[331185 + ((i5 << 1) + 3) >> 0]) | 0;
  i4 = HEAP8[i3 >> 0] | 0;
  if ((i4 & 127 | 0) == (i2 | 0)) break;
  i7 = (i4 & 127 | 0) < (i2 | 0) ? i5 + 1 | 0 : i7;
  i6 = (i4 & 127 | 0) < (i2 | 0) ? i6 : i5;
  if ((i7 | 0) >= (i6 | 0)) {
   i1 = 0;
   i9 = 16;
   break;
  }
 }
 if ((i9 | 0) == 16) return i1 | 0;
 L10 : do if ((i8 + 1 | 0) >>> 0 < i11 >>> 0) {
  i5 = i8 + 1 | 0;
  L11 : while (1) {
   i9 = HEAP8[i5 >> 0] | 0;
   i5 = i5 + 1 | 0;
   i1 = i3 + 1 | 0;
   i2 = HEAP8[i1 >> 0] | 0;
   L13 : do if (i4 << 24 >> 24 < 0) {
    if ((i9 | 0) != (i2 & 127 | 0)) {
     i1 = 0;
     i9 = 16;
     break L11;
    }
   } else {
    if (!(i2 & 127)) {
     i1 = 0;
     i9 = 16;
     break L11;
    }
    i4 = i2 & 127;
    i3 = i3 + (((i2 & 255) >>> 6 & 2) + 2) | 0;
    while (1) {
     i1 = 331185 + (HEAPU8[i3 >> 0] << 8 | HEAPU8[i3 + 1 >> 0]) | 0;
     i2 = HEAP8[i1 >> 0] | 0;
     if ((i9 | 0) == (i2 & 127 | 0)) break L13;
     if ((i4 | 0) > 1) {
      i4 = i4 + -1 | 0;
      i3 = i3 + 2 | 0;
     } else {
      i1 = 0;
      i9 = 16;
      break L11;
     }
    }
   } while (0);
   if (i5 >>> 0 >= i11 >>> 0) {
    i10 = i2;
    i12 = i1;
    break L10;
   } else {
    i4 = i2;
    i3 = i1;
   }
  }
  if ((i9 | 0) == 16) return i1 | 0;
 } else {
  i10 = i4;
  i12 = i3;
 } while (0);
 if (i10 << 24 >> 24 <= -1) {
  i12 = 0;
  return i12 | 0;
 }
 if ((HEAP8[i12 + 1 >> 0] | 0) >= 0) {
  i12 = 0;
  return i12 | 0;
 }
 i12 = HEAPU8[i12 + 2 >> 0] << 8 | HEAPU8[i12 + 3 >> 0];
 return i12 | 0;
}

function _T1_Parse_Glyph_And_Get_Char_String(i5, i6, i3) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i4 = HEAP32[(HEAP32[i1 + 128 >> 2] | 0) + 52 >> 2] | 0;
 HEAP32[i5 + 1376 >> 2] = HEAP32[i1 + 436 >> 2];
 HEAP32[i5 + 1376 + 4 >> 2] = HEAP32[i1 + 436 + 4 >> 2];
 HEAP32[i5 + 1376 + 8 >> 2] = HEAP32[i1 + 436 + 8 >> 2];
 HEAP32[i5 + 1376 + 12 >> 2] = HEAP32[i1 + 436 + 12 >> 2];
 i2 = HEAP32[i1 + 452 + 4 >> 2] | 0;
 HEAP32[i5 + 1392 >> 2] = HEAP32[i1 + 452 >> 2];
 HEAP32[i5 + 1392 + 4 >> 2] = i2;
 do if (i4) {
  i1 = FUNCTION_TABLE_iiii[HEAP32[HEAP32[i4 >> 2] >> 2] & 127](HEAP32[i4 + 4 >> 2] | 0, i6, i3) | 0;
  if (!i1) {
   i2 = HEAP32[i3 >> 2] | 0;
   i1 = HEAP32[i3 + 4 >> 2] | 0;
   break;
  } else {
   i6 = i1;
   STACKTOP = i7;
   return i6 | 0;
  }
 } else {
  i2 = HEAP32[(HEAP32[i1 + 424 >> 2] | 0) + (i6 << 2) >> 2] | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = HEAP32[(HEAP32[i1 + 428 >> 2] | 0) + (i6 << 2) >> 2] | 0;
  HEAP32[i3 + 4 >> 2] = i1;
 } while (0);
 i1 = FUNCTION_TABLE_iiii[HEAP32[i5 + 1484 >> 2] & 127](i5, i2, i1) | 0;
 if (!((i4 | 0) != 0 & (i1 | 0) == 0)) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] | 0)) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i7 >> 2] = (_FT_RoundFix(HEAP32[i5 + 32 >> 2] | 0) | 0) >> 16;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = (_FT_RoundFix(HEAP32[i5 + 40 >> 2] | 0) | 0) >> 16;
 HEAP32[i7 + 12 >> 2] = (_FT_RoundFix(HEAP32[i5 + 44 >> 2] | 0) | 0) >> 16;
 i6 = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 63](HEAP32[i4 + 4 >> 2] | 0, i6, 0, i7) | 0;
 HEAP32[i5 + 32 >> 2] = HEAP32[i7 >> 2] << 16;
 HEAP32[i5 + 40 >> 2] = HEAP32[i7 + 8 >> 2] << 16;
 HEAP32[i5 + 44 >> 2] = HEAP32[i7 + 12 >> 2] << 16;
 STACKTOP = i7;
 return i6 | 0;
}

function _FT_Request_Size(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 if (!i8) {
  i8 = 35;
  return i8 | 0;
 }
 if (!i3) {
  i8 = 6;
  return i8 | 0;
 }
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i6 | 0) < 0) {
  i8 = 6;
  return i8 | 0;
 }
 i4 = HEAP32[i3 + 8 >> 2] | 0;
 if ((i4 | 0) < 0) {
  i8 = 6;
  return i8 | 0;
 }
 i2 = HEAP32[i3 >> 2] | 0;
 if (i2 >>> 0 > 4) {
  i8 = 6;
  return i8 | 0;
 }
 i7 = HEAP32[(HEAP32[i8 + 96 >> 2] | 0) + 12 >> 2] | 0;
 i1 = HEAP32[i7 + 96 >> 2] | 0;
 if (i1) {
  i8 = FUNCTION_TABLE_iii[i1 & 255](HEAP32[i8 + 88 >> 2] | 0, i3) | 0;
  return i8 | 0;
 }
 i1 = HEAP32[i8 + 8 >> 2] | 0;
 if ((i1 & 3 | 0) != 2) {
  _FT_Request_Metrics(i8, i3);
  i8 = 0;
  return i8 | 0;
 }
 if (!(i1 & 2)) {
  i8 = 35;
  return i8 | 0;
 }
 if (i2) {
  i8 = 7;
  return i8 | 0;
 }
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 if (!i1) i2 = i6; else i2 = ((Math_imul(i1, i6) | 0) + 36 | 0) / 72 | 0;
 i1 = HEAP32[i3 + 16 >> 2] | 0;
 if (!i1) i1 = i4; else i1 = ((Math_imul(i4, i1) | 0) + 36 | 0) / 72 | 0;
 i4 = (i4 | 0) == 0 ? i2 : i1;
 i5 = ((i6 | 0) == 0 ? i4 : i2) + 32 | 0;
 i1 = ((i6 | 0) == 0 ? i1 : i4) + 32 | 0;
 i4 = HEAP32[i8 + 28 >> 2] | 0;
 if ((i4 | 0) <= 0) {
  i8 = 23;
  return i8 | 0;
 }
 i3 = HEAP32[i8 + 32 >> 2] | 0;
 i2 = 0;
 while (1) {
  if (((HEAP32[i3 + (i2 << 4) + 12 >> 2] | 0) + 32 ^ i1) >>> 0 <= 63 ? ((HEAP32[i3 + (i2 << 4) + 8 >> 2] | 0) + 32 ^ i5) >>> 0 <= 63 : 0) break;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) >= (i4 | 0)) {
   i1 = 23;
   i9 = 25;
   break;
  }
 }
 if ((i9 | 0) == 25) return i1 | 0;
 if (!((i2 | 0) > -1 & (i4 | 0) > (i2 | 0))) {
  i8 = 6;
  return i8 | 0;
 }
 i1 = HEAP32[i7 + 100 >> 2] | 0;
 if (!i1) {
  _FT_Select_Metrics(i8, i2);
  i8 = 0;
  return i8 | 0;
 } else {
  i8 = FUNCTION_TABLE_iii[i1 & 255](HEAP32[i8 + 88 >> 2] | 0, i2) | 0;
  return i8 | 0;
 }
 return 0;
}

function __ZN4math8float3x418InverseOrthonormalEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = HEAP32[i1 + 4 >> 2] | 0;
 i13 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = i13;
 HEAP32[i1 + 16 >> 2] = i11;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i12 = HEAP32[i1 + 32 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = i12;
 HEAP32[i1 + 32 >> 2] = i3;
 i4 = HEAP32[i1 + 24 >> 2] | 0;
 i10 = HEAP32[i1 + 36 >> 2] | 0;
 HEAP32[i1 + 24 >> 2] = i10;
 HEAP32[i1 + 36 >> 2] = i4;
 f9 = Math_fround(-Math_fround(HEAPF32[i1 + 12 >> 2]));
 f6 = Math_fround(-Math_fround(HEAPF32[i1 + 28 >> 2]));
 f5 = Math_fround(-Math_fround(HEAPF32[i1 + 44 >> 2]));
 f8 = Math_fround(Math_fround(HEAPF32[i1 >> 2]) * f9);
 f8 = Math_fround(f8 + Math_fround((HEAP32[tempDoublePtr >> 2] = i13, Math_fround(HEAPF32[tempDoublePtr >> 2])) * f6));
 f8 = Math_fround(f8 + Math_fround((HEAP32[tempDoublePtr >> 2] = i12, Math_fround(HEAPF32[tempDoublePtr >> 2])) * f5));
 f7 = Math_fround((HEAP32[tempDoublePtr >> 2] = i11, Math_fround(HEAPF32[tempDoublePtr >> 2])) * f9);
 f7 = Math_fround(f7 + Math_fround(Math_fround(HEAPF32[i1 + 20 >> 2]) * f6));
 f7 = Math_fround(f7 + Math_fround((HEAP32[tempDoublePtr >> 2] = i10, Math_fround(HEAPF32[tempDoublePtr >> 2])) * f5));
 f9 = Math_fround((HEAP32[tempDoublePtr >> 2] = i3, Math_fround(HEAPF32[tempDoublePtr >> 2])) * f9);
 f6 = Math_fround(f9 + Math_fround((HEAP32[tempDoublePtr >> 2] = i4, Math_fround(HEAPF32[tempDoublePtr >> 2])) * f6));
 __ZN4math6float3C2Efff(i2, f8, f7, Math_fround(f6 + Math_fround(Math_fround(HEAPF32[i1 + 40 >> 2]) * f5)));
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i3 = HEAP32[i2 + 8 >> 2] | 0;
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 28 >> 2] = i4;
 HEAP32[i1 + 44 >> 2] = i3;
 STACKTOP = i2;
 return;
}

function _tt_size_reset(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP8[i4 + 108 >> 0] = 0;
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 + 44 >> 2] = HEAP32[i4 + 12 >> 2];
 HEAP32[i4 + 44 + 4 >> 2] = HEAP32[i4 + 12 + 4 >> 2];
 HEAP32[i4 + 44 + 8 >> 2] = HEAP32[i4 + 12 + 8 >> 2];
 HEAP32[i4 + 44 + 12 >> 2] = HEAP32[i4 + 12 + 12 >> 2];
 HEAP32[i4 + 44 + 16 >> 2] = HEAP32[i4 + 12 + 16 >> 2];
 HEAP32[i4 + 44 + 20 >> 2] = HEAP32[i4 + 12 + 20 >> 2];
 HEAP32[i4 + 44 + 24 >> 2] = HEAP32[i4 + 12 + 24 >> 2];
 i3 = HEAP16[i4 + 44 >> 1] | 0;
 if (!(i3 << 16 >> 16)) {
  i4 = 151;
  return i4 | 0;
 }
 i1 = HEAP16[i4 + 46 >> 1] | 0;
 if (!(i1 << 16 >> 16)) {
  i4 = 151;
  return i4 | 0;
 }
 if (HEAP16[i2 + 176 >> 1] & 8) {
  HEAP32[i4 + 48 >> 2] = _FT_DivFix((i3 & 65535) << 6, HEAPU16[i2 + 68 >> 1] | 0) | 0;
  i3 = _FT_DivFix(HEAPU16[i4 + 46 >> 1] << 6, HEAPU16[i2 + 68 >> 1] | 0) | 0;
  HEAP32[i4 + 52 >> 2] = i3;
  HEAP32[i4 + 56 >> 2] = (_FT_MulFix(HEAP16[i2 + 70 >> 1] | 0, i3) | 0) + 32 & -64;
  HEAP32[i4 + 60 >> 2] = (_FT_MulFix(HEAP16[i2 + 72 >> 1] | 0, HEAP32[i4 + 52 >> 2] | 0) | 0) + 32 & -64;
  HEAP32[i4 + 64 >> 2] = (_FT_MulFix(HEAP16[i2 + 74 >> 1] | 0, HEAP32[i4 + 52 >> 2] | 0) | 0) + 32 & -64;
  HEAP32[i4 + 68 >> 2] = (_FT_MulFix(HEAP16[i2 + 76 >> 1] | 0, HEAP32[i4 + 48 >> 2] | 0) | 0) + 32 & -64;
  i3 = HEAP16[i4 + 44 >> 1] | 0;
  i1 = HEAP16[i4 + 46 >> 1] | 0;
 }
 if ((i3 & 65535) < (i1 & 65535)) {
  HEAP32[i4 + 88 >> 2] = HEAP32[i4 + 52 >> 2];
  HEAP16[i4 + 80 >> 1] = i1;
  HEAP32[i4 + 72 >> 2] = _FT_MulDiv(i3 & 65535, 65536, i1 & 65535) | 0;
  i1 = 65536;
 } else {
  HEAP32[i4 + 88 >> 2] = HEAP32[i4 + 48 >> 2];
  HEAP16[i4 + 80 >> 1] = i3;
  HEAP32[i4 + 72 >> 2] = 65536;
  i1 = _FT_MulDiv(i1 & 65535, 65536, i3 & 65535) | 0;
 }
 HEAP32[i4 + 76 >> 2] = i1;
 HEAP8[i4 + 301 >> 0] = 0;
 HEAP8[i4 + 108 >> 0] = 1;
 i4 = 0;
 return i4 | 0;
}

function __ZN5ArrayI6String9StdCAllocEaSERKS2_(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if ((i7 | 0) == (i6 | 0)) return i7 | 0;
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 i1 = HEAP32[i6 + 12 >> 2] | 0;
 i5 = i1 >>> 0 < 32 ? 32 : i1;
 if (i5 >>> 0 < (HEAP32[i7 + 8 >> 2] | 0) >>> 0) i4 = i7 + 12 | 0; else {
  i4 = __Znaj(i5 >>> 0 > 268435455 | i5 << 4 >>> 0 > 4294967291 ? -1 : (i5 << 4) + 4 | 0) | 0;
  HEAP32[i4 >> 2] = i5;
  if (i5) {
   i1 = i4 + 4 | 0;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    i1 = i1 + 16 | 0;
   } while ((i1 | 0) != (i4 + 4 + (i5 << 4) | 0));
  }
  if (HEAP32[i7 + 12 >> 2] | 0) {
   i1 = 0;
   do {
    __ZN6StringaSERKS_(i4 + 4 + (i1 << 4) | 0, (HEAP32[i7 >> 2] | 0) + (i1 << 4) | 0) | 0;
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < (HEAP32[i7 + 12 >> 2] | 0) >>> 0);
  }
  i3 = HEAP32[i7 >> 2] | 0;
  if (i3) {
   i1 = HEAP32[i3 + -4 >> 2] | 0;
   if (i1) {
    i1 = i3 + (i1 << 4) | 0;
    do {
     i1 = i1 + -16 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     if (i2) __ZdaPv(i2);
     HEAP32[i1 >> 2] = 0;
    } while ((i1 | 0) != (i3 | 0));
   }
   __ZdaPv(i3 + -4 | 0);
  }
  HEAP32[i7 >> 2] = i4 + 4;
  HEAP32[i7 + 8 >> 2] = i5;
  i4 = i7 + 12 | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
 }
 if (!i1) i1 = 0; else {
  i3 = 0;
  do {
   i1 = (HEAP32[i7 >> 2] | 0) + (i3 << 4) | 0;
   i2 = (HEAP32[i6 >> 2] | 0) + (i3 << 4) | 0;
   if (i3 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0) __ZN6StringaSERKS_(i1, i2) | 0; else {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    __ZN6String3SetEPKc(i1, HEAP32[i2 >> 2] | 0);
   }
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i6 + 12 >> 2] | 0;
  } while (i3 >>> 0 < i1 >>> 0);
 }
 HEAP32[i4 >> 2] = i1;
 return i7 | 0;
}

function _FT_Raccess_Guess(i6, i9, i3, i7, i8, i4) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i10 = 0;
 if (!i9) {
  HEAP32[i7 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 >> 2] = _raccess_guess_apple_double(i6, 0, i3, i7, i8) | 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = _raccess_guess_apple_single(i6, 0, i3, i7 + 4 | 0, i8 + 4 | 0) | 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = _raccess_guess_darwin_ufs_export(i6, 0, i3, i7 + 8 | 0, i8 + 8 | 0) | 0;
  HEAP32[i7 + 12 >> 2] = 0;
  HEAP32[i4 + 12 >> 2] = 0;
  HEAP32[i4 + 12 >> 2] = _raccess_guess_darwin_newvfs(i6, 0, i3, i7 + 12 | 0, i8 + 12 | 0) | 0;
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i4 + 16 >> 2] = _raccess_guess_darwin_hfsplus(i6, 0, i3, i7 + 16 | 0, i8 + 16 | 0) | 0;
  HEAP32[i7 + 20 >> 2] = 0;
  HEAP32[i4 + 20 >> 2] = 0;
  HEAP32[i4 + 20 >> 2] = _raccess_guess_vfat(i6, 0, i3, i7 + 20 | 0, i8 + 20 | 0) | 0;
  HEAP32[i7 + 24 >> 2] = 0;
  HEAP32[i4 + 24 >> 2] = 0;
  HEAP32[i4 + 24 >> 2] = _raccess_guess_linux_cap(i6, 0, i3, i7 + 24 | 0, i8 + 24 | 0) | 0;
  HEAP32[i7 + 28 >> 2] = 0;
  HEAP32[i4 + 28 >> 2] = 0;
  HEAP32[i4 + 28 >> 2] = _raccess_guess_linux_double(i6, 0, i3, i7 + 28 | 0, i8 + 28 | 0) | 0;
  HEAP32[i7 + 32 >> 2] = 0;
  HEAP32[i4 + 32 >> 2] = 0;
  HEAP32[i4 + 32 >> 2] = _raccess_guess_linux_netatalk(i6, 0, i3, i7 + 32 | 0, i8 + 32 | 0) | 0;
  return;
 } else i5 = 0;
 do {
  i1 = i7 + (i5 << 2) | 0;
  HEAP32[i1 >> 2] = 0;
  i10 = _FT_Stream_Seek(i9, 0) | 0;
  i2 = i4 + (i5 << 2) | 0;
  HEAP32[i2 >> 2] = i10;
  if (!i10) HEAP32[i2 >> 2] = FUNCTION_TABLE_iiiiii[HEAP32[262976 + (i5 << 3) >> 2] & 63](i6, i9, i3, i1, i8 + (i5 << 2) | 0) | 0;
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != 9);
 return;
}

function _af_hint_normal_stem(i2, i10, i11, i9, i1) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, i13 = 0;
 i6 = (HEAP32[i2 + 104 >> 2] & 4 | 0) == 0;
 do if (i6) {
  if ((HEAP8[i10 + 12 >> 0] & 1) != 0 ? (HEAP8[i11 + 12 >> 0] & 1) != 0 : 0) {
   i5 = (i1 | 0) == 1 ? 55 : 49;
   break;
  }
  i5 = (i1 | 0) == 1 ? 61 : 59;
 } else i5 = 64; while (0);
 i7 = HEAP32[i11 + 4 >> 2] | 0;
 i8 = HEAP32[i10 + 4 >> 2] | 0;
 i4 = _af_cjk_compute_stem_width(i2, i1, i7 - i8 | 0) | 0;
 i1 = ((i8 + i7 | 0) / 2 | 0) + i9 + ((i4 | 0) / -2 | 0) & 63;
 i2 = ((i8 + i7 | 0) / 2 | 0) + i9 + ((i4 | 0) / -2 | 0) + i4 & 63;
 do if ((i1 | 0) == 0 | (i2 | 0) == 0) i1 = 0; else {
  if ((i4 | 0) <= (i5 | 0)) {
   if ((i2 | 0) >= (i4 | 0)) {
    i1 = 0;
    break;
   }
   i1 = (64 - i1 | 0) >>> 0 > i2 >>> 0 ? 0 - i2 | 0 : 64 - i1 | 0;
   break;
  }
  if (i5 >>> 0 < 64 ? !((64 - i2 | 0) >>> 0 < i5 >>> 0 & (i5 >>> 0 > i2 >>> 0 & (i1 >>> 0 < i5 >>> 0 & i5 >>> 0 > (64 - i1 | 0) >>> 0))) : 0) {
   i1 = 0;
   break;
  }
  if ((i4 & 63) >>> 0 < 32) if ((64 - i1 | 0) >>> 0 > (i4 & 63) >>> 0 & i2 >>> 0 > (i4 & 63) >>> 0) i3 = i4 & 63; else {
   i1 = 0;
   break;
  } else i3 = 64 - i5 | 0;
  i13 = i5 - (64 - i1) | 0;
  i1 = 64 - i1 - i3 | 0;
  i12 = i5 - i2 | 0;
  i5 = i2 - i3 | 0;
  i1 = (i13 | 0) > (i1 | 0) ? i1 : 0 - i13 | 0;
  i5 = (i5 | 0) > (i12 | 0) ? i12 : 0 - i5 | 0;
  i1 = (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0) > (((i5 | 0) < 0 ? 0 - i5 | 0 : i5) | 0) ? i5 : i1;
 } while (0);
 if (i6) if ((i1 | 0) > 14) i1 = 14; else i1 = (i1 | 0) < -14 ? -14 : i1;
 i13 = i1 + (((i8 + i7 | 0) / 2 | 0) + i9 + ((i4 | 0) / -2 | 0)) | 0;
 HEAP32[i10 + 8 >> 2] = (i7 | 0) > (i8 | 0) ? i13 : i13 + i4 | 0;
 HEAP32[i11 + 8 >> 2] = (i7 | 0) > (i8 | 0) ? i13 + i4 | 0 : i13;
 return i1 | 0;
}

function __ZN6Shader14LoadFromStringE10ShaderTypePKcS2_S2_S2_(i5, i8, i3, i7, i1, i2, i6) {
 i5 = i5 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i4 = 0, i9 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 HEAP32[i8 + 4 >> 2] = i3;
 HEAP32[i4 + 32 >> 2] = 0;
 HEAP32[i4 + 32 + 4 >> 2] = 0;
 HEAP32[i4 + 32 + 8 >> 2] = 0;
 HEAP32[i4 + 32 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i4 + 32 | 0, i7);
 __Z25TranslateShaderCodeString10ShaderType6String(i4 + 48 | 0, 0, i4 + 32 | 0);
 i1 = HEAP32[i4 + 32 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i4 + 32 >> 2] = 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 switch (i1 | 0) {
 case 1:
  {
   i1 = 35633;
   break;
  }
 case 2:
  {
   i1 = 35632;
   break;
  }
 default:
  {
   HEAP32[i4 >> 2] = i1;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297894, i4);
   i1 = 0;
  }
 }
 i3 = HEAP32[i4 + 48 >> 2] | 0;
 HEAP32[i4 + 64 >> 2] = i3;
 i2 = _glCreateShader(i1 | 0) | 0;
 do if (i2) {
  _glShaderSource(i2 | 0, 1, i4 + 64 | 0, 0);
  _glCompileShader(i2 | 0);
  if (__Z24PrintShaderCompileErrorsjjPKcS0_(i2, i1, HEAP32[i4 + 64 >> 2] | 0, i6) | 0) {
   HEAP32[i8 + 24 >> 2] = i2;
   __ZN6Shader17ReflectShaderCodeEPKc(i8, i7);
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 4 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   HEAP32[i5 + 12 >> 2] = 0;
   HEAP32[i5 + 16 >> 2] = 0;
   break;
  } else {
   _glDeleteShader(i2 | 0);
   i9 = 10;
   break;
  }
 } else {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297871, i4 + 8 | 0);
  i9 = 10;
 } while (0);
 if ((i9 | 0) == 10) {
  HEAP32[i8 + 24 >> 2] = 0;
  HEAP32[i4 + 16 >> 2] = i6;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 298182, i4 + 16 | 0);
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i5, 298225, 298116, 285, -2147467259, 298323, i4 + 24 | 0);
 }
 if (!i3) {
  STACKTOP = i4;
  return;
 }
 __ZdaPv(i3);
 STACKTOP = i4;
 return;
}

function ___fdopen(i6, i3) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i2 = HEAP8[i3 >> 0] | 0;
 if (_memchr(390116, i2 << 24 >> 24, 4) | 0) {
  i1 = _malloc(1144) | 0;
  if (!i1) i1 = 0; else {
   i4 = i1;
   i5 = i4 + 112 | 0;
   do {
    HEAP32[i4 >> 2] = 0;
    i4 = i4 + 4 | 0;
   } while ((i4 | 0) < (i5 | 0));
   if (!(_strchr(i3, 43) | 0)) HEAP32[i1 >> 2] = i2 << 24 >> 24 == 114 ? 8 : 4;
   if (_strchr(i3, 101) | 0) {
    HEAP32[i7 >> 2] = i6;
    HEAP32[i7 + 4 >> 2] = 2;
    HEAP32[i7 + 8 >> 2] = 1;
    ___syscall221(221, i7 | 0) | 0;
    i2 = HEAP8[i3 >> 0] | 0;
   }
   if (i2 << 24 >> 24 == 97) {
    HEAP32[i7 + 16 >> 2] = i6;
    HEAP32[i7 + 16 + 4 >> 2] = 3;
    i2 = ___syscall221(221, i7 + 16 | 0) | 0;
    if (!(i2 & 1024)) {
     HEAP32[i7 + 24 >> 2] = i6;
     HEAP32[i7 + 24 + 4 >> 2] = 4;
     HEAP32[i7 + 24 + 8 >> 2] = i2 | 1024;
     ___syscall221(221, i7 + 24 | 0) | 0;
    }
    i2 = HEAP32[i1 >> 2] | 128;
    HEAP32[i1 >> 2] = i2;
   } else i2 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 + 60 >> 2] = i6;
   HEAP32[i1 + 44 >> 2] = i1 + 120;
   HEAP32[i1 + 48 >> 2] = 1024;
   HEAP8[i1 + 75 >> 0] = -1;
   if ((i2 & 8 | 0) == 0 ? (HEAP32[i7 + 40 >> 2] = i6, HEAP32[i7 + 40 + 4 >> 2] = 21505, HEAP32[i7 + 40 + 8 >> 2] = i7 + 52, (___syscall54(54, i7 + 40 | 0) | 0) == 0) : 0) HEAP8[i1 + 75 >> 0] = 10;
   HEAP32[i1 + 32 >> 2] = 70;
   HEAP32[i1 + 36 >> 2] = 42;
   HEAP32[i1 + 40 >> 2] = 43;
   HEAP32[i1 + 12 >> 2] = 53;
   if (!(HEAP32[70348] | 0)) HEAP32[i1 + 76 >> 2] = -1;
   ___lock(281416);
   i2 = HEAP32[70353] | 0;
   HEAP32[i1 + 56 >> 2] = i2;
   if (i2) HEAP32[i2 + 52 >> 2] = i1;
   HEAP32[70353] = i1;
   ___unlock(281416);
  }
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i1 = 0;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _ft_var_readpackedpoints(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = HEAP32[i8 + 28 >> 2] | 0;
 HEAP32[i9 >> 2] = 0;
 i1 = _FT_Stream_GetChar(i8) | 0;
 HEAP32[i2 >> 2] = i1 & 255;
 if (!(i1 << 24 >> 24)) {
  i8 = -1;
  STACKTOP = i9;
  return i8 | 0;
 }
 if (!(i1 & 128)) i7 = i1 & 255; else i7 = (_FT_Stream_GetChar(i8) | 0) & 255 | (i1 & 255) << 8 & 32512;
 i1 = _ft_mem_realloc(i3, 2, 0, i7, 0, i9) | 0;
 if (HEAP32[i9 >> 2] | 0) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if ((i7 | 0) > 0) i2 = 0; else {
  i8 = i1;
  STACKTOP = i9;
  return i8 | 0;
 }
 while (1) {
  i6 = _FT_Stream_GetChar(i8) | 0;
  if (!(i6 & 128)) {
   i3 = _FT_Stream_GetChar(i8) | 0;
   i5 = i2 + 1 | 0;
   HEAP16[i1 + (i2 << 1) >> 1] = i3 & 255;
   if (!(i6 << 24 >> 24 != 0 & ((i6 & 255) + i5 | 0) < (i7 | 0))) {
    i2 = 15;
    break;
   }
   i2 = i3 & 255;
   i3 = i5;
   i4 = 0;
   while (1) {
    i2 = ((_FT_Stream_GetChar(i8) | 0) & 255) + i2 | 0;
    HEAP16[i1 + (i3 << 1) >> 1] = i2;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i6 & 255 | 0)) {
     i2 = (i6 & 255) + i5 | 0;
     break;
    } else i3 = i3 + 1 | 0;
   }
  } else {
   i3 = _FT_Stream_GetUShort(i8) | 0;
   i5 = i2 + 1 | 0;
   HEAP16[i1 + (i2 << 1) >> 1] = i3;
   if (!((i6 & 127 | 0) != 0 & ((i6 & 127) + i5 | 0) < (i7 | 0))) {
    i2 = 15;
    break;
   }
   i2 = i3 & 65535;
   i3 = i5;
   i4 = 0;
   while (1) {
    i2 = ((_FT_Stream_GetUShort(i8) | 0) & 65535) + i2 | 0;
    HEAP16[i1 + (i3 << 1) >> 1] = i2;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i6 & 127 | 0)) break; else i3 = i3 + 1 | 0;
   }
   i2 = i5 + (i6 & 127) | 0;
  }
  if ((i2 | 0) >= (i7 | 0)) {
   i2 = 15;
   break;
  }
 }
 if ((i2 | 0) == 15) {
  STACKTOP = i9;
  return i1 | 0;
 }
 return 0;
}

function __ZN5ArrayI6String9StdCAllocEC2ERKS2_(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 i5 = HEAP32[i6 + 8 >> 2] | 0;
 i5 = i5 >>> 0 < 32 ? 32 : i5;
 i4 = __Znaj(i5 >>> 0 > 268435455 | i5 << 4 >>> 0 > 4294967291 ? -1 : (i5 << 4) + 4 | 0) | 0;
 HEAP32[i4 >> 2] = i5;
 if (i5) {
  i1 = i4 + 4 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   i1 = i1 + 16 | 0;
  } while ((i1 | 0) != (i4 + 4 + (i5 << 4) | 0));
  if (HEAP32[i7 + 12 >> 2] | 0) {
   i1 = 0;
   do {
    __ZN6StringaSERKS_(i4 + 4 + (i1 << 4) | 0, (HEAP32[i7 >> 2] | 0) + (i1 << 4) | 0) | 0;
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < (HEAP32[i7 + 12 >> 2] | 0) >>> 0);
  }
 }
 i3 = HEAP32[i7 >> 2] | 0;
 if (i3) {
  i1 = HEAP32[i3 + -4 >> 2] | 0;
  if (i1) {
   i1 = i3 + (i1 << 4) | 0;
   do {
    i1 = i1 + -16 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2) __ZdaPv(i2);
    HEAP32[i1 >> 2] = 0;
   } while ((i1 | 0) != (i3 | 0));
  }
  __ZdaPv(i3 + -4 | 0);
 }
 HEAP32[i7 >> 2] = i4 + 4;
 HEAP32[i7 + 8 >> 2] = i5;
 if (!(HEAP32[i6 + 12 >> 2] | 0)) {
  i6 = 0;
  HEAP32[i7 + 12 >> 2] = i6;
  return;
 }
 i1 = i4 + 4 | 0;
 i3 = 0;
 while (1) {
  i1 = i1 + (i3 << 4) | 0;
  i2 = (HEAP32[i6 >> 2] | 0) + (i3 << 4) | 0;
  if (i3 >>> 0 < (HEAP32[i7 + 12 >> 2] | 0) >>> 0) __ZN6StringaSERKS_(i1, i2) | 0; else {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i1, HEAP32[i2 >> 2] | 0);
  }
  i2 = i3 + 1 | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  if (i2 >>> 0 >= i1 >>> 0) break;
  i1 = HEAP32[i7 >> 2] | 0;
  i3 = i2;
 }
 HEAP32[i7 + 12 >> 2] = i1;
 return;
}

function _T1_Face_Done(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) return;
 i2 = HEAP32[i3 + 100 >> 2] | 0;
 i1 = HEAP32[i3 + 548 >> 2] | 0;
 if (i1) {
  _ft_mem_free(i2, i1);
  HEAP32[i3 + 548 >> 2] = 0;
  HEAP32[i3 + 544 >> 2] = 0;
 }
 _T1_Done_Blend(i3);
 HEAP32[i3 + 532 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 132 >> 2] | 0);
 HEAP32[i3 + 132 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 136 >> 2] | 0);
 HEAP32[i3 + 136 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 140 >> 2] | 0);
 HEAP32[i3 + 140 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 144 >> 2] | 0);
 HEAP32[i3 + 144 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 148 >> 2] | 0);
 HEAP32[i3 + 148 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 428 >> 2] | 0);
 HEAP32[i3 + 428 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 424 >> 2] | 0);
 HEAP32[i3 + 424 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 420 >> 2] | 0);
 HEAP32[i3 + 420 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 408 >> 2] | 0);
 HEAP32[i3 + 408 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 412 >> 2] | 0);
 HEAP32[i3 + 412 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 392 >> 2] | 0);
 HEAP32[i3 + 392 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 396 >> 2] | 0);
 HEAP32[i3 + 396 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 400 >> 2] | 0);
 HEAP32[i3 + 400 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 372 + 12 >> 2] | 0);
 HEAP32[i3 + 372 + 12 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 372 + 16 >> 2] | 0);
 HEAP32[i3 + 372 + 16 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 364 >> 2] | 0);
 HEAP32[i3 + 364 >> 2] = 0;
 i1 = HEAP32[i3 + 492 >> 2] | 0;
 if (i1) {
  _ft_mem_free(i2, HEAP32[i1 + 36 >> 2] | 0);
  HEAP32[i1 + 36 >> 2] = 0;
  HEAP32[i1 + 40 >> 2] = 0;
  _ft_mem_free(i2, HEAP32[i1 + 28 >> 2] | 0);
  HEAP32[i1 + 28 >> 2] = 0;
  HEAP32[i1 + 32 >> 2] = 0;
  _ft_mem_free(i2, i1);
 }
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 return;
}

function _tt_face_get_ps_name(i5, i2, i4) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 if (!i5) {
  i5 = 35;
  return i5 | 0;
 }
 if ((HEAPU16[i5 + 264 >> 1] | 0) >>> 0 <= i2 >>> 0) {
  i5 = 16;
  return i5 | 0;
 }
 i3 = HEAP32[i5 + 536 >> 2] | 0;
 if (!i3) {
  i5 = 7;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[i3 + 16 >> 2] & 63](0) | 0;
 i1 = HEAP32[i5 + 468 >> 2] | 0;
 if ((i1 | 0) < 131072) {
  switch (i1 | 0) {
  case 65536:
   break;
  default:
   {
    i5 = 0;
    return i5 | 0;
   }
  }
  if (i2 >>> 0 >= 258) {
   i5 = 0;
   return i5 | 0;
  }
  HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[i3 + 16 >> 2] & 63](i2) | 0;
  i5 = 0;
  return i5 | 0;
 }
 if ((i1 | 0) >= 163840) {
  switch (i1 | 0) {
  case 163840:
   break;
  default:
   {
    i5 = 0;
    return i5 | 0;
   }
  }
  if ((HEAP8[i5 + 628 >> 0] | 0) == 0 ? (_load_post_names(i5) | 0) != 0 : 0) {
   i5 = 0;
   return i5 | 0;
  }
  if ((HEAPU16[i5 + 632 >> 1] | 0) >>> 0 <= i2 >>> 0) {
   i5 = 0;
   return i5 | 0;
  }
  HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[i3 + 16 >> 2] & 63]((HEAP8[(HEAP32[i5 + 636 >> 2] | 0) + i2 >> 0] | 0) + i2 | 0) | 0;
  i5 = 0;
  return i5 | 0;
 }
 switch (i1 | 0) {
 case 131072:
  break;
 default:
  {
   i5 = 0;
   return i5 | 0;
  }
 }
 if ((HEAP8[i5 + 628 >> 0] | 0) == 0 ? (_load_post_names(i5) | 0) != 0 : 0) {
  i5 = 0;
  return i5 | 0;
 }
 if ((HEAPU16[i5 + 632 >> 1] | 0) >>> 0 <= i2 >>> 0) {
  i5 = 0;
  return i5 | 0;
 }
 i1 = HEAP16[(HEAP32[i5 + 636 >> 2] | 0) + (i2 << 1) >> 1] | 0;
 if ((i1 & 65535) < 258) {
  HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[i3 + 16 >> 2] & 63](i1 & 65535) | 0;
  i5 = 0;
  return i5 | 0;
 } else {
  HEAP32[i4 >> 2] = HEAP32[(HEAP32[i5 + 640 >> 2] | 0) + ((i1 & 65535) + -258 << 2) >> 2];
  i5 = 0;
  return i5 | 0;
 }
 return 0;
}

function _ps_tofixedarray(i10, i8, i5, i6, i9) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 HEAP32[i11 >> 2] = i1;
 L1 : do if (i1 >>> 0 < i8 >>> 0) {
  i7 = HEAP8[i1 >> 0] | 0;
  i7 = i7 << 24 >> 24 == 91 ? 93 : i7 << 24 >> 24 == 123 ? 125 : 0;
  if (i7 << 24 >> 24) {
   HEAP32[i11 >> 2] = i1 + 1;
   i2 = i1 + 1 | 0;
   i1 = i1 + 1 | 0;
  } else i2 = i1;
  L6 : do if (!i6) {
   i4 = i1;
   i1 = 0;
   while (1) {
    if (i4 >>> 0 >= i8 >>> 0) break L1;
    _skip_spaces(i11, i8);
    i2 = HEAP32[i11 >> 2] | 0;
    if (i2 >>> 0 >= i8 >>> 0) break L1;
    if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) break L6;
    _PS_Conv_ToFixed(i11, i8, i9) | 0;
    i4 = HEAP32[i11 >> 2] | 0;
    i3 = i4;
    if ((i2 | 0) == (i4 | 0)) {
     i2 = i3;
     i1 = -1;
     break L1;
    }
    i1 = i1 + 1 | 0;
    if (!(i7 << 24 >> 24)) {
     i2 = i3;
     break L1;
    } else i2 = i3;
   }
  } else {
   i4 = i1;
   i1 = 0;
   while (1) {
    if (i4 >>> 0 >= i8 >>> 0) break L1;
    _skip_spaces(i11, i8);
    i3 = HEAP32[i11 >> 2] | 0;
    if (i3 >>> 0 >= i8 >>> 0) {
     i2 = i3;
     break L1;
    }
    if ((HEAP8[i3 >> 0] | 0) == i7 << 24 >> 24) {
     i2 = i3;
     break L6;
    }
    if ((i1 | 0) >= (i5 | 0)) {
     i2 = i3;
     break L1;
    }
    HEAP32[i6 + (i1 << 2) >> 2] = _PS_Conv_ToFixed(i11, i8, i9) | 0;
    i4 = HEAP32[i11 >> 2] | 0;
    i2 = i4;
    if ((i3 | 0) == (i4 | 0)) {
     i1 = -1;
     break L1;
    }
    i1 = i1 + 1 | 0;
    if (!(i7 << 24 >> 24)) break L1;
   }
  } while (0);
  i2 = i2 + 1 | 0;
  HEAP32[i11 >> 2] = i2;
 } else {
  i2 = i1;
  i1 = 0;
 } while (0);
 HEAP32[i10 >> 2] = i2;
 STACKTOP = i11;
 return i1 | 0;
}

function _bdf_get_bdf_property(i1, i9, i11) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i8 = HEAP32[i1 + 140 >> 2] | 0;
 if (!i8) {
  i11 = 6;
  return i11 | 0;
 }
 if ((i9 | 0) == 0 | (HEAP32[i8 + 72 >> 2] | 0) == 0) {
  i11 = 6;
  return i11 | 0;
 }
 i7 = HEAP8[i9 >> 0] | 0;
 if (!(i7 << 24 >> 24)) {
  i11 = 6;
  return i11 | 0;
 }
 i2 = HEAP32[i8 + 128 >> 2] | 0;
 i6 = HEAP32[i2 + 12 >> 2] | 0;
 i3 = i7;
 i4 = i9;
 i1 = 0;
 while (1) {
  i4 = i4 + 1 | 0;
  i5 = (i1 * 31 | 0) + (i3 << 24 >> 24) | 0;
  i3 = HEAP8[i4 >> 0] | 0;
  if (!(i3 << 24 >> 24)) break; else i1 = i5;
 }
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = HEAP32[i6 + (((i5 >>> 0) % (i4 >>> 0) | 0) << 2) >> 2] | 0;
 if (!i1) {
  i11 = 6;
  return i11 | 0;
 }
 i3 = i6 + (((i5 >>> 0) % (i4 >>> 0) | 0) << 2) | 0;
 while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24 ? (_strcmp(i2, i9) | 0) == 0 : 0) break;
  i1 = i3 + -4 | 0;
  i3 = i1 >>> 0 < i6 >>> 0 ? i6 + (i4 + -1 << 2) | 0 : i1;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) {
   i1 = 6;
   i10 = 16;
   break;
  }
 }
 if ((i10 | 0) == 16) return i1 | 0;
 i2 = HEAP32[i8 + 80 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 if (!(i2 + (i1 << 4) | 0)) {
  i11 = 6;
  return i11 | 0;
 }
 switch (HEAP32[i2 + (i1 << 4) + 4 >> 2] | 0) {
 case 1:
  {
   HEAP32[i11 >> 2] = 1;
   HEAP32[i11 + 4 >> 2] = HEAP32[i2 + (i1 << 4) + 12 >> 2];
   i11 = 0;
   return i11 | 0;
  }
 case 2:
  {
   HEAP32[i11 >> 2] = 2;
   HEAP32[i11 + 4 >> 2] = HEAP32[i2 + (i1 << 4) + 12 >> 2];
   i11 = 0;
   return i11 | 0;
  }
 case 3:
  {
   HEAP32[i11 >> 2] = 3;
   HEAP32[i11 + 4 >> 2] = HEAP32[i2 + (i1 << 4) + 12 >> 2];
   i11 = 0;
   return i11 | 0;
  }
 default:
  {
   i11 = 6;
   return i11 | 0;
  }
 }
 return 0;
}

function _ps_table_add(i13, i11, i1, i12) {
 i13 = i13 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i11 | 0) < 0) {
  i13 = 6;
  STACKTOP = i14;
  return i13 | 0;
 }
 if ((i12 | 0) < 0 ? 1 : (HEAP32[i13 + 16 >> 2] | 0) <= (i11 | 0)) {
  i13 = 6;
  STACKTOP = i14;
  return i13 | 0;
 }
 i3 = (HEAP32[i13 + 4 >> 2] | 0) + i12 | 0;
 i2 = HEAP32[i13 + 8 >> 2] | 0;
 if (i3 >>> 0 > i2 >>> 0) {
  i10 = HEAP32[i13 >> 2] | 0;
  i9 = (i1 - i10 | 0) > -1 & (i1 - i10 | 0) >>> 0 < i2 >>> 0 ? i1 - i10 | 0 : -1;
  do i2 = i2 + 1024 + (i2 >>> 2) & -1024; while (i2 >>> 0 < i3 >>> 0);
  i8 = HEAP32[i13 + 32 >> 2] | 0;
  i3 = _ft_mem_alloc(i8, i2, i14) | 0;
  HEAP32[i13 >> 2] = i3;
  i4 = HEAP32[i14 >> 2] | 0;
  if (i4) {
   HEAP32[i13 >> 2] = i10;
   i13 = i4;
   STACKTOP = i14;
   return i13 | 0;
  }
  if (i10) {
   _memcpy(i3 | 0, i10 | 0, HEAP32[i13 + 8 >> 2] | 0) | 0;
   i6 = HEAP32[i13 + 16 >> 2] | 0;
   i7 = HEAP32[i13 + 24 >> 2] | 0;
   i3 = (HEAP32[i13 >> 2] | 0) - i10 | 0;
   if ((i6 | 0) > 0) {
    i5 = i7;
    do {
     i4 = HEAP32[i5 >> 2] | 0;
     if (i4) HEAP32[i5 >> 2] = i4 + i3;
     i5 = i5 + 4 | 0;
    } while (i5 >>> 0 < (i7 + (i6 << 2) | 0) >>> 0);
   }
   _ft_mem_free(i8, i10);
  }
  HEAP32[i13 + 8 >> 2] = i2;
  if ((i9 | 0) > -1) i1 = (HEAP32[i13 >> 2] | 0) + i9 | 0;
 }
 HEAP32[(HEAP32[i13 + 24 >> 2] | 0) + (i11 << 2) >> 2] = (HEAP32[i13 >> 2] | 0) + (HEAP32[i13 + 4 >> 2] | 0);
 HEAP32[(HEAP32[i13 + 28 >> 2] | 0) + (i11 << 2) >> 2] = i12;
 _memcpy((HEAP32[i13 >> 2] | 0) + (HEAP32[i13 + 4 >> 2] | 0) | 0, i1 | 0, i12 | 0) | 0;
 HEAP32[i13 + 4 >> 2] = (HEAP32[i13 + 4 >> 2] | 0) + i12;
 i13 = 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _af_cjk_hints_compute_blue_edges(i13, i14, i11) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0;
 i8 = HEAP32[i13 + 44 + (i11 * 28 | 0) + 20 >> 2] | 0;
 i9 = HEAP32[i13 + 44 + (i11 * 28 | 0) + 12 >> 2] | 0;
 i10 = HEAP32[i14 + 40 + (i11 * 340 | 0) >> 2] | 0;
 i7 = _FT_MulFix(((HEAP32[i14 + 36 >> 2] | 0) >>> 0) / 40 | 0, i10) | 0;
 i7 = (i7 | 0) > 32 ? 32 : i7;
 if ((i9 | 0) <= 0) return;
 i2 = HEAP32[i14 + 40 + (i11 * 340 | 0) + 216 >> 2] | 0;
 i1 = i2;
 i12 = i8;
 do {
  if (i1) {
   i6 = i12 + 13 | 0;
   i5 = 0;
   i1 = 0;
   i4 = i7;
   while (1) {
    i3 = i14 + 40 + (i11 * 340 | 0) + 220 + (i5 * 28 | 0) | 0;
    i15 = HEAP32[i14 + 40 + (i11 * 340 | 0) + 220 + (i5 * 28 | 0) + 24 >> 2] | 0;
    if ((i15 & 1 | 0) != 0 ? (i15 & 6 | 0) != 0 ^ (HEAP8[i6 >> 0] | 0) == (HEAP32[i13 + 44 + (i11 * 28 | 0) + 24 >> 2] | 0) : 0) {
     i15 = HEAP16[i12 >> 1] | 0;
     i17 = i15 - (HEAP32[i3 >> 2] | 0) | 0;
     i16 = i14 + 40 + (i11 * 340 | 0) + 220 + (i5 * 28 | 0) + 12 | 0;
     i2 = i15 - (HEAP32[i16 >> 2] | 0) | 0;
     i16 = (((i17 | 0) < 0 ? 0 - i17 | 0 : i17) | 0) > (((i2 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) ? i16 : i3;
     i3 = i15 - (HEAP32[i16 >> 2] | 0) | 0;
     i3 = _FT_MulFix((i3 | 0) < 0 ? 0 - i3 | 0 : i3, i10) | 0;
     i15 = (i3 | 0) < (i4 | 0);
     i2 = HEAP32[i14 + 40 + (i11 * 340 | 0) + 216 >> 2] | 0;
     i1 = i15 ? i16 : i1;
     i3 = i15 ? i3 : i4;
    } else i3 = i4;
    i5 = i5 + 1 | 0;
    if (i5 >>> 0 >= i2 >>> 0) break; else i4 = i3;
   }
   if (!i1) i1 = i2; else {
    HEAP32[i12 + 20 >> 2] = i1;
    i1 = i2;
   }
  } else i1 = 0;
  i12 = i12 + 48 | 0;
 } while (i12 >>> 0 < (i8 + (i9 * 48 | 0) | 0) >>> 0);
 return;
}

function __ZN15MaxRectsBinPack13PruneFreeListEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 + 24 >> 2] | 0;
 i2 = HEAP32[i6 + 20 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) return; else i3 = 0;
 do {
  i4 = i3 + 1 | 0;
  L5 : do if (i4 >>> 0 < i1 - i2 >> 4 >>> 0) {
   L6 : while (1) {
    i5 = (i4 << 4 >> 4) + 1 | 0;
    while (1) {
     i2 = __Z13IsContainedInRK4RectS1_(i2 + (i3 << 4) | 0, i2 + (i4 << 4) | 0) | 0;
     i1 = HEAP32[i6 + 20 >> 2] | 0;
     if (i2) break L6;
     if (!(__Z13IsContainedInRK4RectS1_(i1 + (i4 << 4) | 0, i1 + (i3 << 4) | 0) | 0)) break;
     i2 = HEAP32[i6 + 20 >> 2] | 0;
     i1 = (HEAP32[i6 + 24 >> 2] | 0) - (i2 + (i5 << 4)) | 0;
     _memmove(i2 + (i4 << 4) | 0, i2 + (i5 << 4) | 0, i1 | 0) | 0;
     i1 = i2 + ((i1 >> 4) + i4 << 4) | 0;
     i2 = HEAP32[i6 + 24 >> 2] | 0;
     if ((i2 | 0) != (i1 | 0)) {
      HEAP32[i6 + 24 >> 2] = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4);
      i1 = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4) | 0;
     }
     i2 = HEAP32[i6 + 20 >> 2] | 0;
     if (i4 >>> 0 >= i1 - i2 >> 4 >>> 0) break L5;
    }
    i4 = i4 + 1 | 0;
    i1 = HEAP32[i6 + 24 >> 2] | 0;
    i2 = HEAP32[i6 + 20 >> 2] | 0;
    if (i4 >>> 0 >= i1 - i2 >> 4 >>> 0) break L5;
   }
   i5 = i1 + ((i3 << 4 >> 4) + 1 << 4) | 0;
   i2 = (HEAP32[i6 + 24 >> 2] | 0) - i5 | 0;
   _memmove(i1 + (i3 << 4) | 0, i5 | 0, i2 | 0) | 0;
   i1 = i1 + ((i2 >> 4) + i3 << 4) | 0;
   i2 = HEAP32[i6 + 24 >> 2] | 0;
   if ((i2 | 0) != (i1 | 0)) {
    HEAP32[i6 + 24 >> 2] = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4);
    i1 = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4) | 0;
   }
   i2 = HEAP32[i6 + 20 >> 2] | 0;
   i3 = i3 + -1 | 0;
  } while (0);
  i3 = i3 + 1 | 0;
 } while (i3 >>> 0 < i1 - i2 >> 4 >>> 0);
 return;
}

function __Z24PrintShaderCompileErrorsjjPKcS0_(i3, i5, i4, i1) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 HEAP32[i6 + 76 >> 2] = 0;
 _glGetShaderiv(i3 | 0, 35713, i6 + 76 | 0);
 if (HEAP32[i6 + 76 >> 2] | 0) {
  i5 = 1;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i6 >> 2] = i1;
 __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297600, i6);
 HEAP32[i6 + 72 >> 2] = 0;
 _glGetShaderiv(i3 | 0, 35716, i6 + 72 | 0);
 i1 = HEAP32[i6 + 72 >> 2] | 0;
 if (i1) {
  i2 = _malloc(i1) | 0;
  if (i2) {
   _glGetShaderInfoLog(i3 | 0, i1 | 0, 0, i2 | 0);
   HEAP32[i6 + 8 >> 2] = (i5 | 0) == 35633 ? 297672 : (i5 | 0) == 35632 ? 297631 : 297650;
   HEAP32[i6 + 8 + 4 >> 2] = i2;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297689, i6 + 8 | 0);
   _free(i2);
  }
 } else __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297722, i6 + 16 | 0);
 if (!i4) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 };
 HEAP32[i6 + 40 >> 2] = 0;
 HEAP32[i6 + 40 + 4 >> 2] = 0;
 HEAP32[i6 + 40 + 8 >> 2] = 0;
 HEAP32[i6 + 40 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i6 + 40 | 0, i4);
 __ZNK6String5SplitEPKc(i6 + 56 | 0, i6 + 40 | 0, 297808);
 i1 = HEAP32[i6 + 40 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i6 + 40 >> 2] = 0;
 __ZN4math22PrintToConsoleVariadicEjPKcz(65538, 297810, i6 + 24 | 0);
 i1 = HEAP32[i6 + 56 + 12 >> 2] | 0;
 i2 = HEAP32[i6 + 56 >> 2] | 0;
 i3 = 0;
 while (1) {
  if (i3 >>> 0 >= i1 >>> 0) break;
  i5 = i3 + 1 | 0;
  i4 = HEAP32[i2 + (i3 << 4) >> 2] | 0;
  HEAP32[i6 + 32 >> 2] = i5;
  HEAP32[i6 + 32 + 4 >> 2] = i4;
  __ZN4math22PrintToConsoleVariadicEjPKcz(65538, 297861, i6 + 32 | 0);
  i3 = i5;
 }
 __ZN5ArrayI6String9StdCAllocED2Ev(i6 + 56 | 0);
 i5 = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZN8Graphics20ApplyRasterizerStateEPK15RasterizerState(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, f4 = f0, i5 = 0, i8 = 0, f9 = f0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP32[i7 + 72 >> 2] | 0) == (i6 | 0)) {
  STACKTOP = i8;
  return;
 }
 HEAP32[i7 + 72 >> 2] = i6;
 i1 = HEAP32[i7 + 76 >> 2] | 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  switch (i2 | 0) {
  case 1:
   {
    _glDisable(2884);
    break;
   }
  case 2:
   {
    if ((i1 | 0) == 1) _glEnable(2884);
    if ((HEAP32[i7 + 292 >> 2] | 0) != 1028) {
     _glCullFace(1028);
     HEAP32[i7 + 292 >> 2] = 1028;
    }
    break;
   }
  case 3:
   {
    if ((i1 | 0) == 1) _glEnable(2884);
    if ((HEAP32[i7 + 292 >> 2] | 0) != 1029) {
     _glCullFace(1029);
     HEAP32[i7 + 292 >> 2] = 1029;
    }
    break;
   }
  default:
   {
    HEAP32[i8 >> 2] = i2;
    __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291225, i8);
   }
  }
  HEAP32[i7 + 76 >> 2] = HEAP32[i6 + 4 >> 2];
 }
 f9 = Math_fround(HEAPF32[i7 + 84 >> 2]);
 f4 = Math_fround(HEAPF32[i6 + 12 >> 2]);
 if (!(f9 != f4)) {
  i1 = HEAP32[i6 + 8 >> 2] | 0;
  if ((HEAP32[i7 + 88 >> 2] | 0) != (i1 | 0)) {
   i2 = i7 + 88 | 0;
   i3 = i6 + 8 | 0;
   i5 = 18;
  }
 } else {
  i2 = i7 + 88 | 0;
  i3 = i6 + 8 | 0;
  i1 = HEAP32[i6 + 8 >> 2] | 0;
  i5 = 18;
 }
 if ((i5 | 0) == 18) {
  _glPolygonOffset(+f4, +Math_fround(i1 | 0));
  HEAP32[i7 + 84 >> 2] = HEAP32[i6 + 12 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 }
 i1 = HEAP8[i6 + 16 >> 0] | 0;
 if ((HEAP8[i7 + 80 >> 0] | 0) == i1 << 24 >> 24) {
  STACKTOP = i8;
  return;
 }
 if (!(i1 << 24 >> 24)) _glDisable(3089); else _glEnable(3089);
 HEAP8[i7 + 80 >> 0] = HEAP8[i6 + 16 >> 0] | 0;
 STACKTOP = i8;
 return;
}

function _cid_face_done(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i6) return;
 i5 = HEAP32[i6 + 100 >> 2] | 0;
 i1 = HEAP32[i6 + 316 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i6 + 140 + 160 >> 2] | 0;
  if ((i2 | 0) > 0) {
   i4 = 0;
   while (1) {
    i1 = i1 + (i4 << 3) + 4 | 0;
    i3 = HEAP32[i1 >> 2] | 0;
    if (i3) {
     _ft_mem_free(i5, HEAP32[i3 >> 2] | 0);
     HEAP32[HEAP32[i1 >> 2] >> 2] = 0;
     _ft_mem_free(i5, HEAP32[i1 >> 2] | 0);
     HEAP32[i1 >> 2] = 0;
     i2 = HEAP32[i6 + 140 + 160 >> 2] | 0;
    }
    i3 = i4 + 1 | 0;
    if ((i3 | 0) >= (i2 | 0)) break;
    i1 = HEAP32[i6 + 316 >> 2] | 0;
    i4 = i3;
   }
   i1 = HEAP32[i6 + 316 >> 2] | 0;
  }
  _ft_mem_free(i5, i1);
  HEAP32[i6 + 316 >> 2] = 0;
 }
 _ft_mem_free(i5, HEAP32[i6 + 140 + 24 >> 2] | 0);
 HEAP32[i6 + 140 + 24 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 140 + 28 >> 2] | 0);
 HEAP32[i6 + 140 + 28 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 140 + 32 >> 2] | 0);
 HEAP32[i6 + 140 + 32 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 140 + 36 >> 2] | 0);
 HEAP32[i6 + 140 + 36 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 140 + 40 >> 2] | 0);
 HEAP32[i6 + 140 + 40 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 140 + 164 >> 2] | 0);
 HEAP32[i6 + 140 + 164 >> 2] = 0;
 HEAP32[i6 + 140 + 160 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 140 >> 2] | 0);
 HEAP32[i6 + 140 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 140 + 12 >> 2] | 0);
 HEAP32[i6 + 140 + 12 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 140 + 16 >> 2] | 0);
 HEAP32[i6 + 140 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i6 + 24 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 324 >> 2] | 0);
 HEAP32[i6 + 324 >> 2] = 0;
 _ft_mem_free(i5, HEAP32[i6 + 328 >> 2] | 0);
 HEAP32[i6 + 328 >> 2] = 0;
 return;
}

function _psh_globals_new(i2, i7, i6) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = _ft_mem_alloc(i2, 2496, i8) | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (i1) {
  i7 = i1;
  HEAP32[i6 >> 2] = i5;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i5 >> 2] = i2;
 HEAP32[i5 + 212 >> 2] = HEAPU16[i7 + 120 >> 1];
 i1 = HEAP8[i7 + 124 >> 0] | 0;
 if (!(i1 << 24 >> 24)) i1 = 1; else {
  i2 = i1 & 255;
  i3 = i7 + 128 | 0;
  i4 = i5 + 224 | 0;
  while (1) {
   HEAP32[i4 >> 2] = HEAP16[i3 >> 1];
   i2 = i2 + -1 | 0;
   if (!i2) break; else {
    i3 = i3 + 2 | 0;
    i4 = i4 + 12 | 0;
   }
  }
  i1 = (i1 & 255) + 1 | 0;
 }
 HEAP32[i5 + 208 >> 2] = i1;
 HEAP32[i5 + 8 >> 2] = HEAPU16[i7 + 122 >> 1];
 i1 = HEAP8[i7 + 125 >> 0] | 0;
 if (!(i1 << 24 >> 24)) i1 = 1; else {
  i2 = i1 & 255;
  i3 = i7 + 154 | 0;
  i4 = i5 + 20 | 0;
  while (1) {
   HEAP32[i4 >> 2] = HEAP16[i3 >> 1];
   i2 = i2 + -1 | 0;
   if (!i2) break; else {
    i3 = i3 + 2 | 0;
    i4 = i4 + 12 | 0;
   }
  }
  i1 = (i1 & 255) + 1 | 0;
 }
 HEAP32[i5 + 4 >> 2] = i1;
 _psh_blues_set_zones(i5 + 412 | 0, HEAPU8[i7 + 8 >> 0] | 0, i7 + 12 | 0, HEAPU8[i7 + 9 >> 0] | 0, i7 + 40 | 0, HEAP32[i7 + 116 >> 2] | 0, 0);
 _psh_blues_set_zones(i5 + 412 | 0, HEAPU8[i7 + 10 >> 0] | 0, i7 + 60 | 0, HEAPU8[i7 + 11 >> 0] | 0, i7 + 88 | 0, HEAP32[i7 + 116 >> 2] | 0, 1);
 HEAP32[i5 + 2476 >> 2] = HEAP32[i7 + 108 >> 2];
 HEAP32[i5 + 2480 >> 2] = HEAP32[i7 + 112 >> 2];
 HEAP32[i5 + 2488 >> 2] = HEAP32[i7 + 116 >> 2];
 HEAP32[i5 + 200 >> 2] = 0;
 HEAP32[i5 + 204 >> 2] = 0;
 HEAP32[i5 + 404 >> 2] = 0;
 HEAP32[i5 + 408 >> 2] = 0;
 i7 = HEAP32[i8 >> 2] | 0;
 HEAP32[i6 >> 2] = i5;
 STACKTOP = i8;
 return i7 | 0;
}

function _t1_decoder_init(i3, i4, i9, i10, i5, i2, i7, i6, i8) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0;
 _memset(i3 | 0, 0, 1500) | 0;
 i1 = _ft_module_get_service(HEAP32[i4 + 96 >> 2] | 0, 327387) | 0;
 if (!i1) {
  i10 = 7;
  return i10 | 0;
 }
 HEAP32[i3 + 1348 >> 2] = i1;
 HEAP32[i3 + 64 >> 2] = 0;
 HEAP8[i3 + 68 >> 0] = 1;
 HEAP32[i3 + 4 >> 2] = i4;
 HEAP32[i3 + 8 >> 2] = i10;
 HEAP32[i3 >> 2] = HEAP32[i4 + 100 >> 2];
 if ((i10 | 0) != 0 ? (i1 = HEAP32[HEAP32[i10 + 156 >> 2] >> 2] | 0, HEAP32[i3 + 12 >> 2] = i1, HEAP32[i3 + 16 >> 2] = i1 + 20, HEAP32[i3 + 20 >> 2] = i1 + 56, _FT_GlyphLoader_Rewind(i1), HEAP32[i3 + 76 >> 2] = HEAP32[i9 + 40 >> 2], HEAP32[i3 + 72 >> 2] = 0, i7 << 24 >> 24 != 0) : 0) HEAP32[i3 + 72 >> 2] = HEAP32[(HEAP32[i10 + 156 >> 2] | 0) + 36 >> 2];
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 24 + 4 >> 2] = 0;
 HEAP32[i3 + 24 + 8 >> 2] = 0;
 HEAP32[i3 + 24 + 12 >> 2] = 0;
 HEAP32[i3 + 24 + 16 >> 2] = 0;
 HEAP32[i3 + 24 + 20 >> 2] = 0;
 HEAP32[i3 + 80 >> 2] = HEAP32[70121];
 HEAP32[i3 + 80 + 4 >> 2] = HEAP32[70122];
 HEAP32[i3 + 80 + 8 >> 2] = HEAP32[70123];
 HEAP32[i3 + 80 + 12 >> 2] = HEAP32[70124];
 HEAP32[i3 + 80 + 16 >> 2] = HEAP32[70125];
 HEAP32[i3 + 80 + 20 >> 2] = HEAP32[70126];
 HEAP32[i3 + 80 + 24 >> 2] = HEAP32[70127];
 HEAP32[i3 + 80 + 28 >> 2] = HEAP32[70128];
 HEAP32[i3 + 1352 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i3 + 1356 >> 2] = i5;
 HEAP32[i3 + 1468 >> 2] = i6;
 HEAP32[i3 + 1464 >> 2] = i2;
 HEAP32[i3 + 1472 >> 2] = i8;
 HEAP32[i3 + 1476 >> 2] = HEAP32[70129];
 HEAP32[i3 + 1476 + 4 >> 2] = HEAP32[70130];
 HEAP32[i3 + 1476 + 8 >> 2] = HEAP32[70131];
 i10 = 0;
 return i10 | 0;
}

function _tt_cmap2_char_next(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i9 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAP32[i10 >> 2] | 0) + 1 | 0;
 if (i1 >>> 0 >= 65536) {
  i11 = 0;
  i8 = 0;
  HEAP32[i10 >> 2] = i8;
  return i11 | 0;
 }
 L4 : while (1) {
  i2 = i1 >>> 8;
  if (!i2) {
   i8 = i1 << 1 & 510;
   if (!(HEAPU8[i9 + (i8 + 6) >> 0] << 8 | HEAPU8[i9 + (i8 + 7) >> 0])) {
    i3 = 518;
    i2 = i9 + 518 | 0;
    i11 = 6;
   }
  } else {
   i2 = HEAPU8[i9 + ((i2 << 1) + 7) >> 0] & 248 | HEAPU8[i9 + ((i2 << 1) + 6) >> 0] << 8;
   if (i2) {
    i3 = i2 + 518 | 0;
    i2 = i9 + (i2 + 518) | 0;
    i11 = 6;
   }
  }
  if ((i11 | 0) == 6) {
   i11 = 0;
   i4 = HEAPU8[i2 >> 0] << 8 | HEAPU8[i9 + (i3 + 1) >> 0];
   i7 = HEAPU8[i9 + (i3 + 2) >> 0] << 8 | HEAPU8[i9 + (i3 + 3) >> 0];
   i6 = i3 + 6 | 0;
   i8 = HEAP8[i9 + (i3 + 4) >> 0] << 8 | HEAPU8[i9 + (i3 + 5) >> 0];
   i5 = HEAPU8[i9 + i6 >> 0] << 8 | HEAPU8[i9 + (i3 + 7) >> 0];
   i2 = i1 & 255;
   if (i5) {
    i3 = i2 >>> 0 < i4 >>> 0 ? 0 : i2 - i4 | 0;
    i1 = (i2 >>> 0 < i4 >>> 0 ? i4 : i2) + (i1 & -256) | 0;
    if (i3 >>> 0 < i7 >>> 0) {
     i4 = i9 + (i6 + (i3 << 1) + i5) | 0;
     do {
      i2 = HEAPU8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
      i4 = i4 + 2 | 0;
      if ((i2 | 0) != 0 ? (i2 + i8 & 65535 | 0) != 0 : 0) {
       i2 = i2 + i8 & 65535;
       i11 = 13;
       break L4;
      }
      i3 = i3 + 1 | 0;
      i1 = i1 + 1 | 0;
     } while (i3 >>> 0 < i7 >>> 0);
    }
   }
  }
  i1 = i1 + 256 & -256;
  if (i1 >>> 0 >= 65536) {
   i2 = 0;
   i1 = 0;
   i11 = 13;
   break;
  }
 }
 if ((i11 | 0) == 13) {
  HEAP32[i10 >> 2] = i1;
  return i2 | 0;
 }
 return 0;
}

function _BDF_Glyph_Load(i7, i2, i3, i1) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i5 + 140 >> 2] | 0;
 i6 = HEAPU16[i1 + 278662 >> 1] | 0;
 if (!i5) {
  i7 = 6;
  return i7 | 0;
 }
 if ((HEAP32[i5 + 16 >> 2] | 0) >>> 0 <= i3 >>> 0) {
  i7 = 6;
  return i7 | 0;
 }
 if (!i3) i4 = HEAP32[i5 + 164 >> 2] | 0; else i4 = i3 + -1 | 0;
 i11 = HEAP32[i1 + 56 >> 2] | 0;
 i1 = HEAP16[i11 + (i4 * 36 | 0) + 10 >> 1] | 0;
 i10 = HEAP16[i11 + (i4 * 36 | 0) + 12 >> 1] | 0;
 i2 = HEAP16[i11 + (i4 * 36 | 0) + 16 >> 1] | 0;
 i3 = HEAP16[i11 + (i4 * 36 | 0) + 20 >> 1] | 0;
 i8 = HEAP32[i11 + (i4 * 36 | 0) + 24 >> 2] | 0;
 i9 = HEAP32[i11 + (i4 * 36 | 0) + 28 >> 2] | 0;
 HEAP32[i7 + 76 >> 2] = HEAPU16[i11 + (i4 * 36 | 0) + 14 >> 1];
 HEAP32[i7 + 80 >> 2] = i10 & 65535;
 HEAP32[i7 + 84 >> 2] = i9;
 _ft_glyphslot_set_bitmap(i7, i8);
 switch (i6 | 0) {
 case 1:
  {
   HEAP8[i7 + 94 >> 0] = 1;
   break;
  }
 case 2:
  {
   HEAP8[i7 + 94 >> 0] = 3;
   break;
  }
 case 4:
  {
   HEAP8[i7 + 94 >> 0] = 4;
   break;
  }
 case 8:
  {
   HEAP8[i7 + 94 >> 0] = 2;
   HEAP16[i7 + 92 >> 1] = 256;
   break;
  }
 default:
  {}
 }
 HEAP32[i7 + 72 >> 2] = 1651078259;
 HEAP32[i7 + 100 >> 2] = i2 << 16 >> 16;
 HEAP32[i7 + 104 >> 2] = i3 << 16 >> 16;
 HEAP32[i7 + 40 >> 2] = (i1 & 65535) << 6;
 HEAP32[i7 + 32 >> 2] = i2 << 16 >> 16 << 6;
 HEAP32[i7 + 36 >> 2] = i3 << 16 >> 16 << 6;
 HEAP32[i7 + 24 >> 2] = HEAP32[i7 + 80 >> 2] << 6;
 HEAP32[i7 + 28 >> 2] = HEAP32[i7 + 76 >> 2] << 6;
 _ft_synthesize_vertical_metrics(i7 + 24 | 0, (HEAPU16[(HEAP32[i5 + 140 >> 2] | 0) + 6 >> 1] | 0) << 6);
 i11 = 0;
 return i11 | 0;
}

function _cff_size_request(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 do if (HEAP32[i1 + 8 >> 2] & 2) {
  if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 + 532 >> 2] | 0) + 148 >> 2] & 127](i1, i2, i9) | 0) {
   HEAP32[i8 + 44 >> 2] = -1;
   i1 = HEAP32[i8 >> 2] | 0;
   break;
  }
  _cff_size_select(i8, HEAP32[i9 >> 2] | 0) | 0;
  STACKTOP = i9;
  return 0;
 } while (0);
 _FT_Request_Metrics(i1, i2);
 i2 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 + 692 >> 2] | 0) + 2952 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  STACKTOP = i9;
  return 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  STACKTOP = i9;
  return 0;
 }
 i4 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i4) {
  STACKTOP = i9;
  return 0;
 }
 i5 = HEAP32[(HEAP32[i8 >> 2] | 0) + 692 >> 2] | 0;
 i6 = HEAP32[i8 + 40 >> 2] | 0;
 i7 = HEAP32[i5 + 1392 >> 2] | 0;
 FUNCTION_TABLE_iiiiii[HEAP32[i4 + 4 >> 2] & 63](HEAP32[i6 >> 2] | 0, HEAP32[i8 + 16 >> 2] | 0, HEAP32[i8 + 20 >> 2] | 0, 0, 0) | 0;
 i1 = HEAP32[i5 + 1896 >> 2] | 0;
 if (!i1) {
  STACKTOP = i9;
  return 0;
 }
 do {
  i1 = i1 + -1 | 0;
  i3 = HEAP32[(HEAP32[i5 + 1900 + (i1 << 2) >> 2] | 0) + 68 >> 2] | 0;
  i2 = HEAP32[i8 + 16 >> 2] | 0;
  if ((i7 | 0) == (i3 | 0)) i3 = HEAP32[i8 + 20 >> 2] | 0; else {
   i2 = _FT_MulDiv(i2, i7, i3) | 0;
   i3 = _FT_MulDiv(HEAP32[i8 + 20 >> 2] | 0, i7, i3) | 0;
  }
  FUNCTION_TABLE_iiiiii[HEAP32[i4 + 4 >> 2] & 63](HEAP32[i6 + 4 + (i1 << 2) >> 2] | 0, i2, i3, 0, 0) | 0;
 } while ((i1 | 0) != 0);
 STACKTOP = i9;
 return 0;
}

function __iup_worker_interpolate(i12, i4, i13, i1, i2) {
 i12 = i12 | 0;
 i4 = i4 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0;
 if (i4 >>> 0 > i13 >>> 0) return;
 i11 = HEAP32[i12 + 12 >> 2] | 0;
 if (!(i11 >>> 0 > i1 >>> 0 & i11 >>> 0 > i2 >>> 0)) return;
 i8 = HEAP32[i12 + 8 >> 2] | 0;
 i6 = HEAP32[i8 + (i1 << 3) >> 2] | 0;
 i8 = HEAP32[i8 + (i2 << 3) >> 2] | 0;
 i10 = (i6 | 0) > (i8 | 0) ? i6 : i8;
 i11 = (i6 | 0) > (i8 | 0) ? i8 : i6;
 i9 = (i6 | 0) > (i8 | 0) ? i1 : i2;
 i8 = (i6 | 0) > (i8 | 0) ? i2 : i1;
 i2 = HEAP32[i12 >> 2] | 0;
 i6 = HEAP32[i2 + (i8 << 3) >> 2] | 0;
 i7 = HEAP32[i2 + (i9 << 3) >> 2] | 0;
 i3 = HEAP32[i12 + 4 >> 2] | 0;
 i8 = HEAP32[i3 + (i8 << 3) >> 2] | 0;
 i9 = HEAP32[i3 + (i9 << 3) >> 2] | 0;
 if ((i10 | 0) == (i11 | 0)) {
  i1 = i4;
  do {
   i12 = HEAP32[i2 + (i1 << 3) >> 2] | 0;
   HEAP32[i3 + (i1 << 3) >> 2] = ((i12 | 0) > (i6 | 0) ? i9 - i7 | 0 : i8 - i6 | 0) + i12;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 <= i13 >>> 0);
  return;
 }
 i1 = 0;
 i5 = 0;
 while (1) {
  i2 = HEAP32[i2 + (i4 << 3) >> 2] | 0;
  do if ((i2 | 0) > (i6 | 0)) {
   if ((i2 | 0) >= (i7 | 0)) {
    i2 = i2 + (i9 - i7) | 0;
    break;
   }
   if (!(i5 << 24 >> 24)) {
    i1 = _FT_MulDiv(i9 - i8 | 0, 65536, i10 - i11 | 0) | 0;
    i2 = 1;
   } else i2 = i5;
   i14 = (_FT_MulFix((HEAP32[(HEAP32[i12 + 8 >> 2] | 0) + (i4 << 3) >> 2] | 0) - i11 | 0, i1) | 0) + i8 | 0;
   i3 = HEAP32[i12 + 4 >> 2] | 0;
   i5 = i2;
   i2 = i14;
  } else i2 = i2 + (i8 - i6) | 0; while (0);
  HEAP32[i3 + (i4 << 3) >> 2] = i2;
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 > i13 >>> 0) break;
  i2 = HEAP32[i12 >> 2] | 0;
 }
 return;
}

function _tt_cmap12_validate(i2, i8) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if ((i2 + 16 | 0) >>> 0 > (HEAP32[i8 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i8, 8);
 i1 = (HEAPU8[i2 + 5 >> 0] | 0) << 16 | (HEAPU8[i2 + 4 >> 0] | 0) << 24 | (HEAPU8[i2 + 6 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0);
 i7 = (HEAPU8[i2 + 13 >> 0] | 0) << 16 | (HEAPU8[i2 + 12 >> 0] | 0) << 24 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0);
 if (i1 >>> 0 > ((HEAP32[i8 + 4 >> 2] | 0) - i2 | 0) >>> 0) _ft_validator_error(i8, 8);
 if (i1 >>> 0 < ((i7 * 12 | 0) + 16 | 0) >>> 0) _ft_validator_error(i8, 8);
 if (!i7) return 0;
 i5 = 0;
 i6 = 0;
 i3 = i2 + 16 | 0;
 while (1) {
  i1 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
  i2 = i5;
  i5 = (HEAPU8[i3 + 5 >> 0] | 0) << 16 | (HEAPU8[i3 + 4 >> 0] | 0) << 24 | (HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0);
  i4 = i3;
  i3 = i3 + 12 | 0;
  if (i5 >>> 0 < i1 >>> 0) {
   i1 = 9;
   break;
  }
  if (!((i6 | 0) == 0 | i1 >>> 0 > i2 >>> 0)) {
   i1 = 11;
   break;
  }
  if ((HEAP32[i8 + 8 >> 2] | 0) != 0 ? (i5 - i1 + ((HEAPU8[i4 + 9 >> 0] | 0) << 16 | (HEAPU8[i4 + 8 >> 0] | 0) << 24 | (HEAPU8[i4 + 10 >> 0] | 0) << 8 | (HEAPU8[i4 + 11 >> 0] | 0)) | 0) >>> 0 >= (HEAP32[i8 + 172 >> 2] | 0) >>> 0 : 0) {
   i1 = 14;
   break;
  }
  i6 = i6 + 1 | 0;
  if ((i6 | 0) == (i7 | 0)) {
   i1 = 16;
   break;
  }
 }
 if ((i1 | 0) == 9) _ft_validator_error(i8, 8); else if ((i1 | 0) == 11) _ft_validator_error(i8, 8); else if ((i1 | 0) == 14) _ft_validator_error(i8, 16); else if ((i1 | 0) == 16) return 0;
 return 0;
}

function __Z22IsIE11DeveloperPreviewv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[73] | 0;
 if ((i1 | 0) != -1) {
  i5 = i1;
  i5 = (i5 | 0) != 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i5 = _browser_info() | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i6, i5, _strlen(i5) | 0);
 i5 = HEAP8[i6 >> 0] | 0;
 i4 = (i5 & 1) == 0 ? i6 + 1 | 0 : HEAP32[i6 + 8 >> 2] | 0;
 i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i6 + 4 >> 2] | 0;
 L4 : do if ((i5 >>> 0 >= 7 ? (i5 | 0) >= 7 : 0) ? (i5 + -6 | 0) != 0 : 0) {
  i1 = i4;
  L7 : while (1) {
   if ((HEAP8[i1 >> 0] | 0) == 84) {
    i2 = i1;
    i3 = 289024;
    do {
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == 289031) break L7;
     i2 = i2 + 1 | 0;
    } while ((HEAP8[i2 >> 0] | 0) == (HEAP8[i3 >> 0] | 0));
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i4 + (i5 + -6) | 0)) {
    i1 = 0;
    break L4;
   }
  }
  if ((i1 | 0) != (i4 + i5 | 0) ? (i1 - i4 | 0) != -1 : 0) {
   i1 = i4;
   L16 : while (1) {
    if ((HEAP8[i1 >> 0] | 0) == 114) {
     i2 = i1;
     i3 = 289032;
     do {
      i3 = i3 + 1 | 0;
      if ((i3 | 0) == 289039) break L16;
      i2 = i2 + 1 | 0;
     } while ((HEAP8[i2 >> 0] | 0) == (HEAP8[i3 >> 0] | 0));
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i4 + (i5 + -6) | 0)) {
     i1 = 0;
     break L4;
    }
   }
   if ((i1 | 0) != (i4 + i5 | 0)) i1 = (i1 - i4 | 0) != -1; else i1 = 0;
  } else i1 = 0;
 } else i1 = 0; while (0);
 HEAP32[73] = i1 & 1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 i5 = HEAP32[73] | 0;
 i5 = (i5 | 0) != 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _Compute_Funcs(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP16[i5 + 298 >> 1] | 0;
 do if (i4 << 16 >> 16 != 16384) {
  i1 = HEAP16[i5 + 300 >> 1] | 0;
  i2 = HEAP16[i5 + 296 >> 1] | 0;
  if (i1 << 16 >> 16 == 16384) {
   HEAP32[i5 + 564 >> 2] = i2 << 16 >> 16 << 16;
   i3 = HEAP16[i5 + 294 >> 1] | 0;
   i1 = i2 << 16 >> 16 << 16;
   break;
  } else {
   i3 = HEAP16[i5 + 294 >> 1] | 0;
   i1 = (Math_imul(i2 << 16 >> 16, i1 << 16 >> 16) | 0) + (Math_imul(i3 << 16 >> 16, i4 << 16 >> 16) | 0) << 2;
   HEAP32[i5 + 564 >> 2] = i1;
   break;
  }
 } else {
  i1 = HEAP16[i5 + 294 >> 1] | 0;
  HEAP32[i5 + 564 >> 2] = i1 << 16 >> 16 << 16;
  i3 = i1;
  i1 = i1 << 16 >> 16 << 16;
 } while (0);
 do if (i3 << 16 >> 16 != 16384) if ((HEAP16[i5 + 296 >> 1] | 0) == 16384) {
  HEAP32[i5 + 572 >> 2] = 58;
  break;
 } else {
  HEAP32[i5 + 572 >> 2] = 59;
  break;
 } else HEAP32[i5 + 572 >> 2] = 57; while (0);
 do if ((HEAP16[i5 + 290 >> 1] | 0) != 16384) if ((HEAP16[i5 + 292 >> 1] | 0) == 16384) {
  HEAP32[i5 + 576 >> 2] = 58;
  break;
 } else {
  HEAP32[i5 + 576 >> 2] = 60;
  break;
 } else HEAP32[i5 + 576 >> 2] = 57; while (0);
 HEAP32[i5 + 584 >> 2] = 6;
 HEAP32[i5 + 588 >> 2] = 7;
 do if ((i1 | 0) == 1073741824) {
  if (i4 << 16 >> 16 == 16384) {
   HEAP32[i5 + 584 >> 2] = 8;
   HEAP32[i5 + 588 >> 2] = 9;
   break;
  }
  if ((HEAP16[i5 + 300 >> 1] | 0) == 16384) {
   HEAP32[i5 + 584 >> 2] = 10;
   HEAP32[i5 + 588 >> 2] = 11;
  }
 } while (0);
 if ((((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0) >= 67108864) {
  i5 = i5 + 256 | 0;
  HEAP32[i5 >> 2] = 0;
  return;
 }
 HEAP32[i5 + 564 >> 2] = 1073741824;
 i5 = i5 + 256 | 0;
 HEAP32[i5 >> 2] = 0;
 return;
}

function __ZN5Image15ConvertToFormatE13TextureFormat(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) {
  i4 = 1;
  STACKTOP = i5;
  return i4 | 0;
 }
 L4 : do if ((i2 | 0) >= 81) {
  if ((i2 | 0) < 95) switch (i2 | 0) {
  case 94:
  case 84:
  case 83:
  case 82:
  case 81:
   {
    i4 = 3;
    break L4;
   }
  default:
   break L4;
  }
  if ((i2 | 0) < 98) switch (i2 | 0) {
  case 97:
  case 96:
  case 95:
   {
    i4 = 3;
    break L4;
   }
  default:
   break L4;
  }
  if ((i2 | 0) < 99) switch (i2 | 0) {
  case 98:
   {
    i4 = 3;
    break L4;
   }
  default:
   break L4;
  }
  if ((i2 | 0) < 1048576) switch (i2 | 0) {
  case 99:
   {
    i4 = 3;
    break L4;
   }
  default:
   break L4;
  } else switch (i2 | 0) {
  case 1048576:
   {
    i4 = 3;
    break L4;
   }
  default:
   break L4;
  }
 } else switch (i2 | 0) {
 case 78:
 case 77:
 case 76:
 case 75:
 case 74:
 case 73:
 case 80:
 case 79:
 case 72:
 case 71:
 case 70:
  {
   i4 = 3;
   break;
  }
 default:
  {}
 } while (0);
 if ((i4 | 0) == 3) {
  HEAP32[i5 >> 2] = __Z21TextureFormatToString13TextureFormat(i2) | 0;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303780, i5);
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 L23 : do if ((i1 | 0) == 71) {
  switch (i2 | 0) {
  case 28:
  case 85:
   break L23;
  default:
   {}
  }
  if (!(__ZN5Image23ConvertToFormatInternalE13TextureFormat(i3, 28) | 0)) {
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
 } while (0);
 i4 = __ZN5Image23ConvertToFormatInternalE13TextureFormat(i3, i2) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _tt_cmap13_validate(i2, i8) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if ((i2 + 16 | 0) >>> 0 > (HEAP32[i8 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i8, 8);
 i1 = (HEAPU8[i2 + 5 >> 0] | 0) << 16 | (HEAPU8[i2 + 4 >> 0] | 0) << 24 | (HEAPU8[i2 + 6 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0);
 i7 = (HEAPU8[i2 + 13 >> 0] | 0) << 16 | (HEAPU8[i2 + 12 >> 0] | 0) << 24 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0);
 if (i1 >>> 0 > ((HEAP32[i8 + 4 >> 2] | 0) - i2 | 0) >>> 0) _ft_validator_error(i8, 8);
 if (i1 >>> 0 < ((i7 * 12 | 0) + 16 | 0) >>> 0) _ft_validator_error(i8, 8);
 if (!i7) return 0;
 i5 = 0;
 i6 = 0;
 i3 = i2 + 16 | 0;
 while (1) {
  i1 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
  i2 = i5;
  i5 = (HEAPU8[i3 + 5 >> 0] | 0) << 16 | (HEAPU8[i3 + 4 >> 0] | 0) << 24 | (HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0);
  i4 = i3;
  i3 = i3 + 12 | 0;
  if (i1 >>> 0 > i5 >>> 0) {
   i1 = 9;
   break;
  }
  if (!((i6 | 0) == 0 | i1 >>> 0 > i2 >>> 0)) {
   i1 = 11;
   break;
  }
  if ((HEAP32[i8 + 8 >> 2] | 0) != 0 ? ((HEAPU8[i4 + 9 >> 0] | 0) << 16 | (HEAPU8[i4 + 8 >> 0] | 0) << 24 | (HEAPU8[i4 + 10 >> 0] | 0) << 8 | (HEAPU8[i4 + 11 >> 0] | 0)) >>> 0 >= (HEAP32[i8 + 172 >> 2] | 0) >>> 0 : 0) {
   i1 = 14;
   break;
  }
  i6 = i6 + 1 | 0;
  if ((i6 | 0) == (i7 | 0)) {
   i1 = 16;
   break;
  }
 }
 if ((i1 | 0) == 9) _ft_validator_error(i8, 8); else if ((i1 | 0) == 11) _ft_validator_error(i8, 8); else if ((i1 | 0) == 14) _ft_validator_error(i8, 16); else if ((i1 | 0) == 16) return 0;
 return 0;
}

function _find_sbit_range(i7, i1, i9, i8) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 L1 : do if (((HEAPU16[i1 + 40 >> 1] | 0) >>> 0 <= i7 >>> 0 ? (HEAPU16[i1 + 42 >> 1] | 0) >>> 0 >= i7 >>> 0 : 0) ? (i3 = HEAP32[i1 + 4 >> 2] | 0, i2 = HEAP32[i1 >> 2] | 0, (i3 | 0) != 0 & (i2 | 0) > 0) : 0) {
  i1 = i3;
  while (1) {
   i4 = HEAPU16[i1 >> 1] | 0;
   if (i4 >>> 0 <= i7 >>> 0 ? (HEAPU16[i1 + 2 >> 1] | 0) >>> 0 >= i7 >>> 0 : 0) {
    i6 = i1;
    break;
   }
   i1 = i1 + 40 | 0;
   if (i1 >>> 0 >= (i3 + (i2 * 40 | 0) | 0) >>> 0) break L1;
  }
  i5 = HEAP16[i6 + 4 >> 1] | 0;
  L10 : do switch (i5 & 65535 | 0) {
  case 3:
  case 1:
   {
    HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 + 28 >> 2] | 0) + ((i7 - i4 & 65535) << 2) >> 2];
    break;
   }
  case 2:
   {
    HEAP32[i8 >> 2] = (Math_imul(HEAP32[i6 + 12 >> 2] | 0, i7 - i4 & 65535) | 0) + (HEAP32[i6 + 8 >> 2] | 0);
    break;
   }
  case 5:
  case 4:
   {
    i2 = HEAP32[i6 + 24 >> 2] | 0;
    if (!i2) break L1;
    i3 = HEAP32[i6 + 32 >> 2] | 0;
    i1 = 0;
    while (1) {
     if ((HEAPU16[i3 + (i1 << 1) >> 1] | 0 | 0) == (i7 | 0)) break;
     i1 = i1 + 1 | 0;
     if (i1 >>> 0 >= i2 >>> 0) break L1;
    }
    if (i5 << 16 >> 16 == 4) {
     HEAP32[i8 >> 2] = HEAP32[(HEAP32[i6 + 28 >> 2] | 0) + (i1 << 2) >> 2];
     break L10;
    } else {
     HEAP32[i8 >> 2] = (Math_imul(HEAP32[i6 + 12 >> 2] | 0, i1) | 0) + (HEAP32[i6 + 8 >> 2] | 0);
     break L10;
    }
   }
  default:
   break L1;
  } while (0);
  HEAP32[i9 >> 2] = i6;
  i8 = 0;
  return i8 | 0;
 } while (0);
 HEAP32[i9 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 i8 = 6;
 return i8 | 0;
}

function _ft_lzwstate_get_code(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[i8 + 52 >> 2] | 0;
 i2 = HEAP32[i8 + 24 >> 2] | 0;
 i3 = (HEAP8[i8 + 32 >> 0] | 0) == 0;
 if (!((i3 ? (i2 | 0) < (HEAP32[i8 + 28 >> 2] | 0) : 0) ? (HEAP32[i8 + 56 >> 2] | 0) >>> 0 < (HEAP32[i8 + 60 >> 2] | 0) >>> 0 : 0)) {
  if ((HEAP32[i8 + 56 >> 2] | 0) >>> 0 >= (HEAP32[i8 + 60 >> 2] | 0) >>> 0) {
   HEAP32[i8 + 52 >> 2] = i1 + 1;
   if ((i1 + 1 | 0) >>> 0 < (HEAP32[i8 + 40 >> 2] | 0) >>> 0) i2 = (1 << i1 + 1) + -256 | 0; else i2 = (HEAP32[i8 + 48 >> 2] | 0) + 1 | 0;
   HEAP32[i8 + 60 >> 2] = i2;
   i1 = i1 + 1 | 0;
  }
  if (!i3) {
   HEAP32[i8 + 52 >> 2] = 9;
   HEAP32[i8 + 60 >> 2] = 256;
   HEAP8[i8 + 32 >> 0] = 0;
   i1 = 9;
  }
  if (HEAP32[i8 + 4 >> 2] | 0) {
   i8 = -1;
   return i8 | 0;
  }
  i7 = _FT_Stream_TryRead(HEAP32[i8 + 164 >> 2] | 0, i8 + 8 | 0, i1) | 0;
  HEAP32[i8 + 36 >> 2] = (HEAP32[i8 + 36 >> 2] | 0) + i7;
  i6 = HEAP32[i8 + 52 >> 2] | 0;
  HEAP32[i8 + 4 >> 2] = i7 >>> 0 < i6 >>> 0 & 1;
  HEAP32[i8 + 24 >> 2] = 0;
  HEAP32[i8 + 28 >> 2] = (i7 << 3 | 1) - i6;
  if (!i7) {
   i8 = -1;
   return i8 | 0;
  } else i2 = 0;
 }
 HEAP32[i8 + 24 >> 2] = i2 + i1;
 i7 = i2 >> 3;
 i5 = i2 & 7;
 i6 = (HEAPU8[i8 + 8 + i7 >> 0] | 0) >>> i5;
 i1 = i1 - (8 - i5) | 0;
 if (i1 >>> 0 > 7) {
  i2 = i1 + -8 | 0;
  i3 = 8 - i5 + 8 | 0;
  i4 = i7 + 2 + (i8 + 8) | 0;
  i1 = HEAPU8[i7 + 1 + (i8 + 8) >> 0] << 8 - i5 | i6;
 } else {
  i2 = i1;
  i3 = 8 - i5 | 0;
  i4 = i7 + 1 + (i8 + 8) | 0;
  i1 = i6;
 }
 if (!i2) {
  i8 = i1;
  return i8 | 0;
 }
 i8 = (HEAPU8[i4 >> 0] & (1 << i2) + -1) << i3 | i1;
 return i8 | 0;
}

function __ZN4math8float4x412FromEulerXYZEfff(i1, f2, f3, f4) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 var i5 = 0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, i11 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAPF32[i1 + 12 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 28 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 44 + 4 >> 2] = 0;
 HEAP32[i1 + 44 + 8 >> 2] = 0;
 HEAP32[i1 + 44 + 12 >> 2] = 0;
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 __ZN4math6SinCosEfRfS0_(f2, i5 + 16 | 0, i5 + 20 | 0);
 __ZN4math6SinCosEfRfS0_(f3, i5 + 8 | 0, i5 + 12 | 0);
 __ZN4math6SinCosEfRfS0_(f4, i5, i5 + 4 | 0);
 f3 = Math_fround(HEAPF32[i5 + 12 >> 2]);
 f8 = Math_fround(HEAPF32[i5 + 4 >> 2]);
 HEAPF32[i1 >> 2] = Math_fround(f3 * f8);
 f6 = Math_fround(HEAPF32[i5 >> 2]);
 HEAPF32[i1 + 4 >> 2] = Math_fround(-Math_fround(f3 * f6));
 i11 = HEAP32[i5 + 8 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = i11;
 f9 = Math_fround(HEAPF32[i5 + 16 >> 2]);
 f7 = Math_fround(f8 * f9);
 f2 = (HEAP32[tempDoublePtr >> 2] = i11, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f10 = Math_fround(f2 * f7);
 f4 = Math_fround(HEAPF32[i5 + 20 >> 2]);
 HEAPF32[i1 + 16 >> 2] = Math_fround(f10 + Math_fround(f6 * f4));
 f8 = Math_fround(f8 * f4);
 HEAPF32[i1 + 20 >> 2] = Math_fround(f8 - Math_fround(f6 * Math_fround(f9 * f2)));
 HEAPF32[i1 + 24 >> 2] = Math_fround(-Math_fround(f3 * f9));
 HEAPF32[i1 + 32 >> 2] = Math_fround(Math_fround(f6 * f9) - Math_fround(f2 * f8));
 HEAPF32[i1 + 36 >> 2] = Math_fround(f7 + Math_fround(f6 * Math_fround(f2 * f4)));
 HEAPF32[i1 + 40 >> 2] = Math_fround(f3 * f4);
 STACKTOP = i5;
 return;
}

function _tt_face_done(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!i5) return;
 i4 = HEAP32[i5 + 100 >> 2] | 0;
 i1 = HEAP32[i5 + 104 >> 2] | 0;
 i2 = HEAP32[i5 + 532 >> 2] | 0;
 i3 = HEAP32[i5 + 692 + 4 >> 2] | 0;
 if (i3) FUNCTION_TABLE_vi[i3 & 127](HEAP32[i5 + 692 >> 2] | 0);
 if (i2) FUNCTION_TABLE_vi[HEAP32[i2 + 12 >> 2] & 127](i5);
 _FT_Stream_ReleaseFrame(HEAP32[i5 + 104 >> 2] | 0, i5 + 736 | 0);
 HEAP32[i5 + 732 >> 2] = 0;
 i3 = HEAP32[i5 + 104 >> 2] | 0;
 _ft_mem_free(HEAP32[i3 + 28 >> 2] | 0, HEAP32[i5 + 756 >> 2] | 0);
 HEAP32[i5 + 756 >> 2] = 0;
 _FT_Stream_ReleaseFrame(i3, i5 + 740 | 0);
 _ft_mem_free(i4, HEAP32[i5 + 672 >> 2] | 0);
 HEAP32[i5 + 672 >> 2] = 0;
 HEAP32[i5 + 668 >> 2] = 0;
 _FT_Stream_ReleaseFrame(i1, i5 + 656 | 0);
 _FT_Stream_ReleaseFrame(i1, i5 + 664 | 0);
 HEAP32[i5 + 652 >> 2] = 0;
 HEAP32[i5 + 660 >> 2] = 0;
 i3 = HEAP32[i5 + 712 >> 2] | 0;
 if (i3) {
  _ft_mem_free(i4, HEAP32[i3 + 4 >> 2] | 0);
  HEAP32[i3 + 4 >> 2] = 0;
  _ft_mem_free(i4, HEAP32[i3 + 8 >> 2] | 0);
  HEAP32[i3 + 8 >> 2] = 0;
  i1 = HEAP32[i3 + 20 >> 2] | 0;
  if (i1) {
   if (HEAP32[i3 >> 2] | 0) {
    i2 = 0;
    do {
     _ft_mem_free(i4, HEAP32[i1 + (i2 << 3) + 4 >> 2] | 0);
     i1 = HEAP32[i3 + 20 >> 2] | 0;
     HEAP32[i1 + (i2 << 3) + 4 >> 2] = 0;
     i2 = i2 + 1 | 0;
    } while (i2 >>> 0 < (HEAP32[i3 >> 2] | 0) >>> 0);
   }
   _ft_mem_free(i4, i1);
   HEAP32[i3 + 20 >> 2] = 0;
  }
  _ft_mem_free(i4, HEAP32[i3 + 28 >> 2] | 0);
  HEAP32[i3 + 28 >> 2] = 0;
  _ft_mem_free(i4, HEAP32[i3 + 36 >> 2] | 0);
  HEAP32[i3 + 36 >> 2] = 0;
  _ft_mem_free(i4, i3);
 }
 HEAP32[i5 + 712 >> 2] = 0;
 return;
}

function _t1_builder_start_point(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if ((HEAP32[i5 + 64 >> 2] | 0) == 3) {
  i7 = 0;
  return i7 | 0;
 }
 HEAP32[i5 + 64 >> 2] = 3;
 i3 = HEAP32[i5 + 20 >> 2] | 0;
 if (!i3) {
  i7 = 3;
  return i7 | 0;
 }
 if (!(HEAP8[i5 + 68 >> 0] | 0)) {
  HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
  i1 = i5 + 12 | 0;
 } else {
  i1 = HEAP32[i5 + 12 >> 2] | 0;
  if (((HEAP16[i1 + 20 >> 1] | 0) + 1 + (HEAP16[i1 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 8 >> 2] | 0) >>> 0 ? (i2 = _FT_GlyphLoader_CheckPoints(i1, 0, 1) | 0, (i2 | 0) != 0) : 0) {
   i7 = i2;
   return i7 | 0;
  }
  i1 = HEAP16[i3 >> 1] | 0;
  if (i1 << 16 >> 16 > 0) {
   HEAP16[(HEAP32[i3 + 12 >> 2] | 0) + ((i1 << 16 >> 16) + -1 << 1) >> 1] = (HEAPU16[i3 + 2 >> 1] | 0) + 65535;
   i1 = HEAP16[i3 >> 1] | 0;
  }
  HEAP16[i3 >> 1] = i1 + 1 << 16 >> 16;
  i1 = i5 + 12 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i4 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0, (i4 | 0) != 0) : 0) {
  i7 = i4;
  return i7 | 0;
 }
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 if (!(HEAP8[i5 + 68 >> 0] | 0)) i1 = i1 + 2 | 0; else {
  i3 = HEAP32[i1 + 4 >> 2] | 0;
  i4 = HEAP16[i1 + 2 >> 1] | 0;
  i5 = (HEAP32[i1 + 8 >> 2] | 0) + i4 | 0;
  HEAP32[i3 + (i4 << 3) >> 2] = (_FT_RoundFix(i6) | 0) >> 16;
  HEAP32[i3 + (i4 << 3) + 4 >> 2] = (_FT_RoundFix(i7) | 0) >> 16;
  HEAP8[i5 >> 0] = 1;
  i1 = i1 + 2 | 0;
 }
 HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
 i7 = 0;
 return i7 | 0;
}

function _gray_convert_glyph_inner(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = 4;
 i5 = _malloc(40) | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i6 = _saveSetjmp(i4 + 1256 | 0, 1, i5 | 0, i6 | 0) | 0;
 i5 = tempRet0;
 __THREW__ = 0;
 i1 = __THREW__;
 __THREW__ = 0;
 if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
  i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i6 | 0, i5 | 0) | 0;
  if (!i2) _longjmp(i1 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else i2 = -1;
 if ((i2 | 0) == 1) i1 = tempRet0; else i1 = 0;
 while (1) {
  if (i1) {
   i1 = 7;
   break;
  }
  __THREW__ = 0;
  i1 = invoke_iiii(67, i4 + 980 | 0, 275408, i4 | 0) | 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i6 | 0, i5 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   continue;
  }
  HEAP32[i7 >> 2] = i1;
  __THREW__ = 0;
  invoke_vi(82, i4 | 0);
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i6 | 0, i5 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) i1 = tempRet0; else {
   i1 = 6;
   break;
  }
 }
 if ((i1 | 0) == 6) {
  i5 = HEAP32[i7 >> 2] | 0;
  _free(i6 | 0);
  STACKTOP = i7;
  return i5 | 0;
 } else if ((i1 | 0) == 7) {
  HEAP32[i7 >> 2] = 64;
  i5 = HEAP32[i7 >> 2] | 0;
  _free(i6 | 0);
  STACKTOP = i7;
  return i5 | 0;
 }
 return 0;
}

function __ZN4math8float3x314RandomRotationERNS_3LCGE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0, f13 = f0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __ZN4math4Quat14RandomRotationERNS_3LCGE(i3, i2);
 __ZNK4math4Quat12IsNormalizedEf(i3, Math_fround(.00100000005)) | 0;
 f10 = Math_fround(HEAPF32[i3 >> 2]);
 f11 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f7 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f6 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 f4 = Math_fround(f11 * f11);
 f12 = Math_fround(f7 * f7);
 HEAPF32[i1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f4 + f12) * Math_fround(2.0)));
 f13 = Math_fround(f10 * f11);
 f5 = Math_fround(f7 * f6);
 HEAPF32[i1 + 4 >> 2] = Math_fround(Math_fround(f13 - f5) * Math_fround(2.0));
 f9 = Math_fround(f10 * f7);
 f8 = Math_fround(f11 * f6);
 HEAPF32[i1 + 8 >> 2] = Math_fround(Math_fround(f9 + f8) * Math_fround(2.0));
 HEAPF32[i1 + 12 >> 2] = Math_fround(Math_fround(f13 + f5) * Math_fround(2.0));
 f5 = Math_fround(f10 * f10);
 HEAPF32[i1 + 16 >> 2] = Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f5 + f12) * Math_fround(2.0)));
 f7 = Math_fround(f11 * f7);
 f6 = Math_fround(f10 * f6);
 HEAPF32[i1 + 20 >> 2] = Math_fround(Math_fround(f7 - f6) * Math_fround(2.0));
 HEAPF32[i1 + 24 >> 2] = Math_fround(Math_fround(f9 - f8) * Math_fround(2.0));
 HEAPF32[i1 + 28 >> 2] = Math_fround(Math_fround(f7 + f6) * Math_fround(2.0));
 HEAPF32[i1 + 32 >> 2] = Math_fround(Math_fround(1.0) - Math_fround(Math_fround(f5 + f4) * Math_fround(2.0)));
 STACKTOP = i3;
 return;
}

function _PCF_Face_Init(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 L1 : do if (_pcf_load_font(i4, i5) | 0) {
  _PCF_Face_Done(i5);
  i1 = _FT_Stream_OpenGzip(i5 + 132 | 0, i4) | 0;
  do if ((i1 & 255 | 0) != 7) {
   if ((i1 | 0) != 0 ? (i2 = _FT_Stream_OpenLZW(i5 + 132 | 0, i4) | 0, !((i2 | 0) == 0 & (i2 & 255 | 0) != 7)) : 0) break;
   HEAP32[i5 + 172 >> 2] = i4;
   HEAP32[i5 + 104 >> 2] = i5 + 132;
   if (!(_pcf_load_font(i5 + 132 | 0, i5) | 0)) break L1;
  } while (0);
  _PCF_Face_Done(i5);
  i5 = 2;
  STACKTOP = i3;
  return i5 | 0;
 } while (0);
 i1 = HEAP32[i5 + 180 >> 2] | 0;
 i2 = HEAP32[i5 + 176 >> 2] | 0;
 L11 : do if ((i1 | 0) != 0 & (i2 | 0) != 0) {
  switch (HEAP8[i1 >> 0] | 0) {
  case 73:
  case 105:
   break;
  default:
   {
    i1 = 0;
    break L11;
   }
  }
  switch (HEAP8[i1 + 1 >> 0] | 0) {
  case 83:
  case 115:
   break;
  default:
   {
    i1 = 0;
    break L11;
   }
  }
  switch (HEAP8[i1 + 2 >> 0] | 0) {
  case 79:
  case 111:
   break;
  default:
   {
    i1 = 0;
    break L11;
   }
  }
  if (_strcmp(i1 + 3 | 0, 324360) | 0) {
   if (_strcmp(i1 + 3 | 0, 324366) | 0) {
    i1 = 0;
    break;
   }
   if (_strcmp(i2, 324371) | 0) {
    i1 = 0;
    break;
   }
  }
  i1 = 1;
 } else i1 = 0; while (0);
 HEAP32[i3 >> 2] = i5;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP16[i3 + 8 >> 1] = 0;
 HEAP16[i3 + 10 >> 1] = 0;
 if (i1) {
  HEAP32[i3 + 4 >> 2] = 1970170211;
  HEAP16[i3 + 8 >> 1] = 3;
  HEAP16[i3 + 10 >> 1] = 1;
 }
 i5 = _FT_CMap_New(270652, 0, i3, 0) | 0;
 STACKTOP = i3;
 return i5 | 0;
}

function _ps_hints_t1reset(i6, i4) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (HEAP32[i6 + 4 >> 2] | 0) {
  STACKTOP = i7;
  return;
 }
 i5 = HEAP32[i6 >> 2] | 0;
 L4 : do if ((HEAP32[i6 + 12 >> 2] | 0) == 1) {
  i3 = HEAP32[i6 + 28 >> 2] | 0;
  if (i3) HEAP32[(HEAP32[i6 + 36 >> 2] | 0) + (i3 + -1 << 4) + 12 >> 2] = i4;
  i1 = HEAP32[i6 + 32 >> 2] | 0;
  do if ((i3 + 1 | 0) >>> 0 > i1 >>> 0) {
   HEAP32[i7 >> 2] = 0;
   i2 = _ft_mem_realloc(i5, 16, i1, i3 + 8 & -8, HEAP32[i6 + 36 >> 2] | 0, i7) | 0;
   HEAP32[i6 + 36 >> 2] = i2;
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i1) {
    HEAP32[i6 + 32 >> 2] = i3 + 8 & -8;
    i1 = i2;
    break;
   } else break L4;
  } else i1 = HEAP32[i6 + 36 >> 2] | 0; while (0);
  HEAP32[i1 + (i3 << 4) >> 2] = 0;
  HEAP32[i1 + (i3 << 4) + 12 >> 2] = 0;
  HEAP32[i6 + 28 >> 2] = i3 + 1;
  i3 = HEAP32[i6 + 64 >> 2] | 0;
  if (i3) HEAP32[(HEAP32[i6 + 72 >> 2] | 0) + (i3 + -1 << 4) + 12 >> 2] = i4;
  i1 = HEAP32[i6 + 68 >> 2] | 0;
  do if ((i3 + 1 | 0) >>> 0 > i1 >>> 0) {
   HEAP32[i7 >> 2] = 0;
   i2 = _ft_mem_realloc(i5, 16, i1, i3 + 8 & -8, HEAP32[i6 + 72 >> 2] | 0, i7) | 0;
   HEAP32[i6 + 72 >> 2] = i2;
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i1) {
    HEAP32[i6 + 68 >> 2] = i3 + 8 & -8;
    i1 = i2;
    break;
   } else break L4;
  } else i1 = HEAP32[i6 + 72 >> 2] | 0; while (0);
  HEAP32[i1 + (i3 << 4) >> 2] = 0;
  HEAP32[i1 + (i3 << 4) + 12 >> 2] = 0;
  HEAP32[i6 + 64 >> 2] = i3 + 1;
  STACKTOP = i7;
  return;
 } else i1 = 6; while (0);
 HEAP32[i6 + 4 >> 2] = i1;
 STACKTOP = i7;
 return;
}

function __ZN6String3SetEPKci(i7, i6, i2) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i6) {
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  i1 = HEAP32[i7 >> 2] | 0;
  if (!i1) return;
  HEAP8[i1 >> 0] = 0;
  return;
 }
 if ((i2 | 0) > 0) {
  i1 = 0;
  i4 = i6;
  while (1) {
   if (!(HEAP8[i4 >> 0] | 0)) {
    i4 = i1;
    break;
   }
   i1 = i1 + 1 | 0;
   i4 = i4 + 1 | 0;
   if ((i4 - i6 | 0) >= (i2 | 0)) {
    i4 = i1;
    break;
   }
  }
  if (i4) {
   i1 = HEAP32[i7 + 12 >> 2] | 0;
   do if ((i4 | 0) >= (i1 | 0) ? (i5 = i4 + 1 | 0, (i1 | 0) < (i5 | 0)) : 0) {
    if (!i5) {
     i1 = HEAP32[i7 >> 2] | 0;
     if (i1) __ZdaPv(i1);
     HEAP32[i7 >> 2] = 0;
     break;
    }
    i2 = __Znaj((i5 | 0) > -1 ? i5 : -1) | 0;
    HEAP32[i7 + 12 >> 2] = i5;
    if ((i4 | 0) > -1) HEAP8[i2 >> 0] = 0;
    i1 = HEAP32[i7 >> 2] | 0;
    if (i1) __ZdaPv(i1);
    HEAP32[i7 >> 2] = i2;
   } while (0);
   _memcpy(HEAP32[i7 >> 2] | 0, i6 | 0, i4 | 0) | 0;
   HEAP8[(HEAP32[i7 >> 2] | 0) + i4 >> 0] = 0;
   i2 = HEAP32[i7 >> 2] | 0;
   if ((i2 | 0) != 0 ? (i3 = HEAP8[i2 >> 0] | 0, i3 << 24 >> 24 != 0) : 0) {
    i1 = 0;
    do {
     i6 = (i3 & 255) >>> 7 & 255;
     i1 = (i6 ^ 1) + i1 + ((i3 & 255) >>> 6 & i6) | 0;
     i2 = i2 + 1 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
    } while (i3 << 24 >> 24 != 0);
   } else i1 = 0;
   HEAP32[i7 + 4 >> 2] = i1;
   HEAP32[i7 + 8 >> 2] = i4;
   return;
  }
 }
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i7 >> 2] = 0;
 return;
}

function _inflate_flush(i8, i9, i2) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP32[i9 + 12 >> 2] | 0;
 i5 = HEAP32[i8 + 48 >> 2] | 0;
 i1 = HEAP32[i8 + 52 >> 2] | 0;
 if (i5 >>> 0 > i1 >>> 0) i1 = HEAP32[i8 + 44 >> 2] | 0;
 i6 = i1 - i5 | 0;
 i1 = HEAP32[i9 + 16 >> 2] | 0;
 i6 = i6 >>> 0 > i1 >>> 0 ? i1 : i6;
 i4 = (i2 | 0) == -5 & (i6 | 0) != 0 ? 0 : i2;
 HEAP32[i9 + 16 >> 2] = i1 - i6;
 HEAP32[i9 + 20 >> 2] = i6 + (HEAP32[i9 + 20 >> 2] | 0);
 i1 = HEAP32[i8 + 56 >> 2] | 0;
 if (i1) {
  i3 = FUNCTION_TABLE_iiii[i1 & 127](HEAP32[i8 + 60 >> 2] | 0, i5, i6) | 0;
  HEAP32[i8 + 60 >> 2] = i3;
  HEAP32[i9 + 48 >> 2] = i3;
 }
 _memcpy(i7 | 0, i5 | 0, i6 | 0) | 0;
 if ((i5 + i6 | 0) != (HEAP32[i8 + 44 >> 2] | 0)) {
  i3 = i7 + i6 | 0;
  i7 = i5 + i6 | 0;
  HEAP32[i9 + 12 >> 2] = i3;
  HEAP32[i8 + 48 >> 2] = i7;
  return i4 | 0;
 }
 i3 = HEAP32[i8 + 40 >> 2] | 0;
 i1 = HEAP32[i8 + 52 >> 2] | 0;
 if ((i1 | 0) == (i5 + i6 | 0)) {
  HEAP32[i8 + 52 >> 2] = i3;
  i1 = i3;
 }
 i1 = i1 - i3 | 0;
 i2 = HEAP32[i9 + 16 >> 2] | 0;
 i1 = i1 >>> 0 > i2 >>> 0 ? i2 : i1;
 HEAP32[i9 + 16 >> 2] = i2 - i1;
 HEAP32[i9 + 20 >> 2] = i1 + (HEAP32[i9 + 20 >> 2] | 0);
 i2 = HEAP32[i8 + 56 >> 2] | 0;
 if (i2) {
  i5 = FUNCTION_TABLE_iiii[i2 & 127](HEAP32[i8 + 60 >> 2] | 0, i3, i1) | 0;
  HEAP32[i8 + 60 >> 2] = i5;
  HEAP32[i9 + 48 >> 2] = i5;
 }
 _memcpy(i7 + i6 | 0, i3 | 0, i1 | 0) | 0;
 i5 = (i4 | 0) == -5 & (i1 | 0) != 0 ? 0 : i4;
 i6 = i7 + (i1 + i6) | 0;
 i7 = i3 + i1 | 0;
 HEAP32[i9 + 12 >> 2] = i6;
 HEAP32[i8 + 48 >> 2] = i7;
 return i5 | 0;
}

function _parse_blend_axis_types(i2, i8) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 HEAP32[i9 >> 2] = 0;
 FUNCTION_TABLE_viiii[HEAP32[i8 + 60 >> 2] & 15](i8, i9 + 8 | 0, 4, i9 + 4 | 0);
 i1 = HEAP32[i9 + 4 >> 2] | 0;
 L1 : do if ((i1 | 0) >= 0) {
  if ((i1 | 0) == 0 | (i1 | 0) > 4) {
   HEAP32[i9 >> 2] = 3;
   i1 = 3;
   break;
  }
  i1 = _t1_allocate_blend(i2, 0, i1) | 0;
  HEAP32[i9 >> 2] = i1;
  if (!i1) {
   i7 = HEAP32[i2 + 532 >> 2] | 0;
   i4 = HEAP32[i2 + 100 >> 2] | 0;
   if ((HEAP32[i9 + 4 >> 2] | 0) > 0) {
    i6 = 0;
    while (1) {
     i5 = i9 + 8 + (i6 * 12 | 0) | 0;
     i1 = HEAP32[i5 >> 2] | 0;
     if ((HEAP8[i1 >> 0] | 0) == 47) {
      HEAP32[i5 >> 2] = i1 + 1;
      i1 = i1 + 1 | 0;
     }
     i2 = HEAP32[i9 + 8 + (i6 * 12 | 0) + 4 >> 2] | 0;
     i3 = i2 - i1 | 0;
     if ((i2 | 0) == (i1 | 0)) {
      i2 = 10;
      break;
     }
     i2 = _ft_mem_alloc(i4, i3 + 1 | 0, i9) | 0;
     HEAP32[i7 + 8 + (i6 << 2) >> 2] = i2;
     i1 = HEAP32[i9 >> 2] | 0;
     if (i1) break L1;
     _memcpy(i2 | 0, HEAP32[i5 >> 2] | 0, i3 | 0) | 0;
     HEAP8[i2 + i3 >> 0] = 0;
     i6 = i6 + 1 | 0;
     if ((i6 | 0) >= (HEAP32[i9 + 4 >> 2] | 0)) {
      i2 = 13;
      break;
     }
    }
    if ((i2 | 0) == 10) {
     HEAP32[i9 >> 2] = 3;
     i1 = 3;
     break;
    } else if ((i2 | 0) == 13) {
     i1 = HEAP32[i9 >> 2] | 0;
     break;
    }
   } else i1 = 0;
  }
 } else {
  HEAP32[i9 >> 2] = 162;
  i1 = 162;
 } while (0);
 HEAP32[i8 + 12 >> 2] = i1;
 STACKTOP = i9;
 return;
}

function __ZNK4math8float3x417BatchTransformPosEPNS_6float3Eii(i5, i3, i2, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i6 = 0, i7 = 0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i2 | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i1 = 0;
 do {
  i7 = Math_imul(i1, i4) | 0;
  f12 = Math_fround(HEAPF32[i3 + i7 >> 2]);
  f11 = Math_fround(HEAPF32[i3 + (i7 + 4) >> 2]);
  f8 = Math_fround(HEAPF32[i3 + (i7 + 8) >> 2]);
  f10 = Math_fround(f12 * Math_fround(HEAPF32[i5 >> 2]));
  f10 = Math_fround(f10 + Math_fround(f11 * Math_fround(HEAPF32[i5 + 4 >> 2])));
  f10 = Math_fround(f10 + Math_fround(f8 * Math_fround(HEAPF32[i5 + 8 >> 2])));
  f10 = Math_fround(Math_fround(HEAPF32[i5 + 12 >> 2]) + f10);
  f9 = Math_fround(f12 * Math_fround(HEAPF32[i5 + 16 >> 2]));
  f9 = Math_fround(f9 + Math_fround(f11 * Math_fround(HEAPF32[i5 + 20 >> 2])));
  f9 = Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i5 + 24 >> 2])));
  f9 = Math_fround(Math_fround(HEAPF32[i5 + 28 >> 2]) + f9);
  f12 = Math_fround(f12 * Math_fround(HEAPF32[i5 + 32 >> 2]));
  f11 = Math_fround(f12 + Math_fround(f11 * Math_fround(HEAPF32[i5 + 36 >> 2])));
  f8 = Math_fround(f11 + Math_fround(f8 * Math_fround(HEAPF32[i5 + 40 >> 2])));
  __ZN4math6float3C2Efff(i6, f10, f9, Math_fround(Math_fround(HEAPF32[i5 + 44 >> 2]) + f8));
  HEAP32[i3 + i7 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i3 + i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i3 + i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i2 | 0));
 STACKTOP = i6;
 return;
}

function _tt_load_sbit_metrics(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 switch (HEAPU16[i1 + 6 >> 1] | 0) {
 case 8:
 case 2:
 case 1:
  {
   i1 = _FT_Stream_ReadFields(i2, 285568, i4) | 0;
   if (i1) {
    i3 = i1;
    STACKTOP = i4;
    return i3 | 0;
   }
   HEAP8[i3 >> 0] = HEAP8[i4 >> 0] | 0;
   HEAP8[i3 + 1 >> 0] = HEAP8[i4 + 1 >> 0] | 0;
   HEAP8[i3 + 2 >> 0] = HEAP8[i4 + 2 >> 0] | 0;
   HEAP8[i3 + 3 >> 0] = HEAP8[i4 + 3 >> 0] | 0;
   HEAP8[i3 + 4 >> 0] = HEAP8[i4 + 4 >> 0] | 0;
   HEAP8[i3 + 5 >> 0] = 0;
   HEAP8[i3 + 6 >> 0] = 0;
   HEAP8[i3 + 7 >> 0] = 0;
   i3 = 0;
   STACKTOP = i4;
   return i3 | 0;
  }
 case 9:
 case 7:
 case 6:
  {
   i3 = _FT_Stream_ReadFields(i2, 285480, i3) | 0;
   STACKTOP = i4;
   return i3 | 0;
  }
 default:
  {
   switch (HEAP16[i1 + 4 >> 1] | 0) {
   case 5:
   case 2:
    break;
   default:
    {
     i3 = 3;
     STACKTOP = i4;
     return i3 | 0;
    }
   }
   i5 = HEAPU8[i1 + 16 >> 0] | HEAPU8[i1 + 16 + 1 >> 0] << 8 | HEAPU8[i1 + 16 + 2 >> 0] << 16 | HEAPU8[i1 + 16 + 3 >> 0] << 24;
   i2 = HEAPU8[i1 + 16 + 4 >> 0] | HEAPU8[i1 + 16 + 4 + 1 >> 0] << 8 | HEAPU8[i1 + 16 + 4 + 2 >> 0] << 16 | HEAPU8[i1 + 16 + 4 + 3 >> 0] << 24;
   HEAP8[i3 >> 0] = i5;
   HEAP8[i3 + 1 >> 0] = i5 >> 8;
   HEAP8[i3 + 2 >> 0] = i5 >> 16;
   HEAP8[i3 + 3 >> 0] = i5 >> 24;
   HEAP8[i3 + 4 >> 0] = i2;
   HEAP8[i3 + 4 + 1 >> 0] = i2 >> 8;
   HEAP8[i3 + 4 + 2 >> 0] = i2 >> 16;
   HEAP8[i3 + 4 + 3 >> 0] = i2 >> 24;
   i3 = 0;
   STACKTOP = i4;
   return i3 | 0;
  }
 }
 return 0;
}

function _tt_cmap4_set_range(i7, i1) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = HEAP32[i7 + 16 >> 2] | 0;
 i5 = HEAP32[i7 + 32 >> 2] | 0;
 if (i5 >>> 0 <= i1 >>> 0) {
  i8 = -1;
  return i8 | 0;
 }
 L4 : while (1) {
  i2 = i1 << 1;
  i4 = HEAPU8[i6 + (i2 + 14) >> 0] << 8 | HEAPU8[i6 + (i2 + 15) >> 0];
  HEAP32[i7 + 44 >> 2] = i4;
  i2 = (i5 << 1) + 2 + (i2 + 14) | 0;
  i9 = HEAPU8[i6 + i2 >> 0] << 8 | HEAPU8[i6 + (i2 | 1) >> 0];
  HEAP32[i7 + 40 >> 2] = i9;
  HEAP32[i7 + 48 >> 2] = HEAP8[i6 + (i2 + (i5 << 1)) >> 0] << 8 | HEAPU8[i6 + (i2 + (i5 << 1) | 1) >> 0];
  i2 = i2 + (i5 << 1) + (i5 << 1) | 0;
  i3 = HEAPU8[i6 + i2 >> 0] << 8 | HEAPU8[i6 + (i2 | 1) >> 0];
  if (i1 >>> 0 >= (i5 + -1 | 0) >>> 0 & (i9 | 0) == 65535 & (i4 | 0) == 65535) {
   i4 = HEAP32[i7 >> 2] | 0;
   if (!i3) {
    i2 = 0;
    break;
   }
   if ((i6 + (i2 + 2 + i3) | 0) >>> 0 > ((HEAP32[i4 + 500 >> 2] | 0) + (HEAP32[i4 + 504 >> 2] | 0) | 0) >>> 0) {
    i8 = 6;
    break;
   }
  }
  if ((i3 | 0) < 65535) {
   i8 = 12;
   break;
  }
  switch (i3 | 0) {
  case 65535:
   break;
  default:
   {
    i8 = 8;
    break L4;
   }
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= i5 >>> 0) {
   i1 = -1;
   i8 = 11;
   break;
  }
 }
 if ((i8 | 0) == 6) {
  HEAP32[i7 + 48 >> 2] = 1;
  i2 = 0;
 } else if ((i8 | 0) == 11) return i1 | 0; else if ((i8 | 0) == 12) switch (i3 | 0) {
 case 0:
  {
   i2 = 0;
   break;
  }
 default:
  i8 = 8;
 }
 if ((i8 | 0) == 8) i2 = i6 + (i3 + i2) | 0;
 HEAP32[i7 + 52 >> 2] = i2;
 HEAP32[i7 + 36 >> 2] = i1;
 i8 = 0;
 return i8 | 0;
}

function __ZN12DynHashTableI15GlyphCacheEntry4HashE11SetCapacityEm(i11, i1) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i11 + 4 >> 2] | 0;
 i8 = ((i1 + -1 | 0) >>> 1 | i1 + -1) >>> 2 | ((i1 + -1 | 0) >>> 1 | i1 + -1);
 i8 = (((i8 >>> 4 | i8) >>> 8 | (i8 >>> 4 | i8)) >>> 16 | ((i8 >>> 4 | i8) >>> 8 | (i8 >>> 4 | i8))) + 1 | 0;
 i8 = i8 >>> 0 > 16 ? i8 : 16;
 i10 = __Znaj(i8 >>> 0 > 1073741823 ? -1 : i8 << 2) | 0;
 _memset(i10 | 0, 0, i8 << 2 | 0) | 0;
 HEAP32[i11 + 4 >> 2] = i8 + -1;
 i1 = HEAP32[i11 >> 2] | 0;
 if (!((i9 | 0) == 0 | (i9 + 1 | 0) == 0)) {
  i7 = 0;
  do {
   i2 = HEAP32[i1 + (i7 << 2) >> 2] | 0;
   if (i2) do {
    i3 = i2 + 64 | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    i6 = i10 + (((HEAP32[i2 + 4 >> 2] ^ HEAP32[i2 >> 2]) & i8 + -1) << 2) | 0;
    i4 = HEAP32[i6 >> 2] | 0;
    if (!i4) {
     HEAP32[i6 >> 2] = i2;
     HEAP32[i3 >> 2] = 0;
    } else {
     i3 = HEAP32[i4 + 64 >> 2] | 0;
     if (!i3) i3 = i4 + 64 | 0; else {
      i4 = i3;
      do {
       HEAP32[i6 >> 2] = i4;
       i3 = i4 + 64 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
      } while ((i4 | 0) != 0);
     }
     HEAP32[i3 >> 2] = i2;
     HEAP32[(HEAP32[(HEAP32[i6 >> 2] | 0) + 64 >> 2] | 0) + 64 >> 2] = 0;
    }
    HEAP32[i1 + (i7 << 2) >> 2] = i5;
    i1 = HEAP32[i11 >> 2] | 0;
    i2 = HEAP32[i1 + (i7 << 2) >> 2] | 0;
   } while ((i2 | 0) != 0);
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != (i9 + 1 | 0));
 }
 if (!i1) {
  HEAP32[i11 >> 2] = i10;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i11 >> 2] = i10;
 return;
}

function __ZN8Graphics15ApplyDepthStateEPK10DepthState(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP32[i3 + 136 >> 2] | 0) == (i2 | 0)) {
  STACKTOP = i4;
  return;
 }
 i1 = HEAP16[i2 + 4 >> 1] | 0;
 if (i1 << 16 >> 16 == (HEAP16[i3 + 140 >> 1] | 0)) {
  STACKTOP = i4;
  return;
 }
 HEAP32[i3 + 136 >> 2] = i2;
 HEAP16[i3 + 140 >> 1] = i1;
 i1 = HEAP8[i2 + 6 >> 0] | 0;
 do if ((HEAP8[i3 + 142 >> 0] | 0) != i1 << 24 >> 24) if (!(i1 << 24 >> 24)) {
  _glDisable(2929);
  HEAP8[i3 + 142 >> 0] = 0;
  break;
 } else {
  _glEnable(2929);
  HEAP8[i3 + 142 >> 0] = 1;
  break;
 } while (0);
 i1 = HEAP8[i2 + 7 >> 0] | 0;
 if ((HEAP8[i3 + 143 >> 0] | 0) != i1 << 24 >> 24) {
  _glDepthMask(i1 | 0);
  HEAP8[i3 + 143 >> 0] = HEAP8[i2 + 7 >> 0] | 0;
 }
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if ((HEAP32[i3 + 144 >> 2] | 0) == (i1 | 0)) {
  STACKTOP = i4;
  return;
 }
 do switch (i1 | 0) {
 case 0:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291490, i4);
   break;
  }
 case 1:
  {
   _glDepthFunc(512);
   break;
  }
 case 2:
  {
   _glDepthFunc(513);
   break;
  }
 case 3:
  {
   _glDepthFunc(514);
   break;
  }
 case 4:
  {
   _glDepthFunc(515);
   break;
  }
 case 5:
  {
   _glDepthFunc(516);
   break;
  }
 case 6:
  {
   _glDepthFunc(517);
   break;
  }
 case 7:
  {
   _glDepthFunc(518);
   break;
  }
 case 8:
  {
   _glDepthFunc(519);
   break;
  }
 default:
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291545, i4 + 8 | 0);
 } while (0);
 HEAP32[i3 + 144 >> 2] = HEAP32[i2 + 8 >> 2];
 STACKTOP = i4;
 return;
}

function __ZN12VertexBufferaSERKS_(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if ((i5 | 0) == (i4 | 0)) return i5 | 0;
 i1 = HEAP32[i5 + 60 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i5 + 60 >> 2] = 0;
 HEAP32[i5 + 64 >> 2] = 0;
 if (__ZNK12VertexBuffer12HasGpuMemoryEv(i5) | 0) __ZN12VertexBuffer13FreeGpuMemoryEv(i5);
 __ZN5ArrayI13VertexElement9StdCAllocEaSERKS2_(i5 + 32 | 0, i4 + 32 | 0) | 0;
 HEAP32[i5 + 48 >> 2] = HEAP32[i4 + 48 >> 2];
 HEAP32[i5 + 48 + 4 >> 2] = HEAP32[i4 + 48 + 4 >> 2];
 HEAP32[i5 + 48 + 8 >> 2] = HEAP32[i4 + 48 + 8 >> 2];
 i2 = HEAP32[i4 + 68 >> 2] | 0;
 HEAP32[i5 + 68 >> 2] = i2;
 HEAP8[i5 + 4 >> 0] = HEAP8[i4 + 4 >> 0] | 0;
 HEAP32[i5 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
 HEAP32[i5 + 8 + 4 >> 2] = HEAP32[i4 + 8 + 4 >> 2];
 HEAP32[i5 + 8 + 8 >> 2] = HEAP32[i4 + 8 + 8 >> 2];
 HEAP32[i5 + 20 >> 2] = HEAP32[i4 + 20 >> 2];
 HEAP32[i5 + 20 + 4 >> 2] = HEAP32[i4 + 20 + 4 >> 2];
 HEAP32[i5 + 20 + 8 >> 2] = HEAP32[i4 + 20 + 8 >> 2];
 i1 = HEAP32[i4 + 60 >> 2] | 0;
 if (i1) {
  i3 = HEAP32[i5 + 60 >> 2] | 0;
  if (!i3) {
   i3 = Math_imul(i2, HEAP32[i5 + 56 >> 2] | 0) | 0;
   HEAP32[i5 + 64 >> 2] = i3;
   i3 = __Znaj(i3) | 0;
   HEAP32[i5 + 60 >> 2] = i3;
   i1 = HEAP32[i4 + 60 >> 2] | 0;
  }
  _memcpy(i3 | 0, i1 | 0, Math_imul(HEAP32[i4 + 68 >> 2] | 0, HEAP32[i4 + 56 >> 2] | 0) | 0) | 0;
 }
 if (!(__ZNK12VertexBuffer12HasGpuMemoryEv(i4) | 0)) return i5 | 0;
 __ZN12VertexBuffer17AllocateGpuMemoryE13ResourceUsagebb(i5, HEAP32[i5 + 72 >> 2] | 0, (HEAP8[i5 + 76 >> 0] | 0) != 0, (HEAP8[i5 + 77 >> 0] | 0) != 0);
 return i5 | 0;
}

function __ZNK6String7TrimmedEv(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 0;
  return;
 } else i1 = 0;
 while (1) {
  i5 = i3 + i1 | 0;
  if (((HEAP8[i5 >> 0] | 0) + -1 & 255) < 32) i1 = i1 + 1 | 0; else {
   i4 = i1;
   break;
  }
 }
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 while (1) {
  if ((i1 | 0) <= (i4 | 0)) break;
  i2 = i1 + -1 | 0;
  if (((HEAP8[i3 + i2 >> 0] | 0) + -1 & 255) < 32) i1 = i2; else break;
 }
 i1 = i1 - i4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 if (!((i1 | 0) > 0 & (i5 | 0) != 0)) return;
 do if ((i1 | 0) > -1) {
  if (!(i1 + 1 | 0)) {
   HEAP32[i6 >> 2] = 0;
   i7 = 12;
   break;
  }
  i4 = __Znaj((i1 + 1 | 0) > -1 ? i1 + 1 | 0 : -1) | 0;
  HEAP32[i6 + 12 >> 2] = i1 + 1;
  HEAP8[i4 >> 0] = 0;
  HEAP32[i6 >> 2] = i4;
  _memcpy(i4 | 0, i5 | 0, i1 | 0) | 0;
  HEAP8[i4 + i1 >> 0] = 0;
  i1 = HEAP8[i4 >> 0] | 0;
  if (!(i1 << 24 >> 24)) {
   i2 = 0;
   i1 = i4;
  } else {
   i2 = 0;
   i3 = i4;
   do {
    i5 = (i1 & 255) >>> 7 & 255;
    i2 = (i5 ^ 1) + i2 + ((i1 & 255) >>> 6 & i5) | 0;
    i3 = i3 + 1 | 0;
    i1 = HEAP8[i3 >> 0] | 0;
   } while (i1 << 24 >> 24 != 0);
   i1 = i4;
  }
 } else i7 = 12; while (0);
 if ((i7 | 0) == 12) {
  _memcpy(0, i5 | 0, i1 | 0) | 0;
  HEAP8[0 + i1 >> 0] = 0;
  i2 = 0;
  i1 = 0;
 }
 HEAP32[i6 + 4 >> 2] = i2;
 HEAP32[i6 + 8 >> 2] = _strlen(i1) | 0;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2, i5, i4, i1, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i6 = 0;
 L1 : do if ((i2 | 0) == (HEAP32[i5 + 8 >> 2] | 0)) {
  if ((HEAP32[i5 + 4 >> 2] | 0) == (i4 | 0) ? (HEAP32[i5 + 28 >> 2] | 0) != 1 : 0) HEAP32[i5 + 28 >> 2] = i1;
 } else {
  if ((i2 | 0) != (HEAP32[i5 >> 2] | 0)) {
   i6 = HEAP32[i2 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 7](i6, i5, i4, i1, i3);
   break;
  }
  if ((HEAP32[i5 + 16 >> 2] | 0) != (i4 | 0) ? (HEAP32[i5 + 20 >> 2] | 0) != (i4 | 0) : 0) {
   HEAP32[i5 + 32 >> 2] = i1;
   if ((HEAP32[i5 + 44 >> 2] | 0) == 4) break;
   HEAP8[i5 + 52 >> 0] = 0;
   HEAP8[i5 + 53 >> 0] = 0;
   i2 = HEAP32[i2 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 7](i2, i5, i4, i4, 1, i3);
   if (HEAP8[i5 + 53 >> 0] | 0) {
    if (!(HEAP8[i5 + 52 >> 0] | 0)) {
     i1 = 1;
     i6 = 13;
    }
   } else {
    i1 = 0;
    i6 = 13;
   }
   do if ((i6 | 0) == 13) {
    HEAP32[i5 + 20 >> 2] = i4;
    HEAP32[i5 + 40 >> 2] = (HEAP32[i5 + 40 >> 2] | 0) + 1;
    if ((HEAP32[i5 + 36 >> 2] | 0) == 1 ? (HEAP32[i5 + 24 >> 2] | 0) == 2 : 0) {
     HEAP8[i5 + 54 >> 0] = 1;
     if (i1) break;
    } else i6 = 16;
    if ((i6 | 0) == 16 ? i1 : 0) break;
    HEAP32[i5 + 44 >> 2] = 4;
    break L1;
   } while (0);
   HEAP32[i5 + 44 >> 2] = 3;
   break;
  }
  if ((i1 | 0) == 1) HEAP32[i5 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _cff_builder_start_point(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (HEAP8[i5 + 64 >> 0] | 0) {
  i7 = 0;
  return i7 | 0;
 }
 HEAP8[i5 + 64 >> 0] = 1;
 i3 = HEAP32[i5 + 20 >> 2] | 0;
 if (!(HEAP8[i5 + 65 >> 0] | 0)) {
  HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
  i1 = i5 + 12 | 0;
 } else {
  i1 = HEAP32[i5 + 12 >> 2] | 0;
  if (((HEAP16[i1 + 20 >> 1] | 0) + 1 + (HEAP16[i1 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 8 >> 2] | 0) >>> 0 ? (i2 = _FT_GlyphLoader_CheckPoints(i1, 0, 1) | 0, (i2 | 0) != 0) : 0) {
   i7 = i2;
   return i7 | 0;
  }
  i1 = HEAP16[i3 >> 1] | 0;
  if (i1 << 16 >> 16 > 0) {
   HEAP16[(HEAP32[i3 + 12 >> 2] | 0) + ((i1 << 16 >> 16) + -1 << 1) >> 1] = (HEAPU16[i3 + 2 >> 1] | 0) + 65535;
   i1 = HEAP16[i3 >> 1] | 0;
  }
  HEAP16[i3 >> 1] = i1 + 1 << 16 >> 16;
  i1 = i5 + 12 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i4 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0, (i4 | 0) != 0) : 0) {
  i7 = i4;
  return i7 | 0;
 }
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 if (!(HEAP8[i5 + 65 >> 0] | 0)) i1 = i1 + 2 | 0; else {
  i3 = HEAP32[i1 + 4 >> 2] | 0;
  i4 = HEAP16[i1 + 2 >> 1] | 0;
  i5 = (HEAP32[i1 + 8 >> 2] | 0) + i4 | 0;
  HEAP32[i3 + (i4 << 3) >> 2] = i6 >> 16;
  HEAP32[i3 + (i4 << 3) + 4 >> 2] = i7 >> 16;
  HEAP8[i5 >> 0] = 1;
  i1 = i1 + 2 | 0;
 }
 HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
 i7 = 0;
 return i7 | 0;
}

function _ft_var_readpackeddeltas(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = HEAP32[i9 + 28 >> 2] | 0;
 HEAP32[i11 >> 2] = 0;
 i1 = _ft_mem_realloc(i5, 2, 0, i7, 0, i11) | 0;
 if (!(HEAP32[i11 >> 2] | 0)) i8 = 0; else {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 while (1) {
  if (i8 >>> 0 >= i7 >>> 0) {
   i10 = 10;
   break;
  }
  i6 = _FT_Stream_GetChar(i9) | 0;
  if (!(i6 & 128)) {
   i2 = i8 - i7 | 0;
   i2 = i2 >>> 0 > ((i6 & 255 | -64) ^ 63) >>> 0 ? i2 : (i6 & 255 | -64) ^ 63;
   if (!(i6 & 64)) {
    i3 = i8;
    i4 = 0;
    while (1) {
     HEAP16[i1 + (i3 << 1) >> 1] = (_FT_Stream_GetChar(i9) | 0) << 24 >> 24;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (0 - i2 | 0)) {
      i3 = 0 - i2 | 0;
      break;
     } else i3 = i3 + 1 | 0;
    }
   } else {
    i3 = i8;
    i4 = 0;
    while (1) {
     HEAP16[i1 + (i3 << 1) >> 1] = _FT_Stream_GetUShort(i9) | 0;
     i4 = i4 + 1 | 0;
     if ((i4 | 0) == (0 - i2 | 0)) {
      i3 = 0 - i2 | 0;
      break;
     } else i3 = i3 + 1 | 0;
    }
   }
  } else {
   i2 = i8 - i7 | 0;
   i2 = i2 >>> 0 > ((i6 & 255 | -64) ^ 63) >>> 0 ? i2 : (i6 & 255 | -64) ^ 63;
   _memset(i1 + (i8 << 1) | 0, 0, Math_imul(i2, -2) | 0) | 0;
   i3 = 0 - i2 | 0;
  }
  if (i3 >>> 0 > (i6 & 63) >>> 0) i8 = i8 - i2 | 0; else break;
 }
 if ((i10 | 0) == 10) {
  STACKTOP = i11;
  return i1 | 0;
 }
 _ft_mem_free(i5, i1);
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function _cid_parse_font_matrix(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = HEAP32[i1 + 96 >> 2] | 0;
 if ((i5 | 0) <= -1) {
  STACKTOP = i7;
  return 0;
 }
 if ((i5 | 0) >= (HEAP32[i2 + 300 >> 2] | 0)) {
  STACKTOP = i7;
  return 0;
 }
 i6 = HEAP32[i2 + 304 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[i1 + 52 >> 2] & 63](i1, 6, i7, 3) | 0;
 i1 = HEAP32[i7 + 12 >> 2] | 0;
 i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 HEAP16[i2 + 68 >> 1] = _FT_DivFix(65536, _FT_DivFix(i1, 1e3) | 0) | 0;
 if ((i1 | 0) == 65536) {
  i1 = i7 + 8 | 0;
  i2 = i7 + 16 | 0;
  i3 = i7 + 20 | 0;
  i4 = i7 + 4 | 0;
 } else {
  HEAP32[i7 >> 2] = _FT_DivFix(HEAP32[i7 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 4 >> 2] = _FT_DivFix(HEAP32[i7 + 4 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 8 >> 2] = _FT_DivFix(HEAP32[i7 + 8 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 16 >> 2] = _FT_DivFix(HEAP32[i7 + 16 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 20 >> 2] = _FT_DivFix(HEAP32[i7 + 20 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 12 >> 2] = 65536;
  i1 = i7 + 8 | 0;
  i2 = i7 + 16 | 0;
  i3 = i7 + 20 | 0;
  i4 = i7 + 4 | 0;
 }
 HEAP32[i6 + (i5 * 252 | 0) + 216 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 + (i5 * 252 | 0) + 224 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i6 + (i5 * 252 | 0) + 220 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i6 + (i5 * 252 | 0) + 228 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i6 + (i5 * 252 | 0) + 232 >> 2] = HEAP32[i2 >> 2] >> 16;
 HEAP32[i6 + (i5 * 252 | 0) + 236 >> 2] = HEAP32[i3 >> 2] >> 16;
 STACKTOP = i7;
 return 0;
}
function _mbrtowc(i2, i3, i7, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = (i1 | 0) == 0 ? 282180 : i1;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i3) if (!i1) i1 = 0; else i8 = 15; else {
  i5 = (i2 | 0) == 0 ? i9 : i2;
  if (!i7) i1 = -2; else {
   if (!i1) {
    i1 = HEAP8[i3 >> 0] | 0;
    if (i1 << 24 >> 24 > -1) {
     HEAP32[i5 >> 2] = i1 & 255;
     i1 = i1 << 24 >> 24 != 0 & 1;
     break;
    }
    if (((i1 & 255) + -194 | 0) >>> 0 > 50) {
     i8 = 15;
     break;
    }
    i1 = HEAP32[281432 + ((i1 & 255) + -194 << 2) >> 2] | 0;
    if (i7 + -1 | 0) {
     i2 = i7 + -1 | 0;
     i3 = i3 + 1 | 0;
     i8 = 9;
    }
   } else {
    i2 = i7;
    i8 = 9;
   }
   L11 : do if ((i8 | 0) == 9) {
    i4 = HEAP8[i3 >> 0] | 0;
    if ((((i4 & 255) >>> 3) + -16 | ((i4 & 255) >>> 3) + (i1 >> 26)) >>> 0 > 7) {
     i8 = 15;
     break L1;
    }
    while (1) {
     i3 = i3 + 1 | 0;
     i1 = (i4 & 255) + -128 | i1 << 6;
     i2 = i2 + -1 | 0;
     if ((i1 | 0) >= 0) break;
     if (!i2) break L11;
     i4 = HEAP8[i3 >> 0] | 0;
     if ((i4 & -64) << 24 >> 24 != -128) {
      i8 = 15;
      break L1;
     }
    }
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = i1;
    i1 = i7 - i2 | 0;
    break L1;
   } while (0);
   HEAP32[i6 >> 2] = i1;
   i1 = -2;
  }
 } while (0);
 if ((i8 | 0) == 15) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__16vectorIN5Input13KeyPressEventENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i9 + 4 >> 2] | 0) - i1 | 0) / 24 | 0) + 1 | 0;
 if (i3 >>> 0 > 178956970) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i6 = HEAP32[i9 >> 2] | 0;
  i7 = i6;
 } else {
  i7 = i1;
  i6 = i1;
 }
 i2 = i7;
 i1 = ((HEAP32[i9 + 8 >> 2] | 0) - i2 | 0) / 24 | 0;
 if (i1 >>> 0 < 89478485) {
  i1 = i1 << 1 >>> 0 < i3 >>> 0 ? i3 : i1 << 1;
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i2 = (i3 | 0) / 24 | 0;
   i1 = i3;
  } else {
   i2 = (i3 | 0) / 24 | 0;
   i10 = 6;
  }
 } else {
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  i1 = 178956970;
  i2 = (i3 | 0) / 24 | 0;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 * 24 | 0) | 0;
  i1 = i3;
 }
 i10 = i4 + (i2 * 24 | 0) | 0;
 HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 HEAP32[i10 + 16 >> 2] = HEAP32[i8 + 16 >> 2];
 HEAP32[i10 + 20 >> 2] = HEAP32[i8 + 20 >> 2];
 i10 = i4 + ((((i1 | 0) / -24 | 0) + i2 | 0) * 24 | 0) | 0;
 _memcpy(i10 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 HEAP32[i9 + 4 >> 2] = i4 + ((i2 + 1 | 0) * 24 | 0);
 HEAP32[i9 + 8 >> 2] = i4 + (i5 * 24 | 0);
 if (!i6) return;
 __ZdlPv(i6);
 return;
}

function _psh_hint_table_activate_mask(i12, i10, i3) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = HEAP32[i12 >> 2] | 0;
 if (i11) {
  i1 = i11;
  i2 = HEAP32[i12 + 8 >> 2] | 0;
  while (1) {
   i5 = i2 + 16 | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -5;
   HEAP32[i2 + 24 >> 2] = -1;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 28 | 0;
  }
 }
 if (!i10) {
  HEAP32[i12 + 4 >> 2] = 0;
  return;
 }
 i9 = 0;
 i5 = 0;
 i1 = 0;
 i2 = 0;
 while (1) {
  if (!i1) {
   i4 = i3 + 1 | 0;
   i1 = 128;
   i2 = HEAPU8[i3 >> 0] | 0;
  } else i4 = i3;
  if (((i1 & i2 | 0) != 0 ? (i7 = HEAP32[i12 + 8 >> 2] | 0, i6 = i7 + (i5 * 28 | 0) | 0, i7 = i7 + (i5 * 28 | 0) + 16 | 0, i8 = HEAP32[i7 >> 2] | 0, (i8 & 4 | 0) == 0) : 0) ? (HEAP32[i7 >> 2] = i8 | 4, i9 >>> 0 < i11 >>> 0) : 0) {
   HEAP32[(HEAP32[i12 + 12 >> 2] | 0) + (i9 << 2) >> 2] = i6;
   i9 = i9 + 1 | 0;
  }
  i5 = i5 + 1 | 0;
  if ((i5 | 0) == (i10 | 0)) break; else {
   i3 = i4;
   i1 = i1 >> 1;
  }
 }
 HEAP32[i12 + 4 >> 2] = i9;
 i1 = HEAP32[i12 + 12 >> 2] | 0;
 if ((i9 | 0) > 1) i6 = 1; else return;
 do {
  i2 = HEAP32[i1 + (i6 << 2) >> 2] | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i7 = i6;
  do {
   i8 = i7;
   i7 = i7 + -1 | 0;
   i4 = i1 + (i7 << 2) | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i5 >> 2] | 0) < (i3 | 0)) break;
   HEAP32[i1 + (i8 << 2) >> 2] = i5;
   HEAP32[i4 >> 2] = i2;
  } while ((i8 | 0) > 1);
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) != (i9 | 0));
 return;
}

function __ZNSt3__16vectorI5ImageNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i3 = (((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 36 | 0) + 1 | 0;
 if (i3 >>> 0 > 119304647) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i8);
  i1 = HEAP32[i8 >> 2] | 0;
 }
 i2 = ((HEAP32[i8 + 8 >> 2] | 0) - i1 | 0) / 36 | 0;
 if (i2 >>> 0 < 59652323) {
  i2 = i2 << 1 >>> 0 < i3 >>> 0 ? i3 : i2 << 1;
  i1 = ((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 36 | 0;
  if (!i2) {
   i3 = 0;
   i4 = 0;
  } else i5 = 6;
 } else {
  i2 = 119304647;
  i1 = ((HEAP32[i8 + 4 >> 2] | 0) - i1 | 0) / 36 | 0;
  i5 = 6;
 }
 if ((i5 | 0) == 6) {
  i3 = i2;
  i4 = __Znwj(i2 * 36 | 0) | 0;
 }
 i2 = i4 + (i1 * 36 | 0) | 0;
 i7 = i4 + (i3 * 36 | 0) | 0;
 __ZN5ImageC2ERKS_(i2, i6);
 i6 = i4 + ((i1 + 1 | 0) * 36 | 0) | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i8;
  i4 = i8 + 4 | 0;
 } else {
  i3 = i2;
  do {
   i1 = i1 + -36 | 0;
   __ZN5ImageC2ERKS_(i3 + -36 | 0, i1);
   i3 = i2 + -36 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i3 = i8;
  i4 = i8 + 4 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i8 + 4 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i8 + 8 >> 2] = i7;
 i2 = i5;
 while (1) {
  if ((i1 | 0) == (i2 | 0)) break;
  __ZN5ImageD2Ev(i1 + -36 | 0);
  i1 = i1 + -36 | 0;
 }
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function _open_face_from_buffer(i7, i3, i2, i6, i5, i9) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 var i1 = 0, i4 = 0, i8 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i10 = HEAP32[i7 >> 2] | 0;
 if (i7) if (i3) {
  i8 = _ft_mem_alloc(i10, 40, i11 + 32 | 0) | 0;
  i1 = HEAP32[i11 + 32 >> 2] | 0;
  if (!i1) {
   _FT_Stream_OpenMemory(i8, i3, i2);
   HEAP32[i8 + 24 >> 2] = 72;
   i1 = HEAP32[i11 + 32 >> 2] | 0;
   if (!i1) {
    HEAP32[i11 >> 2] = 2;
    HEAP32[i11 + 16 >> 2] = i8;
    if (i5) {
     HEAP32[i11 >> 2] = 10;
     i2 = HEAP32[i7 + 16 >> 2] | 0;
     L8 : do if ((i2 | 0) > 0) {
      i3 = i7 + 20 | 0;
      while (1) {
       i1 = HEAP32[i3 >> 2] | 0;
       i3 = i3 + 4 | 0;
       if (!(_strcmp(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0, i5) | 0)) break L8;
       if (i3 >>> 0 >= (i7 + 20 + (i2 << 2) | 0) >>> 0) {
        i1 = 0;
        break;
       }
      }
     } else i1 = 0; while (0);
     HEAP32[i11 + 20 >> 2] = i1;
    }
    i1 = _FT_Open_Face(i7, i11, i6, i9) | 0;
    if (!i1) {
     i10 = (HEAP32[i9 >> 2] | 0) + 8 | 0;
     HEAP32[i10 >> 2] = HEAP32[i10 >> 2] & -1025;
     i10 = 0;
     STACKTOP = i11;
     return i10 | 0;
    } else {
     _FT_Stream_Close(i8);
     _ft_mem_free(i10, i8);
     i10 = i1;
     STACKTOP = i11;
     return i10 | 0;
    }
   }
  } else i4 = 4;
 } else {
  i1 = 6;
  i4 = 4;
 } else {
  i1 = 33;
  i4 = 4;
 }
 _ft_mem_free(i10, i3);
 i10 = i1;
 STACKTOP = i11;
 return i10 | 0;
}

function _destroy_face(i8, i7, i2) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = HEAP32[i2 + 12 >> 2] | 0;
 i1 = HEAP32[i7 + 120 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](HEAP32[i7 + 116 >> 2] | 0);
 i1 = HEAP32[i7 + 84 >> 2] | 0;
 if (i1) do {
  _FT_Done_GlyphSlot(i1);
  i1 = HEAP32[i7 + 84 >> 2] | 0;
 } while ((i1 | 0) != 0);
 _FT_List_Finalize(i7 + 108 | 0, 8, i8, i2);
 HEAP32[i7 + 88 >> 2] = 0;
 i1 = HEAP32[i7 + 48 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i7);
 if ((HEAP32[i7 + 36 >> 2] | 0) > 0) {
  i4 = 0;
  do {
   i1 = HEAP32[(HEAP32[i7 + 40 >> 2] | 0) + (i4 << 2) >> 2] | 0;
   i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] | 0;
   i3 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0;
   if (i3) FUNCTION_TABLE_vi[i3 & 127](i1);
   _ft_mem_free(i2, i1);
   HEAP32[(HEAP32[i7 + 40 >> 2] | 0) + (i4 << 2) >> 2] = 0;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (HEAP32[i7 + 36 >> 2] | 0));
 }
 _ft_mem_free(i8, HEAP32[i7 + 40 >> 2] | 0);
 HEAP32[i7 + 40 >> 2] = 0;
 HEAP32[i7 + 36 >> 2] = 0;
 i1 = HEAP32[i5 + 52 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i7);
 i1 = HEAP32[i7 + 104 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i5 = HEAP32[i7 + 8 >> 2] & 1024, i6 = HEAP32[i1 + 28 >> 2] | 0, _FT_Stream_Close(i1), (i5 | 0) == 0) : 0) _ft_mem_free(i6, i1);
 HEAP32[i7 + 104 >> 2] = 0;
 i1 = HEAP32[i7 + 128 >> 2] | 0;
 if (!i1) {
  _ft_mem_free(i8, i7);
  return;
 }
 _ft_mem_free(i8, i1);
 HEAP32[i7 + 128 >> 2] = 0;
 _ft_mem_free(i8, i7);
 return;
}

function __Z23DecodeDXT1BlockToRGB565PKtPhiii(i3, i2, i11, i10, i9) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0;
 i6 = HEAP16[i3 >> 1] | 0;
 i7 = HEAP16[i3 + 2 >> 1] | 0;
 if ((i6 & 65535) > (i7 & 65535)) {
  i1 = ((((((i6 & 65535) >>> 5 & 63) << 1) + ((i7 & 65535) >>> 5 & 63) | 0) >>> 0) / 3 | 0) << 5 | ((((((i6 & 65535) >>> 11 & 65535) << 1) + ((i7 & 65535) >>> 11 & 65535) | 0) >>> 0) / 3 | 0) << 11 | (((((i6 & 31) << 1) + (i7 & 31) | 0) >>> 0) / 3 | 0);
  i8 = (((((((i7 & 65535) >>> 5 & 63) << 1) + ((i6 & 65535) >>> 5 & 63) | 0) >>> 0) / 3 | 0) << 5 | ((((((i7 & 65535) >>> 11 & 65535) << 1) + ((i6 & 65535) >>> 11 & 65535) | 0) >>> 0) / 3 | 0) << 11 | (((((i7 & 31) << 1) + (i6 & 31) | 0) >>> 0) / 3 | 0)) & 65535;
 } else {
  i1 = (((i7 & 65535) >>> 11 & 65535) + ((i6 & 65535) >>> 11 & 65535) | 0) >>> 1 << 11 | ((i7 & 31) + (i6 & 31) | 0) >>> 1 | (((i7 & 65535) >>> 5 & 63) + ((i6 & 65535) >>> 5 & 63) | 0) >>> 1 << 5;
  i8 = 0;
 }
 i5 = i1 & 65535;
 if ((i9 | 0) <= 0) return;
 if ((i10 | 0) > 0) {
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  i4 = 0;
 } else return;
 while (1) {
  i3 = 0;
  do {
   i12 = i1 & 3;
   i1 = i1 >>> 2;
   HEAP16[i2 + i3 >> 1] = i12 >>> 0 < 2 ? ((i12 | 0) == 0 ? i6 : i7) : (i12 | 0) == 2 ? i5 : i8;
   i3 = i3 + 2 | 0;
  } while ((i3 | 0) < (i10 << 1 | 0));
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == (i9 | 0)) break; else {
   i2 = i2 + i11 | 0;
   i1 = i1 >>> (4 - i10 << 1);
  }
 }
 return;
}

function __ZNK4math7Frustum9LeftPlaneEv(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i1 = (HEAP32[i4 + 8 >> 2] | 0) == 2;
 if ((HEAP32[i4 >> 2] | 0) != 2) {
  if (i1) __ZNK4math6float35CrossERKS0_(i5 + 24 | 0, i4 + 24 | 0, i4 + 36 | 0); else __ZNK4math6float35CrossERKS0_(i5 + 24 | 0, i4 + 36 | 0, i4 + 24 | 0);
  __ZNK4math6float3ngEv(i5 + 36 | 0, i5 + 24 | 0);
  __ZNK4math7Frustum12NearPlanePosEff(i5 + 12 | 0, i4, Math_fround(-1.0), Math_fround(0.0));
  __ZNK4math6float310NormalizedEv(i5, i5 + 36 | 0);
  __ZN4math5PlaneC2ERKNS_6float3ES3_(i3, i5 + 12 | 0, i5);
  STACKTOP = i5;
  return;
 }
 if (i1) {
  __ZNK4math6float35CrossERKS0_(i5 + 84 | 0, i4 + 24 | 0, i4 + 36 | 0);
  i1 = i4 + 36 | 0;
  i2 = i4 + 24 | 0;
 } else {
  __ZNK4math6float35CrossERKS0_(i5 + 84 | 0, i4 + 36 | 0, i4 + 24 | 0);
  i1 = i4 + 36 | 0;
  i2 = i4 + 24 | 0;
 }
 __ZNK4math6float3ngEv(i5 + 96 | 0, i5 + 84 | 0);
 Math_fround(__ZN4math6float313ScaleToLengthEf(i5 + 96 | 0, Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i4 + 56 >> 2]) * Math_fround(.5))))));
 __ZNK4math6float3plERKS0_(i5 + 72 | 0, i2, i5 + 96 | 0);
 if ((HEAP32[i4 + 8 >> 2] | 0) == 2) __ZNK4math6float35CrossERKS0_(i5 + 48 | 0, i1, i5 + 72 | 0); else __ZNK4math6float35CrossERKS0_(i5 + 48 | 0, i5 + 72 | 0, i1);
 __ZNK4math6float310NormalizedEv(i5 + 60 | 0, i5 + 48 | 0);
 __ZN4math5PlaneC2ERKNS_6float3ES3_(i3, i4 + 12 | 0, i5 + 60 | 0);
 STACKTOP = i5;
 return;
}

function __ZNK15MaxRectsBinPack21ContactPointScoreNodeEiiii(i2, i11, i12, i10, i9) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if ((i11 | 0) != 0 ? (i10 + i11 | 0) != (HEAP32[i2 >> 2] | 0) : 0) i1 = 0; else i1 = i9;
 if (!((i12 | 0) != 0 ? (i9 + i12 | 0) != (HEAP32[i2 + 4 >> 2] | 0) : 0)) i1 = i1 + i10 | 0;
 i8 = HEAP32[i2 + 12 >> 2] | 0;
 i6 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i8 | 0) == (i6 | 0)) {
  i12 = i1;
  return i12 | 0;
 }
 i7 = 0;
 do {
  i5 = HEAP32[i6 + (i7 << 4) >> 2] | 0;
  if ((i5 | 0) != (i10 + i11 | 0) ? ((HEAP32[i6 + (i7 << 4) + 8 >> 2] | 0) + i5 | 0) != (i11 | 0) : 0) i3 = i6 + (i7 << 4) + 4 | 0; else {
   i3 = i6 + (i7 << 4) + 4 | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   i4 = (HEAP32[i6 + (i7 << 4) + 12 >> 2] | 0) + i2 | 0;
   if ((i9 + i12 | 0) < (i2 | 0) | (i4 | 0) < (i12 | 0)) i2 = 0; else i2 = ((i4 | 0) <= (i9 + i12 | 0) ? i4 : i9 + i12 | 0) - ((i2 | 0) >= (i12 | 0) ? i2 : i12) | 0;
   i1 = i2 + i1 | 0;
  }
  i4 = HEAP32[i3 >> 2] | 0;
  if (!((i4 | 0) != (i9 + i12 | 0) ? ((HEAP32[i6 + (i7 << 4) + 12 >> 2] | 0) + i4 | 0) != (i12 | 0) : 0)) {
   i2 = (HEAP32[i6 + (i7 << 4) + 8 >> 2] | 0) + i5 | 0;
   if ((i10 + i11 | 0) < (i5 | 0) | (i2 | 0) < (i11 | 0)) i2 = 0; else i2 = ((i2 | 0) <= (i10 + i11 | 0) ? i2 : i10 + i11 | 0) - ((i5 | 0) >= (i11 | 0) ? i5 : i11) | 0;
   i1 = i2 + i1 | 0;
  }
  i7 = i7 + 1 | 0;
 } while (i7 >>> 0 < i8 - i6 >> 4 >>> 0);
 return i1 | 0;
}

function _gray_hline(i8, i3, i2, i1, i7) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i1 = (i1 >> 9 | 0) < 0 ? 0 - (i1 >> 9) | 0 : i1 >> 9;
 do if (HEAP32[i8 + 996 >> 2] & 2) if ((i1 & 511) >>> 0 > 256) {
  i6 = 512 - (i1 & 511) | 0;
  break;
 } else {
  i6 = (i1 & 511 | 0) == 256 ? 255 : i1 & 511;
  break;
 } else i6 = (i1 | 0) > 255 ? 255 : i1; while (0);
 i5 = (HEAP32[i8 + 16 >> 2] | 0) + i2 | 0;
 i4 = (HEAP32[i8 + 8 >> 2] | 0) + i3 | 0;
 i4 = (i4 | 0) < 32767 ? i4 : 32767;
 if (!i6) return;
 i1 = HEAP32[i8 + 1232 >> 2] | 0;
 i2 = HEAP32[i8 + 1244 >> 2] | 0;
 if ((i1 | 0) > 0 & (i2 | 0) == (i5 | 0)) {
  i2 = HEAPU16[i8 + 1040 + ((i1 + -1 | 0) * 6 | 0) + 2 >> 1] | 0;
  if ((i2 + (HEAP16[i8 + 1040 + ((i1 + -1 | 0) * 6 | 0) >> 1] | 0) | 0) == (i4 | 0) ? (HEAPU8[i8 + 1040 + ((i1 + -1 | 0) * 6 | 0) + 4 >> 0] | 0) == (i6 | 0) : 0) {
   HEAP16[i8 + 1040 + ((i1 + -1 | 0) * 6 | 0) + 2 >> 1] = i2 + i7;
   return;
  } else i2 = i5;
 }
 if ((i1 | 0) > 31 | (i2 | 0) != (i5 | 0)) {
  i3 = HEAP32[i8 + 1236 >> 2] | 0;
  if ((i1 | 0) > 0 & (i3 | 0) != 0) FUNCTION_TABLE_viiii[i3 & 15](i2, i1, i8 + 1040 | 0, HEAP32[i8 + 1240 >> 2] | 0);
  HEAP32[i8 + 1232 >> 2] = 0;
  HEAP32[i8 + 1244 >> 2] = i5;
  i1 = 0;
 }
 HEAP16[i8 + 1040 + (i1 * 6 | 0) >> 1] = i4;
 HEAP16[i8 + 1040 + (i1 * 6 | 0) + 2 >> 1] = i7;
 HEAP8[i8 + 1040 + (i1 * 6 | 0) + 4 >> 0] = i6;
 HEAP32[i8 + 1232 >> 2] = (HEAP32[i8 + 1232 >> 2] | 0) + 1;
 return;
}

function __ZN12VertexBufferD2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i4 + 60 >> 2] | 0;
 if (i1) {
  __ZdaPv(i1);
  HEAP32[i4 + 60 >> 2] = 0;
  HEAP32[i4 + 64 >> 2] = 0;
 }
 if (__ZNK12VertexBuffer12HasGpuMemoryEv(i4) | 0) __ZN12VertexBuffer13FreeGpuMemoryEv(i4);
 i1 = HEAP32[i4 + 116 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i4 + 116 >> 2] = 0;
 i2 = HEAP32[i4 + 100 >> 2] | 0;
 if (!(HEAP32[i4 + 112 >> 2] | 0)) {
  if (i2) i3 = 10;
 } else {
  i1 = 0;
  do {
   HEAP32[i2 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < (HEAP32[i4 + 112 >> 2] | 0) >>> 0);
  i3 = 10;
 }
 if ((i3 | 0) == 10) __ZdaPv(i2);
 HEAP32[i4 + 100 >> 2] = 0;
 HEAP32[i4 + 100 + 4 >> 2] = 0;
 HEAP32[i4 + 100 + 8 >> 2] = 0;
 HEAP32[i4 + 100 + 12 >> 2] = 0;
 i1 = HEAP32[i4 + 32 >> 2] | 0;
 if (HEAP32[i4 + 44 >> 2] | 0) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 * 52 | 0) >> 2] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 4 >> 2] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 8 >> 0] = 0;
   HEAP8[i1 + (i2 * 52 | 0) + 12 >> 0] = 0;
   HEAP32[i1 + (i2 * 52 | 0) + 48 >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 + 32 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i4 + 44 >> 2] | 0) >>> 0);
 }
 if (!i1) {
  HEAP32[i4 + 32 >> 2] = 0;
  HEAP32[i4 + 32 + 4 >> 2] = 0;
  HEAP32[i4 + 32 + 8 >> 2] = 0;
  HEAP32[i4 + 32 + 12 >> 2] = 0;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i4 + 32 >> 2] = 0;
 HEAP32[i4 + 32 + 4 >> 2] = 0;
 HEAP32[i4 + 32 + 8 >> 2] = 0;
 HEAP32[i4 + 32 + 12 >> 2] = 0;
 return;
}

function _tt_size_request(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 do if (!(HEAP32[i1 + 8 >> 2] & 2)) i2 = 0; else {
  i2 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 + 532 >> 2] | 0) + 148 >> 2] & 127](i1, i3, i5) | 0;
  if (i2) {
   HEAP32[i4 + 112 >> 2] = -1;
   i1 = HEAP32[i4 >> 2] | 0;
   break;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 + 112 >> 2] = i1;
  if (HEAP32[i2 + 8 >> 2] & 1) {
   _FT_Select_Metrics(i2, i1);
   _tt_size_reset(i4) | 0;
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i2 + 532 >> 2] | 0) + 152 >> 2] & 127](i2, i1, i4 + 12 | 0) | 0;
  if (!i1) {
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  HEAP32[i4 + 112 >> 2] = -1;
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 } while (0);
 _FT_Request_Metrics(i1, i3);
 if (!(HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] & 1)) {
  i4 = i2;
  STACKTOP = i5;
  return i4 | 0;
 }
 i3 = _tt_size_reset(i4) | 0;
 HEAP32[i4 + 12 >> 2] = HEAP32[i4 + 44 >> 2];
 HEAP32[i4 + 12 + 4 >> 2] = HEAP32[i4 + 44 + 4 >> 2];
 HEAP32[i4 + 12 + 8 >> 2] = HEAP32[i4 + 44 + 8 >> 2];
 HEAP32[i4 + 12 + 12 >> 2] = HEAP32[i4 + 44 + 12 >> 2];
 HEAP32[i4 + 12 + 16 >> 2] = HEAP32[i4 + 44 + 16 >> 2];
 HEAP32[i4 + 12 + 20 >> 2] = HEAP32[i4 + 44 + 20 >> 2];
 HEAP32[i4 + 12 + 24 >> 2] = HEAP32[i4 + 44 + 24 >> 2];
 i4 = i3;
 STACKTOP = i5;
 return i4 | 0;
}

function _TT_New_Context(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 if (i1) {
  i3 = i1;
  STACKTOP = i4;
  return i3 | 0;
 }
 i1 = _ft_mem_alloc(i2, 608, i4) | 0;
 if (HEAP32[i4 >> 2] | 0) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i1 + 432 >> 2] = 32;
 HEAP32[i1 + 436 >> 2] = _ft_mem_realloc(i2, 20, 0, 32, 0, i4 + 4 | 0) | 0;
 if (HEAP32[i4 + 4 >> 2] | 0) {
  i2 = HEAP32[i1 + 8 >> 2] | 0;
  HEAP16[i1 + 440 >> 1] = 0;
  HEAP16[i1 + 442 >> 1] = 0;
  _ft_mem_free(i2, HEAP32[i1 + 24 >> 2] | 0);
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  _ft_mem_free(i2, HEAP32[i1 + 436 >> 2] | 0);
  HEAP32[i1 + 436 >> 2] = 0;
  HEAP32[i1 + 432 >> 2] = 0;
  HEAP32[i1 + 428 >> 2] = 0;
  _ft_mem_free(i2, HEAP32[i1 + 392 >> 2] | 0);
  HEAP32[i1 + 392 >> 2] = 0;
  HEAP32[i1 + 388 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  _ft_mem_free(i2, i1);
  i2 = HEAP32[i4 + 4 >> 2] | 0;
  HEAP32[i4 >> 2] = i2;
  if (i2) {
   i3 = 0;
   STACKTOP = i4;
   return i3 | 0;
  }
 } else {
  HEAP16[i1 + 440 >> 1] = 0;
  HEAP16[i1 + 442 >> 1] = 0;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 + 388 >> 2] = 0;
  HEAP32[i1 + 24 >> 2] = 0;
  HEAP32[i1 + 392 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
 }
 HEAP32[i3 + 28 >> 2] = i1;
 i3 = i1;
 STACKTOP = i4;
 return i3 | 0;
}

function _PCF_Face_Done(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!i5) return;
 i4 = HEAP32[i5 + 100 >> 2] | 0;
 _ft_mem_free(i4, HEAP32[i5 + 300 >> 2] | 0);
 HEAP32[i5 + 300 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i5 + 292 >> 2] | 0);
 HEAP32[i5 + 292 >> 2] = 0;
 i1 = HEAP32[i5 + 284 >> 2] | 0;
 if ((i1 | 0) != 0 ? (HEAP32[i5 + 280 >> 2] | 0) > 0 : 0) {
  i2 = 0;
  while (1) {
   i3 = i1 + (i2 * 12 | 0) | 0;
   if ((i3 | 0) != 0 ? (_ft_mem_free(i4, HEAP32[i3 >> 2] | 0), HEAP32[i3 >> 2] = 0, (HEAP8[i1 + (i2 * 12 | 0) + 4 >> 0] | 0) != 0) : 0) {
    i3 = i1 + (i2 * 12 | 0) + 8 | 0;
    _ft_mem_free(i4, HEAP32[i3 >> 2] | 0);
    HEAP32[i3 >> 2] = 0;
   }
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (HEAP32[i5 + 280 >> 2] | 0)) break;
   i1 = HEAP32[i5 + 284 >> 2] | 0;
  }
  i1 = HEAP32[i5 + 284 >> 2] | 0;
 }
 _ft_mem_free(i4, i1);
 HEAP32[i5 + 284 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i5 + 192 >> 2] | 0);
 HEAP32[i5 + 192 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i5 + 20 >> 2] | 0);
 HEAP32[i5 + 20 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i5 + 24 >> 2] | 0);
 HEAP32[i5 + 24 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i5 + 32 >> 2] | 0);
 HEAP32[i5 + 32 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i5 + 176 >> 2] | 0);
 HEAP32[i5 + 176 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i5 + 180 >> 2] | 0);
 HEAP32[i5 + 180 >> 2] = 0;
 i1 = HEAP32[i5 + 104 >> 2] | 0;
 if ((i1 | 0) != (i5 + 132 | 0)) return;
 _FT_Stream_Close(i1);
 HEAP32[i5 + 104 >> 2] = HEAP32[i5 + 172 >> 2];
 return;
}

function __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[i7 + 4 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i6 + 4 | 0;
  i4 = i7;
  i2 = HEAP32[i6 + 4 >> 2] | 0;
  i1 = i5;
 } else {
  i2 = HEAP32[i6 + 4 >> 2] | 0;
  do {
   i3 = i2 + -48 | 0;
   i4 = i1;
   i1 = i1 + -48 | 0;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i3, HEAP32[i1 >> 2] | 0);
   i3 = i2 + -32 | 0;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i3, HEAP32[i4 + -32 >> 2] | 0);
   i2 = i2 + -16 | 0;
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i2, HEAP32[i4 + -16 >> 2] | 0);
   i2 = (HEAP32[i6 + 4 >> 2] | 0) + -48 | 0;
   HEAP32[i6 + 4 >> 2] = i2;
  } while ((i1 | 0) != (i5 | 0));
  i3 = i6 + 4 | 0;
  i4 = i7;
  i1 = HEAP32[i7 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i2;
 HEAP32[i3 >> 2] = i1;
 i5 = HEAP32[i7 + 4 >> 2] | 0;
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i6 + 8 >> 2] = i5;
 i5 = HEAP32[i7 + 8 >> 2] | 0;
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i6 + 12 >> 2] = i5;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 return;
}

function __ZNSt3__16vectorIN5Input12PointerEventENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i12, i9) {
 i12 = i12 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = (((HEAP32[i12 + 4 >> 2] | 0) - i1 | 0) / 48 | 0) + 1 | 0;
 if (i3 >>> 0 > 89478485) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i10 = HEAP32[i12 >> 2] | 0;
  i11 = i10;
 } else {
  i11 = i1;
  i10 = i1;
 }
 i2 = i11;
 i1 = ((HEAP32[i12 + 8 >> 2] | 0) - i2 | 0) / 48 | 0;
 if (i1 >>> 0 < 44739242) {
  i1 = i1 << 1 >>> 0 < i3 >>> 0 ? i3 : i1 << 1;
  i3 = (HEAP32[i12 + 4 >> 2] | 0) - i2 | 0;
  if (!i1) {
   i4 = 0;
   i7 = 0;
   i6 = (i3 | 0) / 48 | 0;
   i5 = i3;
  } else {
   i2 = (i3 | 0) / 48 | 0;
   i8 = 6;
  }
 } else {
  i3 = (HEAP32[i12 + 4 >> 2] | 0) - i2 | 0;
  i1 = 89478485;
  i2 = (i3 | 0) / 48 | 0;
  i8 = 6;
 }
 if ((i8 | 0) == 6) {
  i4 = i1;
  i7 = __Znwj(i1 * 48 | 0) | 0;
  i6 = i2;
  i5 = i3;
 }
 i3 = i7 + (i4 * 48 | 0) | 0;
 i4 = i7 + (i6 * 48 | 0) | 0;
 i1 = i9;
 i2 = i4 + 48 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  i4 = i4 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i4 | 0) < (i2 | 0));
 i8 = i7 + ((((i5 | 0) / -48 | 0) + i6 | 0) * 48 | 0) | 0;
 _memcpy(i8 | 0, i11 | 0, i5 | 0) | 0;
 HEAP32[i12 >> 2] = i8;
 HEAP32[i12 + 4 >> 2] = i7 + ((i6 + 1 | 0) * 48 | 0);
 HEAP32[i12 + 8 >> 2] = i3;
 if (!i10) return;
 __ZdlPv(i10);
 return;
}

function _FT_Done_GlyphSlot(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 if (!i7) return;
 i5 = HEAP32[i7 + 4 >> 2] | 0;
 i2 = HEAP32[i5 + 96 >> 2] | 0;
 i6 = HEAP32[i2 + 8 >> 2] | 0;
 i1 = HEAP32[i5 + 84 >> 2] | 0;
 if (!i1) return; else i3 = 0;
 while (1) {
  if ((i1 | 0) == (i7 | 0)) break;
  i3 = HEAP32[i1 + 8 >> 2] | 0;
  if (!i3) {
   i4 = 21;
   break;
  } else {
   i8 = i1;
   i1 = i3;
   i3 = i8;
  }
 }
 if ((i4 | 0) == 21) return;
 i1 = HEAP32[i7 + 8 >> 2] | 0;
 if (!i3) HEAP32[i5 + 84 >> 2] = i1; else HEAP32[i3 + 8 >> 2] = i1;
 i1 = HEAP32[i7 + 20 >> 2] | 0;
 if (!i1) i3 = i6; else {
  FUNCTION_TABLE_vi[i1 & 127](i7);
  i3 = HEAP32[(HEAP32[i7 + 4 >> 2] | 0) + 96 >> 2] | 0;
  i2 = i3;
  i3 = HEAP32[i3 + 8 >> 2] | 0;
 }
 i1 = HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 68 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i7);
 i1 = HEAP32[i7 + 156 >> 2] | 0;
 if ((i1 | 0) != 0 ? (HEAP32[i1 + 4 >> 2] & 1 | 0) != 0 : 0) {
  _ft_mem_free(HEAP32[(HEAP32[i7 + 4 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i7 + 88 >> 2] | 0);
  HEAP32[i7 + 88 >> 2] = 0;
  i1 = HEAP32[i7 + 156 >> 2] | 0;
  HEAP32[i1 + 4 >> 2] = HEAP32[i1 + 4 >> 2] & -2;
 } else HEAP32[i7 + 88 >> 2] = 0;
 if (i1) {
  if (!(HEAP32[HEAP32[i2 >> 2] >> 2] & 512)) {
   _FT_GlyphLoader_Done(HEAP32[i1 >> 2] | 0);
   i1 = HEAP32[i7 + 156 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
  }
  _ft_mem_free(i3, i1);
  HEAP32[i7 + 156 >> 2] = 0;
 }
 _ft_mem_free(i6, i7);
 return;
}

function __ZNSt3__16vectorIN4math8TriangleENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i12, i9) {
 i12 = i12 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = (((HEAP32[i12 + 4 >> 2] | 0) - i1 | 0) / 36 | 0) + 1 | 0;
 if (i3 >>> 0 > 119304647) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i10 = HEAP32[i12 >> 2] | 0;
  i11 = i10;
 } else {
  i11 = i1;
  i10 = i1;
 }
 i2 = i11;
 i1 = ((HEAP32[i12 + 8 >> 2] | 0) - i2 | 0) / 36 | 0;
 if (i1 >>> 0 < 59652323) {
  i1 = i1 << 1 >>> 0 < i3 >>> 0 ? i3 : i1 << 1;
  i3 = (HEAP32[i12 + 4 >> 2] | 0) - i2 | 0;
  if (!i1) {
   i4 = 0;
   i7 = 0;
   i6 = (i3 | 0) / 36 | 0;
   i5 = i3;
  } else {
   i2 = (i3 | 0) / 36 | 0;
   i8 = 6;
  }
 } else {
  i3 = (HEAP32[i12 + 4 >> 2] | 0) - i2 | 0;
  i1 = 119304647;
  i2 = (i3 | 0) / 36 | 0;
  i8 = 6;
 }
 if ((i8 | 0) == 6) {
  i4 = i1;
  i7 = __Znwj(i1 * 36 | 0) | 0;
  i6 = i2;
  i5 = i3;
 }
 i3 = i7 + (i4 * 36 | 0) | 0;
 i4 = i7 + (i6 * 36 | 0) | 0;
 i1 = i9;
 i2 = i4 + 36 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  i4 = i4 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i4 | 0) < (i2 | 0));
 i8 = i7 + ((((i5 | 0) / -36 | 0) + i6 | 0) * 36 | 0) | 0;
 _memcpy(i8 | 0, i11 | 0, i5 | 0) | 0;
 HEAP32[i12 >> 2] = i8;
 HEAP32[i12 + 4 >> 2] = i7 + ((i6 + 1 | 0) * 36 | 0);
 HEAP32[i12 + 8 >> 2] = i3;
 if (!i10) return;
 __ZdlPv(i10);
 return;
}

function _T1_Get_Advances(i2, i5, i4, i1, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 1520 | 0;
 if (i1 & 16) {
  if (!i4) {
   i5 = 0;
   STACKTOP = i6;
   return i5 | 0;
  }
  _memset(i3 | 0, 0, i4 << 2 | 0) | 0;
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = FUNCTION_TABLE_iiiiiiiiii[HEAP32[HEAP32[(HEAP32[i2 + 488 >> 2] | 0) + 12 >> 2] >> 2] & 1](i6, i2, 0, 0, HEAP32[i2 + 420 >> 2] | 0, HEAP32[i2 + 532 >> 2] | 0, 0, 0, 151) | 0;
 if (i1) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP8[i6 + 70 >> 0] = 1;
 HEAP8[i6 + 68 >> 0] = 0;
 HEAP32[i6 + 1364 >> 2] = HEAP32[i2 + 404 >> 2];
 HEAP32[i6 + 1368 >> 2] = HEAP32[i2 + 408 >> 2];
 HEAP32[i6 + 1372 >> 2] = HEAP32[i2 + 412 >> 2];
 HEAP32[i6 + 1488 >> 2] = HEAP32[i2 + 548 >> 2];
 HEAP32[i6 + 1492 >> 2] = HEAP32[i2 + 544 >> 2];
 if (!i4) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i2 = 0;
 do {
  if (!(_T1_Parse_Glyph_And_Get_Char_String(i6, i2 + i5 | 0, i6 + 1504 | 0) | 0)) {
   i1 = HEAP32[(HEAP32[(HEAP32[i6 + 4 >> 2] | 0) + 128 >> 2] | 0) + 52 >> 2] | 0;
   if (i1) FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i1 + 4 >> 2] | 0, i6 + 1504 | 0);
   HEAP32[i3 + (i2 << 2) >> 2] = (_FT_RoundFix(HEAP32[i6 + 40 >> 2] | 0) | 0) >> 16;
  } else HEAP32[i3 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i4 | 0));
 i1 = 0;
 STACKTOP = i6;
 return i1 | 0;
}

function _cff_size_init(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 HEAP32[i7 + 196 >> 2] = 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i3 + 692 >> 2] | 0) + 2952 >> 2] | 0;
 i3 = _FT_Get_Module(HEAP32[(HEAP32[i3 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 L1 : do if (((i2 | 0) != 0 & (i3 | 0) != 0 ? (i1 = HEAP32[i2 >> 2] | 0, (i1 | 0) != 0) : 0) ? (i5 = FUNCTION_TABLE_ii[i1 & 63](i3) | 0, (i5 | 0) != 0) : 0) {
  i4 = HEAP32[i6 >> 2] | 0;
  i3 = HEAP32[i4 + 692 >> 2] | 0;
  i4 = _ft_mem_alloc(HEAP32[i4 + 100 >> 2] | 0, 1028, i7 + 196 | 0) | 0;
  i1 = HEAP32[i7 + 196 >> 2] | 0;
  L5 : do if (!i1) {
   _cff_make_private_dict(i3 + 1324 | 0, i7);
   i1 = FUNCTION_TABLE_iiii[HEAP32[i5 >> 2] & 127](HEAP32[(HEAP32[i6 >> 2] | 0) + 100 >> 2] | 0, i7, i4) | 0;
   HEAP32[i7 + 196 >> 2] = i1;
   if (!i1) {
    i2 = HEAP32[i3 + 1896 >> 2] | 0;
    while (1) {
     if (!i2) break;
     i2 = i2 + -1 | 0;
     _cff_make_private_dict(HEAP32[i3 + 1900 + (i2 << 2) >> 2] | 0, i7);
     i1 = FUNCTION_TABLE_iiii[HEAP32[i5 >> 2] & 127](HEAP32[(HEAP32[i6 >> 2] | 0) + 100 >> 2] | 0, i7, i4 + 4 + (i2 << 2) | 0) | 0;
     HEAP32[i7 + 196 >> 2] = i1;
     if (i1) break L5;
    }
    HEAP32[i6 + 40 >> 2] = i4;
    break L1;
   }
  } while (0);
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 } while (0);
 HEAP32[i6 + 44 >> 2] = -1;
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __Z19GenerateFlatNormalsR12VertexBufferb(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i4 + 16 + 4 >> 2] = 0;
 HEAP32[i4 + 16 + 8 >> 2] = 0;
 HEAP32[i4 + 16 + 12 >> 2] = 0;
 __Z23GenerateTriangleNormalsR12VertexBufferR5ArrayIN4math6float3E9StdCAllocEb(i2, i4 + 16 | 0, i1);
 i3 = HEAP32[i4 + 16 >> 2] | 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) >= (__ZNK12VertexBuffer13NumPrimitivesEv(i2) | 0)) break;
  i6 = i3 + (i1 * 12 | 0) | 0;
  i5 = i1 * 3 | 0;
  __ZN4math6float4C2ERKNS_6float3Ef(i4, i6, Math_fround(0.0));
  __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i2, i5, 2, 0, i4);
  __ZN4math6float4C2ERKNS_6float3Ef(i4, i6, Math_fround(0.0));
  __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i2, i5 + 1 | 0, 2, 0, i4);
  __ZN4math6float4C2ERKNS_6float3Ef(i4, i6, Math_fround(0.0));
  __ZN12VertexBuffer3SetEi18VertexDataSemanticiRKN4math6float4E(i2, i5 + 2 | 0, 2, 0, i4);
  i1 = i1 + 1 | 0;
 }
 i1 = HEAP32[i4 + 16 + 12 >> 2] | 0;
 if (!i1) {
  if (!i3) {
   STACKTOP = i4;
   return;
  }
 } else {
  i2 = 0;
  do {
   i6 = i3 + (i2 * 12 | 0) | 0;
   HEAP32[i6 >> 2] = HEAP32[i4 + 32 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i4 + 32 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i4 + 32 + 8 >> 2];
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i1 >>> 0);
 }
 __ZdaPv(i3);
 STACKTOP = i4;
 return;
}

function __ZN6Shader12LoadFromFileE10ShaderTypeR4FilePKcS4_S4_(i5, i10, i11, i8, i6, i7, i9) {
 i5 = i5 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 __ZN4File11SeekToStartEv(i8);
 i1 = HEAP32[i8 + 32 >> 2] | 0;
 if (i6) i4 = (_strlen(i6) | 0) + 1 | 0; else i4 = 0;
 i3 = i4 + i1 | 0;
 i2 = __Znaj((i3 | 0) < -1 ? -1 : i3 + 1 | 0) | 0;
 if (i6) {
  _strcpy(i2, i6) | 0;
  HEAP8[i2 + (i4 + -1) >> 0] = 10;
 }
 if ((__ZN4File9ReadBytesEPvi(i8, i2 + i4 | 0, i1) | 0) != (i1 | 0)) {
  HEAP32[i12 >> 2] = HEAP32[i8 + 4 >> 2];
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 304219, i12);
  HEAP32[i12 + 8 >> 2] = HEAP32[i8 + 4 >> 2];
  __ZN6ResultC2EPKcS1_i10ResultCodeS1_z(i5, 304262, 304352, 67, -1610579967, 304219, i12 + 8 | 0);
  STACKTOP = i12;
  return;
 }
 HEAP8[i2 + i3 >> 0] = 0;
 __ZN6Shader14LoadFromStringE10ShaderTypePKcS2_S2_S2_(i12 + 12 | 0, i10, i11, i2, i7, i9, HEAP32[i8 + 4 >> 2] | 0);
 __ZdaPv(i2);
 HEAP32[i5 >> 2] = HEAP32[i12 + 12 >> 2];
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 4 + 4 >> 2] = 0;
 HEAP32[i5 + 4 + 8 >> 2] = 0;
 HEAP32[i5 + 4 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i5 + 4 | 0, HEAP32[i12 + 12 + 4 >> 2] | 0);
 HEAP32[i5 >> 2] = HEAP32[i12 + 12 >> 2];
 i1 = HEAP32[i12 + 12 + 4 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i12 + 12 + 4 >> 2] = 0;
 STACKTOP = i12;
 return;
}

function _FT_CMap_New(i3, i7, i2, i9) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i10 >> 2] = 0;
 if ((i3 | 0) == 0 | (i2 | 0) == 0) {
  i8 = 6;
  STACKTOP = i10;
  return i8 | 0;
 }
 i4 = HEAP32[i2 >> 2] | 0;
 if (!i4) {
  i8 = 6;
  STACKTOP = i10;
  return i8 | 0;
 }
 i6 = HEAP32[i4 + 100 >> 2] | 0;
 i1 = _ft_mem_alloc(i6, HEAP32[i3 >> 2] | 0, i10) | 0;
 do if (!(HEAP32[i10 >> 2] | 0)) {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = i3;
  i2 = HEAP32[i3 + 4 >> 2] | 0;
  if (!((i2 | 0) != 0 ? (i7 = FUNCTION_TABLE_iii[i2 & 255](i1, i7) | 0, HEAP32[i10 >> 2] = i7, (i7 | 0) != 0) : 0)) i8 = 6;
  if ((i8 | 0) == 6 ? (i5 = HEAP32[i4 + 36 >> 2] | 0, i5 = _ft_mem_realloc(i6, 4, i5, i5 + 1 | 0, HEAP32[i4 + 40 >> 2] | 0, i10) | 0, HEAP32[i4 + 40 >> 2] = i5, (HEAP32[i10 >> 2] | 0) == 0) : 0) {
   i8 = HEAP32[i4 + 36 >> 2] | 0;
   HEAP32[i4 + 36 >> 2] = i8 + 1;
   HEAP32[i5 + (i8 << 2) >> 2] = i1;
   break;
  }
  i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] | 0;
  i3 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0;
  if (i3) FUNCTION_TABLE_vi[i3 & 127](i1);
  _ft_mem_free(i2, i1);
  i1 = 0;
 } while (0);
 if (i9) HEAP32[i9 >> 2] = i1;
 i8 = HEAP32[i10 >> 2] | 0;
 STACKTOP = i10;
 return i8 | 0;
}

function _af_iup_interp(i1, i9, i4, i5) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i6 = HEAP32[i4 + 28 >> 2] | 0;
 i3 = HEAP32[i5 + 28 >> 2] | 0;
 i7 = (HEAP32[i4 + 24 >> 2] | 0) - i6 | 0;
 i8 = (HEAP32[i5 + 24 >> 2] | 0) - i3 | 0;
 if (i1 >>> 0 > i9 >>> 0) return;
 if ((i3 | 0) == (i6 | 0)) {
  do {
   i5 = HEAP32[i1 + 28 >> 2] | 0;
   HEAP32[i1 + 24 >> 2] = ((i5 | 0) > (i6 | 0) ? i8 : i7) + i5;
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 <= i9 >>> 0);
  return;
 }
 if ((i3 | 0) > (i6 | 0)) {
  do {
   i2 = HEAP32[i1 + 28 >> 2] | 0;
   do if ((i2 | 0) > (i6 | 0)) if ((i2 | 0) < (i3 | 0)) {
    i10 = HEAP32[i4 + 24 >> 2] | 0;
    i2 = (_FT_MulDiv(i2 - i6 | 0, (HEAP32[i5 + 24 >> 2] | 0) - i10 | 0, i3 - i6 | 0) | 0) + i10 | 0;
    break;
   } else {
    i2 = i2 + i8 | 0;
    break;
   } else i2 = i2 + i7 | 0; while (0);
   HEAP32[i1 + 24 >> 2] = i2;
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 <= i9 >>> 0);
  return;
 } else {
  do {
   i2 = HEAP32[i1 + 28 >> 2] | 0;
   do if ((i2 | 0) > (i3 | 0)) if ((i2 | 0) < (i6 | 0)) {
    i10 = HEAP32[i4 + 24 >> 2] | 0;
    i2 = (_FT_MulDiv(i2 - i6 | 0, (HEAP32[i5 + 24 >> 2] | 0) - i10 | 0, i3 - i6 | 0) | 0) + i10 | 0;
    break;
   } else {
    i2 = i2 + i7 | 0;
    break;
   } else i2 = i2 + i8 | 0; while (0);
   HEAP32[i1 + 24 >> 2] = i2;
   i1 = i1 + 40 | 0;
  } while (i1 >>> 0 <= i9 >>> 0);
  return;
 }
}

function _tt_cmap4_next(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[i8 + 24 >> 2] | 0;
 L1 : do if (i1 >>> 0 <= 65534) {
  i7 = HEAP32[i8 + 40 >> 2] | 0;
  i3 = i7;
  i1 = (i1 + 1 | 0) >>> 0 < i7 >>> 0 ? i7 : i1 + 1 | 0;
  L3 : while (1) {
   i2 = HEAP32[i8 + 52 >> 2] | 0;
   i6 = HEAP32[i8 + 44 >> 2] | 0;
   i7 = HEAP32[i8 + 48 >> 2] | 0;
   L5 : do if (i1 >>> 0 <= i6 >>> 0) {
    if (!i2) while (1) {
     i2 = i1 + i7 & 65535;
     if (i2) {
      i3 = 11;
      break L3;
     }
     i1 = i1 + 1 | 0;
     if (i1 >>> 0 > i6 >>> 0) break L5;
    }
    i5 = i1;
    i2 = i2 + (i1 - i3 << 1) | 0;
    while (1) {
     i4 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
     i2 = i2 + 2 | 0;
     if ((i4 | 0) != 0 ? (i4 + i7 & 65535 | 0) != 0 : 0) {
      i1 = i5;
      i3 = 8;
      break L3;
     }
     i1 = i5 + 1 | 0;
     if (i1 >>> 0 > i6 >>> 0) break; else i5 = i1;
    }
   } while (0);
   if ((_tt_cmap4_set_range(i8, (HEAP32[i8 + 36 >> 2] | 0) + 1 | 0) | 0) < 0) break L1;
   i7 = HEAP32[i8 + 40 >> 2] | 0;
   i3 = i7;
   i1 = i1 >>> 0 < i7 >>> 0 ? i7 : i1;
  }
  if ((i3 | 0) == 8) {
   HEAP32[i8 + 24 >> 2] = i1;
   HEAP32[i8 + 28 >> 2] = i4 + i7 & 65535;
   return;
  } else if ((i3 | 0) == 11) {
   HEAP32[i8 + 24 >> 2] = i1;
   HEAP32[i8 + 28 >> 2] = i2;
   return;
  }
 } while (0);
 HEAP32[i8 + 24 >> 2] = -1;
 HEAP32[i8 + 28 >> 2] = 0;
 return;
}

function _pfr_face_done(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 if (!i4) return;
 i2 = HEAP32[(HEAP32[i4 + 96 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 i3 = HEAP32[i4 + 100 >> 2] | 0;
 _ft_mem_free(i3, HEAP32[i4 + 288 + 80 >> 2] | 0);
 HEAP32[i4 + 288 + 80 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i4 + 288 + 84 >> 2] | 0);
 HEAP32[i4 + 288 + 84 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i4 + 288 + 88 >> 2] | 0);
 HEAP32[i4 + 288 + 88 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i4 + 288 + 76 >> 2] | 0);
 HEAP32[i4 + 288 + 76 >> 2] = 0;
 HEAP32[i4 + 288 + 72 >> 2] = 0;
 HEAP32[i4 + 288 + 64 >> 2] = 0;
 HEAP32[i4 + 288 + 60 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i4 + 288 + 100 >> 2] | 0);
 HEAP32[i4 + 288 + 100 >> 2] = 0;
 HEAP32[i4 + 288 + 92 >> 2] = 0;
 HEAP32[i4 + 288 + 96 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i4 + 288 + 128 >> 2] | 0);
 HEAP32[i4 + 288 + 128 >> 2] = 0;
 HEAP32[i4 + 288 + 120 >> 2] = 0;
 HEAP32[i4 + 288 + 124 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i4 + 288 + 108 >> 2] | 0);
 HEAP32[i4 + 288 + 108 >> 2] = 0;
 HEAP32[i4 + 288 + 104 >> 2] = 0;
 i1 = HEAP32[i4 + 288 + 136 >> 2] | 0;
 if (i1) do {
  i5 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  _ft_mem_free(i3, i5);
 } while ((i1 | 0) != 0);
 HEAP32[i4 + 288 + 136 >> 2] = 0;
 HEAP32[i4 + 288 + 140 >> 2] = 0;
 HEAP32[i4 + 288 + 132 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i4 + 32 >> 2] | 0);
 HEAP32[i4 + 32 >> 2] = 0;
 return;
}

function __ZN6String7SPrintfEPKcz(i6, i4, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i7 >> 2] = i5;
 i3 = _vsnprintf(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 12 >> 2] | 0, i4, i7) | 0;
 i1 = HEAP32[i6 + 12 >> 2] | 0;
 if (!((i3 | 0) > -1 & (i3 | 0) < (i1 | 0))) {
  do if ((i1 | 0) < (i3 + 1 | 0)) {
   if (!(i3 + 1 | 0)) {
    i1 = HEAP32[i6 >> 2] | 0;
    if (i1) __ZdaPv(i1);
    HEAP32[i6 >> 2] = 0;
    break;
   }
   i2 = __Znaj((i3 + 1 | 0) > -1 ? i3 + 1 | 0 : -1) | 0;
   HEAP32[i6 + 12 >> 2] = i3 + 1;
   if ((i3 | 0) > -1) HEAP8[i2 >> 0] = 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i6 >> 2] = i2;
  } while (0);
  HEAP32[i7 >> 2] = i5;
  i3 = _vsnprintf(HEAP32[i6 >> 2] | 0, HEAP32[i6 + 12 >> 2] | 0, i4, i7) | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 + 8 >> 2] = _strlen(i2) | 0;
 if (!i2) {
  i5 = 0;
  i6 = i6 + 4 | 0;
  HEAP32[i6 >> 2] = i5;
  STACKTOP = i7;
  return i3 | 0;
 }
 i1 = HEAP8[i2 >> 0] | 0;
 if (!(i1 << 24 >> 24)) {
  i5 = 0;
  i6 = i6 + 4 | 0;
  HEAP32[i6 >> 2] = i5;
  STACKTOP = i7;
  return i3 | 0;
 } else {
  i4 = i1;
  i1 = 0;
 }
 do {
  i5 = (i4 & 255) >>> 7 & 255;
  i1 = (i5 ^ 1) + i1 + ((i4 & 255) >>> 6 & i5) | 0;
  i2 = i2 + 1 | 0;
  i4 = HEAP8[i2 >> 0] | 0;
 } while (i4 << 24 >> 24 != 0);
 i6 = i6 + 4 | 0;
 HEAP32[i6 >> 2] = i1;
 STACKTOP = i7;
 return i3 | 0;
}

function _t1_parse_font_matrix(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((FUNCTION_TABLE_iiiii[HEAP32[i2 + 52 >> 2] & 63](i2, 6, i7, 3) | 0) < 0) {
  HEAP32[i2 + 12 >> 2] = 3;
  STACKTOP = i7;
  return;
 }
 i1 = HEAP32[i7 + 12 >> 2] | 0;
 i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 if (!i1) {
  HEAP32[i2 + 12 >> 2] = 3;
  STACKTOP = i7;
  return;
 }
 HEAP16[i6 + 68 >> 1] = (_FT_DivFix(65536e3, i1) | 0) >>> 16;
 if ((i1 | 0) == 65536) {
  i1 = i7 + 8 | 0;
  i2 = i7 + 16 | 0;
  i3 = i7 + 4 | 0;
  i4 = HEAP32[i7 + 12 >> 2] | 0;
  i5 = HEAP32[i7 + 20 >> 2] | 0;
 } else {
  HEAP32[i7 >> 2] = _FT_DivFix(HEAP32[i7 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 4 >> 2] = _FT_DivFix(HEAP32[i7 + 4 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 8 >> 2] = _FT_DivFix(HEAP32[i7 + 8 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 16 >> 2] = _FT_DivFix(HEAP32[i7 + 16 >> 2] | 0, i1) | 0;
  i5 = _FT_DivFix(HEAP32[i7 + 20 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 20 >> 2] = i5;
  i4 = HEAP32[i7 + 12 >> 2] >> 31 & -131072 | 65536;
  HEAP32[i7 + 12 >> 2] = i4;
  i1 = i7 + 8 | 0;
  i2 = i7 + 16 | 0;
  i3 = i7 + 4 | 0;
 }
 HEAP32[i6 + 436 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 + 444 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 440 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i6 + 448 >> 2] = i4;
 HEAP32[i6 + 452 >> 2] = HEAP32[i2 >> 2] >> 16;
 HEAP32[i6 + 456 >> 2] = i5 >> 16;
 STACKTOP = i7;
 return;
}

function ___dynamic_cast(i2, i3, i6, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 i4 = i2 + (HEAP32[i5 + -8 >> 2] | 0) | 0;
 i5 = HEAP32[i5 + -4 >> 2] | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i7 + 4 >> 2] = i2;
 HEAP32[i7 + 8 >> 2] = i3;
 HEAP32[i7 + 12 >> 2] = i1;
 i1 = i7 + 16 | 0;
 i2 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP16[i7 + 16 + 36 >> 1] = 0;
 HEAP8[i7 + 16 + 38 >> 0] = 0;
 L1 : do if ((i5 | 0) == (i6 | 0)) {
  HEAP32[i7 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 20 >> 2] & 7](i6, i7, i4, i4, 1, 0);
  i1 = (HEAP32[i7 + 24 >> 2] | 0) == 1 ? i4 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 24 >> 2] & 7](i5, i7, i4, 1, 0);
  switch (HEAP32[i7 + 36 >> 2] | 0) {
  case 0:
   {
    i1 = ((HEAP32[i7 + 40 >> 2] | 0) == 1 ? (HEAP32[i7 + 28 >> 2] | 0) == 1 : 0) & (HEAP32[i7 + 32 >> 2] | 0) == 1 ? HEAP32[i7 + 20 >> 2] | 0 : 0;
    break L1;
   }
  case 1:
   break;
  default:
   {
    i1 = 0;
    break L1;
   }
  }
  if ((HEAP32[i7 + 24 >> 2] | 0) != 1 ? !(((HEAP32[i7 + 40 >> 2] | 0) == 0 ? (HEAP32[i7 + 28 >> 2] | 0) == 1 : 0) & (HEAP32[i7 + 32 >> 2] | 0) == 1) : 0) {
   i1 = 0;
   break;
  }
  i1 = HEAP32[i7 + 16 >> 2] | 0;
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _T1_Done_Blend(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP32[i6 + 100 >> 2] | 0;
 i4 = HEAP32[i6 + 532 >> 2] | 0;
 if (!i4) return;
 i1 = HEAP32[i4 >> 2] | 0;
 i5 = HEAP32[i4 + 4 >> 2] | 0;
 _ft_mem_free(i3, HEAP32[i4 + 24 >> 2] | 0);
 HEAP32[i4 + 24 >> 2] = 0;
 if (i1 >>> 0 > 1) _memset(i4 + 28 | 0, 0, (i1 << 2) + -4 | 0) | 0;
 _ft_mem_free(i3, HEAP32[i4 + 216 >> 2] | 0);
 HEAP32[i4 + 216 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i4 + 148 >> 2] | 0);
 HEAP32[i4 + 148 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i4 + 288 >> 2] | 0);
 HEAP32[i4 + 288 >> 2] = 0;
 if (i1) {
  i2 = 0;
  do {
   HEAP32[i4 + 212 + (i2 << 2) >> 2] = 0;
   HEAP32[i4 + 144 + (i2 << 2) >> 2] = 0;
   HEAP32[i4 + 284 + (i2 << 2) >> 2] = 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i1 | 0));
 }
 _ft_mem_free(i3, HEAP32[i4 + 136 >> 2] | 0);
 HEAP32[i4 + 136 >> 2] = 0;
 HEAP32[i4 + 140 >> 2] = 0;
 if (i5) {
  i1 = 0;
  do {
   i2 = i4 + 8 + (i1 << 2) | 0;
   _ft_mem_free(i3, HEAP32[i2 >> 2] | 0);
   HEAP32[i2 >> 2] = 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i5 | 0));
  if (i5) {
   i1 = 0;
   do {
    i2 = i4 + 88 + (i1 * 12 | 0) + 4 | 0;
    _ft_mem_free(i3, HEAP32[i2 >> 2] | 0);
    HEAP32[i2 >> 2] = 0;
    HEAP8[i4 + 88 + (i1 * 12 | 0) >> 0] = 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i5 | 0));
  }
 }
 _ft_mem_free(i3, HEAP32[i6 + 532 >> 2] | 0);
 HEAP32[i6 + 532 >> 2] = 0;
 return;
}

function __ZNK4math8float3x417BatchTransformDirEPNS_6float3Eii(i5, i1, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i6 = 0, i7 = 0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, f12 = f0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i3 | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i2 = 0;
 do {
  i7 = Math_imul(i2, i4) | 0;
  f12 = Math_fround(HEAPF32[i1 + i7 >> 2]);
  f9 = Math_fround(HEAPF32[i1 + (i7 + 4) >> 2]);
  f8 = Math_fround(HEAPF32[i1 + (i7 + 8) >> 2]);
  f11 = Math_fround(f12 * Math_fround(HEAPF32[i5 >> 2]));
  f11 = Math_fround(f11 + Math_fround(f9 * Math_fround(HEAPF32[i5 + 4 >> 2])));
  f11 = Math_fround(f11 + Math_fround(f8 * Math_fround(HEAPF32[i5 + 8 >> 2])));
  f10 = Math_fround(f12 * Math_fround(HEAPF32[i5 + 16 >> 2]));
  f10 = Math_fround(f10 + Math_fround(f9 * Math_fround(HEAPF32[i5 + 20 >> 2])));
  f10 = Math_fround(f10 + Math_fround(f8 * Math_fround(HEAPF32[i5 + 24 >> 2])));
  f12 = Math_fround(f12 * Math_fround(HEAPF32[i5 + 32 >> 2]));
  f9 = Math_fround(f12 + Math_fround(f9 * Math_fround(HEAPF32[i5 + 36 >> 2])));
  __ZN4math6float3C2Efff(i6, f11, f10, Math_fround(f9 + Math_fround(f8 * Math_fround(HEAPF32[i5 + 40 >> 2]))));
  HEAP32[i1 + i7 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i1 + i7 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i1 + i7 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i3 | 0));
 STACKTOP = i6;
 return;
}

function _T42_Face_Done(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) return;
 i1 = HEAP32[i3 + 100 >> 2] | 0;
 i2 = HEAP32[i3 + 500 >> 2] | 0;
 if (i2) _FT_Done_Face(i2) | 0;
 _ft_mem_free(i1, HEAP32[i3 + 132 >> 2] | 0);
 HEAP32[i3 + 132 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 136 >> 2] | 0);
 HEAP32[i3 + 136 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 140 >> 2] | 0);
 HEAP32[i3 + 140 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 144 >> 2] | 0);
 HEAP32[i3 + 144 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 148 >> 2] | 0);
 HEAP32[i3 + 148 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 428 >> 2] | 0);
 HEAP32[i3 + 428 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 424 >> 2] | 0);
 HEAP32[i3 + 424 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 420 >> 2] | 0);
 HEAP32[i3 + 420 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 396 >> 2] | 0);
 HEAP32[i3 + 396 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 400 >> 2] | 0);
 HEAP32[i3 + 400 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 372 + 12 >> 2] | 0);
 HEAP32[i3 + 372 + 12 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 372 + 16 >> 2] | 0);
 HEAP32[i3 + 372 + 16 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 364 >> 2] | 0);
 HEAP32[i3 + 364 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 492 >> 2] | 0);
 HEAP32[i3 + 492 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i3 + 536 + 20 >> 2] | 0);
 HEAP32[i3 + 536 + 20 >> 2] = 0;
 HEAP32[i3 + 536 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 return;
}

function __ZN12VertexBuffer11UpdateToGpuEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(HEAP32[i4 + 60 >> 2] | 0)) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 302971, i5);
  STACKTOP = i5;
  return;
 }
 if (!(HEAP32[i4 + 88 >> 2] | 0)) {
  HEAP32[i4 + 72 >> 2] = 3;
  HEAP8[i4 + 76 >> 0] = 1;
  HEAP8[i4 + 77 >> 0] = 1;
  _glGenBuffers(1, i4 + 88 | 0);
  if ((HEAP32[i4 + 72 >> 2] | 0) == 3) _glGenBuffers(1, i4 + 92 | 0);
  if (HEAP32[i4 + 60 >> 2] | 0) __ZN12VertexBuffer11UpdateToGpuEv(i4);
 }
 if ((HEAP32[i4 + 72 >> 2] | 0) == 3) {
  i3 = HEAP32[i4 + 88 >> 2] | 0;
  i1 = HEAP32[i4 + 92 >> 2] | 0;
  HEAP32[i4 + 88 >> 2] = i1;
  HEAP32[i4 + 92 >> 2] = i3;
  i3 = HEAP32[i4 + 80 >> 2] | 0;
  HEAP32[i4 + 80 >> 2] = HEAP32[i4 + 96 >> 2];
  HEAP32[i4 + 96 >> 2] = i3;
  i3 = i4 + 80 | 0;
 } else {
  i3 = i4 + 80 | 0;
  i1 = HEAP32[i4 + 88 >> 2] | 0;
 }
 _glBindBuffer(34962, i1 | 0);
 i1 = HEAP32[122] | 0;
 HEAP32[i1 + 296 >> 2] = HEAP32[i4 + 88 >> 2];
 HEAP32[i1 + 304 >> 2] = 0;
 i1 = HEAP32[i4 + 64 >> 2] | 0;
 i2 = HEAP32[i4 + 60 >> 2] | 0;
 if (i1 >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) {
  _glBufferData(34962, i1 | 0, i2 | 0, ((HEAP32[i4 + 72 >> 2] | 0) == 3 ? 35040 : 35044) | 0);
  HEAP32[i3 >> 2] = HEAP32[i4 + 64 >> 2];
  STACKTOP = i5;
  return;
 } else {
  _glBufferSubData(34962, 0, i1 | 0, i2 | 0);
  STACKTOP = i5;
  return;
 }
}

function _cff_get_ros(i1, i3, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0;
 i4 = HEAP32[i1 + 692 >> 2] | 0;
 if (!i4) {
  i6 = 0;
  return i6 | 0;
 }
 i2 = HEAP32[i4 + 1456 >> 2] | 0;
 if ((i2 | 0) == 65535) {
  i6 = 6;
  return i6 | 0;
 }
 if (i3) {
  i1 = HEAP32[i4 + 2964 >> 2] | 0;
  if (!i1) {
   if (i2 >>> 0 > 390) if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 > (i2 + -391 | 0) >>> 0) i1 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + (i2 + -391 << 2) >> 2] | 0; else i1 = 0; else {
    i1 = HEAP32[i4 + 2956 >> 2] | 0;
    if (!i1) i1 = 0; else i1 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](i2) | 0;
   }
   HEAP32[i4 + 2964 >> 2] = i1;
  }
  HEAP32[i3 >> 2] = i1;
 }
 if (i5) {
  i1 = HEAP32[i4 + 2968 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i4 + 1460 >> 2] | 0;
   do if ((i1 | 0) != 65535) if (i1 >>> 0 > 390) {
    if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 <= (i1 + -391 | 0) >>> 0) {
     i1 = 0;
     break;
    }
    i1 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + (i1 + -391 << 2) >> 2] | 0;
    break;
   } else {
    i2 = HEAP32[i4 + 2956 >> 2] | 0;
    if (!i2) {
     i1 = 0;
     break;
    }
    i1 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](i1) | 0;
    break;
   } else i1 = 0; while (0);
   HEAP32[i4 + 2968 >> 2] = i1;
  }
  HEAP32[i5 >> 2] = i1;
 }
 if (!i6) {
  i6 = 0;
  return i6 | 0;
 }
 HEAP32[i6 >> 2] = HEAP32[i4 + 1464 >> 2];
 i6 = 0;
 return i6 | 0;
}

function _vfprintf(i6, i5, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i2 = i7 + 80 | 0;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i7 + 120 >> 2] = HEAP32[i1 >> 2];
 if ((_printf_core(0, i5, i7 + 120 | 0, i7, i7 + 80 | 0) | 0) < 0) i1 = -1; else {
  if ((HEAP32[i6 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i6) | 0; else i3 = 0;
  i4 = HEAP32[i6 >> 2] | 0;
  if ((HEAP8[i6 + 74 >> 0] | 0) < 1) HEAP32[i6 >> 2] = i4 & -33;
  if (!(HEAP32[i6 + 48 >> 2] | 0)) {
   i2 = HEAP32[i6 + 44 >> 2] | 0;
   HEAP32[i6 + 44 >> 2] = i7 + 136;
   HEAP32[i6 + 28 >> 2] = i7 + 136;
   HEAP32[i6 + 20 >> 2] = i7 + 136;
   HEAP32[i6 + 48 >> 2] = 80;
   HEAP32[i6 + 16 >> 2] = i7 + 136 + 80;
   i1 = _printf_core(i6, i5, i7 + 120 | 0, i7, i7 + 80 | 0) | 0;
   if (i2) {
    FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 127](i6, 0, 0) | 0;
    i1 = (HEAP32[i6 + 20 >> 2] | 0) == 0 ? -1 : i1;
    HEAP32[i6 + 44 >> 2] = i2;
    HEAP32[i6 + 48 >> 2] = 0;
    HEAP32[i6 + 16 >> 2] = 0;
    HEAP32[i6 + 28 >> 2] = 0;
    HEAP32[i6 + 20 >> 2] = 0;
   }
  } else i1 = _printf_core(i6, i5, i7 + 120 | 0, i7, i7 + 80 | 0) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i2 | i4 & 32;
  if (i3) ___unlockfile(i6);
  i1 = (i2 & 32 | 0) == 0 ? i1 : -1;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _tt_face_load_gasp(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i5 + 28 >> 2] | 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 508 >> 2] & 63](i4, 1734439792, i5, 0) | 0;
 HEAP32[i6 >> 2] = i1;
 if (i1) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i5, 4) | 0;
 HEAP32[i6 >> 2] = i1;
 if (i1) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP16[i4 + 548 >> 1] = _FT_Stream_GetUShort(i5) | 0;
 HEAP16[i4 + 550 >> 1] = _FT_Stream_GetUShort(i5) | 0;
 _FT_Stream_ExitFrame(i5);
 if ((HEAPU16[i4 + 548 >> 1] | 0) > 1) {
  HEAP16[i4 + 550 >> 1] = 0;
  HEAP32[i6 >> 2] = 8;
  i5 = 8;
  STACKTOP = i6;
  return i5 | 0;
 }
 i3 = HEAP16[i4 + 550 >> 1] | 0;
 i2 = _ft_mem_realloc(i2, 4, 0, i3 & 65535, 0, i6) | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i5, (i3 & 65535) << 2) | 0;
 HEAP32[i6 >> 2] = i1;
 if (i1) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i4 + 552 >> 2] = i2;
 if (i3 << 16 >> 16) {
  i1 = 0;
  do {
   HEAP16[i2 + (i1 << 2) >> 1] = _FT_Stream_GetUShort(i5) | 0;
   HEAP16[i2 + (i1 << 2) + 2 >> 1] = _FT_Stream_GetUShort(i5) | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i3 & 65535 | 0));
 }
 _FT_Stream_ExitFrame(i5);
 i5 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = HEAP32[i8 + 8 >> 2] | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if ((i3 - i1 | 0) >>> 0 >= i2 >>> 0) {
  do {
   HEAP8[i1 >> 0] = 0;
   i1 = (HEAP32[i8 + 4 >> 2] | 0) + 1 | 0;
   HEAP32[i8 + 4 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  return;
 }
 i5 = HEAP32[i8 >> 2] | 0;
 if ((i1 - i5 + i2 | 0) < 0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i8);
  i3 = HEAP32[i8 + 8 >> 2] | 0;
  i4 = HEAP32[i8 >> 2] | 0;
 } else i4 = i5;
 i3 = i3 - i4 | 0;
 if (i3 >>> 0 < 1073741823) {
  i1 = i3 << 1 >>> 0 < (i1 - i5 + i2 | 0) >>> 0 ? i1 - i5 + i2 | 0 : i3 << 1;
  i3 = (HEAP32[i8 + 4 >> 2] | 0) - i4 | 0;
  if (!i1) {
   i4 = 0;
   i7 = 0;
  } else i6 = 8;
 } else {
  i1 = 2147483647;
  i3 = (HEAP32[i8 + 4 >> 2] | 0) - i4 | 0;
  i6 = 8;
 }
 if ((i6 | 0) == 8) {
  i4 = i1;
  i7 = __Znwj(i1) | 0;
 }
 i1 = i7 + i3 | 0;
 i6 = i7 + i4 | 0;
 i4 = i1;
 while (1) {
  HEAP8[i4 >> 0] = 0;
  i4 = i1 + 1 | 0;
  i5 = i4;
  i2 = i2 + -1 | 0;
  if (!i2) break; else i1 = i5;
 }
 i1 = HEAP32[i8 >> 2] | 0;
 i4 = (HEAP32[i8 + 4 >> 2] | 0) - i1 | 0;
 i7 = i7 + (i3 - i4) | 0;
 _memcpy(i7 | 0, i1 | 0, i4 | 0) | 0;
 HEAP32[i8 >> 2] = i7;
 HEAP32[i8 + 4 >> 2] = i5;
 HEAP32[i8 + 8 >> 2] = i6;
 if (!i1) return;
 __ZdlPv(i1);
 return;
}

function _Normalize(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((((i2 | 0) < 0 ? 0 - i2 | 0 : i2) | 0) < 65536 ? (((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0) < 65536 : 0) {
  HEAP32[i7 >> 2] = i2 << 8;
  HEAP32[i7 + 4 >> 2] = i3 << 8;
  i1 = _FT_Vector_Length(i7) | 0;
  if (!i1) {
   STACKTOP = i7;
   return;
  }
  HEAP16[i6 >> 1] = _FT_MulDiv(i2 << 8, 16384, i1) | 0;
  HEAP16[i6 + 2 >> 1] = _FT_MulDiv(i3 << 8, 16384, i1) | 0;
  STACKTOP = i7;
  return;
 }
 HEAP32[i7 >> 2] = i2;
 HEAP32[i7 + 4 >> 2] = i3;
 i4 = _FT_Vector_Length(i7) | 0;
 i5 = _FT_MulDiv(i2, 16384, i4) | 0;
 i4 = _FT_MulDiv(i3, 16384, i4) | 0;
 i3 = (Math_imul(i4, i4) | 0) + (Math_imul(i5, i5) | 0) | 0;
 i1 = (i5 | 0) < 0 ? 0 - i5 | 0 : i5;
 i2 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
 if ((i3 | 0) < 268435456) do {
  i3 = (i1 | 0) < (i2 | 0) & 1;
  i1 = i3 + i1 | 0;
  i2 = (i3 ^ 1) + i2 | 0;
  i3 = (Math_imul(i2, i2) | 0) + (Math_imul(i1, i1) | 0) | 0;
 } while ((i3 | 0) < 268435456);
 if ((i3 | 0) > 268451839) do {
  i3 = (i1 | 0) < (i2 | 0);
  i1 = (i3 << 31 >> 31) + i1 | 0;
  i2 = ((i3 ^ 1) << 31 >> 31) + i2 | 0;
 } while (((Math_imul(i1, i1) | 0) + (Math_imul(i2, i2) | 0) | 0) > 268451839);
 HEAP16[i6 >> 1] = (i5 | 0) > -1 ? i1 : 0 - i1 | 0;
 HEAP16[i6 + 2 >> 1] = (i4 | 0) > -1 ? i2 : 0 - i2 | 0;
 STACKTOP = i7;
 return;
}

function __ZN4File16OpenAbsolutePathEPKcS1_(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i6 = 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1) {
  if ((HEAP8[i5 + 28 >> 0] | 0) != 0 ? (HEAP8[i5 + 28 >> 0] = 0, _fclose(i1) | 0, i2 = HEAP32[i5 + 20 >> 2] | 0, (i2 | 0) != 0) : 0) {
   __ZdaPv(i2);
   i1 = i5 + 20 | 0;
  } else i1 = i5 + 20 | 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i5 + 24 >> 2] = 0;
  HEAP32[i5 + 32 >> 2] = 0;
 }
 i1 = _fopen(i4, i3) | 0;
 HEAP32[i5 >> 2] = i1;
 if ((HEAP32[i5 + 4 >> 2] | 0) != (i4 | 0)) {
  __ZN6String3SetEPKc(i5 + 4 | 0, i4);
  i1 = HEAP32[i5 >> 2] | 0;
 }
 if (!i1) {
  HEAP8[i5 + 28 >> 0] = 0;
  HEAP32[i5 + 32 >> 2] = 0;
  i6 = 0;
  return i6 | 0;
 }
 HEAP8[i5 + 28 >> 0] = 1;
 do if (!(HEAP32[i5 + 20 >> 2] | 0)) {
  _fseek(i1, 0, 2) | 0;
  if (!(HEAP32[i5 + 20 >> 2] | 0)) {
   i1 = HEAP32[i5 >> 2] | 0;
   if (i1) {
    i3 = _ftell(i1) | 0;
    i4 = HEAP32[i5 + 20 >> 2] | 0;
    HEAP32[i5 + 32 >> 2] = i3;
    if (i4) break;
   } else HEAP32[i5 + 32 >> 2] = -1;
   i1 = HEAP32[i5 >> 2] | 0;
   if (!i1) {
    i6 = 1;
    return i6 | 0;
   }
   _fseek(i1, 0, 0) | 0;
   i6 = 1;
   return i6 | 0;
  } else i6 = 16;
 } else {
  HEAP32[i5 + 24 >> 2] = HEAP32[i5 + 32 >> 2];
  i6 = 16;
 } while (0);
 if ((i6 | 0) == 16) HEAP32[i5 + 32 >> 2] = HEAP32[i5 + 24 >> 2];
 HEAP32[i5 + 24 >> 2] = 0;
 i6 = 1;
 return i6 | 0;
}

function __ZNK4math7Frustum10RightPlaneEv(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i1 = (HEAP32[i4 + 8 >> 2] | 0) == 2;
 if ((HEAP32[i4 >> 2] | 0) != 2) {
  if (i1) __ZNK4math6float35CrossERKS0_(i5 + 24 | 0, i4 + 24 | 0, i4 + 36 | 0); else __ZNK4math6float35CrossERKS0_(i5 + 24 | 0, i4 + 36 | 0, i4 + 24 | 0);
  __ZNK4math7Frustum12NearPlanePosEff(i5 + 12 | 0, i4, Math_fround(1.0), Math_fround(0.0));
  __ZNK4math6float310NormalizedEv(i5, i5 + 24 | 0);
  __ZN4math5PlaneC2ERKNS_6float3ES3_(i3, i5 + 12 | 0, i5);
  STACKTOP = i5;
  return;
 }
 if (i1) {
  __ZNK4math6float35CrossERKS0_(i5 + 72 | 0, i4 + 24 | 0, i4 + 36 | 0);
  i1 = i4 + 36 | 0;
  i2 = i4 + 24 | 0;
 } else {
  __ZNK4math6float35CrossERKS0_(i5 + 72 | 0, i4 + 36 | 0, i4 + 24 | 0);
  i1 = i4 + 36 | 0;
  i2 = i4 + 24 | 0;
 }
 Math_fround(__ZN4math6float313ScaleToLengthEf(i5 + 72 | 0, Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i4 + 56 >> 2]) * Math_fround(.5))))));
 __ZNK4math6float3plERKS0_(i5 + 60 | 0, i2, i5 + 72 | 0);
 if ((HEAP32[i4 + 8 >> 2] | 0) == 2) __ZNK4math6float35CrossERKS0_(i5 + 36 | 0, i5 + 60 | 0, i1); else __ZNK4math6float35CrossERKS0_(i5 + 36 | 0, i1, i5 + 60 | 0);
 __ZNK4math6float310NormalizedEv(i5 + 48 | 0, i5 + 36 | 0);
 __ZN4math5PlaneC2ERKNS_6float3ES3_(i3, i4 + 12 | 0, i5 + 48 | 0);
 STACKTOP = i5;
 return;
}

function _FT_Match_Size(i6, i2, i7, i8) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!(HEAP32[i6 + 8 >> 2] & 2)) {
  i8 = 35;
  return i8 | 0;
 }
 if (HEAP32[i2 >> 2] | 0) {
  i8 = 7;
  return i8 | 0;
 }
 i1 = HEAP32[i2 + 12 >> 2] | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 if (!i1) i3 = i4; else i3 = ((Math_imul(i4, i1) | 0) + 36 | 0) / 72 | 0;
 i1 = HEAP32[i2 + 16 >> 2] | 0;
 i2 = HEAP32[i2 + 8 >> 2] | 0;
 if (!i1) i1 = i2; else i1 = ((Math_imul(i2, i1) | 0) + 36 | 0) / 72 | 0;
 i2 = (i2 | 0) == 0 ? i3 : i1;
 i5 = ((i4 | 0) == 0 ? i2 : i3) + 32 | 0;
 i3 = ((i4 | 0) == 0 ? i1 : i2) + 32 | 0;
 i4 = HEAP32[i6 + 28 >> 2] | 0;
 if ((i4 | 0) <= 0) {
  i8 = 23;
  return i8 | 0;
 }
 i2 = HEAP32[i6 + 32 >> 2] | 0;
 L16 : do if (!(i7 << 24 >> 24)) {
  i1 = 0;
  while (1) {
   if (((HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0) + 32 ^ i3) >>> 0 <= 63 ? ((HEAP32[i2 + (i1 << 4) + 8 >> 2] | 0) + 32 ^ i5) >>> 0 <= 63 : 0) break L16;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) {
    i1 = 23;
    break;
   }
  }
  return i1 | 0;
 } else {
  i1 = 0;
  while (1) {
   if (((HEAP32[i2 + (i1 << 4) + 12 >> 2] | 0) + 32 ^ i3) >>> 0 <= 63) break L16;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) {
    i1 = 23;
    break;
   }
  }
  return i1 | 0;
 } while (0);
 if (!i8) {
  i8 = 0;
  return i8 | 0;
 }
 HEAP32[i8 >> 2] = i1;
 i8 = 0;
 return i8 | 0;
}

function _Vertical_Sweep_Span(i6, i3, i5, i4, i1, i2) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i4 = (i4 - i5 - i1 | 0) > (HEAP32[i6 + 20 >> 2] | 0) ? (0 - i1 & i4) >> i3 : (i5 + -1 + i1 & 0 - i1) >> i3;
 if ((i4 | 0) <= -1) return;
 i2 = HEAPU16[i6 + 56 >> 1] | 0;
 if (((i5 + -1 + i1 & 0 - i1) >> i3 | 0) >= (i2 | 0)) return;
 i5 = ((i5 + -1 + i1 & 0 - i1) >> i3 | 0) < 0 ? 0 : (i5 + -1 + i1 & 0 - i1) >> i3;
 i4 = (i4 | 0) < (i2 | 0) ? i4 : i2 + -1 | 0;
 if ((HEAP16[i6 + 158 >> 1] | 0) > (i5 << 13 >> 16 | 0)) HEAP16[i6 + 158 >> 1] = i5 << 13 >> 16;
 if ((HEAP16[i6 + 160 >> 1] | 0) < (i4 << 13 >> 16 | 0)) HEAP16[i6 + 160 >> 1] = i4 << 13 >> 16;
 i3 = HEAP32[i6 + 60 >> 2] | 0;
 i1 = HEAP32[i6 + 148 >> 2] | 0;
 i2 = i3 + (i1 + (i5 << 13 >> 16)) | 0;
 if (((i4 << 13 >> 16) - (i5 << 13 >> 16) | 0) <= 0) {
  HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] | (127 >>> (i4 & 7) ^ 255) & 255 >>> (i5 & 7);
  return;
 }
 HEAP8[i2 >> 0] = HEAPU8[i2 >> 0] | 255 >>> (i5 & 7);
 if (((i4 << 13 >> 16) - (i5 << 13 >> 16) | 0) > 1) {
  _memset(i3 + (i1 + (i5 << 13 >> 16) + 1) | 0, -1, (i4 << 13 >> 16) + -1 - (i5 << 13 >> 16) | 0) | 0;
  i1 = i1 + (i4 << 13 >> 16) + -1 | 0;
 } else i1 = i1 + (i5 << 13 >> 16) | 0;
 i6 = i3 + (i1 + 1) | 0;
 HEAP8[i6 >> 0] = HEAPU8[i6 >> 0] | 127 >>> (i4 & 7) ^ 255;
 return;
}

function __ZNSt3__16vectorIN6Shader19UniformBufferObjectENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[i7 + 4 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i6 + 4 | 0;
  i4 = i7;
  i2 = HEAP32[i6 + 4 >> 2] | 0;
  i1 = i5;
 } else {
  i2 = HEAP32[i6 + 4 >> 2] | 0;
  do {
   i3 = i2 + -44 | 0;
   i4 = i1;
   i1 = i1 + -44 | 0;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i3, HEAP32[i1 >> 2] | 0);
   i3 = i2 + -28 | 0;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i3, HEAP32[i4 + -28 >> 2] | 0);
   __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEEC2ERKS5_(i2 + -12 | 0, i4 + -12 | 0);
   i2 = (HEAP32[i6 + 4 >> 2] | 0) + -44 | 0;
   HEAP32[i6 + 4 >> 2] = i2;
  } while ((i1 | 0) != (i5 | 0));
  i3 = i6 + 4 | 0;
  i4 = i7;
  i1 = HEAP32[i7 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i2;
 HEAP32[i3 >> 2] = i1;
 i5 = HEAP32[i7 + 4 >> 2] | 0;
 HEAP32[i7 + 4 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i6 + 8 >> 2] = i5;
 i5 = HEAP32[i7 + 8 >> 2] | 0;
 HEAP32[i7 + 8 >> 2] = HEAP32[i6 + 12 >> 2];
 HEAP32[i6 + 12 >> 2] = i5;
 HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
 return;
}

function _tt_size_done_bytecode(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] | 0;
 if (HEAP8[i3 + 292 >> 0] | 0) {
  HEAP32[i3 + 296 >> 2] = 0;
  HEAP8[i3 + 292 >> 0] = 0;
 }
 _ft_mem_free(i2, HEAP32[i3 + 244 >> 2] | 0);
 HEAP32[i3 + 244 >> 2] = 0;
 HEAP32[i3 + 240 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 252 >> 2] | 0);
 HEAP32[i3 + 252 >> 2] = 0;
 HEAP16[i3 + 248 >> 1] = 0;
 i1 = HEAP32[i3 + 256 >> 2] | 0;
 if (i1) {
  _ft_mem_free(i1, HEAP32[i3 + 256 + 28 >> 2] | 0);
  HEAP32[i3 + 256 + 28 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i3 + 256 + 24 >> 2] | 0);
  HEAP32[i3 + 256 + 24 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i3 + 256 + 16 >> 2] | 0);
  HEAP32[i3 + 256 + 16 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i3 + 256 + 12 >> 2] | 0);
  HEAP32[i3 + 256 + 12 >> 2] = 0;
  _ft_mem_free(i1, HEAP32[i3 + 256 + 20 >> 2] | 0);
  HEAP32[i3 + 256 + 20 >> 2] = 0;
  HEAP32[i3 + 256 >> 2] = 0;
  HEAP32[i3 + 256 + 4 >> 2] = 0;
  HEAP32[i3 + 256 + 8 >> 2] = 0;
 }
 _ft_mem_free(i2, HEAP32[i3 + 124 >> 2] | 0);
 HEAP32[i3 + 124 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i3 + 136 >> 2] | 0);
 HEAP32[i3 + 116 >> 2] = 0;
 HEAP32[i3 + 120 >> 2] = 0;
 HEAP8[i3 + 300 >> 0] = 0;
 HEAP32[i3 + 128 >> 2] = 0;
 HEAP32[i3 + 128 + 4 >> 2] = 0;
 HEAP32[i3 + 128 + 8 >> 2] = 0;
 HEAP32[i3 + 128 + 12 >> 2] = 0;
 HEAP32[i3 + 128 + 16 >> 2] = 0;
 HEAP8[i3 + 301 >> 0] = 0;
 return;
}

function __ZN4File16AddTrailingSlashERK6Stringc(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if ((i1 | 0) != 0 ? (HEAP8[i1 >> 0] | 0) != 0 : 0) {
  i2 = _strlen(i1) | 0;
  L4 : do if ((i2 | 0) >= 1) {
   do if ((i1 + (i2 + -1) | 0) != 322379) {
    if ((i1 + (i2 + -1) | 0) != 0 ? (_strcasecmp(i1 + (i2 + -1) | 0, 322379) | 0) == 0 : 0) break;
    if ((i1 + (i2 + -1) | 0) != 322381) {
     if (!(i1 + (i2 + -1) | 0)) break L4;
     if (_strcasecmp(i1 + (i2 + -1) | 0, 322381) | 0) break L4;
    }
   } while (0);
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i3, i1);
   return;
  } while (0);
  if (_strchr(i1, 92) | 0) {
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i3, i1);
   __ZN6String6AppendEPKh(i3, 322381);
   return;
  }
  if (!(_strchr(i1, 47) | 0)) {
   __ZNK6StringplEc(i3, i4, i5);
   return;
  } else {
   HEAP32[i3 >> 2] = 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 + 12 >> 2] = 0;
   __ZN6String3SetEPKc(i3, i1);
   __ZN6String6AppendEPKh(i3, 322379);
   return;
  }
 };
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i3, i1);
 return;
}

function __ZNSt3__16vectorIN4math6float3ENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i9 + 4 >> 2] | 0) - i1 | 0) / 12 | 0) + 1 | 0;
 if (i3 >>> 0 > 357913941) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i6 = HEAP32[i9 >> 2] | 0;
  i7 = i6;
 } else {
  i7 = i1;
  i6 = i1;
 }
 i2 = i7;
 i1 = ((HEAP32[i9 + 8 >> 2] | 0) - i2 | 0) / 12 | 0;
 if (i1 >>> 0 < 178956970) {
  i1 = i1 << 1 >>> 0 < i3 >>> 0 ? i3 : i1 << 1;
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i2 = (i3 | 0) / 12 | 0;
   i1 = i3;
  } else {
   i2 = (i3 | 0) / 12 | 0;
   i10 = 6;
  }
 } else {
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  i1 = 357913941;
  i2 = (i3 | 0) / 12 | 0;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 * 12 | 0) | 0;
  i1 = i3;
 }
 i10 = i4 + (i2 * 12 | 0) | 0;
 HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 i10 = i4 + ((((i1 | 0) / -12 | 0) + i2 | 0) * 12 | 0) | 0;
 _memcpy(i10 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 HEAP32[i9 + 4 >> 2] = i4 + ((i2 + 1 | 0) * 12 | 0);
 HEAP32[i9 + 8 >> 2] = i4 + (i5 * 12 | 0);
 if (!i6) return;
 __ZdlPv(i6);
 return;
}

function __Z19BlendSourceToGLenum11BlendSourceb(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 do switch (i2 | 0) {
 case 0:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291607, i3);
   i1 = 0;
   break;
  }
 case 1:
  {
   i1 = 0;
   break;
  }
 case 2:
  {
   i1 = 1;
   break;
  }
 case 3:
  {
   i1 = 768;
   break;
  }
 case 4:
  {
   i1 = 769;
   break;
  }
 case 5:
  {
   i1 = 770;
   break;
  }
 case 6:
  {
   i1 = 771;
   break;
  }
 case 7:
  {
   i1 = 772;
   break;
  }
 case 8:
  {
   i1 = 773;
   break;
  }
 case 9:
  {
   i1 = 774;
   break;
  }
 case 10:
  {
   i1 = 775;
   break;
  }
 case 11:
  {
   i1 = 776;
   break;
  }
 case 12:
  {
   i1 = i1 ? 32769 : 32771;
   break;
  }
 case 13:
  {
   i1 = i1 ? 32770 : 32772;
   break;
  }
 case 14:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291643, i3 + 8 | 0);
   i1 = 0;
   break;
  }
 case 15:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291682, i3 + 16 | 0);
   i1 = 0;
   break;
  }
 case 16:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291724, i3 + 24 | 0);
   i1 = 0;
   break;
  }
 case 17:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291763, i3 + 32 | 0);
   i1 = 0;
   break;
  }
 default:
  {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 291805, i3 + 40 | 0);
   i1 = 0;
  }
 } while (0);
 STACKTOP = i3;
 return i1 | 0;
}

function _t2_hints_stems(i9, i1, i2, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((i2 | 0) <= 0) {
  STACKTOP = i10;
  return;
 }
 i7 = i9 + 16 + ((i1 >>> 0 > 1 ? (i1 | 0) != 0 & 1 : i1) * 36 | 0) | 0;
 i1 = 0;
 do {
  i6 = (i2 | 0) > 16 ? 16 : i2;
  if ((i6 | 0) > 0) {
   i4 = 0;
   while (1) {
    i3 = (HEAP32[i8 + (i4 << 2) >> 2] | 0) + i1 | 0;
    HEAP32[i10 + (i4 << 2) >> 2] = (_FT_RoundFix(i3) | 0) >> 16;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i6 << 1 | 0)) break; else i1 = i3;
   }
   if ((i6 | 0) > 0) {
    i1 = 0;
    do {
     i5 = i10 + ((i1 | 1) << 2) | 0;
     HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) - (HEAP32[i10 + (i1 << 2) >> 2] | 0);
     i1 = i1 + 2 | 0;
    } while ((i1 | 0) < (i6 << 1 | 0));
    i1 = i3;
   } else i1 = i3;
  }
  L13 : do if ((HEAP32[i9 + 4 >> 2] | 0) == 0 ? !((i6 | 0) == 0 ? 1 : ((HEAP32[i9 + 12 >> 2] | 0) + -1 | 0) >>> 0 > 1) : 0) {
   i3 = i6;
   i4 = i10;
   while (1) {
    i5 = _ps_dimension_add_t1stem(i7, HEAP32[i4 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0, HEAP32[i9 >> 2] | 0, 0) | 0;
    if (i5) break;
    i3 = i3 + -1 | 0;
    if (!i3) break L13; else i4 = i4 + 8 | 0;
   }
   HEAP32[i9 + 4 >> 2] = i5;
  } while (0);
  i2 = i2 - i6 | 0;
 } while ((i2 | 0) > 0);
 STACKTOP = i10;
 return;
}

function _FT_Stream_EnterFrame(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i7 >> 2] = 0;
 if (!(HEAP32[i6 + 20 >> 2] | 0)) {
  i1 = HEAP32[i6 + 8 >> 2] | 0;
  i4 = HEAP32[i6 + 4 >> 2] | 0;
  if (i4 >>> 0 <= i1 >>> 0 | (i4 - i1 | 0) >>> 0 < i5 >>> 0) {
   HEAP32[i7 >> 2] = 85;
   i6 = 85;
   STACKTOP = i7;
   return i6 | 0;
  } else {
   i4 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 + 32 >> 2] = i4 + i1;
   HEAP32[i6 + 36 >> 2] = i4 + (i1 + i5);
   HEAP32[i6 + 8 >> 2] = i1 + i5;
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  }
 }
 i4 = HEAP32[i6 + 28 >> 2] | 0;
 if ((HEAP32[i6 + 4 >> 2] | 0) >>> 0 < i5 >>> 0) {
  HEAP32[i7 >> 2] = 85;
  i6 = 85;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _ft_mem_qalloc(i4, i5, i7) | 0;
 HEAP32[i6 >> 2] = i1;
 i2 = HEAP32[i7 >> 2] | 0;
 if (i2) {
  i6 = i2;
  STACKTOP = i7;
  return i6 | 0;
 }
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i6 + 20 >> 2] & 63](i6, HEAP32[i6 + 8 >> 2] | 0, i1, i5) | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i3 >>> 0 < i5 >>> 0) {
  _ft_mem_free(i4, i1);
  HEAP32[i6 >> 2] = 0;
  HEAP32[i7 >> 2] = 85;
  i2 = 85;
  i1 = 0;
 } else i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i6 + 32 >> 2] = i1;
 HEAP32[i6 + 36 >> 2] = i1 + i5;
 HEAP32[i6 + 8 >> 2] = (HEAP32[i6 + 8 >> 2] | 0) + i3;
 i6 = i2;
 STACKTOP = i7;
 return i6 | 0;
}

function _Load_SBit_Range_Codes(i6, i7, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = HEAP32[i7 + 28 >> 2] | 0;
 i4 = _FT_Stream_ReadULong(i7, i8) | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (i1) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i6 + 24 >> 2] = i4;
 do if (i5 << 24 >> 24) {
  HEAP32[i6 + 28 >> 2] = _ft_mem_realloc(i3, 4, 0, i4, 0, i8) | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) {
   i2 = i4 << 2;
   break;
  } else {
   i7 = i1;
   STACKTOP = i8;
   return i7 | 0;
  }
 } else i2 = i4 << 1; while (0);
 HEAP32[i6 + 32 >> 2] = _ft_mem_realloc(i3, 2, 0, i4, 0, i8) | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (i1) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i7, i2) | 0;
 HEAP32[i8 >> 2] = i1;
 if (i1) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (i4) {
  i1 = 0;
  do {
   i3 = _FT_Stream_GetUShort(i7) | 0;
   HEAP16[(HEAP32[i6 + 32 >> 2] | 0) + (i1 << 1) >> 1] = i3;
   if (i5 << 24 >> 24) {
    i3 = HEAP32[i6 + 8 >> 2] | 0;
    i3 = ((_FT_Stream_GetUShort(i7) | 0) & 65535) + i3 | 0;
    HEAP32[(HEAP32[i6 + 28 >> 2] | 0) + (i1 << 2) >> 2] = i3;
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i4 | 0));
 }
 _FT_Stream_ExitFrame(i7);
 i7 = HEAP32[i8 >> 2] | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _FT_GlyphLoader_CopyPoints(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP16[i2 + 22 >> 1] | 0;
 i4 = HEAP16[i2 + 20 >> 1] | 0;
 i5 = _FT_GlyphLoader_CheckPoints(i6, i3 << 16 >> 16, i4 << 16 >> 16) | 0;
 if (i5) return i5 | 0;
 _memcpy(HEAP32[i6 + 24 >> 2] | 0, HEAP32[i2 + 24 >> 2] | 0, i3 << 16 >> 16 << 3 | 0) | 0;
 _memcpy(HEAP32[i6 + 28 >> 2] | 0, HEAP32[i2 + 28 >> 2] | 0, i3 << 16 >> 16 | 0) | 0;
 _memcpy(HEAP32[i6 + 32 >> 2] | 0, HEAP32[i2 + 32 >> 2] | 0, i4 << 16 >> 16 << 1 | 0) | 0;
 i1 = HEAP8[i6 + 16 >> 0] | 0;
 if (i1 << 24 >> 24) {
  if (HEAP8[i2 + 16 >> 0] | 0) {
   _memcpy(HEAP32[i6 + 40 >> 2] | 0, HEAP32[i2 + 40 >> 2] | 0, i3 << 16 >> 16 << 3 | 0) | 0;
   _memcpy(HEAP32[i6 + 44 >> 2] | 0, HEAP32[i2 + 44 >> 2] | 0, i3 << 16 >> 16 << 3 | 0) | 0;
   i1 = HEAP8[i6 + 16 >> 0] | 0;
  }
 } else i1 = 0;
 HEAP16[i6 + 22 >> 1] = i3;
 HEAP16[i6 + 20 >> 1] = i4;
 HEAP32[i6 + 60 >> 2] = (HEAP32[i6 + 24 >> 2] | 0) + (i3 << 16 >> 16 << 3);
 HEAP32[i6 + 64 >> 2] = (HEAP32[i6 + 28 >> 2] | 0) + (i3 << 16 >> 16);
 HEAP32[i6 + 68 >> 2] = (HEAP32[i6 + 32 >> 2] | 0) + (i4 << 16 >> 16 << 1);
 if (!(i1 << 24 >> 24)) return i5 | 0;
 HEAP32[i6 + 76 >> 2] = (HEAP32[i6 + 40 >> 2] | 0) + (i3 << 16 >> 16 << 3);
 HEAP32[i6 + 80 >> 2] = (HEAP32[i6 + 44 >> 2] | 0) + (i3 << 16 >> 16 << 3);
 return i5 | 0;
}

function _inflateEnd(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (!i4) return;
 i1 = HEAP32[i4 + 28 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i4 + 36 >> 2] | 0;
 if (!i2) return;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i3) i3 = i4 + 40 | 0; else {
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 & -2 | 0) == 4) {
   FUNCTION_TABLE_vii[i2 & 31](HEAP32[i4 + 40 >> 2] | 0, HEAP32[i3 + 12 >> 2] | 0);
   i1 = HEAP32[i3 >> 2] | 0;
  }
  if ((i1 | 0) == 6) FUNCTION_TABLE_vii[HEAP32[i4 + 36 >> 2] & 31](HEAP32[i4 + 40 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0);
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 28 >> 2] = 0;
  HEAP32[i3 + 32 >> 2] = 0;
  i1 = HEAP32[i3 + 40 >> 2] | 0;
  HEAP32[i3 + 52 >> 2] = i1;
  HEAP32[i3 + 48 >> 2] = i1;
  i2 = HEAP32[i3 + 56 >> 2] | 0;
  if (i2) {
   i1 = FUNCTION_TABLE_iiii[i2 & 127](0, 0, 0) | 0;
   HEAP32[i3 + 60 >> 2] = i1;
   HEAP32[i4 + 48 >> 2] = i1;
   i1 = HEAP32[i3 + 40 >> 2] | 0;
  }
  FUNCTION_TABLE_vii[HEAP32[i4 + 36 >> 2] & 31](HEAP32[i4 + 40 >> 2] | 0, i1);
  FUNCTION_TABLE_vii[HEAP32[i4 + 36 >> 2] & 31](HEAP32[i4 + 40 >> 2] | 0, HEAP32[i3 + 36 >> 2] | 0);
  FUNCTION_TABLE_vii[HEAP32[i4 + 36 >> 2] & 31](HEAP32[i4 + 40 >> 2] | 0, i3);
  i3 = i4 + 40 | 0;
  i2 = HEAP32[i4 + 36 >> 2] | 0;
  i1 = HEAP32[i4 + 28 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[i2 & 31](HEAP32[i3 >> 2] | 0, i1);
 HEAP32[i4 + 28 >> 2] = 0;
 return;
}

function __ZN4math4Quat14RandomRotationERNS_3LCGE(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, f3 = f0, f4 = f0, f5 = f0, f6 = f0, f7 = f0;
 i1 = 0;
 while (1) {
  f4 = Math_fround(__ZN4math3LCG5FloatEff(i2, Math_fround(-1.0), Math_fround(1.0)));
  f5 = Math_fround(__ZN4math3LCG5FloatEff(i2, Math_fround(-1.0), Math_fround(1.0)));
  f6 = Math_fround(__ZN4math3LCG5FloatEff(i2, Math_fround(-1.0), Math_fround(1.0)));
  f7 = Math_fround(__ZN4math3LCG5FloatEff(i2, Math_fround(-1.0), Math_fround(1.0)));
  f3 = Math_fround(Math_fround(Math_fround(Math_fround(f4 * f4) + Math_fround(f5 * f5)) + Math_fround(f6 * f6)) + Math_fround(f7 * f7));
  i1 = i1 + 1 | 0;
  if (f3 >= Math_fround(9.99999997e-007) & f3 <= Math_fround(1.0)) {
   i1 = 4;
   break;
  }
  if ((i1 | 0) >= 1e3) {
   i1 = 5;
   break;
  }
 }
 if ((i1 | 0) == 4) {
  f3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(f3))));
  f5 = Math_fround(f5 * f3);
  f6 = Math_fround(f6 * f3);
  f7 = Math_fround(f7 * f3);
  HEAPF32[i8 >> 2] = Math_fround(f4 * f3);
  HEAPF32[i8 + 4 >> 2] = f5;
  HEAPF32[i8 + 8 >> 2] = f6;
  HEAPF32[i8 + 12 >> 2] = f7;
  return;
 } else if ((i1 | 0) == 5) {
  HEAP32[i8 >> 2] = HEAP32[65740];
  HEAP32[i8 + 4 >> 2] = HEAP32[65741];
  HEAP32[i8 + 8 >> 2] = HEAP32[65742];
  HEAP32[i8 + 12 >> 2] = HEAP32[65743];
  return;
 }
}

function __ZNK5Image8DeepCopyEv(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i5 + 16 >> 2] | 0;
 i2 = HEAP32[i5 + 20 >> 2] | 0;
 i3 = HEAP32[i5 + 28 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP8[i4 + 8 >> 0] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 12 + 4 >> 2] = 0;
 HEAP32[i4 + 12 + 8 >> 2] = 0;
 HEAP32[i4 + 12 + 12 >> 2] = 0;
 HEAP32[i4 + 12 + 16 >> 2] = 0;
 HEAP32[i4 + 12 + 20 >> 2] = 0;
 if (!(__ZN5Image9CreateNewEii13TextureFormat(i4, i1, i2, i3) | 0)) {
  i3 = __Z21TextureFormatToString13TextureFormat(i3) | 0;
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = i2;
  HEAP32[i6 + 8 >> 2] = i3;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303292, i6);
 }
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i5 + 4 >> 2] | 0)) {
  _memcpy(HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0, i1 | 0) | 0;
  STACKTOP = i6;
  return;
 }
 if ((HEAP32[i5 + 20 >> 2] | 0) <= 0) {
  STACKTOP = i6;
  return;
 }
 i3 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i4 + 12 >> 2] | 0;
 i2 = 0;
 do {
  i4 = i3 + (Math_imul(i1, i2) | 0) | 0;
  _memcpy(i4 | 0, (HEAP32[i5 >> 2] | 0) + (Math_imul(HEAP32[i5 + 12 >> 2] | 0, i2) | 0) | 0, i1 | 0) | 0;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) < (HEAP32[i5 + 20 >> 2] | 0));
 STACKTOP = i6;
 return;
}

function _gray_record_cell(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (HEAP32[i9 + 40 >> 2] | 0) return;
 i6 = HEAP32[i9 + 32 >> 2] | 0;
 i7 = HEAP32[i9 + 36 >> 2] | 0;
 if (!(i7 | i6)) return;
 i5 = HEAP32[i9 >> 2] | 0;
 i2 = HEAP32[i9 + 24 >> 2] | 0;
 i5 = (i5 | 0) > (i2 | 0) ? i2 : i5;
 i2 = (HEAP32[i9 + 1420 >> 2] | 0) + (HEAP32[i9 + 4 >> 2] << 2) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L7 : do if (!i1) i4 = 7; else while (1) {
  i3 = HEAP32[i1 >> 2] | 0;
  if ((i3 | 0) > (i5 | 0)) {
   i4 = 7;
   break L7;
  }
  if ((i3 | 0) == (i5 | 0)) {
   i8 = i1;
   break L7;
  }
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   i4 = 7;
   break;
  }
 } while (0);
 do if ((i4 | 0) == 7) {
  i1 = HEAP32[i9 + 52 >> 2] | 0;
  if ((i1 | 0) < (HEAP32[i9 + 48 >> 2] | 0)) {
   i8 = HEAP32[i9 + 44 >> 2] | 0;
   HEAP32[i9 + 52 >> 2] = i1 + 1;
   HEAP32[i8 + (i1 << 4) >> 2] = i5;
   HEAP32[i8 + (i1 << 4) + 8 >> 2] = 0;
   HEAP32[i8 + (i1 << 4) + 4 >> 2] = 0;
   HEAP32[i8 + (i1 << 4) + 12 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i2 >> 2] = i8 + (i1 << 4);
   i8 = i8 + (i1 << 4) | 0;
   break;
  } else _longjmp(i9 + 1256 | 0, 1);
 } while (0);
 i5 = i8 + 8 | 0;
 HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + i6;
 i8 = i8 + 4 | 0;
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i7;
 return;
}

function __ZN8GraphicsC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = i1;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP8[i1 + 8 >> 0] = 0;
 HEAP32[i1 + 12 >> 2] = 1;
 HEAP32[i1 + 100 >> 2] = 0;
 HEAP32[i1 + 136 >> 2] = 0;
 HEAP8[i1 + 152 >> 0] = 0;
 HEAP32[i1 + 284 >> 2] = 0;
 HEAP32[i1 + 316 >> 2] = 0;
 i2 = i1 + 24 | 0;
 i3 = i2 + 52 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[122] = i1;
 i2 = i1 + 320 | 0;
 i3 = i2 + 120 | 0;
 do {
  HEAP32[i2 >> 2] = -1;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 i2 = i1 + 156 | 0;
 i3 = i2 + 128 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i1 + 76 >> 2] = 1;
 HEAP32[i1 + 292 >> 2] = 0;
 HEAP8[i1 + 80 >> 0] = 0;
 HEAPF32[i1 + 84 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 88 >> 2] = 0;
 HEAP32[i1 + 104 >> 2] = -1;
 HEAP8[i1 + 108 >> 0] = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP32[i1 + 112 + 4 >> 2] = 0;
 HEAP32[i1 + 112 + 8 >> 2] = 0;
 HEAP32[i1 + 112 + 12 >> 2] = 0;
 HEAP32[i1 + 112 + 16 >> 2] = 0;
 HEAP32[i1 + 112 + 20 >> 2] = 0;
 HEAP16[i1 + 140 >> 1] = -1;
 HEAP8[i1 + 142 >> 0] = 0;
 HEAP8[i1 + 143 >> 0] = 1;
 HEAP32[i1 + 144 >> 2] = 0;
 HEAP32[i1 + 296 >> 2] = 0;
 HEAP32[i1 + 296 + 4 >> 2] = 0;
 HEAP32[i1 + 296 + 8 >> 2] = 0;
 HEAP32[i1 + 296 + 12 >> 2] = 0;
 return;
}

function _Ins_DELTAP(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 L1 : do if (i4) {
  i6 = 1;
  while (1) {
   i1 = HEAP32[i5 + 28 >> 2] | 0;
   if ((i1 | 0) < 2) break;
   HEAP32[i5 + 28 >> 2] = i1 + -2;
   i2 = HEAP32[i5 + 24 >> 2] | 0;
   i3 = HEAP32[i2 + (i1 + -1 << 2) >> 2] | 0;
   i1 = HEAP32[i2 + (i1 + -2 << 2) >> 2] | 0;
   if ((i3 & 65535) >>> 0 < (HEAPU16[i5 + 44 >> 1] | 0) >>> 0) {
    switch (HEAPU8[i5 + 368 >> 0] | 0) {
    case 114:
     {
      i2 = i1 >>> 4 & 15 | 32;
      break;
     }
    case 113:
     {
      i2 = i1 >>> 4 & 15 | 16;
      break;
     }
    default:
     i2 = i1 >>> 4 & 15;
    }
    i2 = (HEAP16[i5 + 332 >> 1] | 0) + i2 | 0;
    if ((_Current_Ppem(i5) | 0) == (i2 | 0)) FUNCTION_TABLE_viiii[HEAP32[i5 + 584 >> 2] & 15](i5, i5 + 36 | 0, i3 & 65535, ((((i1 & 15) + -8 | 0) > -1 ? (i1 & 15) + -7 | 0 : (i1 & 15) + -8 | 0) << 6 | 0) / (1 << HEAP16[i5 + 334 >> 1] | 0) | 0);
   } else if (HEAP8[i5 + 561 >> 0] | 0) HEAP32[i5 + 12 >> 2] = 134;
   i6 = i6 + 1 | 0;
   if (i6 >>> 0 > i4 >>> 0) break L1;
  }
  if (HEAP8[i5 + 561 >> 0] | 0) HEAP32[i5 + 12 >> 2] = 129;
  HEAP32[i5 + 28 >> 2] = 0;
  i4 = 0;
  i6 = i5 + 32 | 0;
  HEAP32[i6 >> 2] = i4;
  return;
 } while (0);
 i4 = HEAP32[i5 + 28 >> 2] | 0;
 i6 = i5 + 32 | 0;
 HEAP32[i6 >> 2] = i4;
 return;
}

function __ZN6String3SetEPKc(i7, i4) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if ((i4 | 0) != 0 ? (HEAP8[i4 >> 0] | 0) != 0 : 0) {
  i6 = _strlen(i4) | 0;
  i3 = HEAP32[i7 + 12 >> 2] | 0;
  do if ((i6 | 0) >= (i3 | 0) & (i3 | 0) < (i6 + 1 | 0)) {
   if (!(i6 + 1 | 0)) {
    i1 = HEAP32[i7 >> 2] | 0;
    if (i1) __ZdaPv(i1);
    HEAP32[i7 >> 2] = 0;
    i2 = i7;
    i1 = 0;
    break;
   }
   i3 = __Znaj((i6 + 1 | 0) > -1 ? i6 + 1 | 0 : -1) | 0;
   HEAP32[i7 + 12 >> 2] = i6 + 1;
   if ((i6 | 0) > -1) HEAP8[i3 >> 0] = 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i7 >> 2] = i3;
   i2 = i7;
   i1 = i3;
  } else {
   i2 = i7;
   i1 = HEAP32[i7 >> 2] | 0;
  } while (0);
  _memcpy(i1 | 0, i4 | 0, i6 + 1 | 0) | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  if ((i2 | 0) != 0 ? (i5 = HEAP8[i2 >> 0] | 0, i5 << 24 >> 24 != 0) : 0) {
   i3 = i5;
   i1 = 0;
   do {
    i5 = (i3 & 255) >>> 7 & 255;
    i1 = (i5 ^ 1) + i1 + ((i3 & 255) >>> 6 & i5) | 0;
    i2 = i2 + 1 | 0;
    i3 = HEAP8[i2 >> 0] | 0;
   } while (i3 << 24 >> 24 != 0);
  } else i1 = 0;
  HEAP32[i7 + 4 >> 2] = i1;
  HEAP32[i7 + 8 >> 2] = i6;
  return;
 }
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i7 >> 2] = 0;
 return;
}

function _parse_weight_vector(i4, i7) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 i3 = HEAP32[i4 + 532 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[i7 + 60 >> 2] & 15](i7, i8 + 8 | 0, 16, i8);
 i1 = HEAP32[i8 >> 2] | 0;
 do if ((i1 | 0) >= 0) if ((i1 | 0) == 0 | (i1 | 0) > 16) i1 = 3; else {
  if ((i3 | 0) != 0 ? (i2 = HEAP32[i3 >> 2] | 0, (i2 | 0) != 0) : 0) {
   if ((i2 | 0) != (i1 | 0)) {
    i1 = 3;
    break;
   }
  } else {
   i1 = _t1_allocate_blend(i4, i1, 0) | 0;
   if (i1) break;
   i1 = HEAP32[i8 >> 2] | 0;
   i3 = HEAP32[i4 + 532 >> 2] | 0;
  }
  i5 = HEAP32[i7 >> 2] | 0;
  i6 = HEAP32[i7 + 8 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i4 = i3 + 136 | 0;
   i1 = i3 + 140 | 0;
   i2 = 0;
   do {
    HEAP32[i7 >> 2] = HEAP32[i8 + 8 + (i2 * 12 | 0) >> 2];
    HEAP32[i7 + 8 >> 2] = HEAP32[i8 + 8 + (i2 * 12 | 0) + 4 >> 2];
    i3 = FUNCTION_TABLE_iii[HEAP32[i7 + 40 >> 2] & 255](i7, 0) | 0;
    HEAP32[(HEAP32[i4 >> 2] | 0) + (i2 << 2) >> 2] = i3;
    HEAP32[(HEAP32[i1 >> 2] | 0) + (i2 << 2) >> 2] = i3;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) < (HEAP32[i8 >> 2] | 0));
  }
  HEAP32[i7 >> 2] = i5;
  HEAP32[i7 + 8 >> 2] = i6;
  i1 = 0;
 } else i1 = 162; while (0);
 HEAP32[i7 + 12 >> 2] = i1;
 STACKTOP = i8;
 return;
}

function ___stdio_read(i5, i4, i6) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i7 + 32 >> 2] = i4;
 i3 = HEAP32[i5 + 48 >> 2] | 0;
 HEAP32[i7 + 32 + 4 >> 2] = i6 - ((i3 | 0) != 0 & 1);
 HEAP32[i7 + 32 + 8 >> 2] = HEAP32[i5 + 44 >> 2];
 HEAP32[i7 + 32 + 12 >> 2] = i3;
 if (!(HEAP32[70347] | 0)) {
  HEAP32[i7 + 16 >> 2] = HEAP32[i5 + 60 >> 2];
  HEAP32[i7 + 16 + 4 >> 2] = i7 + 32;
  HEAP32[i7 + 16 + 8 >> 2] = 2;
  i1 = ___syscall_ret(___syscall145(145, i7 + 16 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(87, i5 | 0);
  HEAP32[i7 >> 2] = HEAP32[i5 + 60 >> 2];
  HEAP32[i7 + 4 >> 2] = i7 + 32;
  HEAP32[i7 + 8 >> 2] = 2;
  i1 = ___syscall_ret(___syscall145(145, i7 | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
 }
 if ((i1 | 0) >= 1) {
  i2 = HEAP32[i7 + 32 + 4 >> 2] | 0;
  if (i1 >>> 0 > i2 >>> 0) {
   i3 = HEAP32[i5 + 44 >> 2] | 0;
   HEAP32[i5 + 4 >> 2] = i3;
   HEAP32[i5 + 8 >> 2] = i3 + (i1 - i2);
   if (!(HEAP32[i5 + 48 >> 2] | 0)) i1 = i6; else {
    HEAP32[i5 + 4 >> 2] = i3 + 1;
    HEAP8[i4 + (i6 + -1) >> 0] = HEAP8[i3 >> 0] | 0;
    i1 = i6;
   }
  }
 } else {
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | i1 & 48 ^ 16;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _tt_face_load_cvt(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i5 + 28 >> 2] | 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 508 >> 2] & 63](i4, 1668707360, i5, i6) | 0;
 HEAP32[i6 + 4 >> 2] = i3;
 if (i3) {
  HEAP32[i4 + 668 >> 2] = 0;
  HEAP32[i4 + 672 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i3 = (HEAP32[i6 >> 2] | 0) >>> 1;
 HEAP32[i4 + 668 >> 2] = i3;
 HEAP32[i4 + 672 >> 2] = _ft_mem_realloc(i1, 2, 0, i3, 0, i6 + 4 | 0) | 0;
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 if (i1) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i5, HEAP32[i4 + 668 >> 2] << 1) | 0;
 HEAP32[i6 + 4 >> 2] = i1;
 if (i1) {
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i4 + 672 >> 2] | 0;
 i2 = HEAP32[i4 + 668 >> 2] | 0;
 if ((i2 | 0) > 0) {
  i3 = i1;
  do {
   HEAP16[i3 >> 1] = _FT_Stream_GetUShort(i5) | 0;
   i3 = i3 + 2 | 0;
  } while (i3 >>> 0 < (i1 + (i2 << 1) | 0) >>> 0);
 }
 _FT_Stream_ExitFrame(i5);
 if (!(HEAP8[i4 + 708 >> 0] | 0)) {
  i5 = HEAP32[i6 + 4 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  i5 = _tt_face_vary_cvt(i4, i5) | 0;
  HEAP32[i6 + 4 >> 2] = i5;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _FT_Get_Kerning(i5, i2, i3, i4, i6) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0;
 if (!i5) {
  i6 = 35;
  return i6 | 0;
 }
 if (!i6) {
  i6 = 6;
  return i6 | 0;
 }
 i1 = HEAP32[i5 + 96 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i1 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 84 >> 2] | 0;
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = FUNCTION_TABLE_iiiii[i1 & 63](i5, i2, i3, i6) | 0;
 if (!((i4 | 0) != 2 & (i1 | 0) == 0)) {
  i6 = i1;
  return i6 | 0;
 }
 HEAP32[i6 >> 2] = _FT_MulFix(HEAP32[i6 >> 2] | 0, HEAP32[(HEAP32[i5 + 88 >> 2] | 0) + 16 >> 2] | 0) | 0;
 HEAP32[i6 + 4 >> 2] = _FT_MulFix(HEAP32[i6 + 4 >> 2] | 0, HEAP32[(HEAP32[i5 + 88 >> 2] | 0) + 20 >> 2] | 0) | 0;
 if ((i4 | 0) == 1) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = HEAP32[i5 + 88 >> 2] | 0;
 i2 = HEAP16[i1 + 12 >> 1] | 0;
 if ((i2 & 65535) < 25) {
  HEAP32[i6 >> 2] = _FT_MulDiv(HEAP32[i6 >> 2] | 0, i2 & 65535, 25) | 0;
  i1 = HEAP32[i5 + 88 >> 2] | 0;
 }
 i1 = HEAP16[i1 + 14 >> 1] | 0;
 if ((i1 & 65535) < 25) {
  i1 = _FT_MulDiv(HEAP32[i6 + 4 >> 2] | 0, i1 & 65535, 25) | 0;
  HEAP32[i6 + 4 >> 2] = i1;
 } else i1 = HEAP32[i6 + 4 >> 2] | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 32 & -64;
 HEAP32[i6 + 4 >> 2] = i1 + 32 & -64;
 i6 = 0;
 return i6 | 0;
}

function __ZNSt3__16vectorI4RectNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = ((HEAP32[i9 + 4 >> 2] | 0) - i1 >> 4) + 1 | 0;
 if (i3 >>> 0 > 268435455) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i6 = HEAP32[i9 >> 2] | 0;
  i7 = i6;
 } else {
  i7 = i1;
  i6 = i1;
 }
 i2 = i7;
 i1 = (HEAP32[i9 + 8 >> 2] | 0) - i2 | 0;
 if (i1 >> 4 >>> 0 < 134217727) {
  i1 = i1 >> 3 >>> 0 < i3 >>> 0 ? i3 : i1 >> 3;
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i2 = i3 >> 4;
   i1 = i3;
  } else {
   i2 = i3 >> 4;
   i10 = 6;
  }
 } else {
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  i1 = 268435455;
  i2 = i3 >> 4;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 4) | 0;
  i1 = i3;
 }
 i10 = i4 + (i2 << 4) | 0;
 HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i10 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 HEAP32[i10 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i9 + 4 >> 2] = i4 + (i2 + 1 << 4);
 HEAP32[i9 + 8 >> 2] = i4 + (i5 << 4);
 if (!i6) return;
 __ZdlPv(i6);
 return;
}

function __ZNSt3__16vectorI11FixedStringILi256EcENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i9 + 4 >> 2] | 0) - i1 | 0) / 264 | 0) + 1 | 0;
 if (i3 >>> 0 > 16268815) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i6 = HEAP32[i9 >> 2] | 0;
  i7 = i6;
 } else {
  i7 = i1;
  i6 = i1;
 }
 i2 = i7;
 i1 = ((HEAP32[i9 + 8 >> 2] | 0) - i2 | 0) / 264 | 0;
 if (i1 >>> 0 < 8134407) {
  i1 = i1 << 1 >>> 0 < i3 >>> 0 ? i3 : i1 << 1;
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i2 = (i3 | 0) / 264 | 0;
   i1 = i3;
  } else {
   i2 = (i3 | 0) / 264 | 0;
   i10 = 6;
  }
 } else {
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  i1 = 16268815;
  i2 = (i3 | 0) / 264 | 0;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 * 264 | 0) | 0;
  i1 = i3;
 }
 _memcpy(i4 + (i2 * 264 | 0) | 0, i8 | 0, 264) | 0;
 i10 = i4 + ((((i1 | 0) / -264 | 0) + i2 | 0) * 264 | 0) | 0;
 _memcpy(i10 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 HEAP32[i9 + 4 >> 2] = i4 + ((i2 + 1 | 0) * 264 | 0);
 HEAP32[i9 + 8 >> 2] = i4 + (i5 * 264 | 0);
 if (!i6) return;
 __ZdlPv(i6);
 return;
}

function _ft_mem_realloc(i2, i5, i4, i6, i1, i7) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i3 = 0, i8 = 0;
 if ((i4 | i5 | i6 | 0) < 0) {
  i6 = i1;
  i5 = 6;
  HEAP32[i7 >> 2] = i5;
  return i6 | 0;
 }
 do if ((i5 | 0) == 0 | (i6 | 0) == 0) if (!i1) {
  i2 = 0;
  i1 = 0;
 } else {
  FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 31](i2, i1);
  i2 = 0;
  i1 = 0;
 } else {
  if ((2147483647 / (i5 | 0) | 0 | 0) < (i6 | 0)) {
   i6 = i1;
   i5 = 10;
   HEAP32[i7 >> 2] = i5;
   return i6 | 0;
  }
  if (i4) {
   i8 = Math_imul(i4, i5) | 0;
   i3 = Math_imul(i6, i5) | 0;
   i3 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 12 >> 2] & 63](i2, i8, i3, i1) | 0;
   i2 = (i3 | 0) == 0 ? i1 : i3;
   i1 = (i3 | 0) == 0 ? 64 : 0;
   break;
  }
  i3 = Math_imul(i6, i5) | 0;
  if ((i3 | 0) <= 0) {
   i2 = 0;
   i1 = i3 >> 31 & 6;
   break;
  }
  i2 = FUNCTION_TABLE_iii[HEAP32[i2 + 4 >> 2] & 255](i2, i3) | 0;
  i1 = (i2 | 0) == 0 ? 64 : 0;
  if (!i2) i2 = 0; else _memset(i2 | 0, 0, i3 | 0) | 0;
 } while (0);
 if (!((i6 | 0) > (i4 | 0) & (i1 | 0) == 0)) {
  i8 = i2;
  i6 = i1;
  HEAP32[i7 >> 2] = i6;
  return i8 | 0;
 }
 _memset(i2 + (Math_imul(i4, i5) | 0) | 0, 0, Math_imul(i6 - i4 | 0, i5) | 0) | 0;
 i8 = i2;
 i6 = 0;
 HEAP32[i7 >> 2] = i6;
 return i8 | 0;
}

function __ZN5ArrayI6String9StdCAllocED2Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (!(HEAP32[i6 + 12 >> 2] | 0)) i3 = i1; else {
  i3 = 0;
  do {
   i2 = i1 + (i3 << 4) | 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
   HEAP32[i7 + 8 >> 2] = 0;
   HEAP32[i7 + 12 >> 2] = 0;
   if (((i2 | 0) != (i7 | 0) ? (HEAP32[i1 + (i3 << 4) + 8 >> 2] = 0, HEAP32[i1 + (i3 << 4) + 4 >> 2] = 0, i5 = HEAP32[i2 >> 2] | 0, (i5 | 0) != 0) : 0) ? (HEAP8[i5 >> 0] = 0, i4 = HEAP32[i7 >> 2] | 0, (i4 | 0) != 0) : 0) __ZdaPv(i4);
   HEAP32[i7 >> 2] = 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
  } while (i3 >>> 0 < (HEAP32[i6 + 12 >> 2] | 0) >>> 0);
  i3 = i1;
 }
 if (!i3) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  HEAP32[i6 + 12 >> 2] = 0;
  STACKTOP = i7;
  return;
 }
 i4 = i3 + -4 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1) {
  i1 = i3 + (i1 << 4) | 0;
  do {
   i1 = i1 + -16 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2) __ZdaPv(i2);
   HEAP32[i1 >> 2] = 0;
  } while ((i1 | 0) != (i3 | 0));
 }
 __ZdaPv(i4);
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 STACKTOP = i7;
 return;
}

function __ZN8Graphics23TextureAboutToBeDeletedEP7Texture(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i2 + 156 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 156 >> 2] = 0;
 if ((HEAP32[i2 + 160 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 160 >> 2] = 0;
 if ((HEAP32[i2 + 164 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 164 >> 2] = 0;
 if ((HEAP32[i2 + 168 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 168 >> 2] = 0;
 if ((HEAP32[i2 + 172 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 172 >> 2] = 0;
 if ((HEAP32[i2 + 176 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 176 >> 2] = 0;
 if ((HEAP32[i2 + 180 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 180 >> 2] = 0;
 if ((HEAP32[i2 + 184 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 184 >> 2] = 0;
 if ((HEAP32[i2 + 188 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 188 >> 2] = 0;
 if ((HEAP32[i2 + 192 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 192 >> 2] = 0;
 if ((HEAP32[i2 + 196 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 196 >> 2] = 0;
 if ((HEAP32[i2 + 200 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 200 >> 2] = 0;
 if ((HEAP32[i2 + 204 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 204 >> 2] = 0;
 if ((HEAP32[i2 + 208 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 208 >> 2] = 0;
 if ((HEAP32[i2 + 212 >> 2] | 0) == (i1 | 0)) HEAP32[i2 + 212 >> 2] = 0;
 if ((HEAP32[i2 + 216 >> 2] | 0) != (i1 | 0)) return;
 HEAP32[i2 + 216 >> 2] = 0;
 return;
}

function _af_autofitter_done(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 if (!i1) {
  i1 = i2 + 12 | 0;
  HEAP32[i1 >> 2] = 0;
  i1 = i2 + 16 | 0;
  HEAP32[i1 >> 2] = 0;
  i2 = i2 + 20 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  _FT_GlyphLoader_Done(i1);
  HEAP32[i2 >> 2] = 0;
  return;
 }
 HEAP32[i2 + 68 >> 2] = 0;
 HEAP32[i2 + 72 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 76 >> 2] | 0);
 HEAP32[i2 + 76 >> 2] = 0;
 HEAP32[i2 + 80 >> 2] = 0;
 HEAP32[i2 + 84 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 88 >> 2] | 0);
 HEAP32[i2 + 88 >> 2] = 0;
 HEAP32[i2 + 96 >> 2] = 0;
 HEAP32[i2 + 100 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 104 >> 2] | 0);
 HEAP32[i2 + 104 >> 2] = 0;
 HEAP32[i2 + 108 >> 2] = 0;
 HEAP32[i2 + 112 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 116 >> 2] | 0);
 HEAP32[i2 + 116 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 64 >> 2] | 0);
 HEAP32[i2 + 64 >> 2] = 0;
 HEAP32[i2 + 56 >> 2] = 0;
 HEAP32[i2 + 60 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 52 >> 2] | 0);
 HEAP32[i2 + 52 >> 2] = 0;
 HEAP32[i2 + 48 >> 2] = 0;
 HEAP32[i2 + 44 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 i1 = i2 + 12 | 0;
 HEAP32[i1 >> 2] = 0;
 i1 = i2 + 16 | 0;
 HEAP32[i1 >> 2] = 0;
 i2 = i2 + 20 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 _FT_GlyphLoader_Done(i1);
 HEAP32[i2 >> 2] = 0;
 return;
}

function _ps_unicodes_char_next(i10, i11) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = (HEAP32[i11 >> 2] | 0) + 1 | 0;
 i9 = HEAP32[i10 + 16 >> 2] | 0;
 do if (i9) {
  i7 = HEAP32[i10 + 20 >> 2] | 0;
  i6 = i9;
  i3 = 0;
  i1 = 0;
  while (1) {
   i8 = ((i6 - i3 | 0) >>> 1) + i3 | 0;
   i5 = HEAP32[i7 + (i8 << 3) >> 2] | 0;
   if ((i5 | 0) == (i2 | 0)) {
    i3 = 4;
    break;
   }
   if ((i5 & 2147483647 | 0) == (i2 | 0)) i1 = HEAP32[i7 + (i8 << 3) + 4 >> 2] | 0;
   i4 = (i5 & 2147483647) >>> 0 < i2 >>> 0 ? i8 + 1 | 0 : i3;
   i6 = (i5 & 2147483647) >>> 0 < i2 >>> 0 ? i6 : i8;
   if (i6 >>> 0 <= i4 >>> 0) {
    i3 = 8;
    break;
   } else i3 = i4;
  }
  if ((i3 | 0) == 4) {
   i6 = i2;
   i10 = HEAP32[i7 + (i8 << 3) + 4 >> 2] | 0;
   HEAP32[i11 >> 2] = i6;
   return i10 | 0;
  } else if ((i3 | 0) == 8) {
   if (!i1) {
    i1 = i4;
    break;
   }
   HEAP32[i11 >> 2] = i2;
   return i1 | 0;
  }
 } else i1 = 0; while (0);
 if (i1 >>> 0 >= i9 >>> 0) {
  i8 = 0;
  i10 = 0;
  HEAP32[i11 >> 2] = i8;
  return i10 | 0;
 }
 i10 = HEAP32[i10 + 20 >> 2] | 0;
 i8 = HEAP32[i10 + (i1 << 3) >> 2] & 2147483647;
 i10 = HEAP32[i10 + (i1 << 3) + 4 >> 2] | 0;
 HEAP32[i11 >> 2] = i8;
 return i10 | 0;
}

function __ZN6Shader17ReflectShaderCodeEPKc(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = HEAP32[i7 + 60 >> 2] | 0;
 i1 = HEAP32[i7 + 64 >> 2] | 0;
 if ((i1 | 0) != (i5 | 0)) do {
  i4 = i1 + -48 | 0;
  HEAP32[i7 + 64 >> 2] = i4;
  i2 = i1 + -16 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (i3) __ZdaPv(i3);
  HEAP32[i2 >> 2] = 0;
  i1 = i1 + -32 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2) __ZdaPv(i2);
  HEAP32[i1 >> 2] = 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i4 >> 2] = 0;
  i1 = HEAP32[i7 + 64 >> 2] | 0;
 } while ((i1 | 0) != (i5 | 0));
 i2 = HEAP32[i7 + 72 >> 2] | 0;
 i1 = HEAP32[i7 + 76 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i5 = i1 + -44 | 0;
  HEAP32[i7 + 76 >> 2] = i5;
  __ZN6Shader19UniformBufferObjectD2Ev(i5);
  i1 = HEAP32[i7 + 76 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i8, i6);
 __Z14RemoveCommentsR6String(i8);
 __ZN6Shader19ReflectShaderStringERK6StringPNS_19UniformBufferObjectE(i7, i8, 0);
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) {
  STACKTOP = i8;
  return;
 }
 __ZdaPv(i1);
 STACKTOP = i8;
 return;
}

function _tt_cmap12_next(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = HEAP32[i9 + 28 >> 2] | 0;
 L1 : do if ((i1 | 0) != -1 ? (i2 = HEAP32[i9 + 36 >> 2] | 0, i8 = HEAP32[i9 + 40 >> 2] | 0, i2 >>> 0 < i8 >>> 0) : 0) {
  i7 = HEAP32[i9 + 16 >> 2] | 0;
  i1 = i1 + 1 | 0;
  L4 : while (1) {
   i5 = i2 * 12 | 0;
   i6 = (HEAPU8[i7 + (i5 + 17) >> 0] | 0) << 16 | (HEAPU8[i7 + (i5 + 16) >> 0] | 0) << 24 | (HEAPU8[i7 + (i5 + 18) >> 0] | 0) << 8 | (HEAPU8[i7 + (i5 + 19) >> 0] | 0);
   i4 = (HEAPU8[i7 + (i5 + 21) >> 0] | 0) << 16 | (HEAPU8[i7 + (i5 + 20) >> 0] | 0) << 24 | (HEAPU8[i7 + (i5 + 22) >> 0] | 0) << 8 | (HEAPU8[i7 + (i5 + 23) >> 0] | 0);
   i5 = (HEAPU8[i7 + (i5 + 25) >> 0] | 0) << 16 | (HEAPU8[i7 + (i5 + 24) >> 0] | 0) << 24 | (HEAPU8[i7 + (i5 + 26) >> 0] | 0) << 8 | (HEAPU8[i7 + (i5 + 27) >> 0] | 0);
   i1 = i1 >>> 0 < i6 >>> 0 ? i6 : i1;
   if (i1 >>> 0 <= i4 >>> 0) do {
    i3 = i1 + i5 | 0;
    if ((i3 | 0) != (i6 | 0)) break L4;
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 <= i4 >>> 0);
   i2 = i2 + 1 | 0;
   if (i2 >>> 0 >= i8 >>> 0) break L1;
  }
  HEAP32[i9 + 28 >> 2] = i1;
  HEAP32[i9 + 32 >> 2] = i3 - i6;
  HEAP32[i9 + 36 >> 2] = i2;
  return;
 } while (0);
 HEAP8[i9 + 24 >> 0] = 0;
 return;
}

function __ZN4File21ReadWholeFileToMemoryERNSt3__16vectorIhNS0_9allocatorIhEEEE(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i2 = HEAP32[i5 + 32 >> 2] | 0;
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 if (i2 >>> 0 <= (i1 - i3 | 0) >>> 0) {
  if (i2 >>> 0 < (i1 - i3 | 0) >>> 0 ? (i1 | 0) != (i3 + i2 | 0) : 0) HEAP32[i4 + 4 >> 2] = i3 + i2;
 } else {
  __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj(i4, i2 - (i1 - i3) | 0);
  i2 = HEAP32[i5 + 32 >> 2] | 0;
 }
 if ((i2 | 0) <= 0) {
  i5 = 0;
  return i5 | 0;
 }
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 do if (!i1) {
  i1 = HEAP32[i5 >> 2] | 0;
  if (i1) {
   _fseek(i1, 0, 0) | 0;
   i2 = HEAP32[i5 + 32 >> 2] | 0;
   i3 = HEAP32[i5 + 20 >> 2] | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if (!i3) i3 = i1; else break;
  } else i3 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  if (!i1) {
   i5 = 0;
   return i5 | 0;
  }
  i5 = _fread(i3, 1, i2, i1) | 0;
  return i5 | 0;
 } else {
  HEAP32[i5 + 24 >> 2] = 0;
  i3 = i1;
  i1 = HEAP32[i4 >> 2] | 0;
 } while (0);
 i6 = HEAP32[i5 + 24 >> 2] | 0;
 i4 = i2 - i6 | 0;
 i4 = (i4 | 0) < (i2 | 0) ? i4 : i2;
 _memcpy(i1 | 0, i3 + i6 | 0, i4 | 0) | 0;
 HEAP32[i5 + 24 >> 2] = i4 + (HEAP32[i5 + 24 >> 2] | 0);
 i5 = i4;
 return i5 | 0;
}

function __ZN4math6Sphere20RandomPointOnSurfaceERNS_3LCGE(i5, i6, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, f3 = f0, f4 = f0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i7 + 24 >> 2] = HEAP32[163];
 HEAP32[i7 + 24 + 4 >> 2] = HEAP32[164];
 HEAP32[i7 + 24 + 8 >> 2] = HEAP32[165];
 i1 = 0;
 while (1) {
  HEAPF32[i7 + 24 >> 2] = Math_fround(__ZN4math3LCG11FloatNeg1_1Ev(i2));
  HEAPF32[i7 + 24 + 4 >> 2] = Math_fround(__ZN4math3LCG11FloatNeg1_1Ev(i2));
  HEAPF32[i7 + 24 + 8 >> 2] = Math_fround(__ZN4math3LCG11FloatNeg1_1Ev(i2));
  f4 = Math_fround(__ZNK4math6float38LengthSqEv(i7 + 24 | 0));
  if (f4 >= Math_fround(9.99999997e-007) ? (f3 = Math_fround(HEAPF32[i6 + 12 >> 2]), f4 <= Math_fround(f3 * f3)) : 0) {
   i1 = 4;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= 1e3) {
   i1 = 6;
   break;
  }
 }
 if ((i1 | 0) == 4) {
  __ZN4mathmlEfRKNS_6float3E(i7 + 12 | 0, Math_fround(f3 / Math_fround(Math_sqrt(Math_fround(f4)))), i7 + 24 | 0);
  __ZNK4math6float3plERKS0_(i5, i6, i7 + 12 | 0);
  STACKTOP = i7;
  return;
 } else if ((i1 | 0) == 6) {
  __ZN4math6float3C2Efff(i7, Math_fround(HEAPF32[i6 + 12 >> 2]), Math_fround(0.0), Math_fround(0.0));
  __ZNK4math6float3plERKS0_(i5, i6, i7);
  STACKTOP = i7;
  return;
 }
}

function _FT_GlyphLoader_Add(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 if (!i6) return;
 i3 = HEAP16[i6 + 56 >> 1] | 0;
 i4 = HEAP16[i6 + 22 >> 1] | 0;
 i1 = (HEAPU16[i6 + 58 >> 1] | 0) + i4 & 65535;
 HEAP16[i6 + 22 >> 1] = i1;
 i2 = (i3 & 65535) + (HEAPU16[i6 + 20 >> 1] | 0) & 65535;
 HEAP16[i6 + 20 >> 1] = i2;
 i5 = (HEAP32[i6 + 48 >> 2] | 0) + (HEAP32[i6 + 84 >> 2] | 0) | 0;
 HEAP32[i6 + 48 >> 2] = i5;
 if (i3 << 16 >> 16) {
  i1 = HEAP32[i6 + 68 >> 2] | 0;
  i2 = 0;
  do {
   i7 = i1 + (i2 << 1) | 0;
   HEAP16[i7 >> 1] = (HEAPU16[i7 >> 1] | 0) + i4;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i3 << 16 >> 16 >>> 0);
  i1 = HEAP16[i6 + 22 >> 1] | 0;
  i2 = HEAP16[i6 + 20 >> 1] | 0;
 }
 HEAP16[i6 + 58 >> 1] = 0;
 HEAP16[i6 + 56 >> 1] = 0;
 HEAP32[i6 + 84 >> 2] = 0;
 i1 = i1 << 16 >> 16;
 HEAP32[i6 + 60 >> 2] = (HEAP32[i6 + 24 >> 2] | 0) + (i1 << 3);
 HEAP32[i6 + 64 >> 2] = (HEAP32[i6 + 28 >> 2] | 0) + i1;
 HEAP32[i6 + 68 >> 2] = (HEAP32[i6 + 32 >> 2] | 0) + (i2 << 16 >> 16 << 1);
 if (HEAP8[i6 + 16 >> 0] | 0) {
  HEAP32[i6 + 76 >> 2] = (HEAP32[i6 + 40 >> 2] | 0) + (i1 << 3);
  HEAP32[i6 + 80 >> 2] = (HEAP32[i6 + 44 >> 2] | 0) + (i1 << 3);
 }
 HEAP32[i6 + 88 >> 2] = (HEAP32[i6 + 52 >> 2] | 0) + (i5 << 5);
 return;
}

function _cff_size_select(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i8 + 44 >> 2] = i1;
 _FT_Select_Metrics(HEAP32[i8 >> 2] | 0, i1);
 i2 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 + 692 >> 2] | 0) + 2952 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) return 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) return 0;
 i4 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i4) return 0;
 i5 = HEAP32[(HEAP32[i8 >> 2] | 0) + 692 >> 2] | 0;
 i6 = HEAP32[i8 + 40 >> 2] | 0;
 i7 = HEAP32[i5 + 1392 >> 2] | 0;
 FUNCTION_TABLE_iiiiii[HEAP32[i4 + 4 >> 2] & 63](HEAP32[i6 >> 2] | 0, HEAP32[i8 + 16 >> 2] | 0, HEAP32[i8 + 20 >> 2] | 0, 0, 0) | 0;
 i1 = HEAP32[i5 + 1896 >> 2] | 0;
 if (!i1) return 0;
 do {
  i1 = i1 + -1 | 0;
  i3 = HEAP32[(HEAP32[i5 + 1900 + (i1 << 2) >> 2] | 0) + 68 >> 2] | 0;
  i2 = HEAP32[i8 + 16 >> 2] | 0;
  if ((i7 | 0) == (i3 | 0)) i3 = HEAP32[i8 + 20 >> 2] | 0; else {
   i2 = _FT_MulDiv(i2, i7, i3) | 0;
   i3 = _FT_MulDiv(HEAP32[i8 + 20 >> 2] | 0, i7, i3) | 0;
  }
  FUNCTION_TABLE_iiiiii[HEAP32[i4 + 4 >> 2] & 63](HEAP32[i6 + 4 + (i1 << 2) >> 2] | 0, i2, i3, 0, 0) | 0;
 } while ((i1 | 0) != 0);
 return 0;
}

function _FT_Select_Metrics(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i5 + 88 >> 2] | 0;
 i3 = HEAP32[i5 + 32 >> 2] | 0;
 i4 = HEAP32[i3 + (i6 << 4) + 8 >> 2] | 0;
 HEAP16[i1 + 12 >> 1] = (i4 + 32 | 0) >>> 6;
 i2 = HEAP32[i3 + (i6 << 4) + 12 >> 2] | 0;
 HEAP16[i1 + 14 >> 1] = (i2 + 32 | 0) >>> 6;
 if (!(HEAP32[i5 + 8 >> 2] & 1)) {
  HEAP32[i1 + 16 >> 2] = 65536;
  HEAP32[i1 + 20 >> 2] = 65536;
  HEAP32[i1 + 24 >> 2] = i2;
  HEAP32[i1 + 28 >> 2] = 0;
  HEAP32[i1 + 32 >> 2] = HEAP16[i3 + (i6 << 4) >> 1] << 6;
  i5 = i4;
  i6 = i1 + 36 | 0;
  HEAP32[i6 >> 2] = i5;
  return;
 } else {
  HEAP32[i1 + 16 >> 2] = _FT_DivFix(i4, HEAPU16[i5 + 68 >> 1] | 0) | 0;
  i6 = _FT_DivFix(HEAP32[i3 + (i6 << 4) + 12 >> 2] | 0, HEAPU16[i5 + 68 >> 1] | 0) | 0;
  HEAP32[i1 + 20 >> 2] = i6;
  HEAP32[i1 + 24 >> 2] = (_FT_MulFix(HEAP16[i5 + 70 >> 1] | 0, i6) | 0) + 63 & -64;
  HEAP32[i1 + 28 >> 2] = (_FT_MulFix(HEAP16[i5 + 72 >> 1] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0) & -64;
  HEAP32[i1 + 32 >> 2] = (_FT_MulFix(HEAP16[i5 + 74 >> 1] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0) + 32 & -64;
  i5 = (_FT_MulFix(HEAP16[i5 + 76 >> 1] | 0, HEAP32[i1 + 16 >> 2] | 0) | 0) + 32 & -64;
  i6 = i1 + 36 | 0;
  HEAP32[i6 >> 2] = i5;
  return;
 }
}

function _tt_face_get_location(i6, i5, i7) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i6 + 732 >> 2] | 0;
 if (i1 >>> 0 > i5 >>> 0) {
  i4 = HEAP32[i6 + 736 >> 2] | 0;
  if (HEAP16[i6 + 210 >> 1] | 0) {
   i2 = HEAPU8[i4 + (i5 << 2 | 1) >> 0] << 16 | HEAPU8[i4 + (i5 << 2) >> 0] << 24 | HEAPU8[i4 + (i5 << 2 | 2) >> 0] << 8 | HEAPU8[i4 + (i5 << 2 | 3) >> 0];
   if (((i5 << 2) + 8 | 0) > (i1 << 2 | 0)) i3 = i2; else {
    i3 = i2;
    i2 = HEAPU8[i4 + ((i5 << 2) + 5) >> 0] << 16 | HEAPU8[i4 + ((i5 << 2) + 4) >> 0] << 24 | HEAPU8[i4 + ((i5 << 2) + 6) >> 0] << 8 | HEAPU8[i4 + ((i5 << 2) + 7) >> 0];
   }
  } else {
   i2 = HEAPU8[i4 + (i5 << 1) >> 0] << 8 | HEAPU8[i4 + (i5 << 1 | 1) >> 0];
   if (((i5 << 1) + 4 | 0) > (i1 << 1 | 0)) i1 = i2; else i1 = HEAPU8[i4 + ((i5 << 1) + 2) >> 0] << 8 | HEAPU8[i4 + ((i5 << 1) + 3) >> 0];
   i3 = i2 << 1;
   i2 = i1 << 1;
  }
  i1 = HEAP32[i6 + 704 >> 2] | 0;
  if (i3 >>> 0 > i1 >>> 0) {
   i6 = 0;
   i5 = 0;
   HEAP32[i7 >> 2] = i5;
   return i6 | 0;
  }
 } else {
  i1 = HEAP32[i6 + 704 >> 2] | 0;
  i3 = 0;
  i2 = 0;
 }
 i5 = i2 >>> 0 > i1 >>> 0 ? i1 : i2;
 i6 = i3;
 i5 = (i5 >>> 0 < i3 >>> 0 ? i1 : i5) - i3 | 0;
 HEAP32[i7 >> 2] = i5;
 return i6 | 0;
}

function __ZN20ShaderConstantBufferD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 HEAP32[i3 + 24 >> 2] = 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 if (!i1) i2 = 1; else {
  __ZdaPv(i1);
  i2 = (HEAP32[i3 + 24 >> 2] | 0) == 0;
 }
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 if (!i2) {
  i2 = 0;
  do {
   _memset(i4 | 0, 0, 156) | 0;
   HEAP8[i1 + (i2 * 156 | 0) >> 0] = 0;
   HEAP32[i1 + (i2 * 156 | 0) + 132 >> 2] = 0;
   i1 = i1 + (i2 * 156 | 0) + 136 | 0;
   HEAP32[i1 >> 2] = HEAP32[i4 + 136 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 136 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 136 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 136 + 12 >> 2];
   HEAP32[i1 + 16 >> 2] = HEAP32[i4 + 136 + 16 >> 2];
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i3 + 12 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i3 + 24 >> 2] | 0) >>> 0);
 }
 if (!i1) {
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP32[i3 + 12 + 4 >> 2] = 0;
  HEAP32[i3 + 12 + 8 >> 2] = 0;
  HEAP32[i3 + 12 + 12 >> 2] = 0;
  STACKTOP = i4;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 12 + 4 >> 2] = 0;
 HEAP32[i3 + 12 + 8 >> 2] = 0;
 HEAP32[i3 + 12 + 12 >> 2] = 0;
 STACKTOP = i4;
 return;
}

function _t42_parse_font_matrix(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 FUNCTION_TABLE_iiiii[HEAP32[i1 + 52 >> 2] & 63](i1, 6, i7, 3) | 0;
 i1 = HEAP32[i7 + 12 >> 2] | 0;
 i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
 HEAP16[i6 + 68 >> 1] = (_FT_DivFix(65536e3, i1) | 0) >>> 16;
 if ((i1 | 0) == 65536) {
  i1 = i7 + 8 | 0;
  i2 = i7 + 16 | 0;
  i3 = i7 + 4 | 0;
  i4 = HEAP32[i7 + 12 >> 2] | 0;
  i5 = HEAP32[i7 + 20 >> 2] | 0;
 } else {
  HEAP32[i7 >> 2] = _FT_DivFix(HEAP32[i7 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 4 >> 2] = _FT_DivFix(HEAP32[i7 + 4 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 8 >> 2] = _FT_DivFix(HEAP32[i7 + 8 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 16 >> 2] = _FT_DivFix(HEAP32[i7 + 16 >> 2] | 0, i1) | 0;
  i5 = _FT_DivFix(HEAP32[i7 + 20 >> 2] | 0, i1) | 0;
  HEAP32[i7 + 20 >> 2] = i5;
  HEAP32[i7 + 12 >> 2] = 65536;
  i1 = i7 + 8 | 0;
  i2 = i7 + 16 | 0;
  i3 = i7 + 4 | 0;
  i4 = 65536;
 }
 HEAP32[i6 + 436 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i6 + 444 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 + 440 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i6 + 448 >> 2] = i4;
 HEAP32[i6 + 452 >> 2] = HEAP32[i2 >> 2] >> 16;
 HEAP32[i6 + 456 >> 2] = i5 >> 16;
 STACKTOP = i7;
 return;
}

function _FT_Stream_New(i1, i3, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i5 >> 2] = 0;
 if (!i1) {
  i5 = 33;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (!i3) {
  i5 = 6;
  STACKTOP = i6;
  return i5 | 0;
 }
 i4 = HEAP32[i1 >> 2] | 0;
 i1 = _ft_mem_alloc(i4, 40, i6) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if (i2) {
  i5 = i2;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i1 + 28 >> 2] = i4;
 i2 = HEAP32[i3 >> 2] | 0;
 do if (!(i2 & 1)) {
  if (i2 & 4) {
   HEAP32[i6 >> 2] = _FT_Stream_Open(i1, HEAP32[i3 + 12 >> 2] | 0) | 0;
   HEAP32[i1 + 16 >> 2] = HEAP32[i3 + 12 >> 2];
   i3 = 12;
   break;
  }
  if ((i2 & 2 | 0) != 0 ? (HEAP32[i3 + 16 >> 2] | 0) != 0 : 0) {
   _ft_mem_free(i4, i1);
   i1 = HEAP32[i3 + 16 >> 2] | 0;
   i3 = 12;
   break;
  }
  HEAP32[i6 >> 2] = 6;
  i3 = 13;
 } else {
  _FT_Stream_OpenMemory(i1, HEAP32[i3 + 4 >> 2] | 0, HEAP32[i3 + 8 >> 2] | 0);
  i3 = 12;
 } while (0);
 if ((i3 | 0) == 12) if (!(HEAP32[i6 >> 2] | 0)) {
  HEAP32[i1 + 28 >> 2] = i4;
  i2 = 0;
 } else i3 = 13;
 if ((i3 | 0) == 13) {
  _ft_mem_free(i4, i1);
  i2 = HEAP32[i6 >> 2] | 0;
  i1 = 0;
 }
 HEAP32[i5 >> 2] = i1;
 i5 = i2;
 STACKTOP = i6;
 return i5 | 0;
}

function ___stpncpy(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 do if (!((i3 ^ i2) & 3)) {
  L3 : do if ((i1 | 0) != 0 & (i3 & 3 | 0) != 0) while (1) {
   i4 = HEAP8[i3 >> 0] | 0;
   HEAP8[i2 >> 0] = i4;
   if (!(i4 << 24 >> 24)) break L3;
   i1 = i1 + -1 | 0;
   i3 = i3 + 1 | 0;
   i2 = i2 + 1 | 0;
   if (!((i1 | 0) != 0 & (i3 & 3 | 0) != 0)) {
    i4 = i1;
    i1 = (i1 | 0) != 0;
    i5 = 5;
    break;
   }
  } else {
   i4 = i1;
   i1 = (i1 | 0) != 0;
   i5 = 5;
  } while (0);
  if ((i5 | 0) == 5) if (i1) i1 = i4; else {
   i1 = 0;
   break;
  }
  if (HEAP8[i3 >> 0] | 0) {
   L11 : do if (i1 >>> 0 > 3) do {
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 & -2139062144 ^ -2139062144) & i4 + -16843009) break L11;
    HEAP32[i2 >> 2] = i4;
    i1 = i1 + -4 | 0;
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
   } while (i1 >>> 0 > 3); while (0);
   i5 = 11;
  }
 } else i5 = 11; while (0);
 L16 : do if ((i5 | 0) == 11) if (!i1) i1 = 0; else while (1) {
  i5 = HEAP8[i3 >> 0] | 0;
  HEAP8[i2 >> 0] = i5;
  if (!(i5 << 24 >> 24)) break L16;
  i1 = i1 + -1 | 0;
  i2 = i2 + 1 | 0;
  if (!i1) {
   i1 = 0;
   break;
  } else i3 = i3 + 1 | 0;
 } while (0);
 _memset(i2 | 0, 0, i1 | 0) | 0;
 return i2 | 0;
}

function _ft_corner_orientation(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0;
 if (!i4) return ((i1 | 0) > -1 ? i2 : 0 - i2 | 0) | 0;
 if (!i1) {
  i6 = (i4 | 0) > -1 ? 0 - i5 | 0 : i5;
  return i6 | 0;
 }
 if (!i2) {
  i6 = (i5 | 0) > -1 ? i4 : 0 - i4 | 0;
  return i6 | 0;
 }
 if (!i5) {
  i6 = (i2 | 0) > -1 ? 0 - i1 | 0 : i1;
  return i6 | 0;
 }
 i3 = Math_imul(i2 & 65535, i1 >>> 16) | 0;
 i7 = (Math_imul(i2 >>> 16, i1 & 65535) | 0) + i3 | 0;
 i6 = (i7 << 16) + (Math_imul(i2 & 65535, i1 & 65535) | 0) | 0;
 i2 = (i7 >>> 16) + (Math_imul(i2 >>> 16, i1 >>> 16) | 0) + ((i7 >>> 0 < i3 >>> 0 & 1) << 16) + (i6 >>> 0 < i7 << 16 >>> 0 & 1) | 0;
 i7 = Math_imul(i5 & 65535, i4 >>> 16) | 0;
 i1 = (Math_imul(i5 >>> 16, i4 & 65535) | 0) + i7 | 0;
 i3 = (i1 << 16) + (Math_imul(i5 & 65535, i4 & 65535) | 0) | 0;
 i1 = (i1 >>> 16) + (Math_imul(i5 >>> 16, i4 >>> 16) | 0) + ((i1 >>> 0 < i7 >>> 0 & 1) << 16) + (i3 >>> 0 < i1 << 16 >>> 0 & 1) | 0;
 if (i2 >>> 0 > i1 >>> 0) {
  i7 = 1;
  return i7 | 0;
 }
 if (i2 >>> 0 < i1 >>> 0) {
  i7 = -1;
  return i7 | 0;
 }
 if (i6 >>> 0 > i3 >>> 0) {
  i7 = 1;
  return i7 | 0;
 }
 i7 = (i6 >>> 0 < i3 >>> 0) << 31 >> 31;
 return i7 | 0;
}

function __ZN9MainClass12ProcessFrameEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, f3 = f0, d4 = 0.0, d5 = 0.0, d6 = 0.0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 d4 = +__ZN4math5Clock4TickEv();
 d5 = d4 - +HEAPF64[i1 + 1304 >> 3];
 HEAPF64[i1 + 1304 >> 3] = d4;
 d6 = +__ZN4math5Clock11TicksPerSecEv() / 10.0;
 d6 = d5 <= d6 ? d5 : d6;
 HEAPF64[i1 + 1320 >> 3] = +HEAPF64[i1 + 1320 >> 3] + d6;
 HEAPF32[i2 + 12 >> 2] = Math_fround(d6 / +Math_fround(+__ZN4math5Clock11TicksPerSecEv()));
 HEAPF32[i2 + 16 >> 2] = Math_fround(d5 / +Math_fround(+__ZN4math5Clock11TicksPerSecEv()));
 d4 = d4 - +HEAPF64[i1 + 1312 >> 3];
 f3 = Math_fround(d4 / +Math_fround(+__ZN4math5Clock11TicksPerSecEv()));
 HEAPF32[i2 + 4 >> 2] = f3;
 HEAPF32[i1 + 1272 >> 2] = f3;
 d4 = +HEAPF64[i1 + 1320 >> 3];
 f3 = Math_fround(d4 / +Math_fround(+__ZN4math5Clock11TicksPerSecEv()));
 HEAPF32[i2 >> 2] = f3;
 HEAPF32[i1 + 1268 >> 2] = f3;
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 1276 >> 2];
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i2);
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 127](i1);
 HEAP32[i1 + 1276 >> 2] = (HEAP32[i1 + 1276 >> 2] | 0) + 1;
 __ZN5Input17OnNewFrameStartedEv(i1 + 448 | 0);
 STACKTOP = i2;
 return;
}
function _raccess_guess_apple_generic(i6, i3, i5) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = _FT_Stream_ReadULong(i6, i7) | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 L1 : do if (!i1) if ((i2 | 0) == (i3 | 0)) {
  _FT_Stream_ReadULong(i6, i7) | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  if (!i1) {
   i1 = _FT_Stream_Skip(i6, 16) | 0;
   HEAP32[i7 >> 2] = i1;
   if (!i1) {
    i4 = _FT_Stream_ReadUShort(i6, i7) | 0;
    i1 = HEAP32[i7 >> 2] | 0;
    if (!i1) if (!(i4 << 16 >> 16)) i1 = 2; else {
     i3 = 0;
     while (1) {
      i2 = _FT_Stream_ReadULong(i6, i7) | 0;
      i1 = HEAP32[i7 >> 2] | 0;
      if (i1) break L1;
      if ((i2 | 0) == 2) {
       i1 = _FT_Stream_ReadULong(i6, i7) | 0;
       if ((HEAP32[i7 >> 2] | 0) == 0 ? (_FT_Stream_ReadULong(i6, i7) | 0, (HEAP32[i7 >> 2] | 0) == 0) : 0) break;
      } else {
       i1 = _FT_Stream_Skip(i6, 8) | 0;
       HEAP32[i7 >> 2] = i1;
       if (i1) break L1;
      }
      i3 = i3 + 1 | 0;
      if ((i3 | 0) >= (i4 & 65535 | 0)) {
       i1 = 2;
       break L1;
      }
     }
     HEAP32[i5 >> 2] = i1;
     i1 = 0;
    }
   }
  }
 } else i1 = 2; while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNK4math8float4x412TransformPosEfff(i1, i2, f3, f4, f5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 var f6 = f0, f7 = f0;
 f7 = Math_fround(Math_fround(__ZNK4math6float42AtEi(i2, 0)) * f3);
 f7 = Math_fround(f7 + Math_fround(Math_fround(__ZNK4math6float42AtEi(i2, 1)) * f4));
 f7 = Math_fround(f7 + Math_fround(Math_fround(__ZNK4math6float42AtEi(i2, 2)) * f5));
 f7 = Math_fround(Math_fround(__ZNK4math6float42AtEi(i2, 3)) + f7);
 f6 = Math_fround(Math_fround(__ZNK4math6float42AtEi(i2 + 16 | 0, 0)) * f3);
 f6 = Math_fround(f6 + Math_fround(Math_fround(__ZNK4math6float42AtEi(i2 + 16 | 0, 1)) * f4));
 f6 = Math_fround(f6 + Math_fround(Math_fround(__ZNK4math6float42AtEi(i2 + 16 | 0, 2)) * f5));
 f6 = Math_fround(Math_fround(__ZNK4math6float42AtEi(i2 + 16 | 0, 3)) + f6);
 f3 = Math_fround(Math_fround(__ZNK4math6float42AtEi(i2 + 32 | 0, 0)) * f3);
 f4 = Math_fround(f3 + Math_fround(Math_fround(__ZNK4math6float42AtEi(i2 + 32 | 0, 1)) * f4));
 f5 = Math_fround(f4 + Math_fround(Math_fround(__ZNK4math6float42AtEi(i2 + 32 | 0, 2)) * f5));
 __ZN4math6float3C2Efff(i1, f7, f6, Math_fround(Math_fround(__ZNK4math6float42AtEi(i2 + 32 | 0, 3)) + f5));
 return;
}

function _FT_Set_Charmap(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i7) {
  i8 = 35;
  STACKTOP = i9;
  return i8 | 0;
 }
 i5 = HEAP32[i7 + 40 >> 2] | 0;
 if (!i5) {
  i8 = 38;
  STACKTOP = i9;
  return i8 | 0;
 }
 if (((((i6 | 0) != 0 ? (i3 = HEAP32[i6 >> 2] | 0, (i3 | 0) != 0) : 0) ? (i4 = HEAP32[i3 + 96 >> 2] | 0, i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + 32 >> 2] | 0, (i1 | 0) != 0) : 0) ? (i2 = FUNCTION_TABLE_iii[i1 & 255](i4, 325852) | 0, (i2 | 0) != 0) : 0) ? (FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 255](i6, i9) | 0) == 0 : 0) {
  if ((HEAP32[i9 + 4 >> 2] | 0) == 14) {
   i8 = 6;
   STACKTOP = i9;
   return i8 | 0;
  }
 } else i8 = 8;
 i1 = HEAP32[i7 + 36 >> 2] | 0;
 if ((i1 | 0) > 0) i2 = i5; else {
  i8 = 6;
  STACKTOP = i9;
  return i8 | 0;
 }
 while (1) {
  if ((HEAP32[i2 >> 2] | 0) == (i6 | 0) ? (i2 - (HEAP32[i7 + 40 >> 2] | 0) | 0) <= 60 : 0) break;
  i2 = i2 + 4 | 0;
  if (i2 >>> 0 >= (i5 + (i1 << 2) | 0) >>> 0) {
   i1 = 6;
   i8 = 15;
   break;
  }
 }
 if ((i8 | 0) == 15) {
  STACKTOP = i9;
  return i1 | 0;
 }
 HEAP32[i7 + 92 >> 2] = i6;
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _gray_move_to(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 _gray_record_cell(i5);
 i4 = HEAP32[i1 >> 2] << 2;
 i3 = HEAP32[i1 + 4 >> 2] << 2;
 i1 = HEAP32[i5 + 12 >> 2] | 0;
 i7 = (i1 | 0) < (i4 >> 8 | 0) ? i1 : i4 >> 8;
 i6 = HEAP32[i5 + 8 >> 2] | 0;
 i7 = (i7 | 0) < (i6 | 0) ? i6 + -1 | 0 : i7;
 HEAP32[i5 + 32 >> 2] = 0;
 HEAP32[i5 + 36 >> 2] = 0;
 HEAP32[i5 >> 2] = i7 - i6;
 i2 = (i3 >> 8) - (HEAP32[i5 + 16 >> 2] | 0) | 0;
 HEAP32[i5 + 4 >> 2] = i2;
 HEAP32[i5 + 72 >> 2] = i3 >> 8 << 8;
 HEAP32[i5 + 40 >> 2] = 0;
 i1 = ((i1 | 0) < (i7 | 0) ? i1 : i7) - i6 | 0;
 i1 = (i1 | 0) > -1 ? i1 : -1;
 if ((i1 | 0) != (i7 - i6 | 0)) {
  _gray_record_cell(i5);
  HEAP32[i5 + 32 >> 2] = 0;
  HEAP32[i5 + 36 >> 2] = 0;
 }
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i2;
 if (i2 >>> 0 >= (HEAP32[i5 + 28 >> 2] | 0) >>> 0) {
  i7 = 1;
  i7 = i7 & 1;
  HEAP32[i5 + 40 >> 2] = i7;
  i7 = i5 + 64 | 0;
  HEAP32[i7 >> 2] = i4;
  i7 = i5 + 68 | 0;
  HEAP32[i7 >> 2] = i3;
  return 0;
 }
 i7 = (i1 | 0) >= (HEAP32[i5 + 24 >> 2] | 0);
 i7 = i7 & 1;
 HEAP32[i5 + 40 >> 2] = i7;
 i7 = i5 + 64 | 0;
 HEAP32[i7 >> 2] = i4;
 i7 = i5 + 68 | 0;
 HEAP32[i7 >> 2] = i3;
 return 0;
}

function __ZNK14ProgramOptions8IntValueEPKci(i2, i7, i1) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = HEAP32[i2 >> 2] | 0;
 if ((i6 | 0) <= 2) {
  i8 = i1;
  return i8 | 0;
 }
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 i4 = 2;
 i2 = 1;
 L4 : while (1) {
  i2 = HEAP32[i5 + (i2 << 2) >> 2] | 0;
  i3 = HEAP8[i2 >> 0] | 0;
  switch (i3 << 24 >> 24) {
  case 47:
  case 45:
   {
    if ((i3 & -3) << 24 >> 24 == 45) do {
     i2 = i2 + 1 | 0;
     i3 = HEAP8[i2 >> 0] | 0;
    } while (i3 << 24 >> 24 != 0 & (i3 & -3) << 24 >> 24 == 45);
    i3 = i7;
    while (1) {
     i9 = HEAP8[i3 >> 0] | 0;
     if (i9 << 24 >> 24 != 0 & (i9 & -3) << 24 >> 24 == 45) i3 = i3 + 1 | 0; else break;
    }
    if (!(_strcmp(i2, i3) | 0)) {
     i2 = HEAP32[i5 + (i4 << 2) >> 2] | 0;
     switch (HEAP8[i2 >> 0] | 0) {
     case 47:
     case 45:
      break;
     default:
      break L4;
     }
    }
    break;
   }
  default:
   {}
  }
  i2 = i4 + 1 | 0;
  if ((i2 | 0) < (i6 | 0)) {
   i3 = i4;
   i4 = i2;
   i2 = i3;
  } else {
   i8 = 13;
   break;
  }
 }
 if ((i8 | 0) == 13) return i1 | 0;
 if (!i2) {
  i8 = i1;
  return i8 | 0;
 }
 i8 = _atoi(i2) | 0;
 return i8 | 0;
}

function _FT_MulDiv(i7, i8, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if ((i7 | 0) == 0 | (i8 | 0) == (i9 | 0)) {
  i8 = i7;
  return i8 | 0;
 }
 i2 = (i7 | 0) < 0 ? 0 - i7 | 0 : i7;
 i3 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
 i6 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
 if (!((i2 | 0) < 46341 & (i3 | 0) < 46341 & (i6 + -1 | 0) >>> 0 < 176095)) if ((i6 | 0) > 0 ? (i5 = Math_imul(i3 & 65535, i2 >>> 16) | 0, i4 = (Math_imul(i3 >>> 16, i2 & 65535) | 0) + i5 | 0, i1 = (i4 << 16) + (Math_imul(i3 & 65535, i2 & 65535) | 0) | 0, i4 = (i4 >>> 16) + (Math_imul(i3 >>> 16, i2 >>> 16) | 0) + ((i4 >>> 0 < i5 >>> 0 & 1) << 16) + (i1 >>> 0 < i4 << 16 >>> 0 & 1) + ((i1 + (i6 >> 1) | 0) >>> 0 < i1 >>> 0 & 1) | 0, i4 >>> 0 < i6 >>> 0) : 0) {
  i3 = i1 + (i6 >> 1) | 0;
  i5 = 32;
  i1 = 0;
  i2 = i4;
  while (1) {
   i2 = i2 << 1 | i3 >>> 31;
   i1 = (i2 >>> 0 < i6 >>> 0 | i1 << 1) ^ 1;
   i5 = i5 + -1 | 0;
   if (!i5) break; else {
    i3 = i3 << 1;
    i2 = i2 - (i2 >>> 0 < i6 >>> 0 ? 0 : i6) | 0;
   }
  }
 } else i1 = 2147483647; else i1 = ((i6 >> 1) + (Math_imul(i3, i2) | 0) | 0) / (i6 | 0) | 0;
 i8 = (i8 ^ i7 ^ i9 | 0) < 0 ? 0 - i1 | 0 : i1;
 return i8 | 0;
}

function __ZN14ProgramOptions13BuildArgvPtrsEv(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = HEAP32[i9 + 40 >> 2] | 0;
 if (!i1) return;
 HEAP32[i9 + 56 >> 2] = 0;
 i2 = 0;
 i3 = HEAP32[i9 + 52 >> 2] | 0;
 i6 = 0;
 do {
  i5 = HEAP32[(HEAP32[i9 + 28 >> 2] | 0) + (i6 << 4) >> 2] | 0;
  if (i2 >>> 0 >= i3 >>> 0 ? (i8 = i3 << 1, i8 = i8 >>> 0 < 32 ? 32 : i8, i8 >>> 0 >= i3 >>> 0) : 0) {
   i4 = __Znaj(i8 >>> 0 > 1073741823 ? -1 : i8 << 2) | 0;
   i3 = HEAP32[i9 + 44 >> 2] | 0;
   if (!i2) if (!i3) i2 = 0; else i7 = 8; else {
    i1 = 0;
    do {
     HEAP32[i4 + (i1 << 2) >> 2] = HEAP32[i3 + (i1 << 2) >> 2];
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i2 | 0));
    i7 = 8;
   }
   if ((i7 | 0) == 8) {
    i7 = 0;
    __ZdaPv(i3);
    i2 = HEAP32[i9 + 56 >> 2] | 0;
    i1 = HEAP32[i9 + 40 >> 2] | 0;
   }
   HEAP32[i9 + 44 >> 2] = i4;
   HEAP32[i9 + 52 >> 2] = i8;
   i3 = i8;
  }
  HEAP32[(HEAP32[i9 + 44 >> 2] | 0) + (i2 << 2) >> 2] = i5;
  i2 = i2 + 1 | 0;
  HEAP32[i9 + 56 >> 2] = i2;
  i6 = i6 + 1 | 0;
 } while (i6 >>> 0 < i1 >>> 0);
 HEAP32[i9 >> 2] = i2;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = HEAP32[i9 + 44 >> 2];
 return;
}

function __ZN20ShaderConstantBuffer13ConstantIndexEPKc(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = HEAP32[i1 + 24 >> 2] | 0;
 if ((i8 | 0) <= 0) {
  i8 = -1;
  return i8 | 0;
 }
 i7 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i9) {
  i1 = 0;
  while (1) {
   if (!(HEAP8[i7 + (i1 * 156 | 0) >> 0] | 0)) {
    i2 = 11;
    break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i8 | 0)) {
    i1 = -1;
    i2 = 11;
    break;
   }
  }
  if ((i2 | 0) == 11) return i1 | 0;
 }
 i6 = HEAP8[i9 >> 0] | 0;
 i1 = 0;
 while (1) {
  i3 = i7 + (i1 * 156 | 0) | 0;
  i2 = HEAP8[i3 >> 0] | 0;
  if (i2 << 24 >> 24 == 0 | i2 << 24 >> 24 == i6 << 24 >> 24 ^ 1) {
   if (i2 << 24 >> 24 == 0 ? i2 << 24 >> 24 == i6 << 24 >> 24 : 0) {
    i2 = 11;
    break;
   }
  } else {
   i5 = i9;
   do {
    i3 = i3 + 1 | 0;
    i5 = i5 + 1 | 0;
    i2 = HEAP8[i3 >> 0] | 0;
    i4 = i2 << 24 >> 24 == (HEAP8[i5 >> 0] | 0);
   } while (!(i2 << 24 >> 24 == 0 | i4 ^ 1));
   if (i2 << 24 >> 24 == 0 & i4) {
    i2 = 11;
    break;
   }
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i8 | 0)) {
   i1 = -1;
   i2 = 11;
   break;
  }
 }
 if ((i2 | 0) == 11) return i1 | 0;
 return 0;
}

function __ZN9MainClassC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i1 >> 2] = 516;
 __ZN8GraphicsC2Ev(i1 + 4 | 0);
 __ZN5InputC2Ev(i1 + 448 | 0);
 i2 = i1 + 1176 | 0;
 i4 = i2 + 60 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP32[i1 + 1236 >> 2] = i1;
 HEAP32[i1 + 1240 >> 2] = 0;
 HEAP32[i1 + 1244 >> 2] = i1;
 HEAP32[i1 + 1248 >> 2] = 0;
 HEAP32[i1 + 1252 >> 2] = i1;
 HEAP32[i1 + 1256 >> 2] = 0;
 HEAP32[i1 + 1260 >> 2] = i1;
 HEAP32[i1 + 1264 >> 2] = 0;
 __ZN4math3LCGC2Ev(i1 + 1280 | 0);
 HEAP8[i1 + 1296 >> 0] = 0;
 HEAPF64[i1 + 1320 >> 3] = 0.0;
 d5 = +__ZN4math5Clock4TickEv();
 HEAPF64[i1 + 1312 >> 3] = d5;
 HEAPF64[i1 + 1304 >> 3] = d5;
 HEAPF32[i1 + 1272 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 1268 >> 2] = Math_fround(0.0);
 HEAP32[i1 + 1276 >> 2] = 0;
 __ZN4math3LCG4SeedEmmmm(i3, __ZN4math5Clock7TickU32Ev() | 0, 69621, 0, 2147483647);
 HEAP32[i1 + 1280 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 1280 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 1280 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i1 + 1280 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 STACKTOP = i3;
 return;
}

function _memchr(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0;
 L1 : do if ((i2 | 0) != 0 & (i1 & 3 | 0) != 0) while (1) {
  if ((HEAP8[i1 >> 0] | 0) == (i5 & 255) << 24 >> 24) {
   i4 = 6;
   break L1;
  }
  i1 = i1 + 1 | 0;
  i2 = i2 + -1 | 0;
  if (!((i2 | 0) != 0 & (i1 & 3 | 0) != 0)) {
   i3 = i2;
   i2 = (i2 | 0) != 0;
   i4 = 5;
   break;
  }
 } else {
  i3 = i2;
  i2 = (i2 | 0) != 0;
  i4 = 5;
 } while (0);
 if ((i4 | 0) == 5) if (i2) {
  i2 = i3;
  i4 = 6;
 } else i2 = 0;
 L8 : do if ((i4 | 0) == 6) if ((HEAP8[i1 >> 0] | 0) != (i5 & 255) << 24 >> 24) {
  i3 = Math_imul(i5 & 255, 16843009) | 0;
  L11 : do if (i2 >>> 0 > 3) while (1) {
   i6 = HEAP32[i1 >> 2] ^ i3;
   if ((i6 & -2139062144 ^ -2139062144) & i6 + -16843009) break;
   i1 = i1 + 4 | 0;
   i2 = i2 + -4 | 0;
   if (i2 >>> 0 <= 3) {
    i4 = 11;
    break L11;
   }
  } else i4 = 11; while (0);
  if ((i4 | 0) == 11) if (!i2) {
   i2 = 0;
   break;
  }
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == (i5 & 255) << 24 >> 24) break L8;
   i1 = i1 + 1 | 0;
   i2 = i2 + -1 | 0;
   if (!i2) {
    i2 = 0;
    break;
   }
  }
 } while (0);
 return ((i2 | 0) != 0 ? i1 : 0) | 0;
}

function __ZL25default_terminate_handlerv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if ((i1 | 0) != 0 ? (i3 = HEAP32[i1 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i2 = HEAP32[i3 + 48 >> 2] | 0;
  i1 = HEAP32[i3 + 48 + 4 >> 2] | 0;
  if (!((i2 & -256 | 0) == 1126902528 & (i1 | 0) == 1129074247)) {
   HEAP32[i4 + 24 >> 2] = HEAP32[70346];
   _abort_message(387890, i4 + 24 | 0);
  }
  if ((i2 | 0) == 1126902529 & (i1 | 0) == 1129074247) i1 = HEAP32[i3 + 44 >> 2] | 0; else i1 = i3 + 80 | 0;
  HEAP32[i4 + 36 >> 2] = i1;
  i3 = HEAP32[i3 >> 2] | 0;
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[112 >> 2] | 0) + 16 >> 2] & 127](112, i3, i4 + 36 | 0) | 0) {
   i3 = HEAP32[i4 + 36 >> 2] | 0;
   i2 = HEAP32[70346] | 0;
   i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3) | 0;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = i1;
   HEAP32[i4 + 8 >> 2] = i3;
   _abort_message(387804, i4);
  } else {
   HEAP32[i4 + 16 >> 2] = HEAP32[70346];
   HEAP32[i4 + 16 + 4 >> 2] = i1;
   _abort_message(387849, i4 + 16 | 0);
  }
 }
 _abort_message(387928, i4 + 32 | 0);
}

function __ZNK4math7Frustum11BottomPlaneEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((HEAP32[i2 >> 2] | 0) != 2) {
  __ZNK4math7Frustum12NearPlanePosEff(i3 + 12 | 0, i2, Math_fround(0.0), Math_fround(-1.0));
  __ZNK4math6float3ngEv(i3, i2 + 36 | 0);
  __ZN4math5PlaneC2ERKNS_6float3ES3_(i1, i3 + 12 | 0, i3);
  STACKTOP = i3;
  return;
 }
 __ZN4mathmlEfRKNS_6float3E(i3 + 72 | 0, Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i2 + 60 >> 2]) * Math_fround(.5)))), i2 + 36 | 0);
 __ZNK4math6float3miERKS0_(i3 + 84 | 0, i2 + 24 | 0, i3 + 72 | 0);
 if ((HEAP32[i2 + 8 >> 2] | 0) == 2) __ZNK4math6float35CrossERKS0_(i3 + 48 | 0, i2 + 24 | 0, i2 + 36 | 0); else __ZNK4math6float35CrossERKS0_(i3 + 48 | 0, i2 + 36 | 0, i2 + 24 | 0);
 __ZNK4math6float3ngEv(i3 + 60 | 0, i3 + 48 | 0);
 if ((HEAP32[i2 + 8 >> 2] | 0) == 2) __ZNK4math6float35CrossERKS0_(i3 + 24 | 0, i3 + 60 | 0, i3 + 84 | 0); else __ZNK4math6float35CrossERKS0_(i3 + 24 | 0, i3 + 84 | 0, i3 + 60 | 0);
 __ZNK4math6float310NormalizedEv(i3 + 36 | 0, i3 + 24 | 0);
 __ZN4math5PlaneC2ERKNS_6float3ES3_(i1, i2 + 12 | 0, i3 + 36 | 0);
 STACKTOP = i3;
 return;
}

function __ZN12FTGlyphCacheD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 __ZN12FTGlyphCache6DeInitEv(i3);
 i1 = HEAP32[i3 + 184 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 188 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i3 + 188 >> 2] = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i3 + 172 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 176 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i3 + 176 >> 2] = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4);
  __ZdlPv(i1);
 }
 __ZN7TextureD2Ev(i3 + 96 | 0);
 __ZN7TextureD2Ev(i3 + 28 | 0);
 i1 = HEAP32[i3 + 16 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 20 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i3 + 20 >> 2] = i2 + (~(((i2 + -24 - i1 | 0) >>> 0) / 24 | 0) * 24 | 0);
  __ZdlPv(i1);
 }
 if (!(HEAP32[i3 + 12 >> 2] | 0)) return;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 i2 = (HEAP32[i3 + 4 >> 2] | 0) + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 HEAP32[i4 + 4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[HEAP32[i2 >> 2] >> 2] = i4;
 HEAP32[i3 + 12 >> 2] = 0;
 if ((i1 | 0) == (i3 + 4 | 0)) return;
 do {
  i4 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZN6FTFontD2Ev(i4 + 8 | 0);
  __ZdlPv(i4);
 } while ((i1 | 0) != (i3 + 4 | 0));
 return;
}

function _tt_face_free_ps_names(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = HEAP32[i4 + 100 >> 2] | 0;
 if (!(HEAP8[i4 + 628 >> 0] | 0)) {
  HEAP8[i4 + 628 >> 0] = 0;
  return;
 }
 i1 = HEAP32[i4 + 468 >> 2] | 0;
 if ((i1 | 0) >= 163840) {
  switch (i1 | 0) {
  case 163840:
   break;
  default:
   {
    HEAP8[i4 + 628 >> 0] = 0;
    return;
   }
  }
  _ft_mem_free(i3, HEAP32[i4 + 636 >> 2] | 0);
  HEAP32[i4 + 636 >> 2] = 0;
  HEAP16[i4 + 632 >> 1] = 0;
  HEAP8[i4 + 628 >> 0] = 0;
  return;
 }
 switch (i1 | 0) {
 case 131072:
  break;
 default:
  {
   HEAP8[i4 + 628 >> 0] = 0;
   return;
  }
 }
 _ft_mem_free(i3, HEAP32[i4 + 636 >> 2] | 0);
 HEAP32[i4 + 636 >> 2] = 0;
 HEAP16[i4 + 632 >> 1] = 0;
 if (HEAP16[i4 + 634 >> 1] | 0) {
  i2 = 0;
  i1 = 0;
  while (1) {
   _ft_mem_free(i3, HEAP32[(HEAP32[i4 + 640 >> 2] | 0) + (i2 << 2) >> 2] | 0);
   HEAP32[(HEAP32[i4 + 640 >> 2] | 0) + (i2 << 2) >> 2] = 0;
   i1 = i1 + 1 << 16 >> 16;
   if ((i1 & 65535) < (HEAPU16[i4 + 634 >> 1] | 0)) i2 = i1 & 65535; else break;
  }
 }
 _ft_mem_free(i3, HEAP32[i4 + 640 >> 2] | 0);
 HEAP32[i4 + 640 >> 2] = 0;
 HEAP16[i4 + 634 >> 1] = 0;
 HEAP8[i4 + 628 >> 0] = 0;
 return;
}

function __ZNK6String12ReplaceFirstEPKcS1_(i8, i3, i2, i1) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = (i1 | 0) != 0 ? i1 : 298501;
 i4 = _strlen(i7) | 0;
 i5 = _strlen(i2) | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i2 = _strstr(i6, i2) | 0;
 if (!i2) {
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i8, i6);
  return;
 }
 i1 = (HEAP32[i3 + 12 >> 2] | 0) + i4 | 0;
 if ((i1 | 0) > 0) {
  i3 = __Znaj(i1) | 0;
  HEAP8[i3 >> 0] = 0;
 } else i3 = 0;
 _memcpy(i3 | 0, i6 | 0, i2 - i6 | 0) | 0;
 _memcpy(i3 + (i2 - i6) | 0, i7 | 0, i4 | 0) | 0;
 _strcpy(i3 + (i2 + i4 - i6) | 0, i2 + i5 | 0) | 0;
 i1 = (i3 | 0) == 0;
 if (i1) {
  HEAP32[i8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i8, i3);
  return;
 }
 if (HEAP8[i3 >> 0] | 0) {
  i2 = i3;
  do i2 = i2 + 1 | 0; while ((HEAP8[i2 >> 0] | 0) != 0);
 };
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 HEAP32[i8 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i8, i3);
 if (i1) return;
 __ZdaPv(i3);
 return;
}

function __ZNSt3__16vectorIP20ShaderConstantBufferNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = ((HEAP32[i9 + 4 >> 2] | 0) - i1 >> 2) + 1 | 0;
 if (i3 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i6 = HEAP32[i9 >> 2] | 0;
  i7 = i6;
 } else {
  i7 = i1;
  i6 = i1;
 }
 i2 = i7;
 i1 = (HEAP32[i9 + 8 >> 2] | 0) - i2 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1 >>> 0 < i3 >>> 0 ? i3 : i1 >> 1;
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i2 = i3 >> 2;
   i1 = i3;
  } else {
   i2 = i3 >> 2;
   i10 = 6;
  }
 } else {
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i8 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i9 + 4 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 + 8 >> 2] = i4 + (i5 << 2);
 if (!i6) return;
 __ZdlPv(i6);
 return;
}

function _t1_builder_init(i1, i2, i5, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP8[i1 + 68 >> 0] = 1;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 >> 2] = HEAP32[i2 + 100 >> 2];
 if ((i3 | 0) != 0 ? (i2 = HEAP32[HEAP32[i3 + 156 >> 2] >> 2] | 0, HEAP32[i1 + 12 >> 2] = i2, HEAP32[i1 + 16 >> 2] = i2 + 20, HEAP32[i1 + 20 >> 2] = i2 + 56, _FT_GlyphLoader_Rewind(i2), HEAP32[i1 + 76 >> 2] = HEAP32[i5 + 40 >> 2], HEAP32[i1 + 72 >> 2] = 0, i4 << 24 >> 24 != 0) : 0) HEAP32[i1 + 72 >> 2] = HEAP32[(HEAP32[i3 + 156 >> 2] | 0) + 36 >> 2];
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAP32[i1 + 24 + 16 >> 2] = 0;
 HEAP32[i1 + 24 + 20 >> 2] = 0;
 HEAP32[i1 + 80 >> 2] = HEAP32[70121];
 HEAP32[i1 + 80 + 4 >> 2] = HEAP32[70122];
 HEAP32[i1 + 80 + 8 >> 2] = HEAP32[70123];
 HEAP32[i1 + 80 + 12 >> 2] = HEAP32[70124];
 HEAP32[i1 + 80 + 16 >> 2] = HEAP32[70125];
 HEAP32[i1 + 80 + 20 >> 2] = HEAP32[70126];
 HEAP32[i1 + 80 + 24 >> 2] = HEAP32[70127];
 HEAP32[i1 + 80 + 28 >> 2] = HEAP32[70128];
 return;
}

function _tt_cmap2_char_index(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 if (i5 >>> 0 >= 65536) {
  i7 = 0;
  return i7 | 0;
 }
 if (!(i5 >>> 8)) if (!(HEAPU8[i6 + ((i5 << 1 & 510) + 6) >> 0] << 8 | HEAPU8[i6 + ((i5 << 1 & 510) + 7) >> 0])) {
  i7 = 518;
  i1 = i6 + 518 | 0;
 } else {
  i7 = 0;
  return i7 | 0;
 } else {
  i1 = HEAPU8[i6 + ((i5 >>> 8 << 1) + 7) >> 0] & 248 | HEAPU8[i6 + ((i5 >>> 8 << 1) + 6) >> 0] << 8;
  if (!i1) {
   i7 = 0;
   return i7 | 0;
  } else {
   i7 = i1 + 518 | 0;
   i1 = i6 + (i1 + 518) | 0;
  }
 }
 i3 = i7 + 6 | 0;
 i2 = i7 + 7 | 0;
 i4 = HEAPU8[i6 + i3 >> 0] << 8 | HEAPU8[i6 + i2 >> 0];
 i1 = (i5 & 255) - (HEAPU8[i1 >> 0] << 8 | HEAPU8[i6 + (i7 + 1) >> 0]) | 0;
 if (!((i4 | 0) != 0 ? i1 >>> 0 < (HEAPU8[i6 + (i7 + 2) >> 0] << 8 | HEAPU8[i6 + (i7 + 3) >> 0]) >>> 0 : 0)) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = HEAPU8[i6 + (i3 + (i4 + (i1 << 1))) >> 0] << 8 | HEAPU8[i6 + (i2 + (i4 + (i1 << 1))) >> 0];
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 }
 i7 = i1 + (HEAP8[i6 + (i7 + 4) >> 0] << 8 | HEAPU8[i6 + (i7 + 5) >> 0]) & 65535;
 return i7 | 0;
}

function _tt_cmap8_char_next(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = (HEAPU8[i4 + 8205 >> 0] | 0) << 16 | (HEAPU8[i4 + 8204 >> 0] | 0) << 24 | (HEAPU8[i4 + 8206 >> 0] | 0) << 8 | (HEAPU8[i4 + 8207 >> 0] | 0);
 if (!i2) {
  i6 = 0;
  i5 = 0;
  HEAP32[i7 >> 2] = i5;
  return i6 | 0;
 }
 i1 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
 i5 = i4 + 8208 | 0;
 while (1) {
  i4 = (HEAPU8[i5 + 1 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0) << 24 | (HEAPU8[i5 + 2 >> 0] | 0) << 8 | (HEAPU8[i5 + 3 >> 0] | 0);
  i6 = i5;
  i5 = i5 + 12 | 0;
  i1 = i1 >>> 0 < i4 >>> 0 ? i4 : i1;
  if (i1 >>> 0 <= ((HEAPU8[i6 + 5 >> 0] | 0) << 16 | (HEAPU8[i6 + 4 >> 0] | 0) << 24 | (HEAPU8[i6 + 6 >> 0] | 0) << 8 | (HEAPU8[i6 + 7 >> 0] | 0)) >>> 0 ? (i3 = ((HEAPU8[i6 + 9 >> 0] | 0) << 16 | (HEAPU8[i6 + 8 >> 0] | 0) << 24 | (HEAPU8[i6 + 10 >> 0] | 0) << 8 | (HEAPU8[i6 + 11 >> 0] | 0)) + (i1 - i4) | 0, (i3 | 0) != 0) : 0) {
   i2 = 6;
   break;
  }
  i2 = i2 + -1 | 0;
  if (!i2) {
   i3 = 0;
   i1 = 0;
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) {
  HEAP32[i7 >> 2] = i1;
  return i3 | 0;
 }
 return 0;
}

function __ZN6FTFontC2ERKS_(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i5, HEAP32[i4 >> 2] | 0);
 i2 = HEAP32[i4 + 16 + 4 >> 2] | 0;
 HEAP32[i5 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 HEAP32[i5 + 16 + 4 >> 2] = i2;
 HEAP32[i5 + 24 >> 2] = 0;
 HEAP32[i5 + 24 + 4 >> 2] = 0;
 HEAP32[i5 + 24 + 8 >> 2] = 0;
 HEAP32[i5 + 24 + 12 >> 2] = 0;
 HEAP32[i5 + 24 + 16 >> 2] = 0;
 HEAP32[i5 + 24 + 20 >> 2] = 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 i3 = HEAP32[i4 + 36 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 if ((i2 - i3 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i5 + 36 | 0);
 i1 = __Znwj(i2 - i3 | 0) | 0;
 HEAP32[i5 + 40 >> 2] = i1;
 HEAP32[i5 + 36 >> 2] = i1;
 HEAP32[i5 + 44 >> 2] = i1 + (i2 - i3);
 i2 = HEAP32[i4 + 36 >> 2] | 0;
 i3 = HEAP32[i4 + 40 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 do {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = (HEAP32[i5 + 40 >> 2] | 0) + 1 | 0;
  HEAP32[i5 + 40 >> 2] = i1;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i3 | 0));
 return;
}

function _tt_cmap13_next(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i2 = HEAP32[i6 + 28 >> 2] | 0;
 L1 : do if ((i2 | 0) != -1 ? (i1 = HEAP32[i6 + 36 >> 2] | 0, i4 = HEAP32[i6 + 40 >> 2] | 0, i1 >>> 0 < i4 >>> 0) : 0) {
  i3 = HEAP32[i6 + 16 >> 2] | 0;
  i2 = i2 + 1 | 0;
  while (1) {
   i7 = i1 * 12 | 0;
   i8 = (HEAPU8[i3 + (i7 + 17) >> 0] | 0) << 16 | (HEAPU8[i3 + (i7 + 16) >> 0] | 0) << 24 | (HEAPU8[i3 + (i7 + 18) >> 0] | 0) << 8 | (HEAPU8[i3 + (i7 + 19) >> 0] | 0);
   i5 = (HEAPU8[i3 + (i7 + 25) >> 0] | 0) << 16 | (HEAPU8[i3 + (i7 + 24) >> 0] | 0) << 24 | (HEAPU8[i3 + (i7 + 26) >> 0] | 0) << 8 | (HEAPU8[i3 + (i7 + 27) >> 0] | 0);
   i2 = i2 >>> 0 < i8 >>> 0 ? i8 : i2;
   if (!((i5 | 0) == 0 ? 1 : i2 >>> 0 > ((HEAPU8[i3 + (i7 + 21) >> 0] | 0) << 16 | (HEAPU8[i3 + (i7 + 20) >> 0] | 0) << 24 | (HEAPU8[i3 + (i7 + 22) >> 0] | 0) << 8 | (HEAPU8[i3 + (i7 + 23) >> 0] | 0)) >>> 0)) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i4 >>> 0) break L1;
  }
  HEAP32[i6 + 28 >> 2] = i2;
  HEAP32[i6 + 32 >> 2] = i5;
  HEAP32[i6 + 36 >> 2] = i1;
  return;
 } while (0);
 HEAP8[i6 + 24 >> 0] = 0;
 return;
}

function __ZN5ImageaSERKS_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if ((i4 | 0) == (i3 | 0)) return i4 | 0;
 if ((HEAP8[i4 + 8 >> 0] | 0) != 0 ? (i1 = HEAP32[i4 >> 2] | 0, (i1 | 0) != 0) : 0) __ZdaPv(i1);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP8[i4 + 8 >> 0] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 12 + 4 >> 2] = 0;
 HEAP32[i4 + 12 + 8 >> 2] = 0;
 HEAP32[i4 + 12 + 12 >> 2] = 0;
 HEAP32[i4 + 12 + 16 >> 2] = 0;
 HEAP32[i4 + 12 + 20 >> 2] = 0;
 i2 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP8[i4 + 8 >> 0] = HEAP8[i3 + 8 >> 0] | 0;
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i4 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i4 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i4 + 32 >> 2] = HEAP32[i3 + 32 >> 2];
 do if (!(HEAP8[i3 + 8 >> 0] | 0)) i1 = HEAP32[i3 >> 2] | 0; else {
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) break;
  i1 = __Znaj(i2) | 0;
  HEAP32[i4 >> 2] = i1;
  _memcpy(i1 | 0, HEAP32[i3 >> 2] | 0, i2 | 0) | 0;
  return i4 | 0;
 } while (0);
 HEAP32[i4 >> 2] = i1;
 return i4 | 0;
}

function _FT_New_Size(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i4) {
  i6 = 35;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!i3) {
  i6 = 36;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!(HEAP32[i4 + 96 >> 2] | 0)) {
  i6 = 34;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 i2 = HEAP32[(HEAP32[i4 + 96 >> 2] | 0) + 12 >> 2] | 0;
 i6 = HEAP32[i4 + 100 >> 2] | 0;
 i5 = _ft_mem_alloc(i6, HEAP32[i2 + 40 >> 2] | 0, i7) | 0;
 do if (!(HEAP32[i7 >> 2] | 0)) {
  i1 = _ft_mem_alloc(i6, 12, i7) | 0;
  if (!(HEAP32[i7 >> 2] | 0)) {
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 40 >> 2] = 0;
   i2 = HEAP32[i2 + 56 >> 2] | 0;
   if ((i2 | 0) != 0 ? (i2 = FUNCTION_TABLE_ii[i2 & 63](i5) | 0, HEAP32[i7 >> 2] = i2, (i2 | 0) != 0) : 0) break;
   HEAP32[i3 >> 2] = i5;
   HEAP32[i1 + 8 >> 2] = i5;
   _FT_List_Add(i4 + 108 | 0, i1);
   if (!(HEAP32[i7 >> 2] | 0)) {
    i6 = 0;
    STACKTOP = i7;
    return i6 | 0;
   }
  }
 } else i1 = 0; while (0);
 _ft_mem_free(i6, i1);
 _ft_mem_free(i6, i5);
 i6 = HEAP32[i7 >> 2] | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZN4math14PrintToConsoleEjPKc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 switch (i2 & -65537 | 0) {
 case 2:
  {
   i1 = HEAP32[70409] | 0;
   HEAP32[i4 >> 2] = i3;
   _fprintf(i1, 322409, i4) | 0;
   if ((i2 | 0) == 65538) {
    STACKTOP = i4;
    return;
   }
   __Z12GetCallstackPKcS0_(i4 + 32 | 0, 322420, 322423);
   _fputs((HEAP8[i4 + 32 >> 0] & 1) == 0 ? i4 + 32 + 1 | 0 : HEAP32[i4 + 32 + 8 >> 2] | 0, i1) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4 + 32 | 0);
   STACKTOP = i4;
   return;
  }
 case 4:
  {
   HEAP32[i4 + 8 >> 2] = i3;
   _printf(322438, i4 + 8 | 0) | 0;
   if ((i2 | 0) == 65540) {
    STACKTOP = i4;
    return;
   }
   __Z12GetCallstackPKcS0_(i4 + 20 | 0, 322420, 322423);
   HEAP32[i4 + 16 >> 2] = (HEAP8[i4 + 20 >> 0] & 1) == 0 ? i4 + 20 + 1 | 0 : HEAP32[i4 + 20 + 8 >> 2] | 0;
   _printf(322451, i4 + 16 | 0) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4 + 20 | 0);
   STACKTOP = i4;
   return;
  }
 default:
  {
   _puts(i3) | 0;
   STACKTOP = i4;
   return;
  }
 }
}

function _pfr_extra_item_load_stem_snaps(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i6 >> 2] = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (HEAP32[i4 + 76 >> 2] | 0) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((i3 + 1 | 0) >>> 0 <= i2 >>> 0 ? (i5 = HEAPU8[i3 >> 0] | 0, (i3 + ((i5 & 15) + (i5 >>> 4) << 1 | 1) | 0) >>> 0 <= i2 >>> 0) : 0) {
  i1 = _ft_mem_realloc(i1, 4, 0, (i5 & 15) + (i5 >>> 4) | 0, 0, i6) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  if (i2) {
   i5 = i2;
   STACKTOP = i6;
   return i5 | 0;
  }
  HEAP32[i4 + 76 >> 2] = i1;
  HEAP32[i4 + 64 >> 2] = i1 + ((i5 & 15) << 2);
  if (!((i5 & 15) + (i5 >>> 4) | 0)) {
   i5 = 0;
   STACKTOP = i6;
   return i5 | 0;
  } else {
   i3 = i3 + 1 | 0;
   i2 = (i5 & 15) + (i5 >>> 4) | 0;
  }
  while (1) {
   HEAP32[i1 >> 2] = HEAP8[i3 >> 0] << 8 | HEAPU8[i3 + 1 >> 0];
   i2 = i2 + -1 | 0;
   if (!i2) break; else {
    i3 = i3 + 2 | 0;
    i1 = i1 + 4 | 0;
   }
  }
  i5 = HEAP32[i6 >> 2] | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i6 >> 2] = 8;
 i5 = 8;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = ((HEAP32[i9 + 4 >> 2] | 0) - i1 >> 2) + 1 | 0;
 if (i3 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i6 = HEAP32[i9 >> 2] | 0;
  i7 = i6;
 } else {
  i7 = i1;
  i6 = i1;
 }
 i2 = i7;
 i1 = (HEAP32[i9 + 8 >> 2] | 0) - i2 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1 >>> 0 < i3 >>> 0 ? i3 : i1 >> 1;
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  if (!i1) {
   i5 = 0;
   i4 = 0;
   i2 = i3 >> 2;
   i1 = i3;
  } else {
   i2 = i3 >> 2;
   i10 = 6;
  }
 } else {
  i3 = (HEAP32[i9 + 4 >> 2] | 0) - i2 | 0;
  i1 = 1073741823;
  i2 = i3 >> 2;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i5 = i1;
  i4 = __Znwj(i1 << 2) | 0;
  i1 = i3;
 }
 HEAP32[i4 + (i2 << 2) >> 2] = HEAP32[i8 >> 2];
 _memcpy(i4 | 0, i7 | 0, i1 | 0) | 0;
 HEAP32[i9 >> 2] = i4;
 HEAP32[i9 + 4 >> 2] = i4 + (i2 + 1 << 2);
 HEAP32[i9 + 8 >> 2] = i4 + (i5 << 2);
 if (!i6) return;
 __ZdlPv(i6);
 return;
}

function __ZN15MaxRectsBinPack4InitEii(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = i1;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 i2 = HEAP32[i3 + 12 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i3 + 12 >> 2] = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4);
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i2 = HEAP32[i3 + 24 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  HEAP32[i3 + 24 >> 2] = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4);
  i1 = i2 + (~((i2 + -16 - i1 | 0) >>> 4) << 4) | 0;
 }
 if ((i1 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) {
  __ZNSt3__16vectorI4RectNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_(i3 + 20 | 0, i4);
  STACKTOP = i4;
  return;
 } else {
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i3 + 24 >> 2] = (HEAP32[i3 + 24 >> 2] | 0) + 16;
  STACKTOP = i4;
  return;
 }
}

function _FT_MulDiv_No_Round(i7, i8, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if ((i7 | 0) == 0 | (i8 | 0) == (i9 | 0)) {
  i8 = i7;
  return i8 | 0;
 }
 i2 = (i7 | 0) < 0 ? 0 - i7 | 0 : i7;
 i3 = (i8 | 0) < 0 ? 0 - i8 | 0 : i8;
 i6 = (i9 | 0) < 0 ? 0 - i9 | 0 : i9;
 if (!((i2 | 0) < 46341 & (i3 | 0) < 46341 & (i6 | 0) > 0)) if ((i6 | 0) > 0 ? (i5 = Math_imul(i3 & 65535, i2 >>> 16) | 0, i4 = (Math_imul(i3 >>> 16, i2 & 65535) | 0) + i5 | 0, i1 = (i4 << 16) + (Math_imul(i3 & 65535, i2 & 65535) | 0) | 0, i4 = (i4 >>> 16) + (Math_imul(i3 >>> 16, i2 >>> 16) | 0) + ((i4 >>> 0 < i5 >>> 0 & 1) << 16) + (i1 >>> 0 < i4 << 16 >>> 0 & 1) | 0, i4 >>> 0 < i6 >>> 0) : 0) {
  i3 = i1;
  i5 = 32;
  i1 = 0;
  i2 = i4;
  while (1) {
   i2 = i2 << 1 | i3 >>> 31;
   i1 = (i2 >>> 0 < i6 >>> 0 | i1 << 1) ^ 1;
   i5 = i5 + -1 | 0;
   if (!i5) break; else {
    i3 = i3 << 1;
    i2 = i2 - (i2 >>> 0 < i6 >>> 0 ? 0 : i6) | 0;
   }
  }
 } else i1 = 2147483647; else i1 = (Math_imul(i3, i2) | 0) / (i6 | 0) | 0;
 i8 = (i8 ^ i7 ^ i9 | 0) < 0 ? 0 - i1 | 0 : i1;
 return i8 | 0;
}

function __Z7ToUtf32PKh(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAPU8[i6 >> 0] | 0;
 if (!(i1 & 128)) {
  i6 = i1;
  return i6 | 0;
 }
 if ((i1 & 224 | 0) == 192) {
  i6 = (HEAPU8[i6 + 1 >> 0] | 0) & 63 | i1 << 6 & 1984;
  return i6 | 0;
 }
 if ((i1 & 240 | 0) == 224) {
  i6 = (HEAPU8[i6 + 1 >> 0] | 0) << 6 & 4032 | i1 << 12 & 61440 | (HEAPU8[i6 + 2 >> 0] | 0) & 63;
  return i6 | 0;
 }
 if ((i1 & 248 | 0) == 240) {
  i6 = (HEAPU8[i6 + 1 >> 0] | 0) << 12 & 258048 | i1 << 18 & 1835008 | (HEAPU8[i6 + 2 >> 0] | 0) << 6 & 4032 | (HEAPU8[i6 + 3 >> 0] | 0) & 63;
  return i6 | 0;
 }
 i2 = HEAP8[i6 + 1 >> 0] | 0;
 i3 = HEAP8[i6 + 2 >> 0] | 0;
 i4 = HEAP8[i6 + 3 >> 0] | 0;
 i5 = HEAP8[i6 + 4 >> 0] | 0;
 if ((i1 & 252 | 0) == 248) {
  i6 = (i2 & 255) << 18 & 16515072 | i1 << 24 & 50331648 | (i3 & 255) << 12 & 258048 | (i4 & 255) << 6 & 4032 | i5 & 63;
  return i6 | 0;
 } else {
  i6 = (i2 & 255) << 24 & 1056964608 | i1 << 30 & 1073741824 | (i3 & 255) << 18 & 16515072 | (i4 & 255) << 12 & 258048 | (i5 & 255) << 6 & 4032 | (HEAPU8[i6 + 5 >> 0] | 0) & 63;
  return i6 | 0;
 }
 return 0;
}

function __ZN5InputD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 __ZNSt3__16__treeINS_12__value_typeIm15ControllerStateEENS_19__map_value_compareImS3_NS_4lessImEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(i3 + 676 | 0, HEAP32[i3 + 680 >> 2] | 0);
 __ZNSt3__16__treeINS_12__value_typeIm15ControllerStateEENS_19__map_value_compareImS3_NS_4lessImEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(i3 + 664 | 0, HEAP32[i3 + 668 >> 2] | 0);
 i2 = HEAP32[i3 + 652 >> 2] | 0;
 if (i2) {
  i1 = HEAP32[i3 + 656 >> 2] | 0;
  if ((i1 | 0) != (i2 | 0)) HEAP32[i3 + 656 >> 2] = i1 + (~(((i1 + -48 - i2 | 0) >>> 0) / 48 | 0) * 48 | 0);
  __ZdlPv(i2);
 }
 i1 = HEAP32[i3 + 640 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 644 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i3 + 644 >> 2] = i2 + (~(((i2 + -24 - i1 | 0) >>> 0) / 24 | 0) * 24 | 0);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 return;
}

function _ps_parser_to_token_array(i5, i7, i2, i6) {
 i5 = i5 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i6 >> 2] = -1;
 _ps_parser_to_token(i5, i8 + 12 | 0);
 if ((HEAP32[i8 + 12 + 8 >> 2] | 0) != 3) {
  STACKTOP = i8;
  return;
 }
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = HEAP32[i5 + 8 >> 2] | 0;
 i9 = (HEAP32[i8 + 12 >> 2] | 0) + 1 | 0;
 HEAP32[i5 >> 2] = i9;
 i1 = (HEAP32[i8 + 12 + 4 >> 2] | 0) + -1 | 0;
 HEAP32[i5 + 8 >> 2] = i1;
 L4 : do if (i9 >>> 0 < i1 >>> 0) {
  i1 = i7;
  do {
   _ps_parser_to_token(i5, i8);
   if (!(HEAP32[i8 + 8 >> 2] | 0)) break L4;
   if ((i7 | 0) != 0 & i1 >>> 0 < (i7 + (i2 * 12 | 0) | 0) >>> 0) {
    HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   }
   i1 = i1 + 12 | 0;
  } while ((HEAP32[i5 >> 2] | 0) >>> 0 < (HEAP32[i5 + 8 >> 2] | 0) >>> 0);
 } else i1 = i7; while (0);
 HEAP32[i6 >> 2] = (i1 - i7 | 0) / 12 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i4;
 STACKTOP = i8;
 return;
}

function __ZN4math7Frustum8SetFrameERKNS_6float3ES3_S3_(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i4 + 12 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 12 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 24 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i4 + 24 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i4 + 36 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 36 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 36 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 __ZNK4math7Frustum18ComputeWorldMatrixEv(i5 + 112 | 0, i4);
 __ZN4math8float3x4aSERKS0_(i4 + 64 | 0, i5 + 112 | 0) | 0;
 i1 = i5 + 64 | 0;
 i2 = i4 + 64 | 0;
 i3 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 __ZN4math8float3x418InverseOrthonormalEv(i5 + 64 | 0);
 __ZNK4math8float4x4mlERKNS_8float3x4E(i5, i4 + 112 | 0, i5 + 64 | 0);
 __ZN4math8float4x4aSERKS0_(i4 + 176 | 0, i5) | 0;
 STACKTOP = i5;
 return;
}

function _fread(i2, i8, i1, i7) {
 i2 = i2 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i5 = Math_imul(i1, i8) | 0;
 if ((HEAP32[i7 + 76 >> 2] | 0) > -1) i6 = ___lockfile(i7) | 0; else i6 = 0;
 i3 = HEAP8[i7 + 74 >> 0] | 0;
 HEAP8[i7 + 74 >> 0] = i3 + 255 | i3;
 i3 = HEAP32[i7 + 4 >> 2] | 0;
 i4 = (HEAP32[i7 + 8 >> 2] | 0) - i3 | 0;
 if ((i4 | 0) > 0) {
  i4 = i4 >>> 0 < i5 >>> 0 ? i4 : i5;
  _memcpy(i2 | 0, i3 | 0, i4 | 0) | 0;
  HEAP32[i7 + 4 >> 2] = i3 + i4;
  i2 = i2 + i4 | 0;
  i3 = i5 - i4 | 0;
 } else i3 = i5;
 L7 : do if (!i3) i9 = 13; else {
  i4 = i3;
  while (1) {
   if (___toread(i7) | 0) {
    i1 = i4;
    break;
   }
   i3 = FUNCTION_TABLE_iiii[HEAP32[i7 + 32 >> 2] & 127](i7, i2, i4) | 0;
   if ((i3 + 1 | 0) >>> 0 < 2) {
    i1 = i4;
    break;
   }
   if ((i4 | 0) == (i3 | 0)) {
    i9 = 13;
    break L7;
   } else {
    i2 = i2 + i3 | 0;
    i4 = i4 - i3 | 0;
   }
  }
  if (i6) ___unlockfile(i7);
  i1 = ((i5 - i1 | 0) >>> 0) / (i8 >>> 0) | 0;
 } while (0);
 if ((i9 | 0) == 13) if (i6) ___unlockfile(i7);
 return i1 | 0;
}

function __ZN9MainClassD2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 516;
 i1 = HEAP32[i4 + 1264 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 i1 = HEAP32[i4 + 1256 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 i1 = HEAP32[i4 + 1248 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 i1 = HEAP32[i4 + 1240 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 i3 = HEAP32[i4 + 1232 >> 2] | 0;
 i1 = HEAP32[i4 + 1220 >> 2] | 0;
 if (i3) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 << 2) >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 + 1220 >> 2] | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i4 + 1220 >> 2] = 0;
 HEAP32[i4 + 1220 + 4 >> 2] = 0;
 HEAP32[i4 + 1220 + 8 >> 2] = 0;
 HEAP32[i4 + 1220 + 12 >> 2] = 0;
 __ZN5ArrayI6String9StdCAllocED2Ev(i4 + 1204 | 0);
 __ZN5ArrayI6String9StdCAllocED2Ev(i4 + 1188 | 0);
 __ZN5InputD2Ev(i4 + 448 | 0);
 __ZN8GraphicsD2Ev(i4 + 4 | 0);
 return;
}

function _ps_dimension_done(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 32 >> 2] | 0;
  while (1) {
   _ft_mem_free(i4, HEAP32[i2 + 8 >> 2] | 0);
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 16 | 0;
  }
 }
 _ft_mem_free(i4, HEAP32[i3 + 32 >> 2] | 0);
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 i1 = HEAP32[i3 + 16 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 20 >> 2] | 0;
  while (1) {
   _ft_mem_free(i4, HEAP32[i2 + 8 >> 2] | 0);
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 12 >> 2] = 0;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 16 | 0;
  }
 }
 _ft_mem_free(i4, HEAP32[i3 + 20 >> 2] | 0);
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 _ft_mem_free(i4, HEAP32[i3 + 8 >> 2] | 0);
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 return;
}

function _FT_Outline_Get_CBox(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!((i1 | 0) != 0 & (i10 | 0) != 0)) return;
 i9 = HEAP16[i1 + 2 >> 1] | 0;
 if (i9 << 16 >> 16) {
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  i6 = HEAP32[i7 + 4 >> 2] | 0;
  if (i9 << 16 >> 16 > 1) {
   i4 = i7;
   i8 = i7 + 8 | 0;
   i5 = i1;
   i3 = i1;
   i2 = i6;
   i1 = i6;
   while (1) {
    i6 = HEAP32[i4 + 8 >> 2] | 0;
    i3 = (i6 | 0) < (i3 | 0) ? i6 : i3;
    i5 = (i6 | 0) > (i5 | 0) ? i6 : i5;
    i4 = HEAP32[i4 + 12 >> 2] | 0;
    i1 = (i4 | 0) < (i1 | 0) ? i4 : i1;
    i2 = (i4 | 0) > (i2 | 0) ? i4 : i2;
    i4 = i8 + 8 | 0;
    if (i4 >>> 0 < (i7 + (i9 << 16 >> 16 << 3) | 0) >>> 0) {
     i6 = i8;
     i8 = i4;
     i4 = i6;
    } else {
     i4 = i5;
     break;
    }
   }
  } else {
   i4 = i1;
   i3 = i1;
   i2 = i6;
   i1 = i6;
  }
 } else {
  i4 = 0;
  i3 = 0;
  i2 = 0;
  i1 = 0;
 }
 HEAP32[i10 >> 2] = i3;
 HEAP32[i10 + 8 >> 2] = i4;
 HEAP32[i10 + 4 >> 2] = i1;
 HEAP32[i10 + 12 >> 2] = i2;
 return;
}

function _FT_Get_Glyph_Name(i6, i7, i4, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if ((i4 | 0) != 0 & (i5 | 0) != 0) HEAP8[i4 >> 0] = 0;
 if (!i6) {
  i7 = 6;
  return i7 | 0;
 }
 if ((HEAP32[i6 + 16 >> 2] | 0) < (i7 | 0)) {
  i7 = 6;
  return i7 | 0;
 }
 if (!(HEAP32[i6 + 8 >> 2] & 512)) {
  i7 = 6;
  return i7 | 0;
 }
 i3 = (HEAP32[i6 + 128 >> 2] | 0) + 40 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 switch (i1 | 0) {
 case 0:
  {
   i2 = 7;
   break;
  }
 case -2:
  {
   i7 = 6;
   return i7 | 0;
  }
 default:
  {}
 }
 do if ((i2 | 0) == 7) {
  i1 = HEAP32[i6 + 96 >> 2] | 0;
  i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] | 0;
  if (!i2) {
   HEAP32[i3 >> 2] = -2;
   i7 = 6;
   return i7 | 0;
  } else {
   i1 = FUNCTION_TABLE_iii[i2 & 255](i1, 325837) | 0;
   HEAP32[(HEAP32[i6 + 128 >> 2] | 0) + 40 >> 2] = (i1 | 0) != 0 ? i1 : -2;
   if (!i1) i1 = 6; else break;
   return i1 | 0;
  }
 } while (0);
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i7 = 6;
  return i7 | 0;
 }
 i7 = FUNCTION_TABLE_iiiii[i1 & 63](i6, i7, i4, i5) | 0;
 return i7 | 0;
}

function _Get_Kerning(i1, i6, i7, i8) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 i2 = HEAP32[i1 + 492 >> 2] | 0;
 if (!i2) return 0;
 i1 = HEAP32[i2 + 36 >> 2] | 0;
 i2 = (HEAP32[i2 + 40 >> 2] | 0) + -1 | 0;
 L4 : do if ((i2 | 0) >= 0) {
  i5 = i1 + (i2 << 4) | 0;
  L6 : while (1) {
   i3 = i5;
   while (1) {
    i4 = i3 - i1 | 0;
    i2 = HEAP32[i1 + (((i4 >> 4 | 0) / 2 | 0) << 4) >> 2] << 16 | HEAP32[i1 + (((i4 >> 4 | 0) / 2 | 0) << 4) + 4 >> 2];
    if ((i2 | 0) == (i6 << 16 | i7 | 0)) break L6;
    if (i2 >>> 0 >= (i6 << 16 | i7) >>> 0) break;
    i1 = i1 + (((i4 >> 4 | 0) / 2 | 0) + 1 << 4) | 0;
    if (i1 >>> 0 > i5 >>> 0) break L4;
   }
   if ((i4 | 0) < 32) break L4; else i5 = i1 + (((i4 >> 4 | 0) / 2 | 0) + -1 << 4) | 0;
  }
  HEAP32[i8 >> 2] = HEAP32[i1 + (((i4 >> 4 | 0) / 2 | 0) << 4) + 8 >> 2];
  HEAP32[i8 + 4 >> 2] = HEAP32[i1 + (((i4 >> 4 | 0) / 2 | 0) << 4) + 12 >> 2];
  return 0;
 } while (0);
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 return 0;
}

function _T1_Get_Track_Kerning(i1, i10, i8, i9) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP32[i1 + 492 >> 2] | 0;
 if (!i7) {
  i10 = 6;
  return i10 | 0;
 }
 i1 = HEAP32[i7 + 32 >> 2] | 0;
 if ((i1 | 0) <= 0) {
  i10 = 0;
  return i10 | 0;
 }
 i6 = 0;
 do {
  i5 = HEAP32[i7 + 28 >> 2] | 0;
  do if ((HEAP32[i5 + (i6 * 20 | 0) >> 2] | 0) == (i8 | 0)) {
   i2 = HEAP32[i5 + (i6 * 20 | 0) + 4 >> 2] | 0;
   if ((i2 | 0) > (i10 | 0)) {
    HEAP32[i9 >> 2] = HEAP32[i5 + (i6 * 20 | 0) + 8 >> 2];
    break;
   }
   i3 = HEAP32[i5 + (i6 * 20 | 0) + 12 >> 2] | 0;
   i4 = HEAP32[i5 + (i6 * 20 | 0) + 16 >> 2] | 0;
   if ((i3 | 0) < (i10 | 0)) {
    HEAP32[i9 >> 2] = i4;
    break;
   } else {
    i5 = i5 + (i6 * 20 | 0) + 8 | 0;
    i1 = _FT_MulDiv(i10 - i2 | 0, i4 - (HEAP32[i5 >> 2] | 0) | 0, i3 - i2 | 0) | 0;
    HEAP32[i9 >> 2] = (HEAP32[i5 >> 2] | 0) + i1;
    i1 = HEAP32[i7 + 32 >> 2] | 0;
    break;
   }
  } while (0);
  i6 = i6 + 1 | 0;
 } while ((i6 | 0) < (i1 | 0));
 i1 = 0;
 return i1 | 0;
}

function __ZNK4math7Frustum8TopPlaneEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((HEAP32[i2 >> 2] | 0) != 2) {
  __ZNK4math7Frustum12NearPlanePosEff(i3, i2, Math_fround(0.0), Math_fround(1.0));
  __ZN4math5PlaneC2ERKNS_6float3ES3_(i1, i3, i2 + 36 | 0);
  STACKTOP = i3;
  return;
 }
 __ZN4mathmlEfRKNS_6float3E(i3 + 48 | 0, Math_fround(__ZN4math3TanEf(Math_fround(Math_fround(HEAPF32[i2 + 60 >> 2]) * Math_fround(.5)))), i2 + 36 | 0);
 __ZNK4math6float3plERKS0_(i3 + 60 | 0, i2 + 24 | 0, i3 + 48 | 0);
 if ((HEAP32[i2 + 8 >> 2] | 0) == 2) __ZNK4math6float35CrossERKS0_(i3 + 36 | 0, i2 + 24 | 0, i2 + 36 | 0); else __ZNK4math6float35CrossERKS0_(i3 + 36 | 0, i2 + 36 | 0, i2 + 24 | 0);
 if ((HEAP32[i2 + 8 >> 2] | 0) == 2) __ZNK4math6float35CrossERKS0_(i3 + 12 | 0, i3 + 36 | 0, i3 + 60 | 0); else __ZNK4math6float35CrossERKS0_(i3 + 12 | 0, i3 + 60 | 0, i3 + 36 | 0);
 __ZNK4math6float310NormalizedEv(i3 + 24 | 0, i3 + 12 | 0);
 __ZN4math5PlaneC2ERKNS_6float3ES3_(i1, i2 + 12 | 0, i3 + 24 | 0);
 STACKTOP = i3;
 return;
}

function __ZNK12FTGlyphCache11GetAdvanceXEP6FTFontP15GlyphCacheEntrymi(i1, i5, i3, i4, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, f7 = f0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!((i5 | 0) != 0 & (i3 | 0) != 0)) {
  f7 = Math_fround(0.0);
  STACKTOP = i2;
  return Math_fround(f7);
 }
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 if (!(HEAP32[i1 + 8 >> 2] & 64)) {
  f7 = Math_fround(HEAPF32[i3 + 40 >> 2]);
  STACKTOP = i2;
  return Math_fround(f7);
 }
 if (_FT_Set_Char_Size(i1, 0, i6, 300, 300) | 0) {
  f7 = Math_fround(0.0);
  STACKTOP = i2;
  return Math_fround(f7);
 }
 i1 = _FT_Get_Char_Index(HEAP32[i5 + 20 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
 i6 = _FT_Get_Char_Index(HEAP32[i5 + 20 >> 2] | 0, i4) | 0;
 if (_FT_Get_Kerning(HEAP32[i5 + 20 >> 2] | 0, i1, i6, 0, i2) | 0) {
  f7 = Math_fround(0.0);
  STACKTOP = i2;
  return Math_fround(f7);
 }
 f7 = Math_fround(HEAPF32[i3 + 40 >> 2]);
 f7 = Math_fround(f7 + Math_fround(Math_fround(HEAP32[i2 >> 2] | 0) * Math_fround(.015625)));
 STACKTOP = i2;
 return Math_fround(f7);
}

function __Z26AppendTextVertexDataColorFR12VertexBufferR12FTGlyphCacheN4math6float3ERK6StringP6FTFontimRKS4_SB_f(i8, i3, i6, i7, i2, i5, i1, i9, i10, f4) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 f4 = Math_fround(f4);
 var i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAPF32[i11 >> 2] = Math_fround(Math_fround((i1 & 255) >>> 0) / Math_fround(255.0));
 HEAPF32[i11 + 4 >> 2] = Math_fround(Math_fround((i1 >>> 8 & 255) >>> 0) / Math_fround(255.0));
 HEAPF32[i11 + 8 >> 2] = Math_fround(Math_fround((i1 >>> 16 & 255) >>> 0) / Math_fround(255.0));
 HEAPF32[i11 + 12 >> 2] = Math_fround(Math_fround(i1 >>> 24 >>> 0) / Math_fround(255.0));
 HEAP32[i11 + 16 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i11 + 16 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i11 + 16 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 __Z20AppendTextVertexDataIN4math6float4EEvR12VertexBufferR12FTGlyphCacheNS0_6float3ERK6StringP6FTFontiRKT_RKS6_SG_f(i8, i3, i11 + 16 | 0, i7, i2, i5, i11, i9, i10, f4);
 STACKTOP = i11;
 return;
}

function __ZN8Graphics5ClearEbbbfffffi(i5, i1, i3, i8, f10, f9, f7, f6, f2, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 f10 = Math_fround(f10);
 f9 = Math_fround(f9);
 f7 = Math_fround(f7);
 f6 = Math_fround(f6);
 f2 = Math_fround(f2);
 i4 = i4 | 0;
 if (i1) {
  if (!(HEAP8[i5 + 143 >> 0] | 0)) {
   _glDepthMask(1);
   HEAP8[i5 + 143 >> 0] = 1;
   HEAP32[i5 + 136 >> 2] = 0;
   HEAP16[i5 + 140 >> 1] = -1;
  }
  if (Math_fround(HEAPF32[i5 + 92 >> 2]) != f2) {
   _glClearDepthf(+f2);
   HEAPF32[i5 + 92 >> 2] = f2;
   i1 = 256;
  } else i1 = 256;
 } else i1 = 0;
 if (i3) {
  if ((HEAP32[i5 + 96 >> 2] | 0) != (i4 | 0)) {
   if (!(__Z22IsIE11DeveloperPreviewv() | 0)) _glClearStencil(i4 | 0);
   HEAP32[i5 + 96 >> 2] = i4;
  }
  i1 = i1 | 1024;
 }
 if (!i8) {
  i8 = i1;
  i4 = __Z22IsIE11DeveloperPreviewv() | 0;
  i5 = i8 & -1025;
  i8 = i4 ? i5 : i8;
  _glClear(i8 | 0);
  return;
 }
 _glClearColor(+f10, +f9, +f7, +f6);
 i8 = i1 | 16384;
 i4 = __Z22IsIE11DeveloperPreviewv() | 0;
 i5 = i8 & -1025;
 i8 = i4 ? i5 : i8;
 _glClear(i8 | 0);
 return;
}

function _tt_cmap8_char_index(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAPU8[i2 + 8205 >> 0] | 0) << 16 | (HEAPU8[i2 + 8204 >> 0] | 0) << 24 | (HEAPU8[i2 + 8206 >> 0] | 0) << 8 | (HEAPU8[i2 + 8207 >> 0] | 0);
 if (!i1) {
  i5 = 0;
  return i5 | 0;
 }
 i2 = i2 + 8208 | 0;
 while (1) {
  i4 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
  if (i4 >>> 0 > i5 >>> 0) {
   i1 = 0;
   i3 = 7;
   break;
  }
  i1 = i1 + -1 | 0;
  if (((HEAPU8[i2 + 5 >> 0] | 0) << 16 | (HEAPU8[i2 + 4 >> 0] | 0) << 24 | (HEAPU8[i2 + 6 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0)) >>> 0 >= i5 >>> 0) {
   i3 = 6;
   break;
  }
  if (!i1) {
   i1 = 0;
   i3 = 7;
   break;
  } else i2 = i2 + 12 | 0;
 }
 if ((i3 | 0) == 6) {
  i5 = i5 - i4 + ((HEAPU8[i2 + 9 >> 0] | 0) << 16 | (HEAPU8[i2 + 8 >> 0] | 0) << 24 | (HEAPU8[i2 + 10 >> 0] | 0) << 8 | (HEAPU8[i2 + 11 >> 0] | 0)) | 0;
  return i5 | 0;
 } else if ((i3 | 0) == 7) return i1 | 0;
 return 0;
}

function _t1_builder_close_contour(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i4) return;
 i6 = HEAP16[i4 >> 1] | 0;
 if (i6 << 16 >> 16 < 2) i5 = 0; else i5 = (HEAP16[(HEAP32[i4 + 12 >> 2] | 0) + ((i6 << 16 >> 16) + -2 << 1) >> 1] | 0) + 1 | 0;
 i1 = HEAP16[i4 + 2 >> 1] | 0;
 if (((i1 << 16 >> 16 > 1 ? (i2 = HEAP32[i4 + 4 >> 2] | 0, i3 = (HEAP32[i4 + 8 >> 2] | 0) + ((i1 << 16 >> 16) + -1) | 0, (HEAP32[i2 + (i5 << 3) >> 2] | 0) == (HEAP32[i2 + ((i1 << 16 >> 16) + -1 << 3) >> 2] | 0)) : 0) ? (HEAP32[i2 + (i5 << 3) + 4 >> 2] | 0) == (HEAP32[i2 + ((i1 << 16 >> 16) + -1 << 3) + 4 >> 2] | 0) : 0) ? (HEAP8[i3 >> 0] | 0) == 1 : 0) {
  HEAP16[i4 + 2 >> 1] = i1 + -1 << 16 >> 16;
  i1 = i1 + -1 << 16 >> 16;
 }
 if (i6 << 16 >> 16 <= 0) return;
 i2 = (i1 << 16 >> 16) + -1 | 0;
 if ((i5 | 0) == (i2 | 0)) {
  HEAP16[i4 >> 1] = i6 + -1 << 16 >> 16;
  HEAP16[i4 + 2 >> 1] = i1 + -1 << 16 >> 16;
  return;
 } else {
  HEAP16[(HEAP32[i4 + 12 >> 2] | 0) + ((i6 << 16 >> 16) + -1 << 1) >> 1] = i2;
  return;
 }
}

function _FT_Outline_Get_Orientation(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if (!i1) {
  i8 = 0;
  return i8 | 0;
 }
 if ((HEAP16[i1 + 2 >> 1] | 0) < 1) {
  i8 = 0;
  return i8 | 0;
 }
 i8 = HEAP32[i1 + 4 >> 2] | 0;
 i9 = HEAP16[i1 >> 1] | 0;
 if (i9 << 16 >> 16 > 0) {
  i6 = HEAP32[i1 + 12 >> 2] | 0;
  i1 = 0;
  i7 = 0;
  i2 = 0;
  while (1) {
   i5 = HEAP16[i6 + (i7 << 1) >> 1] | 0;
   if ((i2 | 0) <= (i5 | 0)) {
    i3 = HEAP32[i8 + (i5 << 3) >> 2] | 0;
    i4 = HEAP32[i8 + (i5 << 3) + 4 >> 2] | 0;
    while (1) {
     i10 = i3;
     i3 = HEAP32[i8 + (i2 << 3) >> 2] | 0;
     i11 = i4;
     i4 = HEAP32[i8 + (i2 << 3) + 4 >> 2] | 0;
     i1 = (Math_imul(i4 - i11 | 0, i3 + i10 | 0) | 0) + i1 | 0;
     if ((i2 | 0) >= (i5 | 0)) break; else i2 = i2 + 1 | 0;
    }
   }
   i7 = i7 + 1 | 0;
   if ((i7 | 0) >= (i9 << 16 >> 16 | 0)) break; else i2 = i5 + 1 | 0;
  }
  if ((i1 | 0) > 0) {
   i11 = 1;
   return i11 | 0;
  }
 } else i1 = 0;
 i11 = (i1 >> 31) + 2 & -2;
 return i11 | 0;
}

function __ZN12VertexBufferC2EbbRK17VertexDeclarationi13ResourceUsagebb(i8, i5, i6, i1, i7, i9, i3, i4) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 HEAP32[i8 >> 2] = 0;
 HEAP8[i8 + 4 >> 0] = 0;
 __ZN5ArrayI13VertexElement9StdCAllocEC2ERKS2_(i8 + 32 | 0, i1);
 HEAP32[i8 + 48 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i8 + 48 + 4 >> 2] = HEAP32[i1 + 16 + 4 >> 2];
 HEAP32[i8 + 48 + 8 >> 2] = HEAP32[i1 + 16 + 8 >> 2];
 HEAP32[i8 + 60 >> 2] = 0;
 HEAP32[i8 + 64 >> 2] = 0;
 HEAP32[i8 + 68 >> 2] = i7;
 HEAP32[i8 + 72 >> 2] = i9;
 HEAP8[i8 + 76 >> 0] = i3 & 1;
 HEAP8[i8 + 77 >> 0] = i4 & 1;
 HEAP32[i8 + 80 >> 2] = 0;
 i1 = i8 + 88 | 0;
 i2 = i1 + 44 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 if (i5) {
  i7 = Math_imul(HEAP32[i8 + 56 >> 2] | 0, i7) | 0;
  HEAP32[i8 + 64 >> 2] = i7;
  HEAP32[i8 + 60 >> 2] = __Znaj(i7) | 0;
 }
 if (!i6) return;
 __ZN12VertexBuffer17AllocateGpuMemoryE13ResourceUsagebb(i8, i9, i3, i4);
 return;
}

function _tt_cmap14_get_def_chars(i1, i7, i2) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = _tt_cmap14_def_char_count(i7) | 0;
 i3 = HEAP8[i7 >> 0] | 0;
 i4 = HEAP8[i7 + 1 >> 0] | 0;
 i5 = HEAP8[i7 + 2 >> 0] | 0;
 i6 = HEAP8[i7 + 3 >> 0] | 0;
 if (_tt_cmap14_ensure(i1, i8 + 1 | 0, i2) | 0) {
  i8 = 0;
  return i8 | 0;
 }
 i8 = HEAP32[i1 + 32 >> 2] | 0;
 if (!((i4 & 255) << 16 | (i3 & 255) << 24 | (i5 & 255) << 8 | i6 & 255)) i1 = i8; else {
  i6 = (i4 & 255) << 16 | (i3 & 255) << 24 | (i5 & 255) << 8 | i6 & 255;
  i1 = i8;
  do {
   i5 = i7;
   i7 = i7 + 4 | 0;
   i2 = HEAPU8[i5 + 7 >> 0] | 0;
   i3 = i2 + 1 | 0;
   i4 = i1;
   i5 = (HEAPU8[i5 + 5 >> 0] | 0) << 8 | (HEAPU8[i7 >> 0] | 0) << 16 | (HEAPU8[i5 + 6 >> 0] | 0);
   while (1) {
    HEAP32[i4 >> 2] = i5;
    i3 = i3 + -1 | 0;
    if (!i3) break; else {
     i4 = i4 + 4 | 0;
     i5 = i5 + 1 | 0;
    }
   }
   i1 = i1 + (i2 + 1 << 2) | 0;
   i6 = i6 + -1 | 0;
  } while ((i6 | 0) != 0);
 }
 HEAP32[i1 >> 2] = 0;
 return i8 | 0;
}

function _ps_hinter_init(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 i3 = i2 + 12 | 0;
 i4 = i3 + 88 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i2 + 12 >> 2] = i1;
 HEAP32[i2 + 100 >> 2] = 66;
 HEAP32[i2 + 104 >> 2] = 37;
 HEAP32[i2 + 108 >> 2] = 75;
 i3 = i2 + 112 | 0;
 i4 = i3 + 20 | 0;
 do {
  HEAP8[i3 >> 0] = 0;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i2 + 116 >> 2] = 76;
 HEAP32[i2 + 120 >> 2] = 158;
 HEAP32[i2 + 124 >> 2] = 13;
 HEAP32[i2 + 128 >> 2] = 14;
 HEAP32[i2 + 132 >> 2] = 21;
 HEAP32[i2 + 136 >> 2] = 38;
 HEAP32[i2 + 112 >> 2] = i2 + 12;
 HEAP32[i2 + 140 >> 2] = 0;
 HEAP32[i2 + 140 + 4 >> 2] = 0;
 HEAP32[i2 + 140 + 8 >> 2] = 0;
 HEAP32[i2 + 140 + 12 >> 2] = 0;
 HEAP32[i2 + 140 + 16 >> 2] = 0;
 HEAP32[i2 + 144 >> 2] = 77;
 HEAP32[i2 + 148 >> 2] = 158;
 HEAP32[i2 + 152 >> 2] = 13;
 HEAP32[i2 + 156 >> 2] = 14;
 HEAP32[i2 + 160 >> 2] = 15;
 HEAP32[i2 + 164 >> 2] = 38;
 HEAP32[i2 + 140 >> 2] = i2 + 12;
 return 0;
}

function _tt_face_free_eblc(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i8 = HEAP32[i9 + 100 >> 2] | 0;
 i1 = HEAP32[i9 + 616 >> 2] | 0;
 i5 = HEAP32[i9 + 612 >> 2] | 0;
 if (!i1) {
  HEAP32[i9 + 612 >> 2] = 0;
  return;
 }
 if ((i5 | 0) > 0) {
  i7 = i1;
  do {
   i6 = i7 + 4 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   i3 = HEAP32[i7 >> 2] | 0;
   if ((i2 | 0) != 0 & (i3 | 0) > 0) {
    i4 = i2;
    do {
     i10 = i4 + 28 | 0;
     _ft_mem_free(i8, HEAP32[i10 >> 2] | 0);
     HEAP32[i10 >> 2] = 0;
     i10 = i4 + 32 | 0;
     _ft_mem_free(i8, HEAP32[i10 >> 2] | 0);
     HEAP32[i10 >> 2] = 0;
     i4 = i4 + 40 | 0;
    } while (i4 >>> 0 < (i2 + (i3 * 40 | 0) | 0) >>> 0);
    i2 = HEAP32[i6 >> 2] | 0;
   }
   _ft_mem_free(i8, i2);
   HEAP32[i6 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   i7 = i7 + 48 | 0;
  } while (i7 >>> 0 < (i1 + (i5 * 48 | 0) | 0) >>> 0);
  i1 = HEAP32[i9 + 616 >> 2] | 0;
 }
 _ft_mem_free(i8, i1);
 HEAP32[i9 + 616 >> 2] = 0;
 HEAP32[i9 + 612 >> 2] = 0;
 return;
}

function ___fwritex(i3, i4, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i1 = HEAP32[i6 + 16 >> 2] | 0;
 if (!i1) if (!(___towrite(i6) | 0)) {
  i1 = HEAP32[i6 + 16 >> 2] | 0;
  i2 = 4;
 } else i1 = 0; else i2 = 4;
 L4 : do if ((i2 | 0) == 4) {
  i5 = HEAP32[i6 + 20 >> 2] | 0;
  if ((i1 - i5 | 0) >>> 0 < i4 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 127](i6, i3, i4) | 0;
   break;
  }
  L9 : do if ((HEAP8[i6 + 75 >> 0] | 0) > -1) {
   i1 = i4;
   while (1) {
    if (!i1) {
     i2 = i5;
     i1 = 0;
     break L9;
    }
    i2 = i1 + -1 | 0;
    if ((HEAP8[i3 + i2 >> 0] | 0) == 10) break; else i1 = i2;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 127](i6, i3, i1) | 0) >>> 0 < i1 >>> 0) break L4;
   i4 = i4 - i1 | 0;
   i3 = i3 + i1 | 0;
   i2 = HEAP32[i6 + 20 >> 2] | 0;
  } else {
   i2 = i5;
   i1 = 0;
  } while (0);
  _memcpy(i2 | 0, i3 | 0, i4 | 0) | 0;
  HEAP32[i6 + 20 >> 2] = (HEAP32[i6 + 20 >> 2] | 0) + i4;
  i1 = i1 + i4 | 0;
 } while (0);
 return i1 | 0;
}

function __ZN6String6AppendEPKh(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i6) return;
 i5 = _strlen(i6) | 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 << 24 >> 24)) i2 = 0; else {
  i2 = 0;
  i3 = i6;
  do {
   i4 = (i1 & 255) >>> 7 & 255;
   i2 = (i4 ^ 1) + i2 + ((i1 & 255) >>> 6 & i4) | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP8[i3 >> 0] | 0;
  } while (i1 << 24 >> 24 != 0);
 }
 i1 = HEAP32[i7 + 8 >> 2] | 0;
 if ((HEAP32[i7 + 12 >> 2] | 0) < (i1 + i5 + 1 | 0)) {
  i4 = __Znaj((i1 + i5 + 1 | 0) > -1 ? i1 + i5 + 1 | 0 : -1) | 0;
  HEAP32[i7 + 12 >> 2] = i1 + i5 + 1;
  i3 = HEAP32[i7 >> 2] | 0;
  if (!i3) {
   if ((i1 + i5 | 0) > -1) HEAP8[i4 >> 0] = 0;
  } else {
   _memcpy(i4 | 0, i3 | 0, i1 + 1 | 0) | 0;
   __ZdaPv(i3);
   i1 = HEAP32[i7 + 8 >> 2] | 0;
  }
  HEAP32[i7 >> 2] = i4;
 } else i4 = HEAP32[i7 >> 2] | 0;
 _memcpy(i4 + i1 | 0, i6 | 0, i5 + 1 | 0) | 0;
 HEAP32[i7 + 8 >> 2] = (HEAP32[i7 + 8 >> 2] | 0) + i5;
 HEAP32[i7 + 4 >> 2] = (HEAP32[i7 + 4 >> 2] | 0) + i2;
 return;
}

function __Z32RenderTargetAvailableAsGLTexture13TextureFormat(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 L1 : do if ((i1 | 0) >= 80) {
  if ((i1 | 0) < 95) switch (i1 | 0) {
  case 94:
  case 84:
  case 83:
  case 82:
  case 81:
  case 80:
   {
    i1 = 0;
    break L1;
   }
  default:
   {
    i2 = 2;
    break L1;
   }
  }
  if ((i1 | 0) < 98) switch (i1 | 0) {
  case 97:
  case 96:
  case 95:
   {
    i1 = 0;
    break L1;
   }
  default:
   {
    i2 = 2;
    break L1;
   }
  }
  if ((i1 | 0) < 1048576) switch (i1 | 0) {
  case 99:
  case 98:
   {
    i1 = 0;
    break L1;
   }
  default:
   {
    i2 = 2;
    break L1;
   }
  } else switch (i1 | 0) {
  case 1048576:
  case 1048579:
   {
    i1 = 0;
    break L1;
   }
  default:
   {
    i2 = 2;
    break L1;
   }
  }
 } else switch (i1 | 0) {
 case 78:
 case 77:
 case 76:
 case 75:
 case 74:
 case 73:
 case 79:
 case 72:
 case 71:
 case 70:
 case 61:
 case 65:
  {
   i1 = 0;
   break;
  }
 default:
  i2 = 2;
 } while (0);
 if ((i2 | 0) == 2) i1 = 1;
 return i1 | 0;
}

function _tt_cmap10_validate(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 if ((i3 + 20 | 0) >>> 0 > (HEAP32[i4 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i4, 8);
 i1 = (HEAPU8[i3 + 5 >> 0] | 0) << 16 | (HEAPU8[i3 + 4 >> 0] | 0) << 24 | (HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0);
 i2 = (HEAPU8[i3 + 17 >> 0] | 0) << 16 | (HEAPU8[i3 + 16 >> 0] | 0) << 24 | (HEAPU8[i3 + 18 >> 0] | 0) << 8 | (HEAPU8[i3 + 19 >> 0] | 0);
 if (i1 >>> 0 > ((HEAP32[i4 + 4 >> 2] | 0) - i3 | 0) >>> 0) _ft_validator_error(i4, 8);
 if (i1 >>> 0 < ((i2 << 1) + 20 | 0) >>> 0) _ft_validator_error(i4, 8);
 if (!((i2 | 0) != 0 & (HEAP32[i4 + 8 >> 2] | 0) != 0)) return 0;
 i1 = i3 + 20 | 0;
 while (1) {
  if (((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) >>> 0 >= (HEAP32[i4 + 172 >> 2] | 0) >>> 0) {
   i1 = 9;
   break;
  }
  i2 = i2 + -1 | 0;
  if (!i2) {
   i1 = 11;
   break;
  } else i1 = i1 + 2 | 0;
 }
 if ((i1 | 0) == 9) _ft_validator_error(i4, 16); else if ((i1 | 0) == 11) return 0;
 return 0;
}

function _tt_cmap10_char_next(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
 i4 = (HEAPU8[i2 + 13 >> 0] | 0) << 16 | (HEAPU8[i2 + 12 >> 0] | 0) << 24 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0);
 i5 = (HEAPU8[i2 + 17 >> 0] | 0) << 16 | (HEAPU8[i2 + 16 >> 0] | 0) << 24 | (HEAPU8[i2 + 18 >> 0] | 0) << 8 | (HEAPU8[i2 + 19 >> 0] | 0);
 i1 = i1 >>> 0 < i4 >>> 0 ? i4 : i1;
 if ((i1 - i4 | 0) >>> 0 >= i5 >>> 0) {
  i5 = i1;
  i6 = 0;
  HEAP32[i7 >> 2] = i5;
  return i6 | 0;
 }
 i3 = i1;
 i6 = i1 - i4 | 0;
 i2 = i2 + ((i1 - i4 << 1) + 20) | 0;
 while (1) {
  i1 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
  if (i1) {
   i2 = 5;
   break;
  }
  i1 = i3 + 1 | 0;
  i6 = i6 + 1 | 0;
  if (i6 >>> 0 >= i5 >>> 0) {
   i3 = i1;
   i1 = 0;
   i2 = 5;
   break;
  } else {
   i3 = i1;
   i2 = i2 + 2 | 0;
  }
 }
 if ((i2 | 0) == 5) {
  HEAP32[i7 >> 2] = i3;
  return i1 | 0;
 }
 return 0;
}

function _BDF_Size_Request(i6, i3) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i4 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i4 + 140 >> 2] | 0;
 i2 = HEAP32[i3 + 16 >> 2] | 0;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if (i2) i1 = ((Math_imul(i1, i2) | 0) + 36 | 0) / 72 | 0;
 i1 = i1 + 32 >> 6;
 L4 : do switch (HEAP32[i3 >> 2] | 0) {
 case 0:
  if ((i1 | 0) == ((HEAP32[(HEAP32[i4 + 32 >> 2] | 0) + 12 >> 2] | 0) + 32 >> 6 | 0)) {
   i1 = i5 + 44 | 0;
   i2 = i5 + 40 | 0;
   break L4;
  } else {
   i6 = 23;
   return i6 | 0;
  }
 case 1:
  {
   if ((i1 | 0) == ((HEAP32[i5 + 44 >> 2] | 0) + (HEAP32[i5 + 40 >> 2] | 0) | 0)) {
    i1 = i5 + 44 | 0;
    i2 = i5 + 40 | 0;
   } else {
    i6 = 23;
    return i6 | 0;
   }
   break;
  }
 default:
  {
   i6 = 7;
   return i6 | 0;
  }
 } while (0);
 _FT_Select_Metrics(i4, 0);
 HEAP32[i6 + 24 >> 2] = HEAP32[i2 >> 2] << 6;
 HEAP32[i6 + 28 >> 2] = 0 - (HEAP32[i1 >> 2] | 0) << 6;
 HEAP32[i6 + 36 >> 2] = (HEAPU16[i5 + 4 >> 1] | 0) << 6;
 i6 = 0;
 return i6 | 0;
}

function __Z14RemoveCommentsR6String(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298347, 0) | 0;
 if ((i2 | 0) != -1) do {
  i3 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 297808, i2) | 0;
  i3 = (i3 | 0) == -1 ? HEAP32[i4 + 4 >> 2] | 0 : i3;
  if ((i2 | 0) < (i3 | 0)) do {
   HEAP8[i1 + i2 >> 0] = 32;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  } while ((i2 | 0) != (i3 | 0));
  i2 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298347, 0) | 0;
 } while ((i2 | 0) != -1);
 i2 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298350, 0) | 0;
 if ((i2 | 0) == -1) return;
 do {
  i3 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298353, i2 + 2 | 0) | 0;
  i3 = (i3 | 0) == -1 ? HEAP32[i4 + 4 >> 2] | 0 : i3 + 2 | 0;
  if ((i2 | 0) < (i3 | 0)) do {
   HEAP8[i1 + i2 >> 0] = 32;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  } while ((i2 | 0) != (i3 | 0));
  i2 = __ZN6String12FirstIndexOfEPKhS1_i(i1, 298350, 0) | 0;
 } while ((i2 | 0) != -1);
 return;
}

function _tt_get_advances(i6, i5, i4, i1, i3) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(i1 & 16)) {
  if (!i4) {
   STACKTOP = i7;
   return 0;
  }
  i1 = 0;
  do {
   FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i6 + 532 >> 2] | 0) + 156 >> 2] & 63](i6, 0, i1 + i5 | 0, i7 + 2 | 0, i7) | 0;
   HEAP32[i3 + (i1 << 2) >> 2] = HEAPU16[i7 >> 1];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i4 | 0));
  STACKTOP = i7;
  return 0;
 }
 if (!i4) {
  STACKTOP = i7;
  return 0;
 }
 i2 = 0;
 do {
  if (!(HEAP8[i6 + 296 >> 0] | 0)) {
   HEAP16[i7 + 6 >> 1] = 0;
   i1 = HEAP16[i6 + 68 >> 1] | 0;
   HEAP16[i7 + 4 >> 1] = i1;
  } else {
   FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i6 + 532 >> 2] | 0) + 156 >> 2] & 63](i6, 1, i2 + i5 | 0, i7 + 6 | 0, i7 + 4 | 0) | 0;
   i1 = HEAP16[i7 + 4 >> 1] | 0;
  }
  HEAP32[i3 + (i2 << 2) >> 2] = i1 & 65535;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i4 | 0));
 STACKTOP = i7;
 return 0;
}

function _PCF_Size_Request(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i3 + 16 >> 2] | 0;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if (i2) i1 = ((Math_imul(i1, i2) | 0) + 36 | 0) / 72 | 0;
 i1 = i1 + 32 >> 6;
 L4 : do switch (HEAP32[i3 >> 2] | 0) {
 case 0:
  if ((i1 | 0) == ((HEAP32[(HEAP32[i4 + 32 >> 2] | 0) + 12 >> 2] | 0) + 32 >> 6 | 0)) {
   i1 = i4 + 196 + 8 | 0;
   i2 = i4 + 196 + 12 | 0;
   break L4;
  } else {
   i5 = 23;
   return i5 | 0;
  }
 case 1:
  {
   if ((i1 | 0) == ((HEAP32[i4 + 196 + 12 >> 2] | 0) + (HEAP32[i4 + 196 + 8 >> 2] | 0) | 0)) {
    i1 = i4 + 196 + 8 | 0;
    i2 = i4 + 196 + 12 | 0;
   } else {
    i5 = 23;
    return i5 | 0;
   }
   break;
  }
 default:
  {
   i5 = 7;
   return i5 | 0;
  }
 } while (0);
 _FT_Select_Metrics(i4, 0);
 HEAP32[i5 + 24 >> 2] = HEAP32[i1 >> 2] << 6;
 HEAP32[i5 + 28 >> 2] = 0 - (HEAP32[i2 >> 2] | 0) << 6;
 HEAP32[i5 + 36 >> 2] = HEAP16[i4 + 196 + 40 >> 1] << 6;
 i5 = 0;
 return i5 | 0;
}

function __ZNK6StringplERKS_(i6, i1, i7) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i6, HEAP32[i1 >> 2] | 0);
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) return;
 i5 = HEAP32[i6 + 8 >> 2] | 0;
 i2 = HEAP32[i7 + 8 >> 2] | 0;
 if ((HEAP32[i6 + 12 >> 2] | 0) < (i2 + i5 + 1 | 0)) {
  i4 = __Znaj((i2 + i5 + 1 | 0) > -1 ? i2 + i5 + 1 | 0 : -1) | 0;
  HEAP32[i6 + 12 >> 2] = i2 + i5 + 1;
  i3 = HEAP32[i6 >> 2] | 0;
  if (!i3) {
   if ((i2 + i5 | 0) > -1) HEAP8[i4 >> 0] = 0;
  } else {
   _memcpy(i4 | 0, i3 | 0, i5 + 1 | 0) | 0;
   __ZdaPv(i3);
   i1 = HEAP32[i7 >> 2] | 0;
   i2 = HEAP32[i7 + 8 >> 2] | 0;
  }
  HEAP32[i6 >> 2] = i4;
 } else i4 = HEAP32[i6 >> 2] | 0;
 _memcpy(i4 + i5 | 0, i1 | 0, i2 + 1 | 0) | 0;
 HEAP32[i6 + 8 >> 2] = i5 + (HEAP32[i7 + 8 >> 2] | 0);
 HEAP32[i6 + 4 >> 2] = (HEAP32[i6 + 4 >> 2] | 0) + (HEAP32[i7 + 4 >> 2] | 0);
 return;
}

function _sift(i2, i11, i9, i1, i10) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 HEAP32[i12 >> 2] = i2;
 L1 : do if ((i1 | 0) > 1) {
  i7 = i1;
  i3 = i2;
  i4 = i2;
  i1 = 1;
  while (1) {
   i5 = i3 + (0 - i11) | 0;
   i6 = i7 + -2 | 0;
   i2 = i3 + (0 - ((HEAP32[i10 + (i6 << 2) >> 2] | 0) + i11)) | 0;
   if ((FUNCTION_TABLE_iii[i9 & 255](i4, i2) | 0) > -1 ? (FUNCTION_TABLE_iii[i9 & 255](i4, i5) | 0) > -1 : 0) break L1;
   i8 = i1 + 1 | 0;
   i1 = i12 + (i1 << 2) | 0;
   if ((FUNCTION_TABLE_iii[i9 & 255](i2, i5) | 0) > -1) {
    HEAP32[i1 >> 2] = i2;
    i1 = i7 + -1 | 0;
   } else {
    HEAP32[i1 >> 2] = i5;
    i2 = i5;
    i1 = i6;
   }
   if ((i1 | 0) <= 1) {
    i1 = i8;
    break L1;
   }
   i7 = i1;
   i3 = i2;
   i4 = HEAP32[i12 >> 2] | 0;
   i1 = i8;
  }
 } else i1 = 1; while (0);
 _cycle(i11, i12, i1);
 STACKTOP = i12;
 return;
}

function _cff_get_name_index(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[i1 + 692 >> 2] | 0;
 i3 = _ft_module_get_service(HEAP32[i1 + 96 >> 2] | 0, 327387) | 0;
 if (!i3) {
  i7 = 0;
  return i7 | 0;
 }
 if (!(HEAP32[i4 + 12 >> 2] | 0)) {
  i7 = 0;
  return i7 | 0;
 }
 i1 = 0;
 while (1) {
  i2 = HEAP16[(HEAP32[i4 + 1160 >> 2] | 0) + (i1 << 1) >> 1] | 0;
  if ((i2 & 65535) > 390) {
   if ((HEAP32[i4 + 1312 >> 2] | 0) >>> 0 > ((i2 & 65535) + -391 | 0) >>> 0) {
    i6 = HEAP32[(HEAP32[i4 + 1316 >> 2] | 0) + ((i2 & 65535) + -391 << 2) >> 2] | 0;
    i7 = 8;
   }
  } else {
   i6 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i2 & 65535) | 0;
   i7 = 8;
  }
  if (((i7 | 0) == 8 ? (i7 = 0, (i6 | 0) != 0) : 0) ? (_strcmp(i5, i6) | 0) == 0 : 0) {
   i7 = 11;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= (HEAP32[i4 + 12 >> 2] | 0) >>> 0) {
   i1 = 0;
   i7 = 11;
   break;
  }
 }
 if ((i7 | 0) == 11) return i1 | 0;
 return 0;
}

function __ZNSt3__16vectorI5ImageNS_9allocatorIS1_EEE7reserveEj(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = HEAP32[i8 >> 2] | 0;
 if ((((HEAP32[i8 + 8 >> 2] | 0) - i5 | 0) / 36 | 0) >>> 0 >= i3 >>> 0) return;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if (!i3) i2 = 0; else i2 = __Znwj(i3 * 36 | 0) | 0;
 i7 = i2 + (((i1 - i5 | 0) / 36 | 0) * 36 | 0) | 0;
 i6 = i2 + (i3 * 36 | 0) | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i8;
  i4 = i8 + 4 | 0;
  i2 = i7;
 } else {
  i3 = i7;
  i2 = i7;
  do {
   i1 = i1 + -36 | 0;
   __ZN5ImageC2ERKS_(i3 + -36 | 0, i1);
   i3 = i2 + -36 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i3 = i8;
  i4 = i8 + 4 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i8 + 4 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i7;
 HEAP32[i8 + 8 >> 2] = i6;
 i2 = i5;
 while (1) {
  if ((i1 | 0) == (i2 | 0)) break;
  __ZN5ImageD2Ev(i1 + -36 | 0);
  i1 = i1 + -36 | 0;
 }
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function _tt_face_load_any(i9, i6, i3, i8, i7) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 do if (i6) {
  i4 = HEAP16[i9 + 152 >> 1] | 0;
  i5 = HEAP32[i9 + 156 >> 2] | 0;
  if (!(i4 << 16 >> 16)) {
   i8 = 142;
   return i8 | 0;
  } else i2 = i5;
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0) ? (i1 = HEAP32[i2 + 12 >> 2] | 0, (i1 | 0) != 0) : 0) {
    i4 = 6;
    break;
   }
   i2 = i2 + 16 | 0;
   if (i2 >>> 0 >= (i5 + ((i4 & 65535) << 4) | 0) >>> 0) {
    i1 = 142;
    i4 = 12;
    break;
   }
  }
  if ((i4 | 0) == 6) {
   i3 = (HEAP32[i2 + 8 >> 2] | 0) + i3 | 0;
   break;
  } else if ((i4 | 0) == 12) return i1 | 0;
 } else i1 = HEAP32[(HEAP32[i9 + 104 >> 2] | 0) + 4 >> 2] | 0; while (0);
 if (i7) {
  i2 = HEAP32[i7 >> 2] | 0;
  if (!i2) {
   HEAP32[i7 >> 2] = i1;
   i8 = 0;
   return i8 | 0;
  } else i1 = i2;
 }
 i8 = _FT_Stream_ReadAt(HEAP32[i9 + 104 >> 2] | 0, i3, i8, i1) | 0;
 return i8 | 0;
}

function _Split_Cubic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 HEAP32[i1 + 48 >> 2] = i2;
 i5 = HEAP32[i1 + 16 >> 2] | 0;
 i3 = (HEAP32[i1 + 8 >> 2] | 0) + 1 | 0;
 i4 = i3 + (HEAP32[i1 >> 2] | 0) >> 1;
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i1 + 40 >> 2] = i5 + 1 + i2 >> 1;
 HEAP32[i1 + 16 >> 2] = (i3 + i5 >> 1) + 1 + i4 >> 1;
 i2 = (i3 + i5 >> 1) + 1 + (i5 + 1 + i2 >> 1) >> 1;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 24 >> 2] = ((i3 + i5 >> 1) + 1 + i4 >> 1) + 1 + i2 >> 1;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[i1 + 52 >> 2] = i2;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 i5 = (HEAP32[i1 + 12 >> 2] | 0) + 1 | 0;
 i3 = i5 + (HEAP32[i1 + 4 >> 2] | 0) >> 1;
 HEAP32[i1 + 12 >> 2] = i3;
 HEAP32[i1 + 44 >> 2] = i4 + 1 + i2 >> 1;
 HEAP32[i1 + 20 >> 2] = (i5 + i4 >> 1) + 1 + i3 >> 1;
 i2 = (i5 + i4 >> 1) + 1 + (i4 + 1 + i2 >> 1) >> 1;
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP32[i1 + 28 >> 2] = ((i5 + i4 >> 1) + 1 + i3 >> 1) + 1 + i2 >> 1;
 return;
}

function _tt_cmap14_variants(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i5 = HEAP32[i4 + 16 >> 2] | 0;
 i2 = HEAP32[i4 + 28 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 do if (i2 >>> 0 < (i1 + 1 | 0) >>> 0) {
  HEAP32[i4 + 36 >> 2] = i3;
  i2 = _ft_mem_realloc(i3, 4, i2, i1 + 1 | 0, HEAP32[i4 + 32 >> 2] | 0, i6) | 0;
  HEAP32[i4 + 32 >> 2] = i2;
  if (!(HEAP32[i6 >> 2] | 0)) {
   HEAP32[i4 + 28 >> 2] = i1 + 1;
   break;
  }
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 } else i2 = HEAP32[i4 + 32 >> 2] | 0; while (0);
 if (!i1) i1 = 0; else {
  i4 = 0;
  i3 = i5 + 10 | 0;
  while (1) {
   HEAP32[i2 + (i4 << 2) >> 2] = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 >> 0] | 0) << 16 | (HEAPU8[i3 + 2 >> 0] | 0);
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == (i1 | 0)) break; else i3 = i3 + 11 | 0;
  }
 }
 HEAP32[i2 + (i1 << 2) >> 2] = 0;
 i5 = i2;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNK14ProgramOptions9HasOptionEPKc(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i5 = HEAP32[i1 >> 2] | 0;
 if ((i5 | 0) <= 1) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = 1;
 L4 : while (1) {
  i1 = HEAP32[i3 + (i4 << 2) >> 2] | 0;
  i2 = HEAP8[i1 >> 0] | 0;
  switch (i2 << 24 >> 24) {
  case 47:
  case 45:
   {
    if (i2 << 24 >> 24 != 0 & (i2 & -3) << 24 >> 24 == 45) do {
     i1 = i1 + 1 | 0;
     i2 = HEAP8[i1 >> 0] | 0;
    } while (i2 << 24 >> 24 != 0 & (i2 & -3) << 24 >> 24 == 45);
    i2 = i6;
    while (1) {
     i7 = HEAP8[i2 >> 0] | 0;
     if (i7 << 24 >> 24 != 0 & (i7 & -3) << 24 >> 24 == 45) i2 = i2 + 1 | 0; else break;
    }
    if (!(_strcmp(i1, i2) | 0)) {
     i1 = 1;
     i2 = 10;
     break L4;
    }
    break;
   }
  default:
   {}
  }
  i4 = i4 + 1 | 0;
  if ((i4 | 0) >= (i5 | 0)) {
   i1 = 0;
   i2 = 10;
   break;
  }
 }
 if ((i2 | 0) == 10) return i1 | 0;
 return 0;
}

function __ZN6Shader6DeinitEv(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 + 24 >> 2] | 0;
 if (i1) {
  _glDeleteShader(i1 | 0);
  HEAP32[i6 + 24 >> 2] = 0;
 }
 HEAP32[i6 + 4 >> 2] = 0;
 i5 = HEAP32[i6 + 60 >> 2] | 0;
 i1 = HEAP32[i6 + 64 >> 2] | 0;
 if ((i1 | 0) != (i5 | 0)) do {
  i4 = i1 + -48 | 0;
  HEAP32[i6 + 64 >> 2] = i4;
  i2 = i1 + -16 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (i3) __ZdaPv(i3);
  HEAP32[i2 >> 2] = 0;
  i1 = i1 + -32 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2) __ZdaPv(i2);
  HEAP32[i1 >> 2] = 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i1) __ZdaPv(i1);
  HEAP32[i4 >> 2] = 0;
  i1 = HEAP32[i6 + 64 >> 2] | 0;
 } while ((i1 | 0) != (i5 | 0));
 i2 = HEAP32[i6 + 72 >> 2] | 0;
 i1 = HEAP32[i6 + 76 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) return;
 do {
  i5 = i1 + -44 | 0;
  HEAP32[i6 + 76 >> 2] = i5;
  __ZN6Shader19UniformBufferObjectD2Ev(i5);
  i1 = HEAP32[i6 + 76 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 return;
}

function __ZN6FTFontD2Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 + 36 >> 2] | 0;
 if (i1) {
  if ((HEAP32[i6 + 40 >> 2] | 0) != (i1 | 0)) HEAP32[i6 + 40 >> 2] = i1;
  __ZdlPv(i1);
 }
 i2 = HEAP32[i6 + 28 >> 2] | 0;
 i1 = HEAP32[i6 + 24 >> 2] | 0;
 if ((i2 + 1 | 0) >>> 0 > 1) {
  i5 = 0;
  do {
   i4 = i1 + (i5 << 2) | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if (i3) {
    i2 = i4;
    do {
     HEAP32[i2 >> 2] = HEAP32[i3 + 64 >> 2];
     __ZdlPv(i3);
     i1 = HEAP32[i6 + 24 >> 2] | 0;
     i2 = i1 + (i5 << 2) | 0;
     i3 = HEAP32[i2 >> 2] | 0;
    } while ((i3 | 0) != 0);
    i2 = HEAP32[i6 + 28 >> 2] | 0;
   }
   i5 = i5 + 1 | 0;
  } while (i5 >>> 0 < ((i2 | 0) == 0 ? 0 : i2 + 1 | 0) >>> 0);
 }
 HEAP32[i6 + 32 >> 2] = 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i6 + 28 >> 2] = 0;
 HEAP32[i6 + 24 >> 2] = 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  HEAP32[i6 >> 2] = 0;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i6 >> 2] = 0;
 return;
}

function _vsnprintf(i2, i1, i7, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i3 = i9;
 i4 = 282184;
 i5 = i3 + 112 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i3 = i3 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 if ((i1 + -1 | 0) >>> 0 > 2147483646) if (!i1) {
  i2 = i9 + 112 | 0;
  i1 = 1;
  i8 = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  i1 = -1;
 } else i8 = 4;
 if ((i8 | 0) == 4) {
  i8 = -2 - i2 | 0;
  i8 = i1 >>> 0 > i8 >>> 0 ? i8 : i1;
  HEAP32[i9 + 48 >> 2] = i8;
  HEAP32[i9 + 20 >> 2] = i2;
  HEAP32[i9 + 44 >> 2] = i2;
  i1 = i2 + i8 | 0;
  HEAP32[i9 + 16 >> 2] = i1;
  HEAP32[i9 + 28 >> 2] = i1;
  i1 = _vfprintf(i9, i7, i6) | 0;
  if (i8) {
   i8 = HEAP32[i9 + 20 >> 2] | 0;
   HEAP8[i8 + (((i8 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
  }
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _FNT_Size_Request(i6, i3) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i4 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i4 + 132 >> 2] | 0;
 i2 = HEAP32[i3 + 16 >> 2] | 0;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if (i2) i1 = ((Math_imul(i1, i2) | 0) + 36 | 0) / 72 | 0;
 i1 = i1 + 32 >> 6;
 L4 : do switch (HEAP32[i3 >> 2] | 0) {
 case 0:
  if ((i1 | 0) == ((HEAP32[(HEAP32[i4 + 32 >> 2] | 0) + 12 >> 2] | 0) + 32 >> 6 | 0)) {
   i1 = i5 + 96 | 0;
   break L4;
  } else {
   i6 = 23;
   return i6 | 0;
  }
 case 1:
  {
   if ((i1 | 0) == (HEAPU16[i5 + 96 >> 1] | 0 | 0)) i1 = i5 + 96 | 0; else {
    i6 = 23;
    return i6 | 0;
   }
   break;
  }
 default:
  {
   i6 = 7;
   return i6 | 0;
  }
 } while (0);
 _FT_Select_Metrics(i4, 0);
 i4 = HEAPU16[i5 + 80 >> 1] | 0;
 HEAP32[i6 + 24 >> 2] = i4 << 6;
 HEAP32[i6 + 28 >> 2] = i4 - (HEAPU16[i1 >> 1] | 0) << 6;
 HEAP32[i6 + 36 >> 2] = (HEAPU16[i5 + 102 >> 1] | 0) << 6;
 i6 = 0;
 return i6 | 0;
}

function _t1_cmap_std_char_next(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
 if (i1 >>> 0 >= 256) {
  i6 = 0;
  i7 = 0;
  HEAP32[i8 >> 2] = i6;
  return i7 | 0;
 }
 L4 : while (1) {
  i3 = FUNCTION_TABLE_ii[HEAP32[i7 + 20 >> 2] & 63](HEAPU16[(HEAP32[i7 + 16 >> 2] | 0) + (i1 << 1) >> 1] | 0) | 0;
  i4 = HEAP32[i7 + 24 >> 2] | 0;
  L6 : do if (i4) {
   i5 = HEAP32[i7 + 28 >> 2] | 0;
   i2 = 0;
   while (1) {
    i6 = HEAP32[i5 + (i2 << 2) >> 2] | 0;
    if (((i6 | 0) != 0 ? (HEAP8[i6 >> 0] | 0) == (HEAP8[i3 >> 0] | 0) : 0) ? (_strcmp(i6, i3) | 0) == 0 : 0) break;
    i2 = i2 + 1 | 0;
    if (i2 >>> 0 >= i4 >>> 0) break L6;
   }
   if (i2) {
    i3 = 11;
    break L4;
   }
  } while (0);
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 256) {
   i1 = 0;
   i2 = 0;
   i3 = 11;
   break;
  }
 }
 if ((i3 | 0) == 11) {
  HEAP32[i8 >> 2] = i1;
  return i2 | 0;
 }
 return 0;
}

function __ZN6StringaSERKS_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if ((i4 | 0) == (i3 | 0)) return i4 | 0;
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (!i1) return i4 | 0;
  HEAP8[i1 >> 0] = 0;
  return i4 | 0;
 }
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 do if ((HEAP32[i4 + 12 >> 2] | 0) < (i2 + 1 | 0)) {
  if (!(i2 + 1 | 0)) {
   i1 = HEAP32[i4 >> 2] | 0;
   if (i1) __ZdaPv(i1);
   HEAP32[i4 >> 2] = 0;
   i1 = 0;
   break;
  }
  i1 = __Znaj((i2 + 1 | 0) > -1 ? i2 + 1 | 0 : -1) | 0;
  HEAP32[i4 + 12 >> 2] = i2 + 1;
  if ((i2 | 0) > -1) HEAP8[i1 >> 0] = 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (i2) __ZdaPv(i2);
  HEAP32[i4 >> 2] = i1;
 } else i1 = HEAP32[i4 >> 2] | 0; while (0);
 _memcpy(i1 | 0, HEAP32[i3 >> 2] | 0, (HEAP32[i3 + 8 >> 2] | 0) + 1 | 0) | 0;
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 return i4 | 0;
}

function _tt_cmap6_char_next(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
 i4 = (HEAPU8[i3 + 6 >> 0] | 0) << 8 | (HEAPU8[i3 + 7 >> 0] | 0);
 i6 = (HEAPU8[i3 + 8 >> 0] | 0) << 8 | (HEAPU8[i3 + 9 >> 0] | 0);
 if (i1 >>> 0 > 65535) {
  i6 = 0;
  i5 = 0;
  HEAP32[i7 >> 2] = i5;
  return i6 | 0;
 }
 i2 = i1 >>> 0 < i4 >>> 0 ? i4 : i1;
 if ((i2 - i4 | 0) >>> 0 >= i6 >>> 0) {
  i6 = 0;
  i5 = 0;
  HEAP32[i7 >> 2] = i5;
  return i6 | 0;
 }
 i1 = i2;
 i5 = i2 - i4 | 0;
 i2 = i3 + ((i2 - i4 << 1) + 10) | 0;
 while (1) {
  i3 = (HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0);
  if (i3) {
   i2 = 6;
   break;
  }
  i5 = i5 + 1 | 0;
  if (i5 >>> 0 >= i6 >>> 0) {
   i3 = 0;
   i1 = 0;
   i2 = 6;
   break;
  } else {
   i1 = i1 + 1 | 0;
   i2 = i2 + 2 | 0;
  }
 }
 if ((i2 | 0) == 6) {
  HEAP32[i7 >> 2] = i1;
  return i3 | 0;
 }
 return 0;
}

function __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0;
 if ((i1 | 0) == (i3 | 0)) return;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i2, HEAP32[i1 >> 2] | 0);
  i5 = i2 + 16 | 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i5, HEAP32[i1 + 16 >> 2] | 0);
  i5 = i2 + 32 | 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  HEAP32[i5 + 12 >> 2] = 0;
  __ZN6String3SetEPKc(i5, HEAP32[i1 + 32 >> 2] | 0);
  i2 = (HEAP32[i4 + 4 >> 2] | 0) + 48 | 0;
  HEAP32[i4 + 4 >> 2] = i2;
  i1 = i1 + 48 | 0;
 } while ((i1 | 0) != (i3 | 0));
 return;
}

function __ZN5Image11ShallowCopyEv(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = HEAP32[i1 >> 2] | 0;
 i7 = HEAP32[i1 + 4 >> 2] | 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 i6 = HEAP32[i1 + 12 >> 2] | 0;
 i1 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP8[i4 + 8 >> 0] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 12 + 4 >> 2] = 0;
 HEAP32[i4 + 12 + 8 >> 2] = 0;
 HEAP32[i4 + 12 + 12 >> 2] = 0;
 HEAP32[i4 + 12 + 16 >> 2] = 0;
 HEAP32[i4 + 12 + 20 >> 2] = 0;
 if (__ZN5Image9CreateNewEPvjbiii13TextureFormat(i4, i8, i7, 0, i2, i3, i6, i1) | 0) {
  STACKTOP = i5;
  return;
 }
 i8 = __Z21TextureFormatToString13TextureFormat(i1) | 0;
 HEAP32[i5 >> 2] = i2;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i8;
 __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303292, i5);
 STACKTOP = i5;
 return;
}

function _ps_parser_to_fixed_array(i6, i5, i8, i7) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[i6 + 8 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i4 >>> 0) {
  i2 = i1;
  i3 = i1;
  while (1) {
   switch (HEAP8[i3 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i1 = i2;
     break;
    }
   case 37:
    {
     i2 = 37;
     i1 = i3;
     L5 : while (1) {
      switch (i2 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i4 >>> 0) break;
      i2 = HEAP8[i1 >> 0] | 0;
     }
     break;
    }
   default:
    {
     i1 = i2;
     break L1;
    }
   }
   i3 = i1 + 1 | 0;
   i1 = i3;
   if (i3 >>> 0 >= i4 >>> 0) break L1; else i2 = i1;
  }
 } while (0);
 HEAP32[i6 >> 2] = i1;
 return _ps_tofixedarray(i6, i4, i5, i8, i7) | 0;
}

function _FT_Get_Advance(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0;
 if (!i2) {
  i5 = 35;
  return i5 | 0;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) >>> 0 <= i3 >>> 0) {
  i5 = 16;
  return i5 | 0;
 }
 i1 = HEAP32[(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 12 >> 2] | 0) + 92 >> 2] | 0;
 L7 : do if ((i1 | 0) != 0 ? (i4 & 3 | 0) != 0 | (i4 & 983040 | 0) == 65536 : 0) {
  i1 = FUNCTION_TABLE_iiiiii[i1 & 63](i2, i3, 1, i4, i5) | 0;
  switch (i1 | 0) {
  case 7:
   break L7;
  case 0:
   break;
  default:
   {
    i5 = i1;
    return i5 | 0;
   }
  }
  if (i4 & 1) {
   i5 = 0;
   return i5 | 0;
  }
  i1 = HEAP32[i2 + 88 >> 2] | 0;
  if (!i1) {
   i5 = 36;
   return i5 | 0;
  }
  HEAP32[i5 >> 2] = _FT_MulDiv(HEAP32[i5 >> 2] | 0, HEAP32[((i4 & 16 | 0) == 0 ? i1 + 16 | 0 : i1 + 20 | 0) >> 2] | 0, 64) | 0;
  i5 = 0;
  return i5 | 0;
 } while (0);
 i5 = _FT_Get_Advances(i2, i3, 1, i4, i5) | 0;
 return i5 | 0;
}

function _FT_Matrix_Multiply_Scaled(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) return;
 i4 = HEAP32[i1 >> 2] | 0;
 i10 = HEAP32[i2 >> 2] | 0;
 i5 = _FT_MulDiv(i4, i10, i3 << 16) | 0;
 i9 = HEAP32[i1 + 4 >> 2] | 0;
 i11 = HEAP32[i2 + 8 >> 2] | 0;
 i5 = (_FT_MulDiv(i9, i11, i3 << 16) | 0) + i5 | 0;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 i4 = _FT_MulDiv(i4, i6, i3 << 16) | 0;
 i7 = HEAP32[i2 + 12 >> 2] | 0;
 i4 = (_FT_MulDiv(i9, i7, i3 << 16) | 0) + i4 | 0;
 i9 = HEAP32[i1 + 8 >> 2] | 0;
 i10 = _FT_MulDiv(i9, i10, i3 << 16) | 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i1 = (_FT_MulDiv(i8, i11, i3 << 16) | 0) + i10 | 0;
 i6 = _FT_MulDiv(i9, i6, i3 << 16) | 0;
 i3 = (_FT_MulDiv(i8, i7, i3 << 16) | 0) + i6 | 0;
 HEAP32[i2 >> 2] = i5;
 HEAP32[i2 + 4 >> 2] = i4;
 HEAP32[i2 + 8 >> 2] = i1;
 HEAP32[i2 + 12 >> 2] = i3;
 return;
}

function ___shgetc(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i4 = HEAP32[i5 + 104 >> 2] | 0;
 if ((i4 | 0) != 0 ? (HEAP32[i5 + 108 >> 2] | 0) >= (i4 | 0) : 0) i6 = 4; else {
  i1 = ___uflow(i5) | 0;
  if ((i1 | 0) >= 0) {
   i2 = HEAP32[i5 + 104 >> 2] | 0;
   if (i2) {
    i3 = HEAP32[i5 + 8 >> 2] | 0;
    i4 = HEAP32[i5 + 4 >> 2] | 0;
    i2 = i2 - (HEAP32[i5 + 108 >> 2] | 0) + -1 | 0;
    if ((i3 - i4 | 0) > (i2 | 0)) HEAP32[i5 + 100 >> 2] = i4 + i2; else {
     i2 = i3;
     i6 = 9;
    }
   } else {
    i3 = HEAP32[i5 + 8 >> 2] | 0;
    i2 = i3;
    i6 = 9;
   }
   if ((i6 | 0) == 9) HEAP32[i5 + 100 >> 2] = i2;
   i2 = HEAP32[i5 + 4 >> 2] | 0;
   if (i3) HEAP32[i5 + 108 >> 2] = i3 + 1 - i2 + (HEAP32[i5 + 108 >> 2] | 0);
   if ((HEAPU8[i2 + -1 >> 0] | 0 | 0) != (i1 | 0)) HEAP8[i2 + -1 >> 0] = i1;
  } else i6 = 4;
 }
 if ((i6 | 0) == 4) {
  HEAP32[i5 + 100 >> 2] = 0;
  i1 = -1;
 }
 return i1 | 0;
}

function _Move_CVT_Stretched(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i2 + 256 >> 2] | 0;
 do if (!i1) {
  if (!(HEAP16[i2 + 296 >> 1] | 0)) {
   i1 = HEAP32[i2 + 244 >> 2] | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  }
  i1 = HEAP16[i2 + 294 >> 1] | 0;
  if (!(i1 << 16 >> 16)) {
   i1 = HEAP32[i2 + 248 >> 2] | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  } else {
   i6 = _FT_MulDiv(i1 << 16 >> 16, HEAP32[i2 + 244 >> 2] | 0, 16384) | 0;
   i1 = _FT_MulDiv(HEAP16[i2 + 296 >> 1] | 0, HEAP32[i2 + 248 >> 2] | 0, 16384) | 0;
   HEAP32[i5 >> 2] = i6;
   HEAP32[i5 + 4 >> 2] = i1;
   i1 = _FT_Vector_Length(i5) | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  }
 } while (0);
 i4 = _FT_DivFix(i4, i1) | 0;
 i6 = (HEAP32[i2 + 384 >> 2] | 0) + (i3 << 2) | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i4;
 STACKTOP = i5;
 return;
}

function _pfr_cmap_char_next(i8, i10) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i5 = HEAP32[i8 + 16 >> 2] | 0;
 do if (i5) {
  i6 = HEAP32[i8 + 20 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  L3 : while (1) {
   i2 = i2 + 1 | 0;
   i4 = i5;
   i1 = 0;
   while (1) {
    i7 = ((i4 - i1 | 0) >>> 1) + i1 | 0;
    i3 = HEAP32[i6 + (i7 << 4) >> 2] | 0;
    if ((i3 | 0) == (i2 | 0)) break;
    i1 = i3 >>> 0 < i2 >>> 0 ? i7 + 1 | 0 : i1;
    i4 = i3 >>> 0 < i2 >>> 0 ? i4 : i7;
    if (i4 >>> 0 <= i1 >>> 0) break L3;
   }
   if (i7) {
    i9 = 7;
    break;
   }
  }
  if ((i9 | 0) == 7) {
   i1 = i7 + 1 | 0;
   break;
  }
  if (!((i1 | 0) == 0 | i1 >>> 0 >= i5 >>> 0)) {
   i2 = HEAP32[(HEAP32[i8 + 20 >> 2] | 0) + (i1 << 4) >> 2] | 0;
   i1 = i1 + 1 | 0;
  } else {
   i2 = 0;
   i1 = 0;
  }
 } else {
  i2 = 0;
  i1 = 0;
 } while (0);
 HEAP32[i10 >> 2] = i2;
 return i1 | 0;
}

function __ZN4math7FrustumC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = HEAP32[160];
 HEAP32[i1 + 12 + 4 >> 2] = HEAP32[161];
 HEAP32[i1 + 12 + 8 >> 2] = HEAP32[162];
 HEAP32[i1 + 24 >> 2] = HEAP32[160];
 HEAP32[i1 + 24 + 4 >> 2] = HEAP32[161];
 HEAP32[i1 + 24 + 8 >> 2] = HEAP32[162];
 HEAP32[i1 + 36 >> 2] = HEAP32[160];
 HEAP32[i1 + 36 + 4 >> 2] = HEAP32[161];
 HEAP32[i1 + 36 + 8 >> 2] = HEAP32[162];
 HEAPF32[i1 + 48 >> 2] = Math_fround(nan);
 HEAPF32[i1 + 52 >> 2] = Math_fround(nan);
 i2 = i1 + 64 | 0;
 i3 = 676;
 i4 = i2 + 48 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 i2 = i1 + 176 | 0;
 i3 = 740;
 i4 = i2 + 64 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
  i2 = i2 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP32[i1 + 4 >> 2] = 1;
 HEAP32[i1 + 8 >> 2] = 2;
 return;
}

function __ZN4math8float4x417OpenGLPerspProjLHEffff(i1, f4, f2, f3, f5) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 var f6 = f0;
 f6 = Math_fround(f4 * Math_fround(2.0));
 HEAPF32[i1 >> 2] = Math_fround(f6 / f3);
 f5 = Math_fround(f6 / f5);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = f5;
 f5 = Math_fround(Math_fround(f4 + f2) / Math_fround(f2 - f4));
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = f5;
 HEAPF32[i1 + 44 >> 2] = Math_fround(Math_fround(f6 * f2) / Math_fround(f4 - f2));
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 56 >> 2] = Math_fround(1.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(0.0);
 return;
}

function _bdf_cmap_char_next(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i5 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 L1 : do if (!i6) i1 = 0; else {
  i4 = i6;
  i1 = 0;
  while (1) {
   i3 = (i1 + i4 | 0) >>> 1;
   i2 = HEAP32[i7 + (i3 << 3) >> 2] | 0;
   if ((i5 | 0) == (i2 | 0)) break;
   i4 = i5 >>> 0 < i2 >>> 0 ? i3 : i4;
   i1 = i5 >>> 0 < i2 >>> 0 ? i1 : i3 + 1 | 0;
   if (i1 >>> 0 >= i4 >>> 0) break L1;
  }
  i6 = i5;
  i7 = (HEAPU16[i7 + (i3 << 3) + 4 >> 1] | 0) + 1 | 0;
  HEAP32[i8 >> 2] = i6;
  i8 = i7 & 65535;
  return i8 | 0;
 } while (0);
 if (i1 >>> 0 >= i6 >>> 0) {
  i6 = 0;
  i7 = 0;
  HEAP32[i8 >> 2] = i6;
  i8 = i7 & 65535;
  return i8 | 0;
 }
 i6 = HEAP32[i7 + (i1 << 3) >> 2] | 0;
 i7 = (HEAPU16[i7 + (i1 << 3) + 4 >> 1] | 0) + 1 | 0;
 HEAP32[i8 >> 2] = i6;
 i8 = i7 & 65535;
 return i8 | 0;
}

function __ZNK4math6float314ScaledToLengthEf(i6, i1, f7) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 f7 = Math_fround(f7);
 var f2 = f0, f3 = f0, f4 = f0, f5 = f0;
 HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 f2 = Math_fround(HEAPF32[i6 >> 2]);
 f5 = Math_fround(f2 * f2);
 f3 = Math_fround(HEAPF32[i6 + 4 >> 2]);
 f5 = Math_fround(f5 + Math_fround(f3 * f3));
 f4 = Math_fround(HEAPF32[i6 + 8 >> 2]);
 f5 = Math_fround(f5 + Math_fround(f4 * f4));
 if (f5 < Math_fround(9.99999997e-007)) {
  HEAPF32[i6 >> 2] = f7;
  HEAPF32[i6 + 4 >> 2] = Math_fround(0.0);
  f7 = Math_fround(0.0);
  HEAPF32[i6 + 8 >> 2] = f7;
  return;
 } else {
  f7 = Math_fround(f7 / Math_fround(Math_sqrt(Math_fround(f5))));
  HEAPF32[i6 >> 2] = Math_fround(f2 * f7);
  HEAPF32[i6 + 4 >> 2] = Math_fround(f3 * f7);
  f7 = Math_fround(f4 * f7);
  HEAPF32[i6 + 8 >> 2] = f7;
  return;
 }
}

function __ZN4math8float4x417OpenGLPerspProjRHEffff(i1, f4, f2, f3, f5) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 var f6 = f0;
 f6 = Math_fround(f4 * Math_fround(2.0));
 HEAPF32[i1 >> 2] = Math_fround(f6 / f3);
 f5 = Math_fround(f6 / f5);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = f5;
 f5 = Math_fround(f4 - f2);
 f4 = Math_fround(Math_fround(f4 + f2) / f5);
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = f4;
 HEAPF32[i1 + 44 >> 2] = Math_fround(Math_fround(f6 * f2) / f5);
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 56 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(0.0);
 return;
}

function _T1_Set_MM_Blend(i1, i2, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = HEAP32[i1 + 532 >> 2] | 0;
 if (!i6) {
  i7 = 6;
  return i7 | 0;
 }
 if ((HEAP32[i6 + 4 >> 2] | 0) != (i2 | 0)) {
  i7 = 6;
  return i7 | 0;
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 }
 i5 = 0;
 do {
  if (!i2) {
   i2 = 0;
   i3 = 65536;
  } else {
   i4 = 0;
   i1 = 65536;
   while (1) {
    i3 = HEAP32[i7 + (i4 << 2) >> 2] | 0;
    i3 = (i3 | 0) < 0 ? 0 : i3;
    i3 = (i3 | 0) > 65536 ? 65536 : i3;
    i3 = _FT_MulFix(i1, (1 << i4 & i5 | 0) == 0 ? 65536 - i3 | 0 : i3) | 0;
    i4 = i4 + 1 | 0;
    i2 = HEAP32[i6 + 4 >> 2] | 0;
    if (i4 >>> 0 >= i2 >>> 0) break; else i1 = i3;
   }
   i1 = HEAP32[i6 >> 2] | 0;
  }
  HEAP32[(HEAP32[i6 + 136 >> 2] | 0) + (i5 << 2) >> 2] = i3;
  i5 = i5 + 1 | 0;
 } while (i5 >>> 0 < i1 >>> 0);
 i1 = 0;
 return i1 | 0;
}

function __ZNK6StringplEc(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 __ZN6String3SetEPKc(i4, HEAP32[i1 >> 2] | 0);
 i2 = HEAP32[i4 + 8 >> 2] | 0;
 if ((HEAP32[i4 + 12 >> 2] | 0) >= (i2 + 2 | 0)) {
  i1 = HEAP32[i4 >> 2] | 0;
  i3 = i2 + 1 | 0;
  HEAP32[i4 + 8 >> 2] = i3;
  i4 = i1 + i2 | 0;
  HEAP8[i4 >> 0] = i5;
  i5 = i1 + i3 | 0;
  HEAP8[i5 >> 0] = 0;
  return;
 }
 i3 = __Znaj((i2 + 2 | 0) > -1 ? i2 + 2 | 0 : -1) | 0;
 HEAP32[i4 + 12 >> 2] = i2 + 2;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  if ((i2 | 0) > -2) HEAP8[i3 >> 0] = 0;
 } else {
  _memcpy(i3 | 0, i1 | 0, i2 + 1 | 0) | 0;
  __ZdaPv(i1);
 }
 HEAP32[i4 >> 2] = i3;
 i1 = i3;
 i3 = i2 + 1 | 0;
 HEAP32[i4 + 8 >> 2] = i3;
 i4 = i1 + i2 | 0;
 HEAP8[i4 >> 0] = i5;
 i5 = i1 + i3 | 0;
 HEAP8[i5 >> 0] = 0;
 return;
}

function _FT_Done_Size(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i6) {
  i6 = 36;
  return i6 | 0;
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  i6 = 35;
  return i6 | 0;
 }
 i4 = HEAP32[i1 + 96 >> 2] | 0;
 if (!i4) {
  i6 = 34;
  return i6 | 0;
 }
 i5 = HEAP32[i4 + 8 >> 2] | 0;
 i3 = _FT_List_Find(i1 + 108 | 0, i6) | 0;
 if (!i3) {
  i6 = 36;
  return i6 | 0;
 }
 _FT_List_Remove(i1 + 108 | 0, i3);
 _ft_mem_free(i5, i3);
 if ((HEAP32[i1 + 88 >> 2] | 0) == (i6 | 0) ? (HEAP32[i1 + 88 >> 2] = 0, i2 = HEAP32[i1 + 108 >> 2] | 0, (i2 | 0) != 0) : 0) HEAP32[i1 + 88 >> 2] = HEAP32[i2 + 8 >> 2];
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i6);
 i1 = HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + 60 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i6);
 _ft_mem_free(i5, HEAP32[i6 + 40 >> 2] | 0);
 HEAP32[i6 + 40 >> 2] = 0;
 _ft_mem_free(i5, i6);
 i6 = 0;
 return i6 | 0;
}

function __ZNK4math7Frustum18ComputeWorldMatrixEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((HEAP32[i2 + 8 >> 2] | 0) == 2) __ZNK4math6float35CrossERKS0_(i3 + 12 | 0, i2 + 24 | 0, i2 + 36 | 0); else __ZNK4math6float35CrossERKS0_(i3 + 12 | 0, i2 + 36 | 0, i2 + 24 | 0);
 __ZNK4math6float310NormalizedEv(i3 + 24 | 0, i3 + 12 | 0);
 __ZN4math8float3x46SetColEiRKNS_6float3E(i1, 0, i3 + 24 | 0);
 __ZN4math8float3x46SetColEiRKNS_6float3E(i1, 1, i2 + 36 | 0);
 if ((HEAP32[i2 + 8 >> 2] | 0) == 2) {
  __ZNK4math6float3ngEv(i3, i2 + 24 | 0);
  __ZN4math8float3x46SetColEiRKNS_6float3E(i1, 2, i3);
  __ZN4math8float3x46SetColEiRKNS_6float3E(i1, 3, i2 + 12 | 0);
  STACKTOP = i3;
  return;
 } else {
  __ZN4math8float3x46SetColEiRKNS_6float3E(i1, 2, i2 + 24 | 0);
  __ZN4math8float3x46SetColEiRKNS_6float3E(i1, 3, i2 + 12 | 0);
  STACKTOP = i3;
  return;
 }
}

function __ZNK4math6float310NormalizedEv(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var f2 = f0, f3 = f0, f4 = f0, f5 = f0;
 HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i6 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 f2 = Math_fround(HEAPF32[i6 >> 2]);
 f3 = Math_fround(f2 * f2);
 f4 = Math_fround(HEAPF32[i6 + 4 >> 2]);
 f3 = Math_fround(f3 + Math_fround(f4 * f4));
 f5 = Math_fround(HEAPF32[i6 + 8 >> 2]);
 f3 = Math_fround(Math_sqrt(Math_fround(f3 + Math_fround(f5 * f5))));
 if (f3 > Math_fround(9.99999997e-007)) {
  f3 = Math_fround(Math_fround(1.0) / f3);
  HEAPF32[i6 >> 2] = Math_fround(f2 * f3);
  HEAPF32[i6 + 4 >> 2] = Math_fround(f4 * f3);
  f5 = Math_fround(f5 * f3);
  HEAPF32[i6 + 8 >> 2] = f5;
  return;
 } else {
  HEAPF32[i6 >> 2] = Math_fround(1.0);
  HEAPF32[i6 + 4 >> 2] = Math_fround(0.0);
  f5 = Math_fround(0.0);
  HEAPF32[i6 + 8 >> 2] = f5;
  return;
 }
}

function __ZN4math8float4x414D3DPerspProjLHEffff(i1, f4, f2, f3, f5) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 var f6 = f0;
 f6 = Math_fround(f4 * Math_fround(2.0));
 HEAPF32[i1 >> 2] = Math_fround(f6 / f3);
 f5 = Math_fround(f6 / f5);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = f5;
 f5 = Math_fround(f2 / Math_fround(f2 - f4));
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = f5;
 HEAPF32[i1 + 44 >> 2] = Math_fround(Math_fround(f4 * f2) / Math_fround(f4 - f2));
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 56 >> 2] = Math_fround(1.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(0.0);
 return;
}

function __ZN4math8float4x414D3DPerspProjRHEffff(i1, f4, f2, f3, f5) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 var f6 = f0;
 f6 = Math_fround(f4 * Math_fround(2.0));
 HEAPF32[i1 >> 2] = Math_fround(f6 / f3);
 f5 = Math_fround(f6 / f5);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = f5;
 f5 = Math_fround(f4 - f2);
 f3 = Math_fround(f2 / f5);
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = f3;
 HEAPF32[i1 + 44 >> 2] = Math_fround(Math_fround(f4 * f2) / f5);
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 56 >> 2] = Math_fround(-1.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(0.0);
 return;
}

function _FT_GlyphLoader_Prepare(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 HEAP16[i2 + 58 >> 1] = 0;
 HEAP16[i2 + 56 >> 1] = 0;
 HEAP32[i2 + 84 >> 2] = 0;
 i1 = HEAP16[i2 + 22 >> 1] | 0;
 HEAP32[i2 + 60 >> 2] = (HEAP32[i2 + 24 >> 2] | 0) + (i1 << 3);
 HEAP32[i2 + 64 >> 2] = (HEAP32[i2 + 28 >> 2] | 0) + i1;
 HEAP32[i2 + 68 >> 2] = (HEAP32[i2 + 32 >> 2] | 0) + (HEAP16[i2 + 20 >> 1] << 1);
 if (!(HEAP8[i2 + 16 >> 0] | 0)) {
  i3 = i2 + 52 | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i1 = i2 + 48 | 0;
  i1 = HEAP32[i1 >> 2] | 0;
  i1 = i3 + (i1 << 5) | 0;
  i2 = i2 + 88 | 0;
  HEAP32[i2 >> 2] = i1;
  return;
 }
 HEAP32[i2 + 76 >> 2] = (HEAP32[i2 + 40 >> 2] | 0) + (i1 << 3);
 HEAP32[i2 + 80 >> 2] = (HEAP32[i2 + 44 >> 2] | 0) + (i1 << 3);
 i3 = i2 + 52 | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 i1 = i2 + 48 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i1 = i3 + (i1 << 5) | 0;
 i3 = i2 + 88 | 0;
 HEAP32[i3 >> 2] = i1;
 return;
}

function _af_indic_metrics_init(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = HEAP32[i6 + 92 >> 2] | 0;
 HEAP32[i7 + 36 >> 2] = HEAPU16[i6 + 68 >> 1];
 if (_FT_Select_Charmap(i6, 1970170211) | 0) {
  HEAP32[i6 + 92 >> 2] = 0;
  _FT_Set_Charmap(i6, i5) | 0;
  STACKTOP = i8;
  return 0;
 }
 _af_cjk_metrics_init_widths(i7, i6);
 i4 = 48;
 i3 = 0;
 i2 = 0;
 while (1) {
  i1 = _FT_Get_Char_Index(i6, i4) | 0;
  if ((i1 | 0) != 0 ? (_FT_Get_Advance(i6, i1, 2051, i8) | 0) == 0 : 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   if (i2 << 24 >> 24) if ((i1 | 0) == (i3 | 0)) i1 = i3; else {
    i1 = 0;
    break;
   } else i2 = 1;
  } else i1 = i3;
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 >= 58) {
   i1 = 1;
   break;
  } else i3 = i1;
 }
 HEAP8[i7 + 32 >> 0] = i1;
 _FT_Set_Charmap(i6, i5) | 0;
 STACKTOP = i8;
 return 0;
}

function _fnt_font_load(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = _FT_Stream_Seek(i3, HEAP32[i2 >> 2] | 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i1 = _FT_Stream_ReadFields(i3, 284952, i2 + 4 | 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i1 = HEAP16[i2 + 4 >> 1] | 0;
 switch (i1 << 16 >> 16) {
 case 768:
 case 512:
  break;
 default:
  {
   i3 = 2;
   return i3 | 0;
  }
 }
 if ((HEAP32[i2 + 8 >> 2] | 0) >>> 0 < (i1 << 16 >> 16 == 768 ? 148 : 118) >>> 0) {
  i3 = 2;
  return i3 | 0;
 }
 if (i1 << 16 >> 16 == 512) {
  HEAP32[i2 + 132 >> 2] = 0;
  HEAP32[i2 + 132 + 4 >> 2] = 0;
  HEAP32[i2 + 132 + 8 >> 2] = 0;
 }
 if (HEAP16[i2 + 72 >> 1] & 1) {
  i3 = 2;
  return i3 | 0;
 }
 i1 = _FT_Stream_Seek(i3, HEAP32[i2 >> 2] | 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i3 = _FT_Stream_ExtractFrame(i3, HEAP32[i2 + 8 >> 2] | 0, i2 + 160 | 0) | 0;
 return i3 | 0;
}

function __Z20Browser_OnMouseEventiPK20EmscriptenMouseEventPv(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if (!i3) {
  STACKTOP = i4;
  return 0;
 }
 HEAP32[i4 >> 2] = 3;
 HEAP32[i4 + 4 >> 2] = 1;
 HEAP32[i4 + 8 >> 2] = (HEAP32[i2 + 60 >> 2] | 0) * 100;
 HEAP32[i4 + 12 >> 2] = (HEAP32[i2 + 64 >> 2] | 0) * 100;
 HEAP32[i4 + 20 >> 2] = (HEAPU16[i2 + 40 >> 1] | 0) + 1;
 switch (i1 | 0) {
 case 4:
 case 5:
  {
   HEAP32[i4 + 24 >> 2] = 1;
   break;
  }
 case 6:
  {
   HEAP32[i4 + 24 >> 2] = 3;
   break;
  }
 default:
  {
   HEAP32[i4 + 24 >> 2] = 2;
   HEAP32[i4 + 20 >> 2] = 0;
  }
 }
 HEAP32[i4 + 16 >> 2] = 0;
 HEAPF32[i4 + 336 >> 2] = Math_fround(0.0);
 HEAPF32[i4 + 332 >> 2] = Math_fround(0.0);
 HEAPF32[i4 + 328 >> 2] = Math_fround(0.0);
 __ZN5Input15OnNewInputEventER10InputEvent(i3, i4);
 STACKTOP = i4;
 return 0;
}

function _ps_parser_to_fixed(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[i5 + 8 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i4 >>> 0) {
  i2 = i1;
  i3 = i1;
  while (1) {
   switch (HEAP8[i3 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i1 = i2;
     break;
    }
   case 37:
    {
     i2 = 37;
     i1 = i3;
     L5 : while (1) {
      switch (i2 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i4 >>> 0) break;
      i2 = HEAP8[i1 >> 0] | 0;
     }
     break;
    }
   default:
    {
     i1 = i2;
     break L1;
    }
   }
   i3 = i1 + 1 | 0;
   i1 = i3;
   if (i3 >>> 0 >= i4 >>> 0) break L1; else i2 = i1;
  }
 } while (0);
 HEAP32[i5 >> 2] = i1;
 return _PS_Conv_ToFixed(i5, i4, i6) | 0;
}

function __ZN4math8float4x417OpenGLOrthoProjLHEffff(i1, f4, f2, f3, f5) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 HEAPF32[i1 >> 2] = Math_fround(Math_fround(2.0) / f3);
 f5 = Math_fround(Math_fround(2.0) / f5);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = f5;
 f5 = Math_fround(Math_fround(2.0) / Math_fround(f2 - f4));
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = f5;
 HEAPF32[i1 + 44 >> 2] = Math_fround(Math_fround(f4 + f2) / Math_fround(f4 - f2));
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 56 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 return;
}

function _Write_CVT_Stretched(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i2 + 256 >> 2] | 0;
 do if (!i1) {
  if (!(HEAP16[i2 + 296 >> 1] | 0)) {
   i1 = HEAP32[i2 + 244 >> 2] | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  }
  i1 = HEAP16[i2 + 294 >> 1] | 0;
  if (!(i1 << 16 >> 16)) {
   i1 = HEAP32[i2 + 248 >> 2] | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  } else {
   i6 = _FT_MulDiv(i1 << 16 >> 16, HEAP32[i2 + 244 >> 2] | 0, 16384) | 0;
   i1 = _FT_MulDiv(HEAP16[i2 + 296 >> 1] | 0, HEAP32[i2 + 248 >> 2] | 0, 16384) | 0;
   HEAP32[i5 >> 2] = i6;
   HEAP32[i5 + 4 >> 2] = i1;
   i1 = _FT_Vector_Length(i5) | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  }
 } while (0);
 i6 = _FT_DivFix(i4, i1) | 0;
 HEAP32[(HEAP32[i2 + 384 >> 2] | 0) + (i3 << 2) >> 2] = i6;
 STACKTOP = i5;
 return;
}

function __ZN4math6float313ScaleToLengthEf(i6, f5) {
 i6 = i6 | 0;
 f5 = Math_fround(f5);
 var f1 = f0, f2 = f0, f3 = f0, f4 = f0, f7 = f0;
 f1 = Math_fround(HEAPF32[i6 >> 2]);
 f4 = Math_fround(f1 * f1);
 f2 = Math_fround(HEAPF32[i6 + 4 >> 2]);
 f4 = Math_fround(f4 + Math_fround(f2 * f2));
 f3 = Math_fround(HEAPF32[i6 + 8 >> 2]);
 f4 = Math_fround(f4 + Math_fround(f3 * f3));
 if (f4 < Math_fround(9.99999997e-007)) {
  HEAPF32[i6 >> 2] = f5;
  HEAPF32[i6 + 4 >> 2] = Math_fround(0.0);
  f5 = Math_fround(0.0);
  f4 = Math_fround(0.0);
  HEAPF32[i6 + 8 >> 2] = f4;
  return Math_fround(f5);
 } else {
  f7 = Math_fround(Math_sqrt(Math_fround(f4)));
  f4 = Math_fround(f5 / f7);
  HEAPF32[i6 >> 2] = Math_fround(f1 * f4);
  HEAPF32[i6 + 4 >> 2] = Math_fround(f4 * f2);
  f5 = f7;
  f4 = Math_fround(f4 * f3);
  HEAPF32[i6 + 8 >> 2] = f4;
  return Math_fround(f5);
 }
 return Math_fround(0);
}

function __ZN6Shader19UniformBufferObjectD2Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 + 32 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i6 + 36 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i5 = i2 + -48 | 0;
    HEAP32[i6 + 36 >> 2] = i5;
    i3 = i2 + -16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) __ZdaPv(i4);
    HEAP32[i3 >> 2] = 0;
    i2 = i2 + -32 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (i3) __ZdaPv(i3);
    HEAP32[i2 >> 2] = 0;
    i2 = HEAP32[i5 >> 2] | 0;
    if (i2) __ZdaPv(i2);
    HEAP32[i5 >> 2] = 0;
    i2 = HEAP32[i6 + 36 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i6 + 32 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i6 + 16 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i6 + 16 >> 2] = 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  HEAP32[i6 >> 2] = 0;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i6 >> 2] = 0;
 return;
}

function _ps_table_new(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 + 32 >> 2] = i2;
 HEAP32[i3 + 24 >> 2] = _ft_mem_realloc(i2, 4, 0, i1, 0, i4) | 0;
 if ((HEAP32[i4 >> 2] | 0) == 0 ? (HEAP32[i3 + 28 >> 2] = _ft_mem_realloc(i2, 4, 0, i1, 0, i4) | 0, (HEAP32[i4 >> 2] | 0) == 0) : 0) {
  HEAP32[i3 + 16 >> 2] = i1;
  HEAP32[i3 + 12 >> 2] = -559038737;
  HEAP32[i3 + 20 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 36 >> 2] = HEAP32[70104];
  HEAP32[i3 + 36 + 4 >> 2] = HEAP32[70105];
  HEAP32[i3 + 36 + 8 >> 2] = HEAP32[70106];
  HEAP32[i3 + 36 + 12 >> 2] = HEAP32[70107];
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _ft_mem_free(i2, HEAP32[i3 + 24 >> 2] | 0);
 HEAP32[i3 + 24 >> 2] = 0;
 i3 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZN4math8float4x417OpenGLOrthoProjRHEffff(i1, f4, f2, f3, f5) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 HEAPF32[i1 >> 2] = Math_fround(Math_fround(2.0) / f3);
 f5 = Math_fround(Math_fround(2.0) / f5);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = f5;
 f5 = Math_fround(f4 - f2);
 f3 = Math_fround(Math_fround(2.0) / f5);
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = f3;
 HEAPF32[i1 + 44 >> 2] = Math_fround(Math_fround(f4 + f2) / f5);
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 56 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 return;
}

function _Read_CVT_Stretched(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[(HEAP32[i3 + 384 >> 2] | 0) + (i1 << 2) >> 2] | 0;
 i1 = HEAP32[i3 + 256 >> 2] | 0;
 do if (!i1) {
  if (!(HEAP16[i3 + 296 >> 1] | 0)) {
   i1 = HEAP32[i3 + 244 >> 2] | 0;
   HEAP32[i3 + 256 >> 2] = i1;
   break;
  }
  i1 = HEAP16[i3 + 294 >> 1] | 0;
  if (!(i1 << 16 >> 16)) {
   i1 = HEAP32[i3 + 248 >> 2] | 0;
   HEAP32[i3 + 256 >> 2] = i1;
   break;
  } else {
   i5 = _FT_MulDiv(i1 << 16 >> 16, HEAP32[i3 + 244 >> 2] | 0, 16384) | 0;
   i1 = _FT_MulDiv(HEAP16[i3 + 296 >> 1] | 0, HEAP32[i3 + 248 >> 2] | 0, 16384) | 0;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i1;
   i1 = _FT_Vector_Length(i4) | 0;
   HEAP32[i3 + 256 >> 2] = i1;
   break;
  }
 } while (0);
 i5 = _FT_MulFix(i2, i1) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i3, i5, i4, i2, i1) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[i5 + 53 >> 0] = 1;
 do if ((HEAP32[i5 + 4 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i5 + 52 >> 0] = 1;
  i2 = HEAP32[i5 + 16 >> 2] | 0;
  if (!i2) {
   HEAP32[i5 + 16 >> 2] = i4;
   HEAP32[i5 + 24 >> 2] = i1;
   HEAP32[i5 + 36 >> 2] = 1;
   if (!((i1 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  if ((i2 | 0) != (i4 | 0)) {
   HEAP32[i5 + 36 >> 2] = (HEAP32[i5 + 36 >> 2] | 0) + 1;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  i2 = HEAP32[i5 + 24 >> 2] | 0;
  if ((i2 | 0) == 2) HEAP32[i5 + 24 >> 2] = i1; else i1 = i2;
  if ((i1 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0) HEAP8[i5 + 54 >> 0] = 1;
 } while (0);
 return;
}

function _FT_Stream_ReadULongLE(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 do if ((i1 + 3 | 0) >>> 0 < (HEAP32[i4 + 4 >> 2] | 0) >>> 0) {
  i2 = HEAP32[i4 + 20 >> 2] | 0;
  if (!i2) {
   i2 = (HEAP32[i4 >> 2] | 0) + i1 | 0;
   if (!i2) {
    i3 = i1;
    i1 = 0;
   } else i5 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i2 & 63](i4, i1, i6, 4) | 0) != 4) break;
   i1 = HEAP32[i4 + 8 >> 2] | 0;
   i2 = i6;
   i5 = 6;
  }
  if ((i5 | 0) == 6) {
   i3 = i1;
   i1 = (HEAPU8[i2 + 2 >> 0] | 0) << 16 | (HEAPU8[i2 + 3 >> 0] | 0) << 24 | (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0);
  }
  HEAP32[i4 + 8 >> 2] = i3 + 4;
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 85;
 i5 = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _FT_GlyphLoader_Done(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i2) return;
 i1 = HEAP32[i2 >> 2] | 0;
 _ft_mem_free(i1, HEAP32[i2 + 24 >> 2] | 0);
 HEAP32[i2 + 24 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 28 >> 2] | 0);
 HEAP32[i2 + 28 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 32 >> 2] | 0);
 HEAP32[i2 + 32 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 40 >> 2] | 0);
 HEAP32[i2 + 40 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 52 >> 2] | 0);
 HEAP32[i2 + 52 >> 2] = 0;
 HEAP32[i2 + 44 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP16[i2 + 22 >> 1] = 0;
 HEAP16[i2 + 20 >> 1] = 0;
 HEAP32[i2 + 48 >> 2] = 0;
 i3 = i2 + 56 | 0;
 i4 = i2 + 20 | 0;
 i5 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i3 = i3 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i3 | 0) < (i5 | 0));
 _ft_mem_free(i1, i2);
 return;
}

function _FT_Stream_ReadULong(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 do if ((i1 + 3 | 0) >>> 0 < (HEAP32[i4 + 4 >> 2] | 0) >>> 0) {
  i2 = HEAP32[i4 + 20 >> 2] | 0;
  if (!i2) {
   i2 = (HEAP32[i4 >> 2] | 0) + i1 | 0;
   if (!i2) {
    i3 = i1;
    i1 = 0;
   } else i5 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i2 & 63](i4, i1, i6, 4) | 0) != 4) break;
   i1 = HEAP32[i4 + 8 >> 2] | 0;
   i2 = i6;
   i5 = 6;
  }
  if ((i5 | 0) == 6) {
   i3 = i1;
   i1 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
  }
  HEAP32[i4 + 8 >> 2] = i3 + 4;
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 85;
 i5 = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _tt_cmap6_validate(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 if ((i3 + 10 | 0) >>> 0 > (HEAP32[i4 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i4, 8);
 i1 = (HEAPU8[i3 + 2 >> 0] | 0) << 8 | (HEAPU8[i3 + 3 >> 0] | 0);
 i2 = (HEAPU8[i3 + 8 >> 0] | 0) << 8 | (HEAPU8[i3 + 9 >> 0] | 0);
 if ((i3 + i1 | 0) >>> 0 > (HEAP32[i4 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i4, 8);
 if (i1 >>> 0 < ((i2 << 1) + 10 | 0) >>> 0) _ft_validator_error(i4, 8);
 if (!((i2 | 0) != 0 & (HEAP32[i4 + 8 >> 2] | 0) != 0)) return 0;
 i1 = i3 + 10 | 0;
 while (1) {
  if (((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) >>> 0 >= (HEAP32[i4 + 172 >> 2] | 0) >>> 0) {
   i1 = 9;
   break;
  }
  i2 = i2 + -1 | 0;
  if (!i2) {
   i1 = 11;
   break;
  } else i1 = i1 + 2 | 0;
 }
 if ((i1 | 0) == 9) _ft_validator_error(i4, 16); else if ((i1 | 0) == 11) return 0;
 return 0;
}

function __ZN11ApplicationC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 __ZN9MainClassC2Ev(i1);
 HEAP32[i1 >> 2] = 268;
 __ZN12VertexBufferC2Ev(i1 + 1328 | 0);
 __ZN8MaterialC2Ev(i1 + 1460 | 0);
 __ZN14TextureSamplerC2Ev(i1 + 1524 | 0);
 __ZN20ShaderConstantBufferC2Ev(i1 + 1556 | 0);
 __ZN12FTGlyphCacheC2Ev(i1 + 1592 | 0);
 __ZN4math3LCG4SeedEmmmm(i1 + 1788 | 0, __ZN4math5Clock7TickU32Ev() | 0, 69621, 0, 2147483647);
 i2 = i1 + 1804 | 0;
 i3 = i2 + 56 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 __ZN12VertexBufferC2Ev(i1 + 1868 | 0);
 __ZN12VertexBufferC2Ev(i1 + 2e3 | 0);
 __ZN11IndexBufferC2Ev(i1 + 2132 | 0);
 __ZN8MaterialC2Ev(i1 + 2176 | 0);
 __ZN20ShaderConstantBufferC2Ev(i1 + 2240 | 0);
 HEAP32[i1 + 2276 >> 2] = 0;
 HEAP32[i1 + 2280 >> 2] = 0;
 HEAP32[i1 + 2284 >> 2] = 0;
 __ZN4math7FrustumC2Ev(i1 + 2288 | 0);
 return;
}

function __ZN4math8float4x414D3DOrthoProjLHEffff(i1, f4, f2, f3, f5) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 HEAPF32[i1 >> 2] = Math_fround(Math_fround(2.0) / f3);
 f5 = Math_fround(Math_fround(2.0) / f5);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = f5;
 f5 = Math_fround(Math_fround(1.0) / Math_fround(f2 - f4));
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = f5;
 HEAPF32[i1 + 44 >> 2] = Math_fround(f4 / Math_fround(f4 - f2));
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 56 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 return;
}

function _tt_face_load_maxp(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 508 >> 2] & 63](i4, 1835104368, i3, 0) | 0;
 if (i1) {
  i4 = i1;
  return i4 | 0;
 }
 i1 = _FT_Stream_ReadFields(i3, 286056, i4 + 260 | 0) | 0;
 if (i1) {
  i4 = i1;
  return i4 | 0;
 }
 i1 = i4 + 266 | 0;
 i2 = i1 + 26 | 0;
 do {
  HEAP16[i1 >> 1] = 0;
  i1 = i1 + 2 | 0;
 } while ((i1 | 0) < (i2 | 0));
 if ((HEAP32[i4 + 260 >> 2] | 0) <= 65535) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = _FT_Stream_ReadFields(i3, 286072, i4 + 260 | 0) | 0;
 if (i1) {
  i4 = i1;
  return i4 | 0;
 }
 if ((HEAPU16[i4 + 280 >> 1] | 0) < 64) HEAP16[i4 + 280 >> 1] = 64;
 if ((HEAPU16[i4 + 276 >> 1] | 0) > 65531) HEAP16[i4 + 276 >> 1] = -5;
 if ((HEAPU16[i4 + 290 >> 1] | 0) <= 100) {
  i4 = 0;
  return i4 | 0;
 }
 HEAP16[i4 + 290 >> 1] = 100;
 i4 = 0;
 return i4 | 0;
}

function ___strchrnul(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 L1 : do if (!(i4 & 255)) i1 = i1 + (_strlen(i1) | 0) | 0; else {
  if (i1 & 3) do {
   i3 = HEAP8[i1 >> 0] | 0;
   if (i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 == (i4 & 255) << 24 >> 24) break L1;
   i1 = i1 + 1 | 0;
  } while ((i1 & 3 | 0) != 0);
  i3 = Math_imul(i4 & 255, 16843009) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L10 : do if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) do {
   i2 = i2 ^ i3;
   if ((i2 & -2139062144 ^ -2139062144) & i2 + -16843009) break L10;
   i1 = i1 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while (((i2 & -2139062144 ^ -2139062144) & i2 + -16843009 | 0) == 0); while (0);
  while (1) {
   i3 = HEAP8[i1 >> 0] | 0;
   if (i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 == (i4 & 255) << 24 >> 24) break; else i1 = i1 + 1 | 0;
  }
 } while (0);
 return i1 | 0;
}

function __Z24GLShadingLanguageVersionv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i3 = _glGetString(35724) | 0;
 HEAP32[i4 + 24 >> 2] = -1;
 HEAP32[i4 + 20 >> 2] = -1;
 HEAP32[i4 >> 2] = i4 + 24;
 HEAP32[i4 + 4 >> 2] = i4 + 20;
 i5 = (_sscanf(i3, 297341, i4) | 0) != 2;
 i2 = HEAP32[i4 + 24 >> 2] | 0;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 if (i5 | (i2 | 0) < 1 | (i1 | 0) < 0) {
  HEAP32[i4 + 8 >> 2] = i4 + 24;
  HEAP32[i4 + 8 + 4 >> 2] = i4 + 20;
  i5 = (_sscanf(i3, 297362, i4 + 8 | 0) | 0) != 2;
  i2 = HEAP32[i4 + 24 >> 2] | 0;
  i1 = HEAP32[i4 + 20 >> 2] | 0;
  if (i5 | (i2 | 0) < 1 | (i1 | 0) < 0) {
   HEAP32[i4 + 16 >> 2] = i3;
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297386, i4 + 16 | 0);
   i5 = 0;
   STACKTOP = i4;
   return i5 | 0;
  }
 }
 i5 = (i2 * 100 | 0) + i1 | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _ps_parser_to_int(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[i5 + 8 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i4 >>> 0) {
  i2 = i1;
  i3 = i1;
  while (1) {
   switch (HEAP8[i3 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i1 = i2;
     break;
    }
   case 37:
    {
     i2 = 37;
     i1 = i3;
     L5 : while (1) {
      switch (i2 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i4 >>> 0) break;
      i2 = HEAP8[i1 >> 0] | 0;
     }
     break;
    }
   default:
    {
     i1 = i2;
     break L1;
    }
   }
   i3 = i1 + 1 | 0;
   i1 = i3;
   if (i3 >>> 0 >= i4 >>> 0) break L1; else i2 = i1;
  }
 } while (0);
 HEAP32[i5 >> 2] = i1;
 return _PS_Conv_ToInt(i5, i4) | 0;
}

function _ft_module_get_service(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!i7) {
  i8 = 0;
  return i8 | 0;
 }
 i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0;
 if ((i2 | 0) != 0 ? (i3 = FUNCTION_TABLE_iii[i2 & 255](i7, i8) | 0, (i3 | 0) != 0) : 0) {
  i8 = i3;
  return i8 | 0;
 }
 i4 = HEAP32[i7 + 4 >> 2] | 0;
 i2 = HEAP32[i4 + 16 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  i8 = 0;
  return i8 | 0;
 }
 i5 = i4 + 20 | 0;
 while (1) {
  i3 = HEAP32[i5 >> 2] | 0;
  if (((i3 | 0) != (i7 | 0) ? (i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 32 >> 2] | 0, (i6 | 0) != 0) : 0) ? (i1 = FUNCTION_TABLE_iii[i6 & 255](i3, i8) | 0, (i1 | 0) != 0) : 0) {
   i2 = 10;
   break;
  }
  i5 = i5 + 4 | 0;
  if (i5 >>> 0 >= (i4 + 20 + (i2 << 2) | 0) >>> 0) {
   i1 = 0;
   i2 = 10;
   break;
  }
 }
 if ((i2 | 0) == 10) return i1 | 0;
 return 0;
}

function _FT_DivFix(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
 i4 = (i7 | 0) < 0 ? 0 - i7 | 0 : i7;
 do if (i4) {
  if (!(i2 >> 16)) {
   i1 = (((i4 >> 1) + (i2 << 16) | 0) >>> 0) / (i4 >>> 0) | 0;
   break;
  }
  if (((((i4 >> 1) + (i2 << 16) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0) >>> 0 < i4 >>> 0) {
   i3 = (i4 >> 1) + (i2 << 16) | 0;
   i5 = 32;
   i1 = 0;
   i2 = (((i4 >> 1) + (i2 << 16) | 0) >>> 0 < i2 << 16 >>> 0 & 1) + (i2 >> 16) | 0;
   while (1) {
    i2 = i2 << 1 | i3 >>> 31;
    i1 = (i2 >>> 0 < i4 >>> 0 | i1 << 1) ^ 1;
    i5 = i5 + -1 | 0;
    if (!i5) break; else {
     i3 = i3 << 1;
     i2 = i2 - (i2 >>> 0 < i4 >>> 0 ? 0 : i4) | 0;
    }
   }
  } else i1 = 2147483647;
 } else i1 = 2147483647; while (0);
 return ((i7 ^ i6 | 0) < 0 ? 0 - i1 | 0 : i1) | 0;
}

function _pcf_cmap_char_next(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 i5 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
 i6 = HEAP32[i1 + 16 >> 2] | 0;
 L1 : do if (!i6) i1 = 0; else {
  i4 = i6;
  i1 = 0;
  while (1) {
   i3 = (i1 + i4 | 0) >>> 1;
   i2 = HEAP32[i7 + (i3 << 3) >> 2] | 0;
   if ((i5 | 0) == (i2 | 0)) break;
   i4 = i5 >>> 0 < i2 >>> 0 ? i3 : i4;
   i1 = i5 >>> 0 < i2 >>> 0 ? i1 : i3 + 1 | 0;
   if (i1 >>> 0 >= i4 >>> 0) break L1;
  }
  i6 = i5;
  i7 = (HEAPU16[i7 + (i3 << 3) + 4 >> 1] | 0) + 1 | 0;
  HEAP32[i8 >> 2] = i6;
  return i7 | 0;
 } while (0);
 if (i1 >>> 0 >= i6 >>> 0) {
  i6 = 0;
  i7 = 0;
  HEAP32[i8 >> 2] = i6;
  return i7 | 0;
 }
 i6 = HEAP32[i7 + (i1 << 3) >> 2] | 0;
 i7 = (HEAPU16[i7 + (i1 << 3) + 4 >> 1] | 0) + 1 | 0;
 HEAP32[i8 >> 2] = i6;
 return i7 | 0;
}

function _cid_size_init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i2 + 320 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i1 >> 2] & 127](HEAP32[i2 + 100 >> 2] | 0, (HEAP32[i2 + 140 + 164 >> 2] | 0) + ((HEAP32[i2 + 4 >> 2] | 0) * 252 | 0) | 0, i4) | 0;
 if (i1) {
  i3 = i1;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i3 + 40 >> 2] = HEAP32[i4 >> 2];
 i3 = 0;
 STACKTOP = i4;
 return i3 | 0;
}

function ___stpcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 L1 : do if (!((i2 ^ i1) & 3)) {
  if (i2 & 3) do {
   i4 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i4;
   if (!(i4 << 24 >> 24)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
  } while ((i2 & 3 | 0) != 0);
  i3 = HEAP32[i2 >> 2] | 0;
  if (!((i3 & -2139062144 ^ -2139062144) & i3 + -16843009)) while (1) {
   i2 = i2 + 4 | 0;
   i4 = i1 + 4 | 0;
   HEAP32[i1 >> 2] = i3;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 & -2139062144 ^ -2139062144) & i3 + -16843009) {
    i1 = i4;
    break;
   } else i1 = i4;
  }
  i3 = 8;
 } else i3 = 8; while (0);
 if ((i3 | 0) == 8) {
  i4 = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 >> 0] = i4;
  if (i4 << 24 >> 24) do {
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i4;
  } while (i4 << 24 >> 24 != 0);
 }
 return i1 | 0;
}

function __ZN4math8float4x414D3DOrthoProjRHEffff(i1, f4, f2, f3, f5) {
 i1 = i1 | 0;
 f4 = Math_fround(f4);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f5 = Math_fround(f5);
 HEAPF32[i1 >> 2] = Math_fround(Math_fround(2.0) / f3);
 f5 = Math_fround(Math_fround(2.0) / f5);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAPF32[i1 + 20 >> 2] = f5;
 f5 = Math_fround(f4 - f2);
 f3 = Math_fround(Math_fround(1.0) / f5);
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 24 + 4 >> 2] = 0;
 HEAP32[i1 + 24 + 8 >> 2] = 0;
 HEAP32[i1 + 24 + 12 >> 2] = 0;
 HEAPF32[i1 + 40 >> 2] = f3;
 HEAPF32[i1 + 44 >> 2] = Math_fround(f4 / f5);
 HEAPF32[i1 + 48 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 52 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 56 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 60 >> 2] = Math_fround(1.0);
 return;
}

function _check_type1_format(i7, i6, i5) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _FT_Stream_Seek(i7, 0) | 0;
 L1 : do if (!i1) {
  i2 = _FT_Stream_ReadUShort(i7, i8) | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  do if (!i1) {
   if ((i2 + 32767 & 65535) < 2) {
    _FT_Stream_ReadULongLE(i7, i8) | 0;
    i1 = HEAP32[i8 >> 2] | 0;
    if (i1) break;
    if (i2 << 16 >> 16 != -32767) i4 = 8;
   } else i4 = 8;
   if ((i4 | 0) == 8 ? (i3 = _FT_Stream_Seek(i7, 0) | 0, (i3 | 0) != 0) : 0) {
    i1 = i3;
    break L1;
   }
   i1 = _FT_Stream_EnterFrame(i7, i5) | 0;
   if (i1) break L1;
   i1 = (_memcmp(HEAP32[i7 + 32 >> 2] | 0, i6, i5) | 0) == 0;
   _FT_Stream_ExitFrame(i7);
   i1 = i1 ? 0 : 2;
   break L1;
  } while (0);
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _af_latin_hints_init(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 + 108 >> 2] = i1;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 HEAP32[i3 + 100 >> 2] = i2;
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 40 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 44 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 436 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i1 + 440 >> 2];
 i5 = HEAP32[i1 + 24 >> 2] | 0;
 i1 = (i5 | 0) == 2 | (i5 | 0) == 4 ? (i5 & -2 | 0) == 2 | 2 : (i5 & -2 | 0) == 2 & 1;
 i1 = (i5 | 0) == 1 ? i1 : i1 | 4;
 i1 = (i5 | 0) == 2 ? i1 | 8 : i1;
 if ((i5 | 0) != 1 ? (HEAP32[i4 + 12 >> 2] & 1 | 0) == 0 : 0) {
  i5 = i2;
  HEAP32[i3 + 100 >> 2] = i5;
  i5 = i3 + 104 | 0;
  HEAP32[i5 >> 2] = i1;
  return 0;
 }
 i5 = i2 | 1;
 HEAP32[i3 + 100 >> 2] = i5;
 i5 = i3 + 104 | 0;
 HEAP32[i5 >> 2] = i1;
 return 0;
}

function _ps_parser_skip_spaces(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[i5 + 8 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i4 >>> 0) {
  i2 = i1;
  i3 = i1;
  while (1) {
   switch (HEAP8[i3 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i1 = i2;
     break;
    }
   case 37:
    {
     i2 = 37;
     i1 = i3;
     L5 : while (1) {
      switch (i2 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i4 >>> 0) break;
      i2 = HEAP8[i1 >> 0] | 0;
     }
     break;
    }
   default:
    {
     i1 = i2;
     break L1;
    }
   }
   i3 = i1 + 1 | 0;
   i1 = i3;
   if (i3 >>> 0 >= i4 >>> 0) break L1; else i2 = i1;
  }
 } while (0);
 HEAP32[i5 >> 2] = i1;
 return;
}

function _FT_Stream_ReadUOffset(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 do if ((i1 + 2 | 0) >>> 0 < (HEAP32[i4 + 4 >> 2] | 0) >>> 0) {
  i2 = HEAP32[i4 + 20 >> 2] | 0;
  if (!i2) {
   i2 = (HEAP32[i4 >> 2] | 0) + i1 | 0;
   if (!i2) {
    i3 = i1;
    i1 = 0;
   } else i5 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i2 & 63](i4, i1, i6, 3) | 0) != 3) break;
   i1 = HEAP32[i4 + 8 >> 2] | 0;
   i2 = i6;
   i5 = 6;
  }
  if ((i5 | 0) == 6) {
   i3 = i1;
   i1 = (HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0) << 16 | (HEAPU8[i2 + 2 >> 0] | 0);
  }
  HEAP32[i4 + 8 >> 2] = i3 + 3;
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 85;
 i5 = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _wcrtomb(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 do if (i1) {
  if (i3 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i3;
   i1 = 1;
   break;
  }
  if (i3 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i3 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i3 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i3 >>> 0 < 55296 | (i3 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i3 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 & 63 | 128;
   i1 = 3;
   break;
  }
  if ((i3 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i3 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i3 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i3 & 63 | 128;
   i1 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i1 = -1;
   break;
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function _Current_Ppem(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = HEAPU16[i2 + 252 >> 1] | 0;
 i1 = HEAP32[i2 + 256 >> 2] | 0;
 do if (!i1) {
  if (!(HEAP16[i2 + 296 >> 1] | 0)) {
   i1 = HEAP32[i2 + 244 >> 2] | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  }
  i1 = HEAP16[i2 + 294 >> 1] | 0;
  if (!(i1 << 16 >> 16)) {
   i1 = HEAP32[i2 + 248 >> 2] | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  } else {
   i5 = _FT_MulDiv(i1 << 16 >> 16, HEAP32[i2 + 244 >> 2] | 0, 16384) | 0;
   i1 = _FT_MulDiv(HEAP16[i2 + 296 >> 1] | 0, HEAP32[i2 + 248 >> 2] | 0, 16384) | 0;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i1;
   i1 = _FT_Vector_Length(i4) | 0;
   HEAP32[i2 + 256 >> 2] = i1;
   break;
  }
 } while (0);
 i5 = _FT_MulFix(i3, i1) | 0;
 STACKTOP = i4;
 return i5 | 0;
}

function __ZN5ImageC2EPvjbiii13TextureFormat(i7, i4, i3, i6, i8, i2, i5, i1) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP8[i7 + 8 >> 0] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAP32[i7 + 12 + 4 >> 2] = 0;
 HEAP32[i7 + 12 + 8 >> 2] = 0;
 HEAP32[i7 + 12 + 12 >> 2] = 0;
 HEAP32[i7 + 12 + 16 >> 2] = 0;
 HEAP32[i7 + 12 + 20 >> 2] = 0;
 if (__ZN5Image9CreateNewEPvjbiii13TextureFormat(i7, i4, i3, i6, i8, i2, i5, i1) | 0) {
  STACKTOP = i9;
  return;
 }
 i7 = __Z21TextureFormatToString13TextureFormat(i1) | 0;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i9 + 4 >> 2] = i2;
 HEAP32[i9 + 8 >> 2] = i7;
 __ZN4math22PrintToConsoleVariadicEjPKcz(2, 303292, i9);
 STACKTOP = i9;
 return;
}

function _ps_unicodes_char_index(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = (HEAP32[i1 + 16 >> 2] | 0) + -1 | 0;
 if ((i1 | 0) < 0) {
  i8 = 0;
  return i8 | 0;
 }
 i7 = i2 + (i1 << 3) | 0;
 i1 = 0;
 L4 : while (1) {
  i6 = i7;
  i3 = i1;
  while (1) {
   i5 = i6 - i2 >> 4;
   i1 = i2 + (i5 << 3) | 0;
   i4 = HEAP32[i1 >> 2] | 0;
   if ((i4 | 0) == (i8 | 0)) break L4;
   i1 = (i4 & 2147483647 | 0) == (i8 | 0) ? i1 : i3;
   if ((i2 | 0) == (i7 | 0)) break L4;
   if ((i4 & 2147483647) >>> 0 >= i8 >>> 0) break;
   i2 = i2 + (i5 + 1 << 3) | 0;
   if (i2 >>> 0 > i7 >>> 0) break L4; else i3 = i1;
  }
  if ((i5 | 0) < 1) break; else i7 = i2 + (i5 + -1 << 3) | 0;
 }
 if (!i1) {
  i8 = 0;
  return i8 | 0;
 }
 i8 = HEAP32[i1 + 4 >> 2] | 0;
 return i8 | 0;
}

function _ps_table_done(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = HEAP32[i8 + 32 >> 2] | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 if (!i7) {
  STACKTOP = i9;
  return;
 }
 i1 = _ft_mem_alloc(i6, HEAP32[i8 + 4 >> 2] | 0, i9) | 0;
 HEAP32[i8 >> 2] = i1;
 if (HEAP32[i9 >> 2] | 0) {
  STACKTOP = i9;
  return;
 }
 _memcpy(i1 | 0, i7 | 0, HEAP32[i8 + 4 >> 2] | 0) | 0;
 i4 = HEAP32[i8 + 16 >> 2] | 0;
 i5 = HEAP32[i8 + 24 >> 2] | 0;
 i1 = (HEAP32[i8 >> 2] | 0) - i7 | 0;
 if ((i4 | 0) > 0) {
  i3 = i5;
  do {
   i2 = HEAP32[i3 >> 2] | 0;
   if (i2) HEAP32[i3 >> 2] = i2 + i1;
   i3 = i3 + 4 | 0;
  } while (i3 >>> 0 < (i5 + (i4 << 2) | 0) >>> 0);
 }
 HEAP32[i8 + 8 >> 2] = HEAP32[i8 + 4 >> 2];
 _ft_mem_free(i6, i7);
 STACKTOP = i9;
 return;
}

function __ZN20ShaderConstantBuffer6CreateEPK14ShaderConstanti(i4, i2, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 HEAP32[i4 + 24 >> 2] = 0;
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 __ZN5ArrayI14ShaderConstant9StdCAllocE6insertEPKS0_i(i4 + 12 | 0, i2, i3);
 if (!(HEAP32[i4 + 24 >> 2] | 0)) return;
 i2 = 0;
 do {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  HEAP32[i1 + (i2 * 156 | 0) + 136 >> 2] = -1;
  HEAP32[i1 + (i2 * 156 | 0) + 140 >> 2] = -1;
  HEAP32[i1 + (i2 * 156 | 0) + 148 >> 2] = -1;
  HEAP32[i1 + (i2 * 156 | 0) + 152 >> 2] = 0;
  i1 = __Z26StringToEngineConstantTypePKc(i1 + (i2 * 156 | 0) | 0) | 0;
  if ((i1 | 0) != 2147483647) HEAP8[i4 + i1 >> 0] = i2;
  i2 = i2 + 1 | 0;
 } while (i2 >>> 0 < (HEAP32[i4 + 24 >> 2] | 0) >>> 0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i5, i1, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((i5 | 0) != (i1 | 0)) if ((i1 | 0) != 0 ? (i3 = ___dynamic_cast(i1, 128, 144, 0) | 0, (i3 | 0) != 0) : 0) {
  i1 = i6;
  i2 = i1 + 56 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  HEAP32[i6 >> 2] = i3;
  HEAP32[i6 + 8 >> 2] = i5;
  HEAP32[i6 + 12 >> 2] = -1;
  HEAP32[i6 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 15](i3, i6, HEAP32[i4 >> 2] | 0, 1);
  if ((HEAP32[i6 + 24 >> 2] | 0) == 1) {
   HEAP32[i4 >> 2] = HEAP32[i6 + 16 >> 2];
   i1 = 1;
  } else i1 = 0;
 } else i1 = 0; else i1 = 1;
 STACKTOP = i6;
 return i1 | 0;
}

function _FT_Stream_ReadUShortLE(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 do if ((i1 + 1 | 0) >>> 0 < (HEAP32[i4 + 4 >> 2] | 0) >>> 0) {
  i2 = HEAP32[i4 + 20 >> 2] | 0;
  if (!i2) {
   i2 = (HEAP32[i4 >> 2] | 0) + i1 | 0;
   if (!i2) {
    i3 = i1;
    i1 = 0;
   } else i5 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i2 & 63](i4, i1, i6, 2) | 0) != 2) break;
   i1 = HEAP32[i4 + 8 >> 2] | 0;
   i2 = i6;
   i5 = 6;
  }
  if ((i5 | 0) == 6) {
   i3 = i1;
   i1 = ((HEAPU8[i2 + 1 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0)) & 65535;
  }
  HEAP32[i4 + 8 >> 2] = i3 + 2;
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 85;
 i5 = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _FT_Outline_Check(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 L1 : do if (i1) {
  i6 = HEAP16[i1 + 2 >> 1] | 0;
  i5 = HEAP16[i1 >> 1] | 0;
  if (!((i5 | i6) << 16 >> 16)) {
   i6 = 0;
   return i6 | 0;
  }
  if (!(i6 << 16 >> 16 < 1 | i5 << 16 >> 16 < 1)) {
   if (i5 << 16 >> 16 > 0) {
    i1 = HEAP32[i1 + 12 >> 2] | 0;
    i3 = -1;
    i4 = 0;
    while (1) {
     i2 = HEAP16[i1 + (i4 << 1) >> 1] | 0;
     i4 = i4 + 1 | 0;
     if (!((i2 << 16 >> 16 | 0) > (i3 | 0) ? i2 << 16 >> 16 < i6 << 16 >> 16 : 0)) break L1;
     if ((i4 | 0) >= (i5 << 16 >> 16 | 0)) {
      i1 = i2 << 16 >> 16;
      break;
     } else i3 = i2 << 16 >> 16;
    }
   } else i1 = -1;
   if ((i1 | 0) == ((i6 << 16 >> 16) + -1 | 0)) {
    i6 = 0;
    return i6 | 0;
   }
  }
 } while (0);
 i6 = 6;
 return i6 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i4, i2, i1, i3, i5) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 do if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  if ((HEAP32[i2 + 4 >> 2] | 0) == (i1 | 0) ? (HEAP32[i2 + 28 >> 2] | 0) != 1 : 0) HEAP32[i2 + 28 >> 2] = i3;
 } else if ((i4 | 0) == (HEAP32[i2 >> 2] | 0)) {
  if ((HEAP32[i2 + 16 >> 2] | 0) != (i1 | 0) ? (HEAP32[i2 + 20 >> 2] | 0) != (i1 | 0) : 0) {
   HEAP32[i2 + 32 >> 2] = i3;
   HEAP32[i2 + 20 >> 2] = i1;
   HEAP32[i2 + 40 >> 2] = (HEAP32[i2 + 40 >> 2] | 0) + 1;
   if ((HEAP32[i2 + 36 >> 2] | 0) == 1 ? (HEAP32[i2 + 24 >> 2] | 0) == 2 : 0) HEAP8[i2 + 54 >> 0] = 1;
   HEAP32[i2 + 44 >> 2] = 4;
   break;
  }
  if ((i3 | 0) == 1) HEAP32[i2 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _FT_Stream_ReadUShort(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 do if ((i1 + 1 | 0) >>> 0 < (HEAP32[i4 + 4 >> 2] | 0) >>> 0) {
  i2 = HEAP32[i4 + 20 >> 2] | 0;
  if (!i2) {
   i2 = (HEAP32[i4 >> 2] | 0) + i1 | 0;
   if (!i2) {
    i3 = i1;
    i1 = 0;
   } else i5 = 6;
  } else {
   if ((FUNCTION_TABLE_iiiii[i2 & 63](i4, i1, i6, 2) | 0) != 2) break;
   i1 = HEAP32[i4 + 8 >> 2] | 0;
   i2 = i6;
   i5 = 6;
  }
  if ((i5 | 0) == 6) {
   i3 = i1;
   i1 = ((HEAPU8[i2 >> 0] | 0) << 8 | (HEAPU8[i2 + 1 >> 0] | 0)) & 65535;
  }
  HEAP32[i4 + 8 >> 2] = i3 + 2;
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 } while (0);
 HEAP32[i3 >> 2] = 85;
 i5 = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _skip_spaces(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L1 : do if (i1 >>> 0 < i4 >>> 0) {
  i2 = i1;
  i3 = i1;
  while (1) {
   switch (HEAP8[i3 >> 0] | 0) {
   case 0:
   case 12:
   case 9:
   case 10:
   case 13:
   case 32:
    {
     i1 = i2;
     break;
    }
   case 37:
    {
     i2 = 37;
     i1 = i3;
     L5 : while (1) {
      switch (i2 << 24 >> 24) {
      case 10:
      case 13:
       break L5;
      default:
       {}
      }
      i1 = i1 + 1 | 0;
      if (i1 >>> 0 >= i4 >>> 0) break;
      i2 = HEAP8[i1 >> 0] | 0;
     }
     break;
    }
   default:
    {
     i1 = i2;
     break L1;
    }
   }
   i3 = i1 + 1 | 0;
   i1 = i3;
   if (i3 >>> 0 >= i4 >>> 0) break L1; else i2 = i1;
  }
 } while (0);
 HEAP32[i5 >> 2] = i1;
 return;
}

function __ZN12FTGlyphCache6DeInitEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) != 0 ? (i1 = HEAP32[i2 + 8 >> 2] | 0, i4 = (HEAP32[i2 + 4 >> 2] | 0) + 4 | 0, i5 = HEAP32[i1 >> 2] | 0, HEAP32[i5 + 4 >> 2] = HEAP32[i4 >> 2], HEAP32[HEAP32[i4 >> 2] >> 2] = i5, HEAP32[i2 + 12 >> 2] = 0, (i1 | 0) != (i2 + 4 | 0)) : 0) do {
  i5 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZN6FTFontD2Ev(i5 + 8 | 0);
  __ZdlPv(i5);
 } while ((i1 | 0) != (i2 + 4 | 0));
 __ZN7Texture6DeinitEv(i2 + 28 | 0);
 __ZN7Texture6DeinitEv(i2 + 96 | 0);
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  STACKTOP = i3;
  return;
 }
 if (_FT_Done_FreeType(i1) | 0) __ZN4math22PrintToConsoleVariadicEjPKcz(2, 289735, i3);
 HEAP32[i2 >> 2] = 0;
 STACKTOP = i3;
 return;
}

function _Direct_Move(i3, i5, i4, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0;
 i1 = HEAP16[i3 + 298 >> 1] | 0;
 if (i1 << 16 >> 16) {
  i6 = _FT_MulDiv(i2, i1 << 16 >> 16 << 16, HEAP32[i3 + 564 >> 2] | 0) | 0;
  i1 = (HEAP32[i5 + 16 >> 2] | 0) + ((i4 & 65535) << 3) | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i6;
  i1 = (HEAP32[i5 + 24 >> 2] | 0) + (i4 & 65535) | 0;
  HEAP8[i1 >> 0] = HEAPU8[i1 >> 0] | 0 | 8;
 }
 i1 = HEAP16[i3 + 300 >> 1] | 0;
 if (!(i1 << 16 >> 16)) return;
 i3 = _FT_MulDiv(i2, i1 << 16 >> 16 << 16, HEAP32[i3 + 564 >> 2] | 0) | 0;
 i6 = (HEAP32[i5 + 16 >> 2] | 0) + ((i4 & 65535) << 3) + 4 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i3;
 i6 = (HEAP32[i5 + 24 >> 2] | 0) + (i4 & 65535) | 0;
 HEAP8[i6 >> 0] = HEAPU8[i6 >> 0] | 0 | 16;
 return;
}

function _t1_builder_add_point1(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0;
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + 1 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 4 >> 2] | 0) >>> 0 ? (i2 = _FT_GlyphLoader_CheckPoints(i1, 1, 0) | 0, (i2 | 0) != 0) : 0) {
  i5 = i2;
  return i5 | 0;
 }
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 if (!(HEAP8[i3 + 68 >> 0] | 0)) i1 = i1 + 2 | 0; else {
  i6 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = HEAP16[i1 + 2 >> 1] | 0;
  i3 = (HEAP32[i1 + 8 >> 2] | 0) + i2 | 0;
  HEAP32[i6 + (i2 << 3) >> 2] = (_FT_RoundFix(i4) | 0) >> 16;
  HEAP32[i6 + (i2 << 3) + 4 >> 2] = (_FT_RoundFix(i5) | 0) >> 16;
  HEAP8[i3 >> 0] = 1;
  i1 = i1 + 2 | 0;
 }
 HEAP16[i1 >> 1] = (HEAP16[i1 >> 1] | 0) + 1 << 16 >> 16;
 i6 = 0;
 return i6 | 0;
}

function _raccess_guess_darwin_ufs_export(i3, i1, i2, i7, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i5 = _raccess_make_file_name(i6, i2, 322528) | 0;
 if (!i5) {
  i7 = 64;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i8 + 8 >> 2] = 4;
 HEAP32[i8 + 8 + 12 >> 2] = i5;
 i1 = _FT_Stream_New(i3, i8 + 8 | 0, i8) | 0;
 if (!i1) {
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) {
   i1 = 81;
   i2 = 0;
  } else {
   i1 = _raccess_guess_apple_generic(i1, 333319, i4) | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  _FT_Stream_Free(i2, 0);
  if (!i1) {
   HEAP32[i7 >> 2] = i5;
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
 }
 _ft_mem_free(i6, i5);
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNK4math8float4x410TransposedEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 32 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 48 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 36 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 52 >> 2];
 HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 36 >> 2] = HEAP32[i2 + 24 >> 2];
 HEAP32[i1 + 40 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 44 >> 2] = HEAP32[i2 + 56 >> 2];
 HEAP32[i1 + 48 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 52 >> 2] = HEAP32[i2 + 28 >> 2];
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 60 >> 2] = HEAP32[i2 + 60 >> 2];
 return;
}

function __ZN4math8float4x4aSERKS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i1 + 32 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i1 + 36 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i1 + 40 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i1 + 44 >> 2];
 HEAP32[i2 + 48 >> 2] = HEAP32[i1 + 48 >> 2];
 HEAP32[i2 + 52 >> 2] = HEAP32[i1 + 52 >> 2];
 HEAP32[i2 + 56 >> 2] = HEAP32[i1 + 56 >> 2];
 HEAP32[i2 + 60 >> 2] = HEAP32[i1 + 60 >> 2];
 return i2 | 0;
}

function _raccess_guess_linux_netatalk(i3, i1, i2, i7, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i5 = _raccess_make_file_name(i6, i2, 322463) | 0;
 if (!i5) {
  i7 = 64;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i8 + 8 >> 2] = 4;
 HEAP32[i8 + 8 + 12 >> 2] = i5;
 i1 = _FT_Stream_New(i3, i8 + 8 | 0, i8) | 0;
 if (!i1) {
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) {
   i1 = 81;
   i2 = 0;
  } else {
   i1 = _raccess_guess_apple_generic(i1, 333319, i4) | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  _FT_Stream_Free(i2, 0);
  if (!i1) {
   HEAP32[i7 >> 2] = i5;
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
 }
 _ft_mem_free(i6, i5);
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function _raccess_guess_linux_double(i3, i1, i2, i7, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i5 = _raccess_make_file_name(i6, i2, 322477) | 0;
 if (!i5) {
  i7 = 64;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i8 + 8 >> 2] = 4;
 HEAP32[i8 + 8 + 12 >> 2] = i5;
 i1 = _FT_Stream_New(i3, i8 + 8 | 0, i8) | 0;
 if (!i1) {
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) {
   i1 = 81;
   i2 = 0;
  } else {
   i1 = _raccess_guess_apple_generic(i1, 333319, i4) | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  _FT_Stream_Free(i2, 0);
  if (!i1) {
   HEAP32[i7 >> 2] = i5;
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
 }
 _ft_mem_free(i6, i5);
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNK4math3OBB12LocalToWorldEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 __ZN4math8float3x46SetColEiPKf(i1, 0, i2 + 24 | 0);
 __ZN4math8float3x46SetColEiPKf(i1, 1, i2 + 36 | 0);
 __ZN4math8float3x46SetColEiPKf(i1, 2, i2 + 48 | 0);
 __ZNK4math6float3mlEf(i3 + 48 | 0, i2 + 24 | 0, Math_fround(HEAPF32[i2 + 12 >> 2]));
 __ZNK4math6float3miERKS0_(i3 + 36 | 0, i2, i3 + 48 | 0);
 __ZNK4math6float3mlEf(i3 + 24 | 0, i2 + 36 | 0, Math_fround(HEAPF32[i2 + 16 >> 2]));
 __ZNK4math6float3miERKS0_(i3 + 12 | 0, i3 + 36 | 0, i3 + 24 | 0);
 __ZNK4math6float3mlEf(i3, i2 + 48 | 0, Math_fround(HEAPF32[i2 + 20 >> 2]));
 __ZNK4math6float3miERKS0_(i3 + 60 | 0, i3 + 12 | 0, i3);
 __ZN4math8float3x46SetColEiPKf(i1, 3, i3 + 60 | 0);
 STACKTOP = i3;
 return;
}

function __ZNK4math6float315IsPerpendicularERKS0_f(i3, i2, f1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 var f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0;
 f9 = Math_fround(HEAPF32[i3 >> 2]);
 f6 = Math_fround(HEAPF32[i2 >> 2]);
 f10 = Math_fround(f9 * f6);
 f8 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f5 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f10 = Math_fround(f10 + Math_fround(f8 * f5));
 f7 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f4 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f10 = Math_fround(f10 + Math_fround(f7 * f4));
 return Math_fround(f10 * f10) <= Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(f9 * f9) + Math_fround(f8 * f8)) + Math_fround(f7 * f7)) * f1) * Math_fround(Math_fround(Math_fround(f6 * f6) + Math_fround(f5 * f5)) + Math_fround(f4 * f4))) | 0;
}

function _T1_Size_Init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i2 + 552 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i1 >> 2] & 127](HEAP32[i2 + 100 >> 2] | 0, i2 + 168 | 0, i4) | 0;
 if (i1) {
  i3 = i1;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i3 + 40 >> 2] = HEAP32[i4 >> 2];
 i3 = 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FT_Stream_ReadChar(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP8[i6 >> 0] = 0;
 HEAP32[i3 >> 2] = 0;
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 i2 = HEAP32[i5 + 8 >> 2] | 0;
 if (!i1) if (i2 >>> 0 < (HEAP32[i5 + 4 >> 2] | 0) >>> 0) {
  i4 = HEAP8[(HEAP32[i5 >> 2] | 0) + i2 >> 0] | 0;
  HEAP8[i6 >> 0] = i4;
  i1 = i2;
  i2 = i4;
  i4 = 6;
 } else i4 = 7; else if ((FUNCTION_TABLE_iiiii[i1 & 63](i5, i2, i6, 1) | 0) == 1) {
  i1 = HEAP32[i5 + 8 >> 2] | 0;
  i2 = HEAP8[i6 >> 0] | 0;
  i4 = 6;
 } else i4 = 7;
 if ((i4 | 0) == 6) {
  HEAP32[i5 + 8 >> 2] = i1 + 1;
  i5 = i2;
  STACKTOP = i6;
  return i5 | 0;
 } else if ((i4 | 0) == 7) {
  HEAP32[i3 >> 2] = 85;
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function __ZNK4math4AABB10FaceNormalEi(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 switch (i2 | 0) {
 case 5:
  {
   __ZN4math6float3C2Efff(i1, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
   return;
  }
 case 1:
  {
   __ZN4math6float3C2Efff(i1, Math_fround(1.0), Math_fround(0.0), Math_fround(0.0));
   return;
  }
 case 2:
  {
   __ZN4math6float3C2Efff(i1, Math_fround(0.0), Math_fround(-1.0), Math_fround(0.0));
   return;
  }
 case 3:
  {
   __ZN4math6float3C2Efff(i1, Math_fround(0.0), Math_fround(1.0), Math_fround(0.0));
   return;
  }
 case 4:
  {
   __ZN4math6float3C2Efff(i1, Math_fround(0.0), Math_fround(0.0), Math_fround(-1.0));
   return;
  }
 default:
  {
   __ZN4math6float3C2Efff(i1, Math_fround(-1.0), Math_fround(0.0), Math_fround(0.0));
   return;
  }
 }
}

function __Z15WWWGlGetVersionv() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i1 = _glGetString(7938) | 0;
 if (!i1) {
  __ZN4math22PrintToConsoleVariadicEjPKcz(4, 305816, i2);
  i1 = 0;
  STACKTOP = i2;
  return i1 | 0;
 }
 HEAP32[i2 + 32 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = i2 + 32;
 HEAP32[i2 + 8 + 4 >> 2] = i2 + 28;
 if ((_sscanf(i1, 305848, i2 + 8 | 0) | 0) != 2 ? (HEAP32[i2 + 16 >> 2] = i2 + 32, HEAP32[i2 + 16 + 4 >> 2] = i2 + 28, (_sscanf(i1, 305860, i2 + 16 | 0) | 0) != 2) : 0) {
  HEAP32[i2 + 24 >> 2] = i1;
  __ZN4math22PrintToConsoleVariadicEjPKcz(4, 305876, i2 + 24 | 0);
  i1 = 0;
  STACKTOP = i2;
  return i1 | 0;
 }
 i1 = ((HEAP32[i2 + 32 >> 2] | 0) * 100 | 0) + (HEAP32[i2 + 28 >> 2] | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _tt_name_entry_ascii_from_utf16(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i6 = (HEAPU16[i1 + 8 >> 1] | 0) >>> 1;
 i5 = _ft_mem_realloc(i2, 1, 0, (i6 & 65535) + 1 | 0, 0, i7) | 0;
 if (HEAP32[i7 >> 2] | 0) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 L4 : do if (!(i6 << 16 >> 16)) i1 = 0; else {
  i1 = 0;
  while (1) {
   i2 = HEAP8[i3 + 1 >> 0] | 0;
   i4 = (HEAPU8[i3 >> 0] | 0) << 8 | i2 & 255;
   if (!i4) break L4;
   HEAP8[i5 + i1 >> 0] = (i4 + -32 | 0) >>> 0 > 95 ? 63 : i2;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 < (i6 & 65535) >>> 0) i3 = i3 + 2 | 0; else break;
  }
 } while (0);
 HEAP8[i5 + i1 >> 0] = 0;
 i6 = i5;
 STACKTOP = i7;
 return i6 | 0;
}

function _FT_GlyphLoader_CreateExtra(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _ft_mem_realloc(HEAP32[i3 >> 2] | 0, 8, 0, HEAP32[i3 + 4 >> 2] << 1, 0, i4) | 0;
 HEAP32[i3 + 40 >> 2] = i1;
 i2 = HEAP32[i4 >> 2] | 0;
 if (i2) {
  STACKTOP = i4;
  return i2 | 0;
 }
 HEAP8[i3 + 16 >> 0] = 1;
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i3 + 44 >> 2] = i1 + (i6 << 3);
 i5 = HEAP16[i3 + 22 >> 1] | 0;
 HEAP32[i3 + 60 >> 2] = (HEAP32[i3 + 24 >> 2] | 0) + (i5 << 3);
 HEAP32[i3 + 64 >> 2] = (HEAP32[i3 + 28 >> 2] | 0) + i5;
 HEAP32[i3 + 68 >> 2] = (HEAP32[i3 + 32 >> 2] | 0) + (HEAP16[i3 + 20 >> 1] << 1);
 HEAP32[i3 + 76 >> 2] = i1 + (i5 << 3);
 HEAP32[i3 + 80 >> 2] = i1 + (i6 + i5 << 3);
 STACKTOP = i4;
 return i2 | 0;
}

function __Z22PrintProgramLinkErrorsj(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i4 + 16 >> 2] = 0;
 _glGetProgramiv(i3 | 0, 35714, i4 + 16 | 0);
 if (HEAP32[i4 + 16 >> 2] | 0) {
  i3 = 1;
  STACKTOP = i4;
  return i3 | 0;
 }
 __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297291, i4);
 HEAP32[i4 + 12 >> 2] = 0;
 _glGetProgramiv(i3 | 0, 35716, i4 + 12 | 0);
 i1 = HEAP32[i4 + 12 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i2 = _malloc(i1) | 0;
 if (!i2) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _glGetProgramInfoLog(i3 | 0, i1 | 0, 0, i2 | 0);
 HEAP32[i4 + 8 >> 2] = i2;
 __ZN4math22PrintToConsoleVariadicEjPKcz(2, 297313, i4 + 8 | 0);
 _free(i2);
 i3 = 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEEC2ERKS5_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) return;
 if (((i1 - i2 | 0) / 48 | 0) >>> 0 > 89478485) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i4);
 i5 = __Znwj(i1 - i2 | 0) | 0;
 HEAP32[i4 + 4 >> 2] = i5;
 HEAP32[i4 >> 2] = i5;
 HEAP32[i4 + 8 >> 2] = i5 + (((i1 - i2 | 0) / 48 | 0) * 48 | 0);
 __ZNSt3__16vectorIN6Shader8VariableENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_(i4, HEAP32[i3 >> 2] | 0, HEAP32[i3 + 4 >> 2] | 0);
 return;
}

function _pad(i6, i1, i5, i4, i2) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 do if ((i5 | 0) > (i4 | 0) & (i2 & 73728 | 0) == 0) {
  _memset(i7 | 0, i1 | 0, ((i5 - i4 | 0) >>> 0 > 256 ? 256 : i5 - i4 | 0) | 0) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  if ((i5 - i4 | 0) >>> 0 > 255) {
   i3 = i5 - i4 | 0;
   i1 = i2;
   i2 = (i2 & 32 | 0) == 0;
   do {
    if (i2) {
     ___fwritex(i7, 256, i6) | 0;
     i1 = HEAP32[i6 >> 2] | 0;
    }
    i3 = i3 + -256 | 0;
    i2 = (i1 & 32 | 0) == 0;
   } while (i3 >>> 0 > 255);
   if (i2) i1 = i5 - i4 & 255; else break;
  } else if (!(i2 & 32)) i1 = i5 - i4 | 0; else break;
  ___fwritex(i7, i1, i6) | 0;
 } while (0);
 STACKTOP = i7;
 return;
}

function _t1_builder_add_contour(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i3) {
  i3 = 3;
  return i3 | 0;
 }
 if (!(HEAP8[i1 + 68 >> 0] | 0)) {
  HEAP16[i3 >> 1] = (HEAP16[i3 >> 1] | 0) + 1 << 16 >> 16;
  i3 = 0;
  return i3 | 0;
 }
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (((HEAP16[i1 + 20 >> 1] | 0) + 1 + (HEAP16[i1 + 56 >> 1] | 0) | 0) >>> 0 > (HEAP32[i1 + 8 >> 2] | 0) >>> 0 ? (i2 = _FT_GlyphLoader_CheckPoints(i1, 0, 1) | 0, (i2 | 0) != 0) : 0) {
  i3 = i2;
  return i3 | 0;
 }
 i1 = HEAP16[i3 >> 1] | 0;
 if (i1 << 16 >> 16 > 0) {
  HEAP16[(HEAP32[i3 + 12 >> 2] | 0) + ((i1 << 16 >> 16) + -1 << 1) >> 1] = (HEAPU16[i3 + 2 >> 1] | 0) + 65535;
  i1 = HEAP16[i3 >> 1] | 0;
 }
 HEAP16[i3 >> 1] = i1 + 1 << 16 >> 16;
 i3 = 0;
 return i3 | 0;
}

function _pcf_get_bdf_property(i1, i5, i7) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = HEAP32[i1 + 284 >> 2] | 0;
 i2 = HEAP32[i1 + 280 >> 2] | 0;
 if ((i2 | 0) > 0) i1 = 0; else {
  i7 = 6;
  return i7 | 0;
 }
 while (1) {
  i3 = i1 + 1 | 0;
  i4 = (_strcmp(HEAP32[i6 + (i1 * 12 | 0) >> 2] | 0, i5) | 0) != 0;
  if ((i3 | 0) < (i2 | 0) & i4) i1 = i3; else break;
 }
 if (i4 | (i6 + (i1 * 12 | 0) | 0) == 0) {
  i7 = 6;
  return i7 | 0;
 }
 if (!(HEAP8[i6 + (i1 * 12 | 0) + 4 >> 0] | 0)) {
  HEAP32[i7 >> 2] = 2;
  HEAP32[i7 + 4 >> 2] = HEAP32[i6 + (i1 * 12 | 0) + 8 >> 2];
  i7 = 0;
  return i7 | 0;
 } else {
  HEAP32[i7 >> 2] = 1;
  HEAP32[i7 + 4 >> 2] = HEAP32[i6 + (i1 * 12 | 0) + 8 >> 2];
  i7 = 0;
  return i7 | 0;
 }
 return 0;
}

function __ZN4math7Frustum23ProjectionMatrixChangedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 __ZNK4math7Frustum23ComputeProjectionMatrixEv(i3 + 112 | 0, i1);
 __ZN4math8float4x4aSERKS0_(i1 + 112 | 0, i3 + 112 | 0) | 0;
 if (HEAP32[(__ZN4math8float3x4ixEi(i1 + 64 | 0, 0) | 0) >> 2] << 1 >>> 0 > 4278190080) {
  STACKTOP = i3;
  return;
 }
 i2 = i3 + 64 | 0;
 i4 = i1 + 64 | 0;
 i5 = i2 + 48 | 0;
 do {
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  i2 = i2 + 4 | 0;
  i4 = i4 + 4 | 0;
 } while ((i2 | 0) < (i5 | 0));
 __ZN4math8float3x418InverseOrthonormalEv(i3 + 64 | 0);
 __ZNK4math8float4x4mlERKNS_8float3x4E(i3, i1 + 112 | 0, i3 + 64 | 0);
 __ZN4math8float4x4aSERKS0_(i1 + 176 | 0, i3) | 0;
 STACKTOP = i3;
 return;
}

function _cff_get_glyph_name(i1, i4, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 + 692 >> 2] | 0;
 i3 = HEAP32[i2 + 2956 >> 2] | 0;
 if (!i3) {
  i6 = 11;
  return i6 | 0;
 }
 i1 = HEAP16[(HEAP32[i2 + 1160 >> 2] | 0) + (i4 << 1) >> 1] | 0;
 if (i1 << 16 >> 16 == -1) {
  i6 = 0;
  return i6 | 0;
 }
 do if ((i1 & 65535) > 390) if ((HEAP32[i2 + 1312 >> 2] | 0) >>> 0 > ((i1 & 65535) + -391 | 0) >>> 0) {
  i1 = HEAP32[(HEAP32[i2 + 1316 >> 2] | 0) + ((i1 & 65535) + -391 << 2) >> 2] | 0;
  break;
 } else {
  i6 = 0;
  return i6 | 0;
 } else i1 = FUNCTION_TABLE_ii[HEAP32[i3 + 20 >> 2] & 63](i1 & 65535) | 0; while (0);
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 _ft_mem_strcpyn(i5, i1, i6) | 0;
 i6 = 0;
 return i6 | 0;
}

function _tt_face_load_os2(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 63](i2, 1330851634, i3, 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i1 = _FT_Stream_ReadFields(i3, 285836, i2 + 368 | 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 HEAP32[i2 + 448 >> 2] = 0;
 HEAP32[i2 + 448 + 4 >> 2] = 0;
 HEAP32[i2 + 448 + 8 >> 2] = 0;
 HEAP32[i2 + 448 + 12 >> 2] = 0;
 HEAP16[i2 + 448 + 16 >> 1] = 0;
 if (!(HEAP16[i2 + 368 >> 1] | 0)) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = _FT_Stream_ReadFields(i3, 286012, i2 + 368 | 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 if ((HEAPU16[i2 + 368 >> 1] | 0) <= 1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = _FT_Stream_ReadFields(i3, 286028, i2 + 368 | 0) | 0;
 return i3 | 0;
}

function _parse_fd_array(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i4 + 100 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[i1 + 36 >> 2] & 63](i1) | 0;
 if (HEAP32[i4 + 304 >> 2] | 0) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i2 = _ft_mem_realloc(i2, 252, 0, i3, 0, i5) | 0;
 HEAP32[i4 + 304 >> 2] = i2;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1) {
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i4 + 300 >> 2] = i3;
 if ((i3 | 0) > 0) i1 = 0; else {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 do {
  HEAP32[i2 + (i1 * 252 | 0) + 4 >> 2] = 4;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i4 = HEAP32[i5 >> 2] | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _raccess_guess_darwin_hfsplus(i2, i1, i5, i6, i7) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = _strlen(i5) | 0;
 i1 = _ft_mem_alloc(HEAP32[i2 >> 2] | 0, i3 + 6 | 0, i4) | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (i2) {
  i7 = i2;
  STACKTOP = i4;
  return i7 | 0;
 }
 _memcpy(i1 | 0, i5 | 0, i3 | 0) | 0;
 HEAP8[i1 + i3 >> 0] = HEAP8[322504] | 0;
 HEAP8[i1 + i3 + 1 >> 0] = HEAP8[322505] | 0;
 HEAP8[i1 + i3 + 2 >> 0] = HEAP8[322506] | 0;
 HEAP8[i1 + i3 + 3 >> 0] = HEAP8[322507] | 0;
 HEAP8[i1 + i3 + 4 >> 0] = HEAP8[322508] | 0;
 HEAP8[i1 + i3 + 5 >> 0] = HEAP8[322509] | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = 0;
 i7 = 0;
 STACKTOP = i4;
 return i7 | 0;
}

function _tt_face_free_name(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i3 = HEAP32[(HEAP32[i4 + 96 >> 2] | 0) + 8 >> 2] | 0;
 i1 = HEAP32[i4 + 360 >> 2] | 0;
 i2 = HEAP32[i4 + 352 >> 2] | 0;
 if (!i1) {
  HEAP32[i4 + 352 >> 2] = 0;
  i3 = i4 + 348 | 0;
  HEAP16[i3 >> 1] = 0;
  i4 = i4 + 356 | 0;
  HEAP32[i4 >> 2] = 0;
  return;
 }
 if (i2) {
  while (1) {
   i5 = i1 + 16 | 0;
   _ft_mem_free(i3, HEAP32[i5 >> 2] | 0);
   HEAP32[i5 >> 2] = 0;
   HEAP16[i1 + 8 >> 1] = 0;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i1 = i1 + 20 | 0;
  }
  i1 = HEAP32[i4 + 360 >> 2] | 0;
 }
 _ft_mem_free(i3, i1);
 HEAP32[i4 + 360 >> 2] = 0;
 HEAP32[i4 + 352 >> 2] = 0;
 i5 = i4 + 348 | 0;
 HEAP16[i5 >> 1] = 0;
 i5 = i4 + 356 | 0;
 HEAP32[i5 >> 2] = 0;
 return;
}

function __ZN12FTGlyphCache4InitEi(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 HEAP32[i3 >> 2] = 0;
 if (_FT_Init_FreeType(i3) | 0) {
  STACKTOP = i4;
  return;
 }
 __ZN7Texture9CreateNewEiiii11TextureType13TextureFormat13ResourceUsagemPKhjPKc(i4 + 20 | 0, i3 + 28 | 0, i2, i2, 1, 1, 2, 28, 4, 0, 0, 0, 289693);
 i1 = HEAP32[i4 + 20 + 4 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i4 + 20 + 4 >> 2] = 0;
 __ZN7Texture9CreateNewEiiii11TextureType13TextureFormat13ResourceUsagemPKhjPKc(i4, i3 + 96 | 0, i2, i2, 1, 1, 2, 28, 3, 8, 0, 0, 289714);
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i4 + 4 >> 2] = 0;
 __ZN15MaxRectsBinPack4InitEii(i3 + 164 | 0, i2, i2);
 STACKTOP = i4;
 return;
}

function __ZN7Texture6DeinitEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 HEAP32[i3 + 32 >> 2] = 0;
 if (HEAP32[i3 + 52 >> 2] | 0) {
  if (!(HEAP8[i3 + 56 >> 0] | 0)) _glDeleteTextures(1, i3 + 52 | 0); else _glDeleteRenderbuffers(1, i3 + 52 | 0);
  i1 = HEAP32[122] | 0;
  if (i1) __ZN8Graphics23TextureAboutToBeDeletedEP7Texture(i1, i3);
  HEAP32[i3 + 52 >> 2] = 0;
 }
 i2 = HEAP32[i3 + 64 >> 2] | 0;
 if (!i2) {
  HEAP32[i3 + 64 >> 2] = 0;
  i3 = i3 + 60 | 0;
  HEAP32[i3 >> 2] = 0;
  return;
 }
 i1 = HEAP32[i2 + -4 >> 2] | 0;
 if (i1) {
  i1 = i2 + (i1 * 36 | 0) | 0;
  do {
   i1 = i1 + -36 | 0;
   __ZN5ImageD2Ev(i1);
  } while ((i1 | 0) != (i2 | 0));
 }
 __ZdaPv(i2 + -4 | 0);
 HEAP32[i3 + 64 >> 2] = 0;
 i3 = i3 + 60 | 0;
 HEAP32[i3 >> 2] = 0;
 return;
}

function _FT_New_Library(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!i4) {
  i4 = 6;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = _ft_mem_alloc(i4, 192, i5) | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (i2) {
  i4 = i2;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i1 >> 2] = i4;
 HEAP32[i1 + 168 >> 2] = 16384;
 HEAP32[i1 + 164 >> 2] = _ft_mem_alloc(i4, 16384, i5) | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  HEAP32[i1 + 4 >> 2] = 2;
  HEAP32[i1 + 8 >> 2] = 4;
  HEAP32[i1 + 12 >> 2] = 10;
  HEAP32[i1 + 188 >> 2] = 1;
  HEAP32[i3 >> 2] = i1;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 } else {
  _ft_mem_free(i4, i1);
  i4 = HEAP32[i5 >> 2] | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function _tt_face_get_metrics(i5, i1, i6, i4, i7) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 << 24 >> 24 != 0 ? i5 + 300 | 0 : i5 + 216 | 0;
 i2 = HEAP16[i1 + 34 >> 1] | 0;
 if ((i2 << 16 >> 16 != 0 ? (i3 = HEAP32[i1 + 36 >> 2] | 0, (i3 | 0) != 0) : 0) ? (HEAPU16[i5 + 264 >> 1] | 0) >>> 0 > i6 >>> 0 : 0) {
  if ((i2 & 65535) >>> 0 > i6 >>> 0) {
   HEAP16[i4 >> 1] = HEAP16[i3 + (i6 << 2) + 2 >> 1] | 0;
   i1 = i3 + (i6 << 2) | 0;
  } else {
   HEAP16[i4 >> 1] = HEAP16[(HEAP32[i1 + 40 >> 2] | 0) + (i6 - (i2 & 65535) << 1) >> 1] | 0;
   i1 = i3 + ((i2 & 65535) + -1 << 2) | 0;
  }
  HEAP16[i7 >> 1] = HEAP16[i1 >> 1] | 0;
  return 0;
 }
 HEAP16[i7 >> 1] = 0;
 HEAP16[i4 >> 1] = 0;
 return 0;
}

function _FT_Outline_Transform(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!((i1 | 0) != 0 & (i4 | 0) != 0)) return;
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP16[i1 + 2 >> 1] | 0;
 if (i1 << 16 >> 16 <= 0) return;
 i2 = i3;
 do {
  if (i2) {
   i7 = _FT_MulFix(HEAP32[i2 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   i5 = i2 + 4 | 0;
   i7 = (_FT_MulFix(HEAP32[i5 >> 2] | 0, HEAP32[i4 + 4 >> 2] | 0) | 0) + i7 | 0;
   i6 = _FT_MulFix(HEAP32[i2 >> 2] | 0, HEAP32[i4 + 8 >> 2] | 0) | 0;
   i6 = (_FT_MulFix(HEAP32[i5 >> 2] | 0, HEAP32[i4 + 12 >> 2] | 0) | 0) + i6 | 0;
   HEAP32[i2 >> 2] = i7;
   HEAP32[i5 >> 2] = i6;
  }
  i2 = i2 + 8 | 0;
 } while (i2 >>> 0 < (i3 + (i1 << 16 >> 16 << 3) | 0) >>> 0);
 return;
}

function _fflush(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 do if (i2) {
  if ((HEAP32[i2 + 76 >> 2] | 0) <= -1) {
   i1 = ___fflush_unlocked(i2) | 0;
   break;
  }
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___fflush_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } else {
  if (!(HEAP32[70411] | 0)) i1 = 0; else i1 = _fflush(HEAP32[70411] | 0) | 0;
  ___lock(281416);
  i2 = HEAP32[70353] | 0;
  if (i2) do {
   if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
   if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0) i1 = ___fflush_unlocked(i2) | 0 | i1;
   if (i3) ___unlockfile(i2);
   i2 = HEAP32[i2 + 56 >> 2] | 0;
  } while ((i2 | 0) != 0);
  ___unlock(281416);
 } while (0);
 return i1 | 0;
}

function _fputc(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) >= 0 ? (___lockfile(i4) | 0) != 0 : 0) {
  if ((HEAP8[i4 + 75 >> 0] | 0) != (i3 | 0) ? (i2 = HEAP32[i4 + 20 >> 2] | 0, i2 >>> 0 < (HEAP32[i4 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i4 + 20 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i3;
   i1 = i3 & 255;
  } else i1 = ___overflow(i4, i3) | 0;
  ___unlockfile(i4);
 } else i5 = 3;
 do if ((i5 | 0) == 3) {
  if ((HEAP8[i4 + 75 >> 0] | 0) != (i3 | 0) ? (i1 = HEAP32[i4 + 20 >> 2] | 0, i1 >>> 0 < (HEAP32[i4 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i4 + 20 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i3;
   i1 = i3 & 255;
   break;
  }
  i1 = ___overflow(i4, i3) | 0;
 } while (0);
 return i1 | 0;
}

function _cff_size_done(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i2 + 692 >> 2] | 0;
 i4 = HEAP32[i1 + 40 >> 2] | 0;
 if (!i4) return;
 i1 = HEAP32[(HEAP32[i2 + 692 >> 2] | 0) + 2952 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) return;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) return;
 i2 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i2) return;
 FUNCTION_TABLE_vi[HEAP32[i2 + 8 >> 2] & 127](HEAP32[i4 >> 2] | 0);
 i1 = HEAP32[i3 + 1896 >> 2] | 0;
 if (!i1) return;
 do {
  i1 = i1 + -1 | 0;
  FUNCTION_TABLE_vi[HEAP32[i2 + 8 >> 2] & 127](HEAP32[i4 + 4 + (i1 << 2) >> 2] | 0);
 } while ((i1 | 0) != 0);
 return;
}

function _scalbn(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 var i3 = 0;
 if ((i1 | 0) > 1023) if ((i1 + -1023 | 0) > 1023) {
  i1 = (i1 + -2046 | 0) > 1023 ? 1023 : i1 + -2046 | 0;
  d2 = d2 * 89884656743115795.0e291 * 89884656743115795.0e291;
 } else {
  i1 = i1 + -1023 | 0;
  d2 = d2 * 89884656743115795.0e291;
 } else if ((i1 | 0) < -1022) if ((i1 + 1022 | 0) < -1022) {
  i1 = (i1 + 2044 | 0) < -1022 ? -1022 : i1 + 2044 | 0;
  d2 = d2 * 2.2250738585072014e-308 * 2.2250738585072014e-308;
 } else {
  i1 = i1 + 1022 | 0;
  d2 = d2 * 2.2250738585072014e-308;
 }
 i3 = _bitshift64Shl(i1 + 1023 | 0, 0, 52) | 0;
 i1 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i3;
 HEAP32[tempDoublePtr + 4 >> 2] = i1;
 return +(d2 * +HEAPF64[tempDoublePtr >> 3]);
}

function _tt_name_entry_ascii_from_other(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = HEAP16[i1 + 8 >> 1] | 0;
 i5 = _ft_mem_realloc(i2, 1, 0, (i4 & 65535) + 1 | 0, 0, i6) | 0;
 if (HEAP32[i6 >> 2] | 0) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 L4 : do if (!(i4 << 16 >> 16)) i1 = 0; else {
  i1 = 0;
  while (1) {
   i2 = HEAP8[i3 >> 0] | 0;
   if (!(i2 << 24 >> 24)) break L4;
   HEAP8[i5 + i1 >> 0] = (i2 & 255) < 32 | i2 << 24 >> 24 < 0 ? 63 : i2;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 < (i4 & 65535) >>> 0) i3 = i3 + 1 | 0; else break;
  }
 } while (0);
 HEAP8[i5 + i1 >> 0] = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZN5ImageC2ERKS_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP8[i4 + 8 >> 0] = HEAP8[i3 + 8 >> 0] | 0;
 HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 HEAP32[i4 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAP32[i3 + 24 >> 2];
 HEAP32[i4 + 28 >> 2] = HEAP32[i3 + 28 >> 2];
 HEAP32[i4 + 32 >> 2] = HEAP32[i3 + 32 >> 2];
 do if (!(HEAP8[i3 + 8 >> 0] | 0)) i1 = HEAP32[i3 >> 2] | 0; else {
  i1 = HEAP32[i3 >> 2] | 0;
  if (!i1) break;
  i1 = __Znaj(i2) | 0;
  HEAP32[i4 >> 2] = i1;
  _memcpy(i1 | 0, HEAP32[i3 >> 2] | 0, i2 | 0) | 0;
  return;
 } while (0);
 HEAP32[i4 >> 2] = i1;
 return;
}

function _cycle(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 L1 : do if ((i5 | 0) >= 2 ? (HEAP32[i4 + (i5 << 2) >> 2] = i6, (i1 | 0) != 0) : 0) {
  i2 = i6;
  while (1) {
   i3 = i1 >>> 0 > 256 ? 256 : i1;
   _memcpy(i2 | 0, HEAP32[i4 >> 2] | 0, i3 | 0) | 0;
   i2 = 0;
   do {
    i7 = i4 + (i2 << 2) | 0;
    i2 = i2 + 1 | 0;
    _memcpy(HEAP32[i7 >> 2] | 0, HEAP32[i4 + (i2 << 2) >> 2] | 0, i3 | 0) | 0;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i3;
   } while ((i2 | 0) != (i5 | 0));
   if ((i1 | 0) == (i3 | 0)) break L1;
   i1 = i1 - i3 | 0;
   i2 = HEAP32[i4 + (i5 << 2) >> 2] | 0;
  }
 } while (0);
 STACKTOP = i6;
 return;
}

function _tt_face_load_strike_metrics(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 if ((HEAP32[i1 + 612 >> 2] | 0) >>> 0 <= i3 >>> 0) {
  i3 = 6;
  return i3 | 0;
 }
 i5 = HEAP32[i1 + 616 >> 2] | 0;
 HEAP16[i2 >> 1] = HEAPU8[i5 + (i3 * 48 | 0) + 44 >> 0] | 0;
 HEAP16[i2 + 2 >> 1] = HEAPU8[i5 + (i3 * 48 | 0) + 45 >> 0] | 0;
 i4 = HEAP8[i5 + (i3 * 48 | 0) + 16 >> 0] << 6;
 HEAP32[i2 + 12 >> 2] = i4;
 i1 = HEAP8[i5 + (i3 * 48 | 0) + 17 >> 0] << 6;
 HEAP32[i2 + 16 >> 2] = i1;
 HEAP32[i2 + 24 >> 2] = (HEAPU8[i5 + (i3 * 48 | 0) + 18 >> 0] | 0) + (HEAP8[i5 + (i3 * 48 | 0) + 22 >> 0] | 0) + (HEAP8[i5 + (i3 * 48 | 0) + 23 >> 0] | 0) << 6;
 HEAP32[i2 + 20 >> 2] = i4 - i1;
 i3 = 0;
 return i3 | 0;
}

function _Dual_Project(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP16[i3 + 290 >> 1] | 0;
 i3 = HEAP16[i3 + 292 >> 1] | 0;
 i4 = Math_imul(i5, i1 & 65535) | 0;
 i1 = Math_imul(i5, i1 >> 16) | 0;
 i5 = Math_imul(i3, i2 & 65535) | 0;
 i2 = Math_imul(i3, i2 >> 16) | 0;
 i3 = (i2 << 16) + i5 + ((i1 << 16) + i4) | 0;
 i2 = (i1 >> 16) + (i4 >> 31) + (i5 >> 31) + (i2 >> 16) + (((i1 << 16) + i4 | 0) >>> 0 < i4 >>> 0 & 1) + (((i2 << 16) + i5 | 0) >>> 0 < i5 >>> 0 & 1) + (i3 >>> 0 < ((i1 << 16) + i4 | 0) >>> 0 & 1) | 0;
 return (i2 >> 31) + i2 + (((i2 >> 31) + i3 | 0) >>> 0 < i3 >>> 0 & 1) + (((i2 >> 31) + i3 | 0) >>> 0 > 4294959103 & 1) << 18 | ((i2 >> 31) + i3 + 8192 | 0) >>> 14 | 0;
}

function __ZN8Graphics32TextureFormatSupportsInitialDataE13TextureFormat(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 L1 : do if ((i1 | 0) >= 47) {
  if ((i1 | 0) < 55) switch (i1 | 0) {
  case 54:
  case 47:
   {
    i1 = 0;
    break L1;
   }
  default:
   {
    i2 = 2;
    break L1;
   }
  }
  if ((i1 | 0) < 1048582) switch (i1 | 0) {
  case 55:
   {
    i1 = 0;
    break L1;
   }
  default:
   {
    i2 = 2;
    break L1;
   }
  } else switch (i1 | 0) {
  case 1048582:
   {
    i1 = 0;
    break L1;
   }
  default:
   {
    i2 = 2;
    break L1;
   }
  }
 } else switch (i1 | 0) {
 case 10:
 case 34:
 case 45:
 case 46:
  {
   i1 = 0;
   break;
  }
 default:
  i2 = 2;
 } while (0);
 if ((i2 | 0) == 2) i1 = 1;
 return i1 | 0;
}

function __Z25StringToEngineTextureTypePKc(i1) {
 i1 = i1 | 0;
 if ((i1 | 0) == 304121) {
  i1 = 0;
  return i1 | 0;
 }
 if (!i1) {
  i1 = 2147483647;
  return i1 | 0;
 }
 if ((i1 | 0) == 304136 | (_strcasecmp(i1, 304121) | 0) == 0) {
  i1 = 0;
  return i1 | 0;
 }
 if ((i1 | 0) == 304146 | (_strcasecmp(i1, 304136) | 0) == 0) {
  i1 = 0;
  return i1 | 0;
 }
 if ((i1 | 0) == 304168 | (_strcasecmp(i1, 304146) | 0) == 0) {
  i1 = 0;
  return i1 | 0;
 }
 if ((i1 | 0) == 304191 | (_strcasecmp(i1, 304168) | 0) == 0) {
  i1 = 0;
  return i1 | 0;
 }
 if ((i1 | 0) == 304209 | (_strcasecmp(i1, 304191) | 0) == 0) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = (_strcasecmp(i1, 304209) | 0) == 0;
 i1 = i1 ? 0 : 2147483647;
 return i1 | 0;
}

function _Project(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP16[i3 + 294 >> 1] | 0;
 i3 = HEAP16[i3 + 296 >> 1] | 0;
 i4 = Math_imul(i5, i1 & 65535) | 0;
 i1 = Math_imul(i5, i1 >> 16) | 0;
 i5 = Math_imul(i3, i2 & 65535) | 0;
 i2 = Math_imul(i3, i2 >> 16) | 0;
 i3 = (i2 << 16) + i5 + ((i1 << 16) + i4) | 0;
 i2 = (i1 >> 16) + (i4 >> 31) + (i5 >> 31) + (i2 >> 16) + (((i1 << 16) + i4 | 0) >>> 0 < i4 >>> 0 & 1) + (((i2 << 16) + i5 | 0) >>> 0 < i5 >>> 0 & 1) + (i3 >>> 0 < ((i1 << 16) + i4 | 0) >>> 0 & 1) | 0;
 return (i2 >> 31) + i2 + (((i2 >> 31) + i3 | 0) >>> 0 < i3 >>> 0 & 1) + (((i2 >> 31) + i3 | 0) >>> 0 > 4294959103 & 1) << 18 | ((i2 >> 31) + i3 + 8192 | 0) >>> 14 | 0;
}

function __Z20Browser_OnWheelEventiPK20EmscriptenWheelEventPv(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if (!i2) {
  STACKTOP = i1;
  return 0;
 }
 HEAP32[i1 >> 2] = 3;
 HEAP32[i1 + 4 >> 2] = 1;
 HEAP32[i1 + 8 >> 2] = (HEAP32[i3 + 60 >> 2] | 0) * 100;
 HEAP32[i1 + 12 >> 2] = (HEAP32[i3 + 64 >> 2] | 0) * 100;
 HEAP32[i1 + 20 >> 2] = 6;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 2;
 HEAPF32[i1 + 328 >> 2] = Math_fround(+HEAPF64[i3 + 72 >> 3]);
 HEAPF32[i1 + 332 >> 2] = Math_fround(+HEAPF64[i3 + 80 >> 3]);
 HEAPF32[i1 + 336 >> 2] = Math_fround(+HEAPF64[i3 + 88 >> 3]);
 __ZN5Input15OnNewInputEventER10InputEvent(i2, i1);
 STACKTOP = i1;
 return 0;
}

function _strcasecmp(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP8[i2 >> 0] | 0;
 L1 : do if (!(i3 << 24 >> 24)) i2 = 0; else {
  i5 = i3;
  i4 = i3 & 255;
  while (1) {
   i3 = HEAP8[i1 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i2 = i5;
    break L1;
   }
   if (i5 << 24 >> 24 != i3 << 24 >> 24 ? (i5 = _tolower(i4) | 0, (i5 | 0) != (_tolower(HEAPU8[i1 >> 0] | 0) | 0)) : 0) break;
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
   i3 = HEAP8[i2 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i2 = 0;
    break L1;
   } else {
    i5 = i3;
    i4 = i3 & 255;
   }
  }
  i2 = HEAP8[i2 >> 0] | 0;
 } while (0);
 i5 = _tolower(i2 & 255) | 0;
 return i5 - (_tolower(HEAPU8[i1 >> 0] | 0) | 0) | 0;
}

function __Z28AppendTextVertexDataColorU32R12VertexBufferR12FTGlyphCacheN4math6float3ERK6StringP6FTFontimRKS4_SB_f(i8, i3, i6, i7, i2, i5, i1, i9, i10, f4) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 f4 = Math_fround(f4);
 var i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i11 + 4 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i11 + 4 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i11 + 4 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 __Z20AppendTextVertexDataImEvR12VertexBufferR12FTGlyphCacheN4math6float3ERK6StringP6FTFontiRKT_RKS5_SF_f(i8, i3, i11 + 4 | 0, i7, i2, i5, i11, i9, i10, f4);
 STACKTOP = i11;
 return;
}

function ___remdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i9 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i1 = _i64Subtract(i7 ^ i1, i6 ^ i2, i7, i6) | 0;
 i2 = tempRet0;
 ___udivmoddi4(i1, i2, _i64Subtract(i9 ^ i3, i8 ^ i4, i9, i8) | 0, tempRet0, i5 | 0) | 0;
 i4 = _i64Subtract(HEAP32[i5 >> 2] ^ i7, HEAP32[i5 + 4 >> 2] ^ i6, i7, i6) | 0;
 i3 = tempRet0;
 STACKTOP = i5;
 return (tempRet0 = i3, i4) | 0;
}

function __ZN4math6float34LerpERKS0_S2_f(i2, i1, i3, f4) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 var f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0;
 f8 = Math_fround(Math_fround(1.0) - f4);
 f7 = Math_fround(f8 * Math_fround(HEAPF32[i1 >> 2]));
 f9 = Math_fround(f8 * Math_fround(HEAPF32[i1 + 4 >> 2]));
 f8 = Math_fround(f8 * Math_fround(HEAPF32[i1 + 8 >> 2]));
 f6 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) * f4);
 f5 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) * f4);
 f5 = Math_fround(f9 + f5);
 f4 = Math_fround(f8 + Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) * f4));
 HEAPF32[i2 >> 2] = Math_fround(f7 + f6);
 HEAPF32[i2 + 4 >> 2] = f5;
 HEAPF32[i2 + 8 >> 2] = f4;
 return;
}

function _FT_GlyphLoader_CheckSubGlyphs(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 i3 = (HEAP32[i4 + 48 >> 2] | 0) + i1 + (HEAP32[i4 + 84 >> 2] | 0) | 0;
 i1 = HEAP32[i4 + 12 >> 2] | 0;
 if (i3 >>> 0 <= i1 >>> 0) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = _ft_mem_realloc(i2, 32, i1, i3 + 1 & -2, HEAP32[i4 + 52 >> 2] | 0, i5) | 0;
 HEAP32[i4 + 52 >> 2] = i1;
 i2 = HEAP32[i5 >> 2] | 0;
 if (i2) {
  i4 = i2;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i4 + 12 >> 2] = i3 + 1 & -2;
 HEAP32[i4 + 88 >> 2] = i1 + (HEAP32[i4 + 48 >> 2] << 5);
 i4 = 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _t1_builder_add_point(i2, i4, i5, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 if (!(HEAP8[i2 + 68 >> 0] | 0)) {
  i5 = i1 + 2 | 0;
  i4 = HEAP16[i5 >> 1] | 0;
  i4 = i4 + 1 << 16 >> 16;
  HEAP16[i5 >> 1] = i4;
  return;
 } else {
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  i6 = HEAP16[i1 + 2 >> 1] | 0;
  i2 = (HEAP32[i1 + 8 >> 2] | 0) + i6 | 0;
  HEAP32[i7 + (i6 << 3) >> 2] = (_FT_RoundFix(i4) | 0) >> 16;
  HEAP32[i7 + (i6 << 3) + 4 >> 2] = (_FT_RoundFix(i5) | 0) >> 16;
  HEAP8[i2 >> 0] = i3 << 24 >> 24 != 0 ? 1 : 2;
  i5 = i1 + 2 | 0;
  i4 = HEAP16[i5 >> 1] | 0;
  i4 = i4 + 1 << 16 >> 16;
  HEAP16[i5 >> 1] = i4;
  return;
 }
}

function __ZNK4math6float35CrossERKS0_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0, f10 = f0;
 f7 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f5 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f6 = Math_fround(f7 * f5);
 f10 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f9 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f6 = Math_fround(f6 - Math_fround(f10 * f9));
 f4 = Math_fround(HEAPF32[i2 >> 2]);
 f10 = Math_fround(f10 * f4);
 f8 = Math_fround(HEAPF32[i3 >> 2]);
 f5 = Math_fround(f10 - Math_fround(f5 * f8));
 f4 = Math_fround(Math_fround(f9 * f8) - Math_fround(f7 * f4));
 HEAPF32[i1 >> 2] = f6;
 HEAPF32[i1 + 4 >> 2] = f5;
 HEAPF32[i1 + 8 >> 2] = f4;
 return;
}

function _T1_Get_Multi_Master(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP32[i1 + 532 >> 2] | 0;
 if (!i1) {
  i4 = 6;
  return i4 | 0;
 }
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 >> 2];
 if (!i2) {
  i4 = 0;
  return i4 | 0;
 } else i3 = 0;
 do {
  HEAP32[i4 + 8 + (i3 * 12 | 0) >> 2] = HEAP32[i1 + 8 + (i3 << 2) >> 2];
  i5 = HEAP32[i1 + 88 + (i3 * 12 | 0) + 4 >> 2] | 0;
  HEAP32[i4 + 8 + (i3 * 12 | 0) + 4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i4 + 8 + (i3 * 12 | 0) + 8 >> 2] = HEAP32[i5 + ((HEAPU8[i1 + 88 + (i3 * 12 | 0) >> 0] | 0) + -1 << 2) >> 2];
  i3 = i3 + 1 | 0;
 } while (i3 >>> 0 < i2 >>> 0);
 i1 = 0;
 return i1 | 0;
}

function _t1_cmap_std_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 if (i1 >>> 0 >= 256) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = FUNCTION_TABLE_ii[HEAP32[i2 + 20 >> 2] & 63](HEAPU16[(HEAP32[i2 + 16 >> 2] | 0) + (i1 << 1) >> 1] | 0) | 0;
 i4 = HEAP32[i2 + 24 >> 2] | 0;
 if (!i4) {
  i5 = 0;
  return i5 | 0;
 }
 i2 = HEAP32[i2 + 28 >> 2] | 0;
 i1 = 0;
 while (1) {
  i3 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
  if (((i3 | 0) != 0 ? (HEAP8[i3 >> 0] | 0) == (HEAP8[i5 >> 0] | 0) : 0) ? (_strcmp(i3, i5) | 0) == 0 : 0) {
   i2 = 8;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= i4 >>> 0) {
   i1 = 0;
   i2 = 8;
   break;
  }
 }
 if ((i2 | 0) == 8) return i1 | 0;
 return 0;
}

function _Horizontal_Sweep_Span(i5, i6, i3, i4, i1, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 if ((i4 - i3 | 0) >= (i1 | 0)) return;
 if ((i3 + -1 + i1 & 0 - i1 | 0) != (0 - i1 & i4 | 0)) return;
 i1 = (i3 + -1 + i1 & 0 - i1) >> HEAP32[i5 >> 2];
 if ((i1 | 0) <= -1) return;
 i2 = HEAP32[i5 + 104 >> 2] | 0;
 if ((i1 | 0) >= (i2 | 0)) return;
 i3 = HEAP32[i5 + 112 >> 2] | 0;
 i1 = (i6 << 16 >> 16 >> 3) - (Math_imul(i3, i1) | 0) | 0;
 if ((i3 | 0) > 0) i1 = i1 + (Math_imul(i3, i2 + -1 | 0) | 0) | 0;
 i5 = (HEAP32[i5 + 60 >> 2] | 0) + i1 | 0;
 HEAP8[i5 >> 0] = HEAPU8[i5 >> 0] | 0 | 128 >>> (i6 & 7);
 return;
}

function ___overflow(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP8[i5 >> 0] = i3;
 i1 = HEAP32[i4 + 16 >> 2] | 0;
 if (!i1) if (!(___towrite(i4) | 0)) {
  i1 = HEAP32[i4 + 16 >> 2] | 0;
  i2 = 4;
 } else i1 = -1; else i2 = 4;
 do if ((i2 | 0) == 4) {
  i2 = HEAP32[i4 + 20 >> 2] | 0;
  if (i2 >>> 0 < i1 >>> 0 ? (i3 & 255 | 0) != (HEAP8[i4 + 75 >> 0] | 0) : 0) {
   HEAP32[i4 + 20 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i3;
   i1 = i3 & 255;
   break;
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i4 + 36 >> 2] & 127](i4, i5, 1) | 0) == 1) i1 = HEAPU8[i5 >> 0] | 0; else i1 = -1;
 } while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _frexp(d1, i5) {
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i4 = _bitshift64Lshr(i2 | 0, i3 | 0, 52) | 0;
 switch (i4 & 2047 | 0) {
 case 0:
  {
   if (d1 != 0.0) {
    d1 = +_frexp(d1 * 18446744073709552.0e3, i5);
    i2 = (HEAP32[i5 >> 2] | 0) + -64 | 0;
   } else i2 = 0;
   HEAP32[i5 >> 2] = i2;
   break;
  }
 case 2047:
  break;
 default:
  {
   HEAP32[i5 >> 2] = (i4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = i2;
   HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1071644672;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d1;
}

function _atol(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 while (1) {
  i4 = i1 + 1 | 0;
  if (!(_isspace(HEAP8[i1 >> 0] | 0) | 0)) break; else i1 = i4;
 }
 i2 = HEAP8[i1 >> 0] | 0;
 switch (i2 << 24 >> 24 | 0) {
 case 45:
  {
   i3 = 1;
   i5 = 5;
   break;
  }
 case 43:
  {
   i3 = 0;
   i5 = 5;
   break;
  }
 default:
  i3 = 0;
 }
 if ((i5 | 0) == 5) {
  i1 = i4;
  i2 = HEAP8[i4 >> 0] | 0;
 }
 i2 = (i2 << 24 >> 24) + -48 | 0;
 if (i2 >>> 0 < 10) {
  i4 = i1;
  i1 = 0;
  do {
   i4 = i4 + 1 | 0;
   i1 = (i1 * 10 | 0) - i2 | 0;
   i2 = (HEAP8[i4 >> 0] | 0) + -48 | 0;
  } while (i2 >>> 0 < 10);
 } else i1 = 0;
 return ((i3 | 0) != 0 ? i1 : 0 - i1 | 0) | 0;
}

function _atoi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 while (1) {
  i4 = i1 + 1 | 0;
  if (!(_isspace(HEAP8[i1 >> 0] | 0) | 0)) break; else i1 = i4;
 }
 i2 = HEAP8[i1 >> 0] | 0;
 switch (i2 << 24 >> 24 | 0) {
 case 45:
  {
   i3 = 1;
   i5 = 5;
   break;
  }
 case 43:
  {
   i3 = 0;
   i5 = 5;
   break;
  }
 default:
  i3 = 0;
 }
 if ((i5 | 0) == 5) {
  i1 = i4;
  i2 = HEAP8[i4 >> 0] | 0;
 }
 i2 = (i2 << 24 >> 24) + -48 | 0;
 if (i2 >>> 0 < 10) {
  i4 = i1;
  i1 = 0;
  do {
   i4 = i4 + 1 | 0;
   i1 = (i1 * 10 | 0) - i2 | 0;
   i2 = (HEAP8[i4 >> 0] | 0) + -48 | 0;
  } while (i2 >>> 0 < 10);
 } else i1 = 0;
 return ((i3 | 0) != 0 ? i1 : 0 - i1 | 0) | 0;
}

function __ZN11Application13ScreenResizedEiii17ScreenOrientation(i5, i4, i2, i1, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var f6 = f0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = __Z25ScreenOrientationToString17ScreenOrientation(i3) | 0;
 HEAP32[i1 >> 2] = i4;
 HEAP32[i1 + 4 >> 2] = i2;
 HEAP32[i1 + 8 >> 2] = i3;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 289184, i1);
 f6 = Math_fround(__ZNK8Graphics11ScreenWidthEv(i5 + 4 | 0) | 0);
 __ZN4math7Frustum28SetVerticalFovAndAspectRatioEff(i5 + 2288 | 0, Math_fround(1.57079637), Math_fround(f6 / Math_fround(__ZNK8Graphics12ScreenHeightEv(i5 + 4 | 0) | 0)));
 STACKTOP = i1;
 return;
}

function ___fseeko_unlocked(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i3 | 0) == 1) i1 = i1 - (HEAP32[i2 + 8 >> 2] | 0) + (HEAP32[i2 + 4 >> 2] | 0) | 0;
 if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[i2 + 36 >> 2] & 127](i2, 0, 0) | 0, (HEAP32[i2 + 20 >> 2] | 0) == 0) : 0) i1 = -1; else {
  HEAP32[i2 + 16 >> 2] = 0;
  HEAP32[i2 + 28 >> 2] = 0;
  HEAP32[i2 + 20 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[i2 + 40 >> 2] & 127](i2, i1, i3) | 0) < 0) i1 = -1; else {
   HEAP32[i2 + 8 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -17;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _ft_lzw_stream_close(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i5 + 12 >> 2] | 0;
 if (!i1) return;
 i3 = HEAP32[i5 + 28 >> 2] | 0;
 i4 = HEAP32[i1 + 180 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP8[i1 + 44 >> 0] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 104 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 9;
 HEAP32[i1 + 12 >> 2] = 0;
 i2 = HEAP32[i1 + 100 >> 2] | 0;
 if ((i2 | 0) != (i1 + 112 | 0)) {
  _ft_mem_free(i4, i2);
  HEAP32[i1 + 100 >> 2] = 0;
 }
 _ft_mem_free(i4, HEAP32[i1 + 88 >> 2] | 0);
 _memset(i1 | 0, 0, 184) | 0;
 _ft_mem_free(i3, i1);
 HEAP32[i5 + 12 >> 2] = 0;
 return;
}

function __Z21DecodeCompressedImagePKv13TextureFormatiiPhjS1_(i1, i7, i6, i5, i4, i2, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i7 | 0) == 71) {
  i7 = __Z10DecodeDXT1PKviiPhj13TextureFormat(i1, i6, i5, i4, i2, i3) | 0;
  STACKTOP = i8;
  return i7 | 0;
 } else {
  i6 = __Z21TextureFormatToString13TextureFormat(i7) | 0;
  i7 = __Z21TextureFormatToString13TextureFormat(i3) | 0;
  HEAP32[i8 >> 2] = i6;
  HEAP32[i8 + 4 >> 2] = i7;
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305681, i8);
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 return 0;
}

function __ZN8Graphics6DeinitEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if (HEAP32[i3 + 284 >> 2] | 0) {
  _glDeleteFramebuffers(1, i3 + 284 | 0);
  HEAP32[i3 + 284 >> 2] = 0;
 }
 i1 = HEAP32[i3 + 148 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  _eglMakeCurrent(i2 | 0, 0, 0, 0) | 0;
  i1 = HEAP32[i3 + 148 >> 2] | 0;
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  if (i2) {
   _eglDestroyContext(HEAP32[i1 >> 2] | 0, i2 | 0) | 0;
   i1 = HEAP32[i3 + 148 >> 2] | 0;
  }
  _eglTerminate(HEAP32[i1 >> 2] | 0) | 0;
  i1 = HEAP32[i3 + 148 >> 2] | 0;
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i3 + 148 >> 2] = 0;
 return;
}

function __ZN8Graphics13ApplyMaterialEPK8Material(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP32[i3 + 64 >> 2] = i2;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((HEAP32[i3 + 288 >> 2] | 0) != (i1 | 0)) {
  _glUseProgram(i1 | 0);
  HEAP32[i3 + 288 >> 2] = HEAP32[i2 >> 2];
 }
 if ((HEAP32[i3 + 68 >> 2] | 0) == (i2 | 0)) return;
 HEAP32[i3 + 68 >> 2] = i2;
 i1 = HEAP32[i2 + 52 >> 2] | 0;
 if (i1) __ZN8Graphics20ApplyRasterizerStateEPK15RasterizerState(i3, i1);
 i1 = HEAP32[i2 + 56 >> 2] | 0;
 if (i1) __ZN8Graphics15ApplyBlendStateEPK10BlendState(i3, i1);
 i1 = HEAP32[i2 + 60 >> 2] | 0;
 if (!i1) return;
 __ZN8Graphics15ApplyDepthStateEPK10DepthState(i3, i1);
 return;
}

function _BDF_Face_Done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 i2 = HEAP32[i1 + 100 >> 2] | 0;
 _bdf_free_font(HEAP32[i1 + 140 >> 2] | 0);
 _ft_mem_free(i2, HEAP32[i1 + 144 >> 2] | 0);
 HEAP32[i1 + 144 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i1 + 132 >> 2] | 0);
 HEAP32[i1 + 132 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i1 + 136 >> 2] | 0);
 HEAP32[i1 + 136 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i1 + 20 >> 2] | 0);
 HEAP32[i1 + 20 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i1 + 24 >> 2] | 0);
 HEAP32[i1 + 24 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i1 + 32 >> 2] | 0);
 HEAP32[i1 + 32 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i1 + 140 >> 2] | 0);
 HEAP32[i1 + 140 >> 2] = 0;
 return;
}

function _raccess_guess_darwin_newvfs(i2, i1, i4, i7, i8) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = _strlen(i4) | 0;
 i5 = _ft_mem_alloc(HEAP32[i2 >> 2] | 0, i3 + 18 | 0, i6) | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1) {
  i8 = i1;
  STACKTOP = i6;
  return i8 | 0;
 }
 _memcpy(i5 | 0, i4 | 0, i3 | 0) | 0;
 i1 = i5 + i3 | 0;
 i2 = 322510;
 i3 = i1 + 18 | 0;
 do {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 } while ((i1 | 0) < (i3 | 0));
 HEAP32[i7 >> 2] = i5;
 HEAP32[i8 >> 2] = 0;
 i8 = 0;
 STACKTOP = i6;
 return i8 | 0;
}

function __Z24WWWGLSupportsGLExtensionPKc(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 L1 : do if (i3) {
  i1 = _glGetString(7939) | 0;
  if (!i1) {
   __ZN4math22PrintToConsoleVariadicEjPKcz(2, 305767, i4);
   i1 = 0;
   break;
  }
  i1 = _strstr(i1, i3) | 0;
  if (i1) {
   i2 = _strlen(i3) | 0;
   while (1) {
    switch (HEAP8[i1 + i2 >> 0] | 0) {
    case 0:
    case 32:
     {
      i1 = 1;
      break L1;
     }
    default:
     {}
    }
    i1 = _strstr(i1 + 1 | 0, i3) | 0;
    if (!i1) {
     i1 = 0;
     break L1;
    }
   }
  } else i1 = 0;
 } else i1 = 0; while (0);
 STACKTOP = i4;
 return i1 | 0;
}

function _T42_Size_Request(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i3 >> 2] | 0;
 _FT_Activate_Size(HEAP32[i3 + 44 >> 2] | 0) | 0;
 i1 = _FT_Request_Size(HEAP32[i2 + 500 >> 2] | 0, i1) | 0;
 if (i1) return i1 | 0;
 i2 = (HEAP32[(HEAP32[i2 + 500 >> 2] | 0) + 88 >> 2] | 0) + 12 | 0;
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 12 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 12 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i3 + 12 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i3 + 12 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i3 + 12 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 return i1 | 0;
}

function _tt_face_load_hhea(i3, i4, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 + 508 >> 2] | 0;
 do if (!(i2 << 24 >> 24)) {
  i1 = FUNCTION_TABLE_iiiii[i1 & 63](i3, 1751672161, i4, 0) | 0;
  if (!i1) {
   i2 = i3 + 216 | 0;
   break;
  } else {
   i4 = i1;
   return i4 | 0;
  }
 } else {
  i1 = FUNCTION_TABLE_iiiii[i1 & 63](i3, 1986553185, i4, 0) | 0;
  if (!i1) {
   i2 = i3 + 300 | 0;
   break;
  } else {
   i4 = i1;
   return i4 | 0;
  }
 } while (0);
 i1 = _FT_Stream_ReadFields(i4, 286132, i2) | 0;
 if (i1) {
  i4 = i1;
  return i4 | 0;
 }
 HEAP32[i2 + 36 >> 2] = 0;
 HEAP32[i2 + 40 >> 2] = 0;
 i4 = 0;
 return i4 | 0;
}

function _T42_Size_Select(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i3 >> 2] | 0;
 _FT_Activate_Size(HEAP32[i3 + 44 >> 2] | 0) | 0;
 i1 = _FT_Select_Size(HEAP32[i2 + 500 >> 2] | 0, i1) | 0;
 if (i1) return i1 | 0;
 i2 = (HEAP32[(HEAP32[i2 + 500 >> 2] | 0) + 88 >> 2] | 0) + 12 | 0;
 HEAP32[i3 + 12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 12 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 12 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i3 + 12 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i3 + 12 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i3 + 12 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 return i1 | 0;
}

function _ft_stub_set_char_sizes(i4, i6, i2, i3, i5) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = HEAP32[(HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + 96 >> 2] | 0) + 12 >> 2] | 0) + 96 >> 2] | 0;
 if (!i1) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = i6;
 HEAP32[i7 + 8 >> 2] = i2;
 i6 = (i3 | 0) == 0 ? i5 : i3;
 HEAP32[i7 + 12 >> 2] = (i6 | 0) == 0 ? 72 : i6;
 HEAP32[i7 + 16 >> 2] = (i6 | 0) == 0 ? 72 : (i5 | 0) == 0 ? i6 : i5;
 i6 = FUNCTION_TABLE_iii[i1 & 255](i4, i7) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _cff_sid_to_glyph_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 692 >> 2] | 0;
 i2 = HEAP16[(HEAP32[i1 + 1160 >> 2] | 0) + (i2 << 1) >> 1] | 0;
 if (i2 << 16 >> 16 == -1) {
  i2 = 0;
  return i2 | 0;
 }
 if ((i2 & 65535) > 390) {
  if ((HEAP32[i1 + 1312 >> 2] | 0) >>> 0 <= ((i2 & 65535) + -391 | 0) >>> 0) {
   i2 = 0;
   return i2 | 0;
  }
  i2 = HEAP32[(HEAP32[i1 + 1316 >> 2] | 0) + ((i2 & 65535) + -391 << 2) >> 2] | 0;
  return i2 | 0;
 } else {
  i1 = HEAP32[i1 + 2956 >> 2] | 0;
  if (!i1) {
   i2 = 0;
   return i2 | 0;
  }
  i2 = FUNCTION_TABLE_ii[HEAP32[i1 + 20 >> 2] & 63](i2 & 65535) | 0;
  return i2 | 0;
 }
 return 0;
}

function _FT_Add_Default_Modules(i1) {
 i1 = i1 | 0;
 _FT_Add_Module(i1, 273396) | 0;
 _FT_Add_Module(i1, 263048) | 0;
 _FT_Add_Module(i1, 263696) | 0;
 _FT_Add_Module(i1, 265604) | 0;
 _FT_Add_Module(i1, 267388) | 0;
 _FT_Add_Module(i1, 269456) | 0;
 _FT_Add_Module(i1, 269584) | 0;
 _FT_Add_Module(i1, 270480) | 0;
 _FT_Add_Module(i1, 270692) | 0;
 _FT_Add_Module(i1, 280716) | 0;
 _FT_Add_Module(i1, 281184) | 0;
 _FT_Add_Module(i1, 275012) | 0;
 _FT_Add_Module(i1, 275084) | 0;
 _FT_Add_Module(i1, 272800) | 0;
 _FT_Add_Module(i1, 275228) | 0;
 _FT_Add_Module(i1, 275288) | 0;
 _FT_Add_Module(i1, 275348) | 0;
 _FT_Add_Module(i1, 270868) | 0;
 return;
}

function _t1_get_index(i6, i5, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (i5 >>> 0 > 65535) {
  i6 = 0;
  return i6 | 0;
 }
 i4 = HEAP32[i1 + 284 >> 2] | 0;
 if ((i4 | 0) <= 0) {
  i6 = 0;
  return i6 | 0;
 }
 i2 = HEAP32[i1 + 288 >> 2] | 0;
 i1 = 0;
 while (1) {
  i3 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
  if ((((i3 | 0) != 0 ? (HEAP8[i3 >> 0] | 0) == (HEAP8[i6 >> 0] | 0) : 0) ? (_strlen(i3) | 0) == (i5 | 0) : 0) ? (_strncmp(i3, i6, i5) | 0) == 0 : 0) {
   i2 = 9;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i4 | 0)) {
   i1 = 0;
   i2 = 9;
   break;
  }
 }
 if ((i2 | 0) == 9) return i1 | 0;
 return 0;
}

function _FT_Get_Module_Interface(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 if (!((i5 | 0) != 0 & (i6 | 0) != 0)) {
  i7 = 0;
  return i7 | 0;
 }
 i2 = HEAP32[i5 + 16 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  i7 = 0;
  return i7 | 0;
 }
 i4 = i5 + 20 | 0;
 while (1) {
  i3 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  i4 = i4 + 4 | 0;
  if (!(_strcmp(HEAP32[i1 + 8 >> 2] | 0, i6) | 0)) break;
  if (i4 >>> 0 >= (i5 + 20 + (i2 << 2) | 0) >>> 0) {
   i1 = 0;
   i7 = 8;
   break;
  }
 }
 if ((i7 | 0) == 8) return i1 | 0;
 if (!i3) {
  i7 = 0;
  return i7 | 0;
 }
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 return i7 | 0;
}

function _tt_face_goto_table(i1, i4, i7, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i8 = 0;
 i3 = HEAP16[i1 + 152 >> 1] | 0;
 i2 = HEAP32[i1 + 156 >> 2] | 0;
 if (!(i3 << 16 >> 16)) {
  i8 = 142;
  return i8 | 0;
 } else i1 = i2;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i4 | 0) ? (i5 = HEAP32[i1 + 12 >> 2] | 0, (i5 | 0) != 0) : 0) break;
  i1 = i1 + 16 | 0;
  if (i1 >>> 0 >= (i2 + ((i3 & 65535) << 4) | 0) >>> 0) {
   i1 = 142;
   i8 = 8;
   break;
  }
 }
 if ((i8 | 0) == 8) return i1 | 0;
 if (i6) HEAP32[i6 >> 2] = i5;
 i8 = _FT_Stream_Seek(i7, HEAP32[i1 + 8 >> 2] | 0) | 0;
 return i8 | 0;
}

function _Split_Conic(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i1 + 32 >> 2] = i2;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i1 + 24 >> 2] = (i2 + i3 | 0) / 2 | 0;
 i4 = ((HEAP32[i1 >> 2] | 0) + i3 | 0) / 2 | 0;
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i1 + 16 >> 2] = (i4 + ((i2 + i3 | 0) / 2 | 0) | 0) / 2 | 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 HEAP32[i1 + 36 >> 2] = i3;
 i2 = HEAP32[i1 + 12 >> 2] | 0;
 HEAP32[i1 + 28 >> 2] = (i3 + i2 | 0) / 2 | 0;
 i4 = ((HEAP32[i1 + 4 >> 2] | 0) + i2 | 0) / 2 | 0;
 HEAP32[i1 + 12 >> 2] = i4;
 HEAP32[i1 + 20 >> 2] = (i4 + ((i3 + i2 | 0) / 2 | 0) | 0) / 2 | 0;
 return;
}

function _T1_Size_Request(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i2 + 552 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if ((i1 | 0) != 0 & (i2 | 0) != 0 ? (i3 = HEAP32[i1 >> 2] | 0, (i3 | 0) != 0) : 0) {
  i1 = FUNCTION_TABLE_ii[i3 & 63](i2) | 0;
  _FT_Request_Metrics(HEAP32[i5 >> 2] | 0, i4);
  if (!i1) return 0;
  FUNCTION_TABLE_iiiiii[HEAP32[i1 + 4 >> 2] & 63](HEAP32[i5 + 40 >> 2] | 0, HEAP32[i5 + 16 >> 2] | 0, HEAP32[i5 + 20 >> 2] | 0, 0, 0) | 0;
  return 0;
 }
 _FT_Request_Metrics(HEAP32[i5 >> 2] | 0, i4);
 return 0;
}

function _tt_driver_done(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 if (!i1) return;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP16[i1 + 440 >> 1] = 0;
 HEAP16[i1 + 442 >> 1] = 0;
 _ft_mem_free(i3, HEAP32[i1 + 24 >> 2] | 0);
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i1 + 436 >> 2] | 0);
 HEAP32[i1 + 436 >> 2] = 0;
 HEAP32[i1 + 432 >> 2] = 0;
 HEAP32[i1 + 428 >> 2] = 0;
 _ft_mem_free(i3, HEAP32[i1 + 392 >> 2] | 0);
 HEAP32[i1 + 392 >> 2] = 0;
 HEAP32[i1 + 388 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 _ft_mem_free(i3, i1);
 HEAP32[i2 + 28 >> 2] = 0;
 return;
}

function _FT_Stream_Open(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (!i2) {
  i2 = 40;
  return i2 | 0;
 }
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 i1 = _fopen(i1, 387182) | 0;
 if (!i1) {
  i2 = 1;
  return i2 | 0;
 }
 _fseek(i1, 0, 2) | 0;
 i3 = _ftell(i1) | 0;
 HEAP32[i2 + 4 >> 2] = i3;
 if (!i3) {
  _fclose(i1) | 0;
  i3 = 81;
  return i3 | 0;
 } else {
  _fseek(i1, 0, 0) | 0;
  HEAP32[i2 + 12 >> 2] = i1;
  HEAP32[i2 + 20 >> 2] = 41;
  HEAP32[i2 + 24 >> 2] = 85;
  i3 = 0;
  return i3 | 0;
 }
 return 0;
}

function _af_face_globals_free(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) return;
 i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + 100 >> 2] | 0;
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 if (i1) {
  _ft_mem_free(i2, i1);
  HEAP32[i3 + 12 >> 2] = 0;
 }
 i1 = HEAP32[i3 + 16 >> 2] | 0;
 if (i1) {
  _ft_mem_free(i2, i1);
  HEAP32[i3 + 16 >> 2] = 0;
 }
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 if (i1) {
  _ft_mem_free(i2, i1);
  HEAP32[i3 + 20 >> 2] = 0;
 }
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 if (i1) {
  _ft_mem_free(i2, i1);
  HEAP32[i3 + 24 >> 2] = 0;
 }
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 _ft_mem_free(i2, i3);
 return;
}

function __ZN10DepthStateC2Ebb12DepthCmpFunc(i5, i2, i4, i1) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP8[i5 + 6 >> 0] = i2 & 1;
 HEAP8[i5 + 7 >> 0] = i4 & 1;
 HEAP32[i5 + 8 >> 2] = i1;
 if (i4 ^ 1 | i2) {
  i3 = i1;
  i2 = i2 & 1;
  i1 = i4 ? i4 & 1 : 0;
 } else {
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 289892, i6);
  HEAP8[i5 + 7 >> 0] = 0;
  i3 = HEAP32[i5 + 8 >> 2] | 0;
  i2 = HEAP8[i5 + 6 >> 0] | 0;
  i1 = 0;
 }
 HEAP16[i5 + 4 >> 1] = (i1 << 24 >> 24 != 0 ? 2 : 0) | i2 & 255 | i3 << 2;
 STACKTOP = i6;
 return;
}

function __ZNSt3__16__treeINS_12__value_typeIm15ControllerStateEENS_19__map_value_compareImS3_NS_4lessImEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeIm15ControllerStateEENS_19__map_value_compareImS3_NS_4lessImEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeIm15ControllerStateEENS_19__map_value_compareImS3_NS_4lessImEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function __Z23Browser_OnKeyboardEventiPK23EmscriptenKeyboardEventPv(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if (!i3) {
  STACKTOP = i4;
  return 0;
 }
 HEAP32[i4 >> 2] = 2;
 HEAP32[i4 + 4 >> 2] = 1;
 i2 = HEAP32[i2 + 156 >> 2] | 0;
 HEAP32[i4 + 16 >> 2] = i2;
 HEAP32[i4 + 20 >> 2] = i2;
 HEAP32[i4 + 24 >> 2] = (i1 + -1 | 0) >>> 0 < 2 ? 1 : 3;
 HEAPF32[i4 + 336 >> 2] = Math_fround(0.0);
 HEAPF32[i4 + 332 >> 2] = Math_fround(0.0);
 HEAPF32[i4 + 328 >> 2] = Math_fround(0.0);
 __ZN5Input15OnNewInputEventER10InputEvent(i3, i4);
 STACKTOP = i4;
 return 0;
}

function _FT_Get_Next_Char(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (((i3 | 0) != 0 ? (i2 = HEAP32[i3 + 92 >> 2] | 0, (i2 | 0) != 0) : 0) ? (HEAP32[i3 + 16 >> 2] | 0) != 0 : 0) {
  HEAP32[i5 >> 2] = i1;
  do i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 16 >> 2] & 255](i2, i5) | 0; while (i1 >>> 0 >= (HEAP32[i3 + 16 >> 2] | 0) >>> 0);
  i2 = i1;
  i1 = (i1 | 0) == 0 ? 0 : HEAP32[i5 >> 2] | 0;
 } else {
  i2 = 0;
  i1 = 0;
 }
 if (!i4) {
  STACKTOP = i5;
  return i1 | 0;
 }
 HEAP32[i4 >> 2] = i2;
 STACKTOP = i5;
 return i1 | 0;
}

function _memcpy(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i2 | 0) >= 4096) return _emscripten_memcpy_big(i1 | 0, i4 | 0, i2 | 0) | 0;
 i3 = i1 | 0;
 if ((i1 & 3) == (i4 & 3)) {
  while (i1 & 3) {
   if (!i2) return i3 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
   i1 = i1 + 1 | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 - 1 | 0;
  }
  while ((i2 | 0) >= 4) {
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 4 | 0;
   i2 = i2 - 4 | 0;
  }
 }
 while ((i2 | 0) > 0) {
  HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i4 = i4 + 1 | 0;
  i2 = i2 - 1 | 0;
 }
 return i3 | 0;
}

function __ZN4math8float3x4aSERKS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i2 + 24 >> 2] = HEAP32[i1 + 24 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 28 >> 2];
 HEAP32[i2 + 32 >> 2] = HEAP32[i1 + 32 >> 2];
 HEAP32[i2 + 36 >> 2] = HEAP32[i1 + 36 >> 2];
 HEAP32[i2 + 40 >> 2] = HEAP32[i1 + 40 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i1 + 44 >> 2];
 return i2 | 0;
}

function __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i4) {
  i5 = -1;
  return i5 | 0;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = 0;
 i1 = 0;
 while (1) {
  if ((HEAP32[i2 + (i3 * 52 | 0) >> 2] | 0) == (i5 | 0)) {
   i2 = 5;
   break;
  }
  i1 = (Math_imul(HEAPU8[i2 + (i3 * 52 | 0) + 8 >> 0] | 0, HEAP32[540 + (HEAP32[i2 + (i3 * 52 | 0) + 4 >> 2] << 2) >> 2] | 0) | 0) + i1 | 0;
  i3 = i3 + 1 | 0;
  if (i3 >>> 0 >= i4 >>> 0) {
   i1 = -1;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function _FT_Set_Char_Size(i3, i2, i1, i4, i5) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = (i2 | 0) == 0 ? i1 : i2;
 i1 = (i2 | 0) == 0 ? i1 : (i1 | 0) == 0 ? i2 : i1;
 i2 = (i4 | 0) == 0 ? i5 : i4;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = (i7 | 0) < 64 ? 64 : i7;
 HEAP32[i6 + 8 >> 2] = (i1 | 0) < 64 ? 64 : i1;
 HEAP32[i6 + 12 >> 2] = (i2 | 0) == 0 ? 72 : i2;
 HEAP32[i6 + 16 >> 2] = (i2 | 0) == 0 ? 72 : (i4 | 0) == 0 ? i5 : (i5 | 0) == 0 ? i4 : i5;
 i5 = _FT_Request_Size(i3, i6) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _t42_get_name_index(i7, i6) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i2 = HEAP32[i7 + 416 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  i8 = 0;
  return i8 | 0;
 }
 i3 = HEAP32[i7 + 420 >> 2] | 0;
 i4 = HEAP8[i6 >> 0] | 0;
 i1 = 0;
 while (1) {
  i5 = HEAP32[i3 + (i1 << 2) >> 2] | 0;
  if (i4 << 24 >> 24 == (HEAP8[i5 >> 0] | 0) ? (_strcmp(i6, i5) | 0) == 0 : 0) break;
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i2 | 0)) {
   i1 = 0;
   i8 = 7;
   break;
  }
 }
 if ((i8 | 0) == 7) return i1 | 0;
 i8 = _atol(HEAP32[(HEAP32[i7 + 424 >> 2] | 0) + (i1 << 2) >> 2] | 0) | 0;
 return i8 | 0;
}

function _Direct_Move_Orig(i3, i5, i4, i2) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0;
 i1 = HEAP16[i3 + 298 >> 1] | 0;
 if (i1 << 16 >> 16) {
  i6 = _FT_MulDiv(i2, i1 << 16 >> 16 << 16, HEAP32[i3 + 564 >> 2] | 0) | 0;
  i1 = (HEAP32[i5 + 12 >> 2] | 0) + ((i4 & 65535) << 3) | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i6;
 }
 i1 = HEAP16[i3 + 300 >> 1] | 0;
 if (!(i1 << 16 >> 16)) return;
 i3 = _FT_MulDiv(i2, i1 << 16 >> 16 << 16, HEAP32[i3 + 564 >> 2] | 0) | 0;
 i6 = (HEAP32[i5 + 12 >> 2] | 0) + ((i4 & 65535) << 3) + 4 | 0;
 HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i3;
 return;
}

function __ZN6ShaderD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 __ZN6Shader6DeinitEv(i3);
 i1 = HEAP32[i3 + 72 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i3 + 76 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i4 = i2 + -44 | 0;
    HEAP32[i3 + 76 >> 2] = i4;
    __ZN6Shader19UniformBufferObjectD2Ev(i4);
    i2 = HEAP32[i3 + 76 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i3 + 72 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 __ZN6Shader19UniformBufferObjectD2Ev(i3 + 28 | 0);
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 if (!i1) {
  HEAP32[i3 + 8 >> 2] = 0;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i3 + 8 >> 2] = 0;
 return;
}

function _tt_cmap0_validate(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
 if (i2 >>> 0 < 262 ? 1 : (i1 + i2 | 0) >>> 0 > (HEAP32[i3 + 4 >> 2] | 0) >>> 0) _ft_validator_error(i3, 8);
 if (!(HEAP32[i3 + 8 >> 2] | 0)) return 0;
 i2 = 0;
 i1 = i1 + 6 | 0;
 while (1) {
  if ((HEAPU8[i1 >> 0] | 0) >>> 0 >= (HEAP32[i3 + 172 >> 2] | 0) >>> 0) {
   i1 = 6;
   break;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 256) {
   i1 = 8;
   break;
  } else i1 = i1 + 1 | 0;
 }
 if ((i1 | 0) == 6) _ft_validator_error(i3, 16); else if ((i1 | 0) == 8) return 0;
 return 0;
}

function _fopen(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if (_memchr(390116, HEAP8[i3 >> 0] | 0, 4) | 0) {
  i2 = ___fmodeflags(i3) | 0 | 32768;
  HEAP32[i4 >> 2] = i1;
  HEAP32[i4 + 4 >> 2] = i2;
  HEAP32[i4 + 8 >> 2] = 438;
  i2 = ___syscall_ret(___syscall5(5, i4 | 0) | 0) | 0;
  if ((i2 | 0) >= 0) {
   i1 = ___fdopen(i2, i3) | 0;
   if (!i1) {
    HEAP32[i4 + 16 >> 2] = i2;
    ___syscall6(6, i4 + 16 | 0) | 0;
    i1 = 0;
   }
  } else i1 = 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i1 = 0;
 }
 STACKTOP = i4;
 return i1 | 0;
}

function runPostSets() {}
function _saveSetjmp(i1, i3, i5, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[i1 >> 2] = setjmpId;
 while ((i2 | 0) < (i4 | 0)) {
  if (!(HEAP32[i5 + (i2 << 3) >> 2] | 0)) {
   HEAP32[i5 + (i2 << 3) >> 2] = setjmpId;
   HEAP32[i5 + ((i2 << 3) + 4) >> 2] = i3;
   HEAP32[i5 + ((i2 << 3) + 8) >> 2] = 0;
   tempRet0 = i4;
   return i5 | 0;
  }
  i2 = i2 + 1 | 0;
 }
 i4 = i4 * 2 | 0;
 i5 = _realloc(i5 | 0, 8 * (i4 + 1 | 0) | 0) | 0;
 i5 = _saveSetjmp(i1 | 0, i3 | 0, i5 | 0, i4 | 0) | 0;
 tempRet0 = i4;
 return i5 | 0;
}

function __Z8ToString18VertexDataSemantic(i1) {
 i1 = i1 | 0;
 do switch (i1 | 0) {
 case 0:
  {
   i1 = 305314;
   break;
  }
 case 1:
  {
   i1 = 305305;
   break;
  }
 case 2:
  {
   i1 = 305298;
   break;
  }
 case 3:
  {
   i1 = 305290;
   break;
  }
 case 5:
  {
   i1 = 305284;
   break;
  }
 case 6:
  {
   i1 = 305281;
   break;
  }
 case 7:
  {
   i1 = 305269;
   break;
  }
 case 8:
  {
   i1 = 305257;
   break;
  }
 case 9:
  {
   i1 = 305247;
   break;
  }
 case 10:
  {
   i1 = 305240;
   break;
  }
 case 4:
  {
   i1 = 305230;
   break;
  }
 default:
  i1 = 305225;
 } while (0);
 return i1 | 0;
}

function _raccess_make_file_name(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i5 >> 2] = 0;
 i2 = _strlen(i3) | 0;
 i2 = _ft_mem_alloc(i1, i2 + 1 + (_strlen(i4) | 0) | 0, i5) | 0;
 if (HEAP32[i5 >> 2] | 0) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = _strrchr(i3, 47) | 0;
 if (!i1) {
  HEAP8[i2 >> 0] = 0;
  i1 = i3;
 } else {
  _strncpy(i2, i3, i1 - i3 + 1 | 0) | 0;
  HEAP8[i2 + (i1 - i3 + 1) >> 0] = 0;
  i1 = i1 + 1 | 0;
 }
 _strcat(i2, i4) | 0;
 _strcat(i2, i1) | 0;
 i4 = i2;
 STACKTOP = i5;
 return i4 | 0;
}

function _pfr_extra_item_load_font_id(i4, i3, i5) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i6 >> 2] = 0;
 if (HEAP32[i5 + 80 >> 2] | 0) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = _ft_mem_alloc(HEAP32[i5 >> 2] | 0, i3 - i4 + 1 | 0, i6) | 0;
 HEAP32[i5 + 80 >> 2] = i1;
 i2 = HEAP32[i6 >> 2] | 0;
 if (i2) {
  i5 = i2;
  STACKTOP = i6;
  return i5 | 0;
 }
 _memcpy(i1 | 0, i4 | 0, i3 - i4 | 0) | 0;
 HEAP8[(HEAP32[i5 + 80 >> 2] | 0) + (i3 - i4) >> 0] = 0;
 i5 = HEAP32[i6 >> 2] | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _fclose(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) ___lockfile(i4) | 0;
 i3 = (HEAP32[i4 >> 2] & 1 | 0) != 0;
 if (!i3) {
  ___lock(281416);
  i2 = HEAP32[i4 + 52 >> 2] | 0;
  if (i2) HEAP32[i2 + 56 >> 2] = HEAP32[i4 + 56 >> 2];
  i1 = HEAP32[i4 + 56 >> 2] | 0;
  if (i1) HEAP32[i1 + 52 >> 2] = i2;
  if ((HEAP32[70353] | 0) == (i4 | 0)) HEAP32[70353] = i1;
  ___unlock(281416);
 }
 i1 = _fflush(i4) | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 63](i4) | 0 | i1;
 i2 = HEAP32[i4 + 92 >> 2] | 0;
 if (i2) _free(i2);
 if (!i3) _free(i4);
 return i1 | 0;
}

function __ZN10BlendStateC2Eb11BlendSource14BlendOperationS0_S0_S1_S0_b(i9, i7, i4, i6, i5, i1, i3, i2, i8) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP8[i9 + 8 >> 0] = i7 & 1;
 HEAP32[i9 + 12 >> 2] = i4;
 HEAP32[i9 + 16 >> 2] = i6;
 HEAP32[i9 + 20 >> 2] = i5;
 HEAP32[i9 + 24 >> 2] = i1;
 HEAP32[i9 + 28 >> 2] = i3;
 HEAP32[i9 + 32 >> 2] = i2;
 HEAP8[i9 + 36 >> 0] = i8 & 1;
 HEAP32[i9 + 4 >> 2] = i7 & 1 | (i8 ? 4194304 : 0) | i4 << 1 | i6 << 6 | i5 << 9 | i1 << 14 | i3 << 19 | i2 << 22;
 return;
}

function _bdf_cmap_char_index(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 } else i4 = 0;
 while (1) {
  i2 = (i4 + i1 | 0) >>> 1;
  i3 = HEAP32[i5 + (i2 << 3) >> 2] | 0;
  if ((i3 | 0) == (i6 | 0)) break;
  i1 = i3 >>> 0 > i6 >>> 0 ? i2 : i1;
  i4 = i3 >>> 0 > i6 >>> 0 ? i4 : i2 + 1 | 0;
  if (i4 >>> 0 >= i1 >>> 0) {
   i1 = 0;
   i7 = 5;
   break;
  }
 }
 if ((i7 | 0) == 5) return i1 | 0;
 i7 = (HEAPU16[i5 + (i2 << 3) + 4 >> 1] | 0) + 1 & 65535;
 return i7 | 0;
}

function _cff_get_advances(i6, i9, i5, i7, i4) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0;
 i3 = HEAP32[i6 + 84 >> 2] | 0;
 if (!i5) {
  i8 = 0;
  return i8 | 0;
 }
 i2 = (i7 & 16 | 0) == 0 ? i3 + 56 | 0 : i3 + 60 | 0;
 i8 = 0;
 while (1) {
  i1 = _cff_glyph_load(i3, HEAP32[i6 + 88 >> 2] | 0, i8 + i9 | 0, i7 | 256) | 0;
  if (i1) {
   i2 = 5;
   break;
  }
  HEAP32[i4 + (i8 << 2) >> 2] = HEAP32[i2 >> 2];
  i8 = i8 + 1 | 0;
  if (i8 >>> 0 >= i5 >>> 0) {
   i1 = 0;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function _pcf_cmap_char_index(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i1) {
  i7 = 0;
  return i7 | 0;
 } else i4 = 0;
 while (1) {
  i2 = (i4 + i1 | 0) >>> 1;
  i3 = HEAP32[i5 + (i2 << 3) >> 2] | 0;
  if ((i3 | 0) == (i6 | 0)) break;
  i1 = i3 >>> 0 > i6 >>> 0 ? i2 : i1;
  i4 = i3 >>> 0 > i6 >>> 0 ? i4 : i2 + 1 | 0;
  if (i4 >>> 0 >= i1 >>> 0) {
   i1 = 0;
   i7 = 5;
   break;
  }
 }
 if ((i7 | 0) == 5) return i1 | 0;
 i7 = (HEAPU16[i5 + (i2 << 3) + 4 >> 1] | 0) + 1 | 0;
 return i7 | 0;
}

function __ZN5Input12IsKeyPressedE7KeyCode(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = HEAP32[i1 + 644 >> 2] | 0;
 i4 = HEAP32[i1 + 640 >> 2] | 0;
 if ((i3 | 0) == (i4 | 0)) {
  i5 = 0;
  return i5 | 0;
 }
 i1 = HEAP32[i1 + 720 >> 2] | 0;
 i2 = 0;
 while (1) {
  if ((HEAP32[i4 + (i2 * 24 | 0) + 4 >> 2] | 0) == (i1 | 0) ? (HEAP32[i4 + (i2 * 24 | 0) + 16 >> 2] | 0) == (i5 | 0) : 0) {
   i1 = 1;
   i2 = 6;
   break;
  }
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= ((i3 - i4 | 0) / 24 | 0) >>> 0) {
   i1 = 0;
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) return i1 | 0;
 return 0;
}

function _t1_cmap_custom_char_next(i2, i5) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
 i4 = HEAP32[i2 + 16 >> 2] | 0;
 i1 = i1 >>> 0 < i4 >>> 0 ? i4 : i1;
 i4 = (HEAP32[i2 + 20 >> 2] | 0) + i4 | 0;
 L1 : do if (i1 >>> 0 < i4 >>> 0) {
  i2 = HEAP32[i2 + 24 >> 2] | 0;
  while (1) {
   i3 = HEAP16[i2 + (i1 << 1) >> 1] | 0;
   if (i3 << 16 >> 16) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i4 >>> 0) {
    i1 = 0;
    i2 = 0;
    break L1;
   }
  }
  i2 = i3 & 65535;
 } else {
  i1 = 0;
  i2 = 0;
 } while (0);
 HEAP32[i5 >> 2] = i1;
 return i2 | 0;
}

function _TT_Load_Glyph_Header(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 200 >> 2] | 0;
 if ((i1 + 10 | 0) >>> 0 > (HEAP32[i2 + 204 >> 2] | 0) >>> 0) {
  i2 = 20;
  return i2 | 0;
 }
 HEAP16[i2 + 32 >> 1] = HEAP8[i1 >> 0] << 8 | HEAPU8[i1 + 1 >> 0];
 HEAP32[i2 + 36 >> 2] = HEAP8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
 HEAP32[i2 + 40 >> 2] = HEAP8[i1 + 4 >> 0] << 8 | HEAPU8[i1 + 5 >> 0];
 HEAP32[i2 + 44 >> 2] = HEAP8[i1 + 6 >> 0] << 8 | HEAPU8[i1 + 7 >> 0];
 HEAP32[i2 + 48 >> 2] = HEAP8[i1 + 8 >> 0] << 8 | HEAPU8[i1 + 9 >> 0];
 HEAP32[i2 + 200 >> 2] = i1 + 10;
 i2 = 0;
 return i2 | 0;
}

function _realloc(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 do if (i3) {
  if (i2 >>> 0 > 4294967231) {
   HEAP32[(___errno_location() | 0) >> 2] = 12;
   i1 = 0;
   break;
  }
  i1 = _try_realloc_chunk(i3 + -8 | 0, i2 >>> 0 < 11 ? 16 : i2 + 11 & -8) | 0;
  if (i1) {
   i1 = i1 + 8 | 0;
   break;
  }
  i1 = _malloc(i2) | 0;
  if (!i1) i1 = 0; else {
   i4 = HEAP32[i3 + -4 >> 2] | 0;
   i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
   _memcpy(i1 | 0, i3 | 0, (i4 >>> 0 < i2 >>> 0 ? i4 : i2) | 0) | 0;
   _free(i3);
  }
 } else i1 = _malloc(i2) | 0; while (0);
 return i1 | 0;
}

function _fmt_u(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if (i3 >>> 0 > 0 | (i3 | 0) == 0 & i2 >>> 0 > 4294967295) {
  while (1) {
   i4 = ___uremdi3(i2 | 0, i3 | 0, 10, 0) | 0;
   i1 = i1 + -1 | 0;
   HEAP8[i1 >> 0] = i4 | 48;
   i4 = ___udivdi3(i2 | 0, i3 | 0, 10, 0) | 0;
   if (i3 >>> 0 > 9 | (i3 | 0) == 9 & i2 >>> 0 > 4294967295) {
    i2 = i4;
    i3 = tempRet0;
   } else break;
  }
  i2 = i4;
 }
 if (i2) while (1) {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = (i2 >>> 0) % 10 | 0 | 48;
  if (i2 >>> 0 < 10) break; else i2 = (i2 >>> 0) / 10 | 0;
 }
 return i1 | 0;
}

function __ZN9SharedPtrI6ShaderEaSERKS1_(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (i1 | 0)) return i4 | 0;
 if (i3) {
  if (!(HEAP32[i3 >> 2] | 0)) {
   __ZN6ShaderD2Ev(i3);
   __ZdlPv(i3);
  }
  HEAP32[i4 >> 2] = 0;
  i1 = HEAP32[i2 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i1;
 if (i1) {
  i2 = i1;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 if (!i3) return i4 | 0;
 i2 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
 HEAP32[i3 >> 2] = i2;
 if (i2) return i4 | 0;
 __ZN6ShaderD2Ev(i3);
 __ZdlPv(i3);
 return i4 | 0;
}

function __ZN4FileD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if (HEAP8[i3 + 28 >> 0] | 0) {
  HEAP8[i3 + 28 >> 0] = 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1) _fclose(i1) | 0;
  i1 = HEAP32[i3 + 20 >> 2] | 0;
  if (i1) {
   __ZdaPv(i1);
   i1 = i3;
   i2 = i3 + 20 | 0;
  } else {
   i1 = i3;
   i2 = i3 + 20 | 0;
  }
 } else {
  i1 = i3;
  i2 = i3 + 20 | 0;
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 + 32 >> 2] = 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 if (!i1) {
  HEAP32[i3 + 4 >> 2] = 0;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i3 + 4 >> 2] = 0;
 return;
}

function ___fflush_unlocked(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if ((HEAP32[i3 + 20 >> 2] | 0) >>> 0 > (HEAP32[i3 + 28 >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 127](i3, 0, 0) | 0, (HEAP32[i3 + 20 >> 2] | 0) == 0) : 0) i1 = -1; else {
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  i2 = HEAP32[i3 + 8 >> 2] | 0;
  if (i1 >>> 0 < i2 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i3 + 40 >> 2] & 127](i3, i1 - i2 | 0, 1) | 0;
  HEAP32[i3 + 16 >> 2] = 0;
  HEAP32[i3 + 28 >> 2] = 0;
  HEAP32[i3 + 20 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function ___divdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i5 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i8 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i1 = _i64Subtract(i7 ^ i1, i5 ^ i2, i7, i5) | 0;
 i2 = tempRet0;
 return _i64Subtract((___udivmoddi4(i1, i2, _i64Subtract(i8 ^ i3, i6 ^ i4, i8, i6) | 0, tempRet0, 0) | 0) ^ (i8 ^ i7), tempRet0 ^ (i6 ^ i5), i8 ^ i7, i6 ^ i5) | 0;
}

function _strlen(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 L1 : do if (!(i4 & 3)) {
  i1 = i4;
  i3 = 4;
 } else {
  i1 = i4;
  i2 = i4;
  while (1) {
   if (!(HEAP8[i1 >> 0] | 0)) {
    i1 = i2;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i1;
   if (!(i2 & 3)) {
    i3 = 4;
    break;
   }
  }
 } while (0);
 if ((i3 | 0) == 4) {
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) i1 = i1 + 4 | 0; else break;
  }
  if ((i2 & 255) << 24 >> 24) do i1 = i1 + 1 | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
 }
 return i1 - i4 | 0;
}

function _pfr_get_metrics(i4, i2, i1, i5, i6) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0;
 i3 = HEAP32[i4 + 88 >> 2] | 0;
 if (i2) HEAP32[i2 >> 2] = HEAP32[i4 + 288 + 12 >> 2];
 if (i1) HEAP32[i1 >> 2] = HEAP32[i4 + 288 + 16 >> 2];
 if (!i3) {
  i2 = 65536;
  i1 = 65536;
 } else {
  i2 = _FT_DivFix((HEAPU16[i3 + 12 >> 1] | 0) << 6, HEAP32[i4 + 288 + 16 >> 2] | 0) | 0;
  i1 = _FT_DivFix((HEAPU16[i3 + 14 >> 1] | 0) << 6, HEAP32[i4 + 288 + 16 >> 2] | 0) | 0;
 }
 if (i5) HEAP32[i5 >> 2] = i2;
 if (!i6) return 0;
 HEAP32[i6 >> 2] = i1;
 return 0;
}

function __ZN4math3LCG11FloatNeg1_1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, f3 = f0;
 i2 = ___muldi3(HEAP32[i1 >> 2] | 0, 0, HEAP32[i1 + 12 >> 2] | 0, 0) | 0;
 i2 = _i64Add(i2 | 0, tempRet0 | 0, HEAP32[i1 + 4 >> 2] | 0, 0) | 0;
 i2 = ___uremdi3(i2 | 0, tempRet0 | 0, HEAP32[i1 + 8 >> 2] | 0, 0) | 0;
 HEAP32[i1 + 12 >> 2] = i2;
 f3 = (HEAP32[tempDoublePtr >> 2] = i2 << 8 & -2147483648 | 1065353216 | i2 & 8388607, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 return Math_fround(f3 - (HEAP32[tempDoublePtr >> 2] = i2 << 8 & -2147483648 | 1065353216, Math_fround(HEAPF32[tempDoublePtr >> 2])));
}

function _ft_mem_strdup(i2, i5, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i6 = 0;
 if (i5) {
  i1 = (_strlen(i5) | 0) + 1 | 0;
  if ((i1 | 0) > 0) {
   i2 = FUNCTION_TABLE_iii[HEAP32[i2 + 4 >> 2] & 255](i2, i1) | 0;
   i3 = i2;
   i2 = (i2 | 0) == 0 ? 64 : 0;
  } else {
   i2 = i1;
   i6 = 4;
  }
 } else {
  i2 = 0;
  i6 = 4;
 }
 if ((i6 | 0) == 4) {
  i1 = i2;
  i3 = 0;
  i2 = i2 >> 31 & 6;
 }
 if (!((i5 | 0) != 0 & (i2 | 0) == 0)) {
  HEAP32[i4 >> 2] = i2;
  return i3 | 0;
 }
 _memcpy(i3 | 0, i5 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = i2;
 return i3 | 0;
}

function _af_indic_hints_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 HEAP32[i1 + 108 >> 2] = i2;
 i4 = HEAP32[i2 + 28 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 380 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 384 >> 2];
 i3 = HEAP32[i2 + 24 >> 2] | 0;
 i2 = (i3 | 0) == 2 | (i3 | 0) == 4 ? (i3 & -2 | 0) == 2 | 2 : (i3 & -2 | 0) == 2 & 1;
 i2 = (i3 | 0) == 1 ? i2 : i2 | 4;
 HEAP32[i1 + 100 >> 2] = i4 | 4;
 HEAP32[i1 + 104 >> 2] = (i3 | 0) == 2 ? i2 | 8 : i2;
 return 0;
}

function _af_cjk_hints_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 HEAP32[i1 + 108 >> 2] = i2;
 i4 = HEAP32[i2 + 28 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 40 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 44 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 380 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 384 >> 2];
 i3 = HEAP32[i2 + 24 >> 2] | 0;
 i2 = (i3 | 0) == 2 | (i3 | 0) == 4 ? (i3 & -2 | 0) == 2 | 2 : (i3 & -2 | 0) == 2 & 1;
 i2 = (i3 | 0) == 1 ? i2 : i2 | 4;
 HEAP32[i1 + 100 >> 2] = i4 | 4;
 HEAP32[i1 + 104 >> 2] = (i3 | 0) == 2 ? i2 | 8 : i2;
 return 0;
}

function _pfr_cmap_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i4 + 408 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = i3;
 i4 = HEAP32[i4 + 416 >> 2] | 0;
 HEAP32[i1 + 20 >> 2] = i4;
 if (i3 >>> 0 <= 1) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = 1;
 while (1) {
  i5 = i1;
  i1 = HEAP32[i4 + (i2 << 4) >> 2] | 0;
  i2 = i2 + 1 | 0;
  if (i5 >>> 0 >= i1 >>> 0) {
   i1 = 8;
   i2 = 5;
   break;
  }
  if (i2 >>> 0 >= i3 >>> 0) {
   i1 = 0;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function _get_sfnt_table(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 switch (i2 | 0) {
 case 0:
  {
   i1 = i1 + 160 | 0;
   break;
  }
 case 3:
  {
   i1 = i1 + 216 | 0;
   break;
  }
 case 4:
  {
   i1 = (HEAP8[i1 + 296 >> 0] | 0) != 0 ? i1 + 300 | 0 : 0;
   break;
  }
 case 2:
  {
   i1 = (HEAP16[i1 + 368 >> 1] | 0) == -1 ? 0 : i1 + 368 | 0;
   break;
  }
 case 5:
  {
   i1 = i1 + 468 | 0;
   break;
  }
 case 1:
  {
   i1 = i1 + 260 | 0;
   break;
  }
 case 6:
  {
   i1 = (HEAP32[i1 + 556 >> 2] | 0) != 0 ? i1 + 556 | 0 : 0;
   break;
  }
 default:
  i1 = 0;
 }
 return i1 | 0;
}

function ___toread(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP8[i2 + 74 >> 0] | 0;
 HEAP8[i2 + 74 >> 0] = i1 + 255 | i1;
 if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 44 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i2 + 36 >> 2] & 127](i2, 0, 0) | 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 & 20) if (!(i1 & 4)) i1 = -1; else {
  HEAP32[i2 >> 2] = i1 | 32;
  i1 = -1;
 } else {
  i1 = HEAP32[i2 + 44 >> 2] | 0;
  HEAP32[i2 + 8 >> 2] = i1;
  HEAP32[i2 + 4 >> 2] = i1;
  i1 = 0;
 }
 return i1 | 0;
}

function _pfr_cmap_char_index(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i2) {
  i7 = 0;
  return i7 | 0;
 }
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i4 = 0;
 while (1) {
  i1 = ((i2 - i4 | 0) >>> 1) + i4 | 0;
  i3 = HEAP32[i5 + (i1 << 4) >> 2] | 0;
  if ((i3 | 0) == (i6 | 0)) break;
  i2 = i3 >>> 0 < i6 >>> 0 ? i2 : i1;
  i4 = i3 >>> 0 < i6 >>> 0 ? i1 + 1 | 0 : i4;
  if (i2 >>> 0 <= i4 >>> 0) {
   i1 = 0;
   i7 = 6;
   break;
  }
 }
 if ((i7 | 0) == 6) return i1 | 0;
 i7 = i1 + 1 | 0;
 return i7 | 0;
}

function _cid_size_request(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 _FT_Request_Metrics(HEAP32[i3 >> 2] | 0, i1);
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i2 + 320 >> 2] | 0;
 i2 = _FT_Get_Module(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) return 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) return 0;
 i1 = FUNCTION_TABLE_ii[i1 & 63](i2) | 0;
 if (!i1) return 0;
 FUNCTION_TABLE_iiiiii[HEAP32[i1 + 4 >> 2] & 63](HEAP32[i3 + 40 >> 2] | 0, HEAP32[i3 + 16 >> 2] | 0, HEAP32[i3 + 20 >> 2] | 0, 0, 0) | 0;
 return 0;
}

function _FT_Select_Size(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if (!i2) {
  i3 = 35;
  return i3 | 0;
 }
 if (!(HEAP32[i2 + 8 >> 2] & 2)) {
  i3 = 35;
  return i3 | 0;
 }
 if ((i3 | 0) < 0) {
  i3 = 6;
  return i3 | 0;
 }
 if ((HEAP32[i2 + 28 >> 2] | 0) <= (i3 | 0)) {
  i3 = 6;
  return i3 | 0;
 }
 i1 = HEAP32[(HEAP32[(HEAP32[i2 + 96 >> 2] | 0) + 12 >> 2] | 0) + 100 >> 2] | 0;
 if (!i1) {
  _FT_Select_Metrics(i2, i3);
  i3 = 0;
  return i3 | 0;
 } else {
  i3 = FUNCTION_TABLE_iii[i1 & 255](HEAP32[i2 + 88 >> 2] | 0, i3) | 0;
  return i3 | 0;
 }
 return 0;
}

function __ZN7Texture9BeginDrawEi8LockType(i3, i5, i4, i1) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i5 + 64 >> 2] | 0;
 if (!i1) {
  HEAP32[i2 >> 2] = HEAP32[i5 + 4 >> 2];
  __ZN4math22PrintToConsoleVariadicEjPKcz(2, 300852, i2);
  __ZN5ImageC2Ev(i3);
  STACKTOP = i2;
  return;
 }
 if ((i4 | 0) >= 0 ? (HEAP32[i5 + 32 >> 2] | 0) > (i4 | 0) : 0) {
  __ZN5Image11ShallowCopyEv(i3, i1 + (i4 * 36 | 0) | 0);
  STACKTOP = i2;
  return;
 }
 __ZN5ImageC2Ev(i3);
 STACKTOP = i2;
 return;
}

function _FT_List_Finalize(i5, i3, i6, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1) if (!i3) do {
  i2 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (i2) FUNCTION_TABLE_vii[HEAP32[i6 + 8 >> 2] & 31](i6, i2);
 } while ((i1 | 0) != 0); else do {
  i2 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  FUNCTION_TABLE_viii[i3 & 31](i6, HEAP32[i2 + 8 >> 2] | 0, i4);
  if (i2) FUNCTION_TABLE_vii[HEAP32[i6 + 8 >> 2] & 31](i6, i2);
 } while ((i1 | 0) != 0);
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 return;
}

function _cff_get_cmap_info(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP32[(HEAP32[(HEAP32[i2 >> 2] | 0) + 96 >> 2] | 0) + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 i4 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i4 | 0) == 265708 | (i4 | 0) == 265748) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = _ft_module_get_service(_FT_Get_Module(i1, 325800) | 0, 325852) | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = FUNCTION_TABLE_iii[i1 & 255](i2, i3) | 0;
 return i4 | 0;
}

function __ZN17VertexDeclarationC2E13VertexElement(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 i4 = i5;
 i2 = i4 + 52 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  i4 = i4 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i4 | 0) < (i2 | 0));
 __ZN17VertexDeclaration3AddE13VertexElement(i3, i5);
 STACKTOP = i5;
 return;
}

function _sfnt_table_info(i2, i3, i5, i4, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0;
 if (!((i4 | 0) != 0 & (i6 | 0) != 0)) {
  i6 = 6;
  return i6 | 0;
 }
 i1 = HEAPU16[i2 + 152 >> 1] | 0;
 do if (i5) if (i1 >>> 0 > i3 >>> 0) {
  i1 = HEAP32[i2 + 156 >> 2] | 0;
  HEAP32[i5 >> 2] = HEAP32[i1 + (i3 << 4) >> 2];
  HEAP32[i4 >> 2] = HEAP32[i1 + (i3 << 4) + 8 >> 2];
  i1 = HEAP32[i1 + (i3 << 4) + 12 >> 2] | 0;
  break;
 } else {
  i6 = 142;
  return i6 | 0;
 } while (0);
 HEAP32[i6 >> 2] = i1;
 i6 = 0;
 return i6 | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = HEAP32[i3 + 16 >> 2] | 0;
 do if (i1) {
  if ((i1 | 0) != (i2 | 0)) {
   HEAP32[i3 + 36 >> 2] = (HEAP32[i3 + 36 >> 2] | 0) + 1;
   HEAP32[i3 + 24 >> 2] = 2;
   HEAP8[i3 + 54 >> 0] = 1;
   break;
  }
  if ((HEAP32[i3 + 24 >> 2] | 0) == 2) HEAP32[i3 + 24 >> 2] = i4;
 } else {
  HEAP32[i3 + 16 >> 2] = i2;
  HEAP32[i3 + 24 >> 2] = i4;
  HEAP32[i3 + 36 >> 2] = 1;
 } while (0);
 return;
}

function _tt_cmap10_char_index(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = i3 - ((HEAPU8[i2 + 13 >> 0] | 0) << 16 | (HEAPU8[i2 + 12 >> 0] | 0) << 24 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0)) | 0;
 if (i1 >>> 0 >= ((HEAPU8[i2 + 17 >> 0] | 0) << 16 | (HEAPU8[i2 + 16 >> 0] | 0) << 24 | (HEAPU8[i2 + 18 >> 0] | 0) << 8 | (HEAPU8[i2 + 19 >> 0] | 0)) >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = (HEAPU8[i2 + ((i1 << 1) + 20) >> 0] | 0) << 8 | (HEAPU8[i2 + ((i1 << 1) + 21) >> 0] | 0);
 return i3 | 0;
}

function __ZN8Material6DeinitEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 44 >> 2] | 0;
 if (i1) {
  i3 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i3;
  if (!i3) {
   __ZN6ShaderD2Ev(i1);
   __ZdlPv(i1);
  }
  HEAP32[i2 + 44 >> 2] = 0;
 }
 i1 = HEAP32[i2 + 48 >> 2] | 0;
 if (i1) {
  i3 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
  HEAP32[i1 >> 2] = i3;
  if (!i3) {
   __ZN6ShaderD2Ev(i1);
   __ZdlPv(i1);
  }
  HEAP32[i2 + 48 >> 2] = 0;
 }
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) return;
 _glDeleteProgram(i1 | 0);
 HEAP32[i2 >> 2] = 0;
 return;
}

function _FT_Done_Face(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (!i4) {
  i4 = 35;
  return i4 | 0;
 }
 i3 = HEAP32[i4 + 96 >> 2] | 0;
 if (!i3) {
  i4 = 35;
  return i4 | 0;
 }
 i1 = (HEAP32[i4 + 128 >> 2] | 0) + 60 | 0;
 i2 = (HEAP32[i1 >> 2] | 0) + -1 | 0;
 HEAP32[i1 >> 2] = i2;
 if (i2) {
  i4 = 0;
  return i4 | 0;
 }
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 i2 = _FT_List_Find(i3 + 16 | 0, i4) | 0;
 if (!i2) {
  i4 = 35;
  return i4 | 0;
 }
 _FT_List_Remove(i3 + 16 | 0, i2);
 _ft_mem_free(i1, i2);
 _destroy_face(i1, i4, i3);
 i4 = 0;
 return i4 | 0;
}

function __Z13IsContainedInRK4RectS1_(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < (i2 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = HEAP32[i5 + 4 >> 2] | 0;
 i4 = HEAP32[i6 + 4 >> 2] | 0;
 if ((i3 | 0) < (i4 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 if (((HEAP32[i5 + 8 >> 2] | 0) + i1 | 0) > ((HEAP32[i6 + 8 >> 2] | 0) + i2 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i6 = ((HEAP32[i5 + 12 >> 2] | 0) + i3 | 0) <= ((HEAP32[i6 + 12 >> 2] | 0) + i4 | 0);
 return i6 | 0;
}

function _FT_Get_Module(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (!((i4 | 0) != 0 & (i5 | 0) != 0)) {
  i5 = 0;
  return i5 | 0;
 }
 i2 = HEAP32[i4 + 16 >> 2] | 0;
 if ((i2 | 0) <= 0) {
  i5 = 0;
  return i5 | 0;
 }
 i3 = i4 + 20 | 0;
 while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  i3 = i3 + 4 | 0;
  if (!(_strcmp(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0, i5) | 0)) {
   i2 = 6;
   break;
  }
  if (i3 >>> 0 >= (i4 + 20 + (i2 << 2) | 0) >>> 0) {
   i1 = 0;
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) return i1 | 0;
 return 0;
}

function _sfnt_get_name_index(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = HEAP32[i3 + 16 >> 2] | 0;
 if ((i2 | 0) < 1) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 } else i1 = 0;
 while (1) {
  if ((_tt_face_get_ps_name(i3, i1, i5) | 0) == 0 ? (_strcmp(i4, HEAP32[i5 >> 2] | 0) | 0) == 0 : 0) {
   i2 = 5;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= i2 >>> 0) {
   i1 = 0;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) {
  STACKTOP = i5;
  return i1 | 0;
 }
 return 0;
}

function __ZN6Shader10FromStringE10ShaderTypePKcS2_S2_S2_(i6, i5, i3, i4, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = __Znwj(84) | 0;
 __ZN6ShaderC2Ev(i1);
 __ZN6Shader14LoadFromStringE10ShaderTypePKcS2_S2_S2_(i7, i1, i6, i5, i3, i4, i2);
 if ((HEAP32[i7 >> 2] | 0) < 0) {
  __ZN6ShaderD2Ev(i1);
  __ZdlPv(i1);
  i1 = 0;
 }
 i2 = HEAP32[i7 + 4 >> 2] | 0;
 if (!i2) {
  STACKTOP = i7;
  return i1 | 0;
 }
 __ZdaPv(i2);
 STACKTOP = i7;
 return i1 | 0;
}

function _FT_Stream_TryRead(i6, i4, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i6 + 8 >> 2] | 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if (i2 >>> 0 <= i1 >>> 0) {
  i6 = 0;
  return i6 | 0;
 }
 i3 = HEAP32[i6 + 20 >> 2] | 0;
 if (!i3) {
  i5 = (i2 - i1 | 0) >>> 0 > i5 >>> 0 ? i5 : i2 - i1 | 0;
  _memcpy(i4 | 0, (HEAP32[i6 >> 2] | 0) + i1 | 0, i5 | 0) | 0;
  i1 = i5;
 } else i1 = FUNCTION_TABLE_iiiii[i3 & 63](i6, i1, i4, i5) | 0;
 HEAP32[i6 + 8 >> 2] = (HEAP32[i6 + 8 >> 2] | 0) + i1;
 i6 = i1;
 return i6 | 0;
}

function _tt_cmap14_ensure(i3, i4, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 if (i1 >>> 0 >= i4 >>> 0) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i3 + 36 >> 2] = i2;
 HEAP32[i3 + 32 >> 2] = _ft_mem_realloc(i2, 4, i1, i4, HEAP32[i3 + 32 >> 2] | 0, i5) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if (i1) {
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i3 + 28 >> 2] = i4;
 i4 = 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _tt_cmap13_char_next(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i1 | 0) == -1) {
  i3 = 0;
  return i3 | 0;
 }
 if ((HEAP8[i2 + 24 >> 0] | 0) != 0 ? (i1 | 0) == (HEAP32[i3 >> 2] | 0) : 0) {
  _tt_cmap13_next(i2);
  if (!(HEAP8[i2 + 24 >> 0] | 0)) {
   i3 = 0;
   return i3 | 0;
  }
  i1 = HEAP32[i2 + 32 >> 2] | 0;
  if (!i1) {
   i3 = 0;
   return i3 | 0;
  }
  HEAP32[i3 >> 2] = HEAP32[i2 + 28 >> 2];
  i3 = i1;
  return i3 | 0;
 }
 i3 = _tt_cmap13_char_map_binary(i2, i3, 1) | 0;
 return i3 | 0;
}

function _tt_cmap12_char_next(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i1 | 0) == -1) {
  i3 = 0;
  return i3 | 0;
 }
 if ((HEAP8[i2 + 24 >> 0] | 0) != 0 ? (i1 | 0) == (HEAP32[i3 >> 2] | 0) : 0) {
  _tt_cmap12_next(i2);
  if (!(HEAP8[i2 + 24 >> 0] | 0)) {
   i3 = 0;
   return i3 | 0;
  }
  i1 = HEAP32[i2 + 32 >> 2] | 0;
  if (!i1) {
   i3 = 0;
   return i3 | 0;
  }
  HEAP32[i3 >> 2] = HEAP32[i2 + 28 >> 2];
  i3 = i1;
  return i3 | 0;
 }
 i3 = _tt_cmap12_char_map_binary(i2, i3, 1) | 0;
 return i3 | 0;
}

function _strncmp(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0;
 if (!i2) i1 = 0; else {
  i3 = HEAP8[i4 >> 0] | 0;
  L3 : do if (!(i3 << 24 >> 24)) i3 = 0; else while (1) {
   i2 = i2 + -1 | 0;
   i5 = HEAP8[i1 >> 0] | 0;
   if (!(i3 << 24 >> 24 == i5 << 24 >> 24 & ((i2 | 0) != 0 & i5 << 24 >> 24 != 0))) break L3;
   i4 = i4 + 1 | 0;
   i1 = i1 + 1 | 0;
   i3 = HEAP8[i4 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i3 = 0;
    break;
   }
  } while (0);
  i1 = (i3 & 255) - (HEAPU8[i1 >> 0] | 0) | 0;
 }
 return i1 | 0;
}

function _ft_glyphslot_alloc_bitmap(i3, i5) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = HEAP32[(HEAP32[i3 + 4 >> 2] | 0) + 100 >> 2] | 0;
 i1 = (HEAP32[i3 + 156 >> 2] | 0) + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 1)) {
  HEAP32[i1 >> 2] = i2 | 1;
  i1 = i3 + 88 | 0;
 } else {
  _ft_mem_free(i4, HEAP32[i3 + 88 >> 2] | 0);
  HEAP32[i3 + 88 >> 2] = 0;
  i1 = i3 + 88 | 0;
 }
 HEAP32[i1 >> 2] = _ft_mem_alloc(i4, i5, i6) | 0;
 STACKTOP = i6;
 return HEAP32[i6 >> 2] | 0;
}

function __ZN12VertexBuffer14AppendVerticesEi(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i4 = HEAP32[i5 + 68 >> 2] | 0;
 HEAP32[i5 + 68 >> 2] = i4 + i1;
 i2 = Math_imul(HEAP32[i5 + 56 >> 2] | 0, i4 + i1 | 0) | 0;
 i3 = HEAP32[i5 + 60 >> 2] | 0;
 if (!i3) return i4 | 0;
 i1 = HEAP32[i5 + 64 >> 2] | 0;
 if (i2 >>> 0 <= i1 >>> 0) return i4 | 0;
 i6 = __Znaj(i2) | 0;
 _memcpy(i6 | 0, i3 | 0, (i1 >>> 0 > i2 >>> 0 ? i2 : i1) | 0) | 0;
 __ZdaPv(i3);
 HEAP32[i5 + 60 >> 2] = i6;
 HEAP32[i5 + 64 >> 2] = i2;
 return i4 | 0;
}

function __ZN6Shader8FromFileE10ShaderTypePKcS2_S2_S2_(i6, i4, i2, i3, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = __Znwj(84) | 0;
 __ZN6ShaderC2Ev(i1);
 __ZN6Shader12LoadFromFileE10ShaderTypePKcS2_S2_S2_(i7, i1, i6, i4, i2, i3, i5);
 if ((HEAP32[i7 >> 2] | 0) < 0) {
  __ZN6ShaderD2Ev(i1);
  __ZdlPv(i1);
  i1 = 0;
 }
 i2 = HEAP32[i7 + 4 >> 2] | 0;
 if (!i2) {
  STACKTOP = i7;
  return i1 | 0;
 }
 __ZdaPv(i2);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNK4math6float33AbsEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var f3 = f0, f4 = f0, f5 = f0, f6 = f0, i7 = 0, f8 = f0, f9 = f0, i10 = 0;
 f9 = Math_fround(HEAPF32[i2 >> 2]);
 i10 = f9 >= Math_fround(0.0);
 f8 = Math_fround(-f9);
 f6 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 i7 = f6 >= Math_fround(0.0);
 f5 = Math_fround(-f6);
 f4 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 i2 = f4 >= Math_fround(0.0);
 f3 = Math_fround(-f4);
 HEAPF32[i1 >> 2] = i10 ? f9 : f8;
 HEAPF32[i1 + 4 >> 2] = i7 ? f6 : f5;
 HEAPF32[i1 + 8 >> 2] = i2 ? f4 : f3;
 return;
}

function __ZN9SharedPtrI15RasterizerStateEaSERKS1_(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (i1 | 0)) return i4 | 0;
 if (i3) {
  if (!(HEAP32[i3 >> 2] | 0)) __ZdlPv(i3);
  HEAP32[i4 >> 2] = 0;
  i1 = HEAP32[i2 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i1;
 if (i1) {
  i2 = i1;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 if (!i3) return i4 | 0;
 i2 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
 HEAP32[i3 >> 2] = i2;
 if (i2) return i4 | 0;
 __ZdlPv(i3);
 return i4 | 0;
}

function _FT_Vector_Transform_Scaled(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (!((i3 | 0) != 0 & (i1 | 0) != 0)) return;
 i5 = HEAP32[i3 >> 2] | 0;
 i4 = _FT_MulDiv(i5, HEAP32[i1 >> 2] | 0, i2 << 16) | 0;
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 i4 = (_FT_MulDiv(i6, HEAP32[i1 + 4 >> 2] | 0, i2 << 16) | 0) + i4 | 0;
 i5 = _FT_MulDiv(i5, HEAP32[i1 + 8 >> 2] | 0, i2 << 16) | 0;
 i2 = (_FT_MulDiv(i6, HEAP32[i1 + 12 >> 2] | 0, i2 << 16) | 0) + i5 | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i3 + 4 >> 2] = i2;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 1 | 0;
 } else {
  i4 = __Znwj(i3 + 16 & -16) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i3 + 16 & -16 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 HEAP8[i1 + i3 >> 0] = 0;
 return;
}

function _afm_parser_init(i6, i5, i3, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _ft_mem_alloc(i5, 16, i7) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if (i2) {
  i6 = i2;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i1 + 12 >> 2] = 2;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i6 + 4 >> 2] = i1;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _pfr_get_kerning(i5, i1, i2, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 _pfr_face_get_kerning(i5, i1, i2, i4) | 0;
 i1 = HEAP32[i5 + 288 + 12 >> 2] | 0;
 i2 = HEAP32[i5 + 288 + 16 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) return 0;
 i3 = HEAP32[i4 >> 2] | 0;
 if (!i3) i1 = 0; else {
  i1 = _FT_MulDiv(i3, i1, i2) | 0;
  HEAP32[i4 >> 2] = i1;
 }
 if (!(HEAP32[i4 + 4 >> 2] | 0)) return 0;
 HEAP32[i4 + 4 >> 2] = _FT_MulDiv(i1, HEAP32[i5 + 288 + 12 >> 2] | 0, HEAP32[i5 + 288 + 16 >> 2] | 0) | 0;
 return 0;
}

function _FT_Stream_Read(i6, i3, i5) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = HEAP32[i6 + 8 >> 2] | 0;
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 if (i1 >>> 0 <= i4 >>> 0) {
  i6 = 85;
  return i6 | 0;
 }
 i2 = HEAP32[i6 + 20 >> 2] | 0;
 if (!i2) {
  i1 = (i1 - i4 | 0) >>> 0 > i5 >>> 0 ? i5 : i1 - i4 | 0;
  _memcpy(i3 | 0, (HEAP32[i6 >> 2] | 0) + i4 | 0, i1 | 0) | 0;
 } else i1 = FUNCTION_TABLE_iiiii[i2 & 63](i6, i4, i3, i5) | 0;
 HEAP32[i6 + 8 >> 2] = i1 + i4;
 i6 = i1 >>> 0 < i5 >>> 0 ? 85 : 0;
 return i6 | 0;
}

function __ZN9SharedPtrI10BlendStateEaSERKS1_(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (i1 | 0)) return i4 | 0;
 if (i3) {
  if (!(HEAP32[i3 >> 2] | 0)) __ZdlPv(i3);
  HEAP32[i4 >> 2] = 0;
  i1 = HEAP32[i2 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i1;
 if (i1) {
  i2 = i1;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 }
 if (!i3) return i4 | 0;
 i2 = (HEAP32[i3 >> 2] | 0) + -1 | 0;
 HEAP32[i3 >> 2] = i2;
 if (i2) return i4 | 0;
 __ZdlPv(i3);
 return i4 | 0;
}

function _tt_cmap4_char_next(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 >>> 0 > 65534) {
  i3 = 0;
  return i3 | 0;
 }
 if (HEAP32[i2 + 20 >> 2] & 1) {
  i3 = _tt_cmap4_char_map_linear(i2, i3, 1) | 0;
  return i3 | 0;
 }
 if ((i1 | 0) != (HEAP32[i2 + 24 >> 2] | 0)) {
  i3 = _tt_cmap4_char_map_binary(i2, i3, 1) | 0;
  return i3 | 0;
 }
 _tt_cmap4_next(i2);
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[i2 + 24 >> 2];
 i3 = i1;
 return i3 | 0;
}

function __ZN20ShaderConstantBuffer11SetFloat4x4EiRKN4math8float4x4E(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 __ZNK4math8float4x410TransposedEv(i5, i2);
 i1 = (HEAP32[i4 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + (i1 * 156 | 0) + 136 >> 2] | 0) | 0;
 i2 = i5;
 i3 = i1 + 64 | 0;
 do {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 } while ((i1 | 0) < (i3 | 0));
 HEAP8[i4 + 32 >> 0] = 1;
 STACKTOP = i5;
 return;
}

function __Z37RenderTargetAvailableAsGLRenderbuffer13TextureFormat(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 L1 : do if ((i1 | 0) >= 55) if ((i1 | 0) < 1048583) switch (i1 | 0) {
 case 55:
  {
   i1 = 1;
   break L1;
  }
 default:
  {
   i2 = 2;
   break L1;
  }
 } else switch (i1 | 0) {
 case 1048584:
 case 1048583:
  {
   i1 = 1;
   break L1;
  }
 default:
  {
   i2 = 2;
   break L1;
  }
 } else switch (i1 | 0) {
 case 45:
 case 10:
  {
   i1 = 1;
   break;
  }
 default:
  i2 = 2;
 } while (0);
 if ((i2 | 0) == 2) i1 = 0;
 return i1 | 0;
}

function _tt_get_interface(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = _ft_service_list_lookup(263628, i3) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = _FT_Get_Module(i1, 325800) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = FUNCTION_TABLE_iii[HEAP32[i1 + 16 >> 2] & 255](i2, i3) | 0;
 return i3 | 0;
}

function _strerror(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = 0;
 while (1) {
  if ((HEAPU8[387949 + i2 >> 0] | 0) == (i1 | 0)) {
   i3 = 2;
   break;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 87) {
   i2 = 87;
   i1 = 388037;
   i3 = 5;
   break;
  }
 }
 if ((i3 | 0) == 2) if (!i2) i1 = 388037; else {
  i1 = 388037;
  i3 = 5;
 }
 if ((i3 | 0) == 5) while (1) {
  i3 = i1;
  while (1) {
   i1 = i3 + 1 | 0;
   if (!(HEAP8[i3 >> 0] | 0)) break; else i3 = i1;
  }
  i2 = i2 + -1 | 0;
  if (!i2) break; else i3 = 5;
 }
 return i1 | 0;
}

function _ft_stub_set_pixel_sizes(i3, i4, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = HEAP32[(HEAP32[(HEAP32[(HEAP32[i3 >> 2] | 0) + 96 >> 2] | 0) + 12 >> 2] | 0) + 96 >> 2] | 0;
 if (!i1) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = i4 << 6;
 HEAP32[i5 + 8 >> 2] = i2 << 6;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 i4 = FUNCTION_TABLE_iii[i1 & 255](i3, i5) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZN4math8TriangleC2ERKNS_6float3ES3_S3_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i4 + 12 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i4 + 12 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i4 + 24 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 24 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i4 + 24 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 return;
}

function _FT_MulFix(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 if ((i3 | 0) == 0 | (i4 | 0) == 65536) {
  i4 = i3;
  return i4 | 0;
 }
 i1 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
 i2 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
 if (i1 >>> 0 < 2049 & i2 >>> 0 < 1048577) i1 = ((Math_imul(i2, i1) | 0) + 32768 | 0) >>> 16; else i1 = (Math_imul(i2 >>> 16, i1 & 65535) | 0) + (Math_imul(i1 >>> 16, i2) | 0) + (((Math_imul(i2 & 65535, i1 & 65535) | 0) + 32768 | 0) >>> 16) | 0;
 i4 = (i4 ^ i3 | 0) < 0 ? 0 - i1 | 0 : i1;
 return i4 | 0;
}

function _puts(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = HEAP32[70410] | 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i3) | 0; else i4 = 0;
 do if ((_fputs(i2, i3) | 0) < 0) i1 = 1; else {
  if ((HEAP8[i3 + 75 >> 0] | 0) != 10 ? (i1 = HEAP32[i3 + 20 >> 2] | 0, i1 >>> 0 < (HEAP32[i3 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i3 + 20 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = 10;
   i1 = 0;
   break;
  }
  i1 = (___overflow(i3, 10) | 0) < 0;
 } while (0);
 if (i4) ___unlockfile(i3);
 return i1 << 31 >> 31 | 0;
}

function _memset(i2, i5, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0;
 i3 = i2 + i1 | 0;
 if ((i1 | 0) >= 20) {
  i5 = i5 & 255;
  i4 = i2 & 3;
  i6 = i5 | i5 << 8 | i5 << 16 | i5 << 24;
  if (i4) {
   i4 = i2 + 4 - i4 | 0;
   while ((i2 | 0) < (i4 | 0)) {
    HEAP8[i2 >> 0] = i5;
    i2 = i2 + 1 | 0;
   }
  }
  while ((i2 | 0) < (i3 & ~3 | 0)) {
   HEAP32[i2 >> 2] = i6;
   i2 = i2 + 4 | 0;
  }
 }
 while ((i2 | 0) < (i3 | 0)) {
  HEAP8[i2 >> 0] = i5;
  i2 = i2 + 1 | 0;
 }
 return i2 - i1 | 0;
}

function __ZNK4math6float33MinERKS0_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0;
 f9 = Math_fround(HEAPF32[i3 >> 2]);
 f8 = Math_fround(HEAPF32[i2 >> 2]);
 f7 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f6 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f5 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f4 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 HEAPF32[i1 >> 2] = f9 <= f8 ? f9 : f8;
 HEAPF32[i1 + 4 >> 2] = f7 <= f6 ? f7 : f6;
 HEAPF32[i1 + 8 >> 2] = f5 <= f4 ? f5 : f4;
 return;
}

function __ZNK4math6float33MaxERKS0_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0, f6 = f0, f7 = f0, f8 = f0, f9 = f0;
 f9 = Math_fround(HEAPF32[i3 >> 2]);
 f8 = Math_fround(HEAPF32[i2 >> 2]);
 f7 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f6 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f5 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f4 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 HEAPF32[i1 >> 2] = f9 >= f8 ? f9 : f8;
 HEAPF32[i1 + 4 >> 2] = f7 >= f6 ? f7 : f6;
 HEAPF32[i1 + 8 >> 2] = f5 >= f4 ? f5 : f4;
 return;
}

function _Round_Super_45(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 + 480 >> 2] | 0;
 i3 = HEAP32[i1 + 484 >> 2] | 0;
 i1 = HEAP32[i1 + 476 >> 2] | 0;
 if ((i5 | 0) > -1) {
  i4 = i4 + i5 - i2 + i3 - ((i4 + i5 - i2 + i3 | 0) % (i1 | 0) | 0) | 0;
  i5 = ((i5 | 0) != 0 & (i4 | 0) < 0 ? 0 : i4) + i2 | 0;
  return i5 | 0;
 } else {
  i5 = ((i4 - i5 + i3 - i2 | 0) % (i1 | 0) | 0) - (i4 - i5 + i3 - i2) | 0;
  i5 = ((i5 | 0) > 0 ? 0 : i5) - i2 | 0;
  return i5 | 0;
 }
 return 0;
}

function __ZN9MainClass15QuitApplicationEi(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i1 >> 2] = i2;
 __ZN4math22PrintToConsoleVariadicEjPKcz(1, 304031, i1);
 HEAP8[i3 + 1296 >> 0] = 1;
 HEAP32[i3 + 1300 >> 2] = i2;
 i1 = HEAP32[i3 + 1264 >> 2] | 0;
 if (!i1) {
  _emscripten_cancel_main_loop();
  _exit(i2 | 0);
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 31](i1, HEAP32[i3 + 1260 >> 2] | 0);
 _emscripten_cancel_main_loop();
 _exit(i2 | 0);
}

function _FT_Stream_ReadAt(i6, i5, i3, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i6 + 4 >> 2] | 0;
 if (i1 >>> 0 <= i5 >>> 0) {
  i6 = 85;
  return i6 | 0;
 }
 i2 = HEAP32[i6 + 20 >> 2] | 0;
 if (!i2) {
  i1 = (i1 - i5 | 0) >>> 0 > i4 >>> 0 ? i4 : i1 - i5 | 0;
  _memcpy(i3 | 0, (HEAP32[i6 >> 2] | 0) + i5 | 0, i1 | 0) | 0;
 } else i1 = FUNCTION_TABLE_iiiii[i2 & 63](i6, i5, i3, i4) | 0;
 HEAP32[i6 + 8 >> 2] = i1 + i5;
 i6 = i1 >>> 0 < i4 >>> 0 ? 85 : 0;
 return i6 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i3, i2, i1, i4, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 if ((i5 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i3, i2, i1, i4); else {
  i5 = HEAP32[i5 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 7](i5, i3, i2, i1, i4, i6);
 }
 return;
}

function _cid_size_done(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!(HEAP32[i5 + 40 >> 2] | 0)) return;
 i4 = HEAP32[i5 >> 2] | 0;
 i3 = HEAP32[i4 + 320 >> 2] | 0;
 i4 = _FT_Get_Module(HEAP32[(HEAP32[i4 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (((i3 | 0) != 0 & (i4 | 0) != 0 ? (i1 = HEAP32[i3 >> 2] | 0, (i1 | 0) != 0) : 0) ? (i2 = FUNCTION_TABLE_ii[i1 & 63](i4) | 0, (i2 | 0) != 0) : 0) FUNCTION_TABLE_vi[HEAP32[i2 + 8 >> 2] & 127](HEAP32[i5 + 40 >> 2] | 0);
 HEAP32[i5 + 40 >> 2] = 0;
 return;
}

function _ft_glyphslot_set_bitmap(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 + 156 >> 2] | 0;
 if ((i3 | 0) != 0 ? (HEAP32[i3 + 4 >> 2] & 1 | 0) != 0 : 0) {
  _ft_mem_free(HEAP32[(HEAP32[i2 + 4 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i2 + 88 >> 2] | 0);
  HEAP32[i2 + 88 >> 2] = 0;
  i3 = (HEAP32[i2 + 156 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -2;
  i3 = i2 + 88 | 0;
  HEAP32[i3 >> 2] = i1;
  return;
 }
 HEAP32[i2 + 88 >> 2] = 0;
 i3 = i2 + 88 | 0;
 HEAP32[i3 >> 2] = i1;
 return;
}

function _cid_ps_get_font_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 + 140 + 24 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 140 + 24 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 140 + 24 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 140 + 24 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 140 + 24 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 140 + 24 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 140 + 24 + 24 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 140 + 24 + 28 >> 2];
 return 0;
}

function _T1_Size_Done(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!(HEAP32[i5 + 40 >> 2] | 0)) return;
 i4 = HEAP32[i5 >> 2] | 0;
 i3 = HEAP32[i4 + 552 >> 2] | 0;
 i4 = _FT_Get_Module(HEAP32[(HEAP32[i4 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (((i3 | 0) != 0 & (i4 | 0) != 0 ? (i1 = HEAP32[i3 >> 2] | 0, (i1 | 0) != 0) : 0) ? (i2 = FUNCTION_TABLE_ii[i1 & 63](i4) | 0, (i2 | 0) != 0) : 0) FUNCTION_TABLE_vi[HEAP32[i2 + 8 >> 2] & 127](HEAP32[i5 + 40 >> 2] | 0);
 HEAP32[i5 + 40 >> 2] = 0;
 return;
}

function _cff_cmap_encoding_char_next(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 if (i1 >>> 0 >= 255) {
  i5 = 0;
  return i5 | 0;
 }
 i2 = i1;
 i1 = 0;
 while (1) {
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 > 255) {
   i5 = 6;
   break;
  }
  i1 = HEAP16[(HEAP32[i3 + 16 >> 2] | 0) + (i2 << 1) >> 1] | 0;
  if (!(i1 << 16 >> 16)) i1 = i1 & 65535; else break;
 }
 if ((i5 | 0) == 6) return i1 | 0;
 HEAP32[i4 >> 2] = i2;
 i5 = i1 & 65535;
 return i5 | 0;
}

function _FNT_Face_Done(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (!i4) return;
 i1 = HEAP32[i4 + 100 >> 2] | 0;
 i2 = HEAP32[i4 + 104 >> 2] | 0;
 i3 = HEAP32[i4 + 132 >> 2] | 0;
 if (i3) {
  if (HEAP32[i3 + 160 >> 2] | 0) _FT_Stream_ReleaseFrame(i2, i3 + 160 | 0);
  _ft_mem_free(i1, HEAP32[i3 + 168 >> 2] | 0);
  HEAP32[i3 + 168 >> 2] = 0;
  _ft_mem_free(i1, i3);
  HEAP32[i4 + 132 >> 2] = 0;
 }
 _ft_mem_free(i1, HEAP32[i4 + 32 >> 2] | 0);
 HEAP32[i4 + 32 >> 2] = 0;
 HEAP32[i4 + 28 >> 2] = 0;
 return;
}

function __ZN5Input4InitEv(i1) {
 i1 = i1 | 0;
 _emscripten_set_click_callback(0, i1 | 0, 0, 45) | 0;
 _emscripten_set_dblclick_callback(0, i1 | 0, 0, 45) | 0;
 _emscripten_set_keydown_callback(0, i1 | 0, 0, 46) | 0;
 _emscripten_set_keyup_callback(0, i1 | 0, 0, 46) | 0;
 _emscripten_set_mousedown_callback(0, i1 | 0, 0, 47) | 0;
 _emscripten_set_mouseup_callback(0, i1 | 0, 0, 47) | 0;
 _emscripten_set_mousemove_callback(0, i1 | 0, 0, 47) | 0;
 _emscripten_set_wheel_callback(289686, i1 | 0, 0, 48) | 0;
 return;
}

function __ZN4File9ReadBytesEPvi(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 if (i1) {
  i5 = HEAP32[i2 + 24 >> 2] | 0;
  i6 = (HEAP32[i2 + 32 >> 2] | 0) - i5 | 0;
  i4 = (i6 | 0) < (i4 | 0) ? i6 : i4;
  _memcpy(i3 | 0, i1 + i5 | 0, i4 | 0) | 0;
  HEAP32[i2 + 24 >> 2] = (HEAP32[i2 + 24 >> 2] | 0) + i4;
  return i4 | 0;
 }
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  i6 = 0;
  return i6 | 0;
 }
 i6 = _fread(i3, 1, i4, i1) | 0;
 return i6 | 0;
}

function _compare_uni_maps(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i2 & 2147483647 | 0) == (i1 & 2147483647 | 0)) {
  if (i2 >>> 0 > i1 >>> 0) {
   i3 = 1;
   return i3 | 0;
  }
  i3 = (i2 >>> 0 < i1 >>> 0) << 31 >> 31;
  return i3 | 0;
 } else {
  if ((i2 & 2147483647) >>> 0 > (i1 & 2147483647) >>> 0) {
   i3 = 1;
   return i3 | 0;
  }
  i3 = ((i2 & 2147483647) >>> 0 < (i1 & 2147483647) >>> 0) << 31 >> 31;
  return i3 | 0;
 }
 return 0;
}

function _ps_hints_t2mask(i7, i6, i2, i5) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 if (HEAP32[i7 + 4 >> 2] | 0) return;
 i3 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[i7 + 16 >> 2] | 0;
 i4 = HEAP32[i7 + 52 >> 2] | 0;
 if ((i4 + i1 | 0) != (i2 | 0)) return;
 i1 = _ps_dimension_set_mask_bits(i7 + 16 | 0, i5, i4, i1, i6, i3) | 0;
 if (!i1) {
  i1 = _ps_dimension_set_mask_bits(i7 + 52 | 0, i5, 0, i4, i6, i3) | 0;
  if (!i1) return;
 }
 HEAP32[i7 + 4 >> 2] = i1;
 return;
}

function __ZNK17VertexDeclaration13DataDimensionE18VertexDataSemantic(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i2 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i2) {
  i5 = 0;
  return i5 | 0;
 }
 i3 = HEAP32[i1 >> 2] | 0;
 i1 = 0;
 while (1) {
  if ((HEAP32[i3 + (i1 * 52 | 0) >> 2] | 0) == (i4 | 0)) break;
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= i2 >>> 0) {
   i1 = 0;
   i5 = 6;
   break;
  }
 }
 if ((i5 | 0) == 6) return i1 | 0;
 i5 = HEAPU8[i3 + (i1 * 52 | 0) + 8 >> 0] | 0;
 return i5 | 0;
}

function _sfnt_get_charset_id(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _tt_face_find_bdf_prop(i2, 325861, i5) | 0;
 if (!i1) {
  i1 = _tt_face_find_bdf_prop(i2, 325878, i5 + 8 | 0) | 0;
  if (!i1) if ((HEAP32[i5 >> 2] | 0) == 1 ? (HEAP32[i5 + 8 >> 2] | 0) == 1 : 0) {
   HEAP32[i3 >> 2] = HEAP32[i5 + 8 + 4 >> 2];
   HEAP32[i4 >> 2] = HEAP32[i5 + 4 >> 2];
   i1 = 0;
  } else i1 = 6;
 }
 STACKTOP = i5;
 return i1 | 0;
}

function __ZNSt3__113__vector_baseI6StringNS_9allocatorIS1_EEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i3 = i2 + -16 | 0;
   HEAP32[i4 + 4 >> 2] = i3;
   i2 = HEAP32[i3 >> 2] | 0;
   if (!i2) i2 = i3; else {
    __ZdaPv(i2);
    i2 = HEAP32[i4 + 4 >> 2] | 0;
   }
   HEAP32[i3 >> 2] = 0;
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i4 >> 2] | 0;
 }
 __ZdlPv(i1);
 return;
}

function __ZNK4math6float3plERKS0_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0, f6 = f0;
 f6 = Math_fround(HEAPF32[i3 >> 2]);
 f6 = Math_fround(f6 + Math_fround(HEAPF32[i2 >> 2]));
 f5 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f5 = Math_fround(f5 + Math_fround(HEAPF32[i2 + 4 >> 2]));
 f4 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f4 = Math_fround(f4 + Math_fround(HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 >> 2] = f6;
 HEAPF32[i1 + 4 >> 2] = f5;
 HEAPF32[i1 + 8 >> 2] = f4;
 return;
}

function __ZNK4math6float3miERKS0_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0, f6 = f0;
 f6 = Math_fround(HEAPF32[i3 >> 2]);
 f6 = Math_fround(f6 - Math_fround(HEAPF32[i2 >> 2]));
 f5 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f5 = Math_fround(f5 - Math_fround(HEAPF32[i2 + 4 >> 2]));
 f4 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 f4 = Math_fround(f4 - Math_fround(HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 >> 2] = f6;
 HEAPF32[i1 + 4 >> 2] = f5;
 HEAPF32[i1 + 8 >> 2] = f4;
 return;
}

function __ZNK17VertexDeclaration8DataTypeE18VertexDataSemantic(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i2 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i2) {
  i5 = 0;
  return i5 | 0;
 }
 i3 = HEAP32[i1 >> 2] | 0;
 i1 = 0;
 while (1) {
  if ((HEAP32[i3 + (i1 * 52 | 0) >> 2] | 0) == (i4 | 0)) break;
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= i2 >>> 0) {
   i1 = 0;
   i5 = 6;
   break;
  }
 }
 if ((i5 | 0) == 6) return i1 | 0;
 i5 = HEAP32[i3 + (i1 * 52 | 0) + 4 >> 2] | 0;
 return i5 | 0;
}

function __ZN12VertexBuffer14SetNumVerticesEib(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i6 + 68 >> 2] = i1;
 i2 = Math_imul(HEAP32[i6 + 56 >> 2] | 0, i1) | 0;
 i3 = HEAP32[i6 + 60 >> 2] | 0;
 if (!i3) return;
 i4 = HEAP32[i6 + 64 >> 2] | 0;
 if (i2 >>> 0 <= i4 >>> 0) return;
 i1 = __Znaj(i2) | 0;
 if (i5) _memcpy(i1 | 0, i3 | 0, (i4 >>> 0 > i2 >>> 0 ? i2 : i4) | 0) | 0;
 __ZdaPv(i3);
 HEAP32[i6 + 60 >> 2] = i1;
 HEAP32[i6 + 64 >> 2] = i2;
 return;
}

function _ft_gzip_stream_close(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = HEAP32[i2 + 12 >> 2] | 0;
 if (!i1) return;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 _inflateEnd(i1 + 12 | 0);
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 _ft_mem_free(i3, i1);
 HEAP32[i2 + 12 >> 2] = 0;
 return;
}

function _tt_cmap0_char_next(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 i2 = 0;
 while (1) {
  i1 = i4 + 1 | 0;
  if (i1 >>> 0 >= 256) {
   i3 = i2;
   i1 = 0;
   i2 = 4;
   break;
  }
  i2 = HEAP8[i3 + (i4 + 7) >> 0] | 0;
  if (!(i2 << 24 >> 24)) {
   i4 = i1;
   i2 = i2 & 255;
  } else {
   i3 = i2 & 255;
   i2 = 4;
   break;
  }
 }
 if ((i2 | 0) == 4) {
  HEAP32[i5 >> 2] = i1;
  return i3 | 0;
 }
 return 0;
}

function __ZN8Material10SetShadersE9SharedPtrI6ShaderES2_(i3, i4, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if ((HEAP32[i3 + 44 >> 2] | 0) == (HEAP32[i4 >> 2] | 0) ? (HEAP32[i3 + 48 >> 2] | 0) == (HEAP32[i2 >> 2] | 0) : 0) return;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  _glDeleteProgram(i1 | 0);
  HEAP32[i3 >> 2] = 0;
 }
 __ZN9SharedPtrI6ShaderEaSERKS1_(i3 + 44 | 0, i4) | 0;
 __ZN9SharedPtrI6ShaderEaSERKS1_(i3 + 48 | 0, i2) | 0;
 __ZN8Material11LinkProgramEv(i3);
 return;
}

function _ps_hints_t2counter(i6, i1, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (HEAP32[i6 + 4 >> 2] | 0) return;
 i2 = HEAP32[i6 >> 2] | 0;
 i3 = HEAP32[i6 + 16 >> 2] | 0;
 i4 = HEAP32[i6 + 52 >> 2] | 0;
 if ((i4 + i3 | 0) != (i1 | 0)) return;
 i1 = _ps_dimension_set_mask_bits(i6 + 16 | 0, i5, 0, i3, 0, i2) | 0;
 if (!i1) {
  i1 = _ps_dimension_set_mask_bits(i6 + 52 | 0, i5, i3, i4, 0, i2) | 0;
  if (!i1) return;
 }
 HEAP32[i6 + 4 >> 2] = i1;
 return;
}

function _af_indic_metrics_scale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 4 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 4 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 4 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 _af_cjk_metrics_scale_dim(i1, i2, 0);
 _af_cjk_metrics_scale_dim(i1, i2, 1);
 return;
}

function __ZN8Graphics12ApplyTextureE10ShaderTypeiP7Texture(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 if ((HEAP32[i4 + 156 + (i3 << 2) >> 2] | 0) == (i2 | 0)) return;
 if ((HEAP32[80] | 0) != (i3 + 33984 | 0)) {
  _glActiveTexture(i3 + 33984 | 0);
  HEAP32[80] = i3 + 33984;
 }
 if (!i2) i1 = 0; else i1 = HEAP32[i2 + 52 >> 2] | 0;
 _glBindTexture(((HEAP32[i2 + 40 >> 2] | 0) == 2 ? 3553 : 34067) | 0, i1 | 0);
 HEAP32[i4 + 156 + (i3 << 2) >> 2] = i2;
 return;
}

function _T1_Parse_Glyph(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = _T1_Parse_Glyph_And_Get_Char_String(i3, i1, i4) | 0;
 if (i2) {
  STACKTOP = i4;
  return i2 | 0;
 }
 i1 = HEAP32[(HEAP32[(HEAP32[i3 + 4 >> 2] | 0) + 128 >> 2] | 0) + 52 >> 2] | 0;
 if (!i1) {
  STACKTOP = i4;
  return i2 | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 31](HEAP32[i1 + 4 >> 2] | 0, i4);
 STACKTOP = i4;
 return i2 | 0;
}

function _Round_Super(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 + 480 >> 2] | 0;
 i3 = HEAP32[i1 + 484 >> 2] | 0;
 i1 = HEAP32[i1 + 476 >> 2] | 0;
 if ((i5 | 0) > -1) {
  i5 = (((i5 | 0) != 0 ? (i4 + i5 - i2 + i3 & 0 - i1 | 0) < 0 : 0) ? 0 : i4 + i5 - i2 + i3 & 0 - i1) + i2 | 0;
  return i5 | 0;
 } else {
  i5 = ((0 - (i4 - i5 + i3 - i2 & 0 - i1) | 0) > 0 ? 0 : 0 - (i4 - i5 + i3 - i2 & 0 - i1) | 0) - i2 | 0;
  return i5 | 0;
 }
 return 0;
}

function _FT_Vector_Transform(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 if (!((i2 | 0) != 0 & (i1 | 0) != 0)) return;
 i3 = _FT_MulFix(HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 i3 = (_FT_MulFix(HEAP32[i2 + 4 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0) | 0) + i3 | 0;
 i4 = _FT_MulFix(HEAP32[i2 >> 2] | 0, HEAP32[i1 + 8 >> 2] | 0) | 0;
 i1 = (_FT_MulFix(HEAP32[i2 + 4 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0) | 0) + i4 | 0;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i2 + 4 >> 2] = i1;
 return;
}

function _t1_hints_stem(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_FT_RoundFix(HEAP32[i1 >> 2] | 0) | 0) >> 16;
 i1 = (_FT_RoundFix(HEAP32[i1 + 4 >> 2] | 0) | 0) >> 16;
 if (HEAP32[i4 + 4 >> 2] | 0) return;
 if (((HEAP32[i4 + 12 >> 2] | 0) + -1 | 0) >>> 0 >= 2) return;
 i1 = _ps_dimension_add_t1stem(i4 + 16 + ((i3 >>> 0 > 1 ? (i3 | 0) != 0 & 1 : i3) * 36 | 0) | 0, i2, i1, HEAP32[i4 >> 2] | 0, 0) | 0;
 if (!i1) return;
 HEAP32[i4 + 4 >> 2] = i1;
 return;
}

function _af_cjk_metrics_scale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 4 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 4 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 4 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 4 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i1 + 4 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 4 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
 _af_cjk_metrics_scale_dim(i1, i2, 0);
 _af_cjk_metrics_scale_dim(i1, i2, 1);
 return;
}

function _tt_find_sbit_image(i5, i6, i7, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i5 + 616 >> 2] | 0;
 if (((i1 | 0) != 0 ? (HEAP32[i5 + 612 >> 2] | 0) >>> 0 > i7 >>> 0 : 0) ? (_find_sbit_range(i6, i1 + (i7 * 48 | 0) | 0, i3, i2) | 0) == 0 : 0) {
  HEAP32[i4 >> 2] = i1 + (i7 * 48 | 0);
  i7 = 0;
  return i7 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 i7 = 6;
 return i7 | 0;
}

function __ZNK4math4Quat12IsNormalizedEf(i2, f1) {
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 var f3 = f0, f4 = f0;
 f4 = Math_fround(HEAPF32[i2 >> 2]);
 f4 = Math_fround(f4 * f4);
 f3 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f3 = Math_fround(f4 + Math_fround(f3 * f3));
 f4 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f4 = Math_fround(f3 + Math_fround(f4 * f4));
 f3 = Math_fround(HEAPF32[i2 + 12 >> 2]);
 return __ZN4math8EqualAbsEfff(Math_fround(f4 + Math_fround(f3 * f3)), Math_fround(1.0), f1) | 0;
}

function __ZNK12VertexBuffer13NumPrimitivesEv(i1) {
 i1 = i1 | 0;
 switch (HEAP32[i1 + 48 >> 2] | 0) {
 case 1:
  {
   i1 = HEAP32[i1 + 68 >> 2] | 0;
   break;
  }
 case 2:
  {
   i1 = (HEAP32[i1 + 68 >> 2] | 0) / 2 | 0;
   break;
  }
 case 3:
  {
   i1 = (HEAP32[i1 + 68 >> 2] | 0) + -1 | 0;
   break;
  }
 case 4:
  {
   i1 = (HEAP32[i1 + 68 >> 2] | 0) / 3 | 0;
   break;
  }
 case 5:
  {
   i1 = (HEAP32[i1 + 68 >> 2] | 0) + -2 | 0;
   break;
  }
 default:
  i1 = 0;
 }
 return i1 | 0;
}

function _ft_synthesize_vertical_metrics(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = HEAP32[i4 + 12 >> 2] | 0;
 if ((i2 | 0) < 0) i1 = (i1 | 0) < (i2 | 0) ? i2 : i1; else i1 = i1 - ((i2 | 0) > 0 ? i2 : 0) | 0;
 i3 = (i3 | 0) == 0 ? (i1 * 12 | 0) / 10 | 0 : i3;
 HEAP32[i4 + 20 >> 2] = (HEAP32[i4 + 8 >> 2] | 0) - ((HEAP32[i4 + 16 >> 2] | 0) / 2 | 0);
 HEAP32[i4 + 24 >> 2] = (i3 - i1 | 0) / 2 | 0;
 HEAP32[i4 + 28 >> 2] = i3;
 return;
}

function _FT_Outline_Translate(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if (!i1) return;
 i2 = HEAP16[i1 + 2 >> 1] | 0;
 if (i2 << 16 >> 16 <= 0) return;
 i3 = 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 while (1) {
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + i4;
  i6 = i1 + 4 | 0;
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + i5;
  i3 = i3 + 1 << 16 >> 16;
  if ((i3 & 65535 | 0) >= (i2 << 16 >> 16 | 0)) break; else i1 = i1 + 8 | 0;
 }
 return;
}

function _t42_ps_get_font_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 + 132 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 132 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 132 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 132 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 132 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 132 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 132 + 24 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 132 + 28 >> 2];
 return 0;
}

function _t1_ps_get_font_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 + 132 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 132 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 132 + 8 >> 2];
 HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 132 + 12 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 132 + 16 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 132 + 20 >> 2];
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 132 + 24 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 132 + 28 >> 2];
 return 0;
}

function __ZNK4math6float312IsNormalizedEf(i2, f1) {
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 var f3 = f0, f4 = f0;
 f4 = Math_fround(HEAPF32[i2 >> 2]);
 f4 = Math_fround(f4 * f4);
 f3 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f3 = Math_fround(f4 + Math_fround(f3 * f3));
 f4 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 f4 = Math_fround(Math_fround(f3 + Math_fround(f4 * f4)) + Math_fround(-1.0));
 i2 = f4 >= Math_fround(0.0);
 f3 = Math_fround(-f4);
 return (i2 ? f4 : f3) <= f1 | 0;
}

function __ZN10VoidEvent4I8Graphicsiii17ScreenOrientationE17ClassEventHandlerI11ApplicationE6InvokeEPS0_iiiS1_(i2, i1, i3, i4, i5, i6) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 i7 = HEAP32[i2 + 8 + 4 >> 2] | 0;
 i2 = (HEAP32[i2 + 4 >> 2] | 0) + (i7 >> 1) | 0;
 if (i7 & 1) i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + i1 >> 2] | 0;
 FUNCTION_TABLE_viiiii[i1 & 7](i2, i3, i4, i5, i6);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i1, i3); else {
  i4 = HEAP32[i4 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 15](i4, i2, i1, i3);
 }
 return;
}

function ___stdio_seek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i4 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = i4 + 20;
 HEAP32[i4 + 16 >> 2] = i3;
 if ((___syscall_ret(___syscall140(140, i4 | 0) | 0) | 0) < 0) {
  HEAP32[i4 + 20 >> 2] = -1;
  i1 = -1;
 } else i1 = HEAP32[i4 + 20 >> 2] | 0;
 STACKTOP = i4;
 return i1 | 0;
}

function __ZN12VertexBufferC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP8[i1 + 4 >> 0] = 0;
 __ZN17VertexDeclarationC2Ev(i1 + 32 | 0);
 HEAP32[i1 + 60 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 68 >> 2] = 0;
 HEAP32[i1 + 72 >> 2] = 1;
 HEAP8[i1 + 76 >> 0] = 0;
 HEAP8[i1 + 77 >> 0] = 0;
 HEAP32[i1 + 80 >> 2] = 0;
 i1 = i1 + 88 | 0;
 i2 = i1 + 44 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function _T1_Set_Var_Design(i2, i4, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((i4 + -1 | 0) >>> 0 < 4) i3 = 0; else {
  i4 = 6;
  STACKTOP = i5;
  return i4 | 0;
 }
 do {
  HEAP32[i5 + (i3 << 2) >> 2] = (_FT_RoundFix(HEAP32[i1 + (i3 << 2) >> 2] | 0) | 0) >> 16;
  i3 = i3 + 1 | 0;
 } while ((i3 | 0) != (i4 | 0));
 i4 = _T1_Set_MM_Design(i2, i4, i5) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _cff_get_interface(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = _ft_service_list_lookup(267284, i3) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i1 = _FT_Get_Module(i1, 325800) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 255](i1, i3) | 0;
 return i3 | 0;
}

function _ft_service_list_lookup(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 if (!((i1 | 0) != 0 & (i3 | 0) != 0)) {
  i4 = 0;
  return i4 | 0;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i4 = 0;
  return i4 | 0;
 }
 while (1) {
  if (!(_strcmp(i2, i3) | 0)) break;
  i1 = i1 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   i1 = 0;
   i4 = 6;
   break;
  }
 }
 if ((i4 | 0) == 6) return i1 | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 return i4 | 0;
}

function __Z26StringToEngineConstantTypePKc(i1) {
 i1 = i1 | 0;
 if ((i1 | 0) != 304082) if (i1) if (_strcasecmp(i1, 304082) | 0) if ((i1 | 0) != 304088 ? (_strcasecmp(i1, 304088) | 0) != 0 : 0) if ((i1 | 0) != 304098 ? (_strcasecmp(i1, 304098) | 0) != 0 : 0) if ((i1 | 0) == 304107) i1 = 3; else {
  i1 = (_strcasecmp(i1, 304107) | 0) == 0;
  i1 = i1 ? 3 : 2147483647;
 } else i1 = 2; else i1 = 1; else i1 = 0; else i1 = 2147483647; else i1 = 0;
 return i1 | 0;
}

function _t1_decrypt(i5, i1, i2) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0;
 if ((i1 | 0) < 1) return;
 i3 = ~((i5 + -1 - (i5 + i1) | 0) >>> 0 > ~i1 >>> 0 ? i5 + -1 - (i5 + i1) | 0 : ~i1);
 i4 = 0;
 i2 = i2 & 65535;
 while (1) {
  i6 = i5 + i4 | 0;
  i1 = HEAPU8[i6 >> 0] | 0;
  HEAP8[i6 >> 0] = i1 ^ i2 >>> 8;
  i4 = i4 + 1 | 0;
  if ((i4 | 0) == (i3 | 0)) break; else i2 = ((i1 + i2 | 0) * 52845 | 0) + 22719 & 65535;
 }
 return;
}

function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[i1 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[i1 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[i1 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[i1 + 7 >> 0];
}

function __ZN12VertexBuffer17AllocateGpuMemoryE13ResourceUsagebb(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (HEAP32[i3 + 88 >> 2] | 0) return;
 HEAP32[i3 + 72 >> 2] = i4;
 HEAP8[i3 + 76 >> 0] = i1 & 1;
 HEAP8[i3 + 77 >> 0] = i2 & 1;
 _glGenBuffers(1, i3 + 88 | 0);
 if ((HEAP32[i3 + 72 >> 2] | 0) == 3) _glGenBuffers(1, i3 + 92 | 0);
 if (!(HEAP32[i3 + 60 >> 2] | 0)) return;
 __ZN12VertexBuffer11UpdateToGpuEv(i3);
 return;
}

function __ZN8GraphicsD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 __ZN8Graphics6DeinitEv(i2);
 HEAP32[122] = 0;
 i1 = HEAP32[i2 + 44 >> 2] | 0;
 if (!((HEAP32[i2 + 56 >> 2] | 0) == 0 & (i1 | 0) == 0)) __ZdaPv(i1);
 HEAP32[i2 + 44 >> 2] = 0;
 HEAP32[i2 + 44 + 4 >> 2] = 0;
 HEAP32[i2 + 44 + 8 >> 2] = 0;
 HEAP32[i2 + 44 + 12 >> 2] = 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 return;
}

function _T42_GlyphSlot_Init(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = HEAP32[i4 + 500 >> 2] | 0;
 if (!(HEAP32[i4 + 84 >> 2] | 0)) {
  HEAP32[i2 + 160 >> 2] = HEAP32[i1 + 84 >> 2];
  i4 = 0;
  STACKTOP = i3;
  return i4 | 0;
 } else {
  i4 = _FT_New_GlyphSlot(i1, i3) | 0;
  HEAP32[i2 + 160 >> 2] = HEAP32[i3 >> 2];
  STACKTOP = i3;
  return i4 | 0;
 }
 return 0;
}

function _tt_size_select(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 + 112 >> 2] = i2;
 if (HEAP32[i1 + 8 >> 2] & 1) {
  _FT_Select_Metrics(i1, i2);
  _tt_size_reset(i3) | 0;
  i3 = 0;
  return i3 | 0;
 }
 i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 + 532 >> 2] | 0) + 152 >> 2] & 127](i1, i2, i3 + 12 | 0) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 HEAP32[i3 + 112 >> 2] = -1;
 i3 = i1;
 return i3 | 0;
}

function __ZN8Material15SetVertexShaderE9SharedPtrI6ShaderE(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if ((HEAP32[i2 + 44 >> 2] | 0) == (HEAP32[i3 >> 2] | 0)) return;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1) {
  _glDeleteProgram(i1 | 0);
  HEAP32[i2 >> 2] = 0;
 }
 __ZN9SharedPtrI6ShaderEaSERKS1_(i2 + 44 | 0, i3) | 0;
 if (!(HEAP32[i2 + 44 >> 2] | 0)) return;
 if (!(HEAP32[i2 + 48 >> 2] | 0)) return;
 __ZN8Material11LinkProgramEv(i2);
 return;
}

function __ZN8Material14SetPixelShaderE9SharedPtrI6ShaderE(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if ((HEAP32[i3 + 48 >> 2] | 0) == (HEAP32[i2 >> 2] | 0)) return;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  _glDeleteProgram(i1 | 0);
  HEAP32[i3 >> 2] = 0;
 }
 __ZN9SharedPtrI6ShaderEaSERKS1_(i3 + 48 | 0, i2) | 0;
 if (!(HEAP32[i3 + 44 >> 2] | 0)) return;
 if (!(HEAP32[i3 + 48 >> 2] | 0)) return;
 __ZN8Material11LinkProgramEv(i3);
 return;
}

function __ZN12VertexBuffer9SetFloat2Ei18VertexDataSemanticiRKN4math6float2E(i4, i5, i3, i1, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i4 + 32 | 0, i3) | 0;
 i5 = (HEAP32[i4 + 60 >> 2] | 0) + ((Math_imul(HEAP32[i4 + 56 >> 2] | 0, i5) | 0) + i3) | 0;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i5 + 4 >> 2] = i4;
 return;
}

function ___towrite(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP8[i2 + 74 >> 0] | 0;
 HEAP8[i2 + 74 >> 0] = i1 + 255 | i1;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 8)) {
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  i1 = HEAP32[i2 + 44 >> 2] | 0;
  HEAP32[i2 + 28 >> 2] = i1;
  HEAP32[i2 + 20 >> 2] = i1;
  HEAP32[i2 + 16 >> 2] = i1 + (HEAP32[i2 + 48 >> 2] | 0);
  i1 = 0;
 } else {
  HEAP32[i2 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZN4math6float39RandomDirERNS_3LCGEf(i1, i2, f3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAPF32[i4 >> 2] = Math_fround(0.0);
 HEAPF32[i4 + 4 >> 2] = Math_fround(0.0);
 HEAPF32[i4 + 8 >> 2] = Math_fround(0.0);
 __ZN4math6SphereC2ERKNS_6float3Ef(i4 + 16 | 0, i4, f3);
 __ZN4math6Sphere20RandomPointOnSurfaceERNS_3LCGE(i1, i4 + 16 | 0, i2);
 STACKTOP = i4;
 return;
}

function _t1_get_name_index(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[i1 + 416 >> 2] | 0;
 if ((i3 | 0) <= 0) {
  i4 = 0;
  return i4 | 0;
 }
 i2 = HEAP32[i1 + 420 >> 2] | 0;
 i1 = 0;
 while (1) {
  if (!(_strcmp(i4, HEAP32[i2 + (i1 << 2) >> 2] | 0) | 0)) {
   i2 = 5;
   break;
  }
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i3 | 0)) {
   i1 = 0;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function ___stdout_write(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 HEAP32[i2 + 36 >> 2] = 42;
 if ((HEAP32[i2 >> 2] & 64 | 0) == 0 ? (HEAP32[i4 >> 2] = HEAP32[i2 + 60 >> 2], HEAP32[i4 + 4 >> 2] = 21505, HEAP32[i4 + 8 >> 2] = i4 + 12, (___syscall54(54, i4 | 0) | 0) != 0) : 0) HEAP8[i2 + 75 >> 0] = -1;
 i3 = ___stdio_write(i2, i1, i3) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _FT_Stream_Skip(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if ((i1 | 0) < 0) {
  i3 = 85;
  return i3 | 0;
 }
 i1 = (HEAP32[i3 + 8 >> 2] | 0) + i1 | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 if (!i2) {
  if ((HEAP32[i3 + 4 >> 2] | 0) >>> 0 < i1 >>> 0) {
   i3 = 85;
   return i3 | 0;
  }
 } else if (FUNCTION_TABLE_iiiii[i2 & 63](i3, i1, 0, 0) | 0) {
  i3 = 85;
  return i3 | 0;
 }
 HEAP32[i3 + 8 >> 2] = i1;
 i3 = 0;
 return i3 | 0;
}

function _pfr_slot_done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[HEAP32[i1 + 188 >> 2] >> 2] | 0;
 _ft_mem_free(i2, HEAP32[i1 + 168 >> 2] | 0);
 HEAP32[i1 + 168 >> 2] = 0;
 HEAP32[i1 + 172 >> 2] = 0;
 HEAP32[i1 + 164 >> 2] = 0;
 _ft_mem_free(i2, HEAP32[i1 + 184 >> 2] | 0);
 HEAP32[i1 + 176 >> 2] = 0;
 HEAP32[i1 + 176 + 4 >> 2] = 0;
 HEAP32[i1 + 176 + 8 >> 2] = 0;
 HEAP32[i1 + 176 + 12 >> 2] = 0;
 HEAP8[i1 + 176 + 16 >> 0] = 0;
 return;
}

function __ZN4math6float3pLERKS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var f3 = f0;
 f3 = Math_fround(HEAPF32[i1 >> 2]);
 HEAPF32[i2 >> 2] = Math_fround(f3 + Math_fround(HEAPF32[i2 >> 2]));
 f3 = Math_fround(HEAPF32[i1 + 4 >> 2]);
 HEAPF32[i2 + 4 >> 2] = Math_fround(f3 + Math_fround(HEAPF32[i2 + 4 >> 2]));
 f3 = Math_fround(HEAPF32[i1 + 8 >> 2]);
 HEAPF32[i2 + 8 >> 2] = Math_fround(f3 + Math_fround(HEAPF32[i2 + 8 >> 2]));
 return i2 | 0;
}

function ___fmodeflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = (_strchr(i1, 43) | 0) == 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = i3 ? i2 << 24 >> 24 != 114 & 1 : 2;
 i4 = (_strchr(i1, 120) | 0) == 0;
 i3 = i4 ? i3 : i3 | 128;
 i1 = (_strchr(i1, 101) | 0) == 0;
 i1 = i1 ? i3 : i3 | 524288;
 i1 = i2 << 24 >> 24 == 114 ? i1 : i1 | 64;
 i1 = i2 << 24 >> 24 == 119 ? i1 | 512 : i1;
 return (i2 << 24 >> 24 == 97 ? i1 | 1024 : i1) | 0;
}

function __ZN14ProgramOptionsaSERKS_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) == (i1 | 0)) return i2 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 __ZN5ArrayI6String9StdCAllocEaSERKS2_(i2 + 28 | 0, i1 + 28 | 0) | 0;
 __ZN5ArrayI6String9StdCAllocEaSERKS2_(i2 + 12 | 0, i1 + 12 | 0) | 0;
 __ZN14ProgramOptions13BuildArgvPtrsEv(i2);
 return i2 | 0;
}

function _strcmp(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i1 << 24 >> 24) i2 = i3; else {
  do {
   i4 = i4 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = HEAP8[i4 >> 0] | 0;
   i1 = HEAP8[i2 >> 0] | 0;
  } while (!(i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i1 << 24 >> 24));
  i2 = i3;
 }
 return (i2 & 255) - (i1 & 255) | 0;
}

function _vsscanf(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i4 = i5;
 i6 = i4 + 112 | 0;
 do {
  HEAP32[i4 >> 2] = 0;
  i4 = i4 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 HEAP32[i5 + 32 >> 2] = 69;
 HEAP32[i5 + 44 >> 2] = i3;
 HEAP32[i5 + 76 >> 2] = -1;
 HEAP32[i5 + 84 >> 2] = i3;
 i6 = _vfscanf(i5, i2, i1) | 0;
 STACKTOP = i5;
 return i6 | 0;
}

function _FT_Stream_GetULongLE(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i2 + 32 >> 2] | 0;
 if ((i1 + 3 | 0) >>> 0 >= (HEAP32[i2 + 36 >> 2] | 0) >>> 0) {
  i3 = i1;
  i1 = 0;
  HEAP32[i2 + 32 >> 2] = i3;
  return i1 | 0;
 }
 i4 = i1 + 4 | 0;
 i3 = (HEAPU8[i1 + 2 >> 0] | 0) << 16 | (HEAPU8[i1 + 3 >> 0] | 0) << 24 | (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0);
 HEAP32[i2 + 32 >> 2] = i4;
 return i3 | 0;
}

function _memcmp(i2, i5, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 L1 : do if (!i1) i1 = 0; else {
  while (1) {
   i3 = HEAP8[i2 >> 0] | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (i3 << 24 >> 24 != i4 << 24 >> 24) break;
   i1 = i1 + -1 | 0;
   if (!i1) {
    i1 = 0;
    break L1;
   } else {
    i2 = i2 + 1 | 0;
    i5 = i5 + 1 | 0;
   }
  }
  i1 = (i3 & 255) - (i4 & 255) | 0;
 } while (0);
 return i1 | 0;
}

function _FT_Stream_GetULong(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i2 + 32 >> 2] | 0;
 if ((i1 + 3 | 0) >>> 0 >= (HEAP32[i2 + 36 >> 2] | 0) >>> 0) {
  i3 = i1;
  i1 = 0;
  HEAP32[i2 + 32 >> 2] = i3;
  return i1 | 0;
 }
 i4 = i1 + 4 | 0;
 i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
 HEAP32[i2 + 32 >> 2] = i4;
 return i3 | 0;
}

function _TT_Access_Glyph_Frame(i5, i1, i2, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 i3 = HEAP32[i5 + 24 >> 2] | 0;
 i1 = _FT_Stream_Seek(i3, i2) | 0;
 if (i1) {
  i5 = i1;
  return i5 | 0;
 }
 i1 = _FT_Stream_EnterFrame(i3, i4) | 0;
 if (i1) {
  i5 = i1;
  return i5 | 0;
 }
 HEAP32[i5 + 200 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i5 + 204 >> 2] = HEAP32[i3 + 36 >> 2];
 i5 = 0;
 return i5 | 0;
}

function __ZNK4math6float33DotERKS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var f3 = f0, f4 = f0;
 f3 = Math_fround(HEAPF32[i2 >> 2]);
 f3 = Math_fround(f3 * Math_fround(HEAPF32[i1 >> 2]));
 f4 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 f4 = Math_fround(f3 + Math_fround(f4 * Math_fround(HEAPF32[i1 + 4 >> 2])));
 f3 = Math_fround(HEAPF32[i2 + 8 >> 2]);
 return Math_fround(f4 + Math_fround(f3 * Math_fround(HEAPF32[i1 + 8 >> 2])));
}

function __ZN5ArrayIPKc9StdCAllocED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = HEAP32[i4 + 12 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i3) {
  i2 = 0;
  do {
   HEAP32[i1 + (i2 << 2) >> 2] = 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  } while (i2 >>> 0 < i3 >>> 0);
 }
 if (i1) __ZdaPv(i1);
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 return;
}

function __ZNK4math6float3dvEf(i1, i3, f2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 f2 = Math_fround(f2);
 var f4 = f0, f5 = f0;
 f2 = Math_fround(Math_fround(1.0) / f2);
 f5 = Math_fround(f2 * Math_fround(HEAPF32[i3 >> 2]));
 f4 = Math_fround(f2 * Math_fround(HEAPF32[i3 + 4 >> 2]));
 f2 = Math_fround(f2 * Math_fround(HEAPF32[i3 + 8 >> 2]));
 HEAPF32[i1 >> 2] = f5;
 HEAPF32[i1 + 4 >> 2] = f4;
 HEAPF32[i1 + 8 >> 2] = f2;
 return;
}

function _FT_SqrtFixed(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if ((i1 | 0) > 0) {
  i5 = 24;
  i2 = 0;
  i4 = i1;
  i1 = 0;
 } else {
  i5 = 0;
  return i5 | 0;
 }
 while (1) {
  i2 = i4 >>> 30 | i2 << 2;
  i3 = i1 << 2 | 1;
  i1 = (i2 >>> 0 < i3 >>> 0 | i1 << 1) ^ 1;
  i5 = i5 + -1 | 0;
  if (!i5) break; else {
   i2 = i2 - (i2 >>> 0 < i3 >>> 0 ? 0 : i3) | 0;
   i4 = i4 << 2;
  }
 }
 return i1 | 0;
}

function _ft_mem_strcpyn(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 L1 : do if (i3 >>> 0 > 1) while (1) {
  i4 = HEAP8[i2 >> 0] | 0;
  if (!(i4 << 24 >> 24)) break L1;
  i2 = i2 + 1 | 0;
  i5 = i1 + 1 | 0;
  HEAP8[i1 >> 0] = i4;
  i3 = i3 + -1 | 0;
  if (i3 >>> 0 <= 1) {
   i1 = i5;
   break;
  } else i1 = i5;
 } while (0);
 HEAP8[i1 >> 0] = 0;
 return (HEAP8[i2 >> 0] | 0) != 0 | 0;
}

function __ZN5ImageD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if ((HEAP8[i2 + 8 >> 0] | 0) != 0 ? (i1 = HEAP32[i2 >> 2] | 0, (i1 | 0) != 0) : 0) __ZdaPv(i1);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP8[i2 + 8 >> 0] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 12 + 4 >> 2] = 0;
 HEAP32[i2 + 12 + 8 >> 2] = 0;
 HEAP32[i2 + 12 + 12 >> 2] = 0;
 HEAP32[i2 + 12 + 16 >> 2] = 0;
 HEAP32[i2 + 12 + 20 >> 2] = 0;
 return;
}

function ___ftello_unlocked(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!(HEAP32[i2 >> 2] & 128)) i1 = 1; else i1 = (HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i2 + 40 >> 2] & 127](i2, 0, i1) | 0;
 if ((i1 | 0) >= 0) i1 = i1 - (HEAP32[i2 + 8 >> 2] | 0) + (HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i2 + 20 >> 2] | 0) - (HEAP32[i2 + 28 >> 2] | 0) | 0;
 return i1 | 0;
}

function _Vertical_Sweep_Init(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i4 + 112 >> 2] | 0;
 HEAP16[i4 + 156 >> 1] = 0 - i2;
 i1 = Math_imul(HEAP16[i3 >> 1] | 0, 0 - i2 | 0) | 0;
 HEAP32[i4 + 148 >> 2] = i1;
 if ((i2 | 0) > 0) HEAP32[i4 + 148 >> 2] = (Math_imul((HEAP32[i4 + 104 >> 2] | 0) + -1 | 0, i2) | 0) + i1;
 HEAP16[i4 + 158 >> 1] = 0;
 HEAP16[i4 + 160 >> 1] = 0;
 return;
}

function _tt_cmap6_char_index(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i1 = i3 - ((HEAPU8[i2 + 6 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0)) | 0;
 if (i1 >>> 0 >= ((HEAPU8[i2 + 8 >> 0] | 0) << 8 | (HEAPU8[i2 + 9 >> 0] | 0)) >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = (HEAPU8[i2 + ((i1 << 1) + 10) >> 0] | 0) << 8 | (HEAPU8[i2 + ((i1 << 1) + 11) >> 0] | 0);
 return i3 | 0;
}

function _ft_glyphslot_free_bitmap(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 156 >> 2] | 0;
 if ((i2 | 0) != 0 ? (HEAP32[i2 + 4 >> 2] & 1 | 0) != 0 : 0) {
  _ft_mem_free(HEAP32[(HEAP32[i1 + 4 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i1 + 88 >> 2] | 0);
  HEAP32[i1 + 88 >> 2] = 0;
  i2 = (HEAP32[i1 + 156 >> 2] | 0) + 4 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
  return;
 }
 HEAP32[i1 + 88 >> 2] = 0;
 return;
}

function __ZN11IndexBufferD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 __ZN11IndexBuffer13FreeGpuMemoryEv(i2);
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 i1 = HEAP32[i2 + 28 >> 2] | 0;
 if (!i1) {
  HEAP32[i2 + 28 >> 2] = 0;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i2 + 28 >> 2] = 0;
 return;
}

function __ZN4math7Frustum28SetVerticalFovAndAspectRatioEff(i2, f3, f1) {
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 f1 = Math_fround(f1);
 HEAP32[i2 >> 2] = 2;
 HEAPF32[i2 + 60 >> 2] = f3;
 HEAPF32[i2 + 56 >> 2] = Math_fround(Math_fround(__ZN4math4AtanEf(Math_fround(Math_fround(__ZN4math3TanEf(Math_fround(f3 * Math_fround(.5)))) * f1))) * Math_fround(2.0));
 __ZN4math7Frustum23ProjectionMatrixChangedEv(i2);
 return;
}

function _FT_New_Memory_Face(i5, i3, i4, i2, i1) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if (!i3) {
  i5 = 6;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i6 >> 2] = 1;
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i6 + 8 >> 2] = i4;
 HEAP32[i6 + 16 >> 2] = 0;
 i5 = _FT_Open_Face(i5, i6, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _ft_corner_is_flat(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = ((i4 + i2 | 0) < 0 ? 0 - (i4 + i2) | 0 : i4 + i2 | 0) + ((i3 + i1 | 0) < 0 ? 0 - (i3 + i1) | 0 : i3 + i1 | 0) | 0;
 return (((i2 | 0) < 0 ? 0 - i2 | 0 : i2) + ((i1 | 0) < 0 ? 0 - i1 | 0 : i1) + ((i3 | 0) < 0 ? 0 - i3 | 0 : i3) + ((i4 | 0) < 0 ? 0 - i4 | 0 : i4) - i5 | 0) < (i5 >> 4 | 0) | 0;
}

function __ZN15RasterizerStateC2E8FillMode8CullModebiffbbb(i10, i6, i2, i5, i3, f4, f9, i8, i7, i1) {
 i10 = i10 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 f4 = Math_fround(f4);
 f9 = Math_fround(f9);
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = i2;
 HEAP32[i10 + 8 >> 2] = i3;
 HEAPF32[i10 + 12 >> 2] = f9;
 HEAP8[i10 + 16 >> 0] = i8 & 1;
 return;
}

function ___string_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP32[i2 + 84 >> 2] | 0;
 i4 = _memchr(i5, 0, i3 + 256 | 0) | 0;
 i4 = (i4 | 0) == 0 ? i3 + 256 | 0 : i4 - i5 | 0;
 i3 = i4 >>> 0 < i3 >>> 0 ? i4 : i3;
 _memcpy(i1 | 0, i5 | 0, i3 | 0) | 0;
 HEAP32[i2 + 4 >> 2] = i5 + i3;
 HEAP32[i2 + 8 >> 2] = i5 + i4;
 HEAP32[i2 + 84 >> 2] = i5 + i4;
 return i3 | 0;
}

function _tt_cmap14_def_char_count(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = i1 + 7 | 0;
 i1 = 0;
 while (1) {
  i1 = i1 + 1 + (HEAPU8[i3 >> 0] | 0) | 0;
  i2 = i2 + -1 | 0;
  if (!i2) break; else i3 = i3 + 4 | 0;
 }
 return i1 | 0;
}

function __ZN20ShaderConstantBuffer9SetFloat3EiRKN4math6float3E(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = (HEAP32[i4 + 4 >> 2] | 0) + (HEAP32[(HEAP32[i4 + 12 >> 2] | 0) + (i1 * 156 | 0) + 136 >> 2] | 0) | 0;
 i1 = i3 + 12 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i2 = i2 + 1 | 0;
 } while ((i3 | 0) < (i1 | 0));
 HEAP8[i4 + 32 >> 0] = 1;
 return;
}

function _tt_face_set_sbit_strike_stub(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i4;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = 0;
 HEAP32[i1 >> 2] = 2147483647;
 i4 = _FT_Match_Size(i2, i5, 0, i1) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __Znwj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? 1 : i1;
 i1 = _malloc(i2) | 0;
 L1 : do if (!i1) {
  while (1) {
   i1 = __ZSt15get_new_handlerv() | 0;
   if (!i1) break;
   FUNCTION_TABLE_v[i1 & 7]();
   i1 = _malloc(i2) | 0;
   if (i1) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 281280;
  ___cxa_throw(i2 | 0, 96, 61);
 } while (0);
 return i1 | 0;
}

function _ps_parser_init(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = i1;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 16 >> 2] = i3;
 i1 = i4 + 20 | 0;
 i2 = 280432;
 i3 = i1 + 52 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 return;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i4;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function _parse_expansion_factor(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 + 96 >> 2] | 0;
 if ((i1 | 0) <= -1) return 0;
 if ((i1 | 0) >= (HEAP32[i2 + 300 >> 2] | 0)) return 0;
 i2 = HEAP32[i2 + 304 >> 2] | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[i3 + 40 >> 2] & 255](i3, 0) | 0;
 HEAP32[i2 + (i1 * 252 | 0) + 208 >> 2] = i3;
 HEAP32[i2 + (i1 * 252 | 0) + 180 >> 2] = i3;
 return 0;
}

function _gray_raster_reset(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i3) return;
 if ((i1 | 0) != 0 & (i2 | 0) > 3475) {
  HEAP32[i3 + 16 >> 2] = i1;
  HEAP32[i3 >> 2] = i1 + 1440;
  HEAP32[i3 + 4 >> 2] = i2 + -1440 & -16;
  HEAP32[i3 + 8 >> 2] = (i2 + -1440 | 0) >>> 7;
  return;
 } else {
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 16 >> 2] = 0;
  return;
 }
}

function _pfr_get_advance(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 if (!i2) {
  i3 = 6;
  return i3 | 0;
 }
 if (!i3) {
  i3 = 6;
  return i3 | 0;
 }
 if ((i2 + -1 | 0) >>> 0 >= (HEAP32[i3 + 288 + 120 >> 2] | 0) >>> 0) {
  i3 = 6;
  return i3 | 0;
 }
 HEAP32[i1 >> 2] = HEAP32[(HEAP32[i3 + 288 + 128 >> 2] | 0) + (i2 + -1 << 4) + 4 >> 2];
 i3 = 0;
 return i3 | 0;
}

function _ft_raster1_transform(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i4 + 72 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) {
  i4 = 6;
  return i4 | 0;
 }
 if (i2) _FT_Outline_Transform(i4 + 108 | 0, i2);
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 _FT_Outline_Translate(i4 + 108 | 0, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0);
 i4 = 0;
 return i4 | 0;
}

function _cff_slot_init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i1 + 692 >> 2] | 0) + 2952 >> 2] | 0;
 if (!i2) return 0;
 i1 = _FT_Get_Module(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!i1) return 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[i2 + 8 >> 2] & 63](i1) | 0;
 HEAP32[(HEAP32[i3 + 156 >> 2] | 0) + 36 >> 2] = i2;
 return 0;
}

function _ft_smooth_transform(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i4 + 72 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) {
  i4 = 6;
  return i4 | 0;
 }
 if (i2) _FT_Outline_Transform(i4 + 108 | 0, i2);
 if (!i1) {
  i4 = 0;
  return i4 | 0;
 }
 _FT_Outline_Translate(i4 + 108 | 0, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0);
 i4 = 0;
 return i4 | 0;
}

function _fnt_cmap_char_next(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i1 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
 i2 = HEAP32[i3 + 16 >> 2] | 0;
 if (i1 >>> 0 <= i2 >>> 0) {
  i3 = 1;
  HEAP32[i4 >> 2] = i2;
  return i3 | 0;
 }
 i5 = (i1 - i2 | 0) >>> 0 < (HEAP32[i3 + 20 >> 2] | 0) >>> 0;
 i3 = i5 ? i1 - i2 + 1 | 0 : 0;
 i2 = i5 ? i1 : 0;
 HEAP32[i4 >> 2] = i2;
 return i3 | 0;
}

function _fwrite(i2, i5, i1, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0;
 i4 = Math_imul(i1, i5) | 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i6 = (___lockfile(i3) | 0) == 0;
  i2 = ___fwritex(i2, i4, i3) | 0;
  if (!i6) ___unlockfile(i3);
 } else i2 = ___fwritex(i2, i4, i3) | 0;
 if ((i2 | 0) != (i4 | 0)) i1 = (i2 >>> 0) / (i5 >>> 0) | 0;
 return i1 | 0;
}

function _tt_cmap4_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i1;
 do if (i1 >>> 0 <= 65535) if (!(HEAP32[i2 + 20 >> 2] & 1)) {
  i1 = _tt_cmap4_char_map_binary(i2, i3, 0) | 0;
  break;
 } else {
  i1 = _tt_cmap4_char_map_linear(i2, i3, 0) | 0;
  break;
 } else i1 = 0; while (0);
 STACKTOP = i3;
 return i1 | 0;
}

function __ZNK4math7Frustum11CenterPointEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, f4 = f0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 f4 = Math_fround(HEAPF32[i2 + 48 >> 2]);
 __ZN4mathmlEfRKNS_6float3E(i3, Math_fround(Math_fround(f4 + Math_fround(HEAPF32[i2 + 52 >> 2])) * Math_fround(.5)), i2 + 24 | 0);
 __ZNK4math6float3plERKS0_(i1, i2 + 12 | 0, i3);
 STACKTOP = i3;
 return;
}

function __ZSt9terminatev() {
 var i1 = 0, i2 = 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (((i1 | 0) != 0 ? (i2 = HEAP32[i1 >> 2] | 0, (i2 | 0) != 0) : 0) ? ((HEAP32[i2 + 48 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[i2 + 48 + 4 >> 2] | 0) == 1129074247 : 0) : 0) __ZSt11__terminatePFvvE(HEAP32[i2 + 12 >> 2] | 0);
 i2 = HEAP32[70317] | 0;
 HEAP32[70317] = i2 + 0;
 __ZSt11__terminatePFvvE(i2);
}

function __ZN20ShaderConstantBufferC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 4 >> 2] = 0;
 HEAP32[i1 + 4 + 8 >> 2] = 0;
 HEAP32[i1 + 4 + 12 >> 2] = 0;
 HEAP32[i1 + 4 + 16 >> 2] = 0;
 HEAP32[i1 + 4 + 20 >> 2] = 0;
 HEAP32[i1 + 4 + 24 >> 2] = 0;
 HEAP8[i1 >> 0] = -1;
 HEAP8[i1 + 1 >> 0] = -1 >> 8;
 HEAP8[i1 + 2 >> 0] = -1 >> 16;
 HEAP8[i1 + 3 >> 0] = -1 >> 24;
 return;
}

function _t1_decoder_done(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i2 + 16 >> 2] | 0;
 HEAP32[i1 + 108 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 108 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 108 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 108 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 108 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 return;
}

function _t1_builder_done(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i2 + 16 >> 2] | 0;
 HEAP32[i1 + 108 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 108 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i1 + 108 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i1 + 108 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i1 + 108 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 return;
}

function _tt_face_load_cmap(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 508 >> 2] & 63](i3, 1668112752, i2, i3 + 504 | 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i1 = _FT_Stream_ExtractFrame(i2, HEAP32[i3 + 504 >> 2] | 0, i3 + 500 | 0) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 HEAP32[i3 + 504 >> 2] = 0;
 i3 = i1;
 return i3 | 0;
}

function _ps_table_release(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 32 >> 2] | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) != -559038737) return;
 _ft_mem_free(i1, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 24 >> 2] | 0);
 HEAP32[i2 + 24 >> 2] = 0;
 _ft_mem_free(i1, HEAP32[i2 + 28 >> 2] | 0);
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 return;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = Math_imul(i2 & 65535, i1 & 65535) | 0;
 i5 = (i3 >>> 16) + (Math_imul(i2 & 65535, i1 >>> 16) | 0) | 0;
 i4 = Math_imul(i2 >>> 16, i1 & 65535) | 0;
 return (tempRet0 = (i5 >>> 16) + (Math_imul(i2 >>> 16, i1 >>> 16) | 0) + (((i5 & 65535) + i4 | 0) >>> 16) | 0, i5 + i4 << 16 | i3 & 65535 | 0) | 0;
}

function _cff_get_cid_from_glyph_index(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 692 >> 2] | 0;
 if (i1) if ((HEAP32[i1 + 1456 >> 2] | 0) != 65535 ? (HEAP32[i1 + 12 >> 2] | 0) >>> 0 >= i3 >>> 0 : 0) if (!i2) i1 = 0; else {
  HEAP32[i2 >> 2] = HEAPU16[(HEAP32[i1 + 1160 >> 2] | 0) + (i3 << 1) >> 1];
  i1 = 0;
 } else i1 = 6; else i1 = 0;
 return i1 | 0;
}

function __ZN4mathmlEfRKNS_6float3E(i1, f3, i2) {
 i1 = i1 | 0;
 f3 = Math_fround(f3);
 i2 = i2 | 0;
 var f4 = f0, f5 = f0;
 f5 = Math_fround(Math_fround(HEAPF32[i2 >> 2]) * f3);
 f4 = Math_fround(Math_fround(HEAPF32[i2 + 4 >> 2]) * f3);
 f3 = Math_fround(Math_fround(HEAPF32[i2 + 8 >> 2]) * f3);
 HEAPF32[i1 >> 2] = f5;
 HEAPF32[i1 + 4 >> 2] = f4;
 HEAPF32[i1 + 8 >> 2] = f3;
 return;
}

function __ZN12VertexBuffer10GetPointerEi18VertexDataSemantici(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = __ZNK17VertexDeclaration10TypeOffsetE18VertexDataSemantic(i3 + 32 | 0, i2) | 0;
 if ((i1 | 0) <= -1) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = (HEAP32[i3 + 60 >> 2] | 0) + ((Math_imul(HEAP32[i3 + 56 >> 2] | 0, i4) | 0) + i1) | 0;
 return i4 | 0;
}

function __ZNK4math8Triangle9NormalCCWEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 __ZNK4math6float3miERKS0_(i3 + 24 | 0, i2 + 12 | 0, i2);
 __ZNK4math6float3miERKS0_(i3 + 12 | 0, i2 + 24 | 0, i2);
 __ZNK4math6float35CrossERKS0_(i3, i3 + 24 | 0, i3 + 12 | 0);
 __ZNK4math6float310NormalizedEv(i1, i3);
 STACKTOP = i3;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i3, i2, i1, i4, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 if ((i5 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i3, i2, i1, i4);
 return;
}

function __ZNK4math8Triangle8NormalCWEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 __ZNK4math6float3miERKS0_(i3 + 24 | 0, i2 + 24 | 0, i2);
 __ZNK4math6float3miERKS0_(i3 + 12 | 0, i2 + 12 | 0, i2);
 __ZNK4math6float35CrossERKS0_(i3, i3 + 24 | 0, i3 + 12 | 0);
 __ZNK4math6float310NormalizedEv(i1, i3);
 STACKTOP = i3;
 return;
}

function _memmove(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i4 | 0) < (i1 | 0) & (i1 | 0) < (i4 + i2 | 0)) {
  i3 = i1;
  i4 = i4 + i2 | 0;
  i1 = i1 + i2 | 0;
  while ((i2 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i4 = i4 - 1 | 0;
   i2 = i2 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  }
  i1 = i3;
 } else _memcpy(i1, i4, i2) | 0;
 return i1 | 0;
}

function __ZNK4math6float3mlEf(i1, i3, f2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 f2 = Math_fround(f2);
 var f4 = f0, f5 = f0;
 f5 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) * f2);
 f4 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) * f2);
 f2 = Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) * f2);
 HEAPF32[i1 >> 2] = f5;
 HEAPF32[i1 + 4 >> 2] = f4;
 HEAPF32[i1 + 8 >> 2] = f2;
 return;
}

function _FT_Stream_GetUShortLE(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i2 + 32 >> 2] | 0;
 if ((i1 + 1 | 0) >>> 0 >= (HEAP32[i2 + 36 >> 2] | 0) >>> 0) {
  i3 = i1;
  i1 = 0;
  HEAP32[i2 + 32 >> 2] = i3;
  return i1 | 0;
 }
 i4 = i1 + 2 | 0;
 i3 = ((HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0)) & 65535;
 HEAP32[i2 + 32 >> 2] = i4;
 return i3 | 0;
}

function _T1_GlyphSlot_Init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = HEAP32[i1 + 552 >> 2] | 0;
 if (!i2) return 0;
 i1 = _FT_Get_Module(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!i1) return 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[i2 + 4 >> 2] & 63](i1) | 0;
 HEAP32[(HEAP32[i3 + 156 >> 2] | 0) + 36 >> 2] = i2;
 return 0;
}

function _FT_Stream_GetUShort(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[i2 + 32 >> 2] | 0;
 if ((i1 + 1 | 0) >>> 0 >= (HEAP32[i2 + 36 >> 2] | 0) >>> 0) {
  i3 = i1;
  i1 = 0;
  HEAP32[i2 + 32 >> 2] = i3;
  return i1 | 0;
 }
 i4 = i1 + 2 | 0;
 i3 = ((HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0)) & 65535;
 HEAP32[i2 + 32 >> 2] = i4;
 return i3 | 0;
}

function _FT_List_Up(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 if (!i1) return;
 HEAP32[i1 + 4 >> 2] = i2;
 if (!i2) HEAP32[i3 + 4 >> 2] = i1; else HEAP32[i2 >> 2] = i1;
 HEAP32[i4 >> 2] = 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i2 >> 2] = i4;
 HEAP32[i3 >> 2] = i4;
 return;
}

function _cid_slot_init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = HEAP32[i1 + 320 >> 2] | 0;
 if (!i2) return 0;
 i1 = _FT_Get_Module(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 4 >> 2] | 0, 325984) | 0;
 if (!i1) return 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[i2 + 4 >> 2] & 63](i1) | 0;
 HEAP32[(HEAP32[i3 + 156 >> 2] | 0) + 36 >> 2] = i2;
 return 0;
}

function _cff_cmap_unicode_init(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i1 + 692 >> 2] | 0;
 if (!(HEAP32[i2 + 1160 >> 2] | 0)) {
  i3 = 163;
  return i3 | 0;
 }
 i3 = FUNCTION_TABLE_iiiiiii[HEAP32[(HEAP32[i2 + 2956 >> 2] | 0) + 4 >> 2] & 3](HEAP32[i1 + 100 >> 2] | 0, i3, HEAP32[i2 + 12 >> 2] | 0, 153, 0, i1) | 0;
 return i3 | 0;
}

function __ZN12FTGlyphCacheC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = i1 + 4;
 HEAP32[i1 + 8 >> 2] = i1 + 4;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 12 + 4 >> 2] = 0;
 HEAP32[i1 + 12 + 8 >> 2] = 0;
 HEAP32[i1 + 12 + 12 >> 2] = 0;
 __ZN7TextureC2Ev(i1 + 28 | 0);
 __ZN7TextureC2Ev(i1 + 96 | 0);
 __ZN15MaxRectsBinPackC2Ev(i1 + 164 | 0);
 return;
}

function __ZN4math4AABBC2ERKNS_6float3ES3_(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 12 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 12 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 return;
}

function _llvm_cttz_i32(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP8[cttz_i8 + (i2 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 | 0;
 i1 = HEAP8[cttz_i8 + (i2 >> 8 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 + 8 | 0;
 i1 = HEAP8[cttz_i8 + (i2 >> 16 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 + 16 | 0;
 return (HEAP8[cttz_i8 + (i2 >>> 24) >> 0] | 0) + 24 | 0;
}

function __Z9File_OpenPKcS0_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP8[i1 + 28 >> 0] = 0;
 __ZN4File4OpenEPKcS1_(i1, i3, i2) | 0;
 return;
}

function _destroy_size(i3, i4, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i4);
 i1 = HEAP32[(HEAP32[i2 + 12 >> 2] | 0) + 60 >> 2] | 0;
 if (i1) FUNCTION_TABLE_vi[i1 & 127](i4);
 _ft_mem_free(i3, HEAP32[i4 + 40 >> 2] | 0);
 HEAP32[i4 + 40 >> 2] = 0;
 _ft_mem_free(i3, i4);
 return;
}

function _init_mparams() {
 var i1 = 0;
 do if (!(HEAP32[70530] | 0)) {
  i1 = _sysconf(30) | 0;
  if (!(i1 + -1 & i1)) {
   HEAP32[70532] = i1;
   HEAP32[70531] = i1;
   HEAP32[70533] = -1;
   HEAP32[70534] = -1;
   HEAP32[70535] = 0;
   HEAP32[70523] = 0;
   HEAP32[70530] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 return;
}

function _ft_ansi_stream_io(i5, i4, i2, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if ((i3 | 0) == 0 ? (HEAP32[i5 + 4 >> 2] | 0) >>> 0 < i4 >>> 0 : 0) {
  i5 = 1;
  return i5 | 0;
 }
 i1 = HEAP32[i5 + 12 >> 2] | 0;
 if ((HEAP32[i5 + 8 >> 2] | 0) != (i4 | 0)) _fseek(i1, i4, 0) | 0;
 i5 = _fread(i2, 1, i3, i1) | 0;
 return i5 | 0;
}

function __ZN4math6SinCosEfRfS0_(f2, i4, i3) {
 f2 = Math_fround(f2);
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = ~~Math_fround(f2 * Math_fround(10430.3779));
 if ((i1 | 0) > -1) i1 = i1 & 65535; else i1 = 65536 - (0 - i1 & 65535) | 0;
 HEAP32[i4 >> 2] = HEAP32[804 + (i1 << 2) >> 2];
 HEAP32[i3 >> 2] = HEAP32[804 + ((81920 - i1 & 65535) << 2) >> 2];
 return;
}

function _FNT_Size_Select(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i3 + 132 >> 2] | 0;
 _FT_Select_Metrics(i3, 0);
 i3 = HEAPU16[i2 + 80 >> 1] | 0;
 HEAP32[i1 + 24 >> 2] = i3 << 6;
 HEAP32[i1 + 28 >> 2] = i3 - (HEAPU16[i2 + 96 >> 1] | 0) << 6;
 HEAP32[i1 + 36 >> 2] = (HEAPU16[i2 + 102 >> 1] | 0) << 6;
 return 0;
}

function _t1_builder_check_points(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (((HEAP16[i1 + 22 >> 1] | 0) + i2 + (HEAP16[i1 + 58 >> 1] | 0) | 0) >>> 0 <= (HEAP32[i1 + 4 >> 2] | 0) >>> 0) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = _FT_GlyphLoader_CheckPoints(i1, i2, 0) | 0;
 return i2 | 0;
}

function _gray_raster_new(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 i1 = _ft_mem_alloc(i4, 20, i5) | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (i2) {
  STACKTOP = i5;
  return i2 | 0;
 }
 HEAP32[i1 + 12 >> 2] = i4;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i5;
 return i2 | 0;
}

function __ZN8Graphics23SetPresentationIntervalEi(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) > 120 ? 120 : (i1 | 0) < 0 ? 0 : i1;
 HEAP32[i3 + 12 >> 2] = i2;
 i1 = HEAP32[i3 + 148 >> 2] | 0;
 if (!i1) return;
 _eglSwapInterval(HEAP32[i1 >> 2] | 0, i2 | 0) | 0;
 if (i2) return;
 _emscripten_set_main_loop_timing(2, 0) | 0;
 return;
}

function __ZN8Graphics14ApplyAndRenderEP12VertexBufferii(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZN8Graphics17ApplyVertexBufferEP12VertexBuffer(i3, i4);
 i3 = (HEAP32[i4 + 68 >> 2] | 0) - i2 | 0;
 _glDrawArrays(HEAP32[348 + (HEAP32[i4 + 48 >> 2] << 2) >> 2] | 0, i2 | 0, ((i3 | 0) < (i1 | 0) ? i3 : i1) | 0);
 return;
}

function _BDF_Size_Select(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i4 + 140 >> 2] | 0;
 _FT_Select_Metrics(i4, i2);
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 40 >> 2] << 6;
 HEAP32[i1 + 28 >> 2] = 0 - (HEAP32[i3 + 44 >> 2] | 0) << 6;
 HEAP32[i1 + 36 >> 2] = (HEAPU16[i3 + 4 >> 1] | 0) << 6;
 return 0;
}

function _ft_black_new(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = 0;
 i1 = _ft_mem_alloc(i4, 24, i5) | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (i2) {
  STACKTOP = i5;
  return i2 | 0;
 }
 HEAP32[i1 + 8 >> 2] = i4;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i5;
 return i2 | 0;
}

function _FT_Stream_Seek(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 if (!i1) {
  if ((HEAP32[i3 + 4 >> 2] | 0) >>> 0 < i2 >>> 0) {
   i3 = 85;
   return i3 | 0;
  }
 } else if (FUNCTION_TABLE_iiiii[i1 & 63](i3, i2, 0, 0) | 0) {
  i3 = 85;
  return i3 | 0;
 }
 HEAP32[i3 + 8 >> 2] = i2;
 i3 = 0;
 return i3 | 0;
}

function _t1_cmap_custom_char_index(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i3 + 16 >> 2] | 0;
 if (i1 >>> 0 > i2 >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 if (((HEAP32[i3 + 20 >> 2] | 0) + i1 | 0) >>> 0 <= i2 >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = HEAPU16[(HEAP32[i3 + 24 >> 2] | 0) + (i2 << 1) >> 1] | 0;
 return i3 | 0;
}

function __ZNK4math6float3ngEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var f3 = f0, f4 = f0, f5 = f0;
 f5 = Math_fround(-Math_fround(HEAPF32[i2 >> 2]));
 f4 = Math_fround(-Math_fround(HEAPF32[i2 + 4 >> 2]));
 f3 = Math_fround(-Math_fround(HEAPF32[i2 + 8 >> 2]));
 HEAPF32[i1 >> 2] = f5;
 HEAPF32[i1 + 4 >> 2] = f4;
 HEAPF32[i1 + 8 >> 2] = f3;
 return;
}

function _ft_mem_alloc(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 if ((i3 | 0) > 0) {
  i2 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, i3) | 0;
  i1 = (i2 | 0) == 0 ? 64 : 0;
  if (!i2) i2 = 0; else _memset(i2 | 0, 0, i3 | 0) | 0;
 } else {
  i2 = 0;
  i1 = i3 >> 31 & 6;
 }
 HEAP32[i4 >> 2] = i1;
 return i2 | 0;
}

function __GLOBAL__sub_I_MathFunc_cpp() {
 var i1 = 0;
 HEAPF32[65737] = Math_fround(inf);
 HEAPF32[65738] = Math_fround(-inf);
 HEAPF32[65739] = Math_fround(nan);
 i1 = 0;
 do {
  HEAPF32[804 + (i1 << 2) >> 2] = Math_fround(+Math_sin(+(+(i1 | 0) * 3.1415927410125732 * .000030517578125)));
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 65536);
 return;
}

function ___cxa_can_catch(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1, i2, i4) | 0;
 if (i1) HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i4;
 return i1 & 1 | 0;
}

function _ft_black_reset(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i3) return;
 if ((i1 | 0) != 0 & (i2 | 0) > 3075) {
  HEAP32[i3 >> 2] = i1 + 1032;
  HEAP32[i3 + 4 >> 2] = i2 + -1032;
  HEAP32[i3 + 12 >> 2] = i1;
  return;
 } else {
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  return;
 }
}

function __ZN14TextureSampler6CreateE18TextureAddressMode17TextureFilterModeS1_S1_(i5, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 HEAP32[i5 + 8 >> 2] = i1;
 HEAP32[i5 + 4 >> 2] = i1;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i5 + 12 >> 2] = i3;
 HEAP32[i5 + 16 >> 2] = i4;
 HEAP32[i5 + 20 >> 2] = i2;
 return;
}

function _FT_List_Find(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 8 >> 2] | 0) == (i2 | 0)) {
   i2 = 4;
   break;
  }
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i2 = 4;
   break;
  }
 }
 if ((i2 | 0) == 4) return i1 | 0;
 return 0;
}

function __ZN8Graphics19ApplyTextureSamplerE10ShaderTypeiPK14TextureSampler(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((HEAP8[i4 + 152 >> 0] | 0) != 0 ? (HEAP32[i4 + 220 + (i2 << 2) >> 2] | 0) == (i3 | 0) : 0) return;
 HEAP32[i4 + 220 + (i2 << 2) >> 2] = i3;
 __ZNK14TextureSampler5ApplyEi(i3, i2);
 return;
}

function _ps_hints_close(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 if (i1) {
  i4 = i1;
  return i4 | 0;
 }
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = _ps_dimension_end(i4 + 16 | 0, i3, i1) | 0;
 if (i2) {
  i4 = i2;
  return i4 | 0;
 }
 i4 = _ps_dimension_end(i4 + 52 | 0, i3, i1) | 0;
 return i4 | 0;
}

function __ZN4math22PrintToConsoleVariadicEjPKcz(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 HEAP32[i4 >> 2] = i3;
 _vsnprintf(i4 + 16 | 0, 2048, i2, i4) | 0;
 HEAP8[i4 + 16 + 2047 >> 0] = 0;
 __ZN4math14PrintToConsoleEjPKc(i1, i4 + 16 | 0);
 STACKTOP = i4;
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i1, i3);
 return;
}

function _sfnt_get_glyph_name(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _tt_face_get_ps_name(i1, i2, i5) | 0;
 if (i1) {
  STACKTOP = i5;
  return i1 | 0;
 }
 _ft_mem_strcpyn(i3, HEAP32[i5 >> 2] | 0, i4) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _FT_Init_FreeType(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = _FT_New_Memory() | 0;
 if (!i1) {
  i3 = 7;
  return i3 | 0;
 }
 i2 = _FT_New_Library(i1, i3) | 0;
 if (!i2) {
  _FT_Add_Default_Modules(HEAP32[i3 >> 2] | 0);
  i3 = 0;
  return i3 | 0;
 } else {
  _FT_Done_Memory(i1);
  i3 = i2;
  return i3 | 0;
 }
 return 0;
}

function _pfr_slot_init(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[HEAP32[i2 + 156 >> 2] >> 2] | 0;
 i3 = i2 + 160 | 0;
 i4 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i2 + 188 >> 2] = i1;
 HEAP8[i2 + 192 >> 0] = 0;
 _FT_GlyphLoader_Rewind(i1);
 return 0;
}

function dynCall_iiiiiiiiii(i10, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 return FUNCTION_TABLE_iiiiiiiiii[i10 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0) | 0;
}

function __ZN12VertexBuffer13FreeGpuMemoryEv(i1) {
 i1 = i1 | 0;
 if (HEAP32[i1 + 88 >> 2] | 0) {
  _glDeleteBuffers(1, i1 + 88 | 0);
  HEAP32[i1 + 88 >> 2] = 0;
  HEAP32[i1 + 80 >> 2] = 0;
 }
 if (!(HEAP32[i1 + 92 >> 2] | 0)) return;
 _glDeleteBuffers(1, i1 + 92 | 0);
 HEAP32[i1 + 92 >> 2] = 0;
 HEAP32[i1 + 96 >> 2] = 0;
 return;
}

function _FT_GlyphLoader_Rewind(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP16[i1 + 22 >> 1] = 0;
 HEAP16[i1 + 20 >> 1] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 i3 = i1 + 56 | 0;
 i1 = i1 + 20 | 0;
 i2 = i3 + 36 | 0;
 do {
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  i3 = i3 + 4 | 0;
  i1 = i1 + 4 | 0;
 } while ((i3 | 0) < (i2 | 0));
 return;
}

function _FT_GlyphLoader_New(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = _ft_mem_alloc(i4, 96, i5) | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if (i2) {
  STACKTOP = i5;
  return i2 | 0;
 }
 HEAP32[i1 >> 2] = i4;
 HEAP32[i3 >> 2] = i1;
 STACKTOP = i5;
 return i2 | 0;
}

function _t1_cmap_standard_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i3 + 484 >> 2] | 0;
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 416 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i3 + 420 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 24 >> 2];
 return 0;
}

function _t1_cmap_expert_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i3 + 484 >> 2] | 0;
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 416 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i3 + 420 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 28 >> 2];
 return 0;
}

function ___uflow(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((HEAP32[i1 + 8 >> 2] | 0) == 0 ? (___toread(i1) | 0) != 0 : 0) i1 = -1; else if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 127](i1, i2, 1) | 0) == 1) i1 = HEAPU8[i2 >> 0] | 0; else i1 = -1;
 STACKTOP = i2;
 return i1 | 0;
}

function _Round_To_Double_Grid(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) <= -1) {
  i3 = (0 - (16 - i2 + i1 & -32) | 0) > 0 ? 0 : 0 - (16 - i2 + i1 & -32) | 0;
  return i3 | 0;
 }
 if (!((i2 | 0) != 0 & (i1 + i2 | 0) > -16)) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = i1 + i2 + 16 & -32;
 return i3 | 0;
}

function __ZN4math8float3x46SetColEiRKNS_6float3E(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 HEAP32[i3 + (i1 << 2) >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 16 + (i1 << 2) >> 2] = i5;
 HEAP32[i3 + 32 + (i1 << 2) >> 2] = i4;
 return;
}

function ___shlim(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 HEAP32[i3 + 104 >> 2] = i4;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 HEAP32[i3 + 108 >> 2] = i2 - i1;
 if ((i4 | 0) != 0 & (i2 - i1 | 0) > (i4 | 0)) HEAP32[i3 + 100 >> 2] = i1 + i4; else HEAP32[i3 + 100 >> 2] = i2;
 return;
}

function _PCF_Size_Select(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 _FT_Select_Metrics(i3, i2);
 HEAP32[i1 + 24 >> 2] = HEAP32[i3 + 196 + 8 >> 2] << 6;
 HEAP32[i1 + 28 >> 2] = 0 - (HEAP32[i3 + 196 + 12 >> 2] | 0) << 6;
 HEAP32[i1 + 36 >> 2] = HEAP16[i3 + 196 + 40 >> 1] << 6;
 return 0;
}

function _Round_Up_To_Grid(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) <= -1) {
  i3 = (0 - (63 - i2 + i1 & -64) | 0) > 0 ? 0 : 0 - (63 - i2 + i1 & -64) | 0;
  return i3 | 0;
 }
 if (!((i2 | 0) != 0 & (i1 + i2 | 0) > -63)) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = i1 + i2 + 63 & -64;
 return i3 | 0;
}

function __ZNK4math6float38LengthSqEv(i1) {
 i1 = i1 | 0;
 var f2 = f0, f3 = f0;
 f2 = Math_fround(HEAPF32[i1 >> 2]);
 f2 = Math_fround(f2 * f2);
 f3 = Math_fround(HEAPF32[i1 + 4 >> 2]);
 f3 = Math_fround(f2 + Math_fround(f3 * f3));
 f2 = Math_fround(HEAPF32[i1 + 8 >> 2]);
 return Math_fround(f3 + Math_fround(f2 * f2));
}

function _Round_To_Half_Grid(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) > -1) {
  i3 = (i2 | 0) != 0 & (i1 + i2 & -64 | 32 | 0) < 0 ? 0 : i1 + i2 & -64 | 32;
  return i3 | 0;
 } else {
  i3 = (0 - (i1 - i2 & -64 | 32) | 0) > 0 ? 0 : 0 - (i1 - i2 & -64 | 32) | 0;
  return i3 | 0;
 }
 return 0;
}

function __ZN17VertexDeclarationC2E13PrimitiveType18PrimitiveIndexType(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = i2;
 HEAP32[i3 + 20 >> 2] = i1;
 HEAP32[i3 + 24 >> 2] = 0;
 return;
}

function _Round_To_Grid(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) <= -1) {
  i3 = (0 - (32 - i2 + i1 & -64) | 0) > 0 ? 0 : 0 - (32 - i2 + i1 & -64) | 0;
  return i3 | 0;
 }
 if (!((i2 | 0) != 0 & (i1 + i2 | 0) > -32)) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = i1 + i2 + 32 & -64;
 return i3 | 0;
}

function _sn_write(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i4 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i4 = i4 >>> 0 > i2 >>> 0 ? i2 : i4;
 _memcpy(i5 | 0, i3 | 0, i4 | 0) | 0;
 HEAP32[i1 + 20 >> 2] = (HEAP32[i1 + 20 >> 2] | 0) + i4;
 return i2 | 0;
}

function __ZN14ProgramOptionsC2EiPPKcS2_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 HEAP32[i4 + 8 >> 2] = i3;
 i1 = i4 + 12 | 0;
 i2 = i1 + 48 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function __ZN4math8float3x46SetColEiPKf(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 i4 = HEAP32[i2 + 8 >> 2] | 0;
 HEAP32[i3 + (i1 << 2) >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 16 + (i1 << 2) >> 2] = i5;
 HEAP32[i3 + 32 + (i1 << 2) >> 2] = i4;
 return;
}

function _Direct_Move_Y(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = (HEAP32[i4 + 16 >> 2] | 0) + ((i3 & 65535) << 3) + 4 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i1;
 i4 = (HEAP32[i4 + 24 >> 2] | 0) + (i3 & 65535) | 0;
 HEAP8[i4 >> 0] = HEAPU8[i4 >> 0] | 0 | 16;
 return;
}

function __ZNK4math8float3x33ColEi(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0;
 f5 = Math_fround(HEAPF32[i3 + (i2 << 2) >> 2]);
 f4 = Math_fround(HEAPF32[i3 + 12 + (i2 << 2) >> 2]);
 __ZN4math6float3C2Efff(i1, f5, f4, Math_fround(HEAPF32[i3 + 24 + (i2 << 2) >> 2]));
 return;
}

function __ZN5ImageC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP8[i1 + 8 >> 0] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 12 + 4 >> 2] = 0;
 HEAP32[i1 + 12 + 8 >> 2] = 0;
 HEAP32[i1 + 12 + 12 >> 2] = 0;
 HEAP32[i1 + 12 + 16 >> 2] = 0;
 HEAP32[i1 + 12 + 20 >> 2] = 0;
 return;
}

function _cff_get_kerning(i5, i3, i4, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i5 + 532 >> 2] | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 if (!i1) return 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_iiii[HEAP32[i1 + 128 >> 2] & 127](i5, i3, i4) | 0;
 return 0;
}

function _Direct_Move_X(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = (HEAP32[i4 + 16 >> 2] | 0) + ((i3 & 65535) << 3) | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i1;
 i4 = (HEAP32[i4 + 24 >> 2] | 0) + (i3 & 65535) | 0;
 HEAP8[i4 >> 0] = HEAPU8[i4 >> 0] | 0 | 8;
 return;
}

function _tt_get_kerning(i5, i3, i4, i2) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i5 + 532 >> 2] | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 if (!i1) return 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_iiii[HEAP32[i1 + 128 >> 2] & 127](i5, i3, i4) | 0;
 return 0;
}

function _T42_Size_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = _FT_New_Size(HEAP32[(HEAP32[i1 >> 2] | 0) + 500 >> 2] | 0, i3) | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 44 >> 2] = i4;
 _FT_Activate_Size(i4) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _tt_cmap14_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 24 >> 2] = (HEAPU8[i2 + 7 >> 0] | 0) << 16 | (HEAPU8[i2 + 6 >> 0] | 0) << 24 | (HEAPU8[i2 + 8 >> 0] | 0) << 8 | (HEAPU8[i2 + 9 >> 0] | 0);
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 32 >> 2] = 0;
 return 0;
}

function _psh_globals_destroy(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 208 >> 2] = 0;
 HEAP32[i1 + 412 >> 2] = 0;
 HEAP32[i1 + 928 >> 2] = 0;
 HEAP32[i1 + 1444 >> 2] = 0;
 HEAP32[i1 + 1960 >> 2] = 0;
 _ft_mem_free(i2, i1);
 return;
}

function _ft_raster1_get_cbox(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 if ((HEAP32[i3 + 72 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) return;
 _FT_Outline_Get_CBox(i3 + 108 | 0, i1);
 return;
}

function __ZN4math5PlaneC2ERKNS_6float3ES3_(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAPF32[i3 + 12 >> 2] = Math_fround(__ZNK4math6float33DotERKS0_(i2, i3));
 return;
}

function _raccess_guess_linux_cap(i2, i3, i1, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = _raccess_make_file_name(HEAP32[i2 >> 2] | 0, i1, 322479) | 0;
 if (!i1) {
  i5 = 64;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 i5 = 0;
 return i5 | 0;
}

function _ft_smooth_get_cbox(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 if ((HEAP32[i3 + 72 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) return;
 _FT_Outline_Get_CBox(i3 + 108 | 0, i1);
 return;
}

function __ZNK4math8float4x46MulPosERKNS_6float3E(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var f4 = f0, f5 = f0;
 f5 = Math_fround(HEAPF32[i2 >> 2]);
 f4 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 __ZNK4math8float4x412TransformPosEfff(i1, i3, f5, f4, Math_fround(HEAPF32[i2 + 8 >> 2]));
 return;
}

function __Z17WWWGLEnumToStringj(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = (HEAP32[156] | 0) + 1 & 127;
 HEAP32[156] = i3;
 HEAP32[i2 >> 2] = i1;
 _sprintf(305947 + (i3 << 7) | 0, 322331, i2) | 0;
 STACKTOP = i2;
 return 305947 + (HEAP32[156] << 7) | 0;
}

function _FT_List_Add(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 >> 2] = i1;
 if (!i1) {
  HEAP32[i2 >> 2] = i3;
  HEAP32[i2 + 4 >> 2] = i3;
  return;
 } else {
  HEAP32[i1 + 4 >> 2] = i3;
  HEAP32[i2 + 4 >> 2] = i3;
  return;
 }
}

function _ft_mem_qalloc(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 if ((i3 | 0) > 0) {
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 4 >> 2] & 255](i1, i3) | 0;
  i2 = i1;
  i1 = (i1 | 0) == 0 ? 64 : 0;
 } else {
  i2 = 0;
  i1 = i3 >> 31 & 6;
 }
 HEAP32[i4 >> 2] = i1;
 return i2 | 0;
}

function __Z21GLEnumToTextureFormatj(i1) {
 i1 = i1 | 0;
 switch (i1 | 0) {
 case 33777:
 case 33776:
  {
   i1 = 71;
   break;
  }
 case 33778:
  {
   i1 = 74;
   break;
  }
 case 33779:
  {
   i1 = 77;
   break;
  }
 case 36196:
  {
   i1 = 1048576;
   break;
  }
 default:
  i1 = 0;
 }
 return i1 | 0;
}

function _raccess_guess_vfat(i2, i3, i1, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = _raccess_make_file_name(HEAP32[i2 >> 2] | 0, i1, 322490) | 0;
 if (!i1) {
  i5 = 64;
  return i5 | 0;
 }
 HEAP32[i4 >> 2] = i1;
 HEAP32[i5 >> 2] = 0;
 i5 = 0;
 return i5 | 0;
}

function _FT_Render_Glyph(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if (!i3) {
  i3 = 6;
  return i3 | 0;
 }
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 if (!i1) {
  i3 = 6;
  return i3 | 0;
 }
 i3 = _FT_Render_Glyph_Internal(HEAP32[(HEAP32[i1 + 96 >> 2] | 0) + 4 >> 2] | 0, i3, i2) | 0;
 return i3 | 0;
}

function ___fseeko(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i3) | 0) == 0;
  i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
  if (!i4) ___unlockfile(i3);
 } else i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
 return i1 | 0;
}

function _testSetjmp(i3, i5, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 while ((i2 | 0) < (i4 | 0)) {
  i1 = HEAP32[i5 + (i2 << 3) >> 2] | 0;
  if (!i1) break;
  if ((i1 | 0) == (i3 | 0)) return HEAP32[i5 + ((i2 << 3) + 4) >> 2] | 0;
  i2 = i2 + 1 | 0;
 }
 return 0;
}

function _af_latin_metrics_scale(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 20 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 24 >> 2];
 _af_latin_metrics_scale_dim(i1, i2, 0);
 _af_latin_metrics_scale_dim(i1, i2, 1);
 return;
}

function _FT_List_Remove(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i2) HEAP32[i3 >> 2] = i1; else HEAP32[i2 + 4 >> 2] = i1;
 if (!i1) {
  HEAP32[i3 + 4 >> 2] = i2;
  return;
 } else {
  HEAP32[i1 >> 2] = i2;
  return;
 }
}

function __ZN8Graphics20ApplyMaterialShadersEPK8Material(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP32[i3 + 64 >> 2] = i2;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((HEAP32[i3 + 288 >> 2] | 0) == (i1 | 0)) return;
 _glUseProgram(i1 | 0);
 HEAP32[i3 + 288 >> 2] = HEAP32[i2 >> 2];
 return;
}

function _FT_Get_Char_Index(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 92 >> 2] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 12 >> 2] & 255](i1, i2) | 0;
 return i2 | 0;
}

function __ZNK4math6float38IsFiniteEv(i1) {
 i1 = i1 | 0;
 if (HEAP32[i1 >> 2] << 1 >>> 0 >= 4278190080) {
  i1 = 0;
  return i1 | 0;
 }
 if (HEAP32[i1 + 4 >> 2] << 1 >>> 0 >= 4278190080) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = HEAP32[i1 + 8 >> 2] << 1 >>> 0 < 4278190080;
 return i1 | 0;
}

function __ZN8Graphics6RenderEP12VertexBufferii(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = (HEAP32[i4 + 68 >> 2] | 0) - i2 | 0;
 _glDrawArrays(HEAP32[348 + (HEAP32[i4 + 48 >> 2] << 2) >> 2] | 0, i2 | 0, ((i3 | 0) < (i1 | 0) ? i3 : i1) | 0);
 return;
}

function _tt_cmap13_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 13;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
 return 0;
}

function _tt_cmap12_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 12;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
 return 0;
}

function _tt_cmap10_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 10;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
 return 0;
}

function _ps_hinter_done(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 112 >> 2] = 0;
 HEAP32[i1 + 140 >> 2] = 0;
 i2 = HEAP32[i1 + 12 >> 2] | 0;
 _ps_dimension_done(i1 + 28 | 0, i2);
 _ps_dimension_done(i1 + 64 | 0, i2);
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 return;
}

function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i5 | 0) | 0;
 STACKTOP = i5;
 return (tempRet0 = HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
}

function _tt_cmap8_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 8;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
 return 0;
}

function _tt_cmap13_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = (HEAPU8[i2 + 13 >> 0] | 0) << 16 | (HEAPU8[i2 + 12 >> 0] | 0) << 24 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0);
 HEAP8[i1 + 24 >> 0] = 0;
 return 0;
}

function _tt_cmap12_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = (HEAPU8[i2 + 13 >> 0] | 0) << 16 | (HEAPU8[i2 + 12 >> 0] | 0) << 24 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0);
 HEAP8[i1 + 24 >> 0] = 0;
 return 0;
}

function _tt_face_load_post(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 63](i2, 1886352244, i3, 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i3 = _FT_Stream_ReadFields(i3, 285792, i2 + 468 | 0) | 0;
 return i3 | 0;
}

function _tt_face_load_pclt(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 63](i2, 1346587732, i3, 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i3 = _FT_Stream_ReadFields(i3, 285680, i2 + 556 | 0) | 0;
 return i3 | 0;
}

function _tt_face_load_head(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 63](i2, 1751474532, i3, 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i3 = _FT_Stream_ReadFields(i3, 285596, i2 + 160 | 0) | 0;
 return i3 | 0;
}

function _tt_face_load_bhed(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = FUNCTION_TABLE_iiiii[HEAP32[i2 + 508 >> 2] & 63](i2, 1651008868, i3, 0) | 0;
 if (i1) {
  i3 = i1;
  return i3 | 0;
 }
 i3 = _FT_Stream_ReadFields(i3, 285596, i2 + 160 | 0) | 0;
 return i3 | 0;
}

function __ZN4math6float4C2Effff(i1, f3, f4, f5, f2) {
 i1 = i1 | 0;
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 f2 = Math_fround(f2);
 HEAPF32[i1 >> 2] = f3;
 HEAPF32[i1 + 4 >> 2] = f4;
 HEAPF32[i1 + 8 >> 2] = f5;
 HEAPF32[i1 + 12 >> 2] = f2;
 return;
}

function ___cxa_get_globals_fast() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(281380, 4) | 0)) {
  i2 = _pthread_getspecific(HEAP32[70344] | 0) | 0;
  STACKTOP = i1;
  return i2 | 0;
 } else _abort_message(387597, i1);
 return 0;
}

function _ft_raster1_init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] & 31](HEAP32[i1 + 52 >> 2] | 0, HEAP32[i2 + 164 >> 2] | 0, HEAP32[i2 + 168 >> 2] | 0);
 return 0;
}

function _ft_smooth_init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] & 31](HEAP32[i1 + 52 >> 2] | 0, HEAP32[i2 + 164 >> 2] | 0, HEAP32[i2 + 168 >> 2] | 0);
 return 0;
}

function _t1_cmap_custom_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i2 + 376 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 20 >> 2] = (HEAP32[i2 + 380 >> 2] | 0) - i3;
 HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 384 >> 2];
 return 0;
}

function __ZN7TextureC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function dynCall_iiiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 1](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function __ZN15MaxRectsBinPackC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 return;
}

function __ZN4math6float4C2ERKNS_6float3Ef(i1, i3, f2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 f2 = Math_fround(f2);
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAPF32[i1 + 12 >> 2] = f2;
 return;
}

function __ZN4math6SphereC2ERKNS_6float3Ef(i3, i1, f2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAPF32[i3 + 12 >> 2] = f2;
 return;
}

function _cid_get_ros(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 if (i3) HEAP32[i3 >> 2] = HEAP32[i1 + 152 >> 2];
 if (i2) HEAP32[i2 >> 2] = HEAP32[i1 + 156 >> 2];
 if (!i4) return 0;
 HEAP32[i4 >> 2] = HEAP32[i1 + 160 >> 2];
 return 0;
}

function __ZN7Texture14DisableMipmapsEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 + 4 >> 2];
 __ZN4math22PrintToConsoleVariadicEjPKcz(4, 300802, i2);
 HEAP32[i1 + 32 >> 2] = 0;
 STACKTOP = i2;
 return;
}

function _t2_hints_open(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 2;
 return;
}

function _t1_hints_open(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 64 >> 2] = 0;
 HEAP32[i1 + 76 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 1;
 return;
}

function _raccess_guess_apple_single(i2, i5, i1, i3, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP32[i3 >> 2] = 0;
 if (!i5) {
  i5 = 81;
  return i5 | 0;
 }
 i5 = _raccess_guess_apple_generic(i5, 333312, i4) | 0;
 return i5 | 0;
}

function _raccess_guess_apple_double(i2, i5, i1, i3, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 HEAP32[i3 >> 2] = 0;
 if (!i5) {
  i5 = 81;
  return i5 | 0;
 }
 i5 = _raccess_guess_apple_generic(i5, 333319, i4) | 0;
 return i5 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free(i1);
 if (!(_pthread_setspecific(HEAP32[70344] | 0, 0) | 0)) {
  STACKTOP = i2;
  return;
 } else _abort_message(387751, i2);
}

function _FT_Stream_ExtractFrame(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _FT_Stream_EnterFrame(i3, i1) | 0;
 if (i1) return i1 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 + 32 >> 2];
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 36 >> 2] = 0;
 return i1 | 0;
}

function _Round_Down_To_Grid(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) > -1) return ((i2 | 0) != 0 & (i1 + i2 | 0) > 0 ? i1 + i2 & -64 : 0) | 0; else return ((0 - (i1 - i2 & -64) | 0) > 0 ? 0 : 0 - (i1 - i2 & -64) | 0) | 0;
 return 0;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = ___muldsi3(i1, i3) | 0;
 i6 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i3) | 0) + (Math_imul(i4, i1) | 0) + i6 | i6 & 0, i5 | 0 | 0) | 0;
}

function _Round_None(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) > -1) {
  i3 = (i2 | 0) != 0 & (i1 + i2 | 0) < 0 ? 0 : i1 + i2 | 0;
  return i3 | 0;
 } else {
  i3 = (i2 - i1 | 0) > 0 ? 0 : i2 - i1 | 0;
  return i3 | 0;
 }
 return 0;
}

function __ZN4math7Frustum14SetPerspectiveEff(i2, f1, f3) {
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 f3 = Math_fround(f3);
 HEAP32[i2 >> 2] = 2;
 HEAPF32[i2 + 56 >> 2] = f1;
 HEAPF32[i2 + 60 >> 2] = f3;
 __ZN4math7Frustum23ProjectionMatrixChangedEv(i2);
 return;
}

function ___memrchr(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1;
 do {
  if (!i2) {
   i1 = 0;
   break;
  }
  i2 = i2 + -1 | 0;
  i1 = i4 + i2 | 0;
 } while ((HEAP8[i1 >> 0] | 0) != (i3 & 255) << 24 >> 24);
 return i1 | 0;
}

function ___ftello(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) > -1) {
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___ftello_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } else i1 = ___ftello_unlocked(i2) | 0;
 return i1 | 0;
}

function __ZNK4math6float43xyzEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var f3 = f0, f4 = f0;
 f4 = Math_fround(HEAPF32[i2 >> 2]);
 f3 = Math_fround(HEAPF32[i2 + 4 >> 2]);
 __ZN4math6float3C2Efff(i1, f4, f3, Math_fround(HEAPF32[i2 + 8 >> 2]));
 return;
}

function _FT_Stream_OpenMemory(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 24 >> 2] = 0;
 return;
}

function _tt_cmap14_done(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i3 + 36 >> 2] | 0;
 HEAP32[i3 + 28 >> 2] = 0;
 if (!i1) return;
 i2 = HEAP32[i3 + 32 >> 2] | 0;
 if (!i2) return;
 _ft_mem_free(i1, i2);
 HEAP32[i3 + 32 >> 2] = 0;
 return;
}

function _fnt_cmap_init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[(HEAP32[i1 >> 2] | 0) + 132 >> 2] | 0;
 i3 = HEAPU8[i2 + 104 >> 0] | 0;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 20 >> 2] = 1 - i3 + (HEAPU8[i2 + 105 >> 0] | 0);
 return 0;
}

function _FT_Stream_ReleaseFrame(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != 0 ? (HEAP32[i2 + 20 >> 2] | 0) != 0 : 0) {
  _ft_mem_free(HEAP32[i2 + 28 >> 2] | 0, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
 }
 HEAP32[i1 >> 2] = 0;
 return;
}

function _FT_Stream_GetChar(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 + 32 >> 2] | 0;
 if (i1 >>> 0 >= (HEAP32[i2 + 36 >> 2] | 0) >>> 0) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[i2 + 32 >> 2] = i1 + 1;
 i2 = HEAP8[i1 >> 0] | 0;
 return i2 | 0;
}

function _tt_cmap4_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 HEAP32[i1 + 32 >> 2] = ((HEAPU8[i2 + 6 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0)) >>> 1;
 HEAP32[i1 + 24 >> 2] = -1;
 HEAP32[i1 + 28 >> 2] = 0;
 return 0;
}

function _afm_compare_kern_pairs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] << 16 | HEAP32[i1 + 4 >> 2];
 i2 = HEAP32[i2 >> 2] << 16 | HEAP32[i2 + 4 >> 2];
 return (i1 >>> 0 > i2 >>> 0 ? 1 : (i1 >>> 0 < i2 >>> 0) << 31 >> 31) | 0;
}

function __ZN17VertexDeclarationC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 return;
}

function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
}

function _t1_cmap_unicode_init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 return FUNCTION_TABLE_iiiiiii[HEAP32[(HEAP32[i2 + 484 >> 2] | 0) + 4 >> 2] & 3](HEAP32[i2 + 100 >> 2] | 0, i1, HEAP32[i2 + 416 >> 2] | 0, 160, 0, i2) | 0;
}

function __ZN4math3SinEf(f2) {
 f2 = Math_fround(f2);
 var i1 = 0;
 i1 = ~~Math_fround(f2 * Math_fround(10430.3779));
 if ((i1 | 0) < 0) i1 = 65536 - (0 - i1 & 65535) | 0; else i1 = i1 & 65535;
 return Math_fround(HEAPF32[804 + (i1 << 2) >> 2]);
}

function dynCall_iiiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function _bitshift64Ashr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i1 - 32 | 0;
}

function __ZN4math7Frustum21SetViewPlaneDistancesEff(i3, f2, f1) {
 i3 = i3 | 0;
 f2 = Math_fround(f2);
 f1 = Math_fround(f1);
 HEAPF32[i3 + 48 >> 2] = f2;
 HEAPF32[i3 + 52 >> 2] = f1;
 __ZN4math7Frustum23ProjectionMatrixChangedEv(i3);
 return;
}

function _T42_Size_Done(i1) {
 i1 = i1 | 0;
 if (!(_FT_List_Find((HEAP32[(HEAP32[i1 >> 2] | 0) + 500 >> 2] | 0) + 108 | 0, HEAP32[i1 + 44 >> 2] | 0) | 0)) return;
 _FT_Done_Size(HEAP32[i1 + 44 >> 2] | 0) | 0;
 HEAP32[i1 + 44 >> 2] = 0;
 return;
}

function _compare_kern_pairs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] << 16 | HEAP32[i1 + 4 >> 2];
 i2 = HEAP32[i2 >> 2] << 16 | HEAP32[i2 + 4 >> 2];
 return (i1 >>> 0 > i2 >>> 0 ? 1 : (i1 >>> 0 < i2 >>> 0) << 31 >> 31) | 0;
}

function __ZN4math8EqualAbsEfff(f1, f2, f3) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 var i4 = 0;
 f1 = Math_fround(f1 - f2);
 i4 = f1 >= Math_fround(0.0);
 f2 = Math_fround(-f1);
 return (i4 ? f1 : f2) < f3 | 0;
}

function _FT_Activate_Size(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (((i2 | 0) != 0 ? (i1 = HEAP32[i2 >> 2] | 0, (i1 | 0) != 0) : 0) ? (HEAP32[i1 + 96 >> 2] | 0) != 0 : 0) {
  HEAP32[i1 + 88 >> 2] = i2;
  i1 = 0;
 } else i1 = 6;
 return i1 | 0;
}

function __ZN4math3LCG4SeedEmmmm(i5, i4, i3, i1, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i5 + 12 >> 2] = i4;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i5 + 4 >> 2] = i1;
 HEAP32[i5 + 8 >> 2] = i2;
 return;
}

function __ZN4math8float4x416SetTranslatePartERKNS_6float3E(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 44 >> 2] = HEAP32[i1 + 8 >> 2];
 return;
}

function _FT_Stream_ExitFrame(i1) {
 i1 = i1 | 0;
 if (HEAP32[i1 + 20 >> 2] | 0) {
  _ft_mem_free(HEAP32[i1 + 28 >> 2] | 0, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
 }
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 36 >> 2] = 0;
 return;
}

function dynCall_viiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function _tt_cmap13_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i1;
 i2 = _tt_cmap13_char_map_binary(i2, i3, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _tt_cmap12_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i1;
 i2 = _tt_cmap12_char_map_binary(i2, i3, 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1;
  return i3 << i1;
 }
 tempRet0 = i3 << i1 - 32;
 return 0;
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 + 60 >> 2];
 i1 = ___syscall_ret(___syscall6(6, i2 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _abort_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = HEAP32[70409] | 0;
 _vfprintf(i2, i1, i3) | 0;
 _fputc(10, i2) | 0;
 _abort();
}

function _ft_smooth_render_lcd_v(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _ft_smooth_render_generic(i3, i4, i1, i2, 4) | 0;
 if (i1) return i1 | 0;
 HEAP8[i4 + 94 >> 0] = 6;
 return i1 | 0;
}

function _ft_raster1_set_mode(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[(HEAP32[i3 + 12 >> 2] | 0) + 56 >> 2] | 0) + 12 >> 2] & 127](HEAP32[i3 + 52 >> 2] | 0, i2, i1) | 0;
}

function _ft_smooth_set_mode(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[(HEAP32[i3 + 12 >> 2] | 0) + 56 >> 2] | 0) + 12 >> 2] & 127](HEAP32[i3 + 52 >> 2] | 0, i2, i1) | 0;
}

function _ft_gzip_alloc(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = _ft_mem_alloc(i2, Math_imul(i3, i1) | 0, i4) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(281376, 86) | 0)) {
  STACKTOP = i1;
  return;
 } else _abort_message(387701, i1);
}

function _ft_smooth_render_lcd(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _ft_smooth_render_generic(i3, i4, i1, i2, 3) | 0;
 if (i1) return i1 | 0;
 HEAP8[i4 + 94 >> 0] = 5;
 return i1 | 0;
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >>> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = 0;
 return i2 >>> i1 - 32 | 0;
}

function _T42_Driver_Init(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = _FT_Get_Module(HEAP32[i2 + 4 >> 2] | 0, 324153) | 0;
 if (!i1) {
  i2 = 11;
  return i2 | 0;
 }
 HEAP32[i2 + 28 >> 2] = HEAP32[i1 >> 2];
 i2 = 0;
 return i2 | 0;
}

function __ZNK4math5Plane14SignedDistanceERKNS_6float3E(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var f3 = f0;
 f3 = Math_fround(__ZNK4math6float33DotERKS0_(i2, i1));
 return Math_fround(f3 - Math_fround(HEAPF32[i2 + 12 >> 2]));
}

function _cff_get_is_cid(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 692 >> 2] | 0;
 HEAP8[i2 >> 0] = 0;
 if (!i1) return 0;
 if ((HEAP32[i1 + 1456 >> 2] | 0) == 65535) return 0;
 HEAP8[i2 >> 0] = 1;
 return 0;
}

function _Direct_Move_Orig_Y(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = (HEAP32[i4 + 12 >> 2] | 0) + ((i3 & 65535) << 3) + 4 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return;
}

function _sprintf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 >> 2] = i3;
 i3 = _vsprintf(i2, i1, i4) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _fprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 >> 2] = i3;
 i3 = _vfprintf(i1, i2, i4) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZN4math6float3C2Efff(i1, f2, f3, f4) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 HEAPF32[i1 >> 2] = f2;
 HEAPF32[i1 + 4 >> 2] = f3;
 HEAPF32[i1 + 8 >> 2] = f4;
 return;
}

function _sscanf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i4 >> 2] = i3;
 i3 = _vsscanf(i2, i1, i4) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _ft_raccess_rule_by_darwin_vfs(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i2 >>> 0 > 8) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = ((HEAP32[262976 + (i2 << 3) + 4 >> 2] | 0) + -3 | 0) >>> 0 < 2 & 1;
 return i2 | 0;
}

function _af_autofitter_init(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[HEAP32[i1 + 4 >> 2] >> 2] | 0;
 _memset(i1 + 12 | 0, 0, 180) | 0;
 HEAP32[i1 + 24 >> 2] = i2;
 return _FT_GlyphLoader_New(i2, i1 + 20 | 0) | 0;
}

function __ZN9MainClass4MainER14ProgramOptions(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZN14ProgramOptionsaSERKS_(i2 + 1176 | 0, i1) | 0;
 return FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 63](i2) | 0;
}

function __ZN7TextureD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 __ZN7Texture6DeinitEv(i2);
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (!i1) {
  HEAP32[i2 + 4 >> 2] = 0;
  return;
 }
 __ZdaPv(i1);
 HEAP32[i2 + 4 >> 2] = 0;
 return;
}

function _Direct_Move_Orig_X(i2, i4, i3, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = (HEAP32[i4 + 12 >> 2] | 0) + ((i3 & 65535) << 3) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return;
}

function dynCall_iiiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiiii[i6 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function _printf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = _vfprintf(HEAP32[70410] | 0, i1, i3) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _bdf_cmap_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 + 16 >> 2] = HEAP32[(HEAP32[i2 + 140 >> 2] | 0) + 52 >> 2];
 HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 144 >> 2];
 return 0;
}

function __ZN4math3CosEf(f1) {
 f1 = Math_fround(f1);
 var i2 = 0;
 i2 = ~~Math_fround(f1 * Math_fround(10430.3779));
 return Math_fround(HEAPF32[804 + ((((i2 | 0) < 0 ? 0 - i2 | 0 : i2) + 16384 & 65535) << 2) >> 2]);
}

function _ft_validator_init(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = 0;
 return;
}

function _tt_cmap6_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 6;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
 return 0;
}

function _tt_cmap4_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 4;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
 return 0;
}

function _tt_cmap2_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 2;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
 return 0;
}

function _tt_cmap0_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 >> 2] = (HEAPU8[i1 + 4 >> 0] | 0) << 8 | (HEAPU8[i1 + 5 >> 0] | 0);
 return 0;
}

function __Z26Browser_SuppressMouseEventiPK20EmscriptenMouseEventPv(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i3 = HEAP16[i3 + 40 >> 1] | 0;
 return ((i3 & 65535) > 2 | i3 << 16 >> 16 == 1) & 1 | 0;
}

function _EmscriptenQuitApplication() {
 var i1 = 0;
 i1 = HEAP32[52] | 0;
 if (!i1) {
  HEAP32[52] = 0;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 127](i1);
 HEAP32[52] = 0;
 return;
}

function _cff_cmap_unicode_char_next(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[(HEAP32[(HEAP32[i2 >> 2] | 0) + 692 >> 2] | 0) + 2956 >> 2] | 0) + 12 >> 2] & 255](i2, i1) | 0;
}

function _cff_cmap_unicode_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[(HEAP32[(HEAP32[i2 >> 2] | 0) + 692 >> 2] | 0) + 2956 >> 2] | 0) + 8 >> 2] & 255](i2, i1) | 0;
}

function _cff_cmap_encoding_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 >= 256) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAPU16[(HEAP32[i2 + 16 >> 2] | 0) + (i1 << 1) >> 1] | 0;
 return i2 | 0;
}

function _ft_raccess_sort_ref_by_id(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP16[i1 >> 1] | 0;
 i2 = HEAP16[i2 >> 1] | 0;
 return ((i1 & 65535) < (i2 & 65535) ? -1 : (i1 & 65535) > (i2 & 65535) & 1) | 0;
}

function _FT_New_Memory() {
 var i1 = 0;
 i1 = _malloc(16) | 0;
 if (!i1) return i1 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 162;
 HEAP32[i1 + 12 >> 2] = 42;
 HEAP32[i1 + 8 >> 2] = 23;
 return i1 | 0;
}

function __Z30WWWGLGetActiveMultitextureUnitv() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i1 >> 2] = 0;
 _glGetIntegerv(34016, i1 | 0);
 STACKTOP = i1;
 return HEAP32[i1 >> 2] | 0;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZN4File11SeekToStartEv(i1) {
 i1 = i1 | 0;
 if (HEAP32[i1 + 20 >> 2] | 0) {
  HEAP32[i1 + 24 >> 2] = 0;
  return;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) return;
 _fseek(i1, 0, 0) | 0;
 return;
}

function _t42_get_glyph_name(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ft_mem_strcpyn(i1, HEAP32[(HEAP32[i3 + 420 >> 2] | 0) + (i4 << 2) >> 2] | 0, i2) | 0;
 return 0;
}

function _cff_cmap_unicode_done(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0);
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _t1_get_glyph_name(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 _ft_mem_strcpyn(i1, HEAP32[(HEAP32[i3 + 420 >> 2] | 0) + (i4 << 2) >> 2] | 0, i2) | 0;
 return 0;
}

function _t1_cmap_unicode_done(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[(HEAP32[i1 >> 2] | 0) + 100 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0);
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _tt_cmap0_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 >= 256) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAPU8[(HEAP32[i2 + 16 >> 2] | 0) + (i1 + 6) >> 0] | 0;
 return i2 | 0;
}

function __ZN4math3LCGC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 12 >> 2] = __ZN4math5Clock7TickU32Ev() | 0;
 HEAP32[i1 >> 2] = 69621;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 2147483647;
 return;
}

function __ZN11IndexBuffer13FreeGpuMemoryEv(i1) {
 i1 = i1 | 0;
 if (HEAP32[i1 + 24 >> 2] | 0) {
  _glDeleteBuffers(1, i1 + 24 | 0);
  HEAP32[i1 + 24 >> 2] = 0;
 }
 HEAP32[i1 + 12 >> 2] = 0;
 return;
}

function __ZNK14TextureSampler5ApplyEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNK14TextureSampler14ApplyToTextureEiP7Texture(i2, i1, HEAP32[(HEAP32[122] | 0) + 156 + (i1 << 2) >> 2] | 0);
 return;
}

function b4(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 abort(4);
 return 0;
}

function _FT_Stream_Free(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if (!i3) return;
 i1 = HEAP32[i3 + 28 >> 2] | 0;
 _FT_Stream_Close(i3);
 if (i2) return;
 _ft_mem_free(i1, i3);
 return;
}

function _memory_stream_close(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[i1 + 28 >> 2] | 0, HEAP32[i1 >> 2] | 0);
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 return;
}

function _pcf_cmap_init(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 296 >> 2];
 HEAP32[i2 + 20 >> 2] = HEAP32[i1 + 300 >> 2];
 return 0;
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i1 - i3 >>> 0 | 0) | 0;
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return (tempRet0 = i2 + i4 + (i1 + i3 >>> 0 >>> 0 < i1 >>> 0 | 0) >>> 0, i1 + i3 >>> 0 | 0) | 0;
}

function _by_encoding(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 return ((i1 | 0) < (i2 | 0) ? -1 : (i1 | 0) > (i2 | 0) & 1) | 0;
}

function _FT_RoundFix(i1) {
 i1 = i1 | 0;
 if ((i1 | 0) > -1) {
  i1 = i1 + 32768 & -65536;
  return i1 | 0;
 } else {
  i1 = 0 - (32768 - i1 & -65536) | 0;
  return i1 | 0;
 }
 return 0;
}

function _fnt_cmap_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = i1 - (HEAP32[i2 + 16 >> 2] | 0) | 0;
 return (i1 >>> 0 < (HEAP32[i2 + 20 >> 2] | 0) >>> 0 ? i1 + 1 | 0 : 0) | 0;
}

function _t1_cmap_unicode_char_next(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[(HEAP32[i2 >> 2] | 0) + 484 >> 2] | 0) + 12 >> 2] & 255](i2, i1) | 0;
}

function _t1_cmap_unicode_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[(HEAP32[i2 >> 2] | 0) + 484 >> 2] | 0) + 8 >> 2] & 255](i2, i1) | 0;
}

function __ZN4math7ScaleOpC2Efff(i4, f1, f2, f3) {
 i4 = i4 | 0;
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 __ZN4math6float3C2Efff(i4, f1, f2, f3);
 return;
}

function _cid_get_postscript_name(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 140 >> 2] | 0;
 if (!i1) return 0; else return ((HEAP8[i1 >> 0] | 0) == 47 ? i1 + 1 | 0 : i1) | 0;
 return 0;
}

function _Move_CVT(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i2 = (HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i3;
 return;
}

function _ps_get_standard_strings(i1) {
 i1 = i1 | 0;
 if (i1 >>> 0 > 390) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = 327404 + (HEAP16[286736 + (i1 << 1) >> 1] | 0) | 0;
 return i1 | 0;
}

function __ZN8Graphics19ApplyConstantBufferEPK20ShaderConstantBufferi(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNK20ShaderConstantBuffer5ApplyEi(i1, i2);
 return;
}

function _pcf_get_charset_id(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 + 176 >> 2];
 HEAP32[i2 >> 2] = HEAP32[i3 + 180 >> 2];
 return 0;
}

function _bdf_get_charset_id(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 + 132 >> 2];
 HEAP32[i2 >> 2] = HEAP32[i3 + 136 >> 2];
 return 0;
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function _ft_smooth_render(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_smooth_render_generic(i3, i4, (i1 | 0) == 1 ? 0 : i1, i2, 0) | 0;
}

function _t1_cmap_std_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 16 + 4 >> 2] = 0;
 HEAP32[i1 + 16 + 8 >> 2] = 0;
 HEAP32[i1 + 16 + 12 >> 2] = 0;
 return;
}

function __ZN4math6float310FromScalarEf(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 HEAPF32[i1 >> 2] = f2;
 HEAPF32[i1 + 4 >> 2] = f2;
 HEAPF32[i1 + 8 >> 2] = f2;
 return;
}

function __ZN4math4AABB15TransformAsAABBERKNS_8float4x4E(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZN4math19AABBTransformAsAABBIKNS_8float4x4EEEvRNS_4AABBERT_(i1, i2);
 return;
}

function _ft_ansi_stream_close(i1) {
 i1 = i1 | 0;
 _fclose(HEAP32[i1 + 12 >> 2] | 0) | 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 return;
}

function __ZN11IndexBufferC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 44 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function __Z12GetCallstackPKcS0_(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZSt11__terminatePFvvE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[i1 & 7]();
 _abort_message(387661, i2);
}

function _ft_gzip_stream_io(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_gzip_file_io(HEAP32[i4 + 12 >> 2] | 0, i3, i1, i2) | 0;
}

function _FT_Stream_Close(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!i2) return;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[i1 & 127](i2);
 return;
}

function _tt_size_init(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 300 >> 0] = 0;
 HEAP8[i1 + 301 >> 0] = 0;
 HEAP8[i1 + 72 + 36 >> 0] = 0;
 HEAP32[i1 + 112 >> 2] = -1;
 return 0;
}

function __ZN8MaterialC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 64 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function _FT_Done_FreeType(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return 0;
 i2 = HEAP32[i1 >> 2] | 0;
 _FT_Done_Library(i1) | 0;
 _FT_Done_Memory(i2);
 return 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 >> 0] & 1) __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 return;
}

function __ZN6ShaderC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1 + 84 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 return;
}

function __ZN4math6float2C2Eff(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 HEAPF32[i1 >> 2] = f2;
 HEAPF32[i1 + 4 >> 2] = f3;
 return;
}

function _parse_buildchar(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 544 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[i2 + 52 >> 2] & 63](i2, 0, 0, 0) | 0;
 return;
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 127](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function b0(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(0);
 return 0;
}

function __ZNK4File6IsOpenEv(i1) {
 i1 = i1 | 0;
 if (HEAP32[i1 + 20 >> 2] | 0) {
  i1 = 1;
  return i1 | 0;
 }
 i1 = (HEAP32[i1 >> 2] | 0) != 0;
 return i1 | 0;
}

function _strchr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = ___strchrnul(i2, i1) | 0;
 return ((HEAP8[i2 >> 0] | 0) == (i1 & 255) << 24 >> 24 ? i2 : 0) | 0;
}

function _tt_get_cmap_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 48 >> 2] & 255](i1, i2) | 0;
}

function _af_dummy_hints_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 108 >> 2] = i2;
 HEAP32[i1 + 100 >> 2] = HEAP32[i2 + 28 >> 2];
 return 0;
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 if (i1 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - i1;
  i1 = -1;
 }
 return i1 | 0;
}

function ___errno_location() {
 var i1 = 0;
 if (!(HEAP32[70347] | 0)) i1 = 282144; else i1 = HEAP32[(_pthread_self() | 0) + 60 >> 2] | 0;
 return i1 | 0;
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 31](i1 | 0, i2 | 0, i3 | 0);
}

function __ZNK20ShaderConstantBuffer5ApplyEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNK20ShaderConstantBuffer21ApplyToGlobalUniformsEv(i2);
 return;
}

function __Z25ScreenOrientationToString17ScreenOrientation(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 1 ? 303266 : (i1 | 0) == 2 ? 303205 : 303232) | 0;
}

function __ZNK7Texture14MipLevelHeightEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = HEAP32[i2 + 24 >> 2] >> i1;
 return ((i2 | 0) > 1 ? i2 : 1) | 0;
}

function _cid_get_cid_from_glyph_index(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if (!i1) return 0;
 HEAP32[i1 >> 2] = i3;
 return 0;
}

function __ZNK7Texture13MipLevelWidthEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i2 = HEAP32[i2 + 20 >> 2] >> i1;
 return ((i2 | 0) > 1 ? i2 : 1) | 0;
}

function __GLOBAL__sub_I_File_cpp() {
 HEAP32[157] = 0;
 HEAP32[158] = 0;
 HEAP32[159] = 0;
 ___cxa_atexit(71, 628, ___dso_handle | 0) | 0;
 return;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}

function ___cxa_is_pointer_type(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = (___dynamic_cast(i1, 128, 176, 0) | 0) != 0;
 return i1 & 1 | 0;
}

function _Write_CVT(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[(HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) >> 2] = i3;
 return;
}

function b6(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(6);
 return 0;
}

function _gray_line_to(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _gray_render_line(i2, HEAP32[i1 >> 2] << 2, HEAP32[i1 + 4 >> 2] << 2);
 return 0;
}

function __GLOBAL__sub_I_Clock_cpp() {
 HEAPF64[11] = inf;
 if (!(+HEAPF64[10] == 0.0)) return;
 HEAPF64[10] = +_emscripten_get_now();
 return;
}

function _Vertical_Sweep_Step(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 148 >> 2] = (HEAP32[i1 + 148 >> 2] | 0) + (HEAP16[i1 + 156 >> 1] | 0);
 return;
}

function _tt_size_done(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 + 300 >> 0] | 0) _tt_size_done_bytecode(i1);
 HEAP8[i1 + 72 + 36 >> 0] = 0;
 return;
}

function _ft_mem_free(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return;
 FUNCTION_TABLE_vii[HEAP32[i2 + 8 >> 2] & 31](i2, i1);
 return;
}

function _cff_cmap_encoding_init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 16 >> 2] = (HEAP32[(HEAP32[i1 >> 2] | 0) + 692 >> 2] | 0) + 640;
 return 0;
}

function _afm_parser_done(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0);
 HEAP32[i1 + 4 >> 2] = 0;
 return;
}

function __ZN4math8float4x412UniformScaleEf(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 __ZN4math7ScaleOpC2Efff(i1, f2, f2, f2);
 return;
}

function _winfnt_get_header(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _memcpy(i1 | 0, (HEAP32[i2 + 132 >> 2] | 0) + 4 | 0, 156) | 0;
 return 0;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(387398, 387427, 1164, 387490);
}

function _t1_cmap_custom_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _ft_highpow2(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 while (1) {
  i2 = i1 + -1 & i1;
  if (!i2) break; else i1 = i2;
 }
 return i1 | 0;
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function __ZN10VoidEvent4I8Graphicsiii17ScreenOrientationE17ClassEventHandlerI11ApplicationED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(387511, 387534, 303, 387490);
}

function __ZN6StringD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1) __ZdaPv(i1);
 HEAP32[i2 >> 2] = 0;
 return;
}

function _EmscriptenRenderWindow() {
 var i1 = 0;
 i1 = HEAP32[52] | 0;
 if (!i1) return;
 __ZN9MainClass12ProcessFrameEv(i1);
 return;
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 255](i1 | 0, i2 | 0) | 0;
}

function b11(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(11);
}

function _psaux_get_glyph_name(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP32[(HEAP32[i1 + 420 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function _ps_get_macintosh_name(i1) {
 i1 = i1 | 0;
 return 327404 + (HEAP16[287518 + ((i1 >>> 0 > 257 ? 0 : i1) << 1) >> 1] | 0) | 0;
}

function _tt_face_set_sbit_strike(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return _FT_Match_Size(i2, i3, 0, i1) | 0;
}

function _af_indic_hints_apply(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 return _af_cjk_hints_apply(i1, i3, i2) | 0;
}

function b13(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(13);
 return 0;
}

function _tt_cmap14_get_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i2 + 4 >> 2] = 14;
 HEAP32[i2 >> 2] = -1;
 return 0;
}

function _t42_ps_get_font_extra(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP16[i1 >> 1] = HEAP16[i2 + 164 >> 1] | 0;
 return 0;
}

function _cid_ps_get_font_extra(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP16[i1 >> 1] = HEAP16[i2 + 312 >> 1] | 0;
 return 0;
}

function _t1_ps_get_font_extra(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP16[i1 >> 1] = HEAP16[i2 + 164 >> 1] | 0;
 return 0;
}

function _tt_face_load_sfnt_header_stub(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 7;
}

function _ft_realloc(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 return _realloc(i1, i4) | 0;
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) i1 = 0; else i1 = _wcrtomb(i1, i2, 0) | 0;
 return i1 | 0;
}

function _tt_slot_init(i1) {
 i1 = i1 | 0;
 return _FT_GlyphLoader_CreateExtra(HEAP32[HEAP32[i1 + 156 >> 2] >> 2] | 0) | 0;
}

function _t42_ps_get_font_private(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _memcpy(i1 | 0, i2 + 168 | 0, 196) | 0;
 return 0;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 31](i1 | 0, i2 | 0);
}

function _vsprintf(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _vsnprintf(i3, 2147483647, i2, i1) | 0;
}

function _t1_ps_get_font_private(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _memcpy(i1 | 0, i2 + 168 | 0, 196) | 0;
 return 0;
}

function _parse_private(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i2 + 372 >> 2] = HEAP32[i2 + 372 >> 2] | 1;
 return;
}

function _Read_CVT(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP32[(HEAP32[i1 + 384 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function _ft_validator_error(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 12 >> 2] = i1;
 _longjmp(i2 + 16 | 0, 1);
}

function __ZNK4math6float42AtEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return Math_fround(HEAPF32[i2 + (i1 << 2) >> 2]);
}

function __ZNK4math6float32AtEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return Math_fround(HEAPF32[i2 + (i1 << 2) >> 2]);
}

function _strncpy(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 ___stpncpy(i1, i3, i2) | 0;
 return i1 | 0;
}

function _pcf_driver_requester(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(270796, i2) | 0;
}

function _bdf_driver_requester(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(272300, i2) | 0;
}

function __ZN8Graphics19SupportsGLExtensionEPKc(i1) {
 i1 = i1 | 0;
 return __Z24WWWGLSupportsGLExtensionPKc(i1) | 0;
}

function _strcat(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _strcpy(i1 + (_strlen(i1) | 0) | 0, i2) | 0;
 return i1 | 0;
}

function _psnames_get_service(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(281252, i2) | 0;
}

function __ZN14TextureSamplerC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 return;
}

function _winfnt_get_service(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(270624, i2) | 0;
}

function _sfnt_get_interface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(272996, i2) | 0;
}

function __ZSt15get_new_handlerv() {
 var i1 = 0;
 i1 = HEAP32[70323] | 0;
 HEAP32[70323] = i1 + 0;
 return i1 | 0;
}

function __ZNK12VertexBuffer17IsBoundToMaterialEv(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 112 >> 2] | 0) != 0 | 0;
}

function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!__THREW__) {
  __THREW__ = i1;
  threwValue = i2;
 }
}

function b2(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(2);
}

function _tolower(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_isupper(i1) | 0) == 0;
 return (i2 ? i1 : i1 | 32) | 0;
}

function _strrchr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ___memrchr(i2, i1, (_strlen(i2) | 0) + 1 | 0) | 0;
}

function _cid_get_is_cid(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) return 0;
 HEAP8[i2 >> 0] = 1;
 return 0;
}

function _cid_get_interface(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return _ft_service_list_lookup(269328, i1) | 0;
}

function __ZN4math8FloorIntEf(f1) {
 f1 = Math_fround(f1);
 return ~~Math_fround(Math_floor(Math_fround(f1))) | 0;
}

function _T42_Get_Interface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(270408, i2) | 0;
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 1; else i1 = (HEAP32[i1 >> 2] | 0) == 0;
 return i1 & 1 | 0;
}

function _fputs(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return (_fwrite(i2, _strlen(i2) | 0, 1, i1) | 0) + -1 | 0;
}

function _do_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return ___string_read(i2, i1, i3) | 0;
}

function _pfr_get_service(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(269560, i2) | 0;
}

function _tt_driver_init(i1) {
 i1 = i1 | 0;
 i1 = (_TT_New_Context(i1) | 0) == 0;
 return (i1 ? 153 : 0) | 0;
}

function _Get_Interface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _ft_service_list_lookup(265492, i2) | 0;
}

function b10(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(10);
 return 0;
}

function __ZNK12VertexBuffer12HasGpuMemoryEv(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 88 >> 2] | 0) != 0 | 0;
}

function _TT_Forget_Glyph_Frame(i1) {
 i1 = i1 | 0;
 _FT_Stream_ExitFrame(HEAP32[i1 + 24 >> 2] | 0);
 return;
}

function _T1_GlyphSlot_Done(i1) {
 i1 = i1 | 0;
 HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + 36 >> 2] = 0;
 return;
}

function _pfr_cmap_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _pcf_cmap_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _fseek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___fseeko(i1, i2, i3) | 0;
}

function _cff_get_ps_name(i1) {
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i1 + 692 >> 2] | 0) + 1304 >> 2] | 0;
}

function _bdf_cmap_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 63](i1 | 0) | 0;
}

function __ZN10VoidEvent4I8Graphicsiii17ScreenOrientationE12EventHandlerD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _T42_GlyphSlot_Done(i1) {
 i1 = i1 | 0;
 _FT_Done_GlyphSlot(HEAP32[i1 + 160 >> 2] | 0);
 return;
}

function _tt_face_load_directory_stub(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 return 7;
}

function _cid_slot_done(i1) {
 i1 = i1 | 0;
 HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + 36 >> 2] = 0;
 return;
}

function _cff_slot_done(i1) {
 i1 = i1 | 0;
 HEAP32[(HEAP32[i1 + 156 >> 2] | 0) + 36 >> 2] = 0;
 return;
}

function __Z11SizeInBytes14VertexDataType(i1) {
 i1 = i1 | 0;
 return HEAP32[540 + (i1 << 2) >> 2] | 0;
}

function _tt_face_load_charmap_stub(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return 7;
}

function _cleanup533(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[i1 + 68 >> 2] | 0)) ___unlockfile(i1);
 return;
}

function _cleanup528(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[i1 + 68 >> 2] | 0)) ___unlockfile(i1);
 return;
}

function _cff_ps_has_glyph_names(i1) {
 i1 = i1 | 0;
 return (HEAP32[i1 + 8 >> 2] | 0) >>> 9 & 1 | 0;
}

function __ZNK8Graphics20PresentationIntervalEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}

function __ZN11ApplicationD0Ev(i1) {
 i1 = i1 | 0;
 __ZN11ApplicationD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _tt_cmap14_char_next(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i2 >> 2] = 0;
 return 0;
}

function _gray_raster_done(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[i1 + 12 >> 2] | 0, i1);
 return;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function _tt_cmap_init(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = i2;
 return 0;
}

function b14(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(14);
}

function __ZNK4math8float4x4ixEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i2 + (i1 << 4) | 0;
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZN4math8float4x4ixEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i2 + (i1 << 4) | 0;
}

function __ZN4math8float3x4ixEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i2 + (i1 << 4) | 0;
}

function _ft_black_done(i1) {
 i1 = i1 | 0;
 _ft_mem_free(HEAP32[i1 + 8 >> 2] | 0, i1);
 return;
}

function _Horizontal_Sweep_Init(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 127](i1 | 0);
}

function __ZN9MainClassD0Ev(i1) {
 i1 = i1 | 0;
 __ZN9MainClassD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _strcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 ___stpcpy(i1, i2) | 0;
 return i1 | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNK8Graphics12ScreenHeightEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 28 >> 2] | 0;
}

function _ft_gzip_free(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _ft_mem_free(i2, i1);
 return;
}

function _ft_black_set_mode(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNK8Graphics11ScreenWidthEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}

function __ZN4math4AtanEf(f1) {
 f1 = Math_fround(f1);
 return Math_fround(+Math_atan(+f1));
}

function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _Project_y(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 | 0;
}

function _Project_x(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i1 | 0;
}

function __ZNK7Texture10NumMipmapsEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 32 >> 2] | 0;
}

function __ZN4math3TanEf(f1) {
 f1 = Math_fround(f1);
 return Math_fround(+Math_tan(+f1));
}

function b1(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(1);
 return 0;
}

function _cff_cmap_encoding_done(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _t42_get_ps_font_name(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 364 >> 2] | 0;
}

function __ZNK7Texture6HeightEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 24 >> 2] | 0;
}

function __ZN9MainClass6UpdateERK4Time(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _tt_face_free_charmap_stub(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function __ZNK7Texture5WidthEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 20 >> 2] | 0;
}

function __ZN4math6IsPow2Em(i1) {
 i1 = i1 | 0;
 return (i1 + -1 & i1 | 0) == 0 | 0;
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function __ZN4math5Clock7TickU32Ev() {
 return ~~+_emscripten_get_now() >>> 0 | 0;
}

function _tt_face_load_sbit_stub(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 7;
}

function _tt_face_load_hdmx_stub(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 7;
}

function _scalbnl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_scalbn(d2, i1));
}

function _ft_alloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _malloc(i2) | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _tt_cmap14_char_index(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return 0;
}

function _t1_get_ps_name(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 364 >> 2] | 0;
}

function _frexpl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_frexp(d2, i1));
}

function _af_dummy_hints_apply(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return 0;
}

function b8(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(8);
}

function _pshinter_get_globals_funcs(i1) {
 i1 = i1 | 0;
 return i1 + 100 | 0;
}

function __ZN7Texture7EndDrawEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function _isupper(i1) {
 i1 = i1 | 0;
 return (i1 + -65 | 0) >>> 0 < 26 | 0;
}

function _ft_free(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 _free(i1);
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _FT_Stream_Pos(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function b12(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(12);
 return 0;
}

function _pshinter_get_t2_funcs(i1) {
 i1 = i1 | 0;
 return i1 + 140 | 0;
}

function _pshinter_get_t1_funcs(i1) {
 i1 = i1 | 0;
 return i1 + 112 | 0;
}

function __ZNSt9bad_allocD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN4math5Clock4TickEv() {
 return +(+_emscripten_get_now());
}

function __ZNKSt9bad_alloc4whatEv(i1) {
 i1 = i1 | 0;
 return 387646;
}

function __ZN15RasterizerState6DeinitEv(i1) {
 i1 = i1 | 0;
 return;
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 7]();
}

function __ZN14TextureSampler6DeinitEv(i1) {
 i1 = i1 | 0;
 return;
}

function _FT_Done_Memory(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _t42_ps_has_glyph_names(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZN10DepthState6DeinitEv(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN10BlendState6DeinitEv(i1) {
 i1 = i1 | 0;
 return;
}

function _t1_ps_has_glyph_names(i1) {
 i1 = i1 | 0;
 return 1;
}

function _ftell(i1) {
 i1 = i1 | 0;
 return ___ftello(i1) | 0;
}

function _tt_face_free_sbit_stub(i1) {
 i1 = i1 | 0;
 return;
}

function _tt_face_free_hdmx_stub(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN9MainClass6RenderEv(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN9MainClass4MainEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN8Graphics7PresentEv(i1) {
 i1 = i1 | 0;
 return;
}

function b5(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(5);
}

function _Horizontal_Sweep_Step(i1) {
 i1 = i1 | 0;
 return;
}

function __Znaj(i1) {
 i1 = i1 | 0;
 return __Znwj(i1) | 0;
}

function __ZdaPv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9exceptionD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9bad_allocD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN4math5Clock11TicksPerSecEv() {
 return 1.0e3;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function __ZdlPv(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}

function _cid_driver_init(i1) {
 i1 = i1 | 0;
 return 0;
}

function _cff_driver_init(i1) {
 i1 = i1 | 0;
 return 0;
}

function _T1_Driver_Init(i1) {
 i1 = i1 | 0;
 return 0;
}

function _cid_driver_done(i1) {
 i1 = i1 | 0;
 return;
}

function _cff_driver_done(i1) {
 i1 = i1 | 0;
 return;
}

function _T42_Driver_Done(i1) {
 i1 = i1 | 0;
 return;
}

function b7(i1) {
 i1 = i1 | 0;
 abort(7);
 return 0;
}

function _ps_parser_done(i1) {
 i1 = i1 | 0;
 return;
}

function _T1_Driver_Done(i1) {
 i1 = i1 | 0;
 return;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b3(i1) {
 i1 = i1 | 0;
 abort(3);
}

function b9() {
 abort(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,_tt_face_load_sbit_image];
var FUNCTION_TABLE_iiii = [b1,_ft_stub_set_pixel_sizes,_TT_Set_MM_Blend,_TT_Set_Var_Design,_tt_face_get_location,_T1_Set_MM_Design,_T1_Set_MM_Blend,_T1_Set_Var_Design,_cff_get_cid_from_glyph_index,_cid_get_cid_from_glyph_index,_pfr_get_advance,_pcf_get_charset_id,_pcf_get_bdf_property,_bdf_get_charset_id,_bdf_get_bdf_property,_tt_cmap14_char_var_isdefault,_tt_cmap14_char_variants,_tt_cmap14_variant_chars,_tt_face_load_directory_stub,_tt_face_load_hhea,_tt_load_sbit_metrics,_tt_face_get_ps_name,_tt_face_load_charmap_stub,_tt_face_get_kerning,_tt_face_load_hmtx,_tt_face_set_sbit_strike,_tt_face_load_strike_metrics,_sfnt_get_charset_id,_tt_face_find_bdf_prop
,_af_latin_hints_apply,_af_cjk_hints_apply,_af_indic_hints_apply,_ft_raster1_set_mode,_ft_smooth_set_mode,_gray_conic_to,_ps_table_new,_ps_parser_to_coord_array,_t1_builder_add_point1,_t1_builder_start_point,_t1_decoder_parse_charstrings,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,___stdio_write,___stdio_seek,___stdout_write,__Z26Browser_SuppressMouseEventiPK20EmscriptenMouseEventPv,__Z23Browser_OnKeyboardEventiPK23EmscriptenKeyboardEventPv,__Z20Browser_OnMouseEventiPK20EmscriptenMouseEventPv,__Z20Browser_OnWheelEventiPK20EmscriptenWheelEventPv,_Round_None,_Round_To_Grid,_Round_Up_To_Grid,_Round_Down_To_Grid,_Round_To_Half_Grid,_Round_To_Double_Grid,_Round_Super,_Round_Super_45,_Project_x,_Project_y
,_Project,_Dual_Project,_t1_get_index,_pfr_extra_item_load_bitmap_info,_pfr_extra_item_load_font_id,_pfr_extra_item_load_stem_snaps,_pfr_extra_item_load_kerning_pairs,_psh_globals_new,_FT_Outline_Decompose,_ft_gzip_alloc,_do_read,___stdio_read,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,_t1_builder_init,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN11Application13ScreenResizedEiii17ScreenOrientation,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZN11ApplicationD2Ev,__ZN11ApplicationD0Ev,__ZN11Application6RenderEv,__ZN10VoidEvent4I8Graphicsiii17ScreenOrientationE12EventHandlerD2Ev,__ZN10VoidEvent4I8Graphicsiii17ScreenOrientationE17ClassEventHandlerI11ApplicationED0Ev,__ZN9MainClassD2Ev,__ZN9MainClassD0Ev,__ZN9MainClass6RenderEv,_tt_driver_done,_tt_face_done,_tt_size_done,_T1_Driver_Done,_T1_Face_Done,_T1_Size_Done,_T1_GlyphSlot_Done,_cff_driver_done,_cff_face_done,_cff_size_done,_cff_slot_done,_cff_cmap_encoding_done,_cff_cmap_unicode_done,_cid_driver_done,_cid_face_done,_cid_size_done,_cid_slot_done,_pfr_cmap_done,_pfr_face_done,_pfr_slot_done
,_T42_Driver_Done,_T42_Face_Done,_T42_Size_Done,_T42_GlyphSlot_Done,_FNT_Face_Done,_pcf_cmap_done,_PCF_Face_Done,_bdf_cmap_done,_BDF_Face_Done,_tt_cmap14_done,_sfnt_done_face,_tt_face_free_name,_tt_face_free_hdmx_stub,_tt_face_free_sbit_stub,_tt_face_free_ps_names,_tt_face_free_eblc,_af_autofitter_done,_ps_hinter_done,_ft_black_done,_gray_raster_done,_ps_table_done,_ps_table_release,_ps_parser_done,_ps_parser_skip_spaces,_ps_parser_skip_PS_token,_t1_builder_done,_t1_builder_close_contour,_t1_decoder_done,_afm_parser_done,_t1_cmap_std_done
,_t1_cmap_custom_done,_t1_cmap_unicode_done,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN6StringD2Ev,__ZN5ArrayI6String9StdCAllocED2Ev,__ZN5ArrayIPKc9StdCAllocED2Ev,__ZNSt3__113__vector_baseI6StringNS_9allocatorIS1_EEED2Ev,_memory_stream_close,_TT_Forget_Glyph_Frame,_af_face_globals_free,_psh_globals_destroy,_t1_hints_open,_t2_hints_open,_Vertical_Sweep_Step,_Horizontal_Sweep_Step,_Split_Conic,_Split_Cubic,_gray_record_cell,_ft_gzip_stream_close,_ft_lzw_stream_close,_ft_ansi_stream_close,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup528,_cleanup533
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiiiiiiii = [b4,_t1_decoder_init];
var FUNCTION_TABLE_vii = [b5,__ZN11Application6UpdateERK4Time,__ZN9MainClass6UpdateERK4Time,_t1_parse_font_matrix,_parse_encoding,_parse_subrs,_parse_charstrings,_parse_private,_parse_blend_design_positions,_parse_blend_design_map,_parse_blend_axis_types,_parse_weight_vector,_parse_buildchar,_t42_parse_font_matrix,_t42_parse_encoding,_t42_parse_charstrings,_t42_parse_sfnts,_af_latin_metrics_scale,_af_cjk_metrics_scale,_af_indic_metrics_scale,_ps_parser_to_token,_ps_hints_t1reset,_ft_gzip_free,_ft_free,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,_tt_find_sbit_image,_ps_unicodes_init,b6];
var FUNCTION_TABLE_ii = [b7,__ZN11Application4MainEv,__ZN9MainClass4MainEv,_tt_driver_init,_tt_size_init,_tt_slot_init,_T1_Driver_Init,_T1_Size_Init,_T1_GlyphSlot_Init,_t1_get_ps_name,_t1_ps_has_glyph_names,_cff_driver_init,_cff_size_init,_cff_slot_init,_cff_cmap_encoding_init,_cff_cmap_unicode_init,_cff_parse_font_matrix,_cff_parse_font_bbox,_cff_parse_private_dict,_cff_parse_cid_ros,_cff_ps_has_glyph_names,_cff_get_ps_name,_cid_driver_init,_cid_size_init,_cid_slot_init,_cid_get_postscript_name,_pfr_cmap_init,_pfr_slot_init,_T42_Driver_Init
,_T42_Size_Init,_T42_GlyphSlot_Init,_t42_get_ps_font_name,_t42_ps_has_glyph_names,_fnt_cmap_init,_sfnt_get_ps_name,_af_autofitter_init,_ps_hinter_init,_pshinter_get_globals_funcs,_pshinter_get_t1_funcs,_pshinter_get_t2_funcs,_ft_raster1_init,_ft_smooth_init,_ps_parser_to_int,_t1_builder_add_contour,_afm_parser_parse,_t1_cmap_standard_init,_t1_cmap_expert_init,_t1_cmap_custom_init,_t1_cmap_unicode_init,_ps_unicode_value,_ps_get_macintosh_name,_ps_get_standard_strings,__ZNKSt9bad_alloc4whatEv,___stdio_close,_TT_Load_Glyph_Header,_TT_Load_Simple_Glyph,_TT_Load_Composite_Glyph,_TT_RunIns,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viii = [b8,_ft_black_reset,_ft_black_set_mode,_ft_raster1_get_cbox,_gray_raster_reset,_ft_smooth_get_cbox,_t1_decrypt,_destroy_face,_destroy_size,_Write_CVT_Stretched,_Write_CVT,_Move_CVT_Stretched,_Move_CVT,_t1_hints_stem,_ps_hints_t1stem3,_ps_hints_t2counter,_Vertical_Sweep_Init,_Horizontal_Sweep_Init,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_v = [b9,__ZL25default_terminate_handlerv,_EmscriptenRenderWindow,_EmscriptenQuitApplication,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b9,b9,b9];
var FUNCTION_TABLE_iiiii = [b10,_tt_glyph_load,_tt_get_kerning,_T1_Load_Glyph,_Get_Kerning,_t1_get_glyph_name,_T1_Get_Track_Kerning,_cff_glyph_load,_cff_get_kerning,_cff_get_glyph_name,_cff_get_ros,_cid_slot_load_glyph,_cid_get_ros,_pfr_face_get_kerning,_pfr_slot_load,_pfr_get_kerning,_T42_GlyphSlot_Load,_t42_get_glyph_name,_FNT_Load_Glyph,_PCF_Glyph_Load,_BDF_Glyph_Load,_tt_cmap14_char_var_index,_tt_face_goto_table,_tt_face_load_sfnt_header_stub,_tt_face_set_sbit_strike_stub,_sfnt_get_glyph_name,_ft_raster1_render,_ft_raster1_transform,_ft_smooth_render
,_ft_smooth_transform,_ft_smooth_render_lcd,_ft_smooth_render_lcd_v,_gray_cubic_to,_ps_table_add,_ps_parser_to_fixed_array,_afm_parser_init,_TT_Access_Glyph_Frame,_FT_CMap_New,_ps_hints_apply,_ft_gzip_stream_io,_ft_lzw_stream_io,_ft_ansi_stream_io,_ft_realloc,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiii = [b11,__ZN10VoidEvent4I8Graphicsiii17ScreenOrientationE17ClassEventHandlerI11ApplicationE6InvokeEPS0_iiiS1_,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,_Vertical_Sweep_Span,_Vertical_Sweep_Drop,_Horizontal_Sweep_Span,_Horizontal_Sweep_Drop];
var FUNCTION_TABLE_iii = [b12,__ZN9MainClass4MainER14ProgramOptions,_tt_get_interface,_tt_size_request,_tt_size_select,_TT_Get_MM_Var,_Get_Interface,_T1_Read_Metrics,_T1_Size_Request,_t1_get_name_index,_t1_ps_get_font_info,_t1_ps_get_font_extra,_t1_ps_get_font_private,_T1_Get_Multi_Master,_T1_Get_MM_Var,_cff_get_interface,_cff_size_request,_cff_size_select,_cff_cmap_encoding_char_index,_cff_cmap_encoding_char_next,_cff_cmap_unicode_char_index,_cff_cmap_unicode_char_next,_cff_ps_get_font_info,_cff_get_name_index,_cff_get_cmap_info,_cff_get_is_cid,_cid_get_interface,_cid_size_request,_parse_fd_array
,_cid_parse_font_matrix,_parse_expansion_factor,_cid_ps_get_font_info,_cid_ps_get_font_extra,_cid_get_is_cid,_pfr_cmap_char_index,_pfr_cmap_char_next,_pfr_get_service,_T42_Get_Interface,_T42_Size_Request,_T42_Size_Select,_t42_get_name_index,_t42_ps_get_font_info,_t42_ps_get_font_extra,_t42_ps_get_font_private,_winfnt_get_service,_FNT_Size_Request,_FNT_Size_Select,_fnt_cmap_char_index,_fnt_cmap_char_next,_winfnt_get_header,_pcf_cmap_init,_pcf_cmap_char_index,_pcf_cmap_char_next,_pcf_driver_requester,_PCF_Size_Request,_PCF_Size_Select,_bdf_cmap_init,_bdf_cmap_char_index,_bdf_cmap_char_next
,_bdf_driver_requester,_BDF_Size_Request,_BDF_Size_Select,_tt_cmap_init,_tt_cmap0_char_index,_tt_cmap0_char_next,_tt_cmap0_validate,_tt_cmap0_get_info,_tt_cmap2_char_index,_tt_cmap2_char_next,_tt_cmap2_validate,_tt_cmap2_get_info,_tt_cmap4_init,_tt_cmap4_char_index,_tt_cmap4_char_next,_tt_cmap4_validate,_tt_cmap4_get_info,_tt_cmap6_char_index,_tt_cmap6_char_next,_tt_cmap6_validate,_tt_cmap6_get_info,_tt_cmap8_char_index,_tt_cmap8_char_next,_tt_cmap8_validate,_tt_cmap8_get_info,_tt_cmap10_char_index,_tt_cmap10_char_next,_tt_cmap10_validate,_tt_cmap10_get_info,_tt_cmap12_init
,_tt_cmap12_char_index,_tt_cmap12_char_next,_tt_cmap12_validate,_tt_cmap12_get_info,_tt_cmap13_init,_tt_cmap13_char_index,_tt_cmap13_char_next,_tt_cmap13_validate,_tt_cmap13_get_info,_tt_cmap14_init,_tt_cmap14_char_index,_tt_cmap14_char_next,_tt_cmap14_variants,_tt_cmap14_validate,_tt_cmap14_get_info,_sfnt_get_interface,_tt_face_load_head,_tt_face_load_cmap,_tt_face_load_maxp,_tt_face_load_os2,_tt_face_load_post,_tt_face_load_name,_tt_face_load_hdmx_stub,_tt_face_load_kern,_tt_face_load_gasp,_tt_face_load_pclt,_tt_face_load_bhed,_tt_face_load_sbit_stub,_tt_face_free_charmap_stub,_tt_face_load_font_dir
,_tt_face_load_eblc,_get_sfnt_table,_sfnt_get_name_index,_tt_get_cmap_info,_af_dummy_hints_init,_af_dummy_hints_apply,_af_latin_metrics_init,_af_latin_hints_init,_af_cjk_metrics_init,_af_cjk_hints_init,_af_indic_metrics_init,_af_indic_hints_init,_ft_black_new,_ft_black_render,_gray_raster_new,_gray_raster_render,_gray_move_to,_gray_line_to,_ps_parser_to_fixed,_t1_builder_check_points,_t1_cmap_std_char_index,_t1_cmap_std_char_next,_t1_cmap_custom_char_index,_t1_cmap_custom_char_next,_t1_cmap_unicode_char_index,_t1_cmap_unicode_char_next,_psnames_get_service,_ps_unicodes_char_index,_ps_unicodes_char_next,_ft_raccess_sort_ref_by_id
,_Read_CVT_Stretched,_Read_CVT,_T1_Parse_Glyph,_compare_kern_pairs,_cff_sid_to_glyph_name,_cid_load_glyph,_by_encoding,_tt_name_entry_ascii_from_utf16,_tt_name_entry_ascii_from_other,_ps_hints_close,_afm_compare_kern_pairs,_psaux_get_glyph_name,_compare_uni_maps,_ft_alloc,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_iiiiii = [b13,_raccess_guess_apple_double,_raccess_guess_apple_single,_raccess_guess_darwin_ufs_export,_raccess_guess_darwin_newvfs,_raccess_guess_darwin_hfsplus,_raccess_guess_vfat,_raccess_guess_linux_cap,_raccess_guess_linux_double,_raccess_guess_linux_netatalk,_tt_face_init,_ft_stub_set_char_sizes,_tt_get_advances,_T1_Face_Init,_T1_Get_Advances,_t1_ps_get_font_value,_cff_face_init,_cff_get_advances,_cid_face_init,_pfr_get_metrics,_pfr_face_init,_T42_Face_Init,_FNT_Face_Init,_PCF_Face_Init,_BDF_Face_Init,_sfnt_init_face,_sfnt_load_face,_tt_face_load_any,_tt_face_get_metrics
,_sfnt_table_info,_af_autofitter_load_glyph,_ps_parser_to_bytes,_ps_parser_load_field,_ps_parser_load_field_table,__bdf_parse_start,__bdf_parse_properties,__bdf_parse_glyphs,_psh_globals_set_scale,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_viiii = [b14,_ps_parser_init,_ps_parser_to_token_array,_t1_builder_add_point,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,_Direct_Move,_Direct_Move_Orig,_Direct_Move_X,_Direct_Move_Orig_X,_Direct_Move_Y,_Direct_Move_Orig_Y,_ft_validator_init,_t2_hints_stems,_ps_hints_t2mask,_gray_render_span];

  return { _testSetjmp: _testSetjmp, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _saveSetjmp: _saveSetjmp, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, _i64Subtract: _i64Subtract, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_File_cpp: __GLOBAL__sub_I_File_cpp, __GLOBAL__sub_I_MathFunc_cpp: __GLOBAL__sub_I_MathFunc_cpp, __GLOBAL__sub_I_Clock_cpp: __GLOBAL__sub_I_Clock_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var __GLOBAL__sub_I_MathFunc_cpp = Module["__GLOBAL__sub_I_MathFunc_cpp"] = asm["__GLOBAL__sub_I_MathFunc_cpp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var __GLOBAL__sub_I_File_cpp = Module["__GLOBAL__sub_I_File_cpp"] = asm["__GLOBAL__sub_I_File_cpp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var __GLOBAL__sub_I_Clock_cpp = Module["__GLOBAL__sub_I_Clock_cpp"] = asm["__GLOBAL__sub_I_Clock_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
Runtime.stackAlloc = asm["stackAlloc"];
Runtime.stackSave = asm["stackSave"];
Runtime.stackRestore = asm["stackRestore"];
Runtime.establishStackSpace = asm["establishStackSpace"];
Runtime.setTempRet0 = asm["setTempRet0"];
Runtime.getTempRet0 = asm["getTempRet0"];
if (memoryInitializer) {
 if (typeof Module["locateFile"] === "function") {
  memoryInitializer = Module["locateFile"](memoryInitializer);
 } else if (Module["memoryInitializerPrefixURL"]) {
  memoryInitializer = Module["memoryInitializerPrefixURL"] + memoryInitializer;
 }
 if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
  var data = Module["readBinary"](memoryInitializer);
  HEAPU8.set(data, Runtime.GLOBAL_BASE);
 } else {
  addRunDependency("memory initializer");
  var applyMemoryInitializer = (function(data) {
   if (data.byteLength) data = new Uint8Array(data);
   HEAPU8.set(data, Runtime.GLOBAL_BASE);
   removeRunDependency("memory initializer");
  });
  var request = Module["memoryInitializerRequest"];
  if (request) {
   if (request.response) {
    setTimeout((function() {
     applyMemoryInitializer(request.response);
    }), 0);
   } else {
    request.addEventListener("load", (function() {
     if (request.status !== 200 && request.status !== 0) {
      console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status);
     }
     if (!request.response || typeof request.response !== "object" || !request.response.byteLength) {
      console.warn("a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): " + request.response);
     }
     applyMemoryInitializer(request.response);
    }));
   }
  } else {
   Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, (function() {
    throw "could not load memory initializer " + memoryInitializer;
   }));
  }
 }
}
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"]) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
 assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
 assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
 args = args || [];
 ensureInitRuntime();
 var argc = args.length + 1;
 function pad() {
  for (var i = 0; i < 4 - 1; i++) {
   argv.push(0);
  }
 }
 var argv = [ allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL) ];
 pad();
 for (var i = 0; i < argc - 1; i = i + 1) {
  argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
  pad();
 }
 argv.push(0);
 argv = allocate(argv, "i32", ALLOC_NORMAL);
 initialStackTop = Runtime.stackSave();
 try {
  var ret = Module["_main"](argc, argv, 0);
  exit(ret, true);
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "SimulateInfiniteLoop") {
   Module["noExitRuntime"] = true;
   Runtime.stackRestore(initialStackTop);
   return;
  } else {
   if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
   throw e;
  }
 } finally {
  calledMain = true;
 }
};
function run(args) {
 args = args || Module["arguments"];
 if (preloadStartTime === null) preloadStartTime = Date.now();
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  if (Module["_main"] && shouldRunNow) Module["callMain"](args);
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = Module.run = run;
function exit(status, implicit) {
 if (implicit && Module["noExitRuntime"]) {
  return;
 }
 if (Module["noExitRuntime"]) {} else {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 if (ENVIRONMENT_IS_NODE) {
  process["stdout"]["once"]("drain", (function() {
   process["exit"](status);
  }));
  console.log(" ");
  setTimeout((function() {
   process["exit"](status);
  }), 500);
 } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
  quit(status);
 }
 throw new ExitStatus(status);
}
Module["exit"] = Module.exit = exit;
var abortDecorators = [];
function abort(what) {
 if (what !== undefined) {
  Module.print(what);
  Module.printErr(what);
  what = JSON.stringify(what);
 } else {
  what = "";
 }
 ABORT = true;
 EXITSTATUS = 1;
 var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
 var output = "abort(" + what + ") at " + stackTrace() + extra;
 if (abortDecorators) {
  abortDecorators.forEach((function(decorator) {
   output = decorator(output, what);
  }));
 }
 throw output;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
 shouldRunNow = false;
}
run();
if (typeof window === "object" && (typeof ENVIRONMENT_IS_PTHREAD === "undefined" || !ENVIRONMENT_IS_PTHREAD)) {
 function emrun_register_handlers() {
  function post(msg) {
   var http = new XMLHttpRequest;
   http.open("POST", "stdio.html", true);
   http.send(msg);
  }
  if (document.URL.search("localhost") != -1 || document.URL.search(":6931/") != -1) {
   var emrun_http_sequence_number = 1;
   var prevPrint = Module["print"];
   var prevErr = Module["printErr"];
   function emrun_exit() {
    post("^exit^" + EXITSTATUS);
   }
   Module["addOnExit"](emrun_exit);
   Module["print"] = function emrun_print(text) {
    post("^out^" + emrun_http_sequence_number++ + "^" + encodeURIComponent(text));
    prevPrint(text);
   };
   Module["printErr"] = function emrun_printErr(text) {
    post("^err^" + emrun_http_sequence_number++ + "^" + encodeURIComponent(text));
    prevErr(text);
   };
   post("^pageload^");
  }
 }
 window.addEventListener("load", emrun_register_handlers);
}
function emrun_file_dump(filename, data) {
 var http = new XMLHttpRequest;
 Module["print"]('Dumping out file "' + filename + '" with ' + data.length + " bytes of data.");
 http.open("POST", "stdio.html?file=" + filename, true);
 http.send(data);
}




